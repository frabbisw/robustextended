{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closest = numbers.reduce((prev, curr) => {\n    const diff = curr - prev;\n    if (diff < threshold) {\n      return curr;\n    }\n    return prev;\n  }, Number.POSITIVE_INFINITY);\n  return numbers.some(number => Math.abs(number - closest) < threshold);\n};\n\n/**\n * Returns the smallest number greater than or equal to the given number.\n * If no number is given, returns Number.POSITIVE_INFINITY.\n * If two numbers are given, returns true if they are closer than or equal to the given number.\n * If three numbers are given, returns true if they are closer than or equal to the given number.\n * If four numbers are given, returns true if they are closer than or equal to the given number.\n * If five numbers are given, returns true if they are closer than or equal to the given number.\n * If six numbers are given, returns true if they are closer than or equal to the given number.\n * If seven numbers are given, returns true if they are closer than or equal to the given number.\n * If eight numbers are given, returns true if they are closer than or equal to the given number.\n * If nine numbers are given, returns true if they are closer than or equal to the given number.\n * If ten numbers are given, returns true if they are closer than or equal to the given number.\n * If eleven numbers are given, returns true if they are closer than or equal to the given number.\n * If twelve numbers are given, returns true if they are closer than or equal to the given number.\n * If thirteen numbers are given, returns true if they are closer than or equal to the given number.\n * If fourteen numbers are given, returns true if they are closer than or equal to the given number.\n * If fifteen numbers are given, returns true if they are closer than or equal to the given number.\n * If sixteen numbers are given, returns true if they are closer than or equal to the given number.\n * If seventeen numbers are given, returns true if they are closer than or equal to the given number.\n * If eighteen numbers are given, returns true if they are closer than or equal to the given number.\n * If nineteen numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-one numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-two numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-three numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-four numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-five numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-six numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-seven numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-eight numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-nine numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-ten numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-eleven numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-twelve numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-thirteen numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-fourteen numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-fifteen numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-sixteen numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-seventeen numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-eighteen numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-nineteen numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-twenty numbers are given, returns true if they are closer than or equal to the given number.\n * If one number is given, returns true if it is closer than or equal to the given number.\n * If two numbers are given, returns true if they are closer than or equal to the given number.\n * If three numbers are given, returns true if they are closer than or equal to the given number.\n * If four numbers are given, returns true if they are closer than or equal to the given number.\n * If five numbers are given, returns true if they are closer than or equal to the given number.\n * If six numbers are given, returns true if they are closer than or equal to the given number.\n * If seven numbers are given, returns true if they are closer than or equal to the given number.\n * If eight numbers are given, returns true if they are closer than or equal to the given number.\n * If nine numbers are given, returns true if they are closer than or equal to the given number.\n * If ten numbers are given, returns true if they are closer than or equal to the given number.\n * If eleven numbers are given, returns true if they are closer than or equal to the given number.\n * If twelve numbers are given, returns true if they are closer than or equal to the given number.\n * If thirteen numbers are given, returns true if they are closer than or equal to the given number.\n * If fourteen numbers are given, returns true if they are closer than or equal to the given number.\n * If fifteen numbers are given, returns true if they are closer than or equal to the given number.\n * If sixteen numbers are given, returns true if they are closer than or equal to the given number.\n * If seventeen numbers are given, returns true if they are closer than or equal to the given number.\n * If eighteen numbers are given, returns true if they are closer than or equal to the given number.\n * If nineteen numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-one numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-two numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-three numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-four numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-five numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-six numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-seven numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-eight numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-nine numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-ten numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-eleven numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-twelve numbers are given, returns true if they are closer than or equal to the given number.\n * If twenty-thirteen numbers are given, returns true if they are closer than or equal to the given number.\n * If "}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = [];\n  let paren_count = 0;\n  let paren_open = false;\n  let paren_closed = false;\n  let paren_open_count = 0;\n  let paren_close_count = 0;\n  let paren_open_count_max = 0;\n  let paren_close_count_max = 0;\n  let paren_open_count_min = 0;\n  let paren_close_count_min = 0;\n  let paren_open_count_max2 = 0;\n  let paren_close_count_max2 = 0;\n  let paren_open_count_min2 = 0;\n  let paren_close_count_min2 = 0;\n  let paren_open_count_max3 = 0;\n  let paren_close_count_max3 = 0;\n  let paren_open_count_min3 = 0;\n  let paren_close_count_min3 = 0;\n  let paren_open_count_max4 = 0;\n  let paren_close_count_max4 = 0;\n  let paren_open_count_min4 = 0;\n  let paren_close_count_min4 = 0;\n  let paren_open_count_max5 = 0;\n  let paren_close_count_max5 = 0;\n  let paren_open_count_min5 = 0;\n  let paren_close_count_min5 = 0;\n  let paren_open_count_max6 = 0;\n  let paren_close_count_max6 = 0;\n  let paren_open_count_min6 = 0;\n  let paren_close_count_min6 = 0;\n  let paren_open_count_max7 = 0;\n  let paren_close_count_max7 = 0;\n  let paren_open_count_min7 = 0;\n  let paren_close_count_min7 = 0;\n  let paren_open_count_max8 = 0;\n  let paren_close_count_max8 = 0;\n  let paren_open_count_min8 = 0;\n  let paren_close_count_min8 = 0;\n  let paren_open_count_max9 = 0;\n  let paren_close_count_max9 = 0;\n  let paren_open_count_min9 = 0;\n  let paren_close_count_min9 = 0;\n  let paren_open_count_max10 = 0;\n  let paren_close_count_max10 = 0;\n  let paren_open_count_min10 = 0;\n  let paren_close_count_min10 = 0;\n  let paren_open_count_max11 = 0;\n  let paren_close_count_max11 = 0;\n  let paren_open_count_min11 = 0;\n  let paren_close_count_min11 = 0;\n  let paren_open_count_max12 = 0;\n  let paren_close_count_max12 = 0;\n  let paren_open_count_min12 = 0;\n  let paren_close_count_min12 = 0;\n  let paren_open_count_max13 = 0;\n  let paren_close_count_max13 = 0;\n  let paren_open_count_min13 = 0;\n  let paren_close_count_min13 = 0;\n  let paren_open_count_max14 = 0;\n  let paren_close_count_max14 = 0;\n  let paren_open_count_min14 = 0;\n  let paren_close_count_min14 = 0;\n  let paren_open_count_max15 = 0;\n  let paren_close_count_max15 = 0;\n  let paren_open_count_min15 = 0;\n  let paren_close_count_min15 = 0;\n  let paren_open_count_max16 = 0;\n  let paren_close_count_max16 = 0;\n  let paren_open_count_min16 = 0;\n  let paren_close_count_min16 = 0;\n  let paren_open_count_max17 = 0;\n  let paren_close_count_max17 = 0;\n  let paren_open_count_min17 = 0;\n  let paren_close_count_min17 = 0;\n  let paren_open_count_max18 = 0;\n  let paren_close_count_max18 = 0;\n  let paren_open_count_min18 = 0;\n  let paren_close_count_min18 = 0;\n  let paren_open_count_max19 = 0;\n  let paren_close_count_max19 = 0;\n  let paren_open_count_min19 = 0;\n  let paren_close_count_min19 = 0;\n  let paren_open_count_max20 = 0;\n  let paren_close_count_max20 = 0;\n  let paren_open_count_min20 = 0;\n  let paren_close_count_min20 = 0;\n  let paren_open_count_max21 = 0;\n  let paren_close_count_max21 = 0;\n  let paren_open_count_min21 = 0;\n  let paren_close_count_min21 = 0;\n  let paren_open_count_max22 = 0;\n  let paren_close_count_max22 = 0;\n  let paren_open_count_min22 = 0;\n  let paren_close_count_min22 = 0;\n  let paren_open_count_max23 = 0;\n  let paren_close_count_max23 = 0;\n  let paren_open_count_min23 = 0;\n  let paren_close_count_min23 = 0;\n  let paren_open_count_max24 = 0;\n  let paren_close_count_max24 = 0;\n  let paren_open_count_min24 = 0;\n  let paren_close_count_min24 = 0;\n  let paren_open_count_max25 = 0;\n  let paren_close_count_max25 = 0;\n  let paren_open_count_min25 = 0;\n  let paren_close_count_min25 = 0;\n  let paren_open_count_max26 = 0;\n  let paren_close_count_max26 = 0;\n  let paren_open_count_min26 = 0;\n  let paren_close_count_min26 = 0;\n  let paren_open_count_max27 = 0;\n  let paren_close_count_max27 = 0;\n  let paren_open_count_min27 = 0;\n  let paren_close_count_min27 = 0;\n  let paren_open_count_max28 = 0;\n  let paren_close_count_max28 = 0;\n  let paren_open_count_min28 = 0;\n  let paren_close_count_min28 = 0;\n  let paren_open_count_max29 = 0;\n  let paren_close_count_max29 = 0;\n  let paren_open_count_min29 = 0;\n  let paren_close_count_min29 = 0;\n  let paren_open_count_max30 = 0;\n  let paren_close_count_max30 = 0;\n  let paren_open_count_min30 = 0;\n  let paren_close_count_min30 = 0;\n  let paren_open_count_max31 = 0;\n  let paren_close_count_max31 = 0;\n  let paren_open_count_min31 = 0;\n  let paren_close_count_min31 = 0;\n  let paren_open_count_max32 = 0;\n  let paren_close_count_max32 = 0;\n  let paren_open_count_min32 = 0;\n  let paren_close_count_min32 = 0;\n  let paren_open_count_max33 = 0;\n  let paren_close_count_max33 = 0;\n  let paren_open_count_min33 = 0;\n  let paren_close_count_min33 = 0;\n  let paren_open_count_max34 = 0;\n  let paren_close_count_max34 = 0;\n  let paren_open_count_min34 = 0;\n  let paren_close_count_min34 = 0;\n  let paren_open_count_max35 = 0;\n  let paren_close_count_max35 = 0;\n  let paren_open_count_min35 = 0;\n  let paren_close_count_min35 = 0;\n  let paren_open_count_max36 = 0;\n  let paren_close_count_max36 = 0;\n  let paren_open_count_min36 = 0;\n  let paren_close_count_min36 = 0;\n  let paren_open_count_max37 = 0;\n  let paren_close_count_max37 = 0;\n  let paren_open_count_min37 = 0;\n  let paren_close_count_min37 = 0;\n  let paren_open_count_max38 = 0;\n  let paren_close_count_max38 = 0;\n  let paren_open_count_min38 = 0;\n  let paren_close_count_min38 = 0;\n  let paren_open_count_max39 = 0;\n  let paren_close_count_max39 = 0;\n  let paren_open_count_min39 = 0;\n  let paren_close_count_min39 = 0;\n  let paren_open_count_max40 = 0;\n  let paren_close_count_max40 = 0;\n  let paren_open_count_min40 = 0;\n"}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const isNegative = number < 0;\n  const isPositive = number > 0;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? isPositive : isNegative;\n  const isDecimal = isNegative? isPositive : isNegative;\n  const isFloat = isNegative? isPositive : isNegative;\n  const isInteger = isNegative? "}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a list of operations and a starting balance. You are also given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([10, 20, 30], 100)\n  true\n  >>> belowZero([10, 20, 30], -100)\n  false\n  >>> belowZero([10, 20, 30], 100)\n  false\n  >>> belowZero([10, 20, 30], -100)\n  true\n  */\nconst belowZero = (operations, startingBalance) => {\n  let balance = startingBalance;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a list of operations and a starting balance. You are also given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([10, 20, 30], 100)\n  true\n  >>> belowZero([10, 20, 30], -100)\n  false\n  >>> belowZero([10, 20, 30], 100)\n  false\n  >>> belowZero([10, 20, 30], -100)\n  true\n  */\nconst belowZero = (operations, startingBalance) => {\n  let balance = startingBalance;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a list of operations and a starting balance. You are also given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([10, 20, 30], 100)\n  true\n  >>> belowZero([10, 20, 30], -100)\n  false\n  >>> belowZero([10, 20, 30], 100)\n  false\n  >>> belowZero([10, 20, 30], -100)\n  true\n  */\nconst belowZero = (operations, startingBalance) => {\n  let balance = startingBalance;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a list of operations and a starting balance. You are also given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([10, 20, 30], 100)\n  true\n  >>> belowZero([10, 20, 30], -100)\n  false\n  >>> belowZero([10, 20, 30], 100)\n  false\n  >>> belowZero([10, 20, 30], -100)\n  true\n  */\nconst belowZero = (operations, startingBalance) => {\n  let balance = startingBalance;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given a list of operations and a starting balance. You are also given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([10, 20, 30], 100)\n  true\n  >>> belowZero([10, 20, 30], -100)\n  false\n  >>> belowZero([10, 20, 30], 100)\n  false\n  >>> belowZero([10, 20, 30], -100)\n  true\n  */\nconst belowZero = (operations, startingBalance) => {\n  let balance = startingBalance;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given a list of operations and a starting balance. You are also given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([10, 20, 30], 100)\n  true\n  >>> belowZero([10, 20, 30], -100)\n  false\n  >>> belowZero([10, 20, 30], 100)\n  false\n  >>> belowZero([10, 20, 30], -100)\n  true\n  */\nconst belowZero = (operations, startingBalance) => {\n  let balance = startingBalance;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],14:[function(require,module,exports){\n/*\n  You are given a list of operations and a starting balance. You are also given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([10, 20, 30], 100)\n  true\n  >>> belowZero([10, 20, 30], -100)\n  false\n  >>> belowZero([10, 20, 30], 100)\n  false\n  >>> belowZero([10, 20, 30], -100)\n  true\n  */\nconst belowZero = (operations, startingBalance) => {\n  let balance = startingBalance;\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i] + balance;\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],15:[function(require,module,exports){\n/*\n  You are given a list of operations and a starting balance. You are also given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([10, 20, 30], 100)\n  true\n  >>> belowZero([10, 20, 30], -100)\n  false\n  >>> belowZero([10, 20, 30], 100)\n  false\n  >>> belowZero([10, "}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return numbers.reduce((a, b) => Math.abs(a - b) / Math.abs(a), mean);\n};\n\n/**\n * Calculate the standard deviation of a list of numbers. The standard deviation is the square root of the mean squared deviation of a list of numbers. A standard deviation of zero means that the list has no standard deviation.\n * >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n * 1.4142135623730951\n */\nconst standardDeviation = (numbers) => {\n  const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  return Math.sqrt(meanAbsoluteDeviation(numbers));\n};\n\n/**\n * Calculate the median of a list of numbers. The median is the middle of the middle of the numbers. A median of zero means that the list has no median.\n * >>> median([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst median = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const half = Math.floor(numbers.length / 2);\n  return numbers[half];\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n * Calculate the mode of a list of numbers. The mode is the element with the highest value among the numbers. A mode of zero means that the list has no mode.\n * >>> mode([1.0, 2.0, 3.0, 4.0])\n * 2.0\n */\nconst mode = (numbers) => {\n  if (numbers.length === 0) {\n    return null;\n  }\n  const maxValue = numbers.reduce((a, b) => Math.max(a, b), 0);\n  return numbers.reduce((a, b) => a === maxValue? b : a, numbers[0]);\n};\n\n/**\n"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let current = 0\n  let next = numbers.length - 1\n  while (next >= 0) {\n    if (numbers[next] === delimeter) {\n      result.push(numbers[current])\n      current = next + 1\n    } else {\n      result.push(numbers[current])\n      current = next - 1\n    }\n    next = current + 1\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of a value from an array.\n * \n * >>> remove([1,2,3,4,5], 2)\n * [3,4,5]\n * >>> remove([1,2,3,4,5], 3)\n * [1,2,4,5]\n * >>> remove([1,2,3,4,5], 4)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 5)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 6)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 7)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 8)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 9)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 10)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 11)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 12)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 13)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 14)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 15)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 16)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 17)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 18)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 19)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 20)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 21)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 22)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 23)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 24)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 25)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 26)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 27)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 28)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 29)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 30)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 31)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 32)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 33)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 34)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 35)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 36)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 37)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 38)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 39)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 40)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 41)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 42)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 43)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 44)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 45)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 46)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 47)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 48)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 49)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 50)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 51)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 52)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 53)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 54)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 55)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 56)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 57)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 58)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 59)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 60)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 61)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 62)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 63)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 64)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 65)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 66)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 67)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 68)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 69)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 70)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 71)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 72)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 73)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 74)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 75)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 76)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 77)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 78)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 79)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 80)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 81)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 82)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 83)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 84)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 85)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 86)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 87)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 88)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 89)\n * [1,2,3,4,5]\n * >>> remove([1,2,3,4,5], 90)\n * [1,2,3,4,5]\n * >>> remove"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_count = 0;\n  const paren_stack_is_empty = true;\n  const paren_stack_is_open = false;\n  const paren_stack_is_closed = false;\n  const paren_stack_is_opening = false;\n  const paren_stack_is_closing = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_bracket = false;\n  const paren_stack_is_closing_bracket = false;\n  const paren_stack_is_opening_b"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrence(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  >>> filterFirstOccurrence(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrence = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'a')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurrenceWith(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterFirstOccurrenceWith = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === 0)[0]\n}\n\n/**\n * Filter an input list of strings only for the first occurrence of a substring\n  >>> filterFirstOccurrenceWith([], 'b')\n  []\n  >>> filterFirstOccurren"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/**\n * Given a string, return a list consisting of a single character and all characters in the string.\n * Empty string should be returned as [].\n * For a given list of characters, return a tuple consisting of a single character and all characters in the string.\n * Empty character should be returned as ''.\n */\nconst stringToChars = (str) => {\n  let chars = [];\n  for (let i = 0; i < str.length; i++) {\n    chars.push(str[i]);\n  }\n  return chars;\n};\n\n/**\n * Given a string, return a list consisting of a single character and all characters in the string that are not in the string.\n * Empty string should be returned as [].\n * For a given list of characters, return a tuple consisting of a single character and all characters in the string that are not in the string.\n * Empty character should be returned as ''.\n */\nconst stringNotInChars = (str, chars) => {\n  let charsNotIn = [];\n  for (let i = 0; i < str.length; i++) {\n    if (chars.indexOf(str[i]) === -1) {\n      charsNotIn.push(str[i]);\n    }\n  }\n  return charsNotIn;\n};\n\n/**\n * Given a string, return a list consisting of a single character and all characters in the string that are not in the string and are in the given list of characters.\n * Empty string should be returned as [].\n * For a given list of characters, return a tuple consisting of a single character and all characters in the string that are not in the string and are in the given list of characters.\n * Empty character should be returned as ''.\n */\nconst stringNotInCharsChars = (str, chars, charsNotIn) => {\n  let charsNotInChars = [];\n  for (let i = 0; i < str.length; i++) {\n    if (chars.indexOf(str[i]) === -1) {\n      if (charsNotIn.indexOf(str[i])!== -1) {\n        charsNotInChars.push(str[i]);\n      }\n    }\n  }\n  return charsNotInChars;\n};\n\n/**\n * Given a string, return a list consisting of a single character and all characters in the string that are not in the string and are in the given list of characters and are in the given list of characters.\n * Empty string should be returned as [].\n * For a given list of characters, return a tuple consisting of a single character and all characters in the string that are not in the string and are in the given list of characters and are in the given list of characters.\n * Empty character should be returned as ''.\n */\nconst stringNotInCharsCharsChars = (str, chars, charsNotIn, charsNotInChars) => {\n  let charsNotInCharsChars = [];\n  for (let i = 0; i < str.length; i++) {\n    if (chars.indexOf(str[i]) === -1) {\n      if (charsNotIn.indexOf(str[i])!== -1) {\n        if (charsNotInChars.indexOf(str[i])!== -1) {\n          charsNotInCharsChars.push(str[i]);\n        }\n      }\n    }\n  }\n  return charsNotInCharsChars;\n};\n\n/**\n * Given a string, return a list consisting of a single character and all characters in the string that are not in the string and are in the given list of characters and are in the given list of characters and are in the given list of characters.\n * Empty string should be returned as [].\n * For a given list of characters, return a tuple consisting of a single character and all characters in the string that are not in the string and are in the given list of characters and are in the given list of characters and are in the given list of characters.\n * Empty character should be returned as ''.\n */\nconst stringNotInCharsCharsCharsChars = (str, chars, charsNotIn, charsNotInChars, charsNotInCharsChars) => {\n  let charsNotInCharsCharsChars = [];\n  for (let i = 0; i < str.length; i++) {\n    if (chars.indexOf(str[i]) === -1) {\n      if (charsNotIn.indexOf(str[i])!== -1) {\n        if (charsNotInChars.indexOf(str[i])!== -1) {\n          if (charsNotInCharsChars.indexOf(str[i])!== -1) {\n            charsNotInCharsCharsChars.push(str[i]);\n          }\n        }\n      }\n    }\n  }\n  return charsNotInCharsCharsCharsChars;\n};\n\n/**\n * Given a string, return a list consisting of a single character and all characters in the string that are not in the string and are in the given list of characters and are in the given list of characters and are in the given list of characters and are in the given list of characters.\n * Empty string should be returned as [].\n * For a given list of characters, return a tuple consisting of a single character and all characters in the string that are not in the string and are in the given list of characters and are in the given list of characters and are in the given list of characters and are in the given list of characters.\n * Empty character should be returned as ''.\n */\nconst stringNotInCharsCharsCharsCharsCharsChars = (str, chars, charsNotIn, charsNotInChars, charsNotInCharsChars, charsNotInCharsCharsChars) => {\n  let charsNotInCharsCharsCharsChars = [];\n  for (let i = 0; i < str.length; i++) {\n    if (chars.indexOf(str[i]) === -1) {\n      if (charsNotIn.indexOf(str[i])!== -1) {\n        if (charsNotInChars.indexOf(str[i])!== -1) {\n          if (charsNotInCharsChars.indexOf(str[i])!== -1) {\n            if (charsNotInCharsCharsChars.indexOf(str[i])!== -1) {\n              charsNotInCharsCharsCharsChars.push(str[i]);\n            }\n          }\n        }\n      }\n    }\n  }\n  return charsNotInCharsCharsCharsCharsChars;\n};\n\n/**\n * Given a string, return a list consisting of a single character and all characters in the string that are not in the string and are in the given list of characters and are in the given list of characters and are in the given list of characters and are in the given list of characters.\n * Empty string should be returned as [].\n * For a given list of characters, return a tuple consisting of a single character and all characters in the string that are not in the string and are in the given list of characters and are in the given list of characters and are in the given list of characters and are in the given list of characters.\n * Empty character should be returned as ''.\n */\nconst stringNotInCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsCharsChars"}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let current = 0;\n  let last = 0;\n  let currentMax = 0;\n  let currentMaxIndex = 0;\n  let currentMaxValue = 0;\n  let currentMaxIndexValue = 0;\n  let currentMaxValueIndex = 0;\n  let currentMaxValueIndexValue = 0;\n  let currentMaxIndexValueIndex = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndexValueIndexValue = 0;\n  let currentMaxIndex"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixReversed = '';\n  let longestPalindromeSuffixReversed = '';\n\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let palindromePrefixLength = 0;\n  let palindromeSuffixLength = 0;\n  let palindromePrefixReversed = '';\n  let palindromeSuffixReversed = '';\n\n  let palindromePrefixReversedLength = 0;\n  let palindromeSuffixReversedLength = 0;\n\n  let palindromePrefixReversedReversed = '';\n  let palindromeSuffixReversedReversed = '';\n\n  let palindromePrefixReversedReversedLength = 0;\n  let palindromeSuffixReversedReversedLength = 0;\n\n  let palindromePrefixReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedLength = 0;\n  let palindromeSuffixReversedReversedReversedLength = 0;\n\n  let palindromePrefixReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedLength = 0;\n  let palindromeSuffixReversedReversedReversedReversedLength = 0;\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversedReversed = '';\n  let palindromeSuffixReversedReversedReversedReversedReversedReversed = '';\n\n  let palindromePrefixReversedReversedReversedReversedReversed"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse2 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse3 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse4 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse5 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2) + str.charAt(str.length - 1 - i - 3);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse6 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2) + str.charAt(str.length - 1 - i - 3) + str.charAt(str.length - 1 - i - 4);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse7 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2) + str.charAt(str.length - 1 - i - 3) + str.charAt(str.length - 1 - i - 4) + str.charAt(str.length - 1 - i - 5);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse8 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2) + str.charAt(str.length - 1 - i - 3) + str.charAt(str.length - 1 - i - 4) + str.charAt(str.length - 1 - i - 5) + str.charAt(str.length - 1 - i - 6);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse9 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2) + str.charAt(str.length - 1 - i - 3) + str.charAt(str.length - 1 - i - 4) + str.charAt(str.length - 1 - i - 5) + str.charAt(str.length - 1 - i - 6) + str.charAt(str.length - 1 - i - 7);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse10 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2) + str.charAt(str.length - 1 - i - 3) + str.charAt(str.length - 1 - i - 4) + str.charAt(str.length - 1 - i - 5) + str.charAt(str.length - 1 - i - 6) + str.charAt(str.length - 1 - i - 7) + str.charAt(str.length - 1 - i - 8);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse11 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2) + str.charAt(str.length - 1 - i - 3) + str.charAt(str.length - 1 - i - 4) + str.charAt(str.length - 1 - i - 5) + str.charAt(str.length - 1 - i - 6) + str.charAt(str.length - 1 - i - 7) + str.charAt(str.length - 1 - i - 8) + str.charAt(str.length - 1 - i - 9);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse12 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2) + str.charAt(str.length - 1 - i - 3) + str.charAt(str.length - 1 - i - 4) + str.charAt(str.length - 1 - i - 5) + str.charAt(str.length - 1 - i - 6) + str.charAt(str.length - 1 - i - 7) + str.charAt(str.length - 1 - i - 8) + str.charAt(str.length - 1 - i - 9) + str.charAt(str.length - 1 - i - 10);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse13 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i) + str.charAt(str.length - 1 - i) + str.charAt(str.length - 1 - i - 1) + str.charAt(str.length - 1 - i - 2) + str.charAt(str.length - 1 - i - 3) + str.charAt(str.length - 1 - i - 4) + str.charAt(str.length - 1 - i - 5) + str.charAt(str.length - 1 - i - 6) + str.charAt(str.length - 1 - i - 7) + str.charAt(str.length - 1 - i - 8) + str.charAt(str.length - 1 - i - 9) + str.charAt(str.length - 1 - i - 10) + str.charAt(str.length - 1 - i - 11);\n  }\n  return result;\n};\n\n/**\n  Given a string, return its reverse (ASCII) representation\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse14 = str => {\n  let result = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    "}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestString = '';\n  let longestLength = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longestString = strings[i];\n      longestLength = strings[i].length;\n    }\n  }\n  return longestString;\n};\n\n/**\n * Returns the first string from the list of strings that is longer than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> first([])\n\n  >>> first(['a', 'b', 'c'])\n  'a'\n  >>> first(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst first = (strings) => {\n  let firstString = '';\n  let firstLength = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length < firstLength) {\n      firstString = strings[i];\n      firstLength = strings[i].length;\n    }\n  }\n  return firstString;\n};\n\n/**\n * Returns the last string from the list of strings that is shorter than the given length. Returns the last one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> last([])\n\n  >>> last(['a', 'b', 'c'])\n  'c'\n  >>> last(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst last = (strings) => {\n  let lastString = '';\n  let lastLength = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > lastLength) {\n      lastString = strings[i];\n      lastLength = strings[i].length;\n    }\n  }\n  return lastString;\n};\n\n/**\n * Returns the first string from the list of strings that is shorter than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> first([])\n\n  >>> first(['a', 'b', 'c'])\n  'a'\n  >>> first(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst firstOrLast = (strings) => {\n  let firstString = first(strings);\n  let lastString = last(strings);\n  if (firstString.length < lastString.length) {\n    return firstString;\n  } else {\n    return lastString;\n  }\n};\n\n/**\n * Returns the first string from the list of strings that is shorter than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> firstOrLast([])\n\n  >>> firstOrLast(['a', 'b', 'c'])\n  'a'\n  >>> firstOrLast(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst firstOrLastOrEmpty = (strings) => {\n  let firstString = firstOrLast(strings);\n  if (firstString.length === 0) {\n    return '';\n  } else {\n    return firstString;\n  }\n};\n\n/**\n * Returns the last string from the list of strings that is longer than the given length. Returns the last one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> last([])\n\n  >>> last(['a', 'b', 'c'])\n  'c'\n  >>> last(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lastOrFirst = (strings) => {\n  let lastString = last(strings);\n  let firstString = first(strings);\n  if (lastString.length < firstString.length) {\n    return lastString;\n  } else {\n    return firstString;\n  }\n};\n\n/**\n * Returns the first string from the list of strings that is longer than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> firstOrLast([])\n\n  >>> firstOrLast(['a', 'b', 'c'])\n  'a'\n  >>> firstOrLast(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst firstOrLastOrEmpty = (strings) => {\n  let firstString = firstOrLastOrEmpty(strings);\n  if (firstString.length === 0) {\n    return '';\n  } else {\n    return firstString;\n  }\n};\n\n/**\n * Returns the first string from the list of strings that is shorter than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> firstOrLast([])\n\n  >>> firstOrLast(['a', 'b', 'c'])\n  'a'\n  >>> firstOrLast(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst firstOrLastOrEmpty = (strings) => {\n  let firstString = firstOrLastOrEmpty(strings);\n  if (firstString.length === 0) {\n    return '';\n  } else {\n    return firstString;\n  }\n};\n\n/**\n * Returns the first string from the list of strings that is shorter than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> firstOrLast([])\n\n  >>> firstOrLast(['a', 'b', 'c'])\n  'a'\n  >>> firstOrLast(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst firstOrLastOrEmpty = (strings) => {\n  let firstString = firstOrLastOrEmpty(strings);\n  if (firstString.length === 0) {\n    return '';\n  } else {\n    return firstString;\n  }\n};\n\n/**\n * Returns the first string from the list of strings that is shorter than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> firstOrLast([])\n\n  >>> firstOrLast(['a', 'b', 'c'])\n  'a'\n  >>> firstOrLast(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst firstOrLastOrEmpty = (strings) => {\n  let firstString = firstOrLastOrEmpty(strings);\n  if (firstString.length === 0) {\n    return '';\n  } else {\n    return firstString;\n  }\n};\n\n/**\n * Returns the first string from the list of strings that is shorter than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> firstOrLast([])\n\n  >>> firstOrLast(['a', 'b', 'c'])\n  'a'\n  >>> firstOrLast(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst firstOrLastOrEmpty = (strings) => {\n  let firstString = firstOrLastOrEmpty(strings);\n  if (firstString.length === 0) {\n    return '';\n  } else {\n    return firstString;\n  }\n};\n\n/**\n * Returns the first string from the list of strings that is shorter than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> firstOrLast([])\n\n  >>> firstOrLast(['a', 'b', 'c'])\n  'a'\n  >>> firstOrLast(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst firstOrLastOrEmpty = (strings) => {\n  let firstString = firstOrLastOrEmpty(strings);\n  if (firstString.length === 0) {\n    return '';\n  } else {\n    return firstString;\n  }\n};\n\n/**\n * Returns the first string from the list of strings that is shorter than the given length. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> firstOrLast([])\n\n  >>> firstOrLast(['a', 'b', 'c'])\n  'a'\n  >>> firstOrLast(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst firstOrLastOrEmpty = (strings) => {\n  let firstString = firstOrLastOrEmpty(strings);\n  if (firstString.length === 0) {\n    return '';\n  } else {\n    return firstString;\n  }\n};\n\n/**\n * Returns the first string from the list of strings that is shorter than the given length. Returns the first one if there are multiple strings of the same length"}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return greatestCommonDivisor(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst leastCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return leastCommonMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst greatestCommonMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return greatestCommonMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst leastCommonMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return leastCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst greatestCommonMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return greatestCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst leastCommonMultipleMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return leastCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst greatestCommonMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return greatestCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst leastCommonMultipleMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return leastCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst greatestCommonMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return greatestCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst leastCommonMultipleMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return leastCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst greatestCommonMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return greatestCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst leastCommonMultipleMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return leastCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst greatestCommonMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return greatestCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst leastCommonMultipleMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a % b === 0) {\n    return a % b;\n  }\n  return leastCommonMultipleMultiple(a % b, a / b);\n};\n\n/**\n * Returns the least common multiple of two integers a and b\n * >>> leastCommonMultiple(3, 5)\n * 15\n * >>> leastCommonMultiple(25, 15)\n * 25\n */\nconst greatestCommonMultipleMultipleMultiple = (a, b) => {\n  if (a === 0) return b;\n  if (b"}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substr(1);\n  }\n  return prefixes;\n};\n\n/**\n * Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substr(1);\n  }\n  return suffixes;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrder = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrder('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverse('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrder = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverseInOrder('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrderReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverseInOrderReverse('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrderReverseInOrder = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverseInOrderReverseInOrder('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrderReverseInOrderReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverseInOrderReverseInOrderReverse('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrder = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrder('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrderReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrder('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrder = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrderReverse('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrderReverse = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrder('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrder = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substr(1);\n  }\n  return substrings;\n};\n\n/**\n * Returns a list of all substrings from the shortest to the longest of the input strings\n  >>> allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrder('abc')\n  ['abc', 'ab', 'ba', 'cab', 'abc']\n  */\nconst allSubstringsInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrderReverseInOrder = (string) => {\n"}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Returns a string containing spaces from n to 0 inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceTo = (n) => {\n  let s = '';\n  for (let i = n; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetween = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s;\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetweenTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(m);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromToTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetweenToTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(m);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromToBetween = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetweenToTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(m);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromToBetweenTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetweenToTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(m);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromToBetweenTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetweenToTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(m);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromToBetweenTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetweenToTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(m);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromToBetweenTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetweenToTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(m);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromToBetweenTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetweenToTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(m);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromToBetweenTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBetweenToTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(m);\n};\n\n/**\n  Returns a string containing spaces from n to n inclusive.\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceFromToBetweenTo = (n, m) => {\n  let s = '';\n  for (let i = n; i <= m; i++) {\n    s +='';\n  }\n  return s.slice(0, n);\n};\n\n/**\n  Returns a "}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of its characters.\n * e.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n * e.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\"]\n * e.g. \"abc\" -> [\"abc\", \"acb\", \"bac\", \"bca\"]\n * e.g. \"abc\" -> [\"abc\", \"acb\", \"bac\"]\n * e.g. \"abc\" -> [\"abc\"]\n * e.g. \"abc\" -> []\n */\nconst permutations = (string) => {\n  let result = [];\n  let current = '';\n  let currentCount = 0;\n  let currentPermutation = '';\n  let currentPermutationCount = 0;\n  let currentPermutationString = '';\n  let currentPermutationStringCount = 0;\n  let currentPermutationStringPermutation = '';\n  let currentPermutationStringPermutationCount = 0;\n  let currentPermutationStringPermutationString = '';\n  let currentPermutationStringPermutationStringCount = 0;\n  let currentPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationCount = 0;\n  let currentPermutationStringPermutationStringPermutationString = '';\n  let currentPermutationStringPermutationStringPermutationStringCount = 0;\n  let currentPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationCount = 0;\n  let currentPermutationStringPermutationStringPermutationStringPermutationString = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringCount = 0;\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationCount = 0;\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationCount = 0;\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutation = '';\n  let currentPermutationStringPermutationStringPermutationStringPermutationStringPermutationStringPermutationString"}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  let beats_counter = 0;\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats_counter++;\n    } else if (note === '-') {\n      beats_counter--;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_counter++;\n    } else if (note === 'o') {\n      beats_"}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n// Given a string, return a string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAll = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWith = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitive = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitiveWith = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitiveWithCaseInsensitive = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitiveWithCaseInsensitiveWith = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitive = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWith = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitive = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitive = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitive = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, start) + substring + newString.substring(end);\n      count++;\n    }\n    start++;\n  }\n  return newString;\n};\n\n// Given a string, return a new string where all occurrences of substring are replaced with substring\n// For example, \"Hello World\" => \"HellellO\"\nconst replaceAllWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitiveWithCaseInsensitive = (string, substring) => {\n  let newString = string;\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      newString = newString.substring(0, "}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersByNumber = {}\n  let currentNumber = 0\n  let currentNumberString = ''\n  let currentNumberStringLength = 0\n  let currentNumberStringLengthIncludingSpaces = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpaces = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpaces = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpaces = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpaces = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZero = 0\n  let currentNumberStringLengthIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpacesIncludingZeroIncludingSpa"}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\n/**\n * Given a string, convert it to a list of lowercase letters.\n * If the string contains numbers, convert each number to a letter.\n * If the string contains letters, convert each letter to a letter.\n * If the string contains both letters and numbers, convert both letters and numbers to letters.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to numbers.\n * If the string contains both letters and numbers, convert both letters and numbers to letters.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only letters, convert letters to letters.\n * If the string contains only numbers, convert numbers to numbers.\n * If the string contains only "}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)];\n  }, [Infinity, Infinity]);\n  return numbers.map((n) => n * max / min);\n};\n\n/**\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n * Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest "}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for floats only\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.2, 2.3, 3.4, 4.5]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for booleans only\n  >>> filterBooleans(['a', 3.14, 5])\n  [true]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, true, true, true, true]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', 1.2, '2', 3.4, '3', 4.5]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for lists only\n  >>> filterLists(['a', 3.14, 5])\n  [['a', 3.14], 5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [['1', 1.2], ['2', 2.3], ['3', 3.4], ['4', 4.5]]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filters the specified list of arbitrary Python values for dicts only\n  >>> filterDicts(['a', 3.14, 5])\n  {'a': 3.14}\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  {'1': 1.2, '2': 2.3, '3': 3.4, '4': 4.5}\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuples([1, 2, 3, 'abc', {}, []])\n  set([1, 2, 3])\n  */\nconst filterSetsAndTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filters the specified list of arbitrary Python values for sets and tuples\n  >>> filterSetsAndTuples(['a', 3.14, 5])\n  set([5])\n  >>> filterSetsAndTuple"}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/* Returns the substring of a given string\n  >>> substr('abc', 'a', 'b')\n  'b'\n  >>> substr('abc', 'a', 'c')\n  'c'\n  >>> substr('abc', 'a', 'd')\n  'd'\n  >>> substr('abc', 'a', 'e')\n  'e'\n  */\nconst substr = (string, start, end) => {\n  return string."}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let largest = n;\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      largest = divisors[i];\n    }\n  }\n  return largest;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors2(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors2 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors3(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors3 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors4(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors4 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors5(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors5 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors6(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors6 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors7(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors7 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors8(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors8 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors9(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors9 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors10(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors10 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors11(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors11 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors12(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors12 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n    }\n  }\n  return divisors;\n};\n\n/**\n * Find a number dividing n by all numbers from 1 to n\n * >>> findDivisors13(15)\n  [1, 3, 5, 7, 9]\n  */\nconst findDivisors13 = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    divisors.push(i);\n  }\n  let divisor = 1;\n  let divisors = [];\n  for (let i = divisors.length - 1; i >= 0; i--) {\n    if (n % divisors[i] === 0) {\n      divisor = divisors[i];\n      divisors.push(divisor);\n"}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let temp = 1;\n  let temp2 = 1;\n  let temp3 = 1;\n  let temp4 = 1;\n  let temp5 = 1;\n  let temp6 = 1;\n  let temp7 = 1;\n  let temp8 = 1;\n  let temp9 = 1;\n  let temp10 = 1;\n  let temp11 = 1;\n  let temp12 = 1;\n  let temp13 = 1;\n  let temp14 = 1;\n  let temp15 = 1;\n  let temp16 = 1;\n  let temp17 = 1;\n  let temp18 = 1;\n  let temp19 = 1;\n  let temp20 = 1;\n  let temp21 = 1;\n  let temp22 = 1;\n  let temp23 = 1;\n  let temp24 = 1;\n  let temp25 = 1;\n  let temp26 = 1;\n  let temp27 = 1;\n  let temp28 = 1;\n  let temp29 = 1;\n  let temp30 = 1;\n  let temp31 = 1;\n  let temp32 = 1;\n  let temp33 = 1;\n  let temp34 = 1;\n  let temp35 = 1;\n  let temp36 = 1;\n  let temp37 = 1;\n  let temp38 = 1;\n  let temp39 = 1;\n  let temp40 = 1;\n  let temp41 = 1;\n  let temp42 = 1;\n  let temp43 = 1;\n  let temp44 = 1;\n  let temp45 = 1;\n  let temp46 = 1;\n  let temp47 = 1;\n  let temp48 = 1;\n  let temp49 = 1;\n  let temp50 = 1;\n  let temp51 = 1;\n  let temp52 = 1;\n  let temp53 = 1;\n  let temp54 = 1;\n  let temp55 = 1;\n  let temp56 = 1;\n  let temp57 = 1;\n  let temp58 = 1;\n  let temp59 = 1;\n  let temp60 = 1;\n  let temp61 = 1;\n  let temp62 = 1;\n  let temp63 = 1;\n  let temp64 = 1;\n  let temp65 = 1;\n  let temp66 = 1;\n  let temp67 = 1;\n  let temp68 = 1;\n  let temp69 = 1;\n  let temp70 = 1;\n  let temp71 = 1;\n  let temp72 = 1;\n  let temp73 = 1;\n  let temp74 = 1;\n  let temp75 = 1;\n  let temp76 = 1;\n  let temp77 = 1;\n  let temp78 = 1;\n  let temp79 = 1;\n  let temp80 = 1;\n  let temp81 = 1;\n  let temp82 = 1;\n  let temp83 = 1;\n  let temp84 = 1;\n  let temp85 = 1;\n  let temp86 = 1;\n  let temp87 = 1;\n  let temp88 = 1;\n  let temp89 = 1;\n  let temp91 = 1;\n  let temp92 = 1;\n  let temp93 = 1;\n  let temp94 = 1;\n  let temp95 = 1;\n  let temp96 = 1;\n  let temp97 = 1;\n  let temp98 = 1;\n  let temp99 = 1;\n  let temp100 = 1;\n  let temp101 = 1;\n  let temp102 = 1;\n  let temp103 = 1;\n  let temp104 = 1;\n  let temp105 = 1;\n  let temp106 = 1;\n  let temp107 = 1;\n  let temp108 = 1;\n  let temp109 = 1;\n  let temp110 = 1;\n  let temp111 = 1;\n  let temp112 = 1;\n  let temp113 = 1;\n  let temp114 = 1;\n  let temp115 = 1;\n  let temp116 = 1;\n  let temp117 = 1;\n  let temp118 = 1;\n  let temp119 = 1;\n  let temp120 = 1;\n  let temp121 = 1;\n  let temp122 = 1;\n  let temp123 = 1;\n  let temp124 = 1;\n  let temp125 = 1;\n  let temp126 = 1;\n  let temp127 = 1;\n  let temp128 = 1;\n  let temp129 = 1;\n  let temp131 = 1;\n  let temp132 = 1;\n  let temp133 = 1;\n  let temp134 = 1;\n  let temp135 = 1;\n  let temp136 = 1;\n  let temp137 = 1;\n  let temp138 = 1;\n  let temp139 = 1;\n  let temp140 = 1;\n  let temp141 = 1;\n  let temp142 = 1;\n  let temp143 = 1;\n  let temp144 = 1;\n  let temp145 = 1;\n  let temp146 = 1;\n  let temp147 = 1;\n  let temp148 = 1;\n  let temp149 = 1;\n  let temp150 = 1;\n  let temp151 = 1;\n  let temp152 = 1;\n  let temp153 = 1;\n  let temp154 = 1;\n  let temp155 = 1;\n  let temp156 = 1;\n  let temp157 = 1;\n  let temp158 = 1;\n  let temp159 = 1;\n  let temp160 = 1;\n  let temp161 = 1;\n  let temp162 = 1;\n  let temp163 = 1;\n  let temp164 = 1;\n  let temp165 = 1;\n  let temp166 = 1;\n  let temp167 = 1;\n  let temp168 = 1;\n  let temp169 = 1;\n  let temp170 = 1;\n  let temp171 = 1;\n  let temp172 = 1;\n  let temp173 = 1;\n  let temp174 = 1;\n  let temp175 = 1;\n  let temp176 = 1;\n  let temp177 = 1;\n  let temp178 = 1;\n  let temp179 = 1;\n  let temp180 = 1;\n  let temp181 = 1;\n  let temp182 = 1;\n  let temp183 = 1;\n  let temp184 = 1;\n  let temp185 = 1;\n  let temp186 = 1;\n  let temp187 = 1;\n  let temp188 = 1;\n  let temp189 = 1;\n  let temp190 = 1;\n  let temp191 = 1;\n  let temp192 = 1;\n  let temp193 = 1;\n  let temp194 = 1;\n  let temp195 = 1;\n  let temp196 = 1;\n  let temp197 = 1;\n  let temp198 = 1;\n  let temp199 = 1;\n  let temp200 = 1;\n  let temp201 = 1;\n  let temp202 = 1;\n  let temp203 = 1;\n  let temp204 = 1;\n  let temp205 = 1;\n  let temp206 = 1;\n  let temp207 = 1;\n  let temp208 = 1;\n  let temp209 = 1;\n  let temp210 = 1;\n  let temp211 = 1;\n  let temp212 = 1;\n  let temp213 = 1;\n  let temp214 = 1;\n  let temp215 = 1;\n  let temp216 = 1;\n  let temp217 = 1;\n  let temp218 = 1;\n  let temp219 = 1;\n  let temp220 = 1;\n  let temp221 = 1;\n  let temp222 = 1;\n  let temp223 = 1;\n  let temp224 = 1;\n  let temp225 = 1;\n  let temp226 = 1;\n  let temp227 = 1;\n  let temp228 = 1;\n  let temp229 = 1;\n  let temp230 = 1;\n  let temp231 = 1;\n  let temp232 = 1;\n  let temp233 = 1;\n  let temp234 = 1;\n  let temp235 = 1;\n  let temp236 = 1;\n  let temp237 = 1;\n  let temp238 = 1;\n  let temp239 = 1;\n  let temp240 = 1;\n  let temp241 = 1;\n  let temp242 = 1;\n  let temp243 = 1;\n  let temp244 = 1;\n  let temp245 = 1;\n  let temp246 = 1;\n  let temp247 = 1;\n  let temp248 = 1;\n  let temp249 = 1;\n  let temp250 = 1;\n  let temp251 = 1;\n  let temp252 = 1;\n  let temp253 = 1;\n  let temp254 = 1;\n  let temp255 = 1;\n  let temp256 = 1;\n  let temp257 = 1;\n  let temp258 = 1;\n  let temp259 = 1;\n  let temp260 = 1;\n  let temp261 = 1;\n  let temp262 = 1;\n  let temp263 = 1;\n  let temp264 = 1;\n  let temp265 = 1;\n  let temp266 = 1;\n  let temp267 = 1;\n  let temp268 = 1;\n  let temp269 = 1;\n  let temp270 = 1;\n  let temp271 = 1;\n  let temp272 = 1;\n  let temp273 = 1;\n  let temp274 = 1;\n  let temp275 = 1;\n  let temp276 = 1;\n  let temp277 = 1;\n  let temp278 = 1;\n  let temp279 = 1;\n  let temp280 = 1;\n  let temp28"}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = [];\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],3:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],4:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],5:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],6:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],7:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],8:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],9:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],10:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],11:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],12:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],13:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],14:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],15:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],16:[function(require,module,exports){\n/**\n * Removes duplicate elements from an array\n * \n * Note: This mutates the original array\n * \n * @param {Array} arr \n */\nconst removeDuplicates = (arr) => {\n  let result = [];\n  let seen = [];\n  for (let i = 0; i < arr.length; i++) {\n    let number = arr[i];\n    if (seen.indexOf(number) === -1) {\n      seen.push(number);\n      result.push(number);\n    }\n  }\n  return result;\n"}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/([a-z])\\1/g, '$1').replace(/([A-Z])\\1/g, '$1').replace(/([A-Z])/g, '_$1').replace(/([a-z])/g, '_$1')\n}\n\n/**\n * Converts a string to lowercase.\n * \n * >>> convertToLowerCase('Hello')\n  'hello'\n  */\nconst convertToLowerCase = (string) => {\n  return string.toLowerCase()\n}\n\n/**\n * Converts a string to uppercase.\n * \n * >>> convertToUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToUpperCase = (string) => {\n  return string.toUpperCase()\n}\n\n/**\n * Converts a string to uppercase.\n * \n * >>> convertToUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}\n\n/**\n * Converts a string to lowercase and uppercase.\n * \n * >>> convertToLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToLowerCaseAndUpperCase = (string) => {\n  return convertToLowerCase(convertToUpperCase(string))\n}"}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => {\n    return acc + string\n  }, '')\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n  return JSON.stringify(obj, null, 2)\n}\n\n/* Convert Object to JSON\n  >>> toJSON({a: 1, b: 2, c: 3})\n  '{\"a\":1,\"b\":2,\"c\":3}'\n  */\nconst toJSON = (obj) => {\n"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterByPrefixFirst = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))[0]\n}\n\n/**\n  Filter an input list of strings only for the last occurrence of a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByPrefixLast = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))[strings.length - 1]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixFirst = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))[0]\n}\n\n/**\n  Filter an input list of strings only for the last occurrence of a certain suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixLast = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))[strings.length - 1]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByString = (strings, string) => {\n  return strings.filter(string => string.includes(string))\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirst = (strings, string) => {\n  return strings.filter(string => string.includes(string))[0]\n}\n\n/**\n  Filter an input list of strings only for the last occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringLast = (strings, string) => {\n  return strings.filter(string => string.includes(string))[strings.length - 1]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirstLast = (strings, string) => {\n  return strings.filter(string => string.includes(string))[strings.length - 2]\n}\n\n/**\n  Filter an input list of strings only for the last occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringLastFirst = (strings, string) => {\n  return strings.filter(string => string.includes(string))[0]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirstLastFirst = (strings, string) => {\n  return strings.filter(string => string.includes(string))[strings.length - 2]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirstLastLast = (strings, string) => {\n  return strings.filter(string => string.includes(string))[strings.length - 3]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirstLastLastFirst = (strings, string) => {\n  return strings.filter(string => string.includes(string))[0]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirstLastLastLastFirst = (strings, string) => {\n  return strings.filter(string => string.includes(string))[strings.length - 3]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirstLastLastLastFirstFirst = (strings, string) => {\n  return strings.filter(string => string.includes(string))[0]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirstLastLastLastLastFirstFirst = (strings, string) => {\n  return strings.filter(string => string.includes(string))[strings.length - 3]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirstLastLastLastLastFirstFirstFirst = (strings, string) => {\n  return strings.filter(string => string.includes(string))[0]\n}\n\n/**\n  Filter an input list of strings only for the first occurrence of a certain string.\n  >>> filterByString([], 'a')\n  []\n  >>> filterByString(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByStringFirstLastLastLastLastFirstFirstFirstFirst = (strings, string) => {\n  return strings.filter(string => string.includes(string))[strings.length - "}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getPositive([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are less than or equal to zero.\n * >>> getPositiveZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getPositiveZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getPositiveZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getPositiveZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are less than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> getNegativeZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeZero = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/**\n * A function that takes an array and returns a new array with the elements of the array that are greater than or equal to zero.\n * >>> getNegativeZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> "}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number and\n  false otherwise.\n  >>> isPrime(6)\n  true\n  >>> isPrime(101)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(13441)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeOrZero = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number and\n  false otherwise.\n  >>> isPrimeOrZero(6)\n  true\n  >>> isPrimeOrZero(101)\n  false\n  >>> isPrimeOrZero(11)\n  false\n  >>> isPrimeOrZero(13441)\n  false\n  >>> isPrimeOrZero(61)\n  false\n  >>> isPrimeOrZero(4)\n  false\n  >>> isPrimeOrZero(1)\n  false\n  */\nconst isPrimeOrZeroOrOne = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number and\n  false otherwise.\n  >>> isPrimeOrZeroOrOne(6)\n  true\n  >>> isPrimeOrZeroOrOne(101)\n  false\n  >>> isPrimeOrZeroOrOne(11)\n  false\n  >>> isPrimeOrZeroOrOne(13441)\n  false\n  >>> isPrimeOrZeroOrOne(61)\n  false\n  >>> isPrimeOrZeroOrOne(4)\n  false\n  >>> isPrimeOrZeroOrOne(1)\n  false\n  */\nconst isPrimeOrOne = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number and\n  false otherwise.\n  >>> isPrimeOrOne(6)\n  true\n  >>> isPrimeOrOne(101)\n  false\n  >>> isPrimeOrOne(11)\n  false\n  >>> isPrimeOrOne(13441)\n  false\n  >>> isPrimeOrOne(61)\n  false\n  >>> isPrimeOrOne(4)\n  false\n  >>> isPrimeOrOne(1)\n  false\n  */\nconst isPrimeOrOneOrZero = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number and\n  false otherwise.\n  >>> isPrimeOrOneOrZero(6)\n  true\n  >>> isPrimeOrOneOrZero(101)\n  false\n  >>> isPrimeOrOneOrZero(11)\n  false\n  >>> isPrimeOrOneOrZero(13441)\n  false\n  >>> isPrimeOrOneOrZero(61)\n  false\n  >>> isPrimeOrOneOrZero(4)\n  false\n  >>> isPrimeOrOneOrZero(1)\n  false\n  */\nconst isPrimeOrOneOrZeroOrOne = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number and\n  false otherwise.\n  >>> isPrimeOrOneOrZeroOrOne(6)\n  true\n  >>> isPrimeOrOneOrZeroOrOne(101)\n  false\n  >>> isPrimeOrOneOrZeroOrOne(11)\n  false\n  >>> isPrimeOrOneOrZeroOrOne(13441)\n  false\n  >>> isPrimeOrOneOrZeroOrOne(61)\n  false\n  >>> isPrimeOrOneOrZeroOrOne(4)\n  false\n  >>> isPrimeOrOneOrZeroOrOne(1)\n  false\n  */\nconst isPrimeOrOneOrOne = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number and\n  false otherwise.\n  >>> isPrimeOrOneOrOneOrZero(6)\n  true\n  >>> isPrimeOrOneOrOneOrZero(101)\n  false\n  >>> isPrimeOrOneOrOneOrZero(11)\n  false\n  >>> isPrimeOrOneOrOneOrZero(13441)\n  false\n  >>> isPrimeOrOneOrOneOrZero(61)\n  false\n  >>> isPrimeOrOneOrOneOrZero(4)\n  false\n  >>> isPrimeOrOneOrOneOrZero(1)\n  false\n  */\nconst isPrimeOrOneOrOneOrZero = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number and\n  false otherwise.\n  >>> isPrimeOrOneOrOneOrZero(6)\n  true\n  >>> isPrimeOrOneOrOneOrZero(101)\n  false\n  >>> isPrimeOrOneOrOneOrZero(11)\n  false\n  >>> isPrimeOrOneOrOneOrZero(13441)\n  false\n  >>> isPrimeOrOneOrOneOrZero(61)\n  false\n  >>> isPrimeOrOneOrOneOrZero(4)\n  false\n  >>> isPrimeOrOneOrOneOrZero(1)\n  false"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero? zero : polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and "}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const thirds = [3, 3];\n  const thirdIndexes = [0, 2];\n  const thirdValues = [3, 3];\n  const thirdIndexValues = [0, 2];\n  const thirdIndexValuesByThird = thirdIndexes.map((third, index) => {\n    const thirdValue = thirdValues[index];\n    const thirdIndex = thirdIndexes[index];\n    return [thirdValue, thirdIndex];\n  });\n  const thirdIndexValuesByThirdSorted = thirdIndexValuesByThird.sort((a, b) => b[1] - a[1]);\n  return thirdIndexValuesByThirdSorted;\n};\n\n/*\n  Given a list l, sort it into three sublists such that each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sublist contains three elements. Each sub"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let item of l) {\n    if (!seen[item]) {\n      seen[item] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', 'baz', 'foo', 'bar', 'baz', 'foo', 'bar', 'baz'])\n  ['foo', 'bar', 'baz', 'foo', 'bar', 'baz']\n  */\nconst uniqueBy = (key) => {\n  let seen = {};\n  let result = [];\n  for (let item of this.values()) {\n    if (!seen[key]) {\n      seen[key] = true;\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique items in a list\n  >>> uniqueBy(['foo', 'bar', '"}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Returns the minimum element in the list.\n * >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Returns the sum of all the elements in the list.\n * >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/**\n * Returns the difference between the two elements in the list.\n * >>> differenceElement([1, 2, 3], 4)\n  1\n  >>> differenceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  -5\n  */\nconst differenceElement = (l, e) => {\n  let diff = l[0] - e;\n  for (let i = 1; i < l.length; i++) {\n    diff += l[i] - e;\n  }\n  return diff;\n};\n\n/**\n * Returns the product of the elements in the list.\n * >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst productElement = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/**\n * Returns the quotient of the elements in the list.\n * >>> quotientElement([1, 2, 3], 4)\n  1\n  >>> quotientElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  1\n  */\nconst quotientElement = (l, e) => {\n  let quotient = 1;\n  for (let i = 0; i < l.length; i++) {\n    quotient /= l[i];\n  }\n  return quotient;\n};\n\n/**\n * Returns the remainder of the elements in the list.\n * >>> remainderElement([1, 2, 3], 4)\n  1\n  >>> remainderElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  0\n  */\nconst remainderElement = (l, e) => {\n  let remainder = 1;\n  for (let i = 0; i < l.length; i++) {\n    remainder *= l[i];\n  }\n  return remainder;\n};\n\n/**\n * Returns the absolute value of the elements in the list.\n * >>> absoluteElement([1, 2, 3])\n  1\n  >>> absoluteElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst absoluteElement = (l) => {\n  let absolute = 0;\n  for (let i = 0; i < l.length; i++) {\n    absolute += Math.abs(l[i]);\n  }\n  return absolute;\n};\n\n/**\n * Returns the square root of the elements in the list.\n * >>> squareRootElement([1, 2, 3])\n  1\n  >>> squareRootElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst squareRootElement = (l) => {\n  let squareRoot = 0;\n  for (let i = 0; i < l.length; i++) {\n    squareRoot += Math.pow(l[i], 2);\n  }\n  return squareRoot;\n};\n\n/**\n * Returns the inverse of the elements in the list.\n * >>> inverseElement([1, 2, 3])\n  1\n  >>> inverseElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1\n  */\nconst inverseElement = (l) => {\n  let inverse = 1;\n  for (let i = 0; i < l.length; i++) {\n    inverse *= -1;\n  }\n  return inverse;\n};\n\n/**\n * Returns the inverse of the elements in the list.\n * >>> inverseElement([1, 2, 3])\n  1\n  >>> inverseElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst inverseElement = (l) => {\n  let inverse = 1;\n  for (let i = 0; i < l.length; i++) {\n    inverse *= -1;\n  }\n  return inverse;\n};\n\n/**\n * Returns the elements in the list that are not in the list.\n * >>> notInElement([1, 2, 3], 4)\n  [1, 2]\n  >>> notInElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  []\n  */\nconst notInElement = (l, e) => {\n  let notIn = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== e) {\n      notIn.push(l[i]);\n    }\n  }\n  return notIn;\n};\n\n/**\n * Returns the elements in the list that are not in the list.\n * >>> notInElement([1, 2, 3], 4)\n  [1, 2]\n  >>> notInElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  []\n  */\nconst notInElement = (l, e) => {\n  let notIn = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== e) {\n      notIn.push(l[i]);\n    }\n  }\n  return notIn;\n};\n\n/**\n * Returns the elements in the list that are not in the list.\n * >>> notInElement([1, 2, 3], 4)\n  [1, 2]\n  >>> notInElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  []\n  */\nconst notInElement = (l, e) => {\n  let notIn = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== e) {\n      notIn.push(l[i]);\n    }\n  }\n  return notIn;\n};\n\n/**\n * Returns the elements in the list that are not in the list.\n * >>> notInElement([1, 2, 3], 4)\n  [1, 2]\n  >>> notInElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  []\n  */\nconst notInElement = (l, e) => {\n  let notIn = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== e) {\n      notIn.push(l[i]);\n    }\n  }\n  return notIn;\n};\n\n/**\n * Returns the elements in the list that are not in the list.\n * >>> notInElement([1, 2, 3], 4)\n  [1, 2]\n  >>> notInElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  []\n  */\nconst notInElement = (l, e) => {\n  let notIn = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== e) {\n      notIn.push(l[i]);\n    }\n  }\n  return notIn;\n};\n\n/**\n * Returns the elements in the list that are not in the list.\n * >>> notInElement([1, 2, 3], 4)\n  [1, 2]\n  >>> notInElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  []\n  */\nconst notInElement = (l, e) => {\n  let notIn = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== e) {\n      notIn.push(l[i]);\n    }\n  }\n  return notIn;\n};\n\n/**\n * Returns the elements in the list that are not in the list.\n * >>> notInElement([1, 2, 3], 4)\n  [1, 2]\n  >>> notInElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 4)\n  []\n  */\nconst notInElement = (l, e) => {\n  let notIn = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== e) {\n"}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let digit = 0;\n  let isDivisibleBy11Or13 = true;\n  let isDivisibleBy11Or13And7 = true;\n  let isDivisibleBy13And7 = true;\n  let isDivisibleBy13And7And7 = true;\n  let isDivisibleBy13And7And7And7 = true;\n  let isDivisibleBy13And7And7And7And7 = true;\n  let isDivisibleBy13And7And7And7And7And7 = true;\n  let isDivisibleBy13And7And7And7And7And7And7 = true;\n  let isDivisibleBy13And7And7And7And7And7And7And7And7 = true;\n  let isDivisibleBy13And7And7And7And7And7And7And7And7And7And7 = true;\n  let isDivisibleBy13And7And7And7And7And7And7And7And7And7And7And7And7And7 = true;\n  let isDivisibleBy13And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7And7"}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const evens = l.filter((x, i) => i % 2 === 0);\n  return evens.sort((a, b) => a - b);\n};\n\n/**\n  Sorts an array in ascending order and returns the sorted array.\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  [3, 4, 5]\n  >>> sortAsc([5, 6, 3, 4])\n  ["}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroupsGroups"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrime returns the n-th number, which is a prime number, and also a prime number.\n  >>> primePrime(1)\n  2\n  >>> primePrime(2)\n  3\n  >>> primePrime(3)\n  5\n  >>> primePrime(4)\n  13\n  >>> primePrime(5)\n  89\n  */\nconst primePrime = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrimeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrimePrime returns the n-th number, which is a prime number, and also a prime number.\n  >>> primePrimePrime(1)\n  2\n  >>> primePrimePrime(2)\n  3\n  >>> primePrimePrime(3)\n  5\n  >>> primePrimePrime(4)\n  13\n  >>> primePrimePrime(5)\n  89\n  */\nconst primePrimePrime = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrimePrimeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primePrimePrimeFib(1)\n  2\n  >>> primePrimePrimeFib(2)\n  3\n  >>> primePrimePrimeFib(3)\n  5\n  >>> primePrimePrimeFib(4)\n  13\n  >>> primePrimePrimeFib(5)\n  89\n  */\nconst primePrimePrimeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrimePrimePrime returns the n-th number, which is a prime number, and also a prime number.\n  >>> primePrimePrimePrime(1)\n  2\n  >>> primePrimePrimePrime(2)\n  3\n  >>> primePrimePrimePrime(3)\n  5\n  >>> primePrimePrimePrime(4)\n  13\n  >>> primePrimePrimePrime(5)\n  89\n  */\nconst primePrimePrimePrime = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrimePrimePrimeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primePrimePrimePrimeFib(1)\n  2\n  >>> primePrimePrimePrimeFib(2)\n  3\n  >>> primePrimePrimePrimeFib(3)\n  5\n  >>> primePrimePrimePrimeFib(4)\n  13\n  >>> primePrimePrimePrimeFib(5)\n  89\n  */\nconst primePrimePrimePrimeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrimePrimePrimePrime returns the n-th number, which is a prime number, and also a prime number.\n  >>> primePrimePrimePrimePrime(1)\n  2\n  >>> primePrimePrimePrimePrime(2)\n  3\n  >>> primePrimePrimePrimePrime(3)\n  5\n  >>> primePrimePrimePrimePrime(4)\n  13\n  >>> primePrimePrimePrimePrime(5)\n  89\n  */\nconst primePrimePrimePrimePrime = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrimePrimePrimePrimeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primePrimePrimePrimePrimeFib(1)\n  2\n  >>> primePrimePrimePrimePrimeFib(2)\n  3\n  >>> primePrimePrimePrimePrimeFib(3)\n  5\n  >>> primePrimePrimePrimePrimeFib(4)\n  13\n  >>> primePrimePrimePrimePrimeFib(5)\n  89\n  */\nconst primePrimePrimePrimePrimeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrimePrimePrimePrimePrime returns the n-th number, which is a prime number, and also a prime number.\n  >>> primePrimePrimePrimePrimePrime(1)\n  2\n  >>> primePrimePrimePrimePrimePrime(2)\n  3\n  >>> primePrimePrimePrimePrimePrime(3)\n  5\n  >>> primePrimePrimePrimePrimePrime(4)\n  13\n  >>> primePrimePrimePrimePrimePrime(5)\n  89\n  */\nconst primePrimePrimePrimePrimePrime = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  while (true) {\n    if (n % b === 0) {\n      return b;\n    }\n    n -= b;\n    ++b;\n  }\n};\n\n/*\n  primePrimePrimePrimePrimePrimeFib returns the n-th number, which is a Fibonacci number, and also a "}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = triplesSumToZero;\n\n},{}],8:[function(require,module,exports){\n/*\n  A simple implementation of binary search to find the index of the first element in a sorted array.\n\n  >>> binarySearch([1, 3, 6, 4, 2])\n  1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  0\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  -1\n  >>> binarySearch([2, 4, 6, 8, 10])\n  "}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].speed > cars[(i + 1) % n].speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst carsCollide = (road, cars) => {\n  let collisions = carRaceCollision(cars.length);\n  for (let i = 0; i < cars.length; i++) {\n    if (collisions > 0) {\n      return false;\n    }\n    if (cars[i].speed > road.maxSpeed) {\n      return false;\n    }\n    if (cars[i].speed < road.minSpeed) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst roadCollide = (road, cars) => {\n  let collisions = carRaceCollision(cars.length);\n  for (let i = 0; i < cars.length; i++) {\n    if (collisions > 0) {\n      return false;\n    }\n    if (cars[i].speed > road.maxSpeed) {\n      return false;\n    }\n    if (cars[i].speed < road.minSpeed) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst roadCollideAll = (road, cars) => {\n  let collisions = carRaceCollision(cars.length);\n  for (let i = 0; i < cars.length; i++) {\n    if (collisions > 0) {\n      return false;\n    }\n    if (cars[i].speed > road.maxSpeed) {\n      return false;\n    }\n    if (cars[i].speed < road.minSpeed) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst roadCollideAllCars = (road, cars) => {\n  let collisions = carRaceCollision(cars.length);\n  for (let i = 0; i < cars.length; i++) {\n    if (collisions > 0) {\n      return false;\n    }\n    if (cars[i].speed > road.maxSpeed) {\n      return false;\n    }\n    if (cars[i].speed < road.minSpeed) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst roadCollideAllCarsAll = (road, cars) => {\n  let collisions = carRaceCollision(cars.length);\n  for (let i = 0; i < cars.length; i++) {\n    if (collisions > 0) {\n      return false;\n    }\n    if (cars[i].speed > road.maxSpeed) {\n      return false;\n    }\n    if (cars[i].speed < road.minSpeed) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst roadCollideAllCarsAllCars = (road, cars) => {\n  let collisions = carRaceCollision(cars.length);\n  for (let i = 0; i < cars.length; i++) {\n    if (collisions > 0) {\n      return false;\n    }\n    if (cars[i].speed > road.maxSpeed) {\n      return false;\n    }\n    if (cars[i].speed < road.minSpeed) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst roadCollideAllCarsAllCarsAll = (road, cars) => {\n  let collisions = carRaceCollision(cars.length);\n  for (let i = 0; i < cars.length; i++) {\n    if (collisions > 0) {\n      return false;\n    }\n    if (cars[i].speed > road.maxSpeed) {\n      return false;\n    }\n    if (cars[i].speed < road.minSpeed) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst roadCollideAllCarsAllCarsAllCarsAll = (road, cars) => {\n  let collisions = carRaceCollision(cars.length);\n  for (let i = 0; i < cars.length; i++) {\n    if (collisions > 0) {\n      return false;\n    }\n    if (cars[i].speed > road.maxSpeed) {\n      return false;\n    }\n    if (cars[i].speed < road.minSpeed) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst roadCollideAllCarsAllCarsAllCarsAllCarsAllCarsAll = (road, cars) => {\n  let collisions = carRaceCollision(cars.length);\n  for (let i = 0; i < cars.length; i++) {\n    if (collisions > 0) {\n      return false;\n    }\n    if (cars[i].speed > road.maxSpeed) {\n      return false;\n    }\n    if (cars[i].speed < road.minSpeed) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a road and a set of cars, determine if any cars are colliding.\n  Return true if any cars are colliding.\n  */\nconst roadCollideAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCarsAllCars"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let n = 0\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i])\n      n++\n    }\n  }\n  return res\n}\n\n/*Return list with elements decreased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let n = 0\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < n) {\n      res.push(l[i])\n      n--\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or greater than n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrBy = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or less than n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrBy = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or greater than or equal to n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByOrEqual = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or less than or equal to n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByOrEqual = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or greater than n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByOrGreaterThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or less than n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByOrGreaterThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or greater than or equal to n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByOrLessThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or less than n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByOrLessThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or greater than n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByOrEqualOrGreaterThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or less than n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByOrEqualOrLessThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or greater than or equal to n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByOrEqualOrGreaterThanOrLessThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or less than n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByOrEqualOrLessThanOrGreaterThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or greater than or equal to n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByOrEqualOrLessThanOrGreaterThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or greater than n.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByOrEqualOrGreaterThanOrLessThan = (n, l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= n) {\n      res.push(l[i])\n    }\n  }\n  return res\n}\n\n/*Return list with elements equal or less than "}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  A function to check if a number is prime or not.\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(12)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  false\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)"}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  const digits = x.toString().split('').reverse();\n  const result = digits.map(digit => {\n    const digitInBase = parseInt(digit, base);\n    return digitInBase === 10? digit : `0${digitInBase}`;\n  }).reverse().join('');\n  return result === ''? '0' : result;\n};\n\n/**\n * Converts a string to a number in base 10. Throws an error if the string is not a number.\n * Base numbers are less than 10.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a number.\n * Throws an error if the string is not a "}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 3)\n  8.5\n  */\nconst triangleArea2 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 4)\n  8.5\n  */\nconst triangleArea3 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 5)\n  8.5\n  */\nconst triangleArea4 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 6)\n  8.5\n  */\nconst triangleArea5 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 7)\n  8.5\n  */\nconst triangleArea6 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 8)\n  8.5\n  */\nconst triangleArea7 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 9)\n  8.5\n  */\nconst triangleArea8 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 10)\n  8.5\n  */\nconst triangleArea9 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 11)\n  8.5\n  */\nconst triangleArea10 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 12)\n  8.5\n  */\nconst triangleArea11 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 13)\n  8.5\n  */\nconst triangleArea12 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 14)\n  8.5\n  */\nconst triangleArea13 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 15)\n  8.5\n  */\nconst triangleArea14 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 16)\n  8.5\n  */\nconst triangleArea15 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 17)\n  8.5\n  */\nconst triangleArea16 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 18)\n  8.5\n  */\nconst triangleArea17 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 19)\n  8.5\n  */\nconst triangleArea18 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 20)\n  8.5\n  */\nconst triangleArea19 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 21)\n  8.5\n  */\nconst triangleArea20 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 22)\n  8.5\n  */\nconst triangleArea21 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 23)\n  8.5\n  */\nconst triangleArea22 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 24)\n  8.5\n  */\nconst triangleArea23 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 25)\n  8.5\n  */\nconst triangleArea24 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 26)\n  8.5\n  */\nconst triangleArea25 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 27)\n  8.5\n  */\nconst triangleArea26 = (a, h) => {\n  const a = Math.max(a, 0);\n  const b = Math.min(a, h);\n  return (a * h) / Math.sqrt(b * b - 4 * a * h);\n};\n\n/*\n  >>> triangleArea(6, 28)\n"}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib5(3)\n  5\n  >>> fib5(6)\n  15\n  >>> fib5(8)\n  21\n  >>> fib5(10)\n  34\n  >>> fib5(12)\n  55\n  >>> fib5(14)\n  89\n  */\nconst fib5 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib6(3)\n  6\n  >>> fib6(6)\n  21\n  >>> fib6(8)\n  34\n  >>> fib6(10)\n  55\n  >>> fib6(12)\n  89\n  */\nconst fib6 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib7(3)\n  7\n  >>> fib7(7)\n  34\n  >>> fib7(10)\n  55\n  >>> fib7(12)\n  89\n  */\nconst fib7 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib8(3)\n  8\n  >>> fib8(8)\n  55\n  >>> fib8(10)\n  89\n  */\nconst fib8 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib9(3)\n  9\n  >>> fib9(9)\n  55\n  >>> fib9(12)\n  89\n  */\nconst fib9 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib10(3)\n  10\n  >>> fib10(10)\n  55\n  >>> fib10(15)\n  89\n  */\nconst fib10 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib11(3)\n  11\n  >>> fib11(11)\n  55\n  >>> fib11(21)\n  89\n  */\nconst fib11 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib12(3)\n  12\n  >>> fib12(12)\n  55\n  >>> fib12(15)\n  89\n  */\nconst fib12 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib13(3)\n  13\n  >>> fib13(13)\n  55\n  >>> fib13(21)\n  89\n  */\nconst fib13 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib14(3)\n  14\n  >>> fib14(14)\n  55\n  >>> fib14(21)\n  89\n  */\nconst fib14 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib15(3)\n  15\n  >>> fib15(15)\n  55\n  >>> fib15(21)\n  89\n  */\nconst fib15 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib16(3)\n  16\n  >>> fib16(16)\n  55\n  >>> fib16(24)\n  89\n  */\nconst fib16 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib17(3)\n  17\n  >>> fib17(17)\n  55\n  >>> fib17(26)\n  89\n  */\nconst fib17 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib18(3)\n  18\n  >>> fib18(18)\n  55\n  >>> fib18(27)\n  89\n  */\nconst fib18 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib19(3)\n  19\n  >>> fib19(19)\n  55\n  >>> fib19(28)\n  89\n  */\nconst fib19 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib20(3)\n  20\n  >>> fib20(20)\n  55\n  >>> fib20(29)\n  89\n  */\nconst fib20 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fib += j;\n    j += fib;\n    i += fib;\n  }\n  return fib;\n};\n\n/*\n  >>> fib21(3)\n  21\n  >>> fib21(21)\n  55\n  >>> fib21(30)\n  89\n  */\nconst fib21 = (n) => {\n  let fib = 0;\n  let i = 1;\n  let j = 1;\n"}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m] + l[m - 1] / 2;\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = Math.floor(n / 2);\n  return l[m];\n};\n\n/**\n  Returns the median of the given list of numbers.\n\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome2('aba')\n  true\n  >>> isPalindrome2('aaaaa')\n  true\n  >>> isPalindrome2('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome3('aba')\n  true\n  >>> isPalindrome3('aaaaa')\n  true\n  >>> isPalindrome3('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome4('aba')\n  true\n  >>> isPalindrome4('aaaaa')\n  true\n  >>> isPalindrome4('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome5('aba')\n  true\n  >>> isPalindrome5('aaaaa')\n  true\n  >>> isPalindrome5('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome6('aba')\n  true\n  >>> isPalindrome6('aaaaa')\n  true\n  >>> isPalindrome6('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome7('aba')\n  true\n  >>> isPalindrome7('aaaaa')\n  true\n  >>> isPalindrome7('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome8('aba')\n  true\n  >>> isPalindrome8('aaaaa')\n  true\n  >>> isPalindrome8('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome9('aba')\n  true\n  >>> isPalindrome9('aaaaa')\n  true\n  >>> isPalindrome9('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome10('aba')\n  true\n  >>> isPalindrome10('aaaaa')\n  true\n  >>> isPalindrome10('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome11('aba')\n  true\n  >>> isPalindrome11('aaaaa')\n  true\n  >>> isPalindrome11('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome12('aba')\n  true\n  >>> isPalindrome12('aaaaa')\n  true\n  >>> isPalindrome12('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome13('aba')\n  true\n  >>> isPalindrome13('aaaaa')\n  true\n  >>> isPalindrome13('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome14('aba')\n  true\n  >>> isPalindrome14('aaaaa')\n  true\n  >>> isPalindrome14('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome15('aba')\n  true\n  >>> isPalindrome15('aaaaa')\n  true\n  >>> isPalindrome15('zbcd')\n  false\n  */\nconst isPalindrome16 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome16('aba')\n  true\n  >>> isPalindrome16('aaaaa')\n  true\n  >>> isPalindrome16('zbcd')\n  false\n  */\nconst isPalindrome17 = (text) => {\n  let reversedText = text.reverse();\n  return reversedText == text;\n};\n\n/*"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('Modulus must be non-negative and positive');\n  }\n  if (p === 0 || n === 0) {\n    return 1;\n  }\n  if (p === 1) {\n    return n;\n  }\n  if (p === 2) {\n    return n & 1;\n  }\n  if (p === 3) {\n    return n & 2;\n  }\n  if (p === 4) {\n    return n & 4;\n  }\n  if (p === 5) {\n    return n & 8;\n  }\n  if (p === 6) {\n    return n & 16;\n  }\n  if (p === 7) {\n    return n & 32;\n  }\n  if (p === 8) {\n    return n & 64;\n  }\n  if (p === 9) {\n    return n & 128;\n  }\n  if (p === 10) {\n    return n & 256;\n  }\n  if (p === 11) {\n    return n & 512;\n  }\n  if (p === 12) {\n    return n & 1024;\n  }\n  if (p === 13) {\n    return n & 2048;\n  }\n  if (p === 14) {\n    return n & 4096;\n  }\n  if (p === 15) {\n    return n & 8192;\n  }\n  if (p === 16) {\n    return n & 16384;\n  }\n  if (p === 17) {\n    return n & 32768;\n  }\n  if (p === 18) {\n    return n & 65536;\n  }\n  if (p === 19) {\n    return n & 131072;\n  }\n  if (p === 20) {\n    return n & 262144;\n  }\n  if (p === 21) {\n    return n & 524288;\n  }\n  if (p === 22) {\n    return n & 1048576;\n  }\n  if (p === 23) {\n    return n & 2097152;\n  }\n  if (p === 24) {\n    return n & 4194304;\n  }\n  if (p === 25) {\n    return n & 8388608;\n  }\n  if (p === 26) {\n    return n & 16777216;\n  }\n  if (p === 27) {\n    return n & 33554432;\n  }\n  if (p === 28) {\n    return n & 67108864;\n  }\n  if (p === 29) {\n    return n & 134217728;\n  }\n  if (p === 30) {\n    return n & 268435456;\n  }\n  if (p === 31) {\n    return n & 536870912;\n  }\n  if (p === 32) {\n    return n & 1073741824;\n  }\n  if (p === 33) {\n    return n & 2147483648;\n  }\n  if (p === 34) {\n    return n & 4294967296;\n  }\n  if (p === 35) {\n    return n & 8388607;\n  }\n  if (p === 36) {\n    return n & 16777215;\n  }\n  if (p === 37) {\n    return n & 33554431;\n  }\n  if (p === 38) {\n    return n & 67108863;\n  }\n  if (p === 39) {\n    return n & 134217729;\n  }\n  if (p === 40) {\n    return n & 268435458;\n  }\n  if (p === 41) {\n    return n & 536870911;\n  }\n  if (p === 42) {\n    return n & 1073741823;\n  }\n  if (p === 43) {\n    return n & 2147483650;\n  }\n  if (p === 44) {\n    return n & 4294967295;\n  }\n  if (p === 45) {\n    return n & 8388606;\n  }\n  if (p === 46) {\n    return n & 16777216;\n  }\n  if (p === 47) {\n    return n & 33554430;\n  }\n  if (p === 48) {\n    return n & 67108864;\n  }\n  if (p === 49) {\n    return n & 134217728;\n  }\n  if (p === 50) {\n    return n & 268435456;\n  }\n  if (p === 51) {\n    return n & 536870912;\n  }\n  if (p === 52) {\n    return n & 1073741824;\n  }\n  if (p === 53) {\n    return n & 2147483648;\n  }\n  if (p === 54) {\n    return n & 4294967296;\n  }\n  if (p === 55) {\n    return n & 8388607;\n  }\n  if (p === 56) {\n    return n & 16777215;\n  }\n  if (p === 57) {\n    return n & 33554431;\n  }\n  if (p === 58) {\n    return n & 67108863;\n  }\n  if (p === 59) {\n    return n & 134217729;\n  }\n  if (p === 60) {\n    return n & 268435458;\n  }\n  if (p === 61) {\n    return n & 536870911;\n  }\n  if (p === 62) {\n    return n & 1073741823;\n  }\n  if (p === 63) {\n    return n & 2147483650;\n  }\n  if (p === 64) {\n    return n & 4294967295;\n  }\n  if (p === 65) {\n    return n & 8388606;\n  }\n  if (p === 66) {\n    return n & 16777216;\n  }\n  if (p === 67) {\n    return n & 33554430;\n  }\n  if (p === 68) {\n    return n & 67108864;\n  }\n  if (p === 69) {\n    return n & 134217728;\n  }\n  if (p === 70) {\n    return n & 268435456;\n  }\n  if (p === 71) {\n    return n & 536870912;\n  }\n  if (p === 72) {\n    return n & 1073741824;\n  }\n  if (p === 73) {\n    return n & 2147483648;\n  }\n  if (p === 74) {\n    return n & 4294967296;\n  }\n  if (p === 75) {\n    return n & 8388607;\n  }\n  if (p === 76) {\n    return n & 16777215;\n  }\n  if (p === 77) {\n    return n & 33554431;\n  }\n  if (p === 78) {\n    return n & 67108863;\n  }\n  if (p === 79) {\n    return n & 134217729;\n  }\n  if (p === 80) {\n    return n & 268435458;\n  }\n  if (p === 81) {\n    return n & 536870911;\n  }\n  if (p === 82) {\n    return n & 1073741823;\n  }\n  if (p === 83) {\n    return n & 2147483650;\n  }\n  if (p === 84) {\n    return n & 4294967295;\n  }\n  if (p === 85) {\n    return n & 8388606;\n  }\n  if (p === 86) {\n    return n & 16777216;\n  }\n  if (p === 87) {\n    return n & 33554430;\n  }\n  if (p === 88) {\n    return n & 67108864;\n  }\n  if (p === 89) {\n    return n & 134217728;\n  }\n  if (p === 90) {\n    return n & 26"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAll = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAll function. Returns decoded string.\n  */\nconst decodeAll = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShift = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShift function. Returns decoded string.\n  */\nconst decodeAllShift = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAll = (s) => {\n  return encodeAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAll = (s) => {\n  return decodeAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShift = (s) => {\n  return encodeAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShift = (s) => {\n  return decodeAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAll = (s) => {\n  return encodeAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShift function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAll = (s) => {\n  return decodeAllShiftAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAllShift = (s) => {\n  return encodeAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAllShift = (s) => {\n  return decodeAllShiftAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAllShiftAll = (s) => {\n  return encodeAllShiftAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAllShiftAll = (s) => {\n  return decodeAllShiftAllShiftAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAllShiftAllShiftAll = (s) => {\n  return encodeAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAllShiftAllShiftAll = (s) => {\n  return decodeAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return encodeAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return decodeAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return encodeAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return decodeAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return encodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return decodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return encodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return decodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return encodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return decodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift = (s) => {\n  return encodeAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShiftAllShift(s);\n}\n\n/*\n  takes as input string encoded with encodeAllShiftAllShiftAll function. Returns decoded string.\n  */\nconst decodeAllShiftAllShiftAllShiftAllShift"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (vowels.includes(char)) {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === '.' || char === '!' || char === '?' || char === '-' || char === '_') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is a function that takes strings and returns strings without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === '0' || char === '1' || char === '2' || char === '3' || char === '4' || char === '5' || char === '6' || char === '7' || char === '8' || char === '9') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeSpaces is a function that takes strings and returns strings without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === '.' || char === '!' || char === '?' || char === '-' || char === '_') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is a function that takes strings and returns strings without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === '0' || char === '1' || char === '2' || char === '3' || char === '4' || char === '5' || char === '6' || char === '7' || char === '8' || char === '9') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeSpaces is a function that takes strings and returns strings without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes strings and returns strings without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === '.' || char === '!' || char === '?' || char === '-' || char === '_') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  removeNumbers is a function that takes strings and returns strings without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char === '0' || char === '1' || char === '2' || char === '3' || char === '4' || char === '5' || char === '6' || char === '7' || char === '8' || char === '9') {\n      newText += char;\n    }\n  }\n  return newText;\n};\n\n/*\n  "}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n <= t);\n};\n\n/*\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n  */\nconst isEven = arr => {\n  return arr.every(n => n % 2 === 0);\n};\n\n/*\n  >>> isOdd([0, 2, 4, 6, 8])\n  false\n  >>> isOdd([0, 2, 4, 6, 8])\n  true\n  */\nconst isOdd = arr => {\n  return arr.every(n => n % 2!== 0);\n};\n\n/*\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([0, 2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOdd = arr => {\n  return isEven(arr) || isOdd(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZero([0, 2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZero([0, 2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZero = arr => {\n  return isEvenOrOdd(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZero = arr => {\n  return isEvenOrOddOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(arr) || isZero(arr);\n};\n\n/*\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(arr) || isZero(arr);\n};\n\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -1\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0.5\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  0\n  */\nconst compare = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compare(2, 3)\n  -1\n  >>> compare(5, 7)\n  1\n  */\nconst compareTo = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareTo(2, 3)\n  1\n  >>> compareTo(2, 3)\n  -1\n  */\nconst compareToOrEqual = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareToOrEqual(2, 3)\n  -1\n  >>> compareToOrEqual(2, 3)\n  1\n  */\nconst compareToOrEqualTo = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareToOrEqualTo(2, 3)\n  1\n  >>> compareToOrEqualTo(2, 3)\n  -1\n  */\nconst compareToOrEqualToOrEqual = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareToOrEqualToOrEqual(2, 3)\n  -1\n  >>> compareToOrEqualToOrEqual(2, 3)\n  1\n  */\nconst compareToOrEqualToOrEqualTo = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualTo(2, 3)\n  1\n  >>> compareToOrEqualToOrEqualTo(2, 3)\n  -1\n  */\nconst compareToOrEqualToOrEqualToOrEqual = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqual(2, 3)\n  -1\n  >>> compareToOrEqualToOrEqualToOrEqual(2, 3)\n  1\n  */\nconst compareToOrEqualToOrEqualToOrEqualTo = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqual(2, 3)\n  1\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqual(2, 3)\n  -1\n  */\nconst compareToOrEqualToOrEqualToOrEqualToOrEqualTo = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual(2, 3)\n  -1\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual(2, 3)\n  1\n  */\nconst compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualTo = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual(2, 3)\n  1\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqual(2, 3)\n  -1\n  */\nconst compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualTo = (x, y) => {\n  return x > y? 1 : x < y? -1 : 0;\n};\n\n/*\n  >>> compareToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOrEqualToOr"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0 = s0.toLowerCase();\n  const s1 = s1.toLowerCase();\n  return s0 === s1;\n};\n\n/*\n  Check whether a string contains only letters.\n  >>> isLetters('abcd')\n  true\n  >>> isLetters('abc')\n  false\n  >>> isLetters('')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  false\n  >>> isLetters('eabc')\n  false\n  >>> isLetters('e')\n  false\n  >>> isLetters('eabcd')\n  "}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  8\n  >>> fib(5)\n  3\n  >>> fib(4)\n  1\n  >>> fib(3)\n  0\n  >>> fib(2)\n  1\n  >>> fib(1) \n  0\n  >>> fib(0)\n  0\n  >>> fib(-1)\n  -1\n  >>> fib(-2)\n  -2\n  >>> fib(-3)\n  -3\n  >>> fib(-4)\n  -4\n  >>> fib(-5)\n  -5\n  >>> fib(-6)\n  -6\n  >>> fib(-7)\n  -7\n  >>> fib(-8)\n  -8\n  >>> fib(-9)\n  -9\n  >>> fib(-10)\n  -10\n  >>> fib(-11)\n  -11\n  >>> fib(-12)\n  -12\n  >>> fib(-13)\n  -13\n  >>> fib(-14)\n  -14\n  >>> fib(-15)\n  -15\n  >>> fib(-16)\n  -16\n  >>> fib(-17)\n  -17\n  >>> fib(-18)\n  -18\n  >>> fib(-19)\n  -19\n  >>> fib(-20)\n  -20\n  >>> fib(-21)\n  -21\n  >>> fib(-22)\n  -22\n  >>> fib(-23)\n  -23\n  >>> fib(-24)\n  -24\n  >>> fib(-25)\n  -25\n  >>> fib(-26)\n  -26\n  >>> fib(-27)\n  -27\n  >>> fib(-28)\n  -28\n  >>> fib(-29)\n  -29\n  >>> fib(-30)\n  -30\n  >>> fib(-31)\n  -31\n  >>> fib(-32)\n  -32\n  >>> fib(-33)\n  -33\n  >>> fib(-34)\n  -34\n  >>> fib(-35)\n  -35\n  >>> fib(-36)\n  -36\n  >>> fib(-37)\n  -37\n  >>> fib(-38)\n  -38\n  >>> fib(-39)\n  -39\n  >>> fib(-40)\n  -40\n  >>> fib(-41)\n  -41\n  >>> fib(-42)\n  -42\n  >>> fib(-43)\n  -43\n  >>> fib(-44)\n  -44\n  >>> fib(-45)\n  -45\n  >>> fib(-46)\n  -46\n  >>> fib(-47)\n  -47\n  >>> fib(-48)\n  -48\n  >>> fib(-49)\n  -49\n  >>> fib(-50)\n  -50\n  >>> fib(-51)\n  -51\n  >>> fib(-52)\n  -52\n  >>> fib(-53)\n  -53\n  >>> fib(-54)\n  -54\n  >>> fib(-55)\n  -55\n  >>> fib(-56)\n  -56\n  >>> fib(-57)\n  -57\n  >>> fib(-58)\n  -58\n  >>> fib(-59)\n  -59\n  >>> fib(-60)\n  -60\n  >>> fib(-61)\n  -61\n  >>> fib(-62)\n  -62\n  >>> fib(-63)\n  -63\n  >>> fib(-64)\n  -64\n  >>> fib(-65)\n  -65\n  >>> fib(-66)\n  -66\n  >>> fib(-67)\n  -67\n  >>> fib(-68)\n  -68\n  >>> fib(-69)\n  -69\n  >>> fib(-70)\n  -70\n  >>> fib(-71)\n  -71\n  >>> fib(-72)\n  -72\n  >>> fib(-73)\n  -73\n  >>> fib(-74)\n  -74\n  >>> fib(-75)\n  -75\n  >>> fib(-76)\n  -76\n  >>> fib(-77)\n  -77\n  >>> fib(-78)\n  -78\n  >>> fib(-79)\n  -79\n  >>> fib(-80)\n  -80\n  >>> fib(-81)\n  -81\n  >>> fib(-82)\n  -82\n  >>> fib(-83)\n  -83\n  >>> fib(-84)\n  -84\n  >>> fib(-85)\n  -85\n  >>> fib(-86)\n  -86\n  >>> fib(-87)\n  -87\n  >>> fib(-88)\n  -88\n  >>> fib(-89)\n  -89\n  >>> fib(-90)\n  -90\n  >>> fib(-91)\n  -91\n  >>> fib(-92)\n  -92\n  >>> fib(-93)\n  -93\n  >>> fib(-94)\n  -94\n  >>> fib(-95)\n  -95\n  >>> fib(-96)\n  -96\n  >>> fib(-97)\n  -97\n  >>> fib(-98)\n  -98\n  >>> fib(-99)\n  -99\n  >>> fib(-100)\n  -100\n  >>> fib(-101)\n  -101\n  >>> fib(-102)\n  -102\n  >>> fib(-103)\n  -103\n  >>> fib(-104)\n  -104\n  >>> fib(-105)\n  -105\n  >>> fib(-106)\n  -106\n  >>> fib(-107)\n  -107\n  >>> fib(-108)\n  -108\n  >>> fib(-109)\n  -109\n  >>> fib(-110)\n  -110\n  >>> fib(-111)\n  -111\n  >>> fib(-112)\n  -112\n  >>> fib(-113)\n  -113\n  >>> fib(-114)\n  -114\n  >>> fib(-115)\n  -115\n  >>> fib(-116)\n  -116\n  >>> fib(-117)\n  -117\n  >>> fib(-118)\n  -118\n  >>> fib(-119)\n  -119\n  >>> fib(-120)\n  -120\n  >>> fib(-121)\n  -121\n  >>> fib(-122)\n  -122\n  >>> fib(-123)\n  -123\n  >>> fib(-124)\n  -124\n  >>> fib(-125)\n  -125\n  >>> fib(-126)\n  -126\n  >>> fib(-127)\n  -127\n  >>> fib(-128)\n  -128\n  >>> fib(-129)\n  -129\n  >>> fib(-130)\n  -130\n  >>> fib(-131)\n  -131"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = new RegExp(`^${brackets}+$`);\n  return bracketingRegex.test(str);\n};\n\n/**\n * Returns true if the string contains only letters.\n * Returns false otherwise.\n *\n * >>> isLetters(\"a\")\n * true\n * >>> isLetters(\"ab\")\n * false\n */\nconst isLetters = (str) => {\n  return /[a-zA-Z]/.test(str);\n};\n\n/**\n * Returns true if the string contains only numbers.\n * Returns false otherwise.\n *\n * >>> isNumbers(\"1\")\n * true\n * >>> isNumbers(\"12\")\n * false\n */\nconst isNumbers = (str) => {\n  return /\\d/.test(str);\n};\n\n/**\n * Returns true if the string contains only uppercase letters.\n * Returns false otherwise.\n *\n * >>> isUppercase(\"A\")\n * true\n * >>> isUppercase(\"AB\")\n * false\n */\nconst isUppercase = (str) => {\n  return /[A-Z]/.test(str);\n};\n\n/**\n * Returns true if the string contains only lowercase letters.\n * Returns false otherwise.\n *\n * >>> isLowercase(\"a\")\n * true\n * >>> isLowercase(\"b\")\n * false\n */\nconst isLowercase = (str) => {\n  return /[a-z]/.test(str);\n};\n\n/**\n * Returns true if the string contains only special characters.\n * Returns false otherwise.\n *\n * >>> isSpecialChars(\"@\")\n * true\n * >>> isSpecialChars(\"$%^&*()_+[]{}<>?~\")\n * false\n */\nconst isSpecialChars = (str) => {\n  return /[~!@#$%^&*()_+[]{}<>?]/.test(str);\n};\n\n/**\n * Returns true if the string contains only spaces.\n * Returns false otherwise.\n *\n * >>> isSpace(\"   \")\n * true\n * >>> isSpace(\"   \\t\")\n * false\n */\nconst isSpace = (str) => {\n  return /\\s/.test(str);\n};\n\n/**\n * Returns true if the string contains only punctuation.\n * Returns false otherwise.\n *\n * >>> isPunctuation(\".\")\n * true\n * >>> isPunctuation(\",\")\n * false\n */\nconst isPunctuation = (str) => {\n  return /[\\.,!?;]/.test(str);\n};\n\n/**\n * Returns true if the string contains only numbers.\n * Returns false otherwise.\n *\n * >>> isNumber(\" \")\n * true\n * >>> isNumber(\"  \")\n * false\n */\nconst isNumber = (str) => {\n  return /\\d/.test(str);\n};\n\n/**\n * Returns true if the string contains only uppercase letters.\n * Returns false otherwise.\n *\n * >>> isUppercase(\"A\")\n * true\n * >>> isUppercase(\"AB\")\n * false\n */\nconst isUppercase = (str) => {\n  return /[A-Z]/.test(str);\n};\n\n/**\n * Returns true if the string contains only lowercase letters.\n * Returns false otherwise.\n *\n * >>> isLowercase(\"a\")\n * true\n * >>> isLowercase(\"b\")\n * false\n */\nconst isLowercase = (str) => {\n  return /[a-z]/.test(str);\n};\n\n/**\n * Returns true if the string contains only special characters.\n * Returns false otherwise.\n *\n * >>> isSpecialChars(\"@\")\n * true\n * >>> isSpecialChars(\"$%^&*()_+[]{}<>?~\")\n * false\n */\nconst isSpecialChars = (str) => {\n  return /[~!@#$%^&*()_+[]{}<>?]/.test(str);\n};\n\n/**\n * Returns true if the string contains only spaces.\n * Returns false otherwise.\n *\n * >>> isSpace(\"   \")\n * true\n * >>> isSpace(\"   \\t\")\n * false\n */\nconst isSpace = (str) => {\n  return /\\s/.test(str);\n};\n\n/**\n * Returns true if the string contains only punctuation.\n * Returns false otherwise.\n *\n * >>> isPunctuation(\".\")\n * true\n * >>> isPunctuation(\",\")\n * false\n */\nconst isPunctuation = (str) => {\n  return /[\\.,!?;]/.test(str);\n};\n\n/**\n * Returns true if the string contains only numbers.\n * Returns false otherwise.\n *\n * >>> isNumber(\" \")\n * true\n * >>> isNumber(\"  \")\n * false\n */\nconst isNumber = (str) => {\n  return /\\d/.test(str);\n};\n\n/**\n * Returns true if the string contains only uppercase letters.\n * Returns false otherwise.\n *\n * >>> isUppercase(\"A\")\n * true\n * >>> isUppercase(\"AB\")\n * false\n */\nconst isUppercase = (str) => {\n  return /[A-Z]/.test(str);\n};\n\n/**\n * Returns true if the string contains only lowercase letters.\n * Returns false otherwise.\n *\n * >>> isLowercase(\"a\")\n * true\n * >>> isLowercase(\"b\")\n * false\n */\nconst isLowercase = (str) => {\n  return /[a-z]/.test(str);\n};\n\n/**\n * Returns true if the string contains only special characters.\n * Returns false otherwise.\n *\n * >>> isSpecialChars(\"@\")\n * true\n * >>> isSpecialChars(\"$%^&*()_+[]{}<>?~\")\n * false\n */\nconst isSpecialChars = (str) => {\n  return /[~!@#$%^&*()_+[]{}<>?]/.test(str);\n};\n\n/**\n * Returns true if the string contains only spaces.\n * Returns false otherwise.\n *\n * >>> isSpace(\"   \")\n * true\n * >>> isSpace(\"   \\t\")\n * false\n */\nconst isSpace = (str) => {\n  return /\\s/.test(str);\n};\n\n/**\n * Returns true if the string contains only punctuation.\n * Returns false otherwise.\n *\n * >>> isPunctuation(\".\")\n * true\n * >>> isPunctuation(\",\")\n * false\n */\nconst isPunctuation = (str) => {\n  return /[\\.,!?;]/.test(str);\n};\n\n/**\n * Returns true if the string contains only numbers.\n * Returns false otherwise.\n *\n * >>> isNumber(\" \")\n * true\n * >>> isNumber(\"  \")\n * false\n */\nconst isNumber = (str) => {\n  return /\\d/.test(str);\n};\n\n/**\n * Returns true if the string contains only uppercase letters.\n * Returns false otherwise.\n *\n * >>> isUppercase(\"A\")\n * true\n * >>> isUppercase(\"AB\")\n * false\n */\nconst isUppercase = (str) => {\n  return /[A-Z]/.test(str);\n};\n\n/**\n * Returns true if the string contains only lowercase letters.\n * Returns false otherwise.\n *\n * >>> isLowercase(\"a\")\n * true\n * >>> isLowercase(\"b\")\n * false\n */\nconst isLowercase = (str) => {\n"}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l.length - 2;\n  let k = 0;\n  let l = l.reverse();\n  while (l!== l[0]) {\n    if (l[k] < l[j]) {\n      i++;\n      k++;\n    } else {\n      j--;\n      k++;\n    }\n  }\n  return i === j;\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst unique = (l) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1;\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWith = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKey = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeys = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAnd = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKey = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeys = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAnd = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKey = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeys = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAnd = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAndKey = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAndKeys = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKey = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeys = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeysAndKey = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeysAndKeysAndKey = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeysAndKeysAndKeys = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeysAndKeysAndKeysAndKey = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeysAndKeysAndKeysAndKeysAndKey = (l, f) => {\n  return l.length === 1 && l.indexOf(l.shift()) === -1 && f(l.shift());\n};\n\n/**\n * Returns true if the list contains only unique elements.\n *\n * >>> unique([1, 2, 3])\n * true\n * >>> unique([1, 1, 1])\n * false\n */\nconst uniqueWithKeysAndKeysAndKey"}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = Math.min(l1.length, l2.length)\n  while (i < l && j < l2) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  while (i < l) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < l2) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sort = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (comparator(list[i], list[j])) {\n      result.push(list[j])\n      j++\n    } else {\n      result.push(list[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sortBy = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (comparator(list[i], list[j])) {\n      result.push(list[j])\n      j++\n    } else {\n      result.push(list[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sortByDescending = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (comparator(list[i], list[j])) {\n      result.push(list[j])\n      j++\n    } else {\n      result.push(list[i])\n      i++\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sortByAlpha = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (list[i] < list[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sortByAlphaDescending = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (list[i] < list[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sortByNumeric = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (list[i] < list[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sortByNumericDescending = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (list[i] < list[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sortByLength = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (list[i] < list[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sortByLengthDescending = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (list[i] < list[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list to sort.\n * @param {function} comparator The comparator to sort by.\n * @returns {Array} The sorted list.\n */\nconst sortByAscending = (list, comparator) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = list.length\n  while (i < l) {\n    if (comparator(list[i], list[j])) {\n      result.push(list[i])\n      i++\n      j++\n    } else if (list[i] > list[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * A function to sort a list based on a custom comparator.\n *\n * @param {Array} list The list "}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    n /= factor;\n    factor++;\n  }\n  return factor;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> primeFactors(123)\n  [2, 3, 5, 7]\n  >>> primeFactors(1235)\n  [2, 3, 5, 7]\n  >>> primeFactors(12356)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(123567)\n  [2, 3, 5, 7, 11, 13]\n  >>> primeFactors(1235678)\n  [2, 3, 5, 7, 11, 13, 17]\n  >>> primeFactors(12356789)\n  [2, 3, 5, 7, 11, 13, 17, 19]\n  >>> primeFactors(123567890)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23]\n  >>> primeFactors(123567891)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  >>> primeFactors(1235678910)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n  >>> primeFactors(1235678911)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n  >>> primeFactors(12356789111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n  >>> primeFactors(123567891110)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47]\n  >>> primeFactors(123567891111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53]\n  >>> primeFactors(1235678911111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59]\n  >>> primeFactors(12356789111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61]\n  >>> primeFactors(1235678911111110)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67]\n  >>> primeFactors(1235678911111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71]\n  >>> primeFactors(1235678911111110)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73]\n  >>> primeFactors(1235678911111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 159]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 159, 173]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 159, 173, 179]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 159, 173, 179, 191]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 159, 173, 179, 191, 193]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 159, 173, 179, 191, 193, 199]\n  >>> primeFactors(12356789111111111)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, "}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRoot = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootEven = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOddEven = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOddOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootEvenOddOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOddOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootEvenOddOddOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOddEvenOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOddOddOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootEvenOddOddOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOddOddOddOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootEvenOddOddOddOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOddOddOddOddOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootEvenOddOddOddOddOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootOddOddOddOddOddOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, returns the square root of n.\n * If n is odd, returns the square root of (n-1)/2.\n */\nconst squareRootEvenOddOddOddOddOddOddEvenOdd = (n) => {\n  if (n % 2 === 0) {\n    return n;\n  } else {\n    return n * Math.sqrt(n - 1);\n  }\n};\n\n/**\n * A function that returns the square root of a number.\n * If n is even, "}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.split(\"(\").length === brackets.length - 1;\n};\n\n/**\n * Returns true if a string is a valid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *\n * 1. A valid CSS selector string that starts with \".\".\n * 2. A valid CSS selector string that starts with \"#\".\n * 3. A valid CSS selector string that starts with \"[\" and ends with \"]\".\n * 4. An invalid CSS selector string.\n *\n * Valid CSS selector strings are of the form:\n *"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let sum = 0;\n  let x = 0;\n  let y = 0;\n  let xsq = 0;\n  let ysq = 0;\n  let xsq2 = 0;\n  let ysq2 = 0;\n  let xsq3 = 0;\n  let ysq3 = 0;\n  let xsq4 = 0;\n  let ysq4 = 0;\n  let xsq5 = 0;\n  let ysq5 = 0;\n  let xsq6 = 0;\n  let ysq6 = 0;\n  let xsq7 = 0;\n  let ysq7 = 0;\n  let xsq8 = 0;\n  let ysq8 = 0;\n  let xsq9 = 0;\n  let ysq9 = 0;\n  let xsq10 = 0;\n  let ysq10 = 0;\n  let xsq11 = 0;\n  let ysq11 = 0;\n  let xsq12 = 0;\n  let ysq12 = 0;\n  let xsq13 = 0;\n  let ysq13 = 0;\n  let xsq14 = 0;\n  let ysq14 = 0;\n  let xsq15 = 0;\n  let ysq15 = 0;\n  let xsq16 = 0;\n  let ysq16 = 0;\n  let xsq17 = 0;\n  let ysq17 = 0;\n  let xsq18 = 0;\n  let ysq18 = 0;\n  let xsq19 = 0;\n  let ysq19 = 0;\n  let xsq20 = 0;\n  let ysq20 = 0;\n  let xsq21 = 0;\n  let ysq21 = 0;\n  let xsq22 = 0;\n  let ysq22 = 0;\n  let xsq23 = 0;\n  let ysq23 = 0;\n  let xsq24 = 0;\n  let ysq24 = 0;\n  let xsq25 = 0;\n  let ysq25 = 0;\n  let xsq26 = 0;\n  let ysq26 = 0;\n  let xsq27 = 0;\n  let ysq27 = 0;\n  let xsq28 = 0;\n  let ysq28 = 0;\n  let xsq29 = 0;\n  let ysq29 = 0;\n  let xsq30 = 0;\n  let ysq30 = 0;\n  let xsq31 = 0;\n  let ysq31 = 0;\n  let xsq32 = 0;\n  let ysq32 = 0;\n  let xsq33 = 0;\n  let ysq33 = 0;\n  let xsq34 = 0;\n  let ysq34 = 0;\n  let xsq35 = 0;\n  let ysq35 = 0;\n  let xsq36 = 0;\n  let ysq36 = 0;\n  let xsq37 = 0;\n  let ysq37 = 0;\n  let xsq38 = 0;\n  let ysq38 = 0;\n  let xsq39 = 0;\n  let ysq39 = 0;\n  let xsq40 = 0;\n  let ysq40 = 0;\n  let xsq41 = 0;\n  let ysq41 = 0;\n  let xsq42 = 0;\n  let ysq42 = 0;\n  let xsq43 = 0;\n  let ysq43 = 0;\n  let xsq44 = 0;\n  let ysq44 = 0;\n  let xsq45 = 0;\n  let ysq45 = 0;\n  let xsq46 = 0;\n  let ysq46 = 0;\n  let xsq47 = 0;\n  let ysq47 = 0;\n  let xsq48 = 0;\n  let ysq48 = 0;\n  let xsq49 = 0;\n  let ysq49 = 0;\n  let xsq50 = 0;\n  let ysq50 = 0;\n  let xsq51 = 0;\n  let ysq51 = 0;\n  let xsq52 = 0;\n  let ysq52 = 0;\n  let xsq53 = 0;\n  let ysq53 = 0;\n  let xsq54 = 0;\n  let ysq54 = 0;\n  let xsq55 = 0;\n  let ysq55 = 0;\n  let xsq56 = 0;\n  let ysq56 = 0;\n  let xsq57 = 0;\n  let ysq57 = 0;\n  let xsq58 = 0;\n  let ysq58 = 0;\n  let xsq59 = 0;\n  let ysq59 = 0;\n  let xsq60 = 0;\n  let ysq60 = 0;\n  let xsq61 = 0;\n  let ysq61 = 0;\n  let xsq62 = 0;\n  let ysq62 = 0;\n  let xsq63 = 0;\n  let ysq63 = 0;\n  let xsq64 = 0;\n  let ysq64 = 0;\n  let xsq65 = 0;\n  let ysq65 = 0;\n  let xsq66 = 0;\n  let ysq66 = 0;\n  let xsq67 = 0;\n  let ysq67 = 0;\n  let xsq68 = 0;\n  let ysq68 = 0;\n  let xsq69 = 0;\n  let ysq69 = 0;\n  let xsq70 = 0;\n  let ysq70 = 0;\n  let xsq71 = 0;\n  let ysq71 = 0;\n  let xsq72 = 0;\n  let ysq72 = 0;\n  let xsq73 = 0;\n  let ysq73 = 0;\n  let xsq74 = 0;\n  let ysq74 = 0;\n  let xsq75 = 0;\n  let ysq75 = 0;\n  let xsq76 = 0;\n  let ysq76 = 0;\n  let xsq77 = 0;\n  let ysq77 = 0;\n  let xsq78 = 0;\n  let ysq78 = 0;\n  let xsq79 = 0;\n  let ysq79 = 0;\n  let xsq80 = 0;\n  let ysq80 = 0;\n  let xsq81 = 0;\n  let ysq81 = 0;\n  let xsq82 = 0;\n  let ysq82 = 0;\n  let xsq83 = 0;\n  let ysq83 = 0;\n  let xsq84 = 0;\n  let ysq84 = 0;\n  let xsq85 = 0;\n  let ysq85 = 0;\n  let xsq86 = 0;\n  let ysq86 = 0;\n  let xsq87 = 0;\n  let ysq87 = 0;\n  let xsq88 = 0;\n  let ysq88 = 0;\n  let xsq89 = 0;\n  let ysq89 = 0;\n  let xsq90 = 0;\n  let ysq90 = 0;\n  let xsq91 = 0;\n  let ysq91 = 0;\n  let xsq92 = 0;\n  let ysq92 = 0;\n  let xsq93 = 0;\n  let ysq93 = 0;\n  let xsq94 = 0;\n  let ysq94 = 0;\n  let xsq95 = 0;\n  let ysq95 = 0;\n  let xsq96 = 0;\n  let ysq96 = 0;\n  let xsq97 = 0;\n  let ysq97 = 0;\n  let xsq98 = 0;\n  let ysq98 = 0;\n  let xsq99 = 0;\n  let ysq99 = 0;\n  let xsq100 = 0;\n  let ysq100 = 0;\n  let xsq101 = 0;\n  let ysq101 = 0;\n  let xsq102 = 0;\n  let ysq102 = 0;\n  let xsq103 = 0;\n  let ysq103 = 0;\n  let xsq104 = 0;\n  let ysq104 = 0;\n  let xsq105 = 0;\n  let ysq105 = 0;\n  let xsq106 = 0;\n  let ysq106 = 0;\n  let xsq107 = 0;\n  let ysq107 = 0;\n  let xsq108 = 0;\n  let ysq108 = 0;\n  let xsq109 = 0;\n  let ysq109 = 0;\n  let xsq110 = 0;\n  let ysq110 = 0;\n  let xsq111 = 0;\n  let ysq111 = 0;\n  let xsq112 = 0;\n  let ysq112 = 0;\n  let xsq113 = 0;\n  let ysq113 = 0;\n  let xsq114 = 0;\n  let ysq114 = 0;\n  let xsq115 = 0;\n  let ysq115 = 0;\n  let xsq116 = 0;\n  let ysq116 = 0;\n  let xsq117 = 0;\n  let ysq117 = 0;\n  let xsq118 = 0;\n  let ysq118 = 0;\n  let xsq119 = 0;\n  let ysq119 = 0;\n  let xsq120 = 0;\n  let ysq120 = 0;\n  let xsq121 = 0;\n  let ysq121 = 0;\n  let xsq122 = 0;\n  let ysq122 = 0;"}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 1 fibfib (2) = = 1 fibfib (3) = = 1 fibfib (4) = = 2 fibfib (5) = = 3 fibfib (6) = = 5 fibfib (7) = = 8 fibfib (8) = = 13 fibfib (9) = = 21 fibfib (10) = = 34 fibfib (11) = = 55 fibfib (12) = = 89 fibfib (13) = = 144 fibfib (14) = = 233 fibfib (15) = = 377\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 1 fibfib (2) = = 1 fibfib (3) = = 1 fibfib (4) = = 2 fibfib (5) = = 3 fibfib (6) = = 5 fibfib (7) = = 8 fibfib (8) = = 13 fibfib (9) = = 21 fibfib (10) = = 34 fibfib (11) = = 55 fibfib (12) = = 89 fibfib (13) = = 144 fibfib (14) = = 233 fibfib (15) = = 377\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 1 fibfib (2) = = 1 fibfib (3) = = 1 fibfib (4) = = 2 fibfib (5) = = 3 fibfib (6) = = 5 fibfib (7) = = 8 fibfib (8) = = 13 fibfib (9) = = 21 fibfib (10) = = 34 fibfib (11) = = 55 fibfib (12) = = 89 fibfib (13) = = 144 fibfib (14) = = 233 fibfib (15) = = 377\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 1 fibfib (2) = = 1 fibfib (3) = = 1 fibfib (4) = = 2 fibfib (5) = = 3 fibfib (6) = = 5 fibfib (7) = = 8 fibfib (8) = = 13 fibfib (9) = = 21 fibfib (10) = = 34 fibfib (11) = = 55 fibfib (12) = = 89 fibfib (13) = = 144 fibfib (14) = = 233 fibfib (15) = = 377\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 1 fibfib (2) = = 1 fibfib (3) = = 1 fibfib (4) = = 2 fibfib (5) = = 3 fibfib (6) = = 5 fibfib (7) = = 8 fibfib (8) = = 13 fibfib (9) = = 21 fibfib (10) = = 34 fibfib (11) = = 55 fibfib (12) = = 89 fibfib (13) = = 144 fibfib (14) = = 233 fibfib (15) = = 377\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 1 fibfib (2) = = 1 fibfib (3) = = 1 fibfib (4) = = 2 fibfib (5) = = 3 fibfib (6) = = 5 fibfib (7) = = 8 fibfib (8) = = 13 fibfib (9) = = 21 fibfib (10) = = 34 fibfib (11) = = 55 fibfib (12) = = 89 fibfib (13) = = 144 fibfib (14) = = 233 fibfib (15) = = 377\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*TThe Fibonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 1 fibfib (2) = = 1 fibfib (3) = = 1 fibfib (4) = = 2 fibfib (5) = = 3 fibfib (6) = = 5 fibfib (7) = = 8 fibfib (8) = = 13 fibfib (9) = = 21 fibfib (10) = = 34 fibfib (11) = = 55 fibfib (12) = = 89 fibfib (13) = = 144 fibfib (14) = = 233 fibfib (15) = = 377\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4"}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  let lastVowelIsVowel = lastVowel === 'a' || lastVowel === 'e' || lastVowel === 'i' || lastVowel === 'o' || lastVowel === 'u';\n  let lastVowelIsVowelAtEnd = lastVowelIsVowel && lastVowel === s.charAt(s.length - 2);\n  let lastVowelIsVowelAtEndVowel = lastVowelIsVowel && lastVowel === s.charAt(s.length - 1);\n  let lastVowelIsVowelAtEndVowelAtEnd = lastVowelIsVowel && lastVowel === s.charAt(s.length - 2);\n  let lastVowelIsVowelAtEndVowelAtEndVowel = lastVowelIsVowel && lastVowel === s.charAt(s.length - 3);\n  let lastVowelIsVowelAtEndVowelAtEndVowelAtEnd = lastVowelIsVowel && lastVowel === s.charAt(s.length - 4);\n  let lastVowelIsVowelAtEndVowelAtEndVowelAtEndVowel = lastVowelIsVowel && lastVowel === s.charAt(s.length - 5);\n  let lastVowelIsVowelAtEndVowelAtEndVowelAtEndVowelAtEnd = lastVowelIsVowel && lastVowel === s.charAt(s.length - 6);\n  let lastVowelIsVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowel = lastVowelIsVowel && lastVowel === s.charAt(s.length - 7);\n  let lastVowelIsVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEnd = lastVowelIsVowel && lastVowel === s.charAt(s.length - 8);\n  let lastVowelIsVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEnd = lastVowelIsVowel && lastVowel === s.charAt(s.length - 9);\n  let lastVowelIsVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowelAtEndVowel"}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = Math.ceil(Math.log10(Math.abs(x)));\n  const result = x.toString(10);\n  const newResult = result.slice(0, digits);\n  result += result.slice(digits);\n  return newResult;\n};\n\n/**\n * Converts a string to a number by parsing it into an array of digits and then converting the digits to their corresponding integer values.\n  >>> parseInt(\"12\")\n  [12, 0]\n  >>> parseInt(\"12\", 2)\n  [12, 1]\n  >>> parseInt(\"12\", 3)\n  [12, 2]\n  >>> parseInt(\"12\", 4)\n  [12, 3]\n  >>> parseInt(\"12\", 5)\n  [12, 4]\n  >>> parseInt(\"12\", 6)\n  [12, 5]\n  >>> parseInt(\"12\", 7)\n  [12, 6]\n  >>> parseInt(\"12\", 8)\n  [12, 7]\n  >>> parseInt(\"12\", 9)\n  [12, 8]\n  >>> parseInt(\"12\", 10)\n  [12, 9]\n  >>> parseInt(\"12\", 11)\n  [12, 10]\n  >>> parseInt(\"12\", 12)\n  [12, 11]\n  >>> parseInt(\"12\", 13)\n  [12, 12]\n  >>> parseInt(\"12\", 14)\n  [12, 13]\n  >>> parseInt(\"12\", 15)\n  [12, 14]\n  >>> parseInt(\"12\", 16)\n  [12, 15]\n  >>> parseInt(\"12\", 17)\n  [12, 16]\n  >>> parseInt(\"12\", 18)\n  [12, 17]\n  >>> parseInt(\"12\", 19)\n  [12, 18]\n  >>> parseInt(\"12\", 20)\n  [12, 19]\n  >>> parseInt(\"12\", 21)\n  [12, 20]\n  >>> parseInt(\"12\", 22)\n  [12, 21]\n  >>> parseInt(\"12\", 23)\n  [12, 22]\n  >>> parseInt(\"12\", 24)\n  [12, 23]\n  >>> parseInt(\"12\", 25)\n  [12, 24]\n  >>> parseInt(\"12\", 26)\n  [12, 25]\n  >>> parseInt(\"12\", 27)\n  [12, 26]\n  >>> parseInt(\"12\", 28)\n  [12, 27]\n  >>> parseInt(\"12\", 29)\n  [12, 28]\n  >>> parseInt(\"12\", 30)\n  [12, 29]\n  >>> parseInt(\"12\", 31)\n  [12, 30]\n  >>> parseInt(\"12\", 32)\n  [12, 31]\n  >>> parseInt(\"12\", 33)\n  [12, 32]\n  >>> parseInt(\"12\", 34)\n  [12, 33]\n  >>> parseInt(\"12\", 35)\n  [12, 34]\n  >>> parseInt(\"12\", 36)\n  [12, 35]\n  >>> parseInt(\"12\", 37)\n  [12, 36]\n  >>> parseInt(\"12\", 38)\n  [12, 37]\n  >>> parseInt(\"12\", 39)\n  [12, 38]\n  >>> parseInt(\"12\", 40)\n  [12, 39]\n  >>> parseInt(\"12\", 41)\n  [12, 40]\n  >>> parseInt(\"12\", 42)\n  [12, 41]\n  >>> parseInt(\"12\", 43)\n  [12, 42]\n  >>> parseInt(\"12\", 44)\n  [12, 43]\n  >>> parseInt(\"12\", 45)\n  [12, 44]\n  >>> parseInt(\"12\", 46)\n  [12, 45]\n  >>> parseInt(\"12\", 47)\n  [12, 46]\n  >>> parseInt(\"12\", 48)\n  [12, 47]\n  >>> parseInt(\"12\", 49)\n  [12, 48]\n  >>> parseInt(\"12\", 50)\n  [12, 49]\n  >>> parseInt(\"12\", 51)\n  [12, 50]\n  >>> parseInt(\"12\", 52)\n  [12, 51]\n  >>> parseInt(\"12\", 53)\n  [12, 52]\n  >>> parseInt(\"12\", 54)\n  [12, 53]\n  >>> parseInt(\"12\", 55)\n  [12, 54]\n  >>> parseInt(\"12\", 56)\n  [12, 55]\n  >>> parseInt(\"12\", 57)\n  [12, 56]\n  >>> parseInt(\"12\", 58)\n  [12, 57]\n  >>> parseInt(\"12\", 59)\n  [12, 58]\n  >>> parseInt(\"12\", 60)\n  [12, 59]\n  >>> parseInt(\"12\", 61)\n  [12, 60]\n  >>> parseInt(\"12\", 62)\n  [12, 61]\n  >>> parseInt(\"12\", 63)\n  [12, 62]\n  >>> parseInt(\"12\", 64)\n  [12, 63]\n  >>> parseInt(\"12\", 65)\n  [12, 64]\n  >>> parseInt(\"12\", 66)\n  [12, 65]\n  >>> parseInt(\"12\", 67)\n  [12, 66]\n  >>> parseInt(\"12\", 68)\n  [12, 67]\n  >>> parseInt(\"12\", 69)\n  [12, 68]\n  >>> parseInt(\"12\", 70)\n  [12, 69]\n  >>> parseInt(\"12\", 71)\n  [12, 70]\n  >>> parseInt(\"12\", 72)\n  [12, 71]\n  >>> parseInt(\"12\", 73)\n  [12, 72]\n  >>> parseInt(\"12\", 74)\n  [12, 73]\n  >>> parseInt(\"12\", 75)\n  [12, 74]\n  >>> parseInt(\"12\", 76)\n  [12, 75]\n  >>> parseInt(\"12\", 77)\n  [12, 76]\n  >>> parseInt(\"12\", 78)\n  [12, 77]\n  >>> parseInt(\"12\", 79)\n  [12, 78]\n  >>> parseInt(\"12\", 80)\n  [12, 79]\n  >>> parseInt(\"12\", 81)\n  [12, 80]\n  >>> parseInt(\"12\", 82)\n  [12, 81]\n  >>> parseInt(\"12\", 83)\n  [12, 82]\n  >>> parseInt(\"12\", 84)\n  [12, 83]\n  >>> parseInt(\"12\", 85)\n  [12, 84]\n  >>> parseInt(\"12\", 86)\n  [12, 85]\n  >>> parseInt(\"12\", 87)\n  [12, 86]\n  >>> parseInt(\"12\", 88)\n  [12, 87]\n  >>> parseInt(\"12\", 89)\n  [12, 88]\n  >>> parseInt(\"12\", 90)\n  [12, 89]\n  >>> parseInt(\"12\", 91)\n  [12, 90]\n  >>> parseInt(\"12\", 92)\n  [12, 91]\n  >>> parseInt(\"12\", 93)\n  [12, 92]\n  >>> parseInt(\"12\", 94)\n  [12, 93]\n  >>> parseInt(\"12\", 95)\n  [12, 94]\n  >>> parseInt(\"12\", 96)\n  [12, 95]\n  >>> parseInt(\"12"}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let digitSum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let sumOfDigits = 0;\n  let sumOfDigitsOfs = 0;\n  let sumOfDigitsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfsOfs = 0;\n  let sumOfDigitsOfsOfsOfs"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = [];\n  let fruitCount = 0;\n  let fruitCountTotal = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mango++;\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      fruitCount++;\n    } else if (s[i] === 'o') {\n      fruitCount++;\n    } else if (s[i] ==='m') {\n      fruitCount++;\n    }\n  }\n\n  for (let i = 0; i < fruitCount; i++) {\n    if (fruits[i] === 'a') {\n      fruitCountTotal++;\n    } else if (fruits[i] === 'o') {\n      fruitCountTotal++;\n    } else if (fruits[i] ==='m') {\n      fruitCountTotal++;\n    }\n  }\n\n  for (let i = 0; i < fruitCountTotal; i++) {\n    if (fruits[i] === 'a') {\n      total++;\n    } else if (fruits[i] === 'o') {\n      total++;\n    } else if (fruits[i] ==='m') {\n      total++;\n    }\n  }\n\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = [];\n  let fruitCount = 0;\n  let fruitCountTotal = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mango++;\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      fruitCount++;\n    } else if (s[i] === 'o') {\n      fruitCount++;\n    } else if (s[i] ==='m') {\n      fruitCount++;\n    }\n  }\n\n  for (let i = 0; i < fruitCount; i++) {\n    if (fruits[i] === 'a') {\n      fruitCountTotal++;\n    } else if (fruits[i] === 'o') {\n      fruitCountTotal++;\n    } else if (fruits[i] ==='m') {\n      fruitCountTotal++;\n    }\n  }\n\n  for (let i = 0; i < fruitCountTotal; i++) {\n    if (fruits[i] === 'a') {\n      total++;\n    } else if (fruits[i] === 'o') {\n      total++;\n    } else if (fruits[i] ==='m') {\n      total++;\n    }\n  }\n\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = [];\n  let fruitCount = 0;\n  let fruitCountTotal = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mango++;\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      fruitCount++;\n    } else if (s[i] === 'o') {\n      fruitCount++;\n    } else if (s[i] ==='m') {\n      fruitCount++;\n    }\n  }\n\n  for (let i = 0; i < fruitCount; i++) {\n    if (fruits[i] === 'a') {\n      fruitCountTotal++;\n    } else if (fruits[i] === 'o') {\n      fruitCountTotal++;\n    } else if (fruits[i] ==='m') {\n      fruitCountTotal++;\n    }\n  }\n\n  for (let i = 0; i < fruitCountTotal; i++) {\n    if (fruits[i] === 'a') {\n      total++;\n    } else if (fruits[i] === 'o') {\n      total++;\n    } else if (fruits[i] ==='m') {\n      total++;\n    }\n  }\n\n  return total - apples - oranges - mango;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = [];\n  let fruitCount = 0;\n  let fruitCountTotal = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      apples++;\n    } else if (s[i] === 'o') {\n      oranges++;\n    } else if (s[i] ==='m') {\n      mango++;\n    }\n  }\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      fruitCount++;\n    } else if (s[i] === 'o') {\n      fruitCount++;\n    } else if (s[i] ==='m') {\n      fruitCount++;\n    }\n  }\n\n  for (let i = 0; i < fruitCount; i++) {\n    if (fruits[i] === 'a') {\n      fruitCountTotal++;\n    } else if (fruits[i] === 'o') {\n      fruitCountTotal++;\n    } else if (fruits[i] ==='m') {\n      fruitCountTotal++;\n    }\n  }\n\n  for (let i = 0; i < fruitCountTotal; i++) {\n    if (fruits[i] === 'a') {\n      "}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let even = 0;\n  let index = 0;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      even = arr[i];\n    } else {\n      min = arr[i];\n      max = arr[i];\n    }\n    if (min > max) {\n      max = min;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      even = min;\n    }\n    if (min === max) {\n      index++;\n    }\n    if (min % 2 === 0) {\n      "}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxNum = lst[0];\n  let maxNumIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      max = maxNum;\n      maxNum = lst[i];\n      maxNumIndex = i;\n    }\n    if (lst[i] === maxNum) {\n      freq++;\n    }\n  }\n  return maxNumIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxNum = lst[0];\n  let maxNumIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      max = maxNum;\n      maxNum = lst[i];\n      maxNumIndex = i;\n    }\n    if (lst[i] === maxNum) {\n      freq++;\n    }\n  }\n  return maxNumIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxNum = lst[0];\n  let maxNumIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      max = maxNum;\n      maxNum = lst[i];\n      maxNumIndex = i;\n    }\n    if (lst[i] === maxNum) {\n      freq++;\n    }\n  }\n  return maxNumIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxNum = lst[0];\n  let maxNumIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      max = maxNum;\n      maxNum = lst[i];\n      maxNumIndex = i;\n    }\n    if (lst[i] === maxNum) {\n      freq++;\n    }\n  }\n  return maxNumIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxNum = lst[0];\n  let maxNumIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      max = maxNum;\n      maxNum = lst[i];\n      maxNumIndex = i;\n    }\n    if (lst[i] === maxNum) {\n      freq++;\n    }\n  }\n  return maxNumIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxNum = lst[0];\n  let maxNumIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      max = maxNum;\n      maxNum = lst[i];\n      maxNumIndex = i;\n    }\n    if (lst[i] === maxNum) {\n      freq++;\n    }\n  }\n  return maxNumIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxNum = lst[0];\n  let maxNumIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      max = maxNum;\n      maxNum = lst[i];\n      maxNumIndex = i;\n    }\n    if (lst[i] === maxNum) {\n      freq++;\n    }\n  }\n  return maxNumIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxNum = lst[0];\n  let maxNumIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      max = maxNum;\n      maxNum = lst[i];\n      maxNumIndex = i;\n    }\n    if (lst[i] === maxNum) {\n      freq++;\n    }\n  }\n  return maxNumIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxNum = lst[0];\n  let maxNumIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      max = maxNum;\n      maxNum = lst[i];\n      maxNumIndex = i;\n    }\n    if (lst[i] === maxNum) {\n      freq++;\n    }\n  }\n  return maxNumIndex;\n};\n\n/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, "}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sortedList = lst.sort((a, b) => a - b);\n  const sortedList2 = lst.sort((a, b) => b - a);\n  return [...sortedList,...sortedList2];\n};\n\n/*\n  Given a sorted array of integers, return an array containing all possible permutations of the array.\n\n  Example:\n  permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 3, 4, 2], [1, 3, 2, 4], [2, 3, 1, 4], [2, 3, 1, 4], [2, 3, 1, 4], [3, 4, 1, 2], [3, 4, 1, 2], [3, 4, 1, 2], [3, 4, 1, 2], [4, 1, 2, 3], [4, 1, 2, 3], [4, 1, 2, 3], [4, 1, 2, 3], [5, 1, 2, 3], [5, 1, 2, 3], [5, 1, 2, 3], [5, 2, 3, 1], [5, 2, 3, 1], [5, 2, 3, 1], [5, 2, 3, 1], [5, 2, 3, 1], [5, 2, 3, 1], [5, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2, 1], [5, 3, 2, 1], [6, 3, 2, 1], [6, 3, 2, 1], [6, 3, 2, 1], [6, 3, 2, 1], [7, 3, 2, 1], [7, 3, 2, 1], [7, 3, 2, 1], [7, 3, 2, 1], [8, 3, 2, 1], [8, 3, 2, 1], [8, 3, 2, 1], [8, 3, 2, 1], [9, 3, 2, 1], [9, 3, 2, 1], [9, 3, 2, 1], [9, 3, 2, 1], [10, 3, 2, 1], [10, 3, 2, 1], [10, 3, 2, 1], [10, 3, 2, 1], [11, 3, 2, 1], [11, 3, 2, 1], [11, 3, 2, 1], [12, 3, 2, 1], [12, 3, 2, 1], [12, 3, 2, 1], [13, 3, 2, 1], [13, 3, 2, 1], [13, 3, 2, 1], [13, 3, 2, 1], [14, 3, 2, 1], [14, 3, 2, 1], [14, 3, 2, 1], [14, 3, 2, 1], [15, 3, 2, 1], [15, 3, 2, 1], [15, 3, 2, 1], [15, 3, 2, 1], [16, 3, 2, 1], [16, 3, 2, 1], [16, 3, 2, 1], [16, 3, 2, 1], [17, 3, 2, 1], [17, 3, 2, 1], [17, 3, 2, 1], [17, 3, 2, 1], [18, 3, 2, 1], [18, 3, 2, 1], [18, 3, 2, 1], [18, 3, 2, 1], [19, 3, 2, 1], [19, 3, 2, 1], [19, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, 1], [20, 3, 2, "}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const len = q.length;\n  const maxWeight = Math.max(...q);\n  const maxWeightWeight = maxWeight * w;\n  const maxWeightWeightWeight = maxWeightWeight * w;\n  const maxWeightWeightWeightWeight = maxWeightWeightWeight * w;\n  const maxWeightWeightWeightWeight = maxWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeight = maxWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight = maxWeightWeightWeightWeightWeightWeight * w;\n  const maxWeightWeightWeightWeightWeightWeightWeight"}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - 1];\n    arr[len - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let temp;\n\n  for (let i = len - 1; i >= 0; i--) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n    change++;\n  }\n\n  return change;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst reverse = (arr) => {\n  let len = arr.length;\n  let temp;\n\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n  }\n\n  return arr;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst reversePalindrome = (arr) => {\n  let len = arr.length;\n  let temp;\n\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n  }\n\n  return arr;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst reversePalindromeReverse = (arr) => {\n  let len = arr.length;\n  let temp;\n\n  for (let i = len - 1; i >= 0; i--) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n  }\n\n  return arr;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst reversePalindromeReversePalindrome = (arr) => {\n  let len = arr.length;\n  let temp;\n\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n  }\n\n  return arr;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst reversePalindromeReversePalindromeReverse = (arr) => {\n  let len = arr.length;\n  let temp;\n\n  for (let i = len - 1; i >= 0; i--) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n  }\n\n  return arr;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst reversePalindromeReversePalindromeReversePalindrome = (arr) => {\n  let len = arr.length;\n  let temp;\n\n  for (let i = 0; i < len - 1; i++) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n  }\n\n  return arr;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst reversePalindromeReversePalindromeReversePalindromeReverse = (arr) => {\n  let len = arr.length;\n  let temp;\n\n  for (let i = len - 1; i >= 0; i--) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n  }\n\n  return arr;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst reversePalindromeReversePalindromeReversePalindromeReversePalindromeReverse = (arr) => {\n  let len = arr.length;\n  let temp;\n\n  for (let i = len - 1; i >= 0; i--) {\n    temp = arr[i];\n    arr[i] = arr[len - i - 1];\n    arr[len - i - 1] = temp;\n  }\n\n  return arr;\n};\n\n/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst reversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReversePalindromeReverse"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  return lst2.filter(item => item!== '').map(item => item.length).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list greater than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  return lst2.filter(item => item!== '').map(item => item.length).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  return lst2.filter(item => item!== '').map(item => item.length).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list greater than or equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  return lst2.filter(item => item!== '').map(item => item.length).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than or equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  return lst2.filter(item => item!== '').map(item => item.length).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list equal to the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  return lst2.filter(item => item!== '').map(item => item.length).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  return lst2.filter(item => item!== '').map(item => item.length).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\n/*\n"}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiply"}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a prime number and in other cases a false one. x is a prime number if n is divisible by 2 and is prime if n is divisible by 3 and so on. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible by n. x is a prime number if n is divisible "}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst isking = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return false;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst iskingOf = (num) => {\n  if (num === 0) return true;\n  if (num === 1) return false;\n  if (num === 2) return false;\n  if (num === -1) return true;\n  if (num === 64) return true;\n  if (num === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst iskingOfOf = (num) => {\n  if (num === 0) return true;\n  if (num === 1) return false;\n  if (num === 2) return false;\n  if (num === -1) return true;\n  if (num === 64) return true;\n  if (num === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst iskingOfOfOf = (num) => {\n  if (num === 0) return true;\n  if (num === 1) return false;\n  if (num === 2) return false;\n  if (num === -1) return true;\n  if (num === 64) return true;\n  if (num === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst iskingOfOfOfOf = (num) => {\n  if (num === 0) return true;\n  if (num === 1) return false;\n  if (num === 2) return false;\n  if (num === -1) return true;\n  if (num === 64) return true;\n  if (num === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst iskingOfOfOfOfOf = (num) => {\n  if (num === 0) return true;\n  if (num === 1) return false;\n  if (num === 2) return false;\n  if (num === -1) return true;\n  if (num === 64) return true;\n  if (num === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst iskingOfOfOfOfOfOf = (num) => {\n  if (num === 0) return true;\n  if (num === 1) return false;\n  if (num === 2) return false;\n  if (num === -1) return true;\n  if (num === 64) return true;\n  if (num === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst iskingOfOfOfOfOfOfOf = (num) => {\n  if (num === 0) return true;\n  if (num === 1) return false;\n  if (num === 2) return false;\n  if (num === -1) return true;\n  if (num === 64) return true;\n  if (num === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst iskingOfOfOfOfOfOfOfOf = (num) => {\n  if (num === 0) return true;\n  if (num === 1) return false;\n  if (num === 2) return false;\n  if (num === -1) return true;\n  if (num === 64) return true;\n  if (num === 180) return false;\n  return false;\n};\n\n/*\n  Write a function that takes an integer a and returns true if this ingeger is a king of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  isking(1) ==> true\n  isking(2) ==> false\n  isking(-1) ==> true\n  isking(64) ==> true\n  isking(0) ==> true\n  isking(180) ==> false\n  */\nconst iskingOfOfOfOfOfOfOfOfOf = (num) => {\n  if ("}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numArr = num.split(\"\");\n  for (let i = 0; i < numArr.length; i++) {\n    if (numArr[i] === \"0\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"1\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"2\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"3\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"4\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"5\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"6\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"7\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"8\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"9\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"A\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"B\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"C\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"D\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"E\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"F\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"0\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"1\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"2\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"3\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"4\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"5\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"6\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"7\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"8\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"9\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"A\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"B\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"C\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"D\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"E\") {\n      numStr += numArr[i];\n      continue;\n    }\n    if (numArr[i] === \"F\") {\n      numStr += numArr[i];\n      continue;\n    }\n  }\n  numStr = numStr.toUpperCase();\n  numStr = numStr.split(\"\");\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] === \"0\") {\n      numStr[i] = \"1\";\n      continue;\n    }\n    if (numStr[i] === \"1\") {\n      numStr[i] = \"2\";\n      continue;\n    }\n    if (numStr[i] === \"2\") {\n      numStr[i] = \"3\";\n      continue;\n    }\n    if (numStr[i] === \"3\") {\n      numStr[i] = \"4\";\n      continue;\n    }\n    if (numStr[i] === \"4\") {\n      numStr[i] = \"5\";\n      continue;\n    }\n    if (numStr[i] === \"5\") {\n      numStr[i] = \"6\";\n      continue;\n    }\n    if (numStr[i] === \"6\") {\n      numStr[i] = \"7\";\n      continue;\n    }\n    if (numStr[i] === \"7\") {\n      numStr[i] = \"8\";\n      continue;\n    }\n    if (numStr[i] === \"8\") {\n      numStr[i] = \"9\";\n      continue;\n    }\n    if (numStr[i] === \"9\") {\n      numStr[i] = \"A\";\n      continue;\n    }\n    if (numStr[i] === \"A\") {\n      numStr[i] = \"B\";\n      continue;\n    }\n    if (numStr[i] === \"B\") {\n      numStr[i] = \"C\";\n      continue;\n    }\n    if (numStr[i] === \"C\") {\n      numStr[i] = \"D\";\n      continue;\n    }\n    if (numStr[i] === \"D\") {\n      numStr[i] = \"E\";\n      continue;\n    }\n    if (numStr[i] === \"E\") {\n      numStr[i] = \"F\";\n      continue;\n    }\n    if (numStr[i] === \"F\") {\n      numStr[i] = \"0\";\n      continue;\n    }\n  }\n  numStr = numStr.join(\"\");\n  numStr = numStr.split(\"\");\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] === \"1\") {\n      numStr[i] = \"2\";\n      continue;\n    }\n    if (numStr[i] === \"2\") {\n      numStr[i] = \"3\";\n      continue;\n    }\n    if (numStr[i] === \"3\") {\n      numStr[i] = \"4\";\n      continue;\n    }\n    if (numStr[i] === \"4\") {\n      numStr[i] = \"5\";\n      continue;\n    }\n    if (numStr[i] === \"5\") {\n      numStr[i] = \"6\";\n      continue;\n    }\n    if (numStr[i] === \"6\") {\n      numStr[i] = \"7\";\n      continue;\n    }\n    if (numStr[i] === \"7\") {\n      numStr[i] = \"8\";\n      continue;\n    }\n    if (numStr[i] === \"8\") {\n      numStr[i] = \"9\";\n      continue;\n    }\n    if (numStr[i] === \"9\") {\n      numStr[i] = \"0\";\n      continue;\n    }\n    if (numStr[i] === \"0\") {\n      numStr[i] = "}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinary = decimal.toString(2);\n  for (let i = 0; i < decimalToBinary.length; i++) {\n    if (decimalToBinary[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a decimal number. For example, \"10\" will be\n  converted to 10.\n\n  Examples:\n  decimalToDecimal('10')   # returns 10\n  decimalToDecimal('101')   # returns 101\n  */\nconst decimalToDecimal = (decimal) => {\n  let decimalToDecimal = '';\n  let decimalToDecimalString = decimal.toString(2);\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    if (decimalToDecimalString[i] === '1') {\n      decimalToDecimal += 1;\n    } else {\n      decimalToDecimal += 0;\n    }\n  }\n  return decimalToDecimal;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number. For example, \"10\" will be\n  converted to \"10\".\n\n  Examples:\n  hexadecimalToDecimal('10')   # returns 10\n  hexadecimalToDecimal('101')   # returns 101\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let hexadecimalToDecimal = '';\n  let hexadecimalToDecimalString = hexadecimal.toString(16);\n  for (let i = 0; i < hexadecimalToDecimalString.length; i++) {\n    if (hexadecimalToDecimalString[i] === '1') {\n      hexadecimalToDecimal += 1;\n    } else {\n      hexadecimalToDecimal += 0;\n    }\n  }\n  return hexadecimalToDecimal;\n};\n\n/*\n  Given a string, convert it to a octal number. For example, \"10\" will be\n  converted to \"10\".\n\n  Examples:\n  octalToDecimal('10')   # returns 10\n  octalToDecimal('101')   # returns 101\n  */\nconst octalToDecimal = (octal) => {\n  let octalToDecimal = '';\n  let octalToDecimalString = octal.toString(8);\n  for (let i = 0; i < octalToDecimalString.length; i++) {\n    if (octalToDecimalString[i] === '1') {\n      octalToDecimal += 1;\n    } else {\n      octalToDecimal += 0;\n    }\n  }\n  return octalToDecimal;\n};\n\n/*\n  Given a string, convert it to a binary number. For example, \"10\" will be\n  converted to \"10\".\n\n  Examples:\n  binaryToDecimal('10')   # returns 10\n  binaryToDecimal('101')   # returns 101\n  */\nconst binaryToDecimal = (binary) => {\n  let binaryToDecimal = '';\n  let binaryToDecimalString = binary.toString(2);\n  for (let i = 0; i < binaryToDecimalString.length; i++) {\n    if (binaryToDecimalString[i] === '1') {\n      binaryToDecimal += 1;\n    } else {\n      binaryToDecimal += 0;\n    }\n  }\n  return binaryToDecimal;\n};\n\n/*\n  Given a string, convert it to a decimal number. For example, \"10\" will be\n  converted to 10.\n\n  Examples:\n  decimalToDecimal('10')   # returns 10\n  decimalToDecimal('101')   # returns 101\n  */\nconst decimalToDecimal = (decimal) => {\n  let decimalToDecimal = '';\n  let decimalToDecimalString = decimal.toString(2);\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    if (decimalToDecimalString[i] === '1') {\n      decimalToDecimal += 1;\n    } else {\n      decimalToDecimal += 0;\n    }\n  }\n  return decimalToDecimal;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number. For example, \"10\" will be\n  converted to \"10\".\n\n  Examples:\n  hexadecimalToDecimal('10')   # returns 10\n  hexadecimalToDecimal('101')   # returns 101\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let hexadecimalToDecimal = '';\n  let hexadecimalToDecimalString = hexadecimal.toString(16);\n  for (let i = 0; i < hexadecimalToDecimalString.length; i++) {\n    if (hexadecimalToDecimalString[i] === '1') {\n      hexadecimalToDecimal += 1;\n    } else {\n      hexadecimalToDecimal += 0;\n    }\n  }\n  return hexadecimalToDecimal;\n};\n\n/*\n  Given a string, convert it to a octal number. For example, \"10\" will be\n  converted to \"10\".\n\n  Examples:\n  octalToDecimal('10')   # returns 10\n  octalToDecimal('101')   # returns 101\n  */\nconst octalToDecimal = (octal) => {\n  let octalToDecimal = '';\n  let octalToDecimalString = octal.toString(8);\n  for (let i = 0; i < octalToDecimalString.length; i++) {\n    if (octalToDecimalString[i] === '1') {\n      octalToDecimal += 1;\n    } else {\n      octalToDecimal += 0;\n    }\n  }\n  return octalToDecimal;\n};\n\n/*\n  Given a string, convert it to a binary number. For example, \"10\" will be\n  converted to \"10\".\n\n  Examples:\n  binaryToDecimal('10')   # returns 10\n  binaryToDecimal('101')   # returns 101\n  */\nconst binaryToDecimal = (binary) => {\n  let binaryToDecimal = '';\n  let binaryToDecimalString = binary.toString(2);\n  for (let i = 0; i < binaryToDecimalString.length; i++) {\n    if (binaryToDecimalString[i] === '1') {\n      binaryToDecimal += 1;\n    } else {\n      binaryToDecimal += 0;\n    }\n  }\n  return binaryToDecimal;\n};\n\n/*\n  Given a string, convert it to a decimal number. For example, \"10\" will be\n  converted to 10.\n\n  Examples:\n  decimalToDecimal('10')   # returns 10\n  decimalToDecimal('101')   # returns 101\n  */\nconst decimalToDecimal = (decimal) => {\n  let decimalToDecimal = '';\n  let decimalToDecimalString = decimal.toString(2);\n  for (let i = 0; i < decimalToDecimalString.length; i++) {\n    if (decimalToDecimalString[i] === '1') {\n      decimalToDecimal += 1;\n    } else {\n      decimalToDecimal += 0;\n    }\n  }\n  return decimalToDecimal;\n};\n\n/*\n  Given a string, convert it to a hexadecimal number. For example, \"10\" will be\n  converted to \"10\".\n\n  Examples:\n  hexadecimalToDecimal('10')   # returns 10\n  hexadecimalToDecimal('101')   # returns 101\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let hexadecimalToDecimal = '';\n  let hexadecimalToDecimalString = hexadecimal.toString(16);\n  for (let i = 0; i < hexadecimalToDecimalString.length; i++) {\n    if (hexadecimalToDecimalString[i] === '1') {\n      hexadecimalToDecimal += 1;\n    } else {\n      hexadecimalToDecimal += 0;\n    }\n  }\n"}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  let isHappy = true;\n  let isHappy2 = true;\n  let isHappy3 = true;\n  let isHappy4 = true;\n  let isHappy5 = true;\n  let isHappy6 = true;\n  let isHappy7 = true;\n  let isHappy8 = true;\n  let isHappy9 = true;\n  let isHappy10 = true;\n  let isHappy11 = true;\n  let isHappy12 = true;\n  let isHappy13 = true;\n  let isHappy14 = true;\n  let isHappy15 = true;\n  let isHappy16 = true;\n  let isHappy17 = true;\n  let isHappy18 = true;\n  let isHappy19 = true;\n  let isHappy20 = true;\n  let isHappy21 = true;\n  let isHappy22 = true;\n  let isHappy23 = true;\n  let isHappy24 = true;\n  let isHappy25 = true;\n  let isHappy26 = true;\n  let isHappy27 = true;\n  let isHappy28 = true;\n  let isHappy29 = true;\n  let isHappy30 = true;\n  let isHappy31 = true;\n  let isHappy32 = true;\n  let isHappy33 = true;\n  let isHappy34 = true;\n  let isHappy35 = true;\n  let isHappy36 = true;\n  let isHappy37 = true;\n  let isHappy38 = true;\n  let isHappy39 = true;\n  let isHappy40 = true;\n  let isHappy41 = true;\n  let isHappy42 = true;\n  let isHappy43 = true;\n  let isHappy44 = true;\n  let isHappy45 = true;\n  let isHappy46 = true;\n  let isHappy47 = true;\n  let isHappy48 = true;\n  let isHappy49 = true;\n  let isHappy50 = true;\n  let isHappy51 = true;\n  let isHappy52 = true;\n  let isHappy53 = true;\n  let isHappy54 = true;\n  let isHappy55 = true;\n  let isHappy56 = true;\n  let isHappy57 = true;\n  let isHappy58 = true;\n  let isHappy59 = true;\n  let isHappy60 = true;\n  let isHappy61 = true;\n  let isHappy62 = true;\n  let isHappy63 = true;\n  let isHappy64 = true;\n  let isHappy65 = true;\n  let isHappy66 = true;\n  let isHappy67 = true;\n  let isHappy68 = true;\n  let isHappy69 = true;\n  let isHappy70 = true;\n  let isHappy71 = true;\n  let isHappy72 = true;\n  let isHappy73 = true;\n  let isHappy74 = true;\n  let isHappy75 = true;\n  let isHappy76 = true;\n  let isHappy77 = true;\n  let isHappy78 = true;\n  let isHappy79 = true;\n  let isHappy80 = true;\n  let isHappy81 = true;\n  let isHappy82 = true;\n  let isHappy83 = true;\n  let isHappy84 = true;\n  let isHappy85 = true;\n  let isHappy86 = true;\n  let isHappy87 = true;\n  let isHappy88 = true;\n  let isHappy89 = true;\n  let isHappy90 = true;\n  let isHappy91 = true;\n  let isHappy92 = true;\n  let isHappy93 = true;\n  let isHappy94 = true;\n  let isHappy95 = true;\n  let isHappy96 = true;\n  let isHappy97 = true;\n  let isHappy98 = true;\n  let isHappy99 = true;\n  let isHappy100 = true;\n  let isHappy101 = true;\n  let isHappy102 = true;\n  let isHappy103 = true;\n  let isHappy104 = true;\n  let isHappy105 = true;\n  let isHappy106 = true;\n  let isHappy107 = true;\n  let isHappy108 = true;\n  let isHappy109 = true;\n  let isHappy110 = true;\n  let isHappy111 = true;\n  let isHappy112 = true;\n  let isHappy113 = true;\n  let isHappy114 = true;\n  let isHappy115 = true;\n  let isHappy116 = true;\n  let isHappy117 = true;\n  let isHappy118 = true;\n  let isHappy119 = true;\n  let isHappy120 = true;\n  let isHappy121 = true;\n  let isHappy122 = true;\n  let isHappy123 = true;\n  let isHappy124 = true;\n  let isHappy125 = true;\n  let isHappy126 = true;\n  let isHappy127 = true;\n  let isHappy128 = true;\n  let isHappy129 = true;\n  let isHappy130 = true;\n  let isHappy131 = true;\n  let isHappy132 = true;\n  let isHappy133 = true;\n  let isHappy134 = true;\n  let isHappy135 = true;\n  let isHappy136 = true;\n  let isHappy137 = true;\n  let isHappy138 = true;\n  let isHappy139 = true;\n  let isHappy140 = true;\n  let isHappy141 = true;\n  let isHappy142 = true;\n  let isHappy143 = true;\n  let isHappy144 = true;\n  let isHappy145 = true;\n  let isHappy146 = true;\n  let isHappy147 = true;\n  let isHappy148 = true;\n  let isHappy149 = true;\n  let isHappy150 = true;\n  let isHappy151 = true;\n  let isHappy152 = true;\n  let isHappy153 = true;\n  let isHappy154 = true;\n  let isHappy155 = true;\n  let isHappy156 = true;\n  let isHappy157 = true;\n  let isHappy158 = true;\n  let isHappy159 = true;\n  let isHappy160 = true;\n  let isHappy161 = true;\n  let isHappy162 = true;\n  let isHappy163 = true;\n  let isHappy164 = true;\n  let isHappy165 = true;\n  let isHappy166 = true;\n  let isHappy167 = true;\n  let isHappy168 = true;\n  let isH"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => grade * 1);\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade) => grade > average? 'A' : 'B');\n  return letterGrades;\n};\n\n/*\n  Write a function named isEvenNumber that takes an array of numbers and returns true if the array is even.\n  Example:\n  isEvenNumber([3, 5, 2, 1]) ==> true\n  isEvenNumber([3, 5, 2, 0]) ==> false\n  isEvenNumber([3, 5, 2, 2]) ==> false\n  isEvenNumber([3, 5, 2, 3]) ==> true\n*/\nconst isEvenNumber = (grades) => {\n  const gradesArray = grades.map((grade) => grade * 1);\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  return sumOfGrades % 2 === 0;\n};\n\n/*\n  Write a function named isOddNumber that takes an array of numbers and returns true if the array is odd.\n  Example:\n  isOddNumber([3, 5, 2, 1]) ==> false\n  isOddNumber([3, 5, 2, 0]) ==> true\n  isOddNumber([3, 5, 2, 2]) ==> true\n  isOddNumber([3, 5, 2, 3]) ==> false\n*/\nconst isOddNumber = (grades) => {\n  const gradesArray = grades.map((grade) => grade * 1);\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  return sumOfGrades % 2!== 0;\n};\n\n/*\n  Write a function named isPrime that takes an array of numbers and returns true if the array is prime.\n  Example:\n  isPrime([3, 5, 2, 1]) ==> true\n  isPrime([3, 5, 2, 0]) ==> false\n  isPrime([3, 5, 2, 2]) ==> false\n  isPrime([3, 5, 2, 3]) ==> false\n  isPrime([3, 5, 2, 4]) ==> false\n  isPrime([3, 5, 2, 5]) ==> true\n  isPrime([3, 5, 2, 6]) ==> false\n  isPrime([3, 5, 2, 7]) ==> false\n  isPrime([3, 5, 2, 8]) ==> false\n  isPrime([3, 5, 2, 9]) ==> false\n  isPrime([3, 5, 2, 10]) ==> false\n  isPrime([3, 5, 2, 11]) ==> false\n  isPrime([3, 5, 2, 12]) ==> false\n  isPrime([3, 5, 2, 13]) ==> false\n  isPrime([3, 5, 2, 14]) ==> false\n  isPrime([3, 5, 2, 15]) ==> false\n  isPrime([3, 5, 2, 16]) ==> false\n  isPrime([3, 5, 2, 17]) ==> false\n  isPrime([3, 5, 2, 18]) ==> false\n  isPrime([3, 5, 2, 19]) ==> false\n  isPrime([3, 5, 2, 20]) ==> false\n  isPrime([3, 5, 2, 21]) ==> false\n  isPrime([3, 5, 2, 22]) ==> false\n  isPrime([3, 5, 2, 23]) ==> false\n  isPrime([3, 5, 2, 24]) ==> false\n  isPrime([3, 5, 2, 25]) ==> false\n  isPrime([3, 5, 2, 26]) ==> false\n  isPrime([3, 5, 2, 27]) ==> false\n  isPrime([3, 5, 2, 28]) ==> false\n  isPrime([3, 5, 2, 29]) ==> false\n  isPrime([3, 5, 2, 30]) ==> false\n  isPrime([3, 5, 2, 31]) ==> false\n  isPrime([3, 5, 2, 32]) ==> false\n  isPrime([3, 5, 2, 33]) ==> false\n  isPrime([3, 5, 2, 34]) ==> false\n  isPrime([3, 5, 2, 35]) ==> false\n  isPrime([3, 5, 2, 36]) ==> false\n  isPrime([3, 5, 2, 37]) ==> false\n  isPrime([3, 5, 2, 38]) ==> false\n  isPrime([3, 5, 2, 39]) ==> false\n  isPrime([3, 5, 2, 40]) ==> false\n  isPrime([3, 5, 2, 41]) ==> false\n  isPrime([3, 5, 2, 42]) ==> false\n  isPrime([3, 5, 2, 43]) ==> false\n  isPrime([3, 5, 2, 44]) ==> false\n  isPrime([3, 5, 2, 45]) ==> false\n  isPrime([3, 5, 2, 46]) ==> false\n  isPrime([3, 5, 2, 47]) ==> false\n  isPrime([3, 5, 2, 48]) ==> false\n  isPrime([3, 5, 2, 49]) ==> false\n  isPrime([3, 5, 2, 50]) ==> false\n  isPrime([3, 5, 2, 51]) ==> false\n  isPrime([3, 5, 2, 52]) ==> false\n  isPrime([3, 5, 2, 53]) ==> false\n  isPrime([3, 5, 2, 54]) ==> false\n  isPrime([3, 5, 2, 55]) ==> false\n  isPrime([3, 5, 2, 56]) ==> false\n  isPrime([3, 5, 2, 57]) ==> false\n  isPrime([3, 5, 2, 58]) ==> false\n  isPrime([3, 5, 2, 59]) ==> false\n  isPrime([3, 5, 2, 60]) ==> false\n  isPrime([3, 5, 2, 61]) ==> false\n  isPrime([3, 5, 2, 62]) ==> false\n  isPrime([3, 5, 2, 63]) ==> false\n  isPrime([3, 5, 2, 64]) ==> false\n  isPrime([3, 5, 2, 65]) ==> false\n  isPrime([3, 5, 2, 66]) ==> false\n  isPrime([3, 5, 2, 67]) ==> false\n  isPrime([3, 5, 2, 68]) ==> false\n  isPrime([3, 5, 2, 69]) ==> false\n  isPrime([3, 5, 2, 70]) ==> false\n  isPrime([3, 5, 2, 71]) ==> false\n  isPrime([3, 5, 2, 72]) ==> false\n  isPrime([3, 5, 2, 73]) ==> false\n  isPrime([3, 5, 2, 74]) ==> false\n  isPrime([3, 5, 2, 75]) ==> false\n  isPrime([3, 5, 2, 76]) ==> false\n  isPrime([3, 5, 2, 77"}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;"}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n  n = 0\n  while n >= 10\n    n /= 10\n  end\n  while n >= 1\n    n /= 10\n  end\n  startsOneEnds = n\n}\n*/\nfunction startsOneEnds(n) {\n  var startsOneEnds = 0;\n  while (n >= 10) {\n    n /= 10;\n    startsOneEnds += n;\n  }\n  while (n >= 1) {\n    n /= 10;\n    startsOneEnds += n;\n  }\n  return startsOneEnds;\n}\n\n/**\n * Returns true if the number is an integer.\n */\nfunction isInteger(n) {\n  return n % 1 === 0;\n}\n\n/**\n * Returns true if the number is a power of two.\n */\nfunction isPowerOfTwo(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 2));\n}\n\n/**\n * Returns true if the number is a power of two.\n */\nfunction isPowerOfThree(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 3));\n}\n\n/**\n * Returns true if the number is a power of four.\n */\nfunction isPowerOfFour(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 4));\n}\n\n/**\n * Returns true if the number is a power of five.\n */\nfunction isPowerOfFive(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 5));\n}\n\n/**\n * Returns true if the number is a power of six.\n */\nfunction isPowerOfSix(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 6));\n}\n\n/**\n * Returns true if the number is a power of seven.\n */\nfunction isPowerOfSeven(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 7));\n}\n\n/**\n * Returns true if the number is a power of eight.\n */\nfunction isPowerOfEight(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 8));\n}\n\n/**\n * Returns true if the number is a power of nine.\n */\nfunction isPowerOfNine(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 9));\n}\n\n/**\n * Returns true if the number is a power of ten.\n */\nfunction isPowerOfTen(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 10));\n}\n\n/**\n * Returns true if the number is a power of twenty-five.\n */\nfunction isPowerOfTwentyFive(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 20));\n}\n\n/**\n * Returns true if the number is a power of twenty-six.\n */\nfunction isPowerOfTwentySix(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 21));\n}\n\n/**\n * Returns true if the number is a power of twenty-seven.\n */\nfunction isPowerOfTwentySeven(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 22));\n}\n\n/**\n * Returns true if the number is a power of twenty-eight.\n */\nfunction isPowerOfTwentyEight(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 23));\n}\n\n/**\n * Returns true if the number is a power of twenty-nine.\n */\nfunction isPowerOfTwentyNine(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 24));\n}\n\n/**\n * Returns true if the number is a power of twenty-ten.\n */\nfunction isPowerOfTwentyTen(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 25));\n}\n\n/**\n * Returns true if the number is a power of twenty-twenty.\n */\nfunction isPowerOfTwentyTwenty(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 26));\n}\n\n/**\n * Returns true if the number is a power of twenty-thirteen.\n */\nfunction isPowerOfTwentyThirteen(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 27));\n}\n\n/**\n * Returns true if the number is a power of twenty-fourteen.\n */\nfunction isPowerOfTwentyFourteen(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 28));\n}\n\n/**\n * Returns true if the number is a power of twenty-fifteen.\n */\nfunction isPowerOfTwentyFifteen(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 29));\n}\n\n/**\n * Returns true if the number is a power of twenty-six.\n */\nfunction isPowerOfTwentySixteen(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 30));\n}\n\n/**\n * Returns true if the number is a power of twenty-seventeen.\n */\nfunction isPowerOfTwentySeventeen(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 31));\n}\n\n/**\n * Returns true if the number is a power of twenty-eighteen.\n */\nfunction isPowerOfTwentyEighteen(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 32));\n}\n\n/**\n * Returns true if the number is a power of twenty-nineteen.\n */\nfunction isPowerOfTwentyNineteen(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 33));\n}\n\n/**\n * Returns true if the number is a power of twenty-twenty-five.\n */\nfunction isPowerOfTwentyTwentyFive(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 34));\n}\n\n/**\n * Returns true if the number is a power of twenty-twenty-six.\n */\nfunction isPowerOfTwentyTwentySix(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 35));\n}\n\n/**\n * Returns true if the number is a power of twenty-twenty-seven.\n */\nfunction isPowerOfTwentyTwentySeven(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 36));\n}\n\n/**\n * Returns true if the number is a power of twenty-twenty-eight.\n */\nfunction isPowerOfTwentyTwentyEight(n) {\n  return n!== 0 && isInteger(n) && n!== 1 && isInteger(Math.pow(n, 37));\n}\n\n/**\n * Returns true if the number is a power of twenty-twenty-nine.\n */\nfunction isPowerOfTwentyTwentyNine(n) {\n  return n "}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let sumDigits;\n  let sumDigit;\n  let sumDigits;\n  let sumDigit;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigits;\n  let sumDigit"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = 0;\n  let odd = lst.length;\n  let evenOdd = even;\n  let evenOddOdd = evenOdd;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd--;\n    }\n  }\n  evenOdd = even;\n  evenOddOdd = evenOdd;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenOdd++;\n    } else {\n      evenOddOdd--;\n    }\n  }\n  return evenOddOdd;\n};\n\n/*Given a non-empty list of integers lst. return the maximum element in the list.\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let max = 0;\n  let maxOdd = lst.length;\n  let maxOddOdd = max;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      maxOdd++;\n    } else {\n      maxOddOdd--;\n    }\n  }\n  return maxOddOdd;\n};\n\n/*Given a non-empty list of integers lst. return the minimum element in the list.\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n  */\nconst min = (lst) => {\n  let min = 0;\n  let minOdd = lst.length;\n  let minOddOdd = min;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      minOdd++;\n    } else {\n      minOddOdd--;\n    }\n  }\n  return minOddOdd;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list.\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  let sumOdd = lst.length;\n  let sumOddOdd = sum;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sumOdd++;\n    } else {\n      sumOddOdd--;\n    }\n  }\n  return sumOddOdd;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are even.\n\n\n  Examples:\n      evenSum([4, 2, 6, 7]) ==> 2\n  */\nconst evenSum = (lst) => {\n  let evenSum = 0;\n  let evenOdd = lst.length;\n  let evenOddOdd = evenSum;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenOdd++;\n    } else {\n      evenOddOdd--;\n    }\n  }\n  return evenOddOdd;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are odd.\n\n\n  Examples:\n      oddSum([4, 2, 6, 7]) ==> 4\n  */\nconst oddSum = (lst) => {\n  let oddSum = 0;\n  let odd = lst.length;\n  let oddOdd = oddSum;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      oddOdd++;\n    } else {\n      oddOddOdd--;\n    }\n  }\n  return oddOddOdd;\n};\n\n/*Given a non-empty list of integers lst. return the difference between the maximum element in the list and the minimum element in the list.\n\n\n  Examples:\n      difference([4, 2, 6, 7]) ==> 1\n  */\nconst difference = (lst) => {\n  let difference = 0;\n  let maxOdd = lst.length;\n  let minOdd = lst.length;\n  let maxOddOdd = maxOdd;\n  let minOddOdd = minOdd;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      maxOdd--;\n    } else {\n      maxOddOdd++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      minOdd++;\n    } else {\n      minOddOdd--;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      difference = maxOdd - minOdd;\n    } else {\n      difference = maxOdd - minOddOdd;\n    }\n  }\n  return difference;\n};\n\n/*Given a non-empty list of integers lst. return the difference between the maximum element in the list and the minimum element in the list that are even.\n\n\n  Examples:\n      evenDifference([4, 2, 6, 7]) ==> 1\n  */\nconst evenDifference = (lst) => {\n  let evenDifference = 0;\n  let evenOdd = lst.length;\n  let evenOddOdd = evenDifference;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenOdd++;\n    } else {\n      evenOddOdd--;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenOddOdd++;\n    } else {\n      evenOddOddOdd--;\n    }\n  }\n  return evenOddOdd;\n};\n\n/*Given a non-empty list of integers lst. return the difference between the maximum element in the list and the minimum element in the list that are odd.\n\n\n  Examples:\n      oddDifference([4, 2, 6, 7]) ==> 1\n  */\nconst oddDifference = (lst) => {\n  let oddDifference = 0;\n  let odd = lst.length;\n  let oddOdd = oddDifference;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      oddOdd--;\n    } else {\n      oddOddOdd++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      oddOddOdd++;\n    } else {\n      oddOddOdd--;\n    }\n  }\n  return oddOddOdd;\n};\n\n/*Given a non-empty list of integers lst. return the difference between the maximum element in the list and the minimum element in the list that are even.\n\n\n  Examples:\n      evenEvenDifference([4, 2, 6, 7]) ==> 1\n  */\nconst evenEvenDifference = (lst) => {\n  let evenEvenDifference = 0;\n  let evenOdd = lst.length;\n  let evenOddOdd = evenEvenDifference;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenOdd++;\n    } else {\n      evenOddOdd--;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenOddOdd++;\n    } else {\n      evenOddOddOdd--;\n    }\n  }\n  return evenOddOdd;\n};\n\n/*Given a non-empty list of integers lst. return the difference between the maximum element in the list and the minimum element in the list that are odd.\n\n\n  Examples:\n      oddOddOddDifference([4, 2, 6, 7]) ==> 1\n  */\nconst oddOddOddDifference = (lst) => {\n  let oddOddOddDifference = 0;\n  let odd = lst.length;\n  let oddOdd = oddOddOddDifference;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      oddOddOddDifference++;\n    } else {\n      oddOddOddDifference--;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      oddOddOddDifference++;\n    } else {\n      oddOddOddDifference--;\n    }\n  }\n  return oddOddOddDifference;\n};\n\n/*Given a non-empty list of "}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let newStrArr = [];\n  let newStrArrArr = [];\n  let newStrArrArrArr = [];\n  let newStrArrArrArrArr = [];\n  let newStrArrArrArrArrArrArr = [];\n  let newStrArrArrArrArrArrArrArrArr = [];\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  let rowIndex = 0\n  let colIndex = 0\n  while (rowIndex < lst.length) {\n    const currentRow = lst[rowIndex]\n    if (currentRow[x] === x) {\n      row.push(currentRow)\n      rowIndex++\n    } else {\n      colIndex++\n    }\n  }\n  return row\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  const col = []\n  let colIndex = 0\n  let rowIndex = 0\n  while (colIndex < lst.length) {\n    const currentCol = lst[colIndex]\n    if (currentCol[x] === x) {\n      col.push(currentCol)\n      colIndex++\n    } else {\n      rowIndex++\n    }\n  }\n  return col\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndCol = (lst, x) => {\n  const row = []\n  let rowIndex = 0\n  let colIndex = 0\n  while (rowIndex < lst.length) {\n    const currentRow = lst[rowIndex]\n    if (currentRow[x] === x) {\n      row.push(currentRow)\n      rowIndex++\n    } else {\n      colIndex++\n    }\n  }\n  return [row, colIndex]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRowAndCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowAndCol([], 1) == []\n  getRowAndCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColAndRow = (lst, x) => {\n  const row = []\n  let rowIndex = 0\n  let colIndex = 0\n  while (rowIndex < lst.length) {\n    const currentRow = lst[rowIndex]\n    if (currentRow[x] === x) {\n      row.push(currentRow)\n      rowIndex++\n    } else {\n      colIndex++\n    }\n  }\n  return [row, colIndex, rowIndex]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRowAndColAndRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowAndColAndRow([], 1) == []\n  getRowAndColAndRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColAndRowAndCol = (lst, x) => {\n  const row = []\n  let rowIndex = 0\n  let colIndex = 0\n  while (rowIndex < lst.length) {\n    const currentRow = lst[rowIndex]\n    if (currentRow[x] === x) {\n      row.push(currentRow)\n      rowIndex++\n    } else {\n      colIndex++\n    }\n  }\n  return [row, colIndex, rowIndex, colIndex]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRowAndColAndRowAndCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowAndColAndRowAndCol([], 1) == []\n  getRowAndColAndRowAndCol([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowAndColAndRowAndColAndRow = (lst, x) => {\n  const row = []\n  let rowIndex = 0\n  let colIndex = 0\n  while (rowIndex < lst.length) {\n    const currentRow = lst[rowIndex]\n    if (currentRow[x] === x) {\n      row.push(currentRow)\n      rowIndex++\n    } else {\n      colIndex++\n    }\n  }\n  return [row, colIndex, rowIndex, colIndex, rowIndex]\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices"}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/**\n * Given an array of non-negative integers, return the sum of all the numbers in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * sumArray([]) => 0\n  * sumArray([5]) => 5\n  * sumArray([2, 4, 3, 0, 1, 5]) => 15\n  * sumArray([2, 4, 3, 0, 1, 5, 6]) => 45\n  */\nconst sumArray = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n};\n\n/**\n * Given an array of non-negative integers, return the maximum value in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * maxArray([]) => 0\n  * maxArray([5]) => 5\n  * maxArray([2, 4, 3, 0, 1, 5]) => 5\n  * maxArray([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst maxArray = (array) => {\n  let max = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Given an array of non-negative integers, return the minimum value in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * minArray([]) => 0\n  * minArray([5]) => 5\n  * minArray([2, 4, 3, 0, 1, 5]) => 0\n  * minArray([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst minArray = (array) => {\n  let min = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Given an array of non-negative integers, return the average of the values in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * averageArray([]) => 0\n  * averageArray([5]) => 5\n  * averageArray([2, 4, 3, 0, 1, 5]) => 2.5\n  * averageArray([2, 4, 3, 0, 1, 5, 6]) => 5\n  */\nconst averageArray = (array) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n * Given an array of non-negative integers, return the median of the values in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * medianArray([]) => 0\n  * medianArray([5]) => 5\n  * medianArray([2, 4, 3, 0, 1, 5]) => 2\n  * medianArray([2, 4, 3, 0, 1, 5, 6]) => 3\n  */\nconst medianArray = (array) => {\n  let sortedArray = sortArray(array);\n  let middle = Math.floor(sortedArray.length / 2);\n  let left = sortedArray.slice(0, middle);\n  let right = sortedArray.slice(middle, sortedArray.length);\n  return median(left, right);\n};\n\n/**\n * Given an array of non-negative integers, return the median of the values in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * medianArray([]) => 0\n  * medianArray([5]) => 5\n  * medianArray([2, 4, 3, 0, 1, 5]) => 2\n  * medianArray([2, 4, 3, 0, 1, 5, 6]) => 3\n  */\nconst median = (left, right) => {\n  let leftSum = sumArray(left);\n  let rightSum = sumArray(right);\n  let leftMedian = leftSum / 2;\n  let rightMedian = rightSum / 2;\n  return leftMedian;\n};\n\n/**\n * Given an array of non-negative integers, return the mode of the values in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * modeArray([]) => 0\n  * modeArray([5]) => 5\n  * modeArray([2, 4, 3, 0, 1, 5]) => 2\n  * modeArray([2, 4, 3, 0, 1, 5, 6]) => 3\n  */\nconst modeArray = (array) => {\n  let sortedArray = sortArray(array);\n  let mode = 0;\n  let leftSum = sumArray(left);\n  let rightSum = sumArray(right);\n  let leftMedian = leftSum / 2;\n  let rightMedian = rightSum / 2;\n  for (let i = 0; i < sortedArray.length; i++) {\n    if (sortedArray[i] === leftMedian) {\n      mode++;\n    }\n    if (sortedArray[i] === rightMedian) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/**\n * Given an array of non-negative integers, return the mode of the values in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * modeArray([]) => 0\n  * modeArray([5]) => 5\n  * modeArray([2, 4, 3, 0, 1, 5]) => 2\n  * modeArray([2, 4, 3, 0, 1, 5, 6]) => 3\n  */\nconst mode = (left, right) => {\n  let leftSum = sumArray(left);\n  let rightSum = sumArray(right);\n  let leftMedian = leftSum / 2;\n  let rightMedian = rightSum / 2;\n  let mode = 0;\n  for (let i = 0; i < sortedArray.length; i++) {\n    if (sortedArray[i] === leftMedian) {\n      mode++;\n    }\n    if (sortedArray[i] === rightMedian) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/**\n * Given an array of non-negative integers, return the mode of the values in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * modeArray([]) => 0\n  * modeArray([5]) => 5\n  * modeArray([2, 4, 3, 0, 1, 5]) => 2\n  * modeArray([2, 4, 3, 0, 1, 5, 6]) => 3\n  */\nconst mode = (left, right) => {\n  let leftSum = sumArray(left);\n  let rightSum = sumArray(right);\n  let leftMedian = leftSum / 2;\n  let rightMedian = rightSum / 2;\n  let mode = 0;\n  for (let i = 0; i < sortedArray.length; i++) {\n    if (sortedArray[i] === leftMedian) {\n      mode++;\n    }\n    if (sortedArray[i] === rightMedian) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/**\n * Given an array of non-negative integers, return the mode of the values in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * modeArray([]) => 0\n  * modeArray([5]) => 5\n  * modeArray([2, 4, 3, 0, 1, 5]) => 2\n  * modeArray([2, 4, 3, 0, 1, 5, 6]) => 3\n  */\nconst mode = (left, right) => {\n  let leftSum = sumArray(left);\n  let rightSum = sumArray(right);\n  let leftMedian = leftSum / 2;\n  let rightMedian = rightSum / 2;\n  let mode = 0;\n  for (let i = 0; i < sortedArray.length; i++) {\n    if (sortedArray[i] === leftMedian) {\n      mode++;\n    }\n    if (sortedArray[i] === rightMedian) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/**\n * Given an array of non-negative integers, return the mode of the values in the given array. Note: * Do not change the given array.\n\n  Examples:\n  * modeArray([]) => 0\n  * modeArray([5]) => 5\n  * modeArray([2, 4, 3, 0, 1, 5]) => 2\n  * modeArray([2, 4, 3, 0, 1, 5, 6]) => 3\n  */\nconst mode = (left, right) => {\n  let leftSum = sumArray(left);\n  let rightSum = sumArray(right);\n  let left"}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h"}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n    let minElement = lst[0];\n    let minIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] < minElement) {\n        minElement = lst[i];\n        minIndex = i;\n      }\n    }\n    return minIndex;\n  }\n*/\n\n// Write a function firstSmallest () that returns the first smallest element in the list. Returns zero if there is no such element. firstSmallest ([1, 2, 3, 4, 5]) = = 1 firstSmallest ([5, 1, 4, 3, 2]) = = 1 firstSmallest ([]) = = null firstSmallest ([1, 1]) = = null * / const firstSmallest = (lst) = > {\n    let minElement = lst[0];\n    let minIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] < minElement) {\n        minElement = lst[i];\n        minIndex = i;\n      }\n    }\n    return minIndex;\n  }\n\n// Write a function lastSmallest () that returns the last smallest element in the list. Returns zero if there is no such element. lastSmallest ([1, 2, 3, 4, 5]) = = 5 lastSmallest ([5, 1, 4, 3, 2]) = = 5 lastSmallest ([]) = = null lastSmallest ([1, 1]) = = null * / const lastSmallest = (lst) = > {\n    let minElement = lst[0];\n    let minIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] < minElement) {\n        minElement = lst[i];\n        minIndex = i;\n      }\n    }\n    return minIndex;\n  }\n\n// Write a function nextBiggest () that returns the second biggest element in the list. Returns zero if there is no such element. nextBiggest ([1, 2, 3, 4, 5]) = = 4 nextBiggest ([5, 1, 4, 3, 2]) = = 4 nextBiggest ([]) = = null nextBiggest ([1, 1]) = = null * / const nextBiggest = (lst) = > {\n    let maxElement = lst[0];\n    let maxIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > maxElement) {\n        maxElement = lst[i];\n        maxIndex = i;\n      }\n    }\n    return maxIndex;\n  }\n\n// Write a function firstBiggest () that returns the first biggest element in the list. Returns zero if there is no such element. firstBiggest ([1, 2, 3, 4, 5]) = = 1 firstBiggest ([5, 1, 4, 3, 2]) = = 1 firstBiggest ([]) = = null firstBiggest ([1, 1]) = = null * / const firstBiggest = (lst) = > {\n    let maxElement = lst[0];\n    let maxIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > maxElement) {\n        maxElement = lst[i];\n        maxIndex = i;\n      }\n    }\n    return maxIndex;\n  }\n\n// Write a function lastBiggest () that returns the last biggest element in the list. Returns zero if there is no such element. lastBiggest ([1, 2, 3, 4, 5]) = = 5 lastBiggest ([5, 1, 4, 3, 2]) = = 5 lastBiggest ([]) = = null lastBiggest ([1, 1]) = = null * / const lastBiggest = (lst) = > {\n    let maxElement = lst[0];\n    let maxIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > maxElement) {\n        maxElement = lst[i];\n        maxIndex = i;\n      }\n    }\n    return maxIndex;\n  }\n\n// Write a function nextBiggest () that returns the second biggest element in the list. Returns zero if there is no such element. nextBiggest ([1, 2, 3, 4, 5]) = = 4 nextBiggest ([5, 1, 4, 3, 2]) = = 4 nextBiggest ([]) = = null nextBiggest ([1, 1]) = = null * / const nextBiggest = (lst) = > {\n    let maxElement = lst[0];\n    let maxIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > maxElement) {\n        maxElement = lst[i];\n        maxIndex = i;\n      }\n    }\n    return maxIndex;\n  }\n\n// Write a function firstBiggest () that returns the first biggest element in the list. Returns zero if there is no such element. firstBiggest ([1, 2, 3, 4, 5]) = = 1 firstBiggest ([5, 1, 4, 3, 2]) = = 1 firstBiggest ([]) = = null firstBiggest ([1, 1]) = = null * / const firstBiggest = (lst) = > {\n    let maxElement = lst[0];\n    let maxIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > maxElement) {\n        maxElement = lst[i];\n        maxIndex = i;\n      }\n    }\n    return maxIndex;\n  }\n\n// Write a function lastBiggest () that returns the last biggest element in the list. Returns zero if there is no such element. lastBiggest ([1, 2, 3, 4, 5]) = = 5 lastBiggest ([5, 1, 4, 3, 2]) = = 5 lastBiggest ([]) = = null lastBiggest ([1, 1]) = = null * / const lastBiggest = (lst) = > {\n    let maxElement = lst[0];\n    let maxIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > maxElement) {\n        maxElement = lst[i];\n        maxIndex = i;\n      }\n    }\n    return maxIndex;\n  }\n\n// Write a function nextBiggest () that returns the second biggest element in the list. Returns zero if there is no such element. nextBiggest ([1, 2, 3, 4, 5]) = = 4 nextBiggest ([5, 1, 4, 3, 2]) = = 4 nextBiggest ([]) = = null nextBiggest ([1, 1]) = = null * / const nextBiggest = (lst) = > {\n    let maxElement = lst[0];\n    let maxIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > maxElement) {\n        maxElement = lst[i];\n        maxIndex = i;\n      }\n    }\n    return maxIndex;\n  }\n\n// Write a function firstBiggest () that returns the first biggest element in the list. Returns zero if there is no such element. firstBiggest ([1, 2, 3, 4, 5]) = = 1 firstBiggest ([5, 1, 4, 3, 2]) = = 1 firstBiggest ([]) = = null firstBiggest ([1, 1]) = = null * / const firstBiggest = (lst) = > {\n    let maxElement = lst[0];\n    let maxIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > maxElement) {\n        maxElement = lst[i];\n        maxIndex = i;\n      }\n    }\n    return maxIndex;\n  }\n\n// Write a function lastBiggest () that returns the last biggest element in the list. Returns zero if there is no such element. lastBiggest ([1, 2, 3, 4, 5]) = = 5 lastBiggest ([5, 1, 4, 3, 2]) = = 5 lastBiggest ([]) = = null lastBiggest ([1, 1]) = = null * / const lastBiggest = (lst) = > {\n    let maxElement = lst[0];\n    let maxIndex = -1;\n    for (let i = 1; i < lst.length; i++) {\n      if (lst[i] > maxElement) {\n        maxElement = lst[i];\n        maxIndex = i;\n      }\n    }\n    return maxIndex;\n  }\n\n// Write a function nextBiggest () that returns the second biggest element in the list. Returns zero if there is no such element. nextBiggest ([1, 2, 3, 4, 5]) = = 4 nextBiggest ([5, 1, 4, 3, 2]) = = 4 nextBiggest ([]) = = null nextBiggest ([1, 1]) = = null * / "}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  return S.includes(\"I.\") || S.includes(\"or\") || S.includes(\"!\") || S.includes(\".\") || S.includes(\"?\") || S.includes(\":\") || S.includes(\"!\");\n};\n\n/*\n  A sentence is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase is made up of words and phrases. A phrase "}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === y && y === -z || x === -y && -z === z || x === -z && -y === z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -y === -z || x === y && -y === -z || x === -y && -z === -z || x === -z && -y === -z || x === -z && -"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let letters = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsLength = vowels.length;\n  let lettersLength = letters.length;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLengthIndex = 0;\n  let messageLengthIndex2 = 0;\n  let messageLengthIndex3 = 0;\n  let messageLengthIndex4 = 0;\n  let messageLengthIndex5 = 0;\n  let messageLengthIndex6 = 0;\n  let messageLengthIndex7 = 0;\n  let messageLengthIndex8 = 0;\n  let messageLengthIndex9 = 0;\n  let messageLengthIndex10 = 0;\n  let messageLengthIndex11 = 0;\n  let messageLengthIndex12 = 0;\n  let messageLengthIndex13 = 0;\n  let messageLengthIndex14 = 0;\n  let messageLengthIndex15 = 0;\n  let messageLengthIndex16 = 0;\n  let messageLengthIndex17 = 0;\n  let messageLengthIndex18 = 0;\n  let messageLengthIndex19 = 0;\n  let messageLengthIndex20 = 0;\n  let messageLengthIndex21 = 0;\n  let messageLengthIndex22 = 0;\n  let messageLengthIndex23 = 0;\n  let messageLengthIndex24 = 0;\n  let messageLengthIndex25 = 0;\n  let messageLengthIndex26 = 0;\n  let messageLengthIndex27 = 0;\n  let messageLengthIndex28 = 0;\n  let messageLengthIndex29 = 0;\n  let messageLengthIndex30 = 0;\n  let messageLengthIndex31 = 0;\n  let messageLengthIndex32 = 0;\n  let messageLengthIndex33 = 0;\n  let messageLengthIndex34 = 0;\n  let messageLengthIndex35 = 0;\n  let messageLengthIndex36 = 0;\n  let messageLengthIndex37 = 0;\n  let messageLengthIndex38 = 0;\n  let messageLengthIndex39 = 0;\n  let messageLengthIndex40 = 0;\n  let messageLengthIndex41 = 0;\n  let messageLengthIndex42 = 0;\n  let messageLengthIndex43 = 0;\n  let messageLengthIndex44 = 0;\n  let messageLengthIndex45 = 0;\n  let messageLengthIndex46 = 0;\n  let messageLengthIndex47 = 0;\n  let messageLengthIndex48 = 0;\n  let messageLengthIndex49 = 0;\n  let messageLengthIndex50 = 0;\n  let messageLengthIndex51 = 0;\n  let messageLengthIndex52 = 0;\n  let messageLengthIndex53 = 0;\n  let messageLengthIndex54 = 0;\n  let messageLengthIndex55 = 0;\n  let messageLengthIndex56 = 0;\n  let messageLengthIndex57 = 0;\n  let messageLengthIndex58 = 0;\n  let messageLengthIndex59 = 0;\n  let messageLengthIndex60 = 0;\n  let messageLengthIndex61 = 0;\n  let messageLengthIndex62 = 0;\n  let messageLengthIndex63 = 0;\n  let messageLengthIndex64 = 0;\n  let messageLengthIndex65 = 0;\n  let messageLengthIndex66 = 0;\n  let messageLengthIndex67 = 0;\n  let messageLengthIndex68 = 0;\n  let messageLengthIndex69 = 0;\n  let messageLengthIndex70 = 0;\n  let messageLengthIndex71 = 0;\n  let messageLengthIndex72 = 0;\n  let messageLengthIndex73 = 0;\n  let messageLengthIndex74 = 0;\n  let messageLengthIndex75 = 0;\n  let messageLengthIndex76 = 0;\n  let messageLengthIndex77 = 0;\n  let messageLengthIndex78 = 0;\n  let messageLengthIndex79 = 0;\n  let messageLengthIndex80 = 0;\n  let messageLengthIndex81 = 0;\n  let messageLengthIndex82 = 0;\n  let messageLengthIndex83 = 0;\n  let messageLengthIndex84 = 0;\n  let messageLengthIndex85 = 0;\n  let messageLengthIndex86 = 0;\n  let messageLengthIndex87 = 0;\n  let messageLengthIndex88 = 0;\n  let messageLengthIndex89 = 0;\n  let messageLengthIndex90 = 0;\n  let messageLengthIndex91 = 0;\n  let messageLengthIndex92 = 0;\n  let messageLengthIndex93 = 0;\n  let messageLengthIndex94 = 0;\n  let messageLengthIndex95 = 0;\n  let messageLengthIndex96 = 0;\n  let messageLengthIndex97 = 0;\n  let messageLengthIndex98 = 0;\n  let messageLengthIndex99 = 0;\n  let messageLengthIndex100 = 0;\n  let messageLengthIndex101 = 0;\n  let messageLengthIndex102 = 0;\n  let messageLengthIndex103 = 0;\n  let messageLengthIndex104 = 0;\n  let messageLengthIndex105 = 0;\n  let messageLengthIndex106 = 0;\n  let messageLengthIndex107 = 0;\n  let messageLengthIndex108 = 0;\n  let messageLengthIndex109 = 0;\n  let messageLengthIndex110 = 0;\n  let messageLengthIndex111 = 0;\n  let messageLengthIndex112 = 0;\n  let messageLengthIndex113 = 0;\n  let messageLengthIndex114 = 0;\n  let messageLengthIndex115 = 0;\n  let messageLengthIndex116 = 0;\n  let messageLengthIndex117 = 0;\n  let messageLengthIndex118 = 0;\n  let messageLengthIndex119 = 0;\n  let messageLengthIndex120 = 0;\n  let messageLengthIndex121 = 0;\n  let messageLengthIndex122 = 0;\n  let messageLengthIndex123 = 0;\n  let messageLengthIndex124 = 0;\n  let messageLengthIndex125 = 0;\n  let messageLengthIndex126 = 0;\n  let messageLengthIndex127 = 0;\n  let messageLengthIndex128 = 0;\n  let messageLengthIndex129 = 0;\n  let messageLengthIndex130 = 0;\n  let messageLengthIndex131 = 0;\n  let messageLengthIndex132 = 0;\n  let messageLengthIndex133 = 0;\n  let messageLengthIndex134 = 0;\n  let messageLengthIndex135 = 0;\n  let messageLengthIndex136 = 0;\n  let messageLengthIndex137 = 0;\n  let messageLengthIndex138 = 0;\n  let messageLengthIndex139 = 0;\n  let messageLengthIndex140 = 0;\n  let messageLengthIndex141 = 0;\n  let messageLengthIndex142 = 0;\n  let messageLengthIndex143 = 0;\n  let messageLengthIndex144 = 0;\n  let messageLengthIndex145 = 0;\n  let messageLengthIndex146 = 0;\n  let messageLengthIndex147 = 0;\n  let messageLengthIndex148 = 0;\n  let messageLengthIndex149 = 0;\n  let messageLengthIndex150 = 0;\n  let messageLengthIndex151 = 0;\n  let messageLengthIndex152 = 0;\n  let messageLengthIndex153 = 0;\n  let messageLengthIndex154 = 0;\n  let messageLengthIndex155 = 0;\n  let messageLengthIndex156 = 0;\n  let messageLengthIndex157 = 0;\n  let messageLengthIndex158 = 0;\n  let messageLengthIndex159 = 0;\n  let messageLengthIndex160 = 0;\n  let messageLengthIndex161 = 0;\n  let messageLengthIndex162 = 0;\n  let messageLengthIndex163 = 0;\n  let messageLengthIndex164 = 0;\n  let messageLengthIndex165 = 0;\n  let messageLengthIndex166 = 0;\n  let messageLengthIndex167 = 0;\n  let messageLengthIndex168 = 0;\n  let messageLengthIndex169 = 0;\n  let messageLengthIndex170 = 0;\n  let messageLengthIndex171 = 0;\n  let messageLengthIndex172 = 0;\n  let messageLengthIndex173 = 0;\n  let messageLengthIndex174 = 0;\n  let messageLengthIndex175 = 0;\n  let messageLengthIndex176 = 0;\n  let messageLengthIndex177 = 0;\n  let messageLengthIndex178 = 0;\n  let messageLengthIndex179 = 0;\n  let messageLengthIndex180 = 0;\n  let messageLengthIndex181 = 0;\n  let messageLengthIndex182 = 0;\n  let messageLengthIndex183 = 0;\n  let messageLengthIndex184 = 0;\n  let messageLengthIndex185 = 0;\n  let messageLengthIndex186 = 0;\n  let messageLengthIndex187 = 0;\n  let messageLengthIndex188 = 0;\n  let messageLengthIndex189 = 0;\n  let messageLengthIndex190 = 0;\n  let messageLengthIndex191 = 0;\n  let messageLengthIndex192 = 0;\n  let messageLengthIndex193 = 0;\n  let messageLengthIndex194 = 0;\n  let messageLengthIndex195 = 0;\n  let messageLengthIndex196 = 0;\n  let messageLengthIndex197 = 0;\n  let messageLengthIndex198 = 0;\n  let messageLengthIndex199 = 0;\n  let messageLength"}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let maxIndex = 0;\n  let sumIndex = 0;\n  let maxValue = 0;\n  let sumValue = 0;\n  let maxDigit = 0;\n  let sumDigit = 0;\n  let maxDigitIndex = 0;\n  let sumDigitIndex = 0;\n  let maxDigitValue = 0;\n  let sumDigitValue = 0;\n  let maxDigitDigit = 0;\n  let sumDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitValue = 0;\n  let maxDigitDigitDigit = 0;\n  let sumDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitDigitIndex = 0;\n  let sumDigitDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigit = 0;\n  let sumDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigit = 0;\n  let sumDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigit = 0;\n  let sumDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigit = 0;\n  let sumDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigitDigit = 0;\n  let sumDigitDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigit = 0;\n  let sumDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigit = 0;\n  let sumDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sumDigitDigitIndex = 0;\n  let maxDigitDigitValue = 0;\n  let sumDigitDigitDigitValue = 0;\n  let maxDigitDigitDigit = 0;\n  let sumDigitDigitDigit = 0;\n  let maxDigitDigitIndex = 0;\n  let sum"}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCase = true;\n  for (let key in dict) {\n    if (dict[key]!== undefined && dict[key]!== null && dict[key].toLowerCase() === dict[key].toUpperCase()) {\n      isCase = false;\n      break;\n    }\n  }\n  return isCase;\n};\n\n/**\n * Checks if the specified string is a valid email address.\n * Examples:\n * isValidEmail(\"removed@example.com\") should return true.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\"removed@example.com\") should return false.\n * isValidEmail(\""}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let counter = 0;\n  let primesArray = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] === n) {\n      counter++;\n    }\n    if (counter === primes.length) {\n      primesArray.push(primes[i]);\n    }\n  }\n  return primesArray;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let counter = 0;\n  let primesArray = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] === n) {\n      counter++;\n    }\n    if (counter === primes.length) {\n      primesArray.push(primes[i]);\n    }\n  }\n  return primesArray;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and greater than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let counter = 0;\n  let primesArray = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] === n) {\n      counter++;\n    }\n    if (counter === primes.length) {\n      primesArray.push(primes[i]);\n    }\n  }\n  return primesArray;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let counter = 0;\n  let primesArray = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] === n) {\n      counter++;\n    }\n    if (counter === primes.length) {\n      primesArray.push(primes[i]);\n    }\n  }\n  return primesArray;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let counter = 0;\n  let primesArray = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] === n) {\n      counter++;\n    }\n    if (counter === primes.length) {\n      primesArray.push(primes[i]);\n    }\n  }\n  return primesArray;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let counter = 0;\n  let primesArray = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] === n) {\n      counter++;\n    }\n    if (counter === primes.length) {\n      primesArray.push(primes[i]);\n    }\n  }\n  return primesArray;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and greater than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let counter = 0;\n  let primesArray = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] === n) {\n      counter++;\n    }\n    if (counter === primes.length) {\n      primesArray.push(primes[i]);\n    }\n  }\n  return primesArray;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let counter = 0;\n  let primesArray = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] === n) {\n      counter++;\n    }\n    if (counter === primes.length) {\n      primesArray.push(primes[i]);\n    }\n  }\n  return primesArray;\n};\n\n/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let counter = 0;\n  let primesArray = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] === n) {\n      counter++;\n    }\n    if (counter === primes.length) {\n      primesArray.push(primes[i]);\n"}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  for (let i = a; i; i--) {\n    product *= i;\n  }\n  return product;\n};\n\n/*\n  Complete the function that takes two integers and returns the sum of their digits. Suppose the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sum = (num1, num2) => {\n  let sum = 0;\n  for (let i = num1; i; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Complete the function that takes two integers and returns the difference between their digits. Suppose the input is always valid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -28.\n  difference(2020, 1851) should return -1851.\n  difference(14,-15) should return -14.\n  */\nconst difference = (num1, num2) => {\n  let difference = 0;\n  for (let i = num1; i; i--) {\n    difference += i;\n  }\n  return difference;\n};\n\n/*\n  Complete the function that takes two integers and returns the absolute value of the difference between their digits. Suppose the input is always valid.\n  Examples:\n  absoluteDifference(148, 412) should return 14.\n  absoluteDifference(19, 28) should return 28.\n  absoluteDifference(2020, 1851) should return 1851.\n  absoluteDifference(14,-15) should return 14.\n  */\nconst absoluteDifference = (num1, num2) => {\n  let difference = 0;\n  for (let i = num1; i; i--) {\n    difference += Math.abs(i);\n  }\n  return difference;\n};\n\n/*\n  Complete the function that takes two integers and returns the sum of their absolute digits. Suppose the input is always valid.\n  Examples:\n  absoluteSum(148, 412) should return 148.\n  absoluteSum(19, 28) should return 28.\n  absoluteSum(2020, 1851) should return 1851.\n  absoluteSum(14,-15) should return 14.\n  */\nconst absoluteSum = (num1, num2) => {\n  let sum = 0;\n  for (let i = num1; i; i--) {\n    sum += Math.abs(i);\n  }\n  return sum;\n};\n\n/*\n  Complete the function that takes two integers and returns the product of their absolute digits. Suppose the input is always valid.\n  Examples:\n  absoluteProduct(148, 412) should return 14.\n  absoluteProduct(19, 28) should return 28.\n  absoluteProduct(2020, 1851) should return 1851.\n  absoluteProduct(14,-15) should return 14.\n  */\nconst absoluteProduct = (num1, num2) => {\n  let product = 1;\n  for (let i = num1; i; i--) {\n    product *= Math.abs(i);\n  }\n  return product;\n};\n\n/*\n  Complete the function that takes two integers and returns the sum of their digits. Suppose the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sumOfDigits = (num1, num2) => {\n  let sum = 0;\n  for (let i = num1; i; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Complete the function that takes two integers and returns the difference between their digits. Suppose the input is always valid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -28.\n  difference(2020, 1851) should return -1851.\n  difference(14,-15) should return -14.\n  */\nconst differenceOfDigits = (num1, num2) => {\n  let difference = 0;\n  for (let i = num1; i; i--) {\n    difference += i;\n  }\n  return difference;\n};\n\n/*\n  Complete the function that takes two integers and returns the absolute value of the difference between their digits. Suppose the input is always valid.\n  Examples:\n  absoluteDifference(148, 412) should return 14.\n  absoluteDifference(19, 28) should return 28.\n  absoluteDifference(2020, 1851) should return 1851.\n  absoluteDifference(14,-15) should return 14.\n  */\nconst absoluteDifferenceOfDigits = (num1, num2) => {\n  let difference = 0;\n  for (let i = num1; i; i--) {\n    difference += Math.abs(i);\n  }\n  return difference;\n};\n\n/*\n  Complete the function that takes two integers and returns the sum of their absolute digits. Suppose the input is always valid.\n  Examples:\n  absoluteSum(148, 412) should return 148.\n  absoluteSum(19, 28) should return 28.\n  absoluteSum(2020, 1851) should return 1851.\n  absoluteSum(14,-15) should return 14.\n  */\nconst absoluteSumOfDigits = (num1, num2) => {\n  let sum = 0;\n  for (let i = num1; i; i--) {\n    sum += Math.abs(i);\n  }\n  return sum;\n};\n\n/*\n  Complete the function that takes two integers and returns the product of their absolute digits. Suppose the input is always valid.\n  Examples:\n  absoluteProduct(148, 412) should return 14.\n  absoluteProduct(19, 28) should return 28.\n  absoluteProduct(2020, 1851) should return 1851.\n  absoluteProduct(14,-15) should return 14.\n  */\nconst absoluteProductOfDigits = (num1, num2) => {\n  let product = 1;\n  for (let i = num1; i; i--) {\n    product *= Math.abs(i);\n  }\n  return product;\n};\n\n/*\n  Complete the function that takes two integers and returns the sum of their digits. Suppose the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sumOfDigitsOfDigits = (num1, num2) => {\n  let sum = 0;\n  for (let i = num1; i; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Complete the function that takes two integers and returns the difference between their digits. Suppose the input is always valid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -28.\n  difference(2020, 1851) should return -1851.\n  difference(14,-15) should return -14.\n  */\nconst differenceOfDigitsOfDigits = (num1, num2) => {\n  let difference = 0;\n  for (let i = num1; i; i--) {\n    difference += i;\n  }\n  return difference;\n};\n\n/*\n  Complete the function that takes two integers and returns the absolute value of the difference between their digits. Suppose the input is always valid.\n  Examples:\n  absoluteDifference(148, 412) should return 14.\n  absoluteDifference(19, 28) should return 28.\n  absoluteDifference(2020, 1851) should return 1851.\n  absoluteDifference(14,-15) should return 14.\n  */\nconst absoluteDifferenceOfDigitsOfDigits = (num1, num"}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s.charCodeAt(i) > 64) {\n      count++;\n    }\n    i++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (j < l) {\n    if (s.charCodeAt(j) > 64) {\n      count++;\n    }\n    j++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (k < l) {\n    if (s.charCodeAt(k) > 64) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in odd indexes and\n  the number of uppercase letters in even indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 2\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s.charCodeAt(i) > 64) {\n      count++;\n    }\n    i++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (j < l) {\n    if (s.charCodeAt(j) > 64) {\n      count++;\n    }\n    j++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (k < l) {\n    if (s.charCodeAt(k) > 64) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, return the number of digits in even indexes and the\n  number of digits in odd indexes.\n  \n  For example:\n  countDigits('aBCdEf') returns 2\n  countDigits('abcdefg') returns 2\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s.charCodeAt(i) > 64) {\n      count++;\n    }\n    i++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (j < l) {\n    if (s.charCodeAt(j) > 64) {\n      count++;\n    }\n    j++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (k < l) {\n    if (s.charCodeAt(k) > 64) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, return the number of spaces in even indexes and the\n  number of spaces in odd indexes.\n  \n  For example:\n  countSpace('aBCdEf') returns 2\n  countSpace('abcdefg') returns 2\n  countSpace('dBBE') returns 0\n  */\nconst countSpace = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s.charCodeAt(i) > 64) {\n      count++;\n    }\n    i++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (j < l) {\n    if (s.charCodeAt(j) > 64) {\n      count++;\n    }\n    j++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (k < l) {\n    if (s.charCodeAt(k) > 64) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, return the number of letters in even indexes and the\n  number of letters in odd indexes.\n  \n  For example:\n  countLetters('aBCdEf') returns 2\n  countLetters('abcdefg') returns 2\n  countLetters('dBBE') returns 0\n  */\nconst countLetters = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s.charCodeAt(i) > 64) {\n      count++;\n    }\n    i++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (j < l) {\n    if (s.charCodeAt(j) > 64) {\n      count++;\n    }\n    j++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (k < l) {\n    if (s.charCodeAt(k) > 64) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, return the number of uppercase letters in even indexes and\n  the number of uppercase letters in odd indexes.\n  \n  For example:\n  countUpperCase('aBCdEf') returns 2\n  countUpperCase('abcdefg') returns 1\n  countUpperCase('dBBE') returns 0\n  */\nconst countUpperCase = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s.charCodeAt(i) > 64) {\n      count++;\n    }\n    i++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (j < l) {\n    if (s.charCodeAt(j) > 64) {\n      count++;\n    }\n    j++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (k < l) {\n    if (s.charCodeAt(k) > 64) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, return the number of lowercase letters in even indexes and\n  the number of lowercase letters in odd indexes.\n  \n  For example:\n  countLowerCase('aBCdEf') returns 2\n  countLowerCase('abcdefg') returns 1\n  countLowerCase('dBBE') returns 0\n  */\nconst countLowerCase = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s.charCodeAt(i) > 64) {\n      count++;\n    }\n    i++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (j < l) {\n    if (s.charCodeAt(j) > 64) {\n      count++;\n    }\n    j++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (k < l) {\n    if (s.charCodeAt(k) > 64) {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, return the number of digits in even indexes and the\n  number of digits in odd indexes.\n  \n  For example:\n  countDigits('aBCdEf') returns 2\n  countDigits('abcdefg') returns 2\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s.charCodeAt(i) > 64) {\n      count++;\n    }\n    i++;\n  }\n  \n  i = 0;\n  j = 0;\n  k = 0;\n  \n  while (j < l) {\n    if (s.charCodeAt(j) > 64) {\n      count++;\n    }\n    j++;\n  }"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integerPart, fractionPart] = integer.split(\".\");\n  const integerPartNumber = parseInt(integerPart);\n  const fractionPartNumber = parseInt(fractionPart);\n  const integerPartFraction = integerPartNumber - fractionPartNumber;\n  const integerPartFractionFraction = integerPartFraction * fractionPartFraction;\n  const integerPartFractionFractionFraction = integerPartFractionFractionFraction * fractionPartFractionFraction;\n  const integerPartFractionFractionFractionFraction = integerPartFractionFractionFractionFraction * fractionPartFractionFractionFractionFraction;\n  const integerPartFractionFractionFractionFractionFraction = integerPartFractionFractionFractionFractionFraction * fractionPartFractionFractionFractionFractionFraction;\n  const integerPartFractionFractionFractionFractionFractionFraction = integerPartFractionFractionFractionFractionFractionFraction * fractionPartFractionFractionFractionFractionFractionFractionFraction;\n  const integerPartFractionFractionFractionFractionFractionFractionFraction = integerPartFractionFractionFractionFractionFractionFractionFraction * fractionPartFractionFractionFractionFractionFractionFractionFractionFractionFraction;\n  const integerPartFractionFractionFractionFractionFractionFractionFractionFraction = integerPartFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction * "}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  let level = 1;\n  while (level < n) {\n    const stones = level % 2 === 0? n : n - level;\n    result.push(stones);\n    level++;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where "}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/,\\s*/);\n  return words.map((word) => word."}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  return y;\n};\n\n/*\n  Given a positive integer n, return its prime factorization. For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  For example, for n = 7, the factorization of 7 would be [2, 2, 2, 3, 3]. \n  \n  "}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let binCount = 0;\n  let binNum = 0;\n  let binNumStr = \"\";\n  let binNumStrCount = 0;\n  let binNumStrCount2 = 0;\n  let binNumStrCount3 = 0;\n  let binNumStrCount4 = 0;\n  let binNumStrCount5 = 0;\n  let binNumStrCount6 = 0;\n  let binNumStrCount7 = 0;\n  let binNumStrCount8 = 0;\n  let binNumStrCount9 = 0;\n  let binNumStrCount10 = 0;\n  let binNumStrCount11 = 0;\n  let binNumStrCount12 = 0;\n  let binNumStrCount13 = 0;\n  let binNumStrCount14 = 0;\n  let binNumStrCount15 = 0;\n  let binNumStrCount16 = 0;\n  let binNumStrCount17 = 0;\n  let binNumStrCount18 = 0;\n  let binNumStrCount19 = 0;\n  let binNumStrCount20 = 0;\n  let binNumStrCount21 = 0;\n  let binNumStrCount22 = 0;\n  let binNumStrCount23 = 0;\n  let binNumStrCount24 = 0;\n  let binNumStrCount25 = 0;\n  let binNumStrCount26 = 0;\n  let binNumStrCount27 = 0;\n  let binNumStrCount28 = 0;\n  let binNumStrCount29 = 0;\n  let binNumStrCount30 = 0;\n  let binNumStrCount31 = 0;\n  let binNumStrCount32 = 0;\n  let binNumStrCount33 = 0;\n  let binNumStrCount34 = 0;\n  let binNumStrCount35 = 0;\n  let binNumStrCount36 = 0;\n  let binNumStrCount37 = 0;\n  let binNumStrCount38 = 0;\n  let binNumStrCount39 = 0;\n  let binNumStrCount40 = 0;\n  let binNumStrCount41 = 0;\n  let binNumStrCount42 = 0;\n  let binNumStrCount43 = 0;\n  let binNumStrCount44 = 0;\n  let binNumStrCount45 = 0;\n  let binNumStrCount46 = 0;\n  let binNumStrCount47 = 0;\n  let binNumStrCount48 = 0;\n  let binNumStrCount49 = 0;\n  let binNumStrCount50 = 0;\n  let binNumStrCount51 = 0;\n  let binNumStrCount52 = 0;\n  let binNumStrCount53 = 0;\n  let binNumStrCount54 = 0;\n  let binNumStrCount55 = 0;\n  let binNumStrCount56 = 0;\n  let binNumStrCount57 = 0;\n  let binNumStrCount58 = 0;\n  let binNumStrCount59 = 0;\n  let binNumStrCount60 = 0;\n  let binNumStrCount61 = 0;\n  let binNumStrCount62 = 0;\n  let binNumStrCount63 = 0;\n  let binNumStrCount64 = 0;\n  let binNumStrCount65 = 0;\n  let binNumStrCount66 = 0;\n  let binNumStrCount67 = 0;\n  let binNumStrCount68 = 0;\n  let binNumStrCount69 = 0;\n  let binNumStrCount70 = 0;\n  let binNumStrCount71 = 0;\n  let binNumStrCount72 = 0;\n  let binNumStrCount73 = 0;\n  let binNumStrCount74 = 0;\n  let binNumStrCount75 = 0;\n  let binNumStrCount76 = 0;\n  let binNumStrCount77 = 0;\n  let binNumStrCount78 = 0;\n  let binNumStrCount79 = 0;\n  let binNumStrCount80 = 0;\n  let binNumStrCount81 = 0;\n  let binNumStrCount82 = 0;\n  let binNumStrCount83 = 0;\n  let binNumStrCount84 = 0;\n  let binNumStrCount85 = 0;\n  let binNumStrCount86 = 0;\n  let binNumStrCount87 = 0;\n  let binNumStrCount88 = 0;\n  let binNumStrCount89 = 0;\n  let binNumStrCount90 = 0;\n  let binNumStrCount91 = 0;\n  let binNumStrCount92 = 0;\n  let binNumStrCount93 = 0;\n  let binNumStrCount94 = 0;\n  let binNumStrCount95 = 0;\n  let binNumStrCount96 = 0;\n  let binNumStrCount97 = 0;\n  let binNumStrCount98 = 0;\n  let binNumStrCount99 = 0;\n  let binNumStrCount100 = 0;\n  let binNumStrCount101 = 0;\n  let binNumStrCount102 = 0;\n  let binNumStrCount103 = 0;\n  let binNumStrCount104 = 0;\n  let binNumStrCount105 = 0;\n  let binNumStrCount106 = 0;\n  let binNumStrCount107 = 0;\n  let binNumStrCount108 = 0;\n  let binNumStrCount109 = 0;\n  let binNumStrCount110 = 0;\n  let binNumStrCount111 = 0;\n  let binNumStrCount112 = 0;\n  let binNumStrCount113 = 0;\n  let binNumStrCount114 = 0;\n  let binNumStrCount115 = 0;\n  let binNumStrCount116 = 0;\n  let binNumStrCount117 = 0;\n  let binNumStrCount118 = 0;\n  let binNumStrCount119 = 0;\n  let binNumStrCount120 = 0;\n  let binNumStrCount121 = 0;\n  let binNumStrCount122 = 0;\n  let binNumStrCount123 = 0;\n  let binNumStrCount124 = 0;\n  let binNumStrCount125 = 0;\n  let binNumStrCount126 = 0;\n  let binNumStrCount127 = 0;\n  let binNumStrCount128 = 0;\n  let binNumStrCount129 = 0;\n  let binNumStrCount130 = 0;\n  let binNumStrCount131 = 0;\n  let binNumStrCount132 = 0;\n  let binNumStrCount133 = 0;\n  let binNumStrCount134 = 0;\n  let binNumStrCount135 = 0;\n  let binNumStrCount136 = 0;\n  let binNumStrCount137 = 0;\n  let binNumStrCount138 = 0;\n  let binNumStrCount139 = 0;\n  let binNumStrCount140 = 0;\n  let binNumStrCount141 = 0;\n  let binNumStrCount142 = 0;\n  let binNumStrCount143 = 0;\n  let binNumStrCount144 = 0;\n  let binNumStrCount145 = 0;\n  let binNumStrCount146 = 0;\n  let binNumStrCount147 = 0;\n  let binNumStrCount148 = 0;\n  let binNumStrCount149 = 0;\n  let binNumStrCount150 = 0;\n  let binNumStrCount151 = 0;\n  let binNumStrCount152 = 0;\n  let binNumStrCount153 = 0;\n  let binNumStrCount154 = 0;\n  let binNumStrCount155 = 0;\n  let binNumStrCount156 = 0;\n  let binNumStrCount157 = 0;\n  let binNumStrCount158 = 0;\n  let binNumStrCount159 = 0;\n  let binNumStrCount160 = 0;\n  let binNumStrCount161 = 0;\n  let binNumStrCount162 = 0;\n  let binNumStrCount163 = 0;\n  let binNumStrCount164 = 0;\n  let binNumStrCount165 = 0;\n  let binNumStrCount166 = 0;\n  let binNumStrCount167 = 0;\n  let binNumStrCount168 = 0;\n  let binNumStrCount169 = 0;\n  let binNumStrCount170 = 0;\n  let binNumStrCount171 = 0;\n  let binNumStrCount172 = 0;\n  let binNumStrCount173 = 0;\n  let binNumStrCount174 = 0;\n  let binNumStrCount175 = 0;\n  let bin"}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = x.filter(x => x % 2 === 0);\n  return digits.sort((a, b) => a - b);\n};\n\n/*\n  Given a string, return all possible permutations of the string. Example:\n  >>> permutations(['abc', 'def'])\n  ['abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc', 'def', 'abc"}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const length = arr.length;\n  const reversedArr = arr.sort((a, b) => b - a);\n  const reversedArrLength = reversedArr.length;\n  const reversedArrReversed = reversedArr.map((item, index) => index + 1);\n  const reversedArrReversedLength = reversedArrReversed.length;\n  const reversedArrReversedReversed = reversedArrReversed.map((item, index) => index + 1);\n  const reversedArrReversedReversedLength = reversedArrReversedReversed.length;\n  const reversedArrReversedReversedReversedLength = reversedArrReversedReversedReversed.length;\n  const reversedArrReversedReversedReversedLength = reversedArrReversedReversedReversedReversed.length;\n  const reversedArrReversedReversedReversedReversedLength = reversedArrReversedReversedReversedReversedReversed.length;\n  const reversedArrReversedReversedReversedReversedLength = reversedArrReversedReversedReversedReversedReversedReversed.length;\n  const reversedArrReversedReversedReversedReversedReversedLength = reversedArrReversedReversedReversedReversedReversedReversedReversed.length;\n  const reversedArrReversedReversedReversedReversedReversedReversedLength = reversedArrReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  const reversedArrReversedReversedReversedReversedReversedReversedReversedLength = reversedArrReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  const reversedArrReversedReversedReversedReversedReversedReversedReversedReversedLength = reversedArrReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  const reversedArrReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = reversedArrReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.length;\n  const reversedArrReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = reversedArrReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse"}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function g, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function h, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function i, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function j, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function k, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function l, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function m, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function n, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function o, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function p, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(i) == [1, 2, 6, 24, 15]\n  */\nconst p = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function q, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(i) == [1, 2, 6, 24, 15]\n  */\nconst q = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement function r, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the greatest common divisor of i if i is odd, or the sum of the numbers from 1 to i. i starts with 1. The greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  r(i) == [1, 2, 6, 24, 15]\n  */\nconst r = (n) => {\n  const result"}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    if (evenCount % 2 === 0) {\n      evenPalindromes.push(i);\n      evenCount = 0;\n    } else {\n      oddPalindromes.push(i);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a string, return all possible palindromes made from the string.\n\n  Example 1:\n\n      Input: \"racecar\"\n      Output: [\"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"racecar\", \"race"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 1\n  >>> countEvens([1, 1, 2]) == 3\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 1\n  >>> countOdds([1, 1, 2]) == 3\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countDivisibles that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countDivisibles([]) == 0\n  >>> countDivisibles([-1, 11, -11]) == 1\n  >>> countDivisibles([1, 1, 2]) == 3\n  */\nconst countDivisibles = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiples that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countMultiples([]) == 0\n  >>> countMultiples([-1, 11, -11]) == 1\n  >>> countMultiples([1, 1, 2]) == 3\n  */\nconst countMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countDivisiblesMultiples that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countDivisiblesMultiples([]) == 0\n  >>> countDivisiblesMultiples([-1, 11, -11]) == 1\n  >>> countDivisiblesMultiples([1, 1, 2]) == 3\n  */\nconst countDivisiblesMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisibles that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesDivisibles([]) == 0\n  >>> countMultiplesDivisibles([-1, 11, -11]) == 1\n  >>> countMultiplesDivisibles([1, 1, 2]) == 3\n  */\nconst countMultiplesDivisibles = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisiblesMultiples that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesDivisiblesMultiples([]) == 0\n  >>> countMultiplesDivisiblesMultiples([-1, 11, -11]) == 1\n  >>> countMultiplesDivisiblesMultiples([1, 1, 2]) == 3\n  */\nconst countMultiplesDivisiblesMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisiblesMultiples that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesDivisiblesMultiples([]) == 0\n  >>> countMultiplesDivisiblesMultiples([-1, 11, -11]) == 1\n  >>> countMultiplesDivisiblesMultiples([1, 1, 2]) == 3\n  */\nconst countMultiplesDivisiblesMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisiblesMultiples that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesDivisiblesMultiples([]) == 0\n  >>> countMultiplesDivisiblesMultiples([-1, 11, -11]) == 1\n  >>> countMultiplesDivisiblesMultiples([1, 1, 2]) == 3\n  */\nconst countMultiplesDivisiblesMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisiblesMultiples that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesDivisiblesMultiples([]) == 0\n  >>> countMultiplesDivisiblesMultiples([-1, 11, -11]) == 1\n  >>> countMultiplesDivisiblesMultiples([1, 1, 2]) == 3\n  */\nconst countMultiplesDivisiblesMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisiblesMultiples that takes an array of integers and returns the number of elements that have a sum of digits == 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countMultiplesDivisiblesMultiples([]) == 0\n  >>> countMultiplesDi"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrTemp = [];\n  while (arrIndex < arrLength) {\n    arrTemp.push(arr[arrIndex]);\n    arrIndex++;\n  }\n  let arrTempLength = arrTemp.length;\n  let arrTempIndex = 0;\n  let arrTempTemp = [];\n  while (arrTempIndex < arrTempLength) {\n    arrTempTemp.push(arrTemp[arrTempIndex]);\n    arrTempIndex++;\n  }\n  let arrTempTempLength = arrTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arrTempTempIndex < arrTempTempTempLength) {\n    arrTempTempTemp.push(arrTempTemp[arrTempTempIndex]);\n    arrTempTempIndex++;\n  }\n  let arrTempTempTempLength = arrTempTempTemp.length;\n  let arrTempTempIndex = 0;\n  let arrTempTempTemp = [];\n  while (arr"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return \"NO\"\n  let result = \"YES\"\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      result = \"NO\"\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns true if it\n  is possible to perform an exchange of elements from one list to another\n  without changing the order of elements in the original list. For example:\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => true\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => false\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeList = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false\n  let result = \"YES\"\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      result = \"NO\"\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns true if it\n  is possible to perform an exchange of elements from one list to another\n  without changing the order of elements in the original list. For example:\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => true\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => false\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeListReverse = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false\n  let result = \"YES\"\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== lst1[i] % 2) {\n      result = \"NO\"\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns true if it\n  is possible to perform an exchange of elements from one list to another\n  without changing the order of elements in the original list. For example:\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => true\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => false\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeListReverseExcept = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false\n  let result = \"YES\"\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      result = \"NO\"\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns true if it\n  is possible to perform an exchange of elements from one list to another\n  without changing the order of elements in the original list. For example:\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => true\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => false\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeListReverseExceptReverse = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false\n  let result = \"YES\"\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== lst1[i] % 2) {\n      result = \"NO\"\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns true if it\n  is possible to perform an exchange of elements from one list to another\n  without changing the order of elements in the original list. For example:\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => true\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => false\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeListReverseExceptReverseExcept = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false\n  let result = \"YES\"\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      result = \"NO\"\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns true if it\n  is possible to perform an exchange of elements from one list to another\n  without changing the order of elements in the original list. For example:\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => true\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => false\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeListReverseExceptReverseExceptReverse = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false\n  let result = \"YES\"\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== lst1[i] % 2) {\n      result = \"NO\"\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns true if it\n  is possible to perform an exchange of elements from one list to another\n  without changing the order of elements in the original list. For example:\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => true\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => false\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeListReverseExceptReverseExceptReverseExcept = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false\n  let result = \"YES\"\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      result = \"NO\"\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns true if it\n  is possible to perform an exchange of elements from one list to another\n  without changing the order of elements in the original list. For example:\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => true\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => false\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeListReverseExceptReverseExceptReverseExceptReverseExcept = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false\n  let result = \"YES\"\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== lst1[i] % 2) {\n      result = \"NO\"\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a list of numbers and returns true if it\n  is possible to perform an exchange of elements from one list to another\n  without changing the order of elements in the original list. For example:\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => true\n  exchange([2, 5, 1, 3], [2, 5, 1, 3]) => false\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeListReverseExceptReverseExceptReverseExceptReverseExceptReverseExcept = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false\n  let result = \"YES\"\n"}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split(' ').map(x => x.toLowerCase())\n  letters.forEach(letter => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*\n  Given a string of words, return the number of words that have the most letters.\n  \n  Example:\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 6\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 5\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 4\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 3\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 2\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 1\n  words('') == 0\n*/\nconst words = (test) => {\n  let words = test.split(' ').map(x => x.toLowerCase())\n  let letters = words.map(x => x.length)\n  let maxLetters = letters.reduce((a, b) => Math.max(a, b))\n  return maxLetters\n}\n\n/*\n  Given a string of words, return the number of words that have the most letters.\n  \n  Example:\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 6\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 5\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 4\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 3\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 2\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 1\n  words('') == 0\n*/\nconst wordCount = (test) => {\n  let words = test.split(' ').map(x => x.toLowerCase())\n  let letters = words.map(x => x.length)\n  let maxLetters = letters.reduce((a, b) => Math.max(a, b))\n  return maxLetters\n}\n\n/*\n  Given a string of words, return the number of words that have the most letters.\n  \n  Example:\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 6\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 5\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 4\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 3\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 2\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 1\n  words('') == 0\n*/\nconst wordCountWithLetters = (test) => {\n  let words = test.split(' ').map(x => x.toLowerCase())\n  let letters = words.map(x => x.length)\n  let maxLetters = letters.reduce((a, b) => Math.max(a, b))\n  return maxLetters\n}\n\n/*\n  Given a string of words, return the number of words that have the most letters.\n  \n  Example:\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 6\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 5\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 4\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 3\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 2\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 1\n  words('') == 0\n*/\nconst wordCountWithLettersAndNumbers = (test) => {\n  let words = test.split(' ').map(x => x.toLowerCase())\n  let letters = words.map(x => x.length)\n  let maxLetters = letters.reduce((a, b) => Math.max(a, b))\n  return maxLetters\n}\n\n/*\n  Given a string of words, return the number of words that have the most letters.\n  \n  Example:\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 6\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 5\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 4\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 3\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 2\n  words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 1\n  words('') == 0\n*/\nconst wordCountWithLettersAndNumbersAndLetters = (test) => {\n  let words = test.split(' ').map(x => x.toLowerCase())\n  let letters = words.map(x => x.length)\n  let maxLetters = letters.reduce((a, b) => Math.max(a, b))\n  return maxLetters\n}\n\n"}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = ''\n  let reverse = ''\n  let delete = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = ''\n  let temp2 = ''\n  let temp3 = ''\n  let temp4 = ''\n  let temp5 = ''\n  let temp6 = ''\n  let temp7 = ''\n  let temp8 = ''\n  let temp9 = ''\n  let temp10 = ''\n  let temp11 = ''\n  let temp12 = ''\n  let temp13 = ''\n  let temp14 = ''\n  let temp15 = ''\n  let temp16 = ''\n  let temp17 = ''\n  let temp18 = ''\n  let temp19 = ''\n  let temp20 = ''\n  let temp21 = ''\n  let temp22 = ''\n  let temp23 = ''\n  let temp24 = ''\n  let temp25 = ''\n  let temp26 = ''\n  let temp27 = ''\n  let temp28 = ''\n  let temp29 = ''\n  let temp30 = ''\n  let temp31 = ''\n  let temp32 = ''\n  let temp33 = ''\n  let temp34 = ''\n  let temp35 = ''\n  let temp36 = ''\n  let temp37 = ''\n  let temp38 = ''\n  let temp39 = ''\n  let temp40 = ''\n  let temp41 = ''\n  let temp42 = ''\n  let temp43 = ''\n  let temp44 = ''\n  let temp45 = ''\n  let temp46 = ''\n  let temp47 = ''\n  let temp48 = ''\n  let temp49 = ''\n  let temp50 = ''\n  let temp51 = ''\n  let temp52 = ''\n  let temp53 = ''\n  let temp54 = ''\n  let temp55 = ''\n  let temp56 = ''\n  let temp57 = ''\n  let temp58 = ''\n  let temp59 = ''\n  let temp60 = ''\n  let temp61 = ''\n  let temp62 = ''\n  let temp63 = ''\n  let temp64 = ''\n  let temp65 = ''\n  let temp66 = ''\n  let temp67 = ''\n  let temp68 = ''\n  let temp69 = ''\n  let temp70 = ''\n  let temp71 = ''\n  let temp72 = ''\n  let temp73 = ''\n  let temp74 = ''\n  let temp75 = ''\n  let temp76 = ''\n  let temp77 = ''\n  let temp78 = ''\n  let temp79 = ''\n  let temp80 = ''\n  let temp81 = ''\n  let temp82 = ''\n  let temp83 = ''\n  let temp84 = ''\n  let temp85 = ''\n  let temp86 = ''\n  let temp87 = ''\n  let temp88 = ''\n  let temp89 = ''\n  let temp90 = ''\n  let temp91 = ''\n  let temp92 = ''\n  let temp93 = ''\n  let temp94 = ''\n  let temp95 = ''\n  let temp96 = ''\n  let temp97 = ''\n  let temp98 = ''\n  let temp99 = ''\n  let temp100 = ''\n  let temp101 = ''\n  let temp102 = ''\n  let temp103 = ''\n  let temp104 = ''\n  let temp105 = ''\n  let temp106 = ''\n  let temp107 = ''\n  let temp108 = ''\n  let temp109 = ''\n  let temp110 = ''\n  let temp111 = ''\n  let temp112 = ''\n  let temp113 = ''\n  let temp114 = ''\n  let temp115 = ''\n  let temp116 = ''\n  let temp117 = ''\n  let temp118 = ''\n  let temp119 = ''\n  let temp120 = ''\n  let temp121 = ''\n  let temp122 = ''\n  let temp123 = ''\n  let temp124 = ''\n  let temp125 = ''\n  let temp126 = ''\n  let temp127 = ''\n  let temp128 = ''\n  let temp129 = ''\n  let temp130 = ''\n  let temp131 = ''\n  let temp132 = ''\n  let temp133 = ''\n  let temp134 = ''\n  let temp135 = ''\n  let temp136 = ''\n  let temp137 = ''\n  let temp138 = ''\n  let temp139 = ''\n  let temp140 = ''\n  let temp141 = ''\n  let temp142 = ''\n  let temp143 = ''\n  let temp144 = ''\n  let temp145 = ''\n  let temp146 = ''\n  let temp147 = ''\n  let temp148 = ''\n  let temp149 = ''\n  let temp150 = ''\n  let temp151 = ''\n  let temp152 = ''\n  let temp153 = ''\n  let temp154 = ''\n  let temp155 = ''\n  let temp156 = ''\n  let temp157 = ''\n  let temp158 = ''\n  let temp159 = ''\n  let temp160 = ''\n  let temp161 = ''\n  let temp162 = ''\n  let temp163 = ''\n  let temp164 = ''\n  let temp165 = ''\n  let temp166 = ''\n  let temp167 = ''\n  let temp168 = ''\n  let temp169 = ''\n  let temp170 = ''\n  let temp171 = ''\n  let temp172 = ''\n  let temp173 = ''\n  let temp174 = ''\n  let temp175 = ''\n  let temp176 = ''\n  let temp177 = ''\n  let temp178 = ''\n  let temp179 = ''\n  let temp180 = ''\n  let temp181 = ''\n  let temp182 = ''\n  let temp183 = ''\n  let temp184 = ''\n  let temp185 = ''\n  let temp186 = ''\n  let temp187 = ''\n  let temp188 = ''\n  let temp189 = ''\n  let temp190 = ''\n  let temp191 = ''\n  let temp192 = ''\n  let temp193 = ''\n  let temp194 = ''\n  let temp195 = ''\n  let temp196 = ''\n  let temp197 = ''\n  let temp198 = ''\n  let temp199 = ''\n  let temp200 = ''\n  let temp201 = ''\n  let temp202 = ''\n  let temp203 = ''\n  let temp204 = ''\n  let temp205 = ''\n  let temp206 = ''\n  let temp207 = ''\n  let temp208 = ''\n  let temp209 = ''\n  let temp210 = ''\n  let temp211 = ''\n  let temp212 = ''\n  let temp213 = ''\n  let temp214 = ''\n  let temp215 = ''\n  let temp216 = ''\n  let temp217 = ''\n  let temp218 = ''\n  let temp219 = ''\n  let temp220 = ''\n  let temp221 = ''\n  let temp222 = ''\n  let temp223 = ''\n  let temp224 = ''\n  let temp225 = ''\n  let temp226 = ''\n  let temp227 = ''\n  let temp228 = ''\n  let temp229 = ''\n  let temp230 = ''\n  let temp231 = ''\n  let temp232 = ''\n  let temp233 = ''\n  let temp234 = ''\n  let temp235 = ''\n  let temp236 = ''\n  let temp237 = ''\n  let temp238 = ''\n  let temp239 = ''\n  let temp240 = ''\n  let temp241 = ''\n  let temp242 = ''\n  let temp243 = ''\n  let temp244 = ''\n  let temp245 = ''\n  let temp246 = ''\n  let temp247 = ''\n  let temp248 = ''\n  let temp249 = ''\n  let temp250 = ''\n  let temp251 = ''\n  let temp252 = ''\n  let temp253 = ''\n  let temp254 = ''\n  let temp255 = ''\n  let temp256 = ''\n  let temp257 = ''\n  let temp258 = ''\n  let temp259 = ''\n  let temp260 = ''\n  let temp261 = ''\n  let temp262 = ''\n  let temp263 = ''\n  let temp264 = ''\n  let temp265 = ''\n  let temp266 = ''\n  let temp267 = ''\n  let temp268 = ''\n  let temp269 = ''\n  let temp270 = ''\n  let temp27"}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let odd = lst[i].toString().split('').reduce((acc, val) => acc + val % 2 === 0, 0);\n    res.push(`the number of odd elements ${odd} the str${i} of the ${i}nput.`);\n  }\n  return res;\n};\n\n/*\n  Given a string of digits, return a list of all possible permutations of the digits, where each permutation is a list where each element of the list is a digit of the original string.\n\n  >>> permutations(['1234567'])\n  [\"the permutation 1n the str1ng 1 of the 1nput.\",\n   \"the permutation 2n the str2ng 2 of the 2nput.\",\n   \"the permutation 3n the str3ng 3 of the 3nput.\",\n   \"the permutation 4n the str4ng 4 of the 4nput.\",\n   \"the permutation 5n the str5ng 5 of the 5nput.\",\n   \"the permutation 6n the str6ng 6 of the 6nput.\",\n   \"the permutation 7n the str7ng 7 of the 7nput.\",\n   \"the permutation 8n the str8ng 8 of the 8nput.\",\n   \"the permutation 9n the str9ng 9 of the 9nput.\",\n   \"the permutation 10n the str10ng 10 of the 10nput.\",\n   \"the permutation 11n the str11ng 11 of the 11nput.\",\n   \"the permutation 12n the str12ng 12 of the 12nput.\",\n   \"the permutation 13n the str13ng 13 of the 13nput.\",\n   \"the permutation 14n the str14ng 14 of the 14nput.\",\n   \"the permutation 15n the str15ng 15 of the 15nput.\",\n   \"the permutation 16n the str16ng 16 of the 16nput.\",\n   \"the permutation 17n the str17ng 17 of the 17nput.\",\n   \"the permutation 18n the str18ng 18 of the 18nput.\",\n   \"the permutation 19n the str19ng 19 of the 19nput.\",\n   \"the permutation 20n the str20ng 20 of the 20nput.\",\n   \"the permutation 21n the str21ng 21 of the 21nput.\",\n   \"the permutation 22n the str22ng 22 of the 22nput.\",\n   \"the permutation 23n the str23ng 23 of the 23nput.\",\n   \"the permutation 24n the str24ng 24 of the 24nput.\",\n   \"the permutation 25n the str25ng 25 of the 25nput.\",\n   \"the permutation 26n the str26ng 26 of the 26nput.\",\n   \"the permutation 27n the str27ng 27 of the 27nput.\",\n   \"the permutation 28n the str28ng 28 of the 28nput.\",\n   \"the permutation 29n the str29ng 29 of the 29nput.\",\n   \"the permutation 30n the str30ng 30 of the 30nput.\",\n   \"the permutation 31n the str31ng 31 of the 31nput.\",\n   \"the permutation 32n the str32ng 32 of the 32nput.\",\n   \"the permutation 33n the str33ng 33 of the 33nput.\",\n   \"the permutation 34n the str34ng 34 of the 34nput.\",\n   \"the permutation 35n the str35ng 35 of the 35nput.\",\n   \"the permutation 36n the str36ng 36 of the 36nput.\",\n   \"the permutation 37n the str37ng 37 of the 37nput.\",\n   \"the permutation 38n the str38ng 38 of the 38nput.\",\n   \"the permutation 39n the str39ng 39 of the 39nput.\",\n   \"the permutation 40n the str40ng 40 of the 40nput.\",\n   \"the permutation 41n the str41ng 41 of the 41nput.\",\n   \"the permutation 42n the str42ng 42 of the 42nput.\",\n   \"the permutation 43n the str43ng 43 of the 43nput.\",\n   \"the permutation 44n the str44ng 44 of the 44nput.\",\n   \"the permutation 45n the str45ng 45 of the 45nput.\",\n   \"the permutation 46n the str46ng 46 of the 46nput.\",\n   \"the permutation 47n the str47ng 47 of the 47nput.\",\n   \"the permutation 48n the str48ng 48 of the 48nput.\",\n   \"the permutation 49n the str49ng 49 of the 49nput.\",\n   \"the permutation 50n the str50ng 50 of the 50nput.\",\n   \"the permutation 51n the str51ng 51 of the 51nput.\",\n   \"the permutation 52n the str52ng 52 of the 52nput.\",\n   \"the permutation 53n the str53ng 53 of the 53nput.\",\n   \"the permutation 54n the str54ng 54 of the 54nput.\",\n   \"the permutation 55n the str55ng 55 of the 55nput.\",\n   \"the permutation 56n the str56ng 56 of the 56nput.\",\n   \"the permutation 57n the str57ng 57 of the 57nput.\",\n   \"the permutation 58n the str58ng 58 of the 58nput.\",\n   \"the permutation 59n the str59ng 59 of the 59nput.\",\n   \"the permutation 60n the str60ng 60 of the 60nput.\",\n   \"the permutation 61n the str61ng 61 of the 61nput.\",\n   \"the permutation 62n the str62ng 62 of the 62nput.\",\n   \"the permutation 63n the str63ng 63 of the 63nput.\",\n   \"the permutation 64n the str64ng 64 of the 64nput.\",\n   \"the permutation 65n the str65ng 65 of the 65nput.\",\n   \"the permutation 66n the str66ng 66 of the 66nput.\",\n   \"the permutation 67n the str67ng 67 of the 67nput.\",\n   \"the permutation 68n the str68ng 68 of the 68nput.\",\n   \"the permutation 69n the str69ng 69 of the 69nput.\",\n   \"the permutation 70n the str70ng 70 of the 70nput.\",\n   \"the permutation 71n the str71ng 71 of the 71nput.\",\n   \"the permutation 72n the str72ng"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers, search for the maximum sum of all non-empty sub-arrays of numbers.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers, search for the minimum number of non-empty sub-arrays of numbers.\n  Example\n  minSubArrayCount([2, 3, 4, 1, 2, 4]) == 3\n  minSubArrayCount([-1, -2, -3]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      minCount++;\n    }\n    if (nums[i] > nums[i - 1]) {\n      count++;\n    }\n  }\n  return minCount + count;\n};\n\n/*\n  Given an array of integers, search for the maximum number of non-empty sub-arrays of numbers.\n  Example\n  maxSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCount([-1, -2, -3]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      maxCount++;\n    }\n    if (nums[i] > nums[i - 1]) {\n      count++;\n    }\n  }\n  return maxCount + count;\n};\n\n/*\n  Given an array of integers, search for the minimum number of non-empty sub-arrays of numbers.\n  Example\n  minSubArrayCount([2, 3, 4, 1, 2, 4]) == 3\n  minSubArrayCount([-1, -2, -3]) == 3\n  */\nconst minSubArrayCountWithZero = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      minCount++;\n    }\n    if (nums[i] === 0) {\n      count++;\n    }\n  }\n  return minCount + count;\n};\n\n/*\n  Given an array of integers, search for the maximum number of non-empty sub-arrays of numbers.\n  Example\n  maxSubArrayCount([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCount([-1, -2, -3]) == 3\n  */\nconst maxSubArrayCountWithZero = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      maxCount++;\n    }\n    if (nums[i] === 0) {\n      count++;\n    }\n  }\n  return maxCount + count;\n};\n\n/*\n  Given an array of integers, search for the minimum number of non-empty sub-arrays of numbers.\n  Example\n  minSubArrayCountWithZero([2, 3, 4, 1, 2, 4]) == 3\n  minSubArrayCountWithZero([-1, -2, -3]) == 3\n  */\nconst minSubArrayCountWithZeroWithZero = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      minCount++;\n    }\n    if (nums[i] === 0) {\n      count++;\n    }\n  }\n  return minCount + count;\n};\n\n/*\n  Given an array of integers, search for the maximum number of non-empty sub-arrays of numbers.\n  Example\n  maxSubArrayCountWithZero([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCountWithZero([-1, -2, -3]) == 3\n  */\nconst maxSubArrayCountWithZeroWithZero = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      maxCount++;\n    }\n    if (nums[i] === 0) {\n      count++;\n    }\n  }\n  return maxCount + count;\n};\n\n/*\n  Given an array of integers, search for the minimum number of non-empty sub-arrays of numbers.\n  Example\n  minSubArrayCountWithZeroWithZero([2, 3, 4, 1, 2, 4]) == 3\n  minSubArrayCountWithZeroWithZero([-1, -2, -3]) == 3\n  */\nconst minSubArrayCountWithZeroWithZeroWithZero = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      minCount++;\n    }\n    if (nums[i] === 0) {\n      count++;\n    }\n  }\n  return minCount + count;\n};\n\n/*\n  Given an array of integers, search for the maximum number of non-empty sub-arrays of numbers.\n  Example\n  maxSubArrayCountWithZeroWithZero([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCountWithZeroWithZero([-1, -2, -3]) == 3\n  */\nconst maxSubArrayCountWithZeroWithZeroWithZero = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      maxCount++;\n    }\n    if (nums[i] === 0) {\n      count++;\n    }\n  }\n  return maxCount + count;\n};\n\n/*\n  Given an array of integers, search for the minimum number of non-empty sub-arrays of numbers.\n  Example\n  minSubArrayCountWithZeroWithZeroWithZero([2, 3, 4, 1, 2, 4]) == 3\n  minSubArrayCountWithZeroWithZeroWithZero([-1, -2, -3]) == 3\n  */\nconst minSubArrayCountWithZeroWithZeroWithZeroWithZero = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      minCount++;\n    }\n    if (nums[i] === 0) {\n      count++;\n    }\n  }\n  return minCount + count;\n};\n\n/*\n  Given an array of integers, search for the maximum number of non-empty sub-arrays of numbers.\n  Example\n  maxSubArrayCountWithZeroWithZeroWithZero([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArrayCountWithZeroWithZeroWithZero([-1, -2, -3]) == 3\n  */\nconst maxSubArrayCountWithZeroWithZeroWithZeroWithZero = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      maxCount++;\n    }\n    if (nums[i] === 0) {\n      count++;\n    }\n  }\n  return maxCount + count;\n};\n\n/*\n  Given an array of integers, search for the minimum number of non-empty sub-arrays of numbers.\n  Example\n  minSubArrayCountWithZeroWithZeroWithZero([2, 3, 4, 1, 2, 4]) == 3\n  minSubArrayCountWithZeroWithZeroWithZeroWithZero([-1, -2, -3]) == 3\n  */\nconst minSubArrayCountWithZeroWithZeroWithZeroWithZero = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      minCount++;\n    }\n    if (num"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count++;\n      }\n    }\n  }\n  return count > capacity? count : maxFill(grid, capacity - count);\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  let numOnes = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      numOnes++;\n    }\n  }\n  if (numOnes === 1) {\n    sortedArr = arr.sort((a, b) => a - b);\n  } else {\n    sortedArr = arr.sort((a, b) => a - b * numOnes);\n  }\n  return sortedArr;\n};\n\n/*\n  Given an array of non-negative integers, return an array of the same length with all elements sorted in ascending order.\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, "}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let count = 0;\n  let wordCount = 0;\n  let wordCount2 = 0;\n  let wordCount3 = 0;\n  let wordCount4 = 0;\n  let wordCount5 = 0;\n  let wordCount6 = 0;\n  let wordCount7 = 0;\n  let wordCount8 = 0;\n  let wordCount9 = 0;\n  let wordCount10 = 0;\n  let wordCount11 = 0;\n  let wordCount12 = 0;\n  let wordCount13 = 0;\n  let wordCount14 = 0;\n  let wordCount15 = 0;\n  let wordCount16 = 0;\n  let wordCount17 = 0;\n  let wordCount18 = 0;\n  let wordCount19 = 0;\n  let wordCount20 = 0;\n  let wordCount21 = 0;\n  let wordCount22 = 0;\n  let wordCount23 = 0;\n  let wordCount24 = 0;\n  let wordCount25 = 0;\n  let wordCount26 = 0;\n  let wordCount27 = 0;\n  let wordCount28 = 0;\n  let wordCount29 = 0;\n  let wordCount30 = 0;\n  let wordCount31 = 0;\n  let wordCount32 = 0;\n  let wordCount33 = 0;\n  let wordCount34 = 0;\n  let wordCount35 = 0;\n  let wordCount36 = 0;\n  let wordCount37 = 0;\n  let wordCount38 = 0;\n  let wordCount39 = 0;\n  let wordCount40 = 0;\n  let wordCount41 = 0;\n  let wordCount42 = 0;\n  let wordCount43 = 0;\n  let wordCount44 = 0;\n  let wordCount45 = 0;\n  let wordCount46 = 0;\n  let wordCount47 = 0;\n  let wordCount48 = 0;\n  let wordCount49 = 0;\n  let wordCount50 = 0;\n  let wordCount51 = 0;\n  let wordCount52 = 0;\n  let wordCount53 = 0;\n  let wordCount54 = 0;\n  let wordCount55 = 0;\n  let wordCount56 = 0;\n  let wordCount57 = 0;\n  let wordCount58 = 0;\n  let wordCount59 = 0;\n  let wordCount60 = 0;\n  let wordCount61 = 0;\n  let wordCount62 = 0;\n  let wordCount63 = 0;\n  let wordCount64 = 0;\n  let wordCount65 = 0;\n  let wordCount66 = 0;\n  let wordCount67 = 0;\n  let wordCount68 = 0;\n  let wordCount69 = 0;\n  let wordCount70 = 0;\n  let wordCount71 = 0;\n  let wordCount72 = 0;\n  let wordCount73 = 0;\n  let wordCount74 = 0;\n  let wordCount75 = 0;\n  let wordCount76 = 0;\n  let wordCount77 = 0;\n  let wordCount78 = 0;\n  let wordCount79 = 0;\n  let wordCount80 = 0;\n  let wordCount81 = 0;\n  let wordCount82 = 0;\n  let wordCount83 = 0;\n  let wordCount84 = 0;\n  let wordCount85 = 0;\n  let wordCount86 = 0;\n  let wordCount87 = 0;\n  let wordCount88 = 0;\n  let wordCount89 = 0;\n  let wordCount90 = 0;\n  let wordCount91 = 0;\n  let wordCount92 = 0;\n  let wordCount93 = 0;\n  let wordCount94 = 0;\n  let wordCount95 = 0;\n  let wordCount96 = 0;\n  let wordCount97 = 0;\n  let wordCount98 = 0;\n  let wordCount99 = 0;\n  let wordCount100 = 0;\n  let wordCount101 = 0;\n  let wordCount102 = 0;\n  let wordCount103 = 0;\n  let wordCount104 = 0;\n  let wordCount105 = 0;\n  let wordCount106 = 0;\n  let wordCount107 = 0;\n  let wordCount108 = 0;\n  let wordCount109 = 0;\n  let wordCount110 = 0;\n  let wordCount111 = 0;\n  let wordCount112 = 0;\n  let wordCount113 = 0;\n  let wordCount114 = 0;\n  let wordCount115 = 0;\n  let wordCount116 = 0;\n  let wordCount117 = 0;\n  let wordCount118 = 0;\n  let wordCount119 = 0;\n  let wordCount120 = 0;\n  let wordCount121 = 0;\n  let wordCount122 = 0;\n  let wordCount123 = 0;\n  let wordCount124 = 0;\n  let wordCount125 = 0;\n  let wordCount126 = 0;\n  let wordCount127 = 0;\n  let wordCount128 = 0;\n  let wordCount129 = 0;\n  let wordCount130 = 0;\n  let wordCount131 = 0;\n  let wordCount132 = 0;\n  let wordCount133 = 0;\n  let wordCount134 = 0;\n  let wordCount135 = 0;\n  let wordCount136 = 0;\n  let wordCount137 = 0;\n  let wordCount138 = 0;\n  let wordCount139 = 0;\n  let wordCount140 = 0;\n  let wordCount141 = 0;\n  let wordCount142 = 0;\n  let wordCount143 = 0;\n  let wordCount144 = 0;\n  let wordCount145 = 0;\n  let wordCount146 = 0;\n  let wordCount147 = 0;\n  let wordCount148 = 0;\n  let wordCount149 = 0;\n  let wordCount150 = 0;\n  let wordCount151 = 0;\n  let wordCount152 = 0;\n  let wordCount153 = 0;\n  let wordCount154 = 0;\n  let wordCount155 = 0;\n  let wordCount156 = 0;\n  let wordCount157 = 0;\n  let wordCount158 = 0;\n  let wordCount159 = 0;\n  let wordCount160 = 0;\n  let wordCount161 = 0;\n  let wordCount162 = 0;\n  let wordCount163 = 0;\n  let wordCount164 = 0;\n  let wordCount165 = 0;\n  let wordCount166 = 0;\n  let wordCount167 = 0;\n  let wordCount168 = 0;\n  let wordCount169 = 0;\n  let wordCount170 = 0;\n  let wordCount171 = 0;\n  let wordCount172 = 0;\n  let wordCount173 = 0;\n  let wordCount174 = 0;\n  let wordCount175 = 0;\n  let wordCount176 = 0;\n  let wordCount177 = 0;\n  let wordCount178 = 0;\n  let wordCount179 = 0;\n  let wordCount180 = 0;\n  let wordCount181 = 0;\n  let wordCount182 = 0;\n  let wordCount183 = 0;\n  let wordCount184 = 0;\n  let wordCount185 = 0;\n  let wordCount186 = 0;\n  let wordCount187 = 0;\n  let wordCount188 = 0;\n  let wordCount189 = 0;\n  let wordCount190 = 0;\n  let wordCount191 = 0;\n  let wordCount192 = 0;\n  let wordCount193 = 0;\n  let wordCount194 = 0;\n  let wordCount195 = 0;\n  let wordCount196 = 0;\n  let wordCount197 = 0;\n  let wordCount198 = 0;\n  let wordCount199 = 0;\n  let wordCount200 = 0;\n  let wordCount201 = 0;\n  let wordCount202 = 0;\n  let wordCount203 = 0;\n  let wordCount204 = 0;\n  let wordCount205 = 0;\n  let wordCount206 = 0;\n  let wordCount207 = 0;\n  let wordCount208 = 0;\n  let wordCount209 = 0;\n  let wordCount210 = 0;\n  let wordCount211 = 0;\n  let wordCount212 = 0;\n  let wordCount213 = 0;\n  let wordCount214 = 0;\n  let wordCount215 = 0;\n  let wordCount216 = 0;\n  let wordCount217 = 0;\n  let wordCount218 = 0;\n  let wordCount219 = 0;\n  let wordCount220 = 0;\n  let wordCount221 = 0;\n  let wordCount222 = 0;\n  let wordCount223 = 0;\n  let wordCount224 = 0;\n  let wordCount225 = 0;\n  let wordCount226 = 0;\n  let wordCount227 = 0;\n  let word"}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsLength = 0;\n  let vowelsFound = false;\n  let vowelsIndex2 = 0;\n  let vowelsLength2 = 0;\n  let vowelsFound2 = false;\n  let vowelsIndex3 = 0;\n  let vowelsLength3 = 0;\n  let vowelsFound3 = false;\n  let vowelsIndex4 = 0;\n  let vowelsLength4 = 0;\n  let vowelsFound4 = false;\n  let vowelsIndex5 = 0;\n  let vowelsLength5 = 0;\n  let vowelsFound5 = false;\n  let vowelsIndex6 = 0;\n  let vowelsLength6 = 0;\n  let vowelsFound6 = false;\n  let vowelsIndex7 = 0;\n  let vowelsLength7 = 0;\n  let vowelsFound7 = false;\n  let vowelsIndex8 = 0;\n  let vowelsLength8 = 0;\n  let vowelsFound8 = false;\n  let vowelsIndex9 = 0;\n  let vowelsLength9 = 0;\n  let vowelsFound9 = false;\n  let vowelsIndex10 = 0;\n  let vowelsLength10 = 0;\n  let vowelsFound10 = false;\n  let vowelsIndex11 = 0;\n  let vowelsLength11 = 0;\n  let vowelsFound11 = false;\n  let vowelsIndex12 = 0;\n  let vowelsLength12 = 0;\n  let vowelsFound12 = false;\n  let vowelsIndex13 = 0;\n  let vowelsLength13 = 0;\n  let vowelsFound13 = false;\n  let vowelsIndex14 = 0;\n  let vowelsLength14 = 0;\n  let vowelsFound14 = false;\n  let vowelsIndex15 = 0;\n  let vowelsLength15 = 0;\n  let vowelsFound15 = false;\n  let vowelsIndex16 = 0;\n  let vowelsLength16 = 0;\n  let vowelsFound16 = false;\n  let vowelsIndex17 = 0;\n  let vowelsLength17 = 0;\n  let vowelsFound17 = false;\n  let vowelsIndex18 = 0;\n  let vowelsLength18 = 0;\n  let vowelsFound18 = false;\n  let vowelsIndex19 = 0;\n  let vowelsLength19 = 0;\n  let vowelsFound19 = false;\n  let vowelsIndex20 = 0;\n  let vowelsLength20 = 0;\n  let vowelsFound20 = false;\n  let vowelsIndex21 = 0;\n  let vowelsLength21 = 0;\n  let vowelsFound21 = false;\n  let vowelsIndex22 = 0;\n  let vowelsLength22 = 0;\n  let vowelsFound22 = false;\n  let vowelsIndex23 = 0;\n  let vowelsLength23 = 0;\n  let vowelsFound23 = false;\n  let vowelsIndex24 = 0;\n  let vowelsLength24 = 0;\n  let vowelsFound24 = false;\n  let vowelsIndex25 = 0;\n  let vowelsLength25 = 0;\n  let vowelsFound25 = false;\n  let vowelsIndex26 = 0;\n  let vowelsLength26 = 0;\n  let vowelsFound26 = false;\n  let vowelsIndex27 = 0;\n  let vowelsLength27 = 0;\n  let vowelsFound27 = false;\n  let vowelsIndex28 = 0;\n  let vowelsLength28 = 0;\n  let vowelsFound28 = false;\n  let vowelsIndex29 = 0;\n  let vowelsLength29 = 0;\n  let vowelsFound29 = false;\n  let vowelsIndex30 = 0;\n  let vowelsLength30 = 0;\n  let vowelsFound30 = false;\n  let vowelsIndex31 = 0;\n  let vowelsLength31 = 0;\n  let vowelsFound31 = false;\n  let vowelsIndex32 = 0;\n  let vowelsLength32 = 0;\n  let vowelsFound32 = false;\n  let vowelsIndex33 = 0;\n  let vowelsLength33 = 0;\n  let vowelsFound33 = false;\n  let vowelsIndex34 = 0;\n  let vowelsLength34 = 0;\n  let vowelsFound34 = false;\n  let vowelsIndex35 = 0;\n  let vowelsLength35 = 0;\n  let vowelsFound35 = false;\n  let vowelsIndex36 = 0;\n  let vowelsLength36 = 0;\n  let vowelsFound36 = false;\n  let vowelsIndex37 = 0;\n  let vowelsLength37 = 0;\n  let vowelsFound37 = false;\n  let vowelsIndex38 = 0;\n  let vowelsLength38 = 0;\n  let vowelsFound38 = false;\n  let vowelsIndex39 = 0;\n  let vowelsLength39 = 0;\n  let vowelsFound39 = false;\n  let vowelsIndex40 = 0;\n  let vowelsLength40 = 0;\n  let vowelsFound40 = false;\n  let vowelsIndex41 = 0;\n  let vowelsLength41 = 0;\n  let vowelsFound41 = false;\n  let vowelsIndex42 = 0;\n  let vowelsLength42 = 0;\n  let vowelsFound42 = false;\n  let vowelsIndex43 = 0;\n  let vowelsLength43 = 0;\n  let vowelsFound43 = false;\n  let vowelsIndex44 = 0;\n  let vowelsLength44 = 0;\n  let vowelsFound44 = false;\n  let vowelsIndex45 = 0;\n  let vowelsLength45 = 0;\n  let vowelsFound45 = false;\n  let vowelsIndex46 = 0;\n  let vowelsLength46 = 0;\n  let vowelsFound46 = false;\n  let vowelsIndex47 = 0;\n  let vowelsLength47 = 0;\n  let vowelsFound47 = false;\n  let vowelsIndex48 = 0;\n  let vowelsLength48 = 0;\n  let vowelsFound48 = false;\n  let vowelsIndex49 = 0;\n  let vowelsLength49 = 0;\n  let vowelsFound49 = false;\n  let vowelsIndex50 = 0;\n  let vowelsLength50 = 0;\n  let vowelsFound50 = false;\n  let vowelsIndex51 = 0;\n  let vowelsLength51 = 0;\n  let vowelsFound51 = false;\n  let vowelsIndex52 = 0;\n  let vowelsLength52 = 0;\n  let vowelsFound52 = false;\n  let vowelsIndex53 = 0;\n  let vowelsLength53 = 0;\n  let vowelsFound53 = false;\n  let vowelsIndex54 = 0;\n  let vowelsLength54 = 0;\n  let vowelsFound54 = false;\n  let vowelsIndex55 = 0;\n  let vowelsLength55 = 0;\n  let vowelsFound55 = false;\n  let vowelsIndex56 = 0;\n  let vowelsLength56 = 0;\n  let vowelsFound56 = false;\n  let vowelsIndex57 = 0;\n  let vowelsLength57 = 0;\n  let vowelsFound57 = false;\n  let vowelsIndex58 = 0;\n  let vowelsLength58 = 0;\n  let vowelsFound58 = false;\n  let vowelsIndex59 = 0;\n  let vowelsLength59 = 0;\n  let vowelsFound59 = false;\n  let vowelsIndex60 = 0;\n  let vowelsLength60 = 0;\n  let vowelsFound60 = false;\n  let vowelsIndex61 = 0;\n  let vowelsLength61 = 0;\n  let vowelsFound61 = false;\n  let vowelsIndex62 = 0;\n  let vowelsLength62 = 0;\n  let vowelsFound62 = false;\n  let vowelsIndex63 = 0;\n  let vowelsLength63 = 0;\n  let vowelsFound63 = false;\n  let vowelsIndex64 = 0;\n  let vowelsLength64 = 0;\n  let vowelsFound64 = false;\n  let vowelsIndex65 = 0;\n  let vowelsLength65 = 0;\n  let vowelsFound65 = false;\n  let vowelsIndex66 = 0;\n  let vowelsLength66 = 0;\n  let vowelsFound66 = false;\n  let vowel"}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      result += matchParens(lst.slice(i + 1));\n    } else if (lst[i] === ')') {\n      result += matchParens(lst.slice(i + 1));\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchBrackets(['(', ')']) == 'Yes'\n  matchBrackets([')', ')']) == 'No'\n  */\nconst matchBrackets = (lst) => {\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      result += matchBrackets(lst.slice(i + 1));\n    } else if (lst[i] === ')') {\n      result += matchBrackets(lst.slice(i + 1));\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchBraces(['(', ')']) == 'Yes'\n  matchBraces([')', ')']) == 'No'\n  */\nconst matchBraces = (lst) => {\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      result += matchBraces(lst.slice(i + 1));\n    } else if (lst[i] === ')') {\n      result += matchBraces(lst.slice(i + 1));\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchBrackets(['(', ')']) == 'Yes'\n  matchBrackets([')', ')']) == 'No'\n  */\nconst matchBrackets2 = (lst, index) => {\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      result += matchBrackets(lst.slice(i + 1, index + 1), index);\n    } else if (lst[i] === ')') {\n      result += matchBrackets(lst.slice(i + 1, index + 1), index);\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchBraces(['(', ')']) == 'Yes'\n  matchBraces([')', ')']) == 'No'\n  */\nconst matchBraces2 = (lst, index) => {\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      result += matchBraces(lst.slice(i + 1, index + 1), index);\n    } else if (lst[i] === ')') {\n      result += matchBraces(lst.slice(i + 1, index + 1), index);\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchBrackets(['(', ')']) == 'Yes'\n  matchBrackets([')', ')']) == 'No'\n  */\nconst matchBrackets3 = (lst, index) => {\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      result += matchBrackets(lst.slice(i + 1, index + 1), index);\n    } else if (lst[i] === ')') {\n      result += matchBrackets(lst.slice(i + 1, index + 1), index);\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchBraces(['(', ')']) == 'Yes'\n  matchBraces([')', ')']) == 'No'\n  */\nconst matchBraces3 = (lst, index) => {\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      result += matchBraces(lst.slice(i + 1, index + 1), index);\n    } else if (lst[i] === ')') {\n      result += matchBraces(lst.slice(i + 1, index + 1), index);\n    }\n  }\n  return result;\n};\n\n/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchBraces(['(', ')']) == 'Yes'\n  matchBraces([')', ')']) == 'No'\n  */\nconst matchBraces4 = (lst, index) => {\n  let result = 'No';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      result += matchBraces(lst.slice(i + 1, index + 1), index);\n    } else if (lst[i] === ')') {\n      result += matchBra"}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) return arr;\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[0]) {\n      result.push(arr[i]);\n    } else {\n      result.push(arr[0]);\n    }\n  }\n  return maximum(result, (k - 1) * -1);\n};\n\n/*\n  Given an array of integers, return a new array containing all unique elements of the original array.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2]\n      Output: [1, 2, 3]\n\n  Example 2:\n\n      Input: arr = [1, 2, 3, 2, 1]\n      Output: [1, 2, 3, 2, 1]\n\n  Note:\n      1. The input array will be sorted in ascending order.\n      2. Duplicate elements in the input array are not allowed.\n*/\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array containing all unique elements of the original array except the element at index i.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2]\n      Output: [1, 2]\n\n  Example 2:\n\n      Input: arr = [1, 2, 3, 2, 1]\n      Output: [1, 2, 3, 2, 1]\n\n  Note:\n      1. The input array will be sorted in ascending order.\n      2. Duplicate elements in the input array are not allowed.\n*/\nconst uniqueExcept = (arr, i) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== i) {\n      if (result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array containing all unique elements of the original array except the element at index i.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2]\n      Output: [1, 2]\n\n  Example 2:\n\n      Input: arr = [1, 2, 3, 2, 1]\n      Output: [1, 2, 3, 2, 1]\n\n  Note:\n      1. The input array will be sorted in ascending order.\n      2. Duplicate elements in the input array are not allowed.\n*/\nconst uniqueExceptWith = (arr, i) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== i) {\n      if (i!== 0 && result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array containing all unique elements of the original array except the element at index i.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2]\n      Output: [1, 2]\n\n  Example 2:\n\n      Input: arr = [1, 2, 3, 2, 1]\n      Output: [1, 2, 3, 2, 1]\n\n  Note:\n      1. The input array will be sorted in ascending order.\n      2. Duplicate elements in the input array are not allowed.\n*/\nconst uniqueExceptWith2 = (arr, i) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== i) {\n      if (i!== 0 && i!== arr.length - 1 && result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array containing all unique elements of the original array except the element at index i.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2]\n      Output: [1, 2]\n\n  Example 2:\n\n      Input: arr = [1, 2, 3, 2, 1]\n      Output: [1, 2, 3, 2, 1]\n\n  Note:\n      1. The input array will be sorted in ascending order.\n      2. Duplicate elements in the input array are not allowed.\n*/\nconst uniqueExceptWith3 = (arr, i) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== i) {\n      if (i!== 0 && i!== arr.length - 1 && i!== arr.length - 2 && result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array containing all unique elements of the original array except the element at index i.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2]\n      Output: [1, 2]\n\n  Example 2:\n\n      Input: arr = [1, 2, 3, 2, 1]\n      Output: [1, 2, 3, 2, 1]\n\n  Note:\n      1. The input array will be sorted in ascending order.\n      2. Duplicate elements in the input array are not allowed.\n*/\nconst uniqueExceptWith4 = (arr, i) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== i) {\n      if (i!== 0 && i!== arr.length - 1 && i!== arr.length - 2 && i!== arr.length - 3 && result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array containing all unique elements of the original array except the element at index i.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2]\n      Output: [1, 2]\n\n  Example 2:\n\n      Input: arr = [1, 2, 3, 2, 1]\n      Output: [1, 2, 3, 2, 1]\n\n  Note:\n      1. The input array will be sorted in ascending order.\n      2. Duplicate elements in the input array are not allowed.\n*/\nconst uniqueExceptWith5 = (arr, i) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== i) {\n      if (i!== 0 && i!== arr.length - 1 && i!== arr.length - 2 && i!== arr.length - 3 && i!== arr.length - 4 && result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array containing all unique elements of the original array except the element at index i.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2]\n      Output: [1, 2]\n\n  Example 2:\n\n      Input: arr = [1, 2, 3, 2, 1]\n      Output: [1, 2, 3, 2, 1]\n\n  Note:\n      1. The input array will be sorted in ascending order.\n      2. Duplicate elements in the input array are not allowed.\n*/\nconst uniqueExceptWith6 = (arr, i) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== i) {\n      if (i!== 0 && i!== arr.length - 1 && i!== arr.length - 2 && i!== arr.length - 3 && i!== arr.length - 4 && i!== arr.length - 5 && result.indexOf(arr[i]) === -1) {\n        result.push(arr[i]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array containing all unique elements of the original array except the element at index i.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2]\n      Output: [1, 2]\n\n  Example 2:\n\n      Input: arr = [1, 2, 3, 2, 1]\n      Output: [1, 2, 3, 2, 1]\n\n  Note:\n      1. The input array will be sorted in ascending order.\n      2. Duplicate elements in the input array are not allowed.\n*/\nconst uniqueExceptWith7 = (arr, i) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if ("}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],3:[function(require,module,exports){\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of three digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 24 # sum of 31 + 5 + 7\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of four digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 41 + 5 + 7 + 8\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of five digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 5\n      Output: 24 # sum of 51 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of six digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 6\n      Output: 24 # sum of 61 + 7 + 8 + 9 + 11\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of seven digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 7\n      Output: 24 # sum of 71 + 8 + 9 + 11 + 12\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of eight digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 8\n      Output: 24 # sum of 81 + 9 + 11 + 12 + 13 + 14\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of nine digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 9\n      Output: 24 # sum of 91 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of ten digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 10\n      Output: 24 # sum of 101 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of eleven digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 11\n      Output: 24 # sum of 111 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] % 10 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n/**\n  Given a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of twenty digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 12\n      Output: 24"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] < n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [1, 1];\n  let i = 1;\n  while (collatz[i] > n) {\n    collatz[i] = collatz[i - 1] * 3 + collatz[i - 1];\n    i++;\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The prime factors of n are those numbers that have only a single non-zero divisor. \n  For example, 12 is prime because 3 is itself a prime factor. \n  \n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(12) returns [2, 3] # The prime factors of 12 is [2, 3], and 12 is prime, so the prime factors of 12 is [2, 3].\n  */\nconst getPrimeFactors = (n) => {\n  let primeFactors = [];\n  let i = 1;\n  while (primeFactors.length < n) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The prime factors of n are those numbers that have only a single non-zero divisor. \n  For example, 12 is prime because 3 is itself a prime factor. \n  \n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(12) returns [2, 3] # The prime factors of 12 is [2, 3], and 12 is prime, so the prime factors of 12 is [2, 3].\n  */\nconst getPrimeFactorsNoZero = (n) => {\n  let primeFactors = [];\n  let i = 1;\n  while (primeFactors.length < n) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The prime factors of n are those numbers that have only a single non-zero divisor. \n  For example, 12 is prime because 3 is itself a prime factor. \n  \n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(12) returns [2, 3] # The prime factors of 12 is [2, 3], and 12 is prime, so the prime factors of 12 is [2, 3].\n  */\nconst getPrimeFactorsNoZeroNoZero = (n) => {\n  let primeFactors = [];\n  let i = 1;\n  while (primeFactors.length < n) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The prime factors of n are those numbers that have only a single non-zero divisor. \n  For example, 12 is prime because 3 is itself a prime factor. \n  \n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(12) returns [2, 3] # The prime factors of 12 is [2, 3], and 12 is prime, so the prime factors of 12 is [2, 3].\n  */\nconst getPrimeFactorsNoZeroNoZeroNoZero = (n) => {\n  let primeFactors = [];\n  let i = 1;\n  while (primeFactors.length < n) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The prime factors of n are those numbers that have only a single non-zero divisor. \n  For example, 12 is prime because 3 is itself a prime factor. \n  \n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(12) returns [2, 3] # The prime factors of 12 is [2, 3], and 12 is prime, so the prime factors of 12 is [2, 3].\n  */\nconst getPrimeFactorsNoZeroNoZeroNoZeroNoZero = (n) => {\n  let primeFactors = [];\n  let i = 1;\n  while (primeFactors.length < n) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The prime factors of n are those numbers that have only a single non-zero divisor. \n  For example, 12 is prime because 3 is itself a prime factor. \n  \n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(12) returns [2, 3] # The prime factors of 12 is [2, 3], and 12 is prime, so the prime factors of 12 is [2, 3].\n  */\nconst getPrimeFactorsNoZeroNoZeroNoZeroNoZeroNoZero = (n) => {\n  let primeFactors = [];\n  let i = 1;\n  while (primeFactors.length < n) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n    i++;\n  }\n  return primeFactors;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors of n.\n\n  The prime factors of n are those numbers that have only a single non-zero divisor. \n  For example, 12 is prime because 3 is itself a prime factor. \n  \n  Note: \n      "}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let dateYear = dateArray[0];\n  let dateMonth = dateArray[1];\n  let dateDay = dateArray[2];\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;\n  let dateArrayLength = dateArrayLength - 1;"}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"abcdef\") == 3\n  */\nconst splitWordsNoSpace = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"abcdef\") == 3\n  */\nconst splitWordsNoSpace2 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"abcdef\") == 3\n  */\nconst splitWordsNoSpace3 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"abcdef\") == 3\n  */\nconst splitWordsNoSpace4 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"abcdef\") == 3\n  */\nconst splitWordsNoSpace5 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"abcdef\") == 3\n  */\nconst splitWordsNoSpace6 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"abcdef\") == 3\n  */\nconst splitWordsNoSpace7 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"abcdef\") == 3\n  */\nconst splitWordsNoSpace8 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsNoSpace(\"abcdef\") == 3\n  */\nconst splitWordsNoSpace9 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n    i++;\n  }\n  return wordList;\n};\n\n/**\n  Returns a list of all words in the text that do not contain any spaces. If the text is empty, an empty list is returned.\n  Examples\n  splitWordsNoSpace(\"Hello world!\") ➞"}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length;\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    const num = lst[i];\n    if (arr.indexOf(num) === -1) {\n      arr.push(num);\n    }\n  }\n  return arr.sort().join('') === arr.join('');\n};\n\n/**\n * Given a string, convert it to a list of numbers. If the string contains only digits, return an empty list. Otherwise, return a list of numbers. If the string contains letters, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and numbers, return an empty list. Otherwise, return a list of numbers. If the string contains letters and numbers and letters and number"}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n  let [start3, end3] = interval2;\n  let [start4, end4] = interval2;\n  let [start5, end5] = interval2;\n  let [start6, end6] = interval2;\n  let [start7, end7] = interval2;\n  let [start8, end8] = interval2;\n  let [start9, end9] = interval2;\n  let [start10, end10] = interval2;\n  let [start11, end11] = interval2;\n  let [start12, end12] = interval2;\n  let [start13, end13] = interval2;\n  let [start14, end14] = interval2;\n  let [start15, end15] = interval2;\n  let [start16, end16] = interval2;\n  let [start17, end17] = interval2;\n  let [start18, end18] = interval2;\n  let [start19, end19] = interval2;\n  let [start20, end20] = interval2;\n  let [start21, end21] = interval2;\n  let [start22, end22] = interval2;\n  let [start23, end23] = interval2;\n  let [start24, end24] = interval2;\n  let [start25, end25] = interval2;\n  let [start26, end26] = interval2;\n  let [start27, end27] = interval2;\n  let [start28, end28] = interval2;\n  let [start29, end29] = interval2;\n  let [start30, end30] = interval2;\n  let [start31, end31] = interval2;\n  let [start32, end32] = interval2;\n  let [start33, end33] = interval2;\n  let [start34, end34] = interval2;\n  let [start35, end35] = interval2;\n  let [start36, end36] = interval2;\n  let [start37, end37] = interval2;\n  let [start38, end38] = interval2;\n  let [start39, end39] = interval2;\n  let [start40, end40] = interval2;\n  let [start41, end41] = interval2;\n  let [start42, end42] = interval2;\n  let [start43, end43] = interval2;\n  let [start44, end44] = interval2;\n  let [start45, end45] = interval2;\n  let [start46, end46] = interval2;\n  let [start47, end47] = interval2;\n  let [start48, end48] = interval2;\n  let [start49, end49] = interval2;\n  let [start50, end50] = interval2;\n  let [start51, end51] = interval2;\n  let [start52, end52] = interval2;\n  let [start53, end53] = interval2;\n  let [start54, end54] = interval2;\n  let [start55, end55] = interval2;\n  let [start56, end56] = interval2;\n  let [start57, end57] = interval2;\n  let [start58, end58] = interval2;\n  let [start59, end59] = interval2;\n  let [start60, end60] = interval2;\n  let [start61, end61] = interval2;\n  let [start62, end62] = interval2;\n  let [start63, end63] = interval2;\n  let [start64, end64] = interval2;\n  let [start65, end65] = interval2;\n  let [start66, end66] = interval2;\n  let [start67, end67] = interval2;\n  let [start68, end68] = interval2;\n  let [start69, end69] = interval2;\n  let [start70, end70] = interval2;\n  let [start71, end71] = interval2;\n  let [start72, end72] = interval2;\n  let [start73, end73] = interval2;\n  let [start74, end74] = interval2;\n  let [start75, end75] = interval2;\n  let [start76, end76] = interval2;\n  let [start77, end77] = interval2;\n  let [start78, end78] = interval2;\n  let [start79, end79] = interval2;\n  let [start80, end80] = interval2;\n  let [start81, end81] = interval2;\n  let [start82, end82] = interval2;\n  let [start83, end83] = interval2;\n  let [start84, end84] = interval2;\n  let [start85, end85] = interval2;\n  let [start86, end86] = interval2;\n  let [start87, end87] = interval2;\n  let [start88, end88] = interval2;\n  let [start89, end89] = interval2;\n  let [start90, end90] = interval2;\n  let [start91, end91] = interval2;\n  let [start92, end92] = interval2;\n  let [start93, end93] = interval2;\n  let [start94, end94] = interval2;\n  let [start95, end95] = interval2;\n  let [start96, end96] = interval2;\n  let [start97, end97] = interval2;\n  let [start98, end98] = interval2;\n  let [start99, end99] = interval2;\n  let [start100, end100] = interval2;\n  let [start101, end101] = interval2;\n  let [start102, end102] = interval2;\n  let [start103, end103] = interval2;\n  let [start104, end104] = interval2;\n  let [start105, end105] = interval2;\n  let [start106, end106] = interval2;\n  let [start107, end107] = interval2;\n  let [start108, end108] = interval2;\n  let [start109, end109] = interval2;\n  let [start110, end110] = interval2;\n  let [start111, end111] = interval2;\n  let [start112, end112] = interval2;\n  let [start113, end113] = interval2;\n  let [start114, end114] = interval2;\n  let [start115, end115] = interval2;\n  let [start116, end116] = interval2;\n  let [start117, end117] = interval2;\n  let [start118, end118] = interval2;\n  let [start119, end119] = interval2;\n  let [start120, end120] = interval2;\n  let [start121, end121] = interval2;\n  let [start122, end122] = interval2;\n  let [start123, end123] = interval2;\n  let [start124, end124] = interval2;\n  let [start125, end125] = interval2;\n  let [start126, end126] = interval2;\n  let [start127, end127] = interval2;\n  let [start128, end128] = interval2;\n  let [start129, end129] = interval2;\n  let [start130, "}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.pow(arr[i], 2);\n  }\n  return sum;\n};\n\nmodule.exports = prodSigns;\n\n},{}],4:[function(require,module,exports){\n/*\n  Given an array of integers, return the product of all the numbers in the array.\n  >>> product([1, 2, 2, -4]) == 24\n  >>> product([0, 1, 2]) == 4\n  >>> product([]) == null\n  */\nconst product = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nmodule.exports = product;\n\n},{}],5:[function(require,module,exports){\n/*\n  Given an array of integers, return the sum of all the numbers in the array.\n  >>> sum([1, 2, 2, -4]) == 24\n  >>> sum([0, 1, 2]) == 4\n  >>> sum([]) == null\n  */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = sum;\n\n},{}],6:[function(require,module,exports){\n/*\n  Given an array of integers, return the difference of the numbers in the array.\n  >>> difference([1, 2, 2, -4]) == -2\n  >>> difference([0, 1, 2]) == -1\n  >>> difference([]) == null\n  */\nconst difference = (arr) => {\n  let difference = 0;\n  for (let i = 0; i < arr.length; i++) {\n    difference += arr[i] - arr[i + 1];\n  }\n  return difference;\n};\n\nmodule.exports = difference;\n\n},{}],7:[function(require,module,exports){\n/*\n  Given an array of integers, return the product of the numbers in the array.\n  >>> product([1, 2, 2, -4]) == 24\n  >>> product([0, 1, 2]) == 4\n  >>> product([]) == null\n  */\nconst product = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nmodule.exports = product;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given an array of integers, return the sum of all the numbers in the array.\n  >>> sum([1, 2, 2, -4]) == 24\n  >>> sum([0, 1, 2]) == 4\n  >>> sum([]) == null\n  */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = sum;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given an array of integers, return the difference of the numbers in the array.\n  >>> difference([1, 2, 2, -4]) == -2\n  >>> difference([0, 1, 2]) == -1\n  >>> difference([]) == null\n  */\nconst difference = (arr) => {\n  let difference = 0;\n  for (let i = 0; i < arr.length; i++) {\n    difference += arr[i] - arr[i + 1];\n  }\n  return difference;\n};\n\nmodule.exports = difference;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given an array of integers, return the product of the numbers in the array.\n  >>> product([1, 2, 2, -4]) == 24\n  >>> product([0, 1, 2]) == 4\n  >>> product([]) == null\n  */\nconst product = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nmodule.exports = product;\n\n},{}],11:[function(require,module,exports){\n/*\n  Given an array of integers, return the sum of all the numbers in the array.\n  >>> sum([1, 2, 2, -4]) == 24\n  >>> sum([0, 1, 2]) == 4\n  >>> sum([]) == null\n  */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = sum;\n\n},{}],12:[function(require,module,exports){\n/*\n  Given an array of integers, return the difference of the numbers in the array.\n  >>> difference([1, 2, 2, -4]) == -2\n  >>> difference([0, 1, 2]) == -1\n  >>> difference([]) == null\n  */\nconst difference = (arr) => {\n  let difference = 0;\n  for (let i = 0; i < arr.length; i++) {\n    difference += arr[i] - arr[i + 1];\n  }\n  return difference;\n};\n\nmodule.exports = difference;\n\n},{}],13:[function(require,module,exports){\n/*\n  Given an array of integers, return the product of the numbers in the array.\n  >>> product([1, 2, 2, -4]) == 24\n  >>> product([0, 1, 2]) == 4\n  >>> product([]) == null\n  */\nconst product = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nmodule.exports = product;\n\n},{}],14:[function(require,module,exports){\n/*\n  Given an array of integers, return the sum of all the numbers in the array.\n  >>> sum([1, 2, 2, -4]) == 24\n  >>> sum([0, 1, 2]) == 4\n  >>> sum([]) == null\n  */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = sum;\n\n},{}],15:[function(require,module,exports){\n/*\n  Given an array of integers, return the difference of the numbers in the array.\n  >>> difference([1, 2, 2, -4]) == -2\n  >>> difference([0, 1, 2]) == -1\n  >>> difference([]) == null\n  */\nconst difference = (arr) => {\n  let difference = 0;\n  for (let i = 0; i < arr.length; i++) {\n    difference += arr[i] - arr[i + 1];\n  }\n  return difference;\n};\n\nmodule.exports = difference;\n\n},{}],16:[function(require,module,exports){\n/*\n  Given an array of integers, return the product of the numbers in the array.\n  >>> product([1, 2, 2, -4]) == 24\n  >>> product([0, 1, 2]) == 4\n  >>> product([]) == null\n  */\nconst product = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nmodule.exports = product;\n\n},{}],17:[function(require,module,exports){\n/*\n  Given an array of integers, return the sum of all the numbers in the array.\n  >>> sum([1, 2, 2, -4]) == 24\n  >>> sum([0, 1, 2]) == 4\n  >>> sum([]) == null\n  */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = sum;\n\n},{}],18:[function(require,module,exports){\n/*\n  Given an array of integers, return the difference of the numbers in the array.\n  >>> difference([1, 2, 2, -4]) == -2\n  >>> difference([0, 1, 2]) == -1\n  >>> difference([]) == null\n  */\nconst difference = (arr) => {\n  let difference = 0;\n  for (let i = 0; i < arr.length; i++) {\n    difference += arr[i] - arr[i + 1];\n  }\n  return difference;\n};\n\nmodule.exports = difference;\n\n},{}],19:[function(require,module,exports){\n/*\n  Given an array of integers, return the product of the numbers in the array.\n  >>> product([1, 2, 2, -4]) == 24\n  >>> product([0, 1, 2]) == 4\n  >>> product([]) == null\n  */\nconst product = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n  }\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n  }\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n  }\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n  }\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n  }\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n  }\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n  }\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n  }\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n  }\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  lst_A[0] = 1;\n  lst_B[0] = 1;\n  for (let i = 1; i < grid.length; i++) {\n    lst_A[i] = lst_A[i - 1] + grid[i - 1][i];\n    lst_B[i] = lst_B[i - 1] + grid[i - 1][i];\n  }\n  for (let i = 1; i < grid.length; i++) {\n    if (lst_A[i] < lst_B[i]) {\n      lst_A[i] = lst_B[i];\n      lst_B[i] = lst_A[i];\n    }\n"}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 2];\n  let i = 1;\n  let j = 2;\n  while (i <= n) {\n    arr.push(arr[j] + arr[j + 1]);\n    i++;\n    j++;\n  }\n  return arr;\n};\n\n/**\n * A recursive function to calculate the Fibonacci sequence of a given number.\n * It returns the Fibonacci sequence of the given number if n is positive, \n * otherwise it returns undefined.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence.\n * \n * Fibonacci sequence is defined as the sequence of numbers that \n * are equal to the given number in the Fibonacci sequence."}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = 0;\n  let remainder = 0;\n  while (n) {\n    digits = digits * 10 + n % 10;\n    remainder = n % 10;\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isEqual = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isOdd = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum % 2 === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isEven = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum % 2 === 1;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isDivisible = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from the least significant digit, is equal to the given n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst isMultipleOf = (n, digits) => {\n  let sum = 0;\n  while (digits) {\n    sum += digits;\n    digits = digits / 10;\n  }\n  return sum % n === 0;\n};\n\n/*"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [string];\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 &&!isNested(stack.pop())) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [string];\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 &&!isNested(stack.pop())) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [string];\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 &&!isNested(stack.pop())) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [string];\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 &&!isNested(stack.pop())) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [string];\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 &&!isNested(stack.pop())) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [string];\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 &&!isNested(stack.pop())) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [string];\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 &&!isNested(stack.pop())) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested"}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n    squareSum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum / squareSum);\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinct = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== lst[lst.length - 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithZero = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithZeroAndOne = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 1 && lst[i]!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithOne = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithZeroAndOneAndOne = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 1 && lst[i] === 1 && lst[i]!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithZeroAndOneAndTwo = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 1 && lst[i] === 1 && lst[i] === 2) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithZeroAndOneAndThree = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 1 && lst[i] === 1 && lst[i] === 3) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithZeroAndOneAndFour = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 1 && lst[i] === 1 && lst[i] === 4) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithZeroAndOneAndFive = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 1 && lst[i] === 1 && lst[i] === 5) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithZeroAndOneAndSix = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 1 && lst[i] === 1 && lst[i] === 6) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [1,4,9] the output should be 1\n  For lst = [1,3,5,7] the output should be 1\n  For lst = [1.4,4.2,0] the output should be 1\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst distinctWithZeroAndOneAndSeven = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === 1 && lst[i] === 1 && lst[i] === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that returns the number of distinct integers in a given list.\n  Examples:\n  For lst = [1,2,3] the "}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!?\" && lastChar!== \"!?!\" && lastChar!== \"!?!?\";\n};\n\n/* Create a function that returns true if the last character in a given string is a digit, and otherwise incorrect. Note: \"Digit\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsDigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!?\" && lastChar!== \"!?!\" && lastChar!== \"!?!?\";\n};\n\n/* Create a function that returns true if the last character in a given string is a letter, and otherwise incorrect. Note: \"Letter\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsLetter(\"apple pie\") ➞ false\n  checkIfLastCharIsLetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!?\" && lastChar!== \"!?!\" && lastChar!== \"!?!?\";\n};\n\n/* Create a function that returns true if the last character in a given string is a punctuation character, and otherwise incorrect. Note: \"Punctuation\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsPunctuation(\"apple pie\") ➞ false\n  checkIfLastCharIsPunctuation(\"apple pi e\") ➞ true\n  checkIfLastCharIsPunctuation(\"apple pi e \") ➞ false\n  checkIfLastCharIsPunctuation(\"\") ➞ false\n  */\nconst checkIfLastCharIsPunctuation = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!?\" && lastChar!== \"!?!\" && lastChar!== \"!?!?\";\n};\n\n/* Create a function that returns true if the last character in a given string is a space, and otherwise incorrect. Note: \"Space\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsSpace(\"apple pie\") ➞ false\n  checkIfLastCharIsSpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsSpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsSpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsSpace = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!?\" && lastChar!== \"!?!\" && lastChar!== \"!?!?\";\n};\n\n/* Create a function that returns true if the last character in a given string is a special character, and otherwise incorrect. Note: \"Special\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsSpecial(\"apple pie\") ➞ false\n  checkIfLastCharIsSpecial(\"apple pi e\") ➞ true\n  checkIfLastCharIsSpecial(\"apple pi e \") ➞ false\n  checkIfLastCharIsSpecial(\"\") ➞ false\n  */\nconst checkIfLastCharIsSpecial = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!?\" && lastChar!== \"!?!\" && lastChar!== \"!?!?\";\n};\n\n/* Create a function that returns true if the last character in a given string is a special character, and otherwise incorrect. Note: \"Special\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsSpecial(\"apple pie\") ➞ false\n  checkIfLastCharIsSpecial(\"apple pi e\") ➞ true\n  checkIfLastCharIsSpecial(\"apple pi e \") ➞ false\n  checkIfLastCharIsSpecial(\"\") ➞ false\n  */\nconst checkIfLastCharIsSpecial = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!?\" && lastChar!== \"!?!\" && lastChar!== \"!?!?\";\n};\n\n/* Create a function that returns true if the last character in a given string is a special character, and otherwise incorrect. Note: \"Special\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsSpecial(\"apple pie\") ➞ false\n  checkIfLastCharIsSpecial(\"apple pi e\") ➞ true\n  checkIfLastCharIsSpecial(\"apple pi e \") ➞ false\n  checkIfLastCharIsSpecial(\"\") ➞ false\n  */\nconst checkIfLastCharIsSpecial = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!?\" && lastChar!== \"!?!\" && lastChar!== \"!?!?\";\n};\n\n/* Create a function that returns true if the last character in a given string is a special character, and otherwise incorrect. Note: \"Special\" is a group of characters separated by spaces.\n  Examples:\n  checkIf"}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let index = -1\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] > arr[index]) {\n      index = i\n    }\n  }\n  return index\n}\n\n/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    }\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestNegativeIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestNegativeIntegers([]) == (null, null)\n  largestSmallestNegativeIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositiveIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    }\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestPositiveIntegers([]) == (null, null)\n  largestSmallestPositiveIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositiveNegativeIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestPositiveNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestPositiveNegativeIntegers([]) == (null, null)\n  largestSmallestPositiveNegativeIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositiveIntegerAndNegativeIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    }\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest negative integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestPositiveIntegerAndNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestPositiveIntegerAndNegativeIntegers([]) == (null, null)\n  largestSmallestPositiveIntegerAndNegativeIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositiveNegativeIntegerAndPositiveIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestPositiveIntegerAndNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestPositiveIntegerAndNegativeIntegers([]) == (null, null)\n  largestSmallestPositiveIntegerAndNegativeIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositiveIntegerAndPositiveNegativeIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestPositiveIntegerAndPositiveNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestPositiveIntegerAndPositiveNegativeIntegers([]) == (null, null)\n  largestSmallestPositiveIntegerAndPositiveNegativeIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositiveIntegerAndNegativeIntegerAndPositiveIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minNum) {\n      minNum = lst[i];\n    }\n    if (lst[i] > maxNum) {\n      maxNum = lst[i];\n    }\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where \"a\" is the largest positive integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestPositiveIntegerAndPositiveNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestPositiveIntegerAndPositiveNegativeIntegers([]) == "}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return 1\n  }\n  if (aNum < bNum) {\n    return -1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compare = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return -1\n  }\n  if (aNum < bNum) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return -1\n  }\n  if (aNum < bNum) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return -1\n  }\n  if (aNum < bNum) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compare = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return -1\n  }\n  if (aNum < bNum) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return -1\n  }\n  if (aNum < bNum) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compare = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return -1\n  }\n  if (aNum < bNum) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return -1\n  }\n  if (aNum < bNum) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compare = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return -1\n  }\n  if (aNum < bNum) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compareOne = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null\n  }\n  if (aNum === bNum) {\n    return null\n  }\n  if (aNum > bNum) {\n    return -1\n  }\n  if (aNum < bNum) {\n    return 1\n  }\n  return 0\n}\n\n/**\n * Compare two numbers, returning -1 if first is smaller than second, 0 if\n * they are equal, and 1 if the first is greater than second.\n */\nconst compare = (a, b) => {\n  if (a === null || b === null) {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (isNaN(aNum) || "}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is divisible by 3 or 5\n  Example\n  isDivisibleByThreeOrFive(5) == true\n  isDivisibleByThreeOrFive(6) == false\n  isDivisibleByThreeOrFive(7) == false\n  isDivisibleByThreeOrFive(8) == true\n  isDivisibleByThreeOrFive(9) == true\n  isDivisibleByThreeOrFive(10) == true\n  isDivisibleByThreeOrFive(11) == true\n  isDivisibleByThreeOrFive(12) == true\n  isDivisibleByThreeOrFive(13) == true\n  isDivisibleByThreeOrFive(14) == true\n  isDivisibleByThreeOrFive(15) == true\n  isDivisibleByThreeOrFive(16) == true\n  isDivisibleByThreeOrFive(17) == true\n  isDivisibleByThreeOrFive(18) == true\n  isDivisibleByThreeOrFive(19) == true\n  isDivisibleByThreeOrFive(20) == true\n  isDivisibleByThreeOrFive(21) == true\n  isDivisibleByThreeOrFive(22) == true\n  isDivisibleByThreeOrFive(23) == true\n  isDivisibleByThreeOrFive(24) == true\n  isDivisibleByThreeOrFive(25) == true\n  isDivisibleByThreeOrFive(26) == true\n  isDivisibleByThreeOrFive(27) == true\n  isDivisibleByThreeOrFive(28) == true\n  isDivisibleByThreeOrFive(29) == true\n  isDivisibleByThreeOrFive(30) == true\n  isDivisibleByThreeOrFive(31) == true\n  isDivisibleByThreeOrFive(32) == true\n  isDivisibleByThreeOrFive(33) == true\n  isDivisibleByThreeOrFive(34) == true\n  isDivisibleByThreeOrFive(35) == true\n  isDivisibleByThreeOrFive(36) == true\n  isDivisibleByThreeOrFive(37) == true\n  isDivisibleByThreeOrFive(38) == true\n  isDivisibleByThreeOrFive(39) == true\n  isDivisibleByThreeOrFive(40) == true\n  isDivisibleByThreeOrFive(41) == true\n  isDivisibleByThreeOrFive(42) == true\n  isDivisibleByThreeOrFive(43) == true\n  isDivisibleByThreeOrFive(44) == true\n  isDivisibleByThreeOrFive(45) == true\n  isDivisibleByThreeOrFive(46) == true\n  isDivisibleByThreeOrFive(47) == true\n  isDivisibleByThreeOrFive(48) == true\n  isDivisibleByThreeOrFive(49) == true\n  isDivisibleByThreeOrFive(50) == true\n  isDivisibleByThreeOrFive(51) == true\n  isDivisibleByThreeOrFive(52) == true\n  isDivisibleByThreeOrFive(53) == true\n  isDivisibleByThreeOrFive(54) == true\n  isDivisibleByThreeOrFive(55) == true\n  isDivisibleByThreeOrFive(56) == true\n  isDivisibleByThreeOrFive(57) == true\n  isDivisibleByThreeOrFive(58) == true\n  isDivisibleByThreeOrFive(59) == true\n  isDivisibleByThreeOrFive(60) == true\n  isDivisibleByThreeOrFive(61) == true\n  isDivisibleByThreeOrFive(62) == true\n  isDivisibleByThreeOrFive(63) == true\n  isDivisibleByThreeOrFive(64) == true\n  isDivisibleByThreeOrFive(65) == true\n  isDivisibleByThreeOrFive(66) == true\n  isDivisibleByThreeOrFive(67) == true\n  isDivisibleByThreeOrFive(68) == true\n  isDivisibleByThreeOrFive(69) == true\n  isDivisibleByThreeOrFive(70) == true\n  isDivisibleByThreeOrFive(71) == true\n  isDivisibleByThreeOrFive(72) == true\n  isDivisibleByThreeOrFive(73) == true\n  isDivisibleByThreeOrFive(74) == true\n  isDivisibleByThreeOrFive(75) == true\n  isDivisibleByThreeOrFive(76) == true\n  isDivisibleByThreeOrFive(77) == true\n  isDivisibleByThreeOrFive(78) == true\n  isDivisibleByThreeOrFive(79) == true\n  isDivisibleByThreeOrFive(80) == true\n  isDivisibleByThreeOrFive(81) == true\n  isDivisibleByThreeOrFive(82) == true\n  isDivisibleByThreeOrFive(83) == true\n  isDivisibleByThreeOrFive(84) == true\n  isDivisibleByThreeOrFive(85) == true\n  isDivisibleByThreeOrFive(86) == true\n  isDivisibleByThreeOrFive(87) == true\n  isDivisibleByThreeOrFive(88) == true\n  isDivisibleByThreeOrFive(89) == true\n  isDivisibleByThreeOrFive(90) == true\n  isDivisibleByThreeOrFive(91) == true\n  isDivisibleByThreeOrFive(92) == true\n  isDivisibleByThreeOrFive(93) == true\n  isDivisibleByThreeOrFive(94) == true\n  isDivisibleByThreeOrFive(95) == true\n  isDivisibleByThreeOrFive(96) == true\n  isDivisibleByThreeOrFive(97) == true\n  isDivisibleByThreeOrFive(98) == true\n  isDivisibleByThreeOrFive(99) == true\n  isDivisibleByThreeOrFive(100) == true\n  isDivisibleByThreeOrFive(101) == true\n  isDivisibleByThreeOrFive(102) == true\n  isDivisibleByThreeOrFive(103) == true\n  isDivisibleByThreeOrFive(104) == true\n  isDivisibleByThreeOrFive(105) == true\n  isDivisibleByThreeOrFive(106) == true\n  isDivisibleByThreeOrFive(107) == true\n  isDivisibleByThreeOrFive(108) == true\n  isDivisibleByThreeOrFive(109) == true\n  isDivisibleByThreeOrFive(110) == true\n  isDivisibleByThreeOrFive(111) == true\n  isDivisibleByThreeOrFive(112) == true\n  isDivisibleByThreeOrFive(113) == true\n  isDivisibleByThreeOrFive("}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * "}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ');\n  const newText = [];\n  for (let i = 0; i < spaces.length; i++) {\n    const space = spaces[i];\n    if (space.length > 1) {\n      newText.push(space.replace(/\\s+/g, '-'));\n    } else if (space.length > 2) {\n      newText.push(space.replace(/\\s+/g, '-'));\n    } else {\n      newText.push(space);\n    }\n  }\n  return newText.join(' ');\n};\n\n/*\n  Given a string, return a new string where all spaces are replaced with underscores and all underscores are replaced with spaces.\n  Example: fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example_1\"\n  fixUnderscores(\"Example_2 Example\") == \"Example_2_Example\"\n  fixUnderscores(\"Example_2 Example_3\") == \"Example_2_Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  const underscores = text.split(' ');\n  const newText = [];\n  for (let i = 0; i < underscores.length; i++) {\n    const underscore = underscores[i];\n    if (underscore.length > 1) {\n      newText.push(underscore.replace(/_/g, '-'));\n    } else if (underscore.length > 2) {\n      newText.push(underscore.replace(/_/g, '-'));\n    } else {\n      newText.push(underscore);\n    }\n  }\n  return newText.join(' ');\n};\n\n/*\n  Given a string, return a new string where all spaces are replaced with underscores and all underscores are replaced with spaces.\n  Example: fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example_1\") == \"Example_1\"\n  fixSpaces(\" Example_2 Example\") == \"Example_2_Example\"\n  fixSpaces(\" Example_2 Example_3\") == \"Example_2_Example_3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ');\n  const newText = [];\n  for (let i = 0; i < spaces.length; i++) {\n    const space = spaces[i];\n    if (space.length > 1) {\n      newText.push(space.replace(/\\s+/g, '_'));\n    } else if (space.length > 2) {\n      newText.push(space.replace(/\\s+/g, '_'));\n    } else {\n      newText.push(space);\n    }\n  }\n  return newText.join(' ');\n};\n\n/*\n  Given a string, return a new string where all spaces are replaced with underscores and all underscores are replaced with spaces.\n  Example: fixUnderscores(\" Example\") == \"Example\"\n  fixUnderscores(\" Example_1\") == \"Example_1\"\n  fixUnderscores(\" Example_2 Example\") == \"Example_2_Example\"\n  fixUnderscores(\" Example_2 Example_3\") == \"Example_2_Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  const underscores = text.split(' ');\n  const newText = [];\n  for (let i = 0; i < underscores.length; i++) {\n    const underscore = underscores[i];\n    if (underscore.length > 1) {\n      newText.push(underscore.replace(/_/g, '-'));\n    } else if (underscore.length > 2) {\n      newText.push(underscore.replace(/_/g, '-'));\n    } else {\n      newText.push(underscore);\n    }\n  }\n  return newText.join(' ');\n};\n\n/*\n  Given a string, return a new string where all spaces are replaced with underscores and all underscores are replaced with spaces.\n  Example: fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example_1\") == \"Example_1\"\n  fixSpaces(\" Example_2 Example\") == \"Example_2_Example\"\n  fixSpaces(\" Example_2 Example_3\") == \"Example_2_Example_3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ');\n  const newText = [];\n  for (let i = 0; i < spaces.length; i++) {\n    const space = spaces[i];\n    if (space.length > 1) {\n      newText.push(space.replace(/\\s+/g, '_'));\n    } else if (space.length > 2) {\n      newText.push(space.replace(/\\s+/g, '_'));\n    } else {\n      newText.push(space);\n    }\n  }\n  return newText.join(' ');\n};\n\n/*\n  Given a string, return a new string where all spaces are replaced with underscores and all underscores are replaced with spaces.\n  Example: fixUnderscores(\" Example\") == \"Example\"\n  fixUnderscores(\" Example_1\") == \"Example_1\"\n  fixUnderscores(\" Example_2 Example\") == \"Example_2_Example\"\n  fixUnderscores(\" Example_2 Example_3\") == \"Example_2_Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  const underscores = text.split(' ');\n  const newText = [];\n  for (let i = 0; i < underscores.length; i++) {\n    const underscore = underscores[i];\n    if (underscore.length > 1) {\n      newText.push(underscore.replace(/_/g, '-'));\n    } else if (underscore.length > 2) {\n      newText.push(underscore.replace(/_/g, '-'));\n    } else {\n      newText.push(underscore);\n    }\n  }\n  return newText.join(' ');\n};\n\n/*\n  Given a string, return a new string where all spaces are replaced with underscores and all underscores are replaced with spaces.\n  Example: fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example_1\") == \"Example_1\"\n  fixSpaces(\" Example_2 Example\") == \"Example_2_Example\"\n  fixSpaces(\" Example_2 Example_3\") == \"Example_2_Example_3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ');\n  const newText = [];\n  for (let i = 0; i < spaces.length; i++) {\n    const space = spaces[i];\n    if (space.length > 1) {\n      newText.push(space.replace(/\\s+/g, '_'));\n    } else if (space.length > 2) {\n      newText.push(space.replace(/\\s+/g, '_'));\n    } else {\n      newText.push(space);\n    }\n  }\n  return newText.join(' ');\n};\n\n/*\n  Given a string, return a new string where all spaces are replaced with underscores and all underscores are replaced with spaces.\n  Example: fixUnderscores(\" Example\") == \"Example\"\n  fixUnderscores(\" Example_1\") == \"Example_1\"\n  fixUnderscores(\" Example_2 Example\") == \"Example_2_Example\"\n  fixUnderscores(\" Example_2 Example_3\") == \"Example_2_Example_3\"\n  */\nconst fixUnderscores = (text) => {\n  const underscores = text.split(' ');\n  const newText = [];\n  for (let i = 0; i < underscores.length; i++) {\n    const underscore = underscores[i];\n    if (underscore.length > 1) {\n      newText.push(underscore.replace(/_/g, '-'));\n    } else if (underscore.length > 2) {\n      newText.push(underscore.replace(/_/g, '-'));\n    } else {\n      newText.push(underscore);\n    }\n  }\n  return newText.join(' ');\n};\n\n/*\n  Given a string, return a new string where all spaces are replaced with underscores and all underscores are replaced with spaces.\n  Example: fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example_1\") == \"Example_1\"\n  fixSpaces(\" Example_2 Example\") == \"Example_2_Example\"\n  fixSpaces(\" Example_2 Example_3\") == \"Example_2_Example_3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ');"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_length = file_name.length;\n  let file_name_start = 0;\n  let file_name_end = 0;\n  let file_name_char;\n  let file_name_chars;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_chars_length;\n  let file_name_char"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDivides = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDividesEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDividesOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDividesEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDividesOddEven = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDividesOddEvenOdd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output "}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const length = words.length;\n  const primes = [];\n  let i = 0;\n  while (i < length) {\n    if (primes.includes(words[i])) {\n      primes.push(words[i]);\n    } else {\n      primes.push(words[i]);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithLength = (sentence) => {\n  const words = sentence.split(\" \");\n  const length = words.length;\n  const primes = [];\n  let i = 0;\n  while (i < length) {\n    if (primes.includes(words[i])) {\n      primes.push(words[i]);\n    } else {\n      primes.push(words[i]);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithLengthAndOrder = (sentence) => {\n  const words = sentence.split(\" \");\n  const length = words.length;\n  const primes = [];\n  let i = 0;\n  while (i < length) {\n    if (primes.includes(words[i])) {\n      primes.push(words[i]);\n    } else {\n      primes.push(words[i]);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithLengthAndOrderAndLength = (sentence) => {\n  const words = sentence.split(\" \");\n  const length = words.length;\n  const primes = [];\n  let i = 0;\n  while (i < length) {\n    if (primes.includes(words[i])) {\n      primes.push(words[i]);\n    } else {\n      primes.push(words[i]);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithLengthAndOrderAndLengthAndLength = (sentence) => {\n  const words = sentence.split(\" \");\n  const length = words.length;\n  const primes = [];\n  let i = 0;\n  while (i < length) {\n    if (primes.includes(words[i])) {\n      primes.push(words[i]);\n    } else {\n      primes.push(words[i]);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithLengthAndOrderAndLengthAndLength = (sentence) => {\n  const words = sentence.split(\" \");\n  const length = words.length;\n  const primes = [];\n  let i = 0;\n  while (i < length) {\n    if (primes.includes(words[i])) {\n      primes.push(words[i]);\n    } else {\n      primes.push(words[i]);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithLengthAndOrderAndLengthAndLengthAndLength = (sentence) => {\n  const words = sentence.split(\" \");\n  const length = words.length;\n  const primes = [];\n  let i = 0;\n  while (i < length) {\n    if (primes.includes(words[i])) {\n      primes.push(words[i]);\n    } else {\n      primes.push(words[i]);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithLengthAndOrderAndLengthAndLengthAndLength = (sentence) => {\n  const words = sentence.split(\" \");\n  const length = words.length;\n  const primes = [];\n  let i = 0;\n  while (i < length) {\n    if (primes.includes(words[i])) {\n      primes.push(words[i]);\n    } else {\n      primes.push(words[i]);\n      i++;\n    }\n  }\n  return primes;\n};\n\n/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  "}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  const [numerator, denominator] = x.split(\"/\");\n  if (denominator === 0) {\n    return false;\n  }\n  const [numeratorValue, denominatorValue] = numerator.split(\"/\");\n  const numeratorValue = parseInt(numeratorValue);\n  const denominatorValue = parseInt(denominatorValue);\n  if (denominatorValue === 0) {\n    return false;\n  }\n  if (numeratorValue === 0) {\n    return false;\n  }\n  if (denominatorValue === 0 || numeratorValue === 0) {\n    return false;\n  }\n  const result = numeratorValue / denominatorValue;\n  return result === n || result === 1;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  const [numerator, denominator] = x.split(\"/\");\n  if (denominator === 0) {\n    return false;\n  }\n  const [numeratorValue, denominatorValue] = numerator.split(\"/\");\n  const numeratorValue = parseInt(numeratorValue);\n  const denominatorValue = parseInt(denominatorValue);\n  if (denominatorValue === 0) {\n    return false;\n  }\n  if (numeratorValue === 0) {\n    return false;\n  }\n  if (denominatorValue === 0 || numeratorValue === 0) {\n    return false;\n  }\n  const result = numeratorValue / denominatorValue;\n  return result === n || result === 1;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  const [numerator, denominator] = x.split(\"/\");\n  if (denominator === 0) {\n    return false;\n  }\n  const [numeratorValue, denominatorValue] = numerator.split(\"/\");\n  const numeratorValue = parseInt(numeratorValue);\n  const denominatorValue = parseInt(denominatorValue);\n  if (denominatorValue === 0) {\n    return false;\n  }\n  if (numeratorValue === 0) {\n    return false;\n  }\n  if (denominatorValue === 0 || numeratorValue === 0) {\n    return false;\n  }\n  const result = numeratorValue / denominatorValue;\n  return result === n || result === 1;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  const [numerator, denominator] = x.split(\"/\");\n  if (denominator === 0) {\n    return false;\n  }\n  const [numeratorValue, denominatorValue] = numerator.split(\"/\");\n  const numeratorValue = parseInt(numeratorValue);\n  const denominatorValue = parseInt(denominatorValue);\n  if (denominatorValue === 0) {\n    return false;\n  }\n  if (numeratorValue === 0) {\n    return false;\n  }\n  if (denominatorValue === 0 || numeratorValue === 0) {\n    return false;\n  }\n  const result = numeratorValue / denominatorValue;\n  return result === n || result === 1;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  const [numerator, denominator] = x.split(\"/\");\n  if (denominator === 0) {\n    return false;\n  }\n  const [numeratorValue, denominatorValue] = numerator.split(\"/\");\n  const numeratorValue = parseInt(numeratorValue);\n  const denominatorValue = parseInt(denominatorValue);\n  if (denominatorValue === 0) {\n    return false;\n  }\n  if (numeratorValue === 0) {\n    return false;\n  }\n  if (denominatorValue === 0 || numeratorValue === 0) {\n    return false;\n  }\n  const result = numeratorValue / denominatorValue;\n  return result === n || result === 1;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  const [numerator, denominator] = x.split(\"/\");\n  if (denominator === 0) {\n    return false;\n  }\n  const [numeratorValue, denominatorValue] = numerator.split(\"/\");\n  const numeratorValue = parseInt(numeratorValue);\n  const denominatorValue = parseInt(denominatorValue);\n  if (denominatorValue === 0) {\n    return false;\n  }\n  if (numeratorValue === 0) {\n    return false;\n  }\n  if (denominatorValue === 0 || numeratorValue === 0) {\n    return false;\n  }\n  const result = numeratorValue / denominatorValue;\n  return result === n || result === 1;\n};\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if ("}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const sums = numsSorted.reduce((acc, num) => {\n    acc[num] = acc[num] || 0;\n    acc[num] += 1;\n    return acc;\n  }, {});\n  return numsSorted.map(num => sums[num]);\n};\n\n/*\n  Write a function that returns the sum of the digits of an integer in ascending order. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> sumDigits(10) == 11\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sumDigits(-1) == -1\n  >>> sum"}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num < 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num < 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num < 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num < 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num < 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num < 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num > 10) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num < 10) {\n      count++;\n    }\n  });\n"}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let maxTriples = 0;\n  let triples = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n      for (let k = 0; k < j; k++) {\n        if (triples.includes([i, j, k])) {\n          triples.push([i, j, k]);\n        } else {\n          triples.push([i, j, k]);\n          maxTriples = Math.max(triples.length, maxTriples);\n        }\n      }\n    }\n  }\n  return maxTriples;\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = [1, 2, 3, 4] -> Not a palindrome\n      nums = [1, 2, 3, 4] -> Palindrome and Not a palindrome\n*/\nconst isPalindrome = nums => {\n  let numsCopy = nums.slice();\n  numsCopy.reverse();\n  return numsCopy.toString() === numsCopy.toString().reverse().toString();\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome of length 3.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = [1, 2, 3, 4] -> Not a palindrome\n      nums = [1, 2, 3, 4] -> Palindrome and Not a palindrome\n*/\nconst isPalindromeOfLength3 = nums => {\n  let numsCopy = nums.slice();\n  numsCopy.reverse();\n  return numsCopy.toString() === numsCopy.toString().reverse().toString().slice(0, 3);\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome of length 2.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = [1, 2, 3, 4] -> Not a palindrome\n      nums = [1, 2, 3, 4] -> Palindrome and Not a palindrome\n*/\nconst isPalindromeOfLength2 = nums => {\n  let numsCopy = nums.slice();\n  numsCopy.reverse();\n  return numsCopy.toString() === numsCopy.toString().reverse().toString().slice(0, 2);\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome of length 1.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = [1, 2, 3, 4] -> Not a palindrome\n      nums = [1, 2, 3, 4] -> Palindrome and Not a palindrome\n*/\nconst isPalindromeOfLength1 = nums => {\n  let numsCopy = nums.slice();\n  numsCopy.reverse();\n  return numsCopy.toString() === numsCopy.toString().reverse().toString();\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome of length 0.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = [1, 2, 3, 4] -> Not a palindrome\n      nums = [1, 2, 3, 4] -> Palindrome and Not a palindrome\n*/\nconst isPalindromeOfLength0 = nums => {\n  let numsCopy = nums.slice();\n  numsCopy.reverse();\n  return numsCopy.toString() === numsCopy.toString().reverse().toString();\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome of length 1.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = [1, 2, 3, 4] -> Not a palindrome\n      nums = [1, 2, 3, 4] -> Palindrome and Not a palindrome\n*/\nconst isPalindromeOfLength1 = nums => {\n  let numsCopy = nums.slice();\n  numsCopy.reverse();\n  return numsCopy.toString() === numsCopy.toString().reverse().toString().slice(0, 1);\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome of length 2.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = [1, 2, 3, 4] -> Not a palindrome\n      nums = [1, 2, 3, 4] -> Palindrome and Not a palindrome\n*/\nconst isPalindromeOfLength2 = nums => {\n  let numsCopy = nums.slice();\n  numsCopy.reverse();\n  return numsCopy.toString() === numsCopy.toString().reverse().toString().slice(0, 2);\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome of length 3.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = [1, 2, 3, 4] -> Not a palindrome\n      nums = [1, 2, 3, 4] -> Palindrome and Not a palindrome\n*/\nconst isPalindromeOfLength3 = nums => {\n  let numsCopy = nums.slice();\n  numsCopy.reverse();\n  return numsCopy.toString() === numsCopy.toString().reverse().toString().slice(0, 3);\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome of length 2.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = [1, 2, 3, 4] -> Not a palindrome\n      nums = [1, 2, 3, 4] -> Palindrome and Not a palindrome\n*/\nconst isPalindromeOfLength4 = nums => {\n  let numsCopy = nums.slice();\n  numsCopy.reverse();\n  return numsCopy.toString() === numsCopy.toString().reverse().toString().slice(0, 4);\n};\n\n/*\n  Given an array of integers nums, return true if and only if nums is a palindrome of length 3.\n\n  Example :\n      Input: nums = [1, 2, 3, 4]\n      Output: true\n      Explanation: \n      nums = [1, 2, 3, 4] -> Palindrome\n      nums = ["}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitOrbit = planet1Orbit + planet2Orbit;\n  const planet2OrbitOrbit = planet2Orbit + planet1Orbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbitOrbit = planet1OrbitOrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbit;\n  const planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbit;\n  const planet1OrbitOrbitOrbit = planet1OrbitOrbit + "}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n      sum += lst[i].length;\n    }\n  }\n  return lst.sort((a, b) => a - b).map(s => s.length);\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with every even character replaced by 'a'.\n  The function should return a new string.\n  You may assume that all characters will have an even length.\n  For example:\n  assert evenToA(\"ab\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaab\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n  assert evenToA(\"aaa\") == \"aa\"\n  assert evenToA(\"aaabbb\") == \"aa\"\n"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x <= 0 || n % y === 0) {\n    return 0\n  }\n  return n % y === x? x : y\n}\n\n/*A simple program that should "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 5. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 7. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 9. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 11. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 13. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 15. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 15 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 17. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 19. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 21. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 21 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 23. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 23 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 25. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 25 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 27. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 27 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 29. If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst == null || lst.length == 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 29 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 31. If the input "}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreDifferences = scores.length - guesses.length;\n  const guessesDifferences = guesses.length - scores.length;\n  const scoreDifferenceSum = scoreDifferences.reduce((acc, cur) => acc + cur, 0);\n  const guessesDifferenceSum = guessesDifferences.reduce((acc, cur) => acc + cur, 0);\n  const scoreDifferenceSumSquared = scoreDifferenceSum * scoreDifferenceSum;\n  const guessesDifferenceSumSquared = guessesDifferenceSum * guessesDifferenceSum;\n  const scoreDifferenceSumSquared =\n    scoreDifferenceSumSquared +\n    guessesDifferenceSumSquared *\n      Math.pow(guessesDifferenceSum, 2);\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared *\n      Math.pow(guessesDifferenceSumSquared,\n        2);\n  const scoreDifferenceSumSquared =\n    scoreDifferenceSumSquared +\n    guessesDifferenceSumSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquared =\n    scoreDifferenceSumSquared +\n    guessesDifferenceSumSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquaredSquared +\n    guessesDifferenceSumSquaredSquared;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSum"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_strongest_name = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength_i = extension.substr(0, 1);\n    if (extension_strength_i === class_name.substr(0, 1)) {\n      extension_class = extension.substr(1);\n    }\n    if (extension_strength_i === class_name.substr(0, class_name.length - 1)) {\n      extension_strongest_name = extension.substr(class_name.length - 1);\n    }\n    if (extension_strength > extension_strength_i) {\n      extension_strength = extension_strength_i;\n      extension_class = extension;\n    }\n  }\n  return extension_class;\n};\n\n/*\n  Given a class name, and a set of extensions, return the class name that\n  has the highest extension's strength.\n  Example:\n  highestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst highestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_strongest_name = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength_i = extension.substr(0, 1);\n    if (extension_strength_i === class_name.substr(0, 1)) {\n      extension_class = extension.substr(1);\n    }\n    if (extension_strength_i === class_name.substr(0, class_name.length - 1)) {\n      extension_strongest_name = extension.substr(class_name.length - 1);\n    }\n    if (extension_strength > extension_strength_i) {\n      extension_strength = extension_strength_i;\n      extension_class = extension;\n    }\n  }\n  return extension_class;\n};\n\n/*\n  Given a class name, and a set of extensions, return the class name that\n  has the lowest extension's strength.\n  Example:\n  lowestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst lowestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_strongest_name = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength_i = extension.substr(0, 1);\n    if (extension_strength_i === class_name.substr(0, 1)) {\n      extension_class = extension.substr(1);\n    }\n    if (extension_strength_i === class_name.substr(0, class_name.length - 1)) {\n      extension_strongest_name = extension.substr(class_name.length - 1);\n    }\n    if (extension_strength < extension_strength_i) {\n      extension_strength = extension_strength_i;\n      extension_class = extension;\n    }\n  }\n  return extension_class;\n};\n\n/*\n  Given a class name, and a set of extensions, return the class name that\n  has the highest extension's strength and lowest extension's strength.\n  Example:\n  highestAndLowestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst highestAndLowestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_strongest_name = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength_i = extension.substr(0, 1);\n    if (extension_strength_i === class_name.substr(0, 1)) {\n      extension_class = extension.substr(1);\n    }\n    if (extension_strength_i === class_name.substr(0, class_name.length - 1)) {\n      extension_strongest_name = extension.substr(class_name.length - 1);\n    }\n    if (extension_strength < extension_strength_i) {\n      extension_strength = extension_strength_i;\n      extension_class = extension;\n    }\n  }\n  return extension_class;\n};\n\n/*\n  Given a class name, and a set of extensions, return the class name that\n  has the highest extension's strength and lowest extension's strength.\n  Example:\n  highestAndLowestAndLowestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst highestAndLowestAndLowestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_strongest_name = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength_i = extension.substr(0, 1);\n    if (extension_strength_i === class_name.substr(0, 1)) {\n      extension_class = extension.substr(1);\n    }\n    if (extension_strength_i === class_name.substr(0, class_name.length - 1)) {\n      extension_strongest_name = extension.substr(class_name.length - 1);\n    }\n    if (extension_strength < extension_strength_i) {\n      extension_strength = extension_strength_i;\n      extension_class = extension;\n    }\n  }\n  return extension_class;\n};\n\n/*\n  Given a class name, and a set of extensions, return the class name that\n  has the highest extension's strength and lowest extension's strength.\n  Example:\n  highestAndLowestAndLowestAndLowestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst highestAndLowestAndLowestAndLowestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_strongest_name = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_strength_i = extension.substr(0, 1);\n    if (extension_strength_i === class_name.substr(0, 1)) {\n      extension_class = extension.substr(1);\n    }\n    if (extension_strength_i === class_name.substr(0, class_name.length - 1)) {\n      extension_strongest_name = extension.substr(class_name.length - 1);\n    }\n    if (extension_strength < extension_strength_i) {\n      extension_strength = extension_strength_i;\n      extension_class = extension;\n    }\n  }\n  return extension_class;\n};\n\n/*\n  Given a class name, and a set of extensions, return the class name that\n  has the highest extension's strength and lowest extension's strength.\n  Example:\n  highestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAndLowestAnd"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArray = a.split('');\n  let bArray = b.split('');\n  let aLen = aArray.length;\n  let bLen = bArray.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aRot = 0;\n  let bRot = 0;\n  let aSub = '';\n  let bSub = '';\n  let aSubLen = 0;\n  let bSubLen = 0;\n  let aSubIndex = 0;\n  let bSubIndex = 0;\n  let aSubRot = 0;\n  let bSubRot = 0;\n  let aSubSub = '';\n  let bSubSub = '';\n  let aSubSubLen = 0;\n  let bSubSubLen = 0;\n  let aSubSubIndex = 0;\n  let bSubSubIndex = 0;\n  let aSubSubRot = 0;\n  let bSubSubRot = 0;\n  let aSubSubSub = '';\n  let bSubSubSub = '';\n  let aSubSubSubLen = 0;\n  let bSubSubSubLen = 0;\n  let aSubSubSubIndex = 0;\n  let bSubSubSubIndex = 0;\n  let aSubSubSubRot = 0;\n  let bSubSubSubRot = 0;\n  let aSubSubSubSub = '';\n  let bSubSubSubSub = '';\n  let aSubSubSubSubLen = 0;\n  let bSubSubSubSubLen = 0;\n  let aSubSubSubSubIndex = 0;\n  let bSubSubSubSubIndex = 0;\n  let aSubSubSubSubRot = 0;\n  let bSubSubSubSubRot = 0;\n  let aSubSubSubSubSub = '';\n  let bSubSubSubSubSub = '';\n  let aSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSubSubSub = '';\n  let bSubSubSubSubSubSubSubSubSubSubSub = '';\n  let aSubSubSubSubSubSubSubSubSubSubLen = 0;\n  let bSubSubSubSubSubSubSubSubSubSubLen = 0;\n  let aSubSubSubSubSubSubSubSubSubSubIndex = 0;\n  let bSubSubSubSubSubSubSubSubSubSubIndex = 0;\n  let aSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let bSubSubSubSubSubSubSubSubSubSubRot = 0;\n  let aSubSubSubSubSubSubSubSubSubSub"}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2 === 0) {\n      evenCount++\n    } else {\n      oddCount++\n    }\n  }\n  return [evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddOddCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2!== 0) {\n      oddCount++\n    } else {\n      evenCount++\n    }\n  }\n  return [evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddEvenCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2 === 0) {\n      evenCount++\n    } else {\n      oddCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddEvenCount(-12) ==> (1, 1)\n      evenOddEvenCount(123) ==> (1, 2)\n  */\nconst oddOddOddCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2!== 0) {\n      oddCount++\n    } else {\n      evenCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddOddEvenCount(-12) ==> (1, 1)\n      evenOddOddEvenCount(123) ==> (1, 2)\n  */\nconst evenOddOddEvenEvenCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2 === 0) {\n      evenCount++\n    } else {\n      oddCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddOddEvenEvenCount(-12) ==> (1, 1)\n      evenOddOddEvenEvenCount(123) ==> (1, 2)\n  */\nconst oddOddOddOddEvenCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2!== 0) {\n      oddCount++\n    } else {\n      evenCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddOddEvenEvenCount(-12) ==> (1, 1)\n      evenOddOddEvenEvenCount(123) ==> (1, 2)\n  */\nconst evenOddOddOddOddEvenCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2!== 0) {\n      oddCount++\n    } else {\n      evenCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddOddEvenEvenCount(-12) ==> (1, 1)\n      evenOddOddEvenEvenCount(123) ==> (1, 2)\n  */\nconst oddOddOddOddOddOddEvenCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2!== 0) {\n      oddCount++\n    } else {\n      evenCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddOddEvenEvenCount(-12) ==> (1, 1)\n      evenOddOddEvenEvenCount(123) ==> (1, 2)\n  */\nconst evenOddOddOddOddOddOddEvenCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2!== 0) {\n      oddCount++\n    } else {\n      evenCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddOddEvenEvenCount(-12) ==> (1, 1)\n      evenOddOddEvenEvenCount(123) ==> (1, 2)\n  */\nconst oddOddOddOddOddOddOddEvenCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2!== 0) {\n      oddCount++\n    } else {\n      evenCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddOddEvenEvenCount(-12) ==> (1, 1)\n      evenOddOddEvenEvenCount(123) ==> (1, 2)\n  */\nconst evenOddOddOddOddOddOddOddOddEvenCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2!== 0) {\n      oddCount++\n    } else {\n      evenCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddOddEvenEvenEvenCount(-12) ==> (1, 1)\n      evenOddOddEvenEvenCount(123) ==> (1, 2)\n  */\nconst oddOddOddOddOddOddOddOddOddOddEvenCount = (num) => {\n  const digits = String(num).split('')\n  let evenCount = 0\n  let oddCount = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] % 2!== 0) {\n      oddCount++\n    } else {\n      evenCount++\n    }\n  }\n  return [evenCount, oddCount, evenCount, oddCount, evenCount, oddCount]\n}\n\n/*GReturns a tuple with even or odd "}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign(number);\n  const [digits, remainder] = getDigits(number);\n  const [roman] = getRoman(digits, sign);\n  return `${roman}${remainder > 0? 'i' : ''}`;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'XIX'\n  >>> intToMiniRoman(152) == 'CLII'\n  >>> intToMiniRoman(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpper = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign(number);\n  const [digits, remainder] = getDigits(number);\n  const [roman] = getRoman(digits, sign);\n  return `${roman}${remainder > 0? 'I' : ''}`;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRomanUpper(19) == 'XIX'\n  >>> intToMiniRomanUpper(152) == 'CLII'\n  >>> intToMiniRomanUpper(426) == 'CDXXVI'\n  */\nconst intToMiniRomanLower = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign(number);\n  const [digits, remainder] = getDigits(number);\n  const [roman] = getRoman(digits, sign);\n  return `${roman}${remainder > 0? 'i' : ''}`;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRomanLower(19) == 'XIX'\n  >>> intToMiniRomanLower(152) == 'CLII'\n  >>> intToMiniRomanLower(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpperLower = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign(number);\n  const [digits, remainder] = getDigits(number);\n  const [roman] = getRoman(digits, sign);\n  return `${roman}${remainder > 0? 'I' : ''}`;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRomanUpperLower(19) == 'XIX'\n  >>> intToMiniRomanUpperLower(152) == 'CLII'\n  >>> intToMiniRomanUpperLower(426) == 'CDXXVI'\n  */\nconst intToMiniRomanLower = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign(number);\n  const [digits, remainder] = getDigits(number);\n  const [roman] = getRoman(digits, sign);\n  return `${roman}${remainder > 0? 'i' : ''}`;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRomanUpperLower(19) == 'XIX'\n  >>> intToMiniRomanUpperLower(152) == 'CLII'\n  >>> intToMiniRomanUpperLower(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpperUpper = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign(number);\n  const [digits, remainder] = getDigits(number);\n  const [roman] = getRoman(digits, sign);\n  return `${roman}${remainder > 0? 'I' : ''}`;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRomanUpperUpper(19) == 'XIX'\n  >>> intToMiniRomanUpperUpper(152) == 'CLII'\n  >>> intToMiniRomanUpperUpper(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpperLower = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign(number);\n  const [digits, remainder] = getDigits(number);\n  const [roman] = getRoman(digits, sign);\n  return `${roman}${remainder > 0? 'I' : ''}`;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRomanLower(19) == 'XIX'\n  >>> intToMiniRomanLower(152) == 'CLII'\n  >>> intToMiniRomanLower(426) == 'CDXXVI'\n  */\nconst intToMiniRomanLower = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign(number);\n  const [digits, remainder] = getDigits(number);\n  const [roman] = getRoman(digits, sign);\n  return `${roman}${remainder > 0? 'i' : ''}`;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in uppercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRomanUpperLower(19) == 'XIX'\n  >>> intToMiniRomanUpperLower(152) == 'CLII'\n  >>> intToMiniRomanUpperLower(426) == 'CDXXVI'\n  */\nconst intToMiniRomanLower = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign(number);\n  const [digits, remainder] = getDigits(number);\n  const [roman] = getRoman(digits, sign);\n  return `${roman}${remainder > 0? 'i' : ''}`;\n};\n\n/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRomanLower(19) == 'XIX'\n  >>> intToMiniRomanLower(152) == 'CLII'\n  >>> intToMiniRomanLower(426) == 'CDXXVI'\n  */\nconst intToMiniRomanUpperUpper = (number) => {\n  if (number <= 0) return '';\n  const [value, sign] = getSign"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > b2 * c1;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a left-angled triangle, otherwise wrong. A left-angled triangle is a triangle in which an angle is left-angled or -90 degrees.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > b2 * c1;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a square, otherwise wrong. A square is a triangle in which all three sides are equal, except for the first and last side.\n  Example:\n  squareTriangle(3, 4, 5) == true\n  squareTriangle(1, 2, 3) == false\n  */\nconst squareTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 === b2 * c1;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a circle, otherwise wrong. A circle is a triangle in which all three sides are equal, except for the first and last side.\n  Example:\n  circleTriangle(3, 4, 5) == true\n  circleTriangle(1, 2, 3) == false\n  */\nconst circleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 === b2 * c1;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled square, otherwise wrong. A right-angled square is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleSquareTriangle(3, 4, 5) == true\n  rightAngleSquareTriangle(1, 2, 3) == false\n  */\nconst rightAngleSquareTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > b2 * c1;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a left-angled square, otherwise wrong. A left-angled square is a triangle in which an angle is left-angled or -90 degrees.\n  Example:\n  leftAngleSquareTriangle(3, 4, 5) == true\n  leftAngleSquareTriangle(1, 2, 3) == false\n  */\nconst leftAngleSquareTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > b2 * c1;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled circle, otherwise wrong. A right-angled circle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleCircleTriangle(3, 4, 5) == true\n  rightAngleCircleTriangle(1, 2, 3) == false\n  */\nconst rightAngleCircleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > b2 * c1;\n};\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a left-angled circle, otherwise wrong. A left-angled circle is a triangle in which an angle is left-angled or -90 degrees.\n  Example:\n  leftAngleCircleTriangle(3, 4, 5) == true\n  leftAngleCircleTriangle(1, 2, 3) == false\n  */\nconst leftAngleCircleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let maxLength = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxUniqueChar = 0;\n  let maxUniqueWord = \"\";\n  let maxUniqueWordLength = 0;\n  let maxUniqueWordLengthLength = 0;\n  let maxUniqueWordLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let maxUniqueWordLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * need / 100)\n  const remainingCarrots = Math.ceil(remaining / 100)\n  const totalCarrots = carrots + remainingCarrots\n  const totalEaten = carrots + remainingCarrots - totalCarrots\n  const totalRemaining = carrots + remainingCarrots - totalCarrots\n  const totalEatenCarrots = totalEaten * 100 / totalCarrots\n  const totalRemainingCarrots = totalRemaining * 100 / totalCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemainingCarrots? totalEatenCarrots : totalRemainingCarrots\n  const totalRemainingCarrots = totalRemainingCarrots < totalEatenCarrots? totalRemainingCarrots : totalEatenCarrots\n  const totalEatenCarrots = totalEatenCarrots < totalRemain"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n    else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n    else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n    else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n    else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n    else {\n      result += operand[operandIndex];\n      operandIndex++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    }\n    else {\n      result += operand"}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let i;\n  let j;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289;\n  let temp290;\n  let temp291;\n  let temp29"}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return 0;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha1 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha256 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha256('Hello world') == '098f3bc1c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha256');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding sha512 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == '521c05a14c59c8051aee4aa1f950c193ea9ac2e5c0f86e8a3e5c7c03631e0d'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha512');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha512');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha512');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha512');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha512');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha512');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha512');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha512');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) return 0;\n  const sha1Hash = crypto.createHash('sha512');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b"}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = 0;\n  while (i < b) {\n    result.push(j);\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n  Given a positive integer n, return the number of ways to split it into two equal parts.\n\n  For example:\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]\n  splitInteger(42) => [4, 2]"}
