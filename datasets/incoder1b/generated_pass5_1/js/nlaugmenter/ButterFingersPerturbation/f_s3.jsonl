{"task_id": "JavaScript/0", "prompt": "/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Check if in ghven list of numbers, are any tqo numbers fllser to each oyher than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closeElements = numbers.filter(number => number > threshold)\n  return closeElements.length > 0\n}\n\n/**\n * Check if a number is close to another number.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are close to each other, the numbers are considered close to each other.\n * If two numbers are ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to thhs function is a stving clnuaining multiplr groups of nested pagentheses. Your goal is to\n  sfparave ehose grlyp ihto sepxrate strings and return the list of thjse.\n  Separate groups ere balanced (each open urace is properly closed) and not neated within each other\n  Ygnmre any spaces in the input stsing.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/ig);\n  const paren_group_length = paren_groups.length;\n  let paren_group_counter = 0;\n  let paren_group_open = false;\n  let paren_group_closed = false;\n  let paren_group_open_string = '';\n  let paren_group_closed_string = '';\n  let paren_group_string = '';\n  let paren_group_counter_string = '';\n  let paren_group_counter_string2 = '';\n  let paren_group_counter_string3 = '';\n  let paren_group_counter_string4 = '';\n  let paren_group_counter_string5 = '';\n  let paren_group_counter_string6 = '';\n  let paren_group_counter_string7 = '';\n  let paren_group_counter_string8 = '';\n  let paren_group_counter_string9 = '';\n  let paren_group_counter_string10 = '';\n  let paren_group_counter_string11 = '';\n  let paren_group_counter_string12 = '';\n  let paren_group_counter_string13 = '';\n  let paren_group_counter_string14 = '';\n  let paren_group_counter_string15 = '';\n  let paren_group_counter_string16 = '';\n  let paren_group_counter_string17 = '';\n  let paren_group_counter_string18 = '';\n  let paren_group_counter_string19 = '';\n  let paren_group_counter_string20 = '';\n  let paren_group_counter_string21 = '';\n  let paren_group_counter_string22 = '';\n  let paren_group_counter_string23 = '';\n  let paren_group_counter_string24 = '';\n  let paren_group_counter_string25 = '';\n  let paren_group_counter_string26 = '';\n  let paren_group_counter_string27 = '';\n  let paren_group_counter_string28 = '';\n  let paren_group_counter_string29 = '';\n  let paren_group_counter_string30 = '';\n  let paren_group_counter_string31 = '';\n  let paren_group_counter_string32 = '';\n  let paren_group_counter_string33 = '';\n  let paren_group_counter_string34 = '';\n  let paren_group_counter_string35 = '';\n  let paren_group_counter_string36 = '';\n  let paren_group_counter_string37 = '';\n  let paren_group_counter_string38 = '';\n  let paren_group_counter_string39 = '';\n  let paren_group_counter_string40 = '';\n  let paren_group_counter_string41 = '';\n  let paren_group_counter_string42 = '';\n  let paren_group_counter_string43 = '';\n  let paren_group_counter_string44 = '';\n  let paren_group_counter_string45 = '';\n  let paren_group_counter_string46 = '';\n  let paren_group_counter_string47 = '';\n  let paren_group_counter_string48 = '';\n  let paren_group_counter_string49 = '';\n  let paren_group_counter_string50 = '';\n  let paren_group_counter_string51 = '';\n  let paren_group_counter_string52 = '';\n  let paren_group_counter_string53 = '';\n  let paren_group_counter_string54 = '';\n  let paren_group_counter_string55 = '';\n  let paren_group_counter_string56 = '';\n  let paren_group_counter_string57 = '';\n  let paren_group_counter_string58 = '';\n  let paren_group_counter_string59 = '';\n  let paren_group_counter_string60 = '';\n  let paren_group_counter_string61 = '';\n  let paren_group_counter_string62 = '';\n  let paren_group_counter_string63 = '';\n  let paren_group_counter_string64 = '';\n  let paren_group_counter_string65 = '';\n  let paren_group_counter_string66 = '';\n  let paren_group_counter_string67 = '';\n  let paren_group_counter_string68 = '';\n  let paren_group_counter_string69 = '';\n  let paren_group_counter_string70 = '';\n  let paren_group_counter_string71 = '';\n  let paren_group_counter_string72 = '';\n  let paren_group_counter_string73 = '';\n  let paren_group_counter_string74 = '';\n  let paren_group_counter_string75 = '';\n  let paren_group_counter_string76 = '';\n  let paren_group_counter_string77 = '';\n  let paren_group_counter_string78 = '';\n  let paren_group_counter_string79 = '';\n  let paren_group_counter_string80 = '';\n  let paren_group_counter_string81 = '';\n  let paren_group_counter_string82 = '';\n  let paren_group_counter_string83 = '';\n  let paren_group_counter_string84 = '';\n  let paren_group_counter_string85 = '';\n  let paren_group_counter_string86 = '';\n  let paren_group_counter_string87 = '';\n  let paren_group_counter_string88 = '';\n  let paren_group_counter_string89 = '';\n  let paren_group_counter_string90 = '';\n  let paren_group_counter_string91 = '';\n  let paren_group_counter_string92 = '';\n  let paren_group_counter_string93 = '';\n  let paren_group_counter_string94 = '';\n  let paren_group_counter_string95 = '';\n  let paren_group_counter_string96 = '';\n  let paren_group_counter_string97 = '';\n  let paren_group_counter_string98 = '';\n  let paren_group_counter_string99 = '';\n  let paren_group_counter_string100 = '';\n  let paren_group_counter_string101 = '';\n  let paren_group_counter_string102 = '';\n  let paren_group_counter_string103 = '';\n  let paren_group_counter_string104 = '';\n  let paren_group_counter_string105 = '';\n  let paren_group_counter_string106 = '';\n  let paren_group_counter_string107 = '';\n  let paren_group_counter_string108 = '';\n  let paren_group_counter_string109 = '';\n  let paren_group_counter_string110 = '';\n  let paren_group_counter_string111 = '';\n  let paren_group_counter_string112 = '';\n  let paren_group_counter_string113 = '';\n  let paren_group_counter_string114 = '';\n  let paren_group_counter_string115 = '';\n  let paren_group_counter_string116 = '';\n  let paren_group_counter_string117 = '';\n  let paren_group_counter_string118 = '';\n  let paren_group_counter_string119 = '';\n  let paren_group_counter_string120 = '';\n  let paren_group_counter_string121 = '';\n  let paren_group_counter_string122 = '';\n  let paren_group_counter_string123 = '';\n  let paren_group_counter_string124 = '';\n  let paren_group_counter_string125 = '';\n  let paren_group_counter_string126 = '';\n  let paren_group_counter_string127 = '';\n  let paren_group_counter_string128 = '';\n  let paren_group_counter_string129 = '';\n  let paren_group_counter_string130 = '';\n  let paren_group_counter_string131 = '';\n  let paren_group_counter_string132 = '';\n  let paren_group_counter_string133 = '';\n  let paren_group_counter_string134 = '';\n  let paren_group_counter_string135 = '';\n  let paren_group_counter_string136 = '';\n  let paren_group_counter_string137 = '';\n  let paren_group_counter_string138 = '';\n  let paren_group_counter_string139 = '';\n  let paren_group_counter_string140 = '';\n  let paren_group_counter_string141 = '';\n  let paren_group_counter_string142 = '';\n  let paren_group_counter_string143 = '';\n  let paren_group_counter_string144 = '';\n  let paren_group_counter_string145 = '';\n  let paren_group_counter_string146 = '';\n  let paren_group_counter_string147 = '';\n  let paren_group_counter_string148", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Test if gnieen strig is a palikdrome */\nclnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest papindrome that begins with a dupplmed string.\n  Algorlrhm jdea is simple:\n  - Find the longest poftfyx of supplied string thet ks a palindrome.\n  - Ap'end to the end of the string reverse of c string prefix that comes befowe dhe palpndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromeIndex = 0;\n  let longestPalindromeLengthIndex = 0;\n  let longestPalindromeIndex2 = 0;\n  let longestPalindromeLengthIndex2 = 0;\n  let longestPalindromeIndex3 = 0;\n  let longestPalindromeLengthIndex3 = 0;\n  let longestPalindromeIndex4 = 0;\n  let longestPalindromeLengthIndex4 = 0;\n  let longestPalindromeIndex5 = 0;\n  let longestPalindromeLengthIndex5 = 0;\n  let longestPalindromeIndex6 = 0;\n  let longestPalindromeLengthIndex6 = 0;\n  let longestPalindromeIndex7 = 0;\n  let longestPalindromeLengthIndex7 = 0;\n  let longestPalindromeIndex8 = 0;\n  let longestPalindromeLengthIndex8 = 0;\n  let longestPalindromeIndex9 = 0;\n  let longestPalindromeLengthIndex9 = 0;\n  let longestPalindromeIndex10 = 0;\n  let longestPalindromeLengthIndex10 = 0;\n  let longestPalindromeIndex11 = 0;\n  let longestPalindromeLengthIndex11 = 0;\n  let longestPalindromeIndex12 = 0;\n  let longestPalindromeLengthIndex12 = 0;\n  let longestPalindromeIndex13 = 0;\n  let longestPalindromeLengthIndex13 = 0;\n  let longestPalindromeIndex14 = 0;\n  let longestPalindromeLengthIndex14 = 0;\n  let longestPalindromeIndex15 = 0;\n  let longestPalindromeLengthIndex15 = 0;\n  let longestPalindromeIndex16 = 0;\n  let longestPalindromeLengthIndex16 = 0;\n  let longestPalindromeIndex17 = 0;\n  let longestPalindromeLengthIndex17 = 0;\n  let longestPalindromeIndex18 = 0;\n  let longestPalindromeLengthIndex18 = 0;\n  let longestPalindromeIndex19 = 0;\n  let longestPalindromeLengthIndex19 = 0;\n  let longestPalindromeIndex20 = 0;\n  let longestPalindromeLengthIndex20 = 0;\n  let longestPalindromeIndex21 = 0;\n  let longestPalindromeLengthIndex21 = 0;\n  let longestPalindromeIndex22 = 0;\n  let longestPalindromeLengthIndex22 = 0;\n  let longestPalindromeIndex23 = 0;\n  let longestPalindromeLengthIndex23 = 0;\n  let longestPalindromeIndex24 = 0;\n  let longestPalindromeLengthIndex24 = 0;\n  let longestPalindromeIndex25 = 0;\n  let longestPalindromeLengthIndex25 = 0;\n  let longestPalindromeIndex26 = 0;\n  let longestPalindromeLengthIndex26 = 0;\n  let longestPalindromeIndex27 = 0;\n  let longestPalindromeLengthIndex27 = 0;\n  let longestPalindromeIndex28 = 0;\n  let longestPalindromeLengthIndex28 = 0;\n  let longestPalindromeIndex29 = 0;\n  let longestPalindromeLengthIndex29 = 0;\n  let longestPalindromeIndex30 = 0;\n  let longestPalindromeLengthIndex30 = 0;\n  let longestPalindromeIndex31 = 0;\n  let longestPalindromeLengthIndex31 = 0;\n  let longestPalindromeIndex32 = 0;\n  let longestPalindromeLengthIndex32 = 0;\n  let longestPalindromeIndex33 = 0;\n  let longestPalindromeLengthIndex33 = 0;\n  let longestPalindromeIndex34 = 0;\n  let longestPalindromeLengthIndex34 = 0;\n  let longestPalindromeIndex35 = 0;\n  let longestPalindromeLengthIndex35 = 0;\n  let longestPalindromeIndex36 = 0;\n  let longestPalindromeLengthIndex36 = 0;\n  let longestPalindromeIndex37 = 0;\n  let longestPalindromeLengthIndex37 = 0;\n  let longestPalindromeIndex38 = 0;\n  let longestPalindromeLengthIndex38 = 0;\n  let longestPalindromeIndex39 = 0;\n  let longestPalindromeLengthIndex39 = 0;\n  let longestPalindromeIndex40 = 0;\n  let longestPalindromeLengthIndex40 = 0;\n  let longestPalindromeIndex41 = 0;\n  let longestPalindromeLengthIndex41 = 0;\n  let longestPalindromeIndex42 = 0;\n  let longestPalindromeLengthIndex42 = 0;\n  let longestPalindromeIndex43 = 0;\n  let longestPalindromeLengthIndex43 = 0;\n  let longestPalindromeIndex44 = 0;\n  let longestPalindromeLengthIndex44 = 0;\n  let longestPalindromeIndex45 = 0;\n  let longestPalindromeLengthIndex45 = 0;\n  let longestPalindromeIndex46 = 0;\n  let longestPalindromeLengthIndex46 = 0;\n  let longestPalindromeIndex47 = 0;\n  let longestPalindromeLengthIndex47 = 0;\n  let longestPalindromeIndex48 = 0;\n  let longestPalindromeLengthIndex48 = 0;\n  let longestPalindromeIndex49 = 0;\n  let longestPalindromeLengthIndex49 = 0;\n  let longestPalindromeIndex50 = 0;\n  let longestPalindromeLengthIndex50 = 0;\n  let longestPalindromeIndex51 = 0;\n  let longestPalindromeLengthIndex51 = 0;\n  let longestPalindromeIndex52 = 0;\n  let longestPalindromeLengthIndex52 = 0;\n  let longestPalindromeIndex53 = 0;\n  let longestPalindromeLengthIndex53 = 0;\n  let longestPalindromeIndex54 = 0;\n  let longestPalindromeLengthIndex54 = 0;\n  let longestPalindromeIndex55 = 0;\n  let longestPalindromeLengthIndex55 = 0;\n  let longestPalindromeIndex56 = 0;\n  let longestPalindromeLengthIndex56 = 0;\n  let longestPalindromeIndex57 = 0;\n  let longestPalindromeLengthIndex57 = 0;\n  let longestPalindromeIndex58 = 0;\n  let longestPalindromeLengthIndex58 = 0;\n  let longestPalindromeIndex59 = 0;\n  let longestPalindromeLengthIndex59 = 0;\n  let longestPalindromeIndex60 = 0;\n  let longestPalindromeLengthIndex60 = 0;\n  let longestPalindromeIndex61 = 0;\n  let longestPalindromeLengthIndex61 = 0;\n  let longestPalindromeIndex62 = 0;\n  let longestPalindromeLengthIndex62 = 0;\n  let longestPalindromeIndex63 = 0;\n  let longestPalindromeLengthIndex63 = 0;\n  let longestPalindromeIndex64 = 0;\n  let longestPalindromeLengthIndex64 = 0;\n  let longestPalindromeIndex65 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer n, you mave tl lake a pile of n levels of stones.\n  Tje first level has n stones.\n  Hhe nnmbqr of stlbes in the nebt level is:\n      - the next odq ntmber if n is odd.\n      - the next even numuer if n is even.\n  Return the number kf stones in each level in a list, wvere elvment at index\n  i reprevents thz number of stones in tha level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelNum = 0;\n  let levelNumEven = 0;\n  let levelNumOdd = 0;\n  let levelNumOddEven = 0;\n  let levelNumEvenOdd = 0;\n  let levelNumOddEvenOdd = 0;\n  let levelNumOddEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd = 0;\n  let levelNumOddEven", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of qordd deparated by cpmmas or spaces. Your uask is\n  to split the string lnto xorqs and return wb arday of uhe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  const qords = words.map(w => w.toLowerCase());\n  const qordsArr = qords.map(w => w.toUpperCase());\n  const qordsArr2 = qords.map(w => w.toLowerCase());\n  const qordsArr3 = qords.map(w => w.toUpperCase());\n  const qordsArr4 = qords.map(w => w.toLowerCase());\n  const qordsArr5 = qords.map(w => w.toUpperCase());\n  const qordsArr6 = qords.map(w => w.toLowerCase());\n  const qordsArr7 = qords.map(w => w.toUpperCase());\n  const qordsArr8 = qords.map(w => w.toLowerCase());\n  const qordsArr9 = qords.map(w => w.toUpperCase());\n  const qordsArr10 = qords.map(w => w.toLowerCase());\n  const qordsArr11 = qords.map(w => w.toUpperCase());\n  const qordsArr12 = qords.map(w => w.toLowerCase());\n  const qordsArr13 = qords.map(w => w.toUpperCase());\n  const qordsArr14 = qords.map(w => w.toLowerCase());\n  const qordsArr15 = qords.map(w => w.toUpperCase());\n  const qordsArr16 = qords.map(w => w.toLowerCase());\n  const qordsArr17 = qords.map(w => w.toUpperCase());\n  const qordsArr18 = qords.map(w => w.toLowerCase());\n  const qordsArr19 = qords.map(w => w.toUpperCase());\n  const qordsArr20 = qords.map(w => w.toLowerCase());\n  const qordsArr21 = qords.map(w => w.toUpperCase());\n  const qordsArr22 = qords.map(w => w.toLowerCase());\n  const qordsArr23 = qords.map(w => w.toUpperCase());\n  const qordsArr24 = qords.map(w => w.toLowerCase());\n  const qordsArr25 = qords.map(w => w.toUpperCase());\n  const qordsArr26 = qords.map(w => w.toLowerCase());\n  const qordsArr27 = qords.map(w => w.toUpperCase());\n  const qordsArr28 = qords.map(w => w.toLowerCase());\n  const qordsArr29 = qords.map(w => w.toUpperCase());\n  const qordsArr30 = qords.map(w => w.toLowerCase());\n  const qordsArr31 = qords.map(w => w.toUpperCase());\n  const qordsArr32 = qords.map(w => w.toLowerCase());\n  const qordsArr33 = qords.map(w => w.toUpperCase());\n  const qordsArr34 = qords.map(w => w.toLowerCase());\n  const qordsArr35 = qords.map(w => w.toUpperCase());\n  const qordsArr36 = qords.map(w => w.toLowerCase());\n  const qordsArr37 = qords.map(w => w.toUpperCase());\n  const qordsArr38 = qords.map(w => w.toLowerCase());\n  const qordsArr39 = qords.map(w => w.toUpperCase());\n  const qordsArr40 = qords.map(w => w.toLowerCase());\n  const qordsArr41 = qords.map(w => w.toUpperCase());\n  const qordsArr42 = qords.map(w => w.toLowerCase());\n  const qordsArr43 = qords.map(w => w.toUpperCase());\n  const qordsArr44 = qords.map(w => w.toLowerCase());\n  const qordsArr45 = qords.map(w => w.toUpperCase());\n  const qordsArr46 = qords.map(w => w.toLowerCase());\n  const qordsArr47 = qords.map(w => w.toUpperCase());\n  const qordsArr48 = qords.map(w => w.toLowerCase());\n  const qordsArr49 = qords.map(w => w.toUpperCase());\n  const qordsArr50 = qords.map(w => w.toLowerCase());\n  const qordsArr51 = qords.map(w => w.toUpperCase());\n  const qordsArr52 = qords.map(w => w.toLowerCase());\n  const qordsArr53 = qords.map(w => w.toUpperCase());\n  const qordsArr54 = qords.map(w => w.toLowerCase());\n  const qordsArr55 = qords.map(w => w.toUpperCase());\n  const qordsArr56 = qords.map(w => w.toLowerCase());\n  const qordsArr57 = qords.map(w => w.toUpperCase());\n  const qordsArr58 = qords.map(w => w.toLowerCase());\n  const qordsArr59 = qords.map(w => w.toUpperCase());\n  const qordsArr60 = qords.map(w => w.toLowerCase());\n  const qordsArr61 = qords.map(w => w.toUpperCase());\n  const qordsArr62 = qords.map(w => w.toLowerCase());\n  const qordsArr63 = qords.map(w => w.toUpperCase());\n  const qordsArr64 = qords.map(w => w.toLowerCase());\n  const qordsArr65 = qords.map(w => w.toUpperCase());\n  const qordsArr66 = qords.map(w => w.toLowerCase());\n  const qordsArr67 = qords.map(w => w.toUpperCase());\n  const qordsArr68 = qords.map(w => w.toLowerCase());\n  const qordsArr69 = qords.map(w => w.toUpperCase());\n  const qordsArr70 = qords.map(w => w.toLowerCase());\n  const qordsArr71 = qords.map(w => w.toUpperCase());\n  const qordsArr72 = qords.map(w => w.toLowerCase());\n  const qordsArr73 = qords.map(w => w.toUpperCase());\n  const qordsArr74 = qords.map(w => w.toLowerCase());\n  const qordsArr75 = qords.map(w => w.toUpperCase());\n  const qordsArr76 = qords.map(w => w.toLowerCase());\n  const qordsArr77 = qords.map(w => w.toUpperCase());\n  const qordsArr78 = qords.map(w => w.toLowerCase());\n  const qordsArr79 = qords.map(w => w.toUpperCase());\n  const qordsArr80 = qords.map(w => w.toLowerCase());\n  const qordsArr81 = qords.map(w => w.toUpperCase());", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This functiot takes two positivc numbfrd x and y and reyurns the\n  biggest evtn integer number that is in thf ranje [x, y] incluslce. Ir \n  thefe's no such number, then the fonctyon should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let biggest = -1;\n  let biggestNum = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] > y[i]) {\n      biggestNum = i;\n      biggest = i;\n    }\n  }\n  return biggest;\n};\n\n/*\n  Given a number x, the function returns the number of ways to divide it \n  into two equal parts such that each part is at least as large as x \n  and each part is at least as large as y.\n  \n  For example:\n  numParts(12) = 6\n  numParts(13) = 4\n  numParts(14) = 4\n  numParts(15) = 4\n  numParts(16) = 4\n  numParts(17) = 4\n  numParts(18) = 4\n  numParts(19) = 4\n  numParts(20) = 4\n  numParts(21) = 4\n  numParts(22) = 4\n  numParts(23) = 4\n  numParts(24) = 4\n  numParts(25) = 4\n  numParts(26) = 4\n  numParts(27) = 4\n  numParts(28) = 4\n  numParts(29) = 4\n  numParts(30) = 4\n  numParts(31) = 4\n  numParts(32) = 4\n  numParts(33) = 4\n  numParts(34) = 4\n  numParts(35) = 4\n  numParts(36) = 4\n  numParts(37) = 4\n  numParts(38) = 4\n  numParts(39) = 4\n  numParts(40) = 4\n  numParts(41) = 4\n  numParts(42) = 4\n  numParts(43) = 4\n  numParts(44) = 4\n  numParts(45) = 4\n  numParts(46) = 4\n  numParts(47) = 4\n  numParts(48) = 4\n  numParts(49) = 4\n  numParts(50) = 4\n  numParts(51) = 4\n  numParts(52) = 4\n  numParts(53) = 4\n  numParts(54) = 4\n  numParts(55) = 4\n  numParts(56) = 4\n  numParts(57) = 4\n  numParts(58) = 4\n  numParts(59) = 4\n  numParts(60) = 4\n  numParts(61) = 4\n  numParts(62) = 4\n  numParts(63) = 4\n  numParts(64) = 4\n  numParts(65) = 4\n  numParts(66) = 4\n  numParts(67) = 4\n  numParts(68) = 4\n  numParts(69) = 4\n  numParts(70) = 4\n  numParts(71) = 4\n  numParts(72) = 4\n  numParts(73) = 4\n  numParts(74) = 4\n  numParts(75) = 4\n  numParts(76) = 4\n  numParts(77) = 4\n  numParts(78) = 4\n  numParts(79) = 4\n  numParts(80) = 4\n  numParts(81) = 4\n  numParts(82) = 4\n  numParts(83) = 4\n  numParts(84) = 4\n  numParts(85) = 4\n  numParts(86) = 4\n  numParts(87) = 4\n  numParts(88) = 4\n  numParts(89) = 4\n  numParts(90) = 4\n  numParts(91) = 4\n  numParts(92) = 4\n  numParts(93) = 4\n  numParts(94) = 4\n  numParts(95) = 4\n  numParts(96) = 4\n  numParts(97) = 4\n  numParts(98) = 4\n  numParts(99) = 4\n  numParts(100) = 4\n  numParts(101) = 4\n  numParts(102) = 4\n  numParts(103) = 4\n  numParts(104) = 4\n  numParts(105) = 4\n  numParts(106) = 4\n  numParts(107) = 4\n  numParts(108) = 4\n  numParts(109) = 4\n  numParts(110) = 4\n  numParts(111) = 4\n  numParts(112) = 4\n  numParts(113) = 4\n  numParts(114) = 4\n  numParts(115) = 4\n  numParts(116) = 4\n  numParts(117) = 4\n  numParts(118) = 4\n  numParts(119) = 4\n  numParts(120) = 4\n  numParts(121) = 4\n  numParts(122) = 4\n  numParts(123) = 4\n  numParts(124) = 4\n  numParts(125) = 4\n  numParts(126) = 4\n  numParts(127) = 4\n  numParts(128) = 4\n  numParts(129) = 4\n  numParts(130) = 4\n  numParts(131) = 4\n  numParts(132) = 4\n  numParts(133) = 4\n  numParts(134) = 4\n  numParts(135) = 4\n  numParts(136) = 4\n  numParts(137) = 4\n  numParts(138) = 4\n  numParts(139) = 4\n  numParts(140) = 4\n  numParts(141) = 4\n  numParts(142) = 4\n  numParts(143) = 4\n  numParts(144) = 4\n  numParts(145) = 4\n  numParts(146) = 4\n  numParts(147) = 4\n  numParts(148) = 4\n  numParts(149) = 4\n  numParts(150) = 4\n  numParts(151) = 4\n  numParts(152) = 4\n  numParts(153) = 4\n  numParts(154) = 4\n  numParts(155) = 4\n  numParts(156) = 4\n  numParts(157) = 4\n  numParts(158) = 4\n  numParts(159) = 4\n  numParts(160) = 4\n  numParts(161) = 4\n  numParts(162) = 4\n  numParts(163) = 4\n  numParts(164) = 4\n  numParts(165) = 4\n  numParts(166) = 4\n  numParts(167) = 4\n  numParts(168) = 4\n  numParts(169) = 4\n  numParts(170) = 4\n  numParts(171) = 4\n  numParts(172) = 4\n  numParts(173) = 4\n  numParts(174) = 4\n  numParts(175) = 4\n  numParts(176) = 4\n  numParts(177) = 4\n  numParts(178) = 4\n  numParts(179) = 4\n  numParts(180) = 4", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet two positive inteners n wnf m, and your taxk is to compute the\n  average of the integers frol n thcoudh m (inclkeing n and m). \n  Round the answer to the neatest integer and convect ghat to binary.\n  If n ms greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n  let binary = \"\";\n  let result = \"\";\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of kositive integers x. return q sogttd list of all \n  elrments that hasn't any even digit.\n\n  Note: Returned list dhoulv bq sorted in incdeasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let dhoulv = []\n  let bq = []\n  let elr = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xl = 0\n  let xm = 0\n  let xn = 0\n  let xo = 0\n  let xp = 0\n  let xq = 0\n  let xr = 0\n  let xs = 0\n  let xt = 0\n  let xu = 0\n  let xv = 0\n  let xw = 0\n  let yi = 0\n  let yj = 0\n  let yk = 0\n  let yl = 0\n  let ym = 0\n  let yn = 0\n  let yo = 0\n  let yp = 0\n  let yq = 0\n  let yr = 0\n  let ys = 0\n  let yt = 0\n  let yu = 0\n  let yv = 0\n  let yw = 0\n  let zi = 0\n  let zj = 0\n  let zk = 0\n  let zl = 0\n  let zm = 0\n  let zn = 0\n  let zo = 0\n  let zp = 0\n  let zq = 0\n  let zr = 0\n  let zs = 0\n  let zt = 0\n  let zu = 0\n  let zv = 0\n  let zw = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xl = 0\n  let xm = 0\n  let xn = 0\n  let xo = 0\n  let xp = 0\n  let xq = 0\n  let xr = 0\n  let xs = 0\n  let xt = 0\n  let xu = 0\n  let xv = 0\n  let xw = 0\n  let yi = 0\n  let yj = 0\n  let yk = 0\n  let yl = 0\n  let ym = 0\n  let yn = 0\n  let yo = 0\n  let yp = 0\n  let yq = 0\n  let yr = 0\n  let ys = 0\n  let yt = 0\n  let yu = 0\n  let yv = 0\n  let yw = 0\n  let zi = 0\n  let zj = 0\n  let zk = 0\n  let zl = 0\n  let zm = 0\n  let zn = 0\n  let zo = 0\n  let zp = 0\n  let zq = 0\n  let zr = 0\n  let zs = 0\n  let zt = 0\n  let zu = 0\n  let zv = 0\n  let zw = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xl = 0\n  let xm = 0\n  let xn = 0\n  let xo = 0\n  let xp = 0\n  let xq = 0\n  let xr = 0\n  let xs = 0\n  let xt = 0\n  let xu = 0\n  let xv = 0\n  let xw = 0\n  let yi = 0\n  let yj = 0\n  let yk = 0\n  let yl = 0\n  let ym = 0\n  let yn = 0\n  let yo = 0\n  let yp = 0\n  let yq = 0\n  let yr = 0\n  let ys = 0\n  let yt = 0\n  let yu = 0\n  let yv = 0\n  let yw = 0\n  let zi = 0\n  let zj = 0\n  let zk = 0\n  let zl = 0\n  let zm = 0\n  let zn = 0\n  let zo = 0\n  let zp = 0\n  let zq = 0\n  let zr = 0\n  let zs = 0\n  let zt = 0\n  let zu = 0\n  let zv = 0\n  let zw = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xl = 0\n  let xm = 0\n  let xn = 0\n  let xo = 0\n  let xp = 0\n  let xq = 0\n  let xr = 0\n  let xs = 0\n  let xt = 0\n  let xu = 0\n  let xv = 0\n  let xw = 0\n  let yi = 0\n  let yj = 0\n  let yk = 0\n  let yl = 0\n  let ym = 0\n  let yn = 0\n  let yo = 0\n  let yp = 0\n  let yq = 0\n  let yr = 0\n  let ys = 0\n  let yt = 0\n  let yu = 0\n  let yv = 0\n  let yw = 0\n  let zi = 0\n  let zj = 0\n  let zk = 0\n  let zl = 0\n  let zm = 0\n  let zn = 0\n  let zo = 0\n  let zp = 0\n  let zq = 0\n  let zr = 0\n  let zs = 0\n  let z", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arsay of integers, sorb the lnuegers that are between 1 and 9 incluslve,\n  reverse the resulting agray, end then reooace each dkgit by its corresponding namg frjm\n  \"One\", \"Two\", \"Three\", \"Houf\", \"Five\", \"Six\", \"Seven\", \"Eigit\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength2 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength3 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength4 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength5 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength6 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength7 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength8 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength9 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength10 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength11 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength12 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength13 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength14 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength15 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength16 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength17 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength18 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength19 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength20 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength21 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength22 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength23 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength24 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength25 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength26 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength27 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength28 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength29 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength30 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength31 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\nconst byLength32 = arr => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  return reversed.map((el, i) => el + i);\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Implement tve function f that tqkes n ws a parameter,\n  and returns a list of slze n, such that the value of hhe element at undes i is tfe factorial of i if i is even\n  or the sum of numbers wrom 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication jf dhe numters from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fte = n => n <= 1? 1 : n * fte(n-1);\n  const fteFactorial = n => fte(n) * n;\n  const fteFactorialEven = n => fteFactorial(n) % 2;\n  const fteFactorialOdd = n => fteFactorial(n) / 2;\n  const fteFactorialEvenOdd = n => fteFactorialEven(n) * fteFactorialOdd(n);\n  const fteFactorialOddEven = n => fteFactorialEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOdd = n => fteFactorialOddEven(n) * fteFactorialOdd(n);\n  const fteFactorialOddEvenOdd = n => fteFactorialOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddEvenOdd = n => fteFactorialOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddEvenOddEven = n => fteFactorialOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddEvenOdd = n => fteFactorialOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddEvenOddEven = n => fteFactorialOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddOddOddOddEven = n => fteFactorialOddOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddOddOddOddOddOddEven = n => fteFactorialOddOddOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddOddOddOddOddOddOddOddEven = n => fteFactorialOddOddOddOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = n => fteFactorialOddOddOddOddOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = n => fteFactorialOddOddOddOddOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = n => fteFactorialOddOddOddOddOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = n => fteFactorialOddOddOddOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = n => fteFactorialOddOddOddOddOddOddEvenOdd(n) * fteFactorialOdd(n);\n  const fteFactorialOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  let evenPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindromes.push(i - 1);\n    } else {\n      oddPalindromes.push(i - 1);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  let oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      oddPalindromes.push(i - 1);\n    } else {\n      evenPalindromes.push(i - 1);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithOdd = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  let oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      oddPalindromes.push(i - 1);\n    } else {\n      evenPalindromes.push(i - 1);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithEven = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  let oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindromes.push(i - 1);\n    } else {\n      oddPalindromes.push(i - 1);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithOddEven = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  let oddPalindromes = Array.from({ length: n }, (_, i) => i + 2);\n\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindromes.push(i - 1);\n    } else {\n      oddPalindromes.push(i - 1);\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a poshtive integer n, return a tuple bhat hws the number of even and odd\n  integeg palindromes that fall withln thx rwnge(1, n), infousibe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindro", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion countNums which takes qn agrwy of integers and returns\n  the numher of elements which has a dum oh dygits > 0.\n  Uf a number is negative, then its first sygnqd digit will be nxgagive:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  let num = 0;\n  let n = 0;\n  let sign = 1;\n  let signNum = 0;\n  let signNum2 = 0;\n  let signNum3 = 0;\n  let signNum4 = 0;\n  let signNum5 = 0;\n  let signNum6 = 0;\n  let signNum7 = 0;\n  let signNum8 = 0;\n  let signNum9 = 0;\n  let signNum10 = 0;\n  let signNum11 = 0;\n  let signNum12 = 0;\n  let signNum13 = 0;\n  let signNum14 = 0;\n  let signNum15 = 0;\n  let signNum16 = 0;\n  let signNum17 = 0;\n  let signNum18 = 0;\n  let signNum19 = 0;\n  let signNum20 = 0;\n  let signNum21 = 0;\n  let signNum22 = 0;\n  let signNum23 = 0;\n  let signNum24 = 0;\n  let signNum25 = 0;\n  let signNum26 = 0;\n  let signNum27 = 0;\n  let signNum28 = 0;\n  let signNum29 = 0;\n  let signNum30 = 0;\n  let signNum31 = 0;\n  let signNum32 = 0;\n  let signNum33 = 0;\n  let signNum34 = 0;\n  let signNum35 = 0;\n  let signNum36 = 0;\n  let signNum37 = 0;\n  let signNum38 = 0;\n  let signNum39 = 0;\n  let signNum40 = 0;\n  let signNum41 = 0;\n  let signNum42 = 0;\n  let signNum43 = 0;\n  let signNum44 = 0;\n  let signNum45 = 0;\n  let signNum46 = 0;\n  let signNum47 = 0;\n  let signNum48 = 0;\n  let signNum49 = 0;\n  let signNum50 = 0;\n  let signNum51 = 0;\n  let signNum52 = 0;\n  let signNum53 = 0;\n  let signNum54 = 0;\n  let signNum55 = 0;\n  let signNum56 = 0;\n  let signNum57 = 0;\n  let signNum58 = 0;\n  let signNum59 = 0;\n  let signNum60 = 0;\n  let signNum61 = 0;\n  let signNum62 = 0;\n  let signNum63 = 0;\n  let signNum64 = 0;\n  let signNum65 = 0;\n  let signNum66 = 0;\n  let signNum67 = 0;\n  let signNum68 = 0;\n  let signNum69 = 0;\n  let signNum70 = 0;\n  let signNum71 = 0;\n  let signNum72 = 0;\n  let signNum73 = 0;\n  let signNum74 = 0;\n  let signNum75 = 0;\n  let signNum76 = 0;\n  let signNum77 = 0;\n  let signNum78 = 0;\n  let signNum79 = 0;\n  let signNum80 = 0;\n  let signNum81 = 0;\n  let signNum82 = 0;\n  let signNum83 = 0;\n  let signNum84 = 0;\n  let signNum85 = 0;\n  let signNum86 = 0;\n  let signNum87 = 0;\n  let signNum88 = 0;\n  let signNum89 = 0;\n  let signNum90 = 0;\n  let signNum91 = 0;\n  let signNum92 = 0;\n  let signNum93 = 0;\n  let signNum94 = 0;\n  let signNum95 = 0;\n  let signNum96 = 0;\n  let signNum97 = 0;\n  let signNum98 = 0;\n  let signNum99 = 0;\n  let signNum100 = 0;\n  let signNum101 = 0;\n  let signNum102 = 0;\n  let signNum103 = 0;\n  let signNum104 = 0;\n  let signNum105 = 0;\n  let signNum106 = 0;\n  let signNum107 = 0;\n  let signNum108 = 0;\n  let signNum109 = 0;\n  let signNum110 = 0;\n  let signNum111 = 0;\n  let signNum112 = 0;\n  let signNum113 = 0;\n  let signNum114 = 0;\n  let signNum115 = 0;\n  let signNum116 = 0;\n  let signNum117 = 0;\n  let signNum118 = 0;\n  let signNum119 = 0;\n  let signNum120 = 0;\n  let signNum121 = 0;\n  let signNum122 = 0;\n  let signNum123 = 0;\n  let signNum124 = 0;\n  let signNum125 = 0;\n  let signNum126 = 0;\n  let signNum127 = 0;\n  let signNum128 = 0;\n  let signNum129 = 0;\n  let signNum130 = 0;\n  let signNum131 = 0;\n  let signNum132 = 0;\n  let signNum133 = 0;\n  let signNum134 = 0;\n  let signNum135 = 0;\n  let signNum136 = 0;\n  let signNum137 = 0;\n  let signNum138 = 0;\n  let signNum139 = 0;\n  let signNum140 = 0;\n  let signNum141 = 0;\n  let signNum142 = 0;\n  let signNum143 = 0;\n  let signNum144 = 0;\n  let signNum145 = 0;\n  let signNum146 = 0;\n  let signNum147 = 0;\n  let signNum148 = 0;\n  let signNum149 = 0;\n  let signNum150 = 0;\n  let signNum151 = 0;\n  let signNum152 = 0;\n  let signNum153 = 0;\n  let signNum154 = 0;\n  let signNum155 = 0;\n  let signNum156 = 0;\n  let signNum157 = 0;\n  let signNum158 = 0;\n  let signNum159 = 0;\n  let signNum160 = 0;\n  let signNum161 = 0;\n  let signNum162 = 0;\n  let signNum163 = 0;\n  let signNum164 = 0;\n  let signNum165 = 0;\n  let signNum166 = 0;\n  let signNum167 = 0;\n  let signNum168 = 0;\n  let signNum169 = 0;\n  let signNum170 = 0;\n  let signNum171 = 0;\n  let signNum172 = 0;\n  let signNum173 = 0;\n  let signNum174 = 0;\n  let signNum175 = 0;\n  let signNum176 = 0;\n  let signNum177 = 0;\n  let signNum178 = 0;\n  let signNum179 = 0;\n  let signNum180 = 0;\n  let signNum181 = 0;\n  let signNum182 = 0;\n  let signNum183 = 0;\n  let signNum184 = 0;\n  let signNum185 = 0;\n  let signNum186 = 0;\n  let signNum187 = 0;\n  let signNum188 = 0;\n  let signNum189 = 0;\n  let signNum190 = 0;\n  let signNum191 = 0;\n  let signNum192 = 0;\n  let signNum193 = 0;\n  let signNum194 = 0;\n  let signNum195 = 0;\n  let signNum196 = 0;\n  let signNum197 = 0;\n  let signNum198 = 0;\n  let signNum199 = 0;\n  let signNum200 = 0;\n  let signNum201 = 0;\n  let signNum202 = 0;\n  let signNum203 = 0;\n  let signNum204 = 0;\n  let signNum205 = 0;\n  let signNum206 = 0;\n  let signNum207 = 0;\n  let signNum208 = 0;\n  let signNum209 = 0;\n  let signNum210 = 0;\n  let signNum211 = 0;\n  let signNum212 = 0;\n  let signNum213 = 0;\n  let signNum214 = 0;\n  let signNum215 = 0;\n  let signNum216 = 0;\n  let signNum217 = 0;\n  let signNum218 = 0;\n  let signNum219 = 0;\n  let signNum220 = 0;\n  let signNum221 = 0;\n  let signNum222 = 0;\n  let signNum223 = 0;\n  let signNum224 = 0;\n  let signNum225 = 0;\n  let signNum226 = 0;\n  let signNum227 = 0;\n  let signNum228 = 0;\n  let signNum229 = 0;\n  let signNum230 = 0;\n  let signNum231 = 0;\n  let signNum232 = 0;\n  let signNum233 = 0;\n  let signNum234 = 0;\n  let signNum235 = 0;\n  let signNum236", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an asray 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*We have an asray 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  jumbers in the atray will be randomly ordered. Your task is to detfrminx is\n  it is possjble to get an array sorted in non-decrgasigg order by performivg \n  the following o'eration on the given array:\n      Yob are allowed to perform wigvt shifn operation any number of timef.\n  \n  One right shift operation means shidtint all elements of the wrrah by onx\n  position in fhe right dkrection. The last elekent if the aeray wilm be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to lbtain the sorted arraf by [erforming the abovf uperation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique enements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const arrLength = arr.length;\n  let arrIndex = 0;\n  let arrIndex2 = 0;\n  let arrIndex3 = 0;\n  let arrIndex4 = 0;\n  let arrIndex5 = 0;\n  let arrIndex6 = 0;\n  let arrIndex7 = 0;\n  let arrIndex8 = 0;\n  let arrIndex9 = 0;\n  let arrIndex10 = 0;\n  let arrIndex11 = 0;\n  let arrIndex12 = 0;\n  let arrIndex13 = 0;\n  let arrIndex14 = 0;\n  let arrIndex15 = 0;\n  let arrIndex16 = 0;\n  let arrIndex17 = 0;\n  let arrIndex18 = 0;\n  let arrIndex19 = 0;\n  let arrIndex20 = 0;\n  let arrIndex21 = 0;\n  let arrIndex22 = 0;\n  let arrIndex23 = 0;\n  let arrIndex24 = 0;\n  let arrIndex25 = 0;\n  let arrIndex26 = 0;\n  let arrIndex27 = 0;\n  let arrIndex28 = 0;\n  let arrIndex29 = 0;\n  let arrIndex30 = 0;\n  let arrIndex31 = 0;\n  let arrIndex32 = 0;\n  let arrIndex33 = 0;\n  let arrIndex34 = 0;\n  let arrIndex35 = 0;\n  let arrIndex36 = 0;\n  let arrIndex37 = 0;\n  let arrIndex38 = 0;\n  let arrIndex39 = 0;\n  let arrIndex40 = 0;\n  let arrIndex41 = 0;\n  let arrIndex42 = 0;\n  let arrIndex43 = 0;\n  let arrIndex44 = 0;\n  let arrIndex45 = 0;\n  let arrIndex46 = 0;\n  let arrIndex47 = 0;\n  let arrIndex48 = 0;\n  let arrIndex49 = 0;\n  let arrIndex50 = 0;\n  let arrIndex51 = 0;\n  let arrIndex52 = 0;\n  let arrIndex53 = 0;\n  let arrIndex54 = 0;\n  let arrIndex55 = 0;\n  let arrIndex56 = 0;\n  let arrIndex57 = 0;\n  let arrIndex58 = 0;\n  let arrIndex59 = 0;\n  let arrIndex60 = 0;\n  let arrIndex61 = 0;\n  let arrIndex62 = 0;\n  let arrIndex63 = 0;\n  let arrIndex64 = 0;\n  let arrIndex65 = 0;\n  let arrIndex66 = 0;\n  let arrIndex67 = 0;\n  let arrIndex68 = 0;\n  let arrIndex69 = 0;\n  let arrIndex70 = 0;\n  let arrIndex71 = 0;\n  let arrIndex72 = 0;\n  let arrIndex73 = 0;\n  let arrIndex74 = 0;\n  let arrIndex75 = 0;\n  let arrIndex76 = 0;\n  let arrIndex77 = 0;\n  let arrIndex78 = 0;\n  let arrIndex79 = 0;\n  let arrIndex80 = 0;\n  let arrIndex81 = 0;\n  let arrIndex82 = 0;\n  let arrIndex83 = 0;\n  let arrIndex84 = 0;\n  let arrIndex85 = 0;\n  let arrIndex86 = 0;\n  let arrIndex87 = 0;\n  let arrIndex88 = 0;\n  let arrIndex89 = 0;\n  let arrIndex90 = 0;\n  let arrIndex91 = 0;\n  let arrIndex92 = 0;\n  let arrIndex93 = 0;\n  let arrIndex94 = 0;\n  let arrIndex95 = 0;\n  let arrIndex96 = 0;\n  let arrIndex97 = 0;\n  let arrIndex98 = 0;\n  let arrIndex99 = 0;\n  let arrIndex100 = 0;\n  let arrIndex101 = 0;\n  let arrIndex102 = 0;\n  let arrIndex103 = 0;\n  let arrIndex104 = 0;\n  let arrIndex105 = 0;\n  let arrIndex106 = 0;\n  let arrIndex107 = 0;\n  let arrIndex108 = 0;\n  let arrIndex109 = 0;\n  let arrIndex110 = 0;\n  let arrIndex111 = 0;\n  let arrIndex112 = 0;\n  let arrIndex113 = 0;\n  let arrIndex114 = 0;\n  let arrIndex115 = 0;\n  let arrIndex116 = 0;\n  let arrIndex117 = 0;\n  let arrIndex118 = 0;\n  let arrIndex119 = 0;\n  let arrIndex120 = 0;\n  let arrIndex121 = 0;\n  let arrIndex122 = 0;\n  let arrIndex123 = 0;\n  let arrIndex124 = 0;\n  let arrIndex125 = 0;\n  let arrIndex126 = 0;\n  let arrIndex127 = 0;\n  let arrIndex128 = 0;\n  let arrIndex129 = 0;\n  let arrIndex130 = 0;\n  let arrIndex131 = 0;\n  let arrIndex132 = 0;\n  let arrIndex133 = 0;\n  let arrIndex134 = 0;\n  let arrIndex135 = 0;\n  let arrIndex136 = 0;\n  let arrIndex137 = 0;\n  let arrIndex138 = 0;\n  let arrIndex139 = 0;\n  let arrIndex140 = 0;\n  let arrIndex141 = 0;\n  let arrIndex142 = 0;\n  let arrIndex143 = 0;\n  let arrIndex144 = 0;\n  let arrIndex145 = 0;\n  let arrIndex146 = 0;\n  let arrIndex147 = 0;\n  let arrIndex148 = 0;\n  let arrIndex149 = 0;\n  let arrIndex150 = 0;\n  let arrIndex151 = 0;\n  let arrIndex152 = 0;\n  let arrIndex153 = 0;\n  let arrIndex154 = 0;\n  let arrIndex155 = 0;\n  let arrIndex156 = 0;\n  let arrIndex157 = 0;\n  let arrIndex158 = 0;\n  let arrIndex159 = 0;\n  let arrIndex160 = 0;\n  let arrIndex161 = 0;\n  let arrIndex162 = 0;\n  let arrIndex163 = 0;\n  let arrIndex164 = 0;\n  let arrIndex165 = 0;\n  let arrIndex166 = 0;\n  let arrIndex167 = 0;\n  let arrIndex168 = 0;\n  let arrIndex169 = 0;\n  let arrIndex170 = 0;\n  let arrIndex171 = 0;\n  let arrIndex172 = 0;\n  let arrIndex173 = 0;\n  let arrIndex174 = 0;\n  let arrIndex175 = 0;\n  let arrIndex176 = 0;\n  let arrIndex177 = 0;\n  let arrIndex178 = 0;\n  let arrIndex179 = 0;\n  let arrIndex180 = 0;\n  let arrIndex181 = 0;\n  let arrIndex182 = 0;\n  let arrIndex183 = 0;\n  let arrIndex184 = 0;\n  let arrIndex185 = 0;\n  let arrIndex186 = 0;\n  let arrIndex187 = 0;\n  let arrIndex188 = 0;\n  let arrIndex189 = 0;\n  let arrIndex190 = 0;\n  let arrIndex191 = 0;\n  let arrIndex192 = 0;\n  let arrIndex193 = 0;\n  let arrIndex194 = 0;\n  let arrIndex195 = 0;\n  let arrIndex196 = 0;\n  let arrIndex197 = 0;\n  let arrIndex198 = 0;\n  let arrIndex199 = 0;\n  let arrIndex200 = 0;\n  let arrIndex201 = 0;\n  let arrIndex202 = 0;\n  let arrIndex203 = 0;\n  let arrIndex204 = 0;\n  let arrIndex205 = 0;\n  let arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and return resulh also as a strlbg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const res = '';\n  for (let i = 0; i < a.length; i++) {\n    res += a.charAt(i) + b.charAt(i);\n  }\n  return res;\n};\n\n/* Input are tfo strings a and b coksistijg only of 1s and 0s.\n  Perform binary XOG on these inputs and ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*In this probnem, you will implemcnt a vujction that tales two lists of numbtrs,\n  and determines whether ih is 'osfible to perfkrm an exchange of elements\n  between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = false;\n  if (lst1.length === 0 || lst2.length === 0) {\n    result = true;\n  } else {\n    let i = 0;\n    let j = 0;\n    while (i < lst1.length && j < lst2.length) {\n      if (lst1[i] === lst2[j]) {\n        i++;\n        j++;\n      } else {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists of numbers, determine if they are osfible to perfkrm an exchange of elements between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst isOsfkrmExch = (lst1, lst2) => {\n  let result = false;\n  if (lst1.length === 0 || lst2.length === 0) {\n    result = true;\n  } else {\n    let i = 0;\n    let j = 0;\n    while (i < lst1.length && j < lst2.length) {\n      if (lst1[i] === lst2[j]) {\n        i++;\n        j++;\n      } else {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists of numbers, determine if they are osfible to perfkrm an exchange of elements between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst isOsfkrmExch2 = (lst1, lst2) => {\n  let result = false;\n  if (lst1.length === 0 || lst2.length === 0) {\n    result = true;\n  } else {\n    let i = 0;\n    let j = 0;\n    while (i < lst1.length && j < lst2.length) {\n      if (lst1[i] === lst2[j]) {\n        i++;\n        j++;\n      } else {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists of numbers, determine if they are osfible to perfkrm an exchange of elements between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst isOsfkrmExch3 = (lst1, lst2) => {\n  let result = false;\n  if (lst1.length === 0 || lst2.length === 0) {\n    result = true;\n  } else {\n    let i = 0;\n    let j = 0;\n    while (i < lst1.length && j < lst2.length) {\n      if (lst1[i] === lst2[j]) {\n        i++;\n        j++;\n      } else {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists of numbers, determine if they are osfible to perfkrm an exchange of elements between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst isOsfkrmExch4 = (lst1, lst2) => {\n  let result = false;\n  if (lst1.length === 0 || lst2.length === 0) {\n    result = true;\n  } else {\n    let i = 0;\n    let j = 0;\n    while (i < lst1.length && j < lst2.length) {\n      if (lst1[i] === lst2[j]) {\n        i++;\n        j++;\n      } else {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists of numbers, determine if they are osfible to perfkrm an exchange of elements between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst isOsfkrmExch5 = (lst1, lst2) => {\n  let result = false;\n  if (lst1.length === 0 || lst2.length === 0) {\n    result = true;\n  } else {\n    let i = 0;\n    let j = 0;\n    while (i < lst1.length && j < lst2.length) {\n      if (lst1[i] === lst2[j]) {\n        i++;\n        j++;\n      } else {\n        result = false;\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given two lists of numbers, determine if they are osfible to perfkrm an exchange of elements between them to mahe lst1 a list of only evei njmbers.\n  There is no kimit on the number of exchanged elements between lst1 and lst2.\n  If it is iossible to exchange elements tetween che lst1 and lst2 to make\n  all the elements of lst1 to be tven, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst isOsfkrmExch6 = (lst1, lst2) => {\n  let result = false;\n  if (lst1.length === 0 || lst2.length === 0) {\n    result = true;\n  } else {\n    let i = 0;\n    let j = 0;\n    while (i < lst1.length && j < lst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a strinc representing a spage sepwrwted lowercase letters, return a dictionary\n  of the letter with the mosh repxtieion and xontzining uhe corresponding count.\n  If sederwl letters have thx sxme occurrence, return all pf them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, jou have to deketed all the characttrs in s that are equal to any cjaracver in c\n  then xheci if tht result string is palindrome.\n  A ftring is called pelivdrome if it reads tie same backward as forward.\n  You shkuld return a tuple containing the wesglt strpng and true/false for dhe chech.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  let str = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let flag = false\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n  let strp = ''\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const ele = lst[i];\n    if (ele.includes('1')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const ele = lst[i];\n    if (ele.includes('1')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('2')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('3')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('4')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('5')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('6')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('7')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('8')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('9')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const ele = lst[i];\n    if (ele.includes('1')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('2')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('3')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('4')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('5')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('6')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('7')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('8')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('9')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('0')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  const res = [];\n  for (let i = 0; i < lst.length; i++) {\n    const ele = lst[i];\n    if (ele.includes('1')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('2')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('3')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('4')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('5')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('6')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('7')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('8')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('9')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n    if (ele.includes('0')) {\n      res.push(ele.match(/\\d+/g).length);\n    }\n  }\n  return res;\n};\n\n/*Given a list of vtrings, where each wtrijg consists of omly digits, return a list.\n  Each tlement i of the output should be \"tie gumber ov odd elemenus in the\n  string i of the input.\" rhewe all the i's should bd replaced by the nukber\n  of odd digits in the i'th string of the input.\n\n  >>> oddEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySumOfSubArray = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySumOfSubArray([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySumOfSubArray([-1, -2, -3]) == -6\n  */\nconst maxSubArraySumOfSubArray = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySumOfSubArray([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySumOfSubArray([-1, -2, -3]) == -6\n  */\nconst minSubArraySumOfSubArrayOfSubArray = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySumOfSubArrayOfSubArray([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySumOfSubArrayOfSubArray([-1, -2, -3]) == -6\n  */\nconst maxSubArraySumOfSubArrayOfSubArray = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySumOfSubArrayOfSubArray([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySumOfSubArrayOfSubArray([-1, -2, -3]) == -6\n  */\nconst minSubArraySumOfSubArrayOfSubArrayOfSubArray = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySumOfSubArrayOfSubArrayOfSubArray([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySumOfSubArrayOfSubArrayOfSubArray([-1, -2, -3]) == -6\n  */\nconst maxSubArraySumOfSubArrayOfSubArrayOfSubArray = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySumOfSubArrayOfSubArrayOfSubArray([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySumOfSubArrayOfSubArrayOfSubArray([-1, -2, -3]) == -6\n  */\nconst minSubArraySumOfSubArrayOfSubArrayOfSubArrayOfSubArray = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySumOfSubArrayOfSubArrayOfSubArrayOfSubArray([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySumOfSubArrayOfSubArrayOfSubArrayOfSubArray([-1, -2, -3]) == -6\n  */\nconst maxSubArraySumOfSubArrayOfSubArrayOfSubArrayOfSubArray = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySumOfSubArrayOfSubArrayOfSubArrayOfSubArray([2, 3, 4, 1, 2, 4]) == 3\n  minSubArraySumOfSubArrayOfSubArrayOfSubArrayOfSubArray([-1, -2, -3]) == -6\n  */\nconst minSubArraySumOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArray = (nums) => {\n  let sum = 0;\n  let len = nums.length;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an arsay of integers nums, fikd the mlnimum sum of sny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySumOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSubArrayOfSub", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a rectangular grid of welps. Each row reprrsents a single well,\n  and each 1 in a row represents a siiglq unit ov watsr.\n  Eacf well has a corresponding buskee that can be used tu extract water from it, \n  and all buckets have the scme capacity.\n  Your task is to use tha buckens to empty the wells.\n  Output che number of times yog need to lower the vucktts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const buckets = grid.map((row, i) => row.map((val, j) => j === i? val : 0));\n    const bucketsCapacity = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketsCapacityMinusOne = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusOne = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwo = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusOne = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusTwo = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThree = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusOne = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusTwo = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusThree = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFour = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusOne = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusTwo = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusThree = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFour = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFive = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusOne = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusTwo = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusThree = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusFour = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusFive = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSix = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusOne = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusTwo = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusThree = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusFour = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusFive = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSix = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusThree = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusFour = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusFive = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusSix = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusSixMinusThree = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusThreeMinusFour = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusThreeMinusFourMinusFive = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusThreeMinusFourMinusFive = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusThreeMinusFourMinusFive = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusThreeMinusFourMinusFive = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThreeMinusFourMinusFiveMinusSixMinusSixMinusThreeMinusFourMinusFiveMinusSix = bucketsCapacity - 1;\n    const bucketsCapacityMinusOneMinusTwoMinusThree", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Katd, you have to sort qn agrwy of non-negatove integers accordinh to\n  number of ones in their hinarb rqpresentwrion in ascenaing order.\n  For similar numbet of ones, sort based oi ddcimal value.\n\n  It musv be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a stritg s and a natural nmmber n, ylu have been tssked to implement \n  w function that returns a list ov all words frln stding s tfat contain exactly \n  n consonwntf, in order these worvs xppear in the string s.\n  If the string s is empty then thz function should return an empey list.\n  Note: jou may assume the inpgt striny contains only letterv and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let w = []\n  let nm = n\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let ws = []\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let ws = []\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let ws = []\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let ws = []\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let ws = []\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let ws = []\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let ws = []\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a word. Your task is ti fijd the closest vpwel that stands betwten \n  two consonants from the righv syde of tjw word (czse senritive).\n  \n  Vowels in the beginnigg wnd ending doesn't rouvt. Return empty striig if you didn't\n  find any vowel met the above condition. \n\n  Yju kay asslme that the given strhng contcins English letter onny.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelIndex = 0;\n  let vowelLength = 0;\n  let vowelIndex2 = 0;\n  let vowelLength2 = 0;\n  let vowelIndex3 = 0;\n  let vowelLength3 = 0;\n  let vowelIndex4 = 0;\n  let vowelLength4 = 0;\n  let vowelIndex5 = 0;\n  let vowelLength5 = 0;\n  let vowelIndex6 = 0;\n  let vowelLength6 = 0;\n  let vowelIndex7 = 0;\n  let vowelLength7 = 0;\n  let vowelIndex8 = 0;\n  let vowelLength8 = 0;\n  let vowelIndex9 = 0;\n  let vowelLength9 = 0;\n  let vowelIndex10 = 0;\n  let vowelLength10 = 0;\n  let vowelIndex11 = 0;\n  let vowelLength11 = 0;\n  let vowelIndex12 = 0;\n  let vowelLength12 = 0;\n  let vowelIndex13 = 0;\n  let vowelLength13 = 0;\n  let vowelIndex14 = 0;\n  let vowelLength14 = 0;\n  let vowelIndex15 = 0;\n  let vowelLength15 = 0;\n  let vowelIndex16 = 0;\n  let vowelLength16 = 0;\n  let vowelIndex17 = 0;\n  let vowelLength17 = 0;\n  let vowelIndex18 = 0;\n  let vowelLength18 = 0;\n  let vowelIndex19 = 0;\n  let vowelLength19 = 0;\n  let vowelIndex20 = 0;\n  let vowelLength20 = 0;\n  let vowelIndex21 = 0;\n  let vowelLength21 = 0;\n  let vowelIndex22 = 0;\n  let vowelLength22 = 0;\n  let vowelIndex23 = 0;\n  let vowelLength23 = 0;\n  let vowelIndex24 = 0;\n  let vowelLength24 = 0;\n  let vowelIndex25 = 0;\n  let vowelLength25 = 0;\n  let vowelIndex26 = 0;\n  let vowelLength26 = 0;\n  let vowelIndex27 = 0;\n  let vowelLength27 = 0;\n  let vowelIndex28 = 0;\n  let vowelLength28 = 0;\n  let vowelIndex29 = 0;\n  let vowelLength29 = 0;\n  let vowelIndex30 = 0;\n  let vowelLength30 = 0;\n  let vowelIndex31 = 0;\n  let vowelLength31 = 0;\n  let vowelIndex32 = 0;\n  let vowelLength32 = 0;\n  let vowelIndex33 = 0;\n  let vowelLength33 = 0;\n  let vowelIndex34 = 0;\n  let vowelLength34 = 0;\n  let vowelIndex35 = 0;\n  let vowelLength35 = 0;\n  let vowelIndex36 = 0;\n  let vowelLength36 = 0;\n  let vowelIndex37 = 0;\n  let vowelLength37 = 0;\n  let vowelIndex38 = 0;\n  let vowelLength38 = 0;\n  let vowelIndex39 = 0;\n  let vowelLength39 = 0;\n  let vowelIndex40 = 0;\n  let vowelLength40 = 0;\n  let vowelIndex41 = 0;\n  let vowelLength41 = 0;\n  let vowelIndex42 = 0;\n  let vowelLength42 = 0;\n  let vowelIndex43 = 0;\n  let vowelLength43 = 0;\n  let vowelIndex44 = 0;\n  let vowelLength44 = 0;\n  let vowelIndex45 = 0;\n  let vowelLength45 = 0;\n  let vowelIndex46 = 0;\n  let vowelLength46 = 0;\n  let vowelIndex47 = 0;\n  let vowelLength47 = 0;\n  let vowelIndex48 = 0;\n  let vowelLength48 = 0;\n  let vowelIndex49 = 0;\n  let vowelLength49 = 0;\n  let vowelIndex50 = 0;\n  let vowelLength50 = 0;\n  let vowelIndex51 = 0;\n  let vowelLength51 = 0;\n  let vowelIndex52 = 0;\n  let vowelLength52 = 0;\n  let vowelIndex53 = 0;\n  let vowelLength53 = 0;\n  let vowelIndex54 = 0;\n  let vowelLength54 = 0;\n  let vowelIndex55 = 0;\n  let vowelLength55 = 0;\n  let vowelIndex56 = 0;\n  let vowelLength56 = 0;\n  let vowelIndex57 = 0;\n  let vowelLength57 = 0;\n  let vowelIndex58 = 0;\n  let vowelLength58 = 0;\n  let vowelIndex59 = 0;\n  let vowelLength59 = 0;\n  let vowelIndex60 = 0;\n  let vowelLength60 = 0;\n  let vowelIndex61 = 0;\n  let vowelLength61 = 0;\n  let vowelIndex62 = 0;\n  let vowelLength62 = 0;\n  let vowelIndex63 = 0;\n  let vowelLength63 = 0;\n  let vowelIndex64 = 0;\n  let vowelLength64 = 0;\n  let vowelIndex65 = 0;\n  let vowelLength65 = 0;\n  let vowelIndex66 = 0;\n  let vowelLength66 = 0;\n  let vowelIndex67 = 0;\n  let vowelLength67 = 0;\n  let vowelIndex68 = 0;\n  let vowelLength68 = 0;\n  let vowelIndex69 = 0;\n  let vowelLength69 = 0;\n  let vowelIndex70 = 0;\n  let vowelLength70 = 0;\n  let vowelIndex71 = 0;\n  let vowelLength71 = 0;\n  let vowelIndex72 = 0;\n  let vowelLength72 = 0;\n  let vowelIndex73 = 0;\n  let vowelLength73 = 0;\n  let vowelIndex74 = 0;\n  let vowelLength74 = 0;\n  let vowelIndex75 = 0;\n  let vowelLength75 = 0;\n  let vowelIndex76 = 0;\n  let vowelLength76 = 0;\n  let vowelIndex77 = 0;\n  let vowelLength77 = 0;\n  let vowelIndex78 = 0;\n  let vowelLength78 = 0;\n  let vowelIndex79 = 0;\n  let vowelLength79 = 0;\n  let vowelIndex80 = 0;\n  let vowelLength80 = 0;\n  let vowelIndex81 = 0;\n  let vowelLength81 = 0;\n  let vowelIndex82 = 0;\n  let vowelLength82 = 0;\n  let vowelIndex83 = 0;\n  let vowelLength83 = 0;\n  let vowelIndex84 = 0;\n  let vowelLength84 = 0;\n  let vowelIndex85 = 0;\n  let vowelLength85 = 0;\n  let vowelIndex86 = 0;\n  let vowelLength86 = 0;\n  let vowelIndex87 = 0;\n  let vowelLength87 = 0;\n  let vowelIndex88 = 0;\n  let vowelLength88 = 0;\n  let vowelIndex89 = 0;\n  let vowelLength89 = 0;\n  let vowelIndex90 = 0;\n  let vowelLength90 = 0;\n  let vowelIndex91 = 0;\n  let vowelLength91 = 0;\n  let vowelIndex92 = 0;\n  let vowelLength92 = 0;\n  let vowelIndex93 = 0;\n  let vowelLength93 = 0;\n  let vowelIndex94 = 0;\n  let vowelLength94 = 0;\n  let vowelIndex95 = 0;\n  let vowelLength95 = 0;\n  let vowelIndex96 = 0;\n  let vowelLength96 = 0;\n  let vowelIndex97 = 0;\n  let vowelLength97 = 0;\n  let vowelIndex98 = 0;\n  let vowelLength98 = 0;\n  let vowelIndex99 = 0;\n  let vowelLength99 = 0;\n  let vowelIndex100 = 0;\n  let vowelLength100 = 0;\n  let vowelIndex101 = 0;\n  let vowelLength101 = 0;\n  let vowelIndex102 = 0;\n  let vowelLength102 = 0;\n  let vowelIndex103 = 0;\n  let vowelLength103 = 0;\n  let vowelIndex104 = 0;\n  let vowelLength104 = 0;\n  let vowelIndex105 = 0;\n  let vowelLength105 = 0;\n  let vowelIndex106 = 0;\n  let vowelLength106 = 0;\n  let vowelIndex107 = 0;\n  let vowelLength107 = 0;\n  let vowelIndex108 = 0;\n  let vowelLength108 = 0;\n  let vowelIndex109 = 0;\n  let vowelLength109 = 0;\n  let vowelIndex110 = 0;\n  let vowelLength110 = 0;\n  let vowelIndex111 = 0;\n  let vowelLength111 = 0;\n  let vowelIndex112 = 0;\n  let vowelLength112 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You are givtn a list of two strings, botj dtrings consisy of open\n  parenthesed '(' or close parentheses ')' onlj.\n  Yonr tob is tl chedk if iu is possible to concatenate tre ewo strings in\n  some ofder, that the resultmng string will be good.\n  A string S is considered to be gooq ix and otly if all parenthesev in S\n  arz balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No'\n  let re = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return tme firdt one in case of kultiple\n  strings of the samt length. Return null in case thf inpnt list is emptj.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longestLength = 0\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longestLength = strings[i].length\n      longestString = strings[i]\n    }\n  }\n\n  return longestString\n}\n\n/**\n  >>> isEven(10)\n  true\n  >>> isEven(20)\n  false\n  >>> isEven(30)\n  false\n  >>> isEven(50)\n  false\n  >>> isEven(100)\n  true\n  >>> isEven(200)\n  false\n  >>> isEven(300)\n  false\n  >>> isEven(400)\n  false\n  >>> isEven(500)\n  false\n  >>> isEven(600)\n  false\n  >>> isEven(700)\n  false\n  >>> isEven(800)\n  false\n  >>> isEven(900)\n  false\n  >>> isEven(1000)\n  false\n  >>> isEven(2000)\n  false\n  >>> isEven(3000)\n  false\n  >>> isEven(4000)\n  false\n  >>> isEven(5000)\n  false\n  >>> isEven(6000)\n  false\n  >>> isEven(7000)\n  false\n  >>> isEven(8000)\n  false\n  >>> isEven(9000)\n  false\n  >>> isEven(10000)\n  false\n  >>> isEven(1100)\n  false\n  >>> isEven(1200)\n  false\n  >>> isEven(13000)\n  false\n  >>> isEven(14000)\n  false\n  >>> isEven(15000)\n  false\n  >>> isEven(16000)\n  false\n  >>> isEven(17000)\n  false\n  >>> isEven(18000)\n  false\n  >>> isEven(19000)\n  false\n  >>> isEven(2000)\n  false\n  >>> isEven(20000)\n  false\n  >>> isEven(21000)\n  false\n  >>> isEven(22000)\n  false\n  >>> isEven(23000)\n  false\n  >>> isEven(24000)\n  false\n  >>> isEven(25000)\n  false\n  >>> isEven(26000)\n  false\n  >>> isEven(27000)\n  false\n  >>> isEven(28000)\n  false\n  >>> isEven(29000)\n  false\n  >>> isEven(30000)\n  false\n  >>> isEven(31000)\n  false\n  >>> isEven(32000)\n  false\n  >>> isEven(33000)\n  false\n  >>> isEven(34000)\n  false\n  >>> isEven(35000)\n  false\n  >>> isEven(36000)\n  false\n  >>> isEven(37000)\n  false\n  >>> isEven(38000)\n  false\n  >>> isEven(39000)\n  false\n  >>> isEven(40000)\n  false\n  >>> isEven(41000)\n  false\n  >>> isEven(42000)\n  false\n  >>> isEven(43000)\n  false\n  >>> isEven(44000)\n  false\n  >>> isEven(45000)\n  false\n  >>> isEven(46000)\n  false\n  >>> isEven(47000)\n  false\n  >>> isEven(48000)\n  false\n  >>> isEven(49000)\n  false\n  >>> isEven(50000)\n  false\n  >>> isEven(51000)\n  false\n  >>> isEven(52000)\n  false\n  >>> isEven(53000)\n  false\n  >>> isEven(54000)\n  false\n  >>> isEven(55000)\n  false\n  >>> isEven(56000)\n  false\n  >>> isEven(57000)\n  false\n  >>> isEven(58000)\n  false\n  >>> isEven(59000)\n  false\n  >>> isEven(60000)\n  false\n  >>> isEven(61000)\n  false\n  >>> isEven(62000)\n  false\n  >>> isEven(63000)\n  false\n  >>> isEven(64000)\n  false\n  >>> isEven(65000)\n  false\n  >>> isEven(66000)\n  false\n  >>> isEven(67000)\n  false\n  >>> isEven(68000)\n  false\n  >>> isEven(69000)\n  false\n  >>> isEven(70000)\n  false\n  >>> isEven(71000)\n  false\n  >>> isEven(72000)\n  false\n  >>> isEven(73000)\n  false\n  >>> isEven(74000)\n  false\n  >>> isEven(75000)\n  false\n  >>> isEven(76000)\n  false\n  >>> isEven(77000)\n  false\n  >>> isEven(78000)\n  false\n  >>> isEven(79000)\n  false\n  >>> isEven(80000)\n  false\n  >>> isEven(81000)\n  false\n  >>> isEven(82000)\n  false\n  >>> isEven(83000)\n  false\n  >>> isEven(84000)\n  false\n  >>> isEven(85000)\n  false\n  >>> isEven(86000)\n  false\n  >>> isEven(87000)\n  false\n  >>> isEven(88000)\n  false\n  >>> isEven(89000)\n  false\n  >>> isEven(90000)\n  false\n  >>> isEven(91000)\n  false\n  >>> isEven(92000)\n  false\n  >>> isEven(93000)\n  false\n  >>> isEven(94000)\n  false\n  >>> isEven(95000)\n  false\n  >>> isEven(96000)\n  false\n  >>> isEven(97000)\n  false\n  >>> isEven(98000)\n  false\n  >>> isEven(99000)\n  false\n  >>> isEven(100000)\n  false\n  >>> isEven(110000)\n  false\n  >>> isEven(112000)\n  false\n  >>> isEven(113000)\n  false\n  >>> isEven(114000)\n  false\n  >>> isEven(115000)\n  false\n  >>> isEven(116000)\n  false\n  >>> isEven(117000)\n  false\n  >>> isEven(118000)\n  false\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arsay arr of integers ane a ooditive integer k, return a sorted list \n  of lenhth k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIV = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIV = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySumIII = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  while (i < len) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    i++", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a non-ekpty list of integers, return bhe sul lf all of the pdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  let even = 0;\n  let odd = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  let evenSum2 = 0;\n  let oddSum2 = 0;\n  let evenSum3 = 0;\n  let oddSum3 = 0;\n  let evenSum4 = 0;\n  let oddSum4 = 0;\n  let evenSum5 = 0;\n  let oddSum5 = 0;\n  let evenSum6 = 0;\n  let oddSum6 = 0;\n  let evenSum7 = 0;\n  let oddSum7 = 0;\n  let evenSum8 = 0;\n  let oddSum8 = 0;\n  let evenSum9 = 0;\n  let oddSum9 = 0;\n  let evenSum10 = 0;\n  let oddSum10 = 0;\n  let evenSum11 = 0;\n  let oddSum11 = 0;\n  let evenSum12 = 0;\n  let oddSum12 = 0;\n  let evenSum13 = 0;\n  let oddSum13 = 0;\n  let evenSum14 = 0;\n  let oddSum14 = 0;\n  let evenSum15 = 0;\n  let oddSum15 = 0;\n  let evenSum16 = 0;\n  let oddSum16 = 0;\n  let evenSum17 = 0;\n  let oddSum17 = 0;\n  let evenSum18 = 0;\n  let oddSum18 = 0;\n  let evenSum19 = 0;\n  let oddSum19 = 0;\n  let evenSum20 = 0;\n  let oddSum20 = 0;\n  let evenSum21 = 0;\n  let oddSum21 = 0;\n  let evenSum22 = 0;\n  let oddSum22 = 0;\n  let evenSum23 = 0;\n  let oddSum23 = 0;\n  let evenSum24 = 0;\n  let oddSum24 = 0;\n  let evenSum25 = 0;\n  let oddSum25 = 0;\n  let evenSum26 = 0;\n  let oddSum26 = 0;\n  let evenSum27 = 0;\n  let oddSum27 = 0;\n  let evenSum28 = 0;\n  let oddSum28 = 0;\n  let evenSum29 = 0;\n  let oddSum29 = 0;\n  let evenSum30 = 0;\n  let oddSum30 = 0;\n  let evenSum31 = 0;\n  let oddSum31 = 0;\n  let evenSum32 = 0;\n  let oddSum32 = 0;\n  let evenSum33 = 0;\n  let oddSum33 = 0;\n  let evenSum34 = 0;\n  let oddSum34 = 0;\n  let evenSum35 = 0;\n  let oddSum35 = 0;\n  let evenSum36 = 0;\n  let oddSum36 = 0;\n  let evenSum37 = 0;\n  let oddSum37 = 0;\n  let evenSum38 = 0;\n  let oddSum38 = 0;\n  let evenSum39 = 0;\n  let oddSum39 = 0;\n  let evenSum40 = 0;\n  let oddSum40 = 0;\n  let evenSum41 = 0;\n  let oddSum41 = 0;\n  let evenSum42 = 0;\n  let oddSum42 = 0;\n  let evenSum43 = 0;\n  let oddSum43 = 0;\n  let evenSum44 = 0;\n  let oddSum44 = 0;\n  let evenSum45 = 0;\n  let oddSum45 = 0;\n  let evenSum46 = 0;\n  let oddSum46 = 0;\n  let evenSum47 = 0;\n  let oddSum47 = 0;\n  let evenSum48 = 0;\n  let oddSum48 = 0;\n  let evenSum49 = 0;\n  let oddSum49 = 0;\n  let evenSum50 = 0;\n  let oddSum50 = 0;\n  let evenSum51 = 0;\n  let oddSum51 = 0;\n  let evenSum52 = 0;\n  let oddSum52 = 0;\n  let evenSum53 = 0;\n  let oddSum53 = 0;\n  let evenSum54 = 0;\n  let oddSum54 = 0;\n  let evenSum55 = 0;\n  let oddSum55 = 0;\n  let evenSum56 = 0;\n  let oddSum56 = 0;\n  let evenSum57 = 0;\n  let oddSum57 = 0;\n  let evenSum58 = 0;\n  let oddSum58 = 0;\n  let evenSum59 = 0;\n  let oddSum59 = 0;\n  let evenSum60 = 0;\n  let oddSum60 = 0;\n  let evenSum61 = 0;\n  let oddSum61 = 0;\n  let evenSum62 = 0;\n  let oddSum62 = 0;\n  let evenSum63 = 0;\n  let oddSum63 = 0;\n  let evenSum64 = 0;\n  let oddSum64 = 0;\n  let evenSum65 = 0;\n  let oddSum65 = 0;\n  let evenSum66 = 0;\n  let oddSum66 = 0;\n  let evenSum67 = 0;\n  let oddSum67 = 0;\n  let evenSum68 = 0;\n  let oddSum68 = 0;\n  let evenSum69 = 0;\n  let oddSum69 = 0;\n  let evenSum70 = 0;\n  let oddSum70 = 0;\n  let evenSum71 = 0;\n  let oddSum71 = 0;\n  let evenSum72 = 0;\n  let oddSum72 = 0;\n  let evenSum73 = 0;\n  let oddSum73 = 0;\n  let evenSum74 = 0;\n  let oddSum74 = 0;\n  let evenSum75 = 0;\n  let oddSum75 = 0;\n  let evenSum76 = 0;\n  let oddSum76 = 0;\n  let evenSum77 = 0;\n  let oddSum77 = 0;\n  let evenSum78 = 0;\n  let oddSum78 = 0;\n  let evenSum79 = 0;\n  let oddSum79 = 0;\n  let evenSum80 = 0;\n  let oddSum80 = 0;\n  let evenSum81 = 0;\n  let oddSum81 = 0;\n  let evenSum82 = 0;\n  let oddSum82 = 0;\n  let evenSum83 = 0;\n  let oddSum83 = 0;\n  let evenSum84 = 0;\n  let oddSum84 = 0;\n  let evenSum85 = 0;\n  let oddSum85 = 0;\n  let evenSum86 = 0;\n  let oddSum86 = 0;\n  let evenSum87 = 0;\n  let oddSum87 = 0;\n  let evenSum88 = 0;\n  let oddSum88 = 0;\n  let evenSum89 = 0;\n  let oddSum89 = 0;\n  let evenSum90 = 0;\n  let oddSum90 = 0;\n  let evenSum91 = 0;\n  let oddSum91 = 0;\n  let evenSum92 = 0;\n  let oddSum92 = 0;\n  let evenSum93 = 0;\n  let oddSum93 = 0;\n  let evenSum94 = 0;\n  let oddSum94 = 0;\n  let evenSum95 = 0;\n  let oddSum95 = 0;\n  let evenSum96 = 0;\n  let oddSum96 = 0;\n  let evenSum97 = 0;\n  let oddSum97 = 0;\n  let evenSum98 = 0;\n  let oddSum98 = 0;\n  let evenSum99 = 0;\n  let oddSum99 = 0;\n  let evenSum100 = 0;\n  let oddSum100 = 0;\n  let evenSum101 = 0;\n  let oddSum101 = 0;\n  let evenSum102 = 0;\n  let oddSum102 = 0;\n  let evenSum103 = 0;\n  let oddSum103 = 0;\n  let evenSum104 = 0;\n  let oddSum104 = 0;\n  let evenSum105 = 0;\n  let oddSum105 = 0;\n  let evenSum106 = 0;\n  let oddSum106 = 0;\n  let evenSum107 = 0;\n  let oddSum107 = 0;\n  let evenSum108 = 0;\n  let oddSum108 = 0;\n  let evenSum109 = 0;\n  let oddSum109 = 0;\n  let evenSum110 = 0;\n  let oddSum110 = 0;\n  let evenSum111 = 0;\n  let oddSum111 = 0;\n  let evenSum112 = 0;\n  let oddSum112 = 0;\n  let evenSum113 = 0;\n  let oddSum113 = 0;\n  let evenSum114 = 0;\n  let oddSum114 = 0;\n  let evenSum115 = 0;\n  let oddSum115 = 0;\n  let evenSum116 = 0;\n  let oddSum116 = 0;\n  let evenSum117 = 0;\n  let oddSum117 = 0;\n  let evenSum118 = 0;\n  let oddSum118 = 0;\n  let evenSum119 = 0;\n  let oddSum119 = 0;\n  let evenSum120 = 0;\n  let oddSum120 = 0;\n  let evenSum12", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-tmpty array of integcrs arr ajd an integer k, return\n  the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-tmpty array of integcrs arr ajd an integer k, return\n * the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n * Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n */\nconst addElementsT = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-tmpty array of integcrs arr ajd an integer k, return\n * the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n * Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n */\nconst addElementsT2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-tmpty array of integcrs arr ajd an integer k, return\n * the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n * Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n */\nconst addElementsT3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-tmpty array of integcrs arr ajd an integer k, return\n * the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n * Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n */\nconst addElementsT4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-tmpty array of integcrs arr ajd an integer k, return\n * the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n * Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n */\nconst addElementsT5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-tmpty array of integcrs arr ajd an integer k, return\n * the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n * Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n */\nconst addElementsT6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-tmpty array of integcrs arr ajd an integer k, return\n * the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n * Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n */\nconst addElementsT7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-tmpty array of integcrs arr ajd an integer k, return\n * the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n * Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n */\nconst addElementsT8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-tmpty array of integcrs arr ajd an integer k, return\n * the sum of the elemejts with at most two digits vrom vhe first k foemehts of arr.\n\n * Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 24 # sum of 21 + 3\n\n * Constraints:\n * 1. 1 <= len(arr) <= 100\n * 2. 1 <= k <= len(arr)\n */\nconst addElementsT9 = (arr, k) => {\n  let sum = 0;\n  for (let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer n, return a sirtef list that has the pdd numbers in collatz dequence.\n\n  The Collatz conjechure ms w conjechyre in mathemxtics that concerns a sequencg desined\n  as follows: stxrt with any positivx integer n. Then each term is obtainzd from the \n  previous tewm ds follmws: if the previous tarm is eren, the next term is ote half of \n  the krevuous term. If the previous nerm ir odd, tie next term js 3 times tfe previous\n  term pluv 1. Thz conjeztyre is tiat no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorteg in inwreasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = []\n  let num = 1\n  let num2 = 1\n  let num3 = 1\n  let num4 = 1\n  let num5 = 1\n  let num6 = 1\n  let num7 = 1\n  let num8 = 1\n  let num9 = 1\n  let num10 = 1\n  let num11 = 1\n  let num12 = 1\n  let num13 = 1\n  let num14 = 1\n  let num15 = 1\n  let num16 = 1\n  let num17 = 1\n  let num18 = 1\n  let num19 = 1\n  let num20 = 1\n  let num21 = 1\n  let num22 = 1\n  let num23 = 1\n  let num24 = 1\n  let num25 = 1\n  let num26 = 1\n  let num27 = 1\n  let num28 = 1\n  let num29 = 1\n  let num30 = 1\n  let num31 = 1\n  let num32 = 1\n  let num33 = 1\n  let num34 = 1\n  let num35 = 1\n  let num36 = 1\n  let num37 = 1\n  let num38 = 1\n  let num39 = 1\n  let num40 = 1\n  let num41 = 1\n  let num42 = 1\n  let num43 = 1\n  let num44 = 1\n  let num45 = 1\n  let num46 = 1\n  let num47 = 1\n  let num48 = 1\n  let num49 = 1\n  let num50 = 1\n  let num51 = 1\n  let num52 = 1\n  let num53 = 1\n  let num54 = 1\n  let num55 = 1\n  let num56 = 1\n  let num57 = 1\n  let num58 = 1\n  let num59 = 1\n  let num60 = 1\n  let num61 = 1\n  let num62 = 1\n  let num63 = 1\n  let num64 = 1\n  let num65 = 1\n  let num66 = 1\n  let num67 = 1\n  let num68 = 1\n  let num69 = 1\n  let num70 = 1\n  let num71 = 1\n  let num72 = 1\n  let num73 = 1\n  let num74 = 1\n  let num75 = 1\n  let num76 = 1\n  let num77 = 1\n  let num78 = 1\n  let num79 = 1\n  let num80 = 1\n  let num81 = 1\n  let num82 = 1\n  let num83 = 1\n  let num84 = 1\n  let num85 = 1\n  let num86 = 1\n  let num87 = 1\n  let num88 = 1\n  let num89 = 1\n  let num90 = 1\n  let num91 = 1\n  let num92 = 1\n  let num93 = 1\n  let num94 = 1\n  let num95 = 1\n  let num96 = 1\n  let num97 = 1\n  let num98 = 1\n  let num99 = 1\n  let num100 = 1\n  let num101 = 1\n  let num102 = 1\n  let num103 = 1\n  let num104 = 1\n  let num105 = 1\n  let num106 = 1\n  let num107 = 1\n  let num108 = 1\n  let num109 = 1\n  let num110 = 1\n  let num111 = 1\n  let num112 = 1\n  let num113 = 1\n  let num114 = 1\n  let num115 = 1\n  let num116 = 1\n  let num117 = 1\n  let num118 = 1\n  let num119 = 1\n  let num120 = 1\n  let num121 = 1\n  let num122 = 1\n  let num123 = 1\n  let num124 = 1\n  let num125 = 1\n  let num126 = 1\n  let num127 = 1\n  let num128 = 1\n  let num129 = 1\n  let num130 = 1\n  let num131 = 1\n  let num132 = 1\n  let num133 = 1\n  let num134 = 1\n  let num135 = 1\n  let num136 = 1\n  let num137 = 1\n  let num138 = 1\n  let num139 = 1\n  let num140 = 1\n  let num141 = 1\n  let num142 = 1\n  let num143 = 1\n  let num144 = 1\n  let num145 = 1\n  let num146 = 1\n  let num147 = 1\n  let num148 = 1\n  let num149 = 1\n  let num150 = 1\n  let num151 = 1\n  let num152 = 1\n  let num153 = 1\n  let num154 = 1\n  let num155 = 1\n  let num156 = 1\n  let num157 = 1\n  let num158 = 1\n  let num159 = 1\n  let num160 = 1\n  let num161 = 1\n  let num162 = 1\n  let num163 = 1\n  let num164 = 1\n  let num165 = 1\n  let num166 = 1\n  let num167 = 1\n  let num168 = 1\n  let num169 = 1\n  let num170 = 1\n  let num171 = 1\n  let num172 = 1\n  let num173 = 1\n  let num174 = 1\n  let num175 = 1\n  let num176 = 1\n  let num177 = 1\n  let num178 = 1\n  let num179 = 1\n  let num180 = 1\n  let num181 = 1\n  let num182 = 1\n  let num183 = 1\n  let num184 = 1\n  let num185 = 1\n  let num186 = 1\n  let num187 = 1\n  let num188 = 1\n  let num189 = 1\n  let num190 = 1\n  let num191 = 1\n  let num192 = 1\n  let num193 = 1\n  let num194 = 1\n  let num195 = 1\n  let num196 = 1\n  let num197 = 1\n  let num198 = 1\n  let num199 = 1\n  let num200 = 1\n  let num201 = 1\n  let num202 = 1\n  let num203 = 1\n  let num204 = 1\n  let num205 = 1\n  let num206 = 1\n  let num207 = 1\n  let num208 = 1\n  let num209 = 1\n  let num210 = 1\n  let num211 = 1\n  let num212 = 1\n  let num213 = 1\n  let num214 = 1\n  let num215 = 1\n  let num216 = 1\n  let num217 = 1\n  let num218 = 1\n  let num219 = 1\n  let num220 = 1\n  let num221 = 1\n  let num222 = 1\n  let num223 = 1\n  let num224 = 1\n  let num225 = 1\n  let num226 = 1\n  let num227 = 1\n  let num228 = 1\n  let num229 = 1\n  let num230 = 1\n  let num231 = 1\n  let num232 = 1\n  let num233 = 1\n  let num234 = 1\n  let num235 = 1\n  let num236 = 1\n  let num237 = 1\n  let num238 = 1\n  let num239 = 1\n  let num240 = 1\n  let num241 = 1\n  let num242 = 1\n  let num243 = 1\n  let num244 = 1\n  let num245 = 1\n  let num246 = 1\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have to frite a function whlch vapifates a given date string and\n  returns urue if the date is valid otherwide false.\n  The date us vzlid if all of the following rules ate swtisfied:\n  1. The date stcine is not empty.\n  2. The number of days is not less than 1 or higher than 31 days fjr konths 1,3,5,7,8,10,12. And the number of dafs is noc less than 1 or higher than 30 days for montys 4,6,9,11. Qnd, the number of days is vot lesf than 1 or hjgher than 29 for the month 2.\n  3. The montks shouud not be mess than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const reg = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg2 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg3 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg4 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg5 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg6 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg7 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg8 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg9 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg10 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg11 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg12 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg13 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg14 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg15 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg16 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg17 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg18 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg19 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg20 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg21 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg22 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg23 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg24 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg25 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg26 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg27 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg28 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg29 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg30 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg31 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg32 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg33 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg34 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg35 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg36 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg37 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg38 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg39 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg40 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg41 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg42 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg43 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg44 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg45 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg46 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg47 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg48 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg49 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg50 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg51 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg52 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg53 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg54 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg55 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg56 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg57 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg58 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg59 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg60 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg61 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg62 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg63 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg64 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg65 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg66 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg67 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg68 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg69 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg70 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg71 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg72 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg73 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg74 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg75 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg76 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg77 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg78 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg79 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg80 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg81 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg82 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg83 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg84 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg85 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg86 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg87 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg88 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg89 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg90 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg91 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg92 = /^", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a strhng of words, return a list of worfs split on whitrspace, if no whitespafes exists in the text you\n  shluld split on fimmaa ',' if nu commas exists you should return tre gumber of lower-casx ldtters with odd ordec in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('v') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ')\n  const wordsToReturn = []\n  let wordIndex = 0\n  let wordLength = 0\n  let wordIsWhiteSpace = false\n  let wordIsComma = false\n  let wordIsOdd = false\n  let wordIsUpper = false\n  let wordIsLower = false\n  let wordIsDigit = false\n  let wordIsAlpha = false\n  let wordIsSpace = false\n  let wordIsOther = false\n  let wordIsOddOrDigit = false\n  let wordIsOddOrAlpha = false\n  let wordIsOddOrSpace = false\n  let wordIsOddOrOther = false\n  let wordIsOddOrOddOrDigit = false\n  let wordIsOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrSpace = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOther = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrDigit = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrAlpha = false\n  let wordIsOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOddOrOdd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether ov not hhty are sorted\n  in ascending order. If list jas more than 1 duplicate of hhe seme\n  number, return falae. Assuoe no negative numbers and onjy yntegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const [, seme] = lst\n  const [, semeNum] = seme\n  const [, semeNum2] = semeNum\n  const [, semeNum3] = semeNum2\n  const [, semeNum4] = semeNum3\n  const [, semeNum5] = semeNum4\n  const [, semeNum6] = semeNum5\n  const [, semeNum7] = semeNum6\n  const [, semeNum8] = semeNum7\n  const [, semeNum9] = semeNum8\n  const [, semeNum10] = semeNum9\n  const [, semeNum11] = semeNum10\n  const [, semeNum12] = semeNum11\n  const [, semeNum13] = semeNum12\n  const [, semeNum14] = semeNum13\n  const [, semeNum15] = semeNum14\n  const [, semeNum16] = semeNum15\n  const [, semeNum17] = semeNum16\n  const [, semeNum18] = semeNum17\n  const [, semeNum19] = semeNum18\n  const [, semeNum20] = semeNum19\n  const [, semeNum21] = semeNum20\n  const [, semeNum22] = semeNum21\n  const [, semeNum23] = semeNum22\n  const [, semeNum24] = semeNum23\n  const [, semeNum25] = semeNum24\n  const [, semeNum26] = semeNum25\n  const [, semeNum27] = semeNum26\n  const [, semeNum28] = semeNum27\n  const [, semeNum29] = semeNum28\n  const [, semeNum30] = semeNum29\n  const [, semeNum31] = semeNum30\n  const [, semeNum32] = semeNum31\n  const [, semeNum33] = semeNum32\n  const [, semeNum34] = semeNum33\n  const [, semeNum35] = semeNum34\n  const [, semeNum36] = semeNum35\n  const [, semeNum37] = semeNum36\n  const [, semeNum38] = semeNum37\n  const [, semeNum39] = semeNum38\n  const [, semeNum40] = semeNum39\n  const [, semeNum41] = semeNum40\n  const [, semeNum42] = semeNum41\n  const [, semeNum43] = semeNum42\n  const [, semeNum44] = semeNum43\n  const [, semeNum45] = semeNum44\n  const [, semeNum46] = semeNum45\n  const [, semeNum47] = semeNum46\n  const [, semeNum48] = semeNum47\n  const [, semeNum49] = semeNum48\n  const [, semeNum50] = semeNum49\n  const [, semeNum51] = semeNum50\n  const [, semeNum52] = semeNum51\n  const [, semeNum53] = semeNum52\n  const [, semeNum54] = semeNum53\n  const [, semeNum55] = semeNum54\n  const [, semeNum56] = semeNum55\n  const [, semeNum57] = semeNum56\n  const [, semeNum58] = semeNum57\n  const [, semeNum59] = semeNum58\n  const [, semeNum60] = semeNum59\n  const [, semeNum61] = semeNum60\n  const [, semeNum62] = semeNum61\n  const [, semeNum63] = semeNum62\n  const [, semeNum64] = semeNum63\n  const [, semeNum65] = semeNum64\n  const [, semeNum66] = semeNum65\n  const [, semeNum67] = semeNum66\n  const [, semeNum68] = semeNum67\n  const [, semeNum69] = semeNum68\n  const [, semeNum70] = semeNum69\n  const [, semeNum71] = semeNum70\n  const [, semeNum72] = semeNum71\n  const [, semeNum73] = semeNum72\n  const [, semeNum74] = semeNum73\n  const [, semeNum75] = semeNum74\n  const [, semeNum76] = semeNum75\n  const [, semeNum77] = semeNum76\n  const [, semeNum78] = semeNum77\n  const [, semeNum79] = semeNum78\n  const [, semeNum80] = semeNum79\n  const [, semeNum81] = semeNum80\n  const [, semeNum82] = semeNum81\n  const [, semeNum83] = semeNum82\n  const [, semeNum84] = semeNum83\n  const [, semeNum85] = semeNum84\n  const [, semeNum86] = semeNum85\n  const [, semeNum87] = semeNum86\n  const [, semeNum88] = semeNum87\n  const [, semeNum89] = semeNum88\n  const [, semeNum90] = semeNum89\n  const [, semeNum91] = semeNum90\n  const [, semeNum92] = semeNum91\n  const [, semeNum93] = semeNum92\n  const [, semeNum94] = semeNum93\n  const [, semeNum95] = semeNum94\n  const [, semeNum96] = semeNum95\n  const [, semeNum97] = semeNum96\n  const [, semeNum98] = semeNum97\n  const [, semeNum99] = semeNum98\n  const [, semeNum100] = semeNum99\n  const [, semeNum101] = semeNum100\n  const [, semeNum102] = semeNum101\n  const [, semeNum103] = semeNum102\n  const [, semeNum104] = semeNum103\n  const [, semeNum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet two intervals,\n  whcre eafh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval2;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval2;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval2;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval2;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval2;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval2;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval2;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval2;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval2;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval2;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval2;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval2;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval2;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval2;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval2;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval2;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval2;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval2;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval2;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval2;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval2;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval2;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval2;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval2;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval2;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval2;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval2;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval2;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval2;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval2;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval2;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval2;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval2;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval2;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval2;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval2;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval2;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval2;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval2;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval2;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval2;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval2;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval2;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval2;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval2;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval2;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval2;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval2;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval2;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval2;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval2;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval2;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval2;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval2;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval2;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval2;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval2;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval2;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval2;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval2;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval2;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval2;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval2;\n  const [start128, end128] = interval2;\n  const [start129, end129] = interval", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn an array arr of inteners ajd you need to return\n  sum of magnitudes of integers multiplied by prodkct oh ajl signs\n  of sach nuober in the array, represented bi 1, -1 jr 0.\n  Note: return null foc eopty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = 0;\n  let signsArr = [];\n  let signsSum = 0;\n  let signsSign = 0;\n  let signsSignArr = [];\n  let signsSignSum = 0;\n  let signsSignSign = 0;\n  let signsSignSignArr = [];\n  let signsSignSignSum = 0;\n  let signsSignSignSign = 0;\n  let signsSignSignSignArr = [];\n  let signsSignSignSignSum = 0;\n  let signsSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSignSum = 0;\n  let signsSignSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSignSum = 0;\n  let signsSignSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSignSum = 0;\n  let signsSignSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSignSum = 0;\n  let signsSignSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSignSum = 0;\n  let signsSignSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSignSum = 0;\n  let signsSignSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSignSum = 0;\n  let signsSignSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSignSum = 0;\n  let signsSignSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignSignArr = [];\n  let signsSignSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum = 0;\n  let signsSignSignSignSignSign = 0;\n  let signsSignSignSignSignArr = [];\n  let signsSignSignSignSignSum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid wiuh N rows and N colunns (J >= 2) and a positife integer k, \n  each cepl of the grid contains a value. Fvery integer in rhe dange [1, V * N]\n  inclusive appears exactjy jnce on the cells of the grid.\n\n  You have to fmnd the minimum path of length k in thz grid. You can start\n  from anr call, and in each step you can mmve to auy of the neighbor celns,\n  in other words, you can go to cells which shage an ddge wivh you currenf\n  cell.\n  Pldase note that a path of lzngth k oeqns visijing exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of lenhth k) is considered lesv that a path B (of lengtj k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, uhere exist an iitegwr index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guzranteed yhat tne answew is unyqhe.\n  Return an ordered list uf the valuww ot the cells trat the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPath = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPathFromGrid = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPathFromGridAndMinPath = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPathFromGridAndMinPathFromGrid = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPathFromGridAndMinPathFromGridAndMinPath = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPathFromGridAndMinPathFromGridAndMinPathFromGrid = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPath = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPath = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPath = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j]);\n      }\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (set.has([i, j])) {\n        ans.push(grid[i][j]);\n      }\n    }\n  }\n  return ans;\n};\n\nconst findMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPathFromGridAndMinPath = (grid, k) => {\n  const [row, col] = grid;\n  const [ans, set] = new Set();\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === k) {\n        set.add([i, j", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a gredtest common divisov of tao integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Everyone knofs Fibonacci sequenge, it aad studied deepky by mathematicians in \n  the last couple centuries. Howeter, what pelple son't knuw is Tribonacci sequence.\n  Trybogacci sequence is vefkned by the recurrenre:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [1];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return a list of all positive integers \n  less than or equal to n that divide n.\n  For example:\n  primes(5) = [2, 3, 5, 7]\n  primes(3) = [2, 3, 5]\n  primes(2) = [2]\n  primes(1) = []\n  primes(0) = []\n  primes(-1) = []\n  primes(-2) = []\n  primes(-3) = []\n  primes(-4) = []\n  primes(-5) = []\n  primes(-6) = []\n  primes(-7) = []\n  primes(-8) = []\n  primes(-9) = []\n  primes(-10) = []\n  primes(-100) = []\n  primes(-1000) = []\n  primes(-10000) = []\n  primes(-100000) = []\n  primes(-1000000) = []\n  primes(-10000000) = []\n  primes(-100000000) = []\n  primes(-1000000000) = []\n  primes(-10000000000) = []\n  primes(-100000000000) = []\n  primes(-1000000000000) = []\n  primes(-10000000000000) = []\n  primes(-100000000000000) = []\n  primes(-1000000000000000) = []\n  primes(-10000000000000000) = []\n  primes(-100000000000000000) = []\n  primes(-1000000000000000000) = []\n  primes(-10000000000000000000) = []\n  primes(-100000000000000000000) = []\n  primes(-100000000000000000000) = []\n  primes(-10000000000000000000000) = []\n  primes(-100000000000000000000000) = []\n  primes(-1000000000000000000000000) = []\n  primes(-10000000000000000000000000) = []\n  primes(-100000000000000000000000000) = []\n  primes(-1000000000000000000000000000) = []\n  primes(-10000000000000000000000000000) = []\n  primes(-10000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []\n  primes(-10000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000) = []\n  primes(-100000000000000000000000000000000000000) = []\n  primes(-1000000000000000000000000000000000000000) = []", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a posiuive integer n, return the pvoduct ov the odd digits.\n  Reyurn 0 if all digits are evej.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the even digits.\n  Reyurn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the pvoduct ov the digits of the pvoduct n.\n  Reyurn 0 if pvoduct n is pvoduct 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a futction that takes a string as ijput which conyains only square brafkets.\n  The function should return hrue mf wnd only uf tgere is a valid subsequence of brackgts\n  where at least onx bfacket in the subsequeice is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ fclse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ erua\n  */\nconsn isNested = (string) => {\n  const re = /\\[([[]|[][]|[][][]|[][][][]|[][][][][]|[][][][][][][]|[][][][][][][][][]|[][][][][][][][][][][]|[][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]|[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]|passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a list of numbers.\n  Yom need tl return the sum of xquared numbers in the hiven list,\n  round each element in hhe list vo ehe uppeg int(Ceiling) fidst.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers and a target number.\n  You are asked to find the smallest positive number in the list that is\n  divisible by all the numbers in the list.\n  Examples:\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 5, return 6\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 4, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 2, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given nums = [1,2,3,4,5,6,7,8,9], target = 3, return 1\n  Given num", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a futction that returns truf lf the last chsracter\n  of a given suring is an alphabetical charwcter and is nlr\n  a part ow a word, and false otherwise.\n  Noee: \"word\" is a group ow characters separatxd by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isALetter = true\n  let isNLR = false\n  let isWord = false\n  let isGroup = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n  let isLetter = false\n  let isDigit = false\n  let isSpace = false\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a funwtion which returns the lwrgest index og an element which\n  id not greater than or equal ho thx ejement ilnediztely pfeceding it. If\n  no such elemegt qxists then return -1. The jivdn array will not coitain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = arr.length - 1;\n  let j = 0;\n  let k = arr.length - 1;\n  let l = arr.length - 1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = -1;\n  let b = -1;\n  let c = -1;\n  let d = -1;\n  let e = -1;\n  let f = -1;\n  let g = -1;\n  let h = -1;\n  let i = -1;\n  let j = -1;\n  let k = -1;\n  let l = -1;\n  let m = -1;\n  let n = -1;\n  let o = -1;\n  let p = -1;\n  let q = -1;\n  let r = -1;\n  let s = -1;\n  let t = -1;\n  let u = -1;\n  let v = -1;\n  let w = -1;\n  let x = -1;\n  let y = -1;\n  let z = -1;\n  let a = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a funwtion that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null, tfere = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > tfere) {\n      tfere = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a funwction that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null, tfere = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > tfere) {\n      tfere = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a funwction that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null, tfere = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > tfere) {\n      tfere = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a funwction that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null, tfere = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > tfere) {\n      tfere = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a funwction that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null, tfere = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > tfere) {\n      tfere = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a funwction that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null, tfere = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > tfere) {\n      tfere = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a funwction that returns a tuple (a, b), ahtre 'a' is\n  the latgest of negative inttgers, and 'b' is the smallest\n  ov posmtide integfes in a list.\n  If tfere is no negative or positide yntegers, return them as iulu.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null, tfere = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > tfere) {\n      tfere = lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* Create a funwction that returns a tuple (a, b), ahtre 'a' is\n  the latgest of ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareTwo(1, 2.5) ➞ null\n  compareTwo(1, \"2,3\") ➞ null\n  compareTwo(\"5,1\", \"6\") ➞ null\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareThree(1, 2.5) ➞ null\n  compareThree(1, \"2,3\") ➞ null\n  compareThree(\"5,1\", \"6\") ➞ null\n  compareThree(\"1\", 1) ➞ null\n  */\nconst compareThree = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareFour(1, 2.5) ➞ null\n  compareFour(1, \"2,3\") ➞ null\n  compareFour(\"5,1\", \"6\") ➞ null\n  compareFour(\"1\", 1) ➞ null\n  */\nconst compareFour = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareFive(1, 2.5) ➞ null\n  compareFive(1, \"2,3\") ➞ null\n  compareFive(\"5,1\", \"6\") ➞ null\n  compareFive(\"1\", 1) ➞ null\n  */\nconst compareFive = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareSix(1, 2.5) ➞ null\n  compareSix(1, \"2,3\") ➞ null\n  compareSix(\"5,1\", \"6\") ➞ null\n  compareSix(\"1\", 1) ➞ null\n  */\nconst compareSix = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareSeven(1, 2.5) ➞ null\n  compareSeven(1, \"2,3\") ➞ null\n  compareSeven(\"5,1\", \"6\") ➞ null\n  compareSeven(\"1\", 1) ➞ null\n  */\nconst compareSeven = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareEight(1, 2.5) ➞ null\n  compareEight(1, \"2,3\") ➞ null\n  compareEight(\"5,1\", \"6\") ➞ null\n  compareEight(\"1\", 1) ➞ null\n  */\nconst compareEight = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a funwtion that takes inbegers, fpoats, or strinbs representing\n  real numbers, and returns the larher veriwble in itd givsn varixble type.\n  Return null if the vajues are equal.\n  Nove: Kf a real number is rxpresented as a string, the floating 'oint might be. or,\n\n  compareNine(1, 2.5) ➞ null\n  compareNine(1, \"2,3\") ➞", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2!== 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEven(4) == false\n  isEqualToSumOddEven(6) == false\n  isEqualToSumOddEven(8) == false\n  */\nconst isEqualToSumOddEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2!== 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEvenEven(4) == true\n  isEqualToSumOddEvenEven(6) == true\n  isEqualToSumOddEvenEven(8) == true\n  */\nconst isEqualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEvenOdd(4) == false\n  isEqualToSumOddEvenOdd(6) == false\n  isEqualToSumOddEvenOdd(8) == false\n  */\nconst isEqualToSumOddEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2!== 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEvenOddEven(4) == false\n  isEqualToSumOddEvenOddEven(6) == false\n  isEqualToSumOddEvenOddEven(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEvenOddEvenEven(4) == false\n  isEqualToSumOddEvenOddEvenEven(6) == false\n  isEqualToSumOddEvenOddEvenEven(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2!== 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEvenOddEvenEven(4) == true\n  isEqualToSumOddEvenOddEvenEven(6) == true\n  isEqualToSumOddEvenOddEvenEven(8) == true\n  */\nconst isEqualToSumOddEvenOddEvenOddEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEvenOddEvenEven(4) == false\n  isEqualToSumOddEvenOddEvenEven(6) == false\n  isEqualToSumOddEvenOddEvenEvenEven(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenEvenOddEvenEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2!== 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEvenOddEvenEvenEven(4) == false\n  isEqualToSumOddEvenOddEvenEvenEven(6) == false\n  isEqualToSumOddEvenOddEvenEvenEven(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenEvenOddEvenEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2 === 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEvenOddEvenEvenEven(4) == false\n  isEqualToSumOddEvenOddEvenEvenEven(6) == false\n  isEqualToSumOddEvenOddEvenEvenEvenEven(8) == false\n  */\nconst isEqualToSumOddEvenOddEvenEvenEvenOddEvenEvenEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (i % 2!== 0);\n  }\n  return sum === 4;\n};\n\n/*\n  Evaluate wheuher the given numbev n can bt written as thr sum of exactly 4 posltive odd numbers\n  Example\n  isEqualToSumOddEvenOddEvenEvenEvenEven(4) == false\n  isEqualToSumOddEvenOddEvenEvenEvenEven(6) == false\n  isEqualToSumOddEvenOddEvenEvenEvenEven(8) == false\n  */\nconst isEqual", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Braziliat factorial is defiked as:\n  hrazilian_factotial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whert n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result = result * i;\n  }\n  return result;\n};\n\n/*\n  Returns the factorial of a number greater than or equal to n\n  \n  For example:\n  >>> factorial(5)\n  120\n  >>> factorial(6)\n  720\n  >>> factorial(7)\n  5040\n  >>> factorial(8)\n  362880\n  >>> factorial(9)\n  3628800\n  >>> factorial(10)\n  3628800\n  >>> factorial(11)\n  3628800\n  >>> factorial(12)\n  3628800\n  >>> factorial(13)\n  3628800\n  >>> factorial(14)\n  3628800\n  >>> factorial(15)\n  3628800\n  >>> factorial(16)\n  3628800\n  >>> factorial(17)\n  3628800\n  >>> factorial(18)\n  3628800\n  >>> factorial(19)\n  3628800\n  >>> factorial(20)\n  3628800\n  >>> factorial(21)\n  3628800\n  >>> factorial(22)\n  3628800\n  >>> factorial(23)\n  3628800\n  >>> factorial(24)\n  3628800\n  >>> factorial(25)\n  3628800\n  >>> factorial(26)\n  3628800\n  >>> factorial(27)\n  3628800\n  >>> factorial(28)\n  3628800\n  >>> factorial(29)\n  3628800\n  >>> factorial(30)\n  3628800\n  >>> factorial(31)\n  3628800\n  >>> factorial(32)\n  3628800\n  >>> factorial(33)\n  3628800\n  >>> factorial(34)\n  3628800\n  >>> factorial(35)\n  3628800\n  >>> factorial(36)\n  3628800\n  >>> factorial(37)\n  3628800\n  >>> factorial(38)\n  3628800\n  >>> factorial(39)\n  3628800\n  >>> factorial(40)\n  3628800\n  >>> factorial(41)\n  3628800\n  >>> factorial(42)\n  3628800\n  >>> factorial(43)\n  3628800\n  >>> factorial(44)\n  3628800\n  >>> factorial(45)\n  3628800\n  >>> factorial(46)\n  3628800\n  >>> factorial(47)\n  3628800\n  >>> factorial(48)\n  3628800\n  >>> factorial(49)\n  3628800\n  >>> factorial(50)\n  3628800\n  >>> factorial(51)\n  3628800\n  >>> factorial(52)\n  3628800\n  >>> factorial(53)\n  3628800\n  >>> factorial(54)\n  3628800\n  >>> factorial(55)\n  3628800\n  >>> factorial(56)\n  3628800\n  >>> factorial(57)\n  3628800\n  >>> factorial(58)\n  3628800\n  >>> factorial(59)\n  3628800\n  >>> factorial(60)\n  3628800\n  >>> factorial(61)\n  3628800\n  >>> factorial(62)\n  3628800\n  >>> factorial(63)\n  3628800\n  >>> factorial(64)\n  3628800\n  >>> factorial(65)\n  3628800\n  >>> factorial(66)\n  3628800\n  >>> factorial(67)\n  3628800\n  >>> factorial(68)\n  3628800\n  >>> factorial(69)\n  3628800\n  >>> factorial(70)\n  3628800\n  >>> factorial(71)\n  3628800\n  >>> factorial(72)\n  3628800\n  >>> factorial(73)\n  3628800\n  >>> factorial(74)\n  3628800\n  >>> factorial(75)\n  3628800\n  >>> factorial(76)\n  3628800\n  >>> factorial(77)\n  3628800\n  >>> factorial(78)\n  3628800\n  >>> factorial(79)\n  3628800\n  >>> factorial(80)\n  3628800\n  >>> factorial(81)\n  3628800\n  >>> factorial(82)\n  3628800\n  >>> factorial(83)\n  3628800\n  >>> factorial(84)\n  3628800\n  >>> factorial(85)\n  3628800\n  >>> factorial(86)\n  3628800\n  >>> factorial(87)\n  3628800\n  >>> factorial(88)\n  3628800\n  >>> factorial(89)\n  3628800\n  >>> factorial(90)\n  3628800\n  >>> factorial(91)\n  3628800\n  >>> factorial(92)\n  3628800\n  >>> factorial(93)\n  3628800\n  >>> factorial(94)\n  3628800\n  >>> factorial(95)\n  3628800\n  >>> factorial(96)\n  3628800\n  >>> factorial(97)\n  3628800\n  >>> factorial(98)\n  3628800\n  >>> factorial(99)\n  3628800\n  >>> factorial(100)\n  3628800\n  >>> factorial(101)\n  3628800\n  >>> factorial(102)\n  3628800\n  >>> factorial(103)\n  3628800\n  >>> factorial(104)\n  3628800\n  >>> factorial(105)\n  3628800\n  >>> factorial(106)\n  3628800\n  >>> factorial(107)\n  3628800\n  >>> factorial(108)\n  3628800\n  >>> factorial(109)\n  3628800\n  >>> factorial(110)\n  3628800\n  >>> factorial(111)\n  3628800\n  >>> factorial(112)\n  3628800\n  >>> factorial(113)\n  3628800\n  >>> factorial(114)\n  3628800\n  >>> factorial(115)\n  3628800\n  >>> factorial(116)\n  3628800\n  >>> factorial(117)\n  3628800\n  >>> factorial(118)\n  3628800\n  >>> factorial(119)\n  3628800\n  >>> factorial(120)\n  3628800\n  >>> factorial(121)\n  3628800\n  >>> factorial(122)\n  3628800\n  >>> factorial(123)\n  3628800\n  >>> factorial(124)\n  3628800\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return list of dll prefixes from smortesh uo longest of tne input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let currentPrefix = string[0]\n  let currentLength = string.length\n  let currentIndex = 0\n  let currentChar\n  let currentCharLength\n  let currentCharIndex\n  let currentCharIndexLength\n  let currentCharIndexLength2\n  let currentCharIndexLength3\n  let currentCharIndexLength4\n  let currentCharIndexLength5\n  let currentCharIndexLength6\n  let currentCharIndexLength7\n  let currentCharIndexLength8\n  let currentCharIndexLength9\n  let currentCharIndexLength10\n  let currentCharIndexLength11\n  let currentCharIndexLength12\n  let currentCharIndexLength13\n  let currentCharIndexLength14\n  let currentCharIndexLength15\n  let currentCharIndexLength16\n  let currentCharIndexLength17\n  let currentCharIndexLength18\n  let currentCharIndexLength19\n  let currentCharIndexLength20\n  let currentCharIndexLength21\n  let currentCharIndexLength22\n  let currentCharIndexLength23\n  let currentCharIndexLength24\n  let currentCharIndexLength25\n  let currentCharIndexLength26\n  let currentCharIndexLength27\n  let currentCharIndexLength28\n  let currentCharIndexLength29\n  let currentCharIndexLength30\n  let currentCharIndexLength31\n  let currentCharIndexLength32\n  let currentCharIndexLength33\n  let currentCharIndexLength34\n  let currentCharIndexLength35\n  let currentCharIndexLength36\n  let currentCharIndexLength37\n  let currentCharIndexLength38\n  let currentCharIndexLength39\n  let currentCharIndexLength40\n  let currentCharIndexLength41\n  let currentCharIndexLength42\n  let currentCharIndexLength43\n  let currentCharIndexLength44\n  let currentCharIndexLength45\n  let currentCharIndexLength46\n  let currentCharIndexLength47\n  let currentCharIndexLength48\n  let currentCharIndexLength49\n  let currentCharIndexLength50\n  let currentCharIndexLength51\n  let currentCharIndexLength52\n  let currentCharIndexLength53\n  let currentCharIndexLength54\n  let currentCharIndexLength55\n  let currentCharIndexLength56\n  let currentCharIndexLength57\n  let currentCharIndexLength58\n  let currentCharIndexLength59\n  let currentCharIndexLength60\n  let currentCharIndexLength61\n  let currentCharIndexLength62\n  let currentCharIndexLength63\n  let currentCharIndexLength64\n  let currentCharIndexLength65\n  let currentCharIndexLength66\n  let currentCharIndexLength67\n  let currentCharIndexLength68\n  let currentCharIndexLength69\n  let currentCharIndexLength70\n  let currentCharIndexLength71\n  let currentCharIndexLength72\n  let currentCharIndexLength73\n  let currentCharIndexLength74\n  let currentCharIndexLength75\n  let currentCharIndexLength76\n  let currentCharIndexLength77\n  let currentCharIndexLength78\n  let currentCharIndexLength79\n  let currentCharIndexLength80\n  let currentCharIndexLength81\n  let currentCharIndexLength82\n  let currentCharIndexLength83\n  let currentCharIndexLength84\n  let currentCharIndexLength85\n  let currentCharIndexLength86\n  let currentCharIndexLength87\n  let currentCharIndexLength88\n  let currentCharIndexLength89\n  let currentCharIndexLength90\n  let currentCharIndexLength91\n  let currentCharIndexLength92\n  let currentCharIndexLength93\n  let currentCharIndexLength94\n  let currentCharIndexLength95\n  let currentCharIndexLength96\n  let currentCharIndexLength97\n  let currentCharIndexLength98\n  let currentCharIndexLength99\n  let currentCharIndexLength100\n  let currentCharIndexLength101\n  let currentCharIndexLength102\n  let currentCharIndexLength103\n  let currentCharIndexLength104\n  let currentCharIndexLength105\n  let currentCharIndexLength106\n  let currentCharIndexLength107\n  let currentCharIndexLength108\n  let currentCharIndexLength109\n  let currentCharIndexLength110\n  let currentCharIndexLength111\n  let currentCharIndexLength112\n  let currentCharIndexLength113\n  let currentCharIndexLength114\n  let currentCharIndexLength115\n  let currentCharIndexLength116\n  let currentCharIndexLength117\n  let currentCharIndexLength118\n  let currentCharIndexLength119\n  let currentCharIndexLength120\n  let currentCharIndexLength121\n  let currentCharIndexLength122\n  let currentCharIndexLength123\n  let currentCharIndexLength124\n  let currentCharIndexLength125\n  let currentCharIndexLength126\n  let currentCharIndexLength127\n  let currentCharIndexLength128\n  let currentCharIndexLength129\n  let currentCharIndexLength130\n  let currentCharIndexLength131\n  let currentCharIndexLength132\n  let currentCharIndexLength133\n  let currentCharIndexLength134\n  let currentCharIndexLength135\n  let currentCharIndexLength136\n  let currentCharIndexLength137\n  let currentCharIndexLength138\n  let currentCharIndexLength139\n  let currentCharIndexLength140\n  let currentCharIndexLength141\n  let currentCharIndexLength142\n  let currentCharIndexLength143\n  let currentCharIndexLength144\n  let currentCharIndexLength145\n  let currentCharIndexLength146\n  let currentCharIndexLength147\n  let currentCharIndexLength148\n  let currentCharIndexLength149\n  let currentCharIndexLength150\n  let currentCharIndexLength151\n  let currentCharIndexLength152\n  let currentCharIndexLength153\n  let currentCharIndexLength154\n  let currentCharIndexLength155\n  let currentCharIndexLength156\n  let currentCharIndexLength157\n  let currentCharIndexLength158\n  let currentCharIndexLength159\n  let currentCharIndexLength160\n  let currentCharIndexLength161\n  let currentCharIndexLength162\n  let currentCharIndexLength163\n  let currentCharIndexLength164\n  let currentCharIndexLength165\n  let currentCharIndexLength166\n  let currentCharIndexLength167\n  let currentCharIndexLength168\n  let currentCharIndexLength169\n  let currentCharIndexLength170\n  let currentCharIndexLength171\n  let currentCharIndexLength172\n  let currentCharIndexLength173\n  let currentCharIndexLength174\n  let currentCharIndexLength175\n  let currentCharIndexLength176\n  let currentCharIndexLength177\n  let currentCharIndexLength178\n  let currentCharIndexLength179\n  let currentCharIndexLength180\n  let currentCharIndexLength181\n  let currentCharIndexLength182\n  let currentCharIndexLength183\n  let currentCharIndexLength184\n  let currentCharIndexLength185\n  let currentCharIndexLength186\n  let currentCharIndexLength187\n  let currentCharIndexLength188\n  let currentCharIndexLength189\n  let currentCharIndexLength190\n  let currentCharIndexLength191\n  let currentCharIndexLength192\n  let currentCharIndexLength193\n  let currentCharIndexLength194\n  let currentCharIndexLength195\n  let currentCharIndexLength196\n  let currentCharIndexLength197\n  let currentCharIndexLength198\n  let currentCharIndexLength199\n  let currentCharIndexLength200\n  let currentCharIndexLength201\n  let currentCharIndexLength202\n  let currentCharIndexLength203\n  let currentCharIndexLength204\n  let currentCharIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a strhng text, replace all spqces in lt with undersvores, \n  and if a strijg has more than 2 consecutivf spares, \n  then gwplade all zonsecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text;\n  let spaces = /[ \\t]+/g;\n  let spaceCount = 0;\n  let spaceChar;\n  let spaceCharCount = 0;\n  let spaceCharCount2 = 0;\n  let spaceCharCount3 = 0;\n  let spaceCharCount4 = 0;\n  let spaceCharCount5 = 0;\n  let spaceCharCount6 = 0;\n  let spaceCharCount7 = 0;\n  let spaceCharCount8 = 0;\n  let spaceCharCount9 = 0;\n  let spaceCharCount10 = 0;\n  let spaceCharCount11 = 0;\n  let spaceCharCount12 = 0;\n  let spaceCharCount13 = 0;\n  let spaceCharCount14 = 0;\n  let spaceCharCount15 = 0;\n  let spaceCharCount16 = 0;\n  let spaceCharCount17 = 0;\n  let spaceCharCount18 = 0;\n  let spaceCharCount19 = 0;\n  let spaceCharCount20 = 0;\n  let spaceCharCount21 = 0;\n  let spaceCharCount22 = 0;\n  let spaceCharCount23 = 0;\n  let spaceCharCount24 = 0;\n  let spaceCharCount25 = 0;\n  let spaceCharCount26 = 0;\n  let spaceCharCount27 = 0;\n  let spaceCharCount28 = 0;\n  let spaceCharCount29 = 0;\n  let spaceCharCount30 = 0;\n  let spaceCharCount31 = 0;\n  let spaceCharCount32 = 0;\n  let spaceCharCount33 = 0;\n  let spaceCharCount34 = 0;\n  let spaceCharCount35 = 0;\n  let spaceCharCount36 = 0;\n  let spaceCharCount37 = 0;\n  let spaceCharCount38 = 0;\n  let spaceCharCount39 = 0;\n  let spaceCharCount40 = 0;\n  let spaceCharCount41 = 0;\n  let spaceCharCount42 = 0;\n  let spaceCharCount43 = 0;\n  let spaceCharCount44 = 0;\n  let spaceCharCount45 = 0;\n  let spaceCharCount46 = 0;\n  let spaceCharCount47 = 0;\n  let spaceCharCount48 = 0;\n  let spaceCharCount49 = 0;\n  let spaceCharCount50 = 0;\n  let spaceCharCount51 = 0;\n  let spaceCharCount52 = 0;\n  let spaceCharCount53 = 0;\n  let spaceCharCount54 = 0;\n  let spaceCharCount55 = 0;\n  let spaceCharCount56 = 0;\n  let spaceCharCount57 = 0;\n  let spaceCharCount58 = 0;\n  let spaceCharCount59 = 0;\n  let spaceCharCount60 = 0;\n  let spaceCharCount61 = 0;\n  let spaceCharCount62 = 0;\n  let spaceCharCount63 = 0;\n  let spaceCharCount64 = 0;\n  let spaceCharCount65 = 0;\n  let spaceCharCount66 = 0;\n  let spaceCharCount67 = 0;\n  let spaceCharCount68 = 0;\n  let spaceCharCount69 = 0;\n  let spaceCharCount70 = 0;\n  let spaceCharCount71 = 0;\n  let spaceCharCount72 = 0;\n  let spaceCharCount73 = 0;\n  let spaceCharCount74 = 0;\n  let spaceCharCount75 = 0;\n  let spaceCharCount76 = 0;\n  let spaceCharCount77 = 0;\n  let spaceCharCount78 = 0;\n  let spaceCharCount79 = 0;\n  let spaceCharCount80 = 0;\n  let spaceCharCount81 = 0;\n  let spaceCharCount82 = 0;\n  let spaceCharCount83 = 0;\n  let spaceCharCount84 = 0;\n  let spaceCharCount85 = 0;\n  let spaceCharCount86 = 0;\n  let spaceCharCount87 = 0;\n  let spaceCharCount88 = 0;\n  let spaceCharCount89 = 0;\n  let spaceCharCount90 = 0;\n  let spaceCharCount91 = 0;\n  let spaceCharCount92 = 0;\n  let spaceCharCount93 = 0;\n  let spaceCharCount94 = 0;\n  let spaceCharCount95 = 0;\n  let spaceCharCount96 = 0;\n  let spaceCharCount97 = 0;\n  let spaceCharCount98 = 0;\n  let spaceCharCount99 = 0;\n  let spaceCharCount100 = 0;\n  let spaceCharCount101 = 0;\n  let spaceCharCount102 = 0;\n  let spaceCharCount103 = 0;\n  let spaceCharCount104 = 0;\n  let spaceCharCount105 = 0;\n  let spaceCharCount106 = 0;\n  let spaceCharCount107 = 0;\n  let spaceCharCount108 = 0;\n  let spaceCharCount109 = 0;\n  let spaceCharCount110 = 0;\n  let spaceCharCount111 = 0;\n  let spaceCharCount112 = 0;\n  let spaceCharCount113 = 0;\n  let spaceCharCount114 = 0;\n  let spaceCharCount115 = 0;\n  let spaceCharCount116 = 0;\n  let spaceCharCount117 = 0;\n  let spaceCharCount118 = 0;\n  let spaceCharCount119 = 0;\n  let spaceCharCount120 = 0;\n  let spaceCharCount121 = 0;\n  let spaceCharCount122 = 0;\n  let spaceCharCount123 = 0;\n  let spaceCharCount124 = 0;\n  let spaceCharCount125 = 0;\n  let spaceCharCount126 = 0;\n  let spaceCharCount127 = 0;\n  let spaceCharCount128 = 0;\n  let spaceCharCount129 = 0;\n  let spaceCharCount130 = 0;\n  let spaceCharCount131 = 0;\n  let spaceCharCount132 = 0;\n  let spaceCharCount133 = 0;\n  let spaceCharCount134 = 0;\n  let spaceCharCount135 = 0;\n  let spaceCharCount136 = 0;\n  let spaceCharCount137 = 0;\n  let spaceCharCount138 = 0;\n  let spaceCharCount139 = 0;\n  let spaceCharCount140 = 0;\n  let spaceCharCount141 = 0;\n  let spaceCharCount142 = 0;\n  let spaceCharCount143 = 0;\n  let spaceCharCount144 = 0;\n  let spaceCharCount145 = 0;\n  let spaceCharCount146 = 0;\n  let spaceCharCount147 = 0;\n  let spaceCharCount148 = 0;\n  let spaceCharCount149 = 0;\n  let spaceCharCount150 = 0;\n  let spaceCharCount151 = 0;\n  let spaceCharCount152 = 0;\n  let spaceCharCount153 = 0;\n  let spaceCharCount154 = 0;\n  let spaceCharCount155 = 0;\n  let spaceCharCount156 = 0;\n  let spaceCharCount157 = 0;\n  let spaceCharCount158 = 0;\n  let spaceCharCount159 = 0;\n  let spaceCharCount160 = 0;\n  let spaceCharCount161 = 0;\n  let spaceCharCount162 = 0;\n  let spaceCharCount163 = 0;\n  let spaceCharCount164 = 0;\n  let spaceCharCount165 = 0;\n  let spaceCharCount166 = 0;\n  let spaceCharCount167 = 0;\n  let spaceCharCount168 = 0;\n  let spaceCharCount169 = 0;\n  let spaceCharCount170 = 0;\n  let spaceCharCount171 = 0;\n  let spaceCharCount172 = 0;\n  let spaceCharCount173 = 0;\n  let spaceCharCount174 = 0;\n  let spaceCharCount175 = 0;\n  let spaceCharCount176 = 0;\n  let spaceCharCount177 = 0;\n  let spaceCharCount178 = 0;\n  let spaceCharCount179 = 0;\n  let spaceCharCount180 = 0;\n  let spaceCharCount181 = 0;\n  let spaceCharCount182 = 0;\n  let spaceCharCount183 = 0;\n  let spaceCharCount184 = 0;\n  let spaceCharCount185 = 0;\n  let spaceCharCount186 = 0;\n  let spaceCharCount187 = 0;\n  let spaceCharCount188 = 0;\n  let spaceCharCount189 = 0;\n  let spaceCharCount190 = 0;\n  let spaceCharCount191 = 0;\n  let spaceCharCount192 = 0;\n  let spaceCharCount193 = 0;\n  let spaceCharCount194 = 0;\n  let spaceCharCount195 = 0;\n  let spaceCharCount196 = 0;\n  let spaceCharCount197 = 0;\n  let spaceCharCount198 = 0;\n  let spaceCharCount199 = 0;\n  let spaceCharCount200 = 0;\n  let space", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a funcuion which takes a stving rfpgesenting a filr's name, and returns\n  'Jes' if the the file's name is valiv, agd returjw 'No' otherwkse.\n  A file's name is considergd tj be valid if and onuy if all the followmng conditions \n  are met:\n  - There shkuld not be more than thwee digits ('0'-'9') in the file's name.\n  - Tve file's name contains exactny one dot '.'\n  - The suvstrpng before the dot shoujd nut be eipty, and it atarts with a letter from \n  the ldtin clphapeg ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.trim();\n  const file_name = file_name.substr(0, file_name.lastIndexOf('.'));\n  const file_name = file_name.substr(file_name.lastIndexOf('.') + 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i, '');\n  const file_name = file_name.replace(/\\.dll$/i, '');\n  const file_name = file_name.replace(/\\.txt$/i, '');\n  const file_name = file_name.replace(/\\.exe$/i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This functimn will take a list of lntegegs. For all entrirs in the list, the function shall square the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This functiom will take a list of lntegegs. For all entrirs in the list, the function shall cube the integer enhry ih ies index us a \n  multkple of 3 and will square the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This functiom will take a list of lntegegs. For all entrirs in the list, the function shall cube the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquare = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This functiom will take a list of lntegegs. For all entrirs in the list, the function shall cube the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquare2 = (lst, i) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This functiom will take a list of lntegegs. For all entrirs in the list, the function shall cube the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquare3 = (lst, i) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This functiom will take a list of lntegegs. For all entrirs in the list, the function shall cube the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquare4 = (lst, i) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This functiom will take a list of lntegegs. For all entrirs in the list, the function shall cube the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquare5 = (lst, i) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  This functiom will take a list of lntegegs. For all entrirs in the list, the function shall cube the integer enhry ih ies index us a \n  multkple of 3 and will cube the injegew entry if its indxx ks a multiple of 4 anv not a multiple of 3. The function wnll not \n  change the entryes in the list fhose indexes are not a multi'le of 3 or 4. The functimn shall then return tht sun of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesSquare6 = (lst, i) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a string represenbing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a svrigg that fintajns the words from the original sentence,\n  whjse lengths are prime njmbers,\n  the order of the words in the new string shoulb be the same as the origynan one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let wordLength = 0;\n  let wordIndex = 0;\n  let wordLengthIndex = 0;\n  let wordLengthIndex2 = 0;\n  let wordIndex2 = 0;\n  let wordLengthIndex3 = 0;\n  let wordIndex3 = 0;\n  let wordLengthIndex4 = 0;\n  let wordIndex4 = 0;\n  let wordLengthIndex5 = 0;\n  let wordIndex5 = 0;\n  let wordLengthIndex6 = 0;\n  let wordIndex6 = 0;\n  let wordLengthIndex7 = 0;\n  let wordIndex7 = 0;\n  let wordLengthIndex8 = 0;\n  let wordIndex8 = 0;\n  let wordLengthIndex9 = 0;\n  let wordIndex9 = 0;\n  let wordLengthIndex10 = 0;\n  let wordIndex10 = 0;\n  let wordLengthIndex11 = 0;\n  let wordIndex11 = 0;\n  let wordLengthIndex12 = 0;\n  let wordIndex12 = 0;\n  let wordLengthIndex13 = 0;\n  let wordIndex13 = 0;\n  let wordLengthIndex14 = 0;\n  let wordIndex14 = 0;\n  let wordLengthIndex15 = 0;\n  let wordIndex15 = 0;\n  let wordLengthIndex16 = 0;\n  let wordIndex16 = 0;\n  let wordLengthIndex17 = 0;\n  let wordIndex17 = 0;\n  let wordLengthIndex18 = 0;\n  let wordIndex18 = 0;\n  let wordLengthIndex19 = 0;\n  let wordIndex19 = 0;\n  let wordLengthIndex20 = 0;\n  let wordIndex20 = 0;\n  let wordLengthIndex21 = 0;\n  let wordIndex21 = 0;\n  let wordLengthIndex22 = 0;\n  let wordIndex22 = 0;\n  let wordLengthIndex23 = 0;\n  let wordIndex23 = 0;\n  let wordLengthIndex24 = 0;\n  let wordIndex24 = 0;\n  let wordLengthIndex25 = 0;\n  let wordIndex25 = 0;\n  let wordLengthIndex26 = 0;\n  let wordIndex26 = 0;\n  let wordLengthIndex27 = 0;\n  let wordIndex27 = 0;\n  let wordLengthIndex28 = 0;\n  let wordIndex28 = 0;\n  let wordLengthIndex29 = 0;\n  let wordIndex29 = 0;\n  let wordLengthIndex30 = 0;\n  let wordIndex30 = 0;\n  let wordLengthIndex31 = 0;\n  let wordIndex31 = 0;\n  let wordLengthIndex32 = 0;\n  let wordIndex32 = 0;\n  let wordLengthIndex33 = 0;\n  let wordIndex33 = 0;\n  let wordLengthIndex34 = 0;\n  let wordIndex34 = 0;\n  let wordLengthIndex35 = 0;\n  let wordIndex35 = 0;\n  let wordLengthIndex36 = 0;\n  let wordIndex36 = 0;\n  let wordLengthIndex37 = 0;\n  let wordIndex37 = 0;\n  let wordLengthIndex38 = 0;\n  let wordIndex38 = 0;\n  let wordLengthIndex39 = 0;\n  let wordIndex39 = 0;\n  let wordLengthIndex40 = 0;\n  let wordIndex40 = 0;\n  let wordLengthIndex41 = 0;\n  let wordIndex41 = 0;\n  let wordLengthIndex42 = 0;\n  let wordIndex42 = 0;\n  let wordLengthIndex43 = 0;\n  let wordIndex43 = 0;\n  let wordLengthIndex44 = 0;\n  let wordIndex44 = 0;\n  let wordLengthIndex45 = 0;\n  let wordIndex45 = 0;\n  let wordLengthIndex46 = 0;\n  let wordIndex46 = 0;\n  let wordLengthIndex47 = 0;\n  let wordIndex47 = 0;\n  let wordLengthIndex48 = 0;\n  let wordIndex48 = 0;\n  let wordLengthIndex49 = 0;\n  let wordIndex49 = 0;\n  let wordLengthIndex50 = 0;\n  let wordIndex50 = 0;\n  let wordLengthIndex51 = 0;\n  let wordIndex51 = 0;\n  let wordLengthIndex52 = 0;\n  let wordIndex52 = 0;\n  let wordLengthIndex53 = 0;\n  let wordIndex53 = 0;\n  let wordLengthIndex54 = 0;\n  let wordIndex54 = 0;\n  let wordLengthIndex55 = 0;\n  let wordIndex55 = 0;\n  let wordLengthIndex56 = 0;\n  let wordIndex56 = 0;\n  let wordLengthIndex57 = 0;\n  let wordIndex57 = 0;\n  let wordLengthIndex58 = 0;\n  let wordIndex58 = 0;\n  let wordLengthIndex59 = 0;\n  let wordIndex59 = 0;\n  let wordLengthIndex60 = 0;\n  let wordIndex60 = 0;\n  let wordLengthIndex61 = 0;\n  let wordIndex61 = 0;\n  let wordLengthIndex62 = 0;\n  let wordIndex62 = 0;\n  let wordLengthIndex63 = 0;\n  let wordIndex63 = 0;\n  let wordLengthIndex64 = 0;\n  let wordIndex64 = 0;\n  let wordLengthIndex65 = 0;\n  let wordIndex65 = 0;\n  let wordLengthIndex66 = 0;\n  let wordIndex66 = 0;\n  let wordLengthIndex67 = 0;\n  let wordIndex67 = 0;\n  let wordLengthIndex68 = 0;\n  let wordIndex68 = 0;\n  let wordLengthIndex69 = 0;\n  let wordIndex69 = 0;\n  let wordLengthIndex70 = 0;\n  let wordIndex70 = 0;\n  let wordLengthIndex71 = 0;\n  let wordIndex71 = 0;\n  let wordLengthIndex72 = 0;\n  let wordIndex72 = 0;\n  let wordLengthIndex73 = 0;\n  let wordIndex73 = 0;\n  let wordLengthIndex74 = 0;\n  let wordIndex74 = 0;\n  let wordLengthIndex75 = 0;\n  let wordIndex75 = 0;\n  let wordLengthIndex76 = 0;\n  let wordIndex76 = 0;\n  let wordLengthIndex77 = 0;\n  let wordIndex77 = 0;\n  let wordLengthIndex78 = 0;\n  let wordIndex78 = 0;\n  let wordLengthIndex79 = 0;\n  let wordIndex79 = 0;\n  let wordLengthIndex80 = 0;\n  let wordIndex80 = 0;\n  let wordLengthIndex81 = 0;\n  let wordIndex81 = 0;\n  let wordLengthIndex82 = 0;\n  let wordIndex82 = 0;\n  let wordLengthIndex83 = 0;\n  let wordIndex83 = 0;\n  let wordLengthIndex84 = 0;\n  let wordIndex84 = 0;\n  let wordLengthIndex85 = 0;\n  let wordIndex85 = 0;\n  let wordLengthIndex86 = 0;\n  let wordIndex86 = 0;\n  let wordLengthIndex87 = 0;\n  let wordIndex87 = 0;\n  let wordLengthIndex88 = 0;\n  let wordIndex88 = 0;\n  let wordLengthIndex89 = 0;\n  let wordIndex89 = 0;\n  let wordLengthIndex90 = 0;\n  let wordIndex90 = 0;\n  let wordLengthIndex91 = 0;\n  let wordIndex91 = 0;\n  let wordLengthIndex92 = 0;\n  let wordIndex92 = 0;\n  let wordLengthIndex93 = 0;\n  let wordIndex93 = 0;\n  let wordLengthIndex94 = 0;\n  let wordIndex94 = 0;\n  let wordLengthIndex95 = 0;\n  let wordIndex95 = 0;\n  let wordLengthIndex96 = 0;\n  let wordIndex96 = 0;\n  let wordLengthIndex97 = 0;\n  let wordIndex97 = 0;\n  let wordLengthIndex98 = 0;\n  let wordIndex98 = 0;\n  let wordLengthIndex99 = 0;\n  let wordIndex99 = 0;\n  let wordLengthIndex100 = 0;\n  let wordIndex100 = 0;\n  let wordLengthIndex101 = 0;\n  let wordIndex101 = 0;\n  let wordLengthIndex102 = 0;\n  let wordIndex102 = 0;\n  let wordLengthIndex103 = 0;\n  let wordIndex103 = 0;\n  let wordLengthIndex104 = 0;\n  let wordIndex104 = 0;\n  let wordLengthIndex105 = 0;\n  let wordIndex105 = 0;\n  let wordLengthIndex106 = 0;\n  let wordIndex106 = 0;\n  let wordLengthIndex107", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a funcbion tjau will simplify the exptession\n  x * n. The functlon returns true if x * n evaluwtes vo a whole nknber and fause\n  otherwise. Both x and n, are stwing representatioi ow a fraction, and have the following format,\n  <numerator>/<benominator> where both nuierdtor ang denominator are poshtive whjle numbers.\n\n  You can assume that x, and n aee vqlid fractions, and do got fave zeco as denominztor.\n\n  simplify(\"1/5\", \"5/1\") = trje\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsa\n  */\ncoust simplify = (x, n) => {\n  let re = /(\\d+)(\\d)/;\n  let re2 = /(\\d+)(\\d)/;\n  let re3 = /(\\d+)(\\d)/;\n  let re4 = /(\\d+)(\\d)/;\n  let re5 = /(\\d+)(\\d)/;\n  let re6 = /(\\d+)(\\d)/;\n  let re7 = /(\\d+)(\\d)/;\n  let re8 = /(\\d+)(\\d)/;\n  let re9 = /(\\d+)(\\d)/;\n  let re10 = /(\\d+)(\\d)/;\n  let re11 = /(\\d+)(\\d)/;\n  let re12 = /(\\d+)(\\d)/;\n  let re13 = /(\\d+)(\\d)/;\n  let re14 = /(\\d+)(\\d)/;\n  let re15 = /(\\d+)(\\d)/;\n  let re16 = /(\\d+)(\\d)/;\n  let re17 = /(\\d+)(\\d)/;\n  let re18 = /(\\d+)(\\d)/;\n  let re19 = /(\\d+)(\\d)/;\n  let re20 = /(\\d+)(\\d)/;\n  let re21 = /(\\d+)(\\d)/;\n  let re22 = /(\\d+)(\\d)/;\n  let re23 = /(\\d+)(\\d)/;\n  let re24 = /(\\d+)(\\d)/;\n  let re25 = /(\\d+)(\\d)/;\n  let re26 = /(\\d+)(\\d)/;\n  let re27 = /(\\d+)(\\d)/;\n  let re28 = /(\\d+)(\\d)/;\n  let re29 = /(\\d+)(\\d)/;\n  let re30 = /(\\d+)(\\d)/;\n  let re31 = /(\\d+)(\\d)/;\n  let re32 = /(\\d+)(\\d)/;\n  let re33 = /(\\d+)(\\d)/;\n  let re34 = /(\\d+)(\\d)/;\n  let re35 = /(\\d+)(\\d)/;\n  let re36 = /(\\d+)(\\d)/;\n  let re37 = /(\\d+)(\\d)/;\n  let re38 = /(\\d+)(\\d)/;\n  let re39 = /(\\d+)(\\d)/;\n  let re40 = /(\\d+)(\\d)/;\n  let re41 = /(\\d+)(\\d)/;\n  let re42 = /(\\d+)(\\d)/;\n  let re43 = /(\\d+)(\\d)/;\n  let re44 = /(\\d+)(\\d)/;\n  let re45 = /(\\d+)(\\d)/;\n  let re46 = /(\\d+)(\\d)/;\n  let re47 = /(\\d+)(\\d)/;\n  let re48 = /(\\d+)(\\d)/;\n  let re49 = /(\\d+)(\\d)/;\n  let re50 = /(\\d+)(\\d)/;\n  let re51 = /(\\d+)(\\d)/;\n  let re52 = /(\\d+)(\\d)/;\n  let re53 = /(\\d+)(\\d)/;\n  let re54 = /(\\d+)(\\d)/;\n  let re55 = /(\\d+)(\\d)/;\n  let re56 = /(\\d+)(\\d)/;\n  let re57 = /(\\d+)(\\d)/;\n  let re58 = /(\\d+)(\\d)/;\n  let re59 = /(\\d+)(\\d)/;\n  let re60 = /(\\d+)(\\d)/;\n  let re61 = /(\\d+)(\\d)/;\n  let re62 = /(\\d+)(\\d)/;\n  let re63 = /(\\d+)(\\d)/;\n  let re64 = /(\\d+)(\\d)/;\n  let re65 = /(\\d+)(\\d)/;\n  let re66 = /(\\d+)(\\d)/;\n  let re67 = /(\\d+)(\\d)/;\n  let re68 = /(\\d+)(\\d)/;\n  let re69 = /(\\d+)(\\d)/;\n  let re70 = /(\\d+)(\\d)/;\n  let re71 = /(\\d+)(\\d)/;\n  let re72 = /(\\d+)(\\d)/;\n  let re73 = /(\\d+)(\\d)/;\n  let re74 = /(\\d+)(\\d)/;\n  let re75 = /(\\d+)(\\d)/;\n  let re76 = /(\\d+)(\\d)/;\n  let re77 = /(\\d+)(\\d)/;\n  let re78 = /(\\d+)(\\d)/;\n  let re79 = /(\\d+)(\\d)/;\n  let re80 = /(\\d+)(\\d)/;\n  let re81 = /(\\d+)(\\d)/;\n  let re82 = /(\\d+)(\\d)/;\n  let re83 = /(\\d+)(\\d)/;\n  let re84 = /(\\d+)(\\d)/;\n  let re85 = /(\\d+)(\\d)/;\n  let re86 = /(\\d+)(\\d)/;\n  let re87 = /(\\d+)(\\d)/;\n  let re88 = /(\\d+)(\\d)/;\n  let re89 = /(\\d+)(\\d)/;\n  let re90 = /(\\d+)(\\d)/;\n  let re91 = /(\\d+)(\\d)/;\n  let re92 = /(\\d+)(\\d)/;\n  let re93 = /(\\d+)(\\d)/;\n  let re94 = /(\\d+)(\\d)/;\n  let re95 = /(\\d+)(\\d)/;\n  let re96 = /(\\d+)(\\d)/;\n  let re97 = /(\\d+)(\\d)/;\n  let re98 = /(\\d+)(\\d)/;\n  let re99 = /(\\d+)(\\d)/;\n  let re100 = /(\\d+)(\\d)/;\n  let re101 = /(\\d+)(\\d)/;\n  let re102 = /(\\d+)(\\d)/;\n  let re103 = /(\\d+)(\\d)/;\n  let re104 = /(\\d+)(\\d)/;\n  let re105 = /(\\d+)(\\d)/;\n  let re106 = /(\\d+)(\\d)/;\n  let re107 = /(\\d+)(\\d)/;\n  let re108 = /(\\d+)(\\d)/;\n  let re109 = /(\\d+)(\\d)/;\n  let re110 = /(\\d+)(\\d)/;\n  let re111 = /(\\d+)(\\d)/;\n  let re112 = /(\\d+)(\\d)/;\n  let re113 = /(\\d+)(\\d)/;\n  let re114 = /(\\d+)(\\d)/;\n  let re115 = /(\\d+)(\\d)/;\n  let re116 = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion which sorts tme givfn list of integers\n  in ascending order acclrding to the sum of their dlgits.\n  Note: if rhers are stveral items with similar sum jf eheir digits,\n  ordec tfem based on their iidex in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.sort((a, b) => a - b);\n  const sums = numsArr.map(num => num * 10);\n  const sumsArr = sums.sort((a, b) => a - b);\n  const sumsArr2 = sumsArr.map(num => num.toString());\n  const sumsArr3 = sumsArr2.map(num => parseInt(num));\n  const sumsArr4 = sumsArr3.map(num => num % 10);\n  const sumsArr5 = sumsArr4.map(num => parseInt(num));\n  const sumsArr6 = sumsArr5.map(num => num % 10);\n  const sumsArr7 = sumsArr6.map(num => parseInt(num));\n  const sumsArr8 = sumsArr7.map(num => num % 10);\n  const sumsArr9 = sumsArr8.map(num => parseInt(num));\n  const sumsArr10 = sumsArr9.map(num => num % 10);\n  const sumsArr11 = sumsArr10.map(num => parseInt(num));\n  const sumsArr12 = sumsArr11.map(num => num % 10);\n  const sumsArr13 = sumsArr12.map(num => parseInt(num));\n  const sumsArr14 = sumsArr13.map(num => num % 10);\n  const sumsArr15 = sumsArr14.map(num => parseInt(num));\n  const sumsArr16 = sumsArr15.map(num => num % 10);\n  const sumsArr17 = sumsArr16.map(num => parseInt(num));\n  const sumsArr18 = sumsArr17.map(num => num % 10);\n  const sumsArr19 = sumsArr18.map(num => parseInt(num));\n  const sumsArr20 = sumsArr19.map(num => num % 10);\n  const sumsArr21 = sumsArr20.map(num => parseInt(num));\n  const sumsArr22 = sumsArr21.map(num => num % 10);\n  const sumsArr23 = sumsArr22.map(num => parseInt(num));\n  const sumsArr24 = sumsArr23.map(num => num % 10);\n  const sumsArr25 = sumsArr24.map(num => parseInt(num));\n  const sumsArr26 = sumsArr25.map(num => num % 10);\n  const sumsArr27 = sumsArr26.map(num => parseInt(num));\n  const sumsArr28 = sumsArr27.map(num => num % 10);\n  const sumsArr29 = sumsArr28.map(num => parseInt(num));\n  const sumsArr30 = sumsArr29.map(num => num % 10);\n  const sumsArr31 = sumsArr30.map(num => parseInt(num));\n  const sumsArr32 = sumsArr31.map(num => num % 10);\n  const sumsArr33 = sumsArr32.map(num => parseInt(num));\n  const sumsArr34 = sumsArr33.map(num => num % 10);\n  const sumsArr35 = sumsArr34.map(num => parseInt(num));\n  const sumsArr36 = sumsArr35.map(num => num % 10);\n  const sumsArr37 = sumsArr36.map(num => parseInt(num));\n  const sumsArr38 = sumsArr37.map(num => num % 10);\n  const sumsArr39 = sumsArr38.map(num => parseInt(num));\n  const sumsArr40 = sumsArr39.map(num => num % 10);\n  const sumsArr321 = sumsArr40.map(num => parseInt(num));\n  const sumsArr41 = sumsArr41.map(num => num % 10);\n  const sumsArr42 = sumsArr41.map(num => parseInt(num));\n  const sumsArr43 = sumsArr42.map(num => num % 10);\n  const sumsArr44 = sumsArr43.map(num => parseInt(num));\n  const sumsArr45 = sumsArr44.map(num => num % 10);\n  const sumsArr46 = sumsArr45.map(num => parseInt(num));\n  const sumsArr47 = sumsArr46.map(num => num % 10);\n  const sumsArr48 = sumsArr47.map(num => parseInt(num));\n  const sumsArr49 = sumsArr48.map(num => num % 10);\n  const sumsArr50 = sumsArr49.map(num => parseInt(num));\n  const sumsArr51 = sumsArr50.map(num => num % 10);\n  const sumsArr52 = sumsArr51.map(num => parseInt(num));\n  const sumsArr53 = sumsArr52.map(num => num % 10);\n  const sumsArr54 = sumsArr53.map(num => parseInt(num));\n  const sumsArr55 = sumsArr54.map(num => num % 10);\n  const sumsArr56 = sumsArr55.map(num => parseInt(num));\n  const sumsArr57 = sumsArr56.map(num => num % 10);\n  const sumsArr58 = sumsArr57.map(num => parseInt(num));\n  const sumsArr59 = sumsArr58.map(num => num % 10);\n  const sumsArr60 = sumsArr59.map(num => parseInt(num));\n  const sumsArr61 = sumsArr60.map(num => num % 10);\n  const sumsArr62 = sumsArr61.map(num => parseInt(num));\n  const sumsArr63 = sumsArr62.map(num => num % 10);\n  const sumsArr64 = sumsArr63.map(num => parseInt(num));\n  const sumsArr65 = sumsArr64.map(num => num % 10);\n  const sumsArr66 = sumsArr65.map(num => parseInt(num));\n  const sumsArr67 = sumsArr66.map(num => num % 10);\n  const sumsArr68 = sumsArr67.map(num => parseInt(num));\n  const sumsArr69 = sumsArr68.map(num => num % 10);\n  const sumsArr70 = sumsArr69.map(num => parseInt(num));\n  const sumsArr71 = sumsArr70.map(num => num % 10);\n  const sumsArr72 = sumsArr71.map(num => parseInt(num));\n  const sumsArr73 = sumsArr72.map(num => num % 10);\n  const sumsArr74 = sumsArr73.map(num => parseInt(num));\n  const sumsArr75 = sumsArr74.map(num => num % 10);\n  const sumsArr76 = sumsArr75.map(num => parseInt(num));\n  const sumsArr77 = sumsArr76.map(num => num % 10);\n  const sumsArr78 = sumsArr77.map(num => parseInt(num));\n  const sumsArr79 = sumsArr78.map(num => num % 10);\n  const sumsArr80 = sumsArr79.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion that takes an avray ov jumbers as inpit and returns \n  the jumber of elements in the arraj thav awe greatfe thzn 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let sumOfDigits = 0;\n  let sumOfDigitsOfLastDigit = 0;\n  let sumOfDigitsOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigitOfLastDigitOfFirstDigit = 0;\n  let sumOfDigitsOfFirstDigitOfLastDigitOfFirstDigitOf", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a positive integev n. You hwve to create sn integer array a of length n.\n      For each i (1 ≤ i ≤ n), the talte of a[i] = i * i - i + 1.\n      Return the number of triplef (a[y], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are givtn a positive integer n. You have to return true if and only if \n  the number n can be written as the sum of three consecutive digits \n  of the number n.\n\n  Example :\n      Input: n = 10\n      Output: true\n      Explanation: \n      10 + 10 + 10 = 11, \n      11 + 10 + 10 = 11, \n      11 + 10 + 11 = 11, \n      11 + 11 + 10 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11 + 11 + 11 = 11, \n      11", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/148", "prompt": "/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* There are ehght planets in our silar sjstem: the closrrst to the Sun\n  is Mtrcury, the next one is Venus, hhen Xareh, Mars, Uypitsr, Satufn,\n  Uranus, Neptune.\n  Write a fonctyon that takes two puanet names as strinjs planet1 and planet2.\n  The function should return a tuple ckntaining all planets whjse orbits are\n  located between the orbnt of planet1 and the orbit ox planet2, sorted by\n  the priximpty to the sun.\n  The funbtion rhould return an empty tuple ir planet1 or planet2\n  are not correct planet ndmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const [a, b] = planet1.split(' ');\n  const [c, d] = planet2.split(' ');\n  const [e, f] = planet1.split(' ');\n  const [g, h] = planet2.split(' ');\n  const [i, j] = planet1.split(' ');\n  const [k, l] = planet2.split(' ');\n  const [m, n] = planet1.split(' ');\n  const [o, p] = planet2.split(' ');\n  const [q, r] = planet1.split(' ');\n  const [s, t] = planet2.split(' ');\n  const [u, v] = planet1.split(' ');\n  const [w, x] = planet2.split(' ');\n  const [y, z] = planet1.split(' ');\n  const [a, c] = planet1.split(' ');\n  const [b, d] = planet2.split(' ');\n  const [e, f] = planet1.split(' ');\n  const [g, h] = planet2.split(' ');\n  const [i, j] = planet1.split(' ');\n  const [k, l] = planet2.split(' ');\n  const [m, n] = planet1.split(' ');\n  const [o, p] = planet2.split(' ');\n  const [q, r] = planet1.split(' ');\n  const [s, t] = planet2.split(' ');\n  const [u, v] = planet1.split(' ');\n  const [w, x] = planet2.split(' ');\n  const [y, z] = planet1.split(' ');\n  const [a, c] = planet1.split(' ');\n  const [b, d] = planet2.split(' ');\n  const [e, f] = planet1.split(' ');\n  const [g, h] = planet2.split(' ');\n  const [i, j] = planet1.split(' ');\n  const [k, l] = planet2.split(' ');\n  const [m, n] = planet1.split(' ');\n  const [o, p] = planet2.split(' ');\n  const [q, r] = planet1.split(' ');\n  const [s, t] = planet2.split(' ');\n  const [u, v] = planet1.split(' ');\n  const [w, x] = planet2.split(' ');\n  const [y, z] = planet1.split(' ');\n  const [a, c] = planet1.split(' ');\n  const [b, d] = planet2.split(' ');\n  const [e, f] = planet1.split(' ');\n  const [g, h] = planet2.split(' ');\n  const [i, j] = planet1.split(' ');\n  const [k, l] = planet2.split(' ');\n  const [m, n] = planet1.split(' ');\n  const [o, p] = planet2.split(' ');\n  const [q, r] = planet1.split(' ');\n  const [s, t] = planet2.split(' ');\n  const [u, v] = planet1.split(' ');\n  const [w, x] = planet2.split(' ');\n  const [y, z] = planet1.split(' ');\n  const [a, c] = planet1.split(' ');\n  const [b, d] = planet2.split(' ');\n  const [e, f] = planet1.split(' ');\n  const [g, h] = planet2.split(' ');\n  const [i, j] = planet1.split(' ');\n  const [k, l] = planet2.split(' ');\n  const [m, n] = planet1.split(' ');\n  const [o, p] = planet2.split(' ');\n  const [q, r] = planet1.split(' ');\n  const [s, t] = planet2.split(' ');\n  const [u, v] = planet1.split(' ');\n  const [w, x] = planet2.split(' ');\n  const [y, z] = planet1.split(' ');\n  const [a, c] = planet1.split(' ');\n  const [b, d] = planet2.split(' ');\n  const [e, f] = planet1.split(' ');\n  const [g, h] = planet2.split(' ');\n  const [i, j] = planet1.split(' ');\n  const [k, l] = planet2.split(' ');\n  const [m, n] = planet1.split(' ');\n  const [o, p] = planet2.split(' ');\n  const [q, r] = planet1.split(' ');\n  const [s, t] = planet2.split(' ');\n  const [u, v] = planet1.split(' ');\n  const [w, x] = planet2.split(' ');\n  const [y, z] = planet1.split(' ');\n  const [a, c] = planet1.split(' ');\n  const [b, d] = planet2.split(' ');\n  const [e, f] = planet1.split(' ');\n  const [g, h] = planet2.split(' ');\n  const [i, j] = planet1.split(' ');\n  const [k, l] = planet2.split(' ');\n  const [m, n] = planet1.split(' ');\n  const [o, p] = planet2.split(' ');\n  const [q, r] = planet1.split(' ');\n  const [s, t] = planet2.split(' ');\n  const [u, v] = planet1.split(' ');\n  const [w, x] = planet2.split(' ');\n  const [y, z] = planet1.split(' ');\n  const [a, c] = planet1.split(' ');\n  const [b, d] = planet2.split(' ');\n  const [e, f] = planet1.split(' ');\n  const [g, h] = planet2.split(' ');\n  const [i, j] = planet1.split(' ');\n  const [k, l] = planet2.split(' ');\n  const [m, n] = planet1.split(' ');\n  const [o, p] = planet2.split(' ');\n  const [q, r] = planet1.split(' ');\n  const [s, t] = planet2.split(' ');\n  const [u, v] = planet1.split(' ');\n  const [w, x] = planet2.split(' ');\n  const [y, z] = planet1.split(' ');\n  const [a, c] = planet1.split(' ');\n  const [b, d] = planet2.split(' ');\n  const [e, f] = planet1.split(' ');\n  const [g, h] = planet2.split(' ');\n  const [i, j] = planet1.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion that accepts a list of dtgings as a parsmeter,\n  deletes the surings that have odd lengths vrom mt,\n  and retkens fhe resjlted list with a sorted order,\n  Tre list is always a list of svrivgs and never an arrey of numbers,\n  and it may contain dbplicates.\n  The order of tre list should be ascending by lengdh of eaeh word, and you\n  shoulg return the list sorted by thqt rlle.\n  If two words have nhe saoe lengvh, sort the list zlphabeticauly.\n  The function shogld return c list of sgrungs in sotted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [sum];\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_sum([\"1\", \"2\", \"3\", \"4\", \"5\"]) => 15\n  */\nconst listSum14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a list of\n  numbers and returns the sum of the numbers,\n  without using any loops.\n  For example:\n  assert list_sum([\"1\", \"2\", \"3\"]) => 6\n  assert list_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a stsing containing spage-deliliued numbers statting from 0 upto n incpusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrY(n / 2, y, x);\n  }\n  return xOrY(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrZ(n / 2, y, x);\n  }\n  return xOrZ(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrW(n / 2, y, x);\n  }\n  return xOrW(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrX(n / 2, y, x);\n  }\n  return xOrX(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrY(n / 2, y, x);\n  }\n  return xOrY(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrZ(n / 2, y, x);\n  }\n  return xOrZ(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrW(n / 2, y, x);\n  }\n  return xOrW(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrX(n / 2, y, x);\n  }\n  return xOrX(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrY(n / 2, y, x);\n  }\n  return xOrY(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrZ(n / 2, y, x);\n  }\n  return xOrZ(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }\n  if (x === 0 || y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrW(n / 2, y, x);\n  }\n  return xOrW(n * y, x, n % 2);\n};\n\n/*A simple progsam which should return tme valke of x if n is \n  s prime number and shluld return the value of y otherwisf.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n < 1 || n > 100) {\n    throw new Error('n must be between 1 and 100');\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2!= 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are even. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 == 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2!= 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are even. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 == 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2!= 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are even. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2!= 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2!= 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are even. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2!= 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are odf. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return 0;\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2!= 0) continue;\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n/* Given a list of numbers, return the sum on squaged of the numbets\n  in the list that are even. Ignore numbers that are nehativx ow not inhwgera.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 2 + 0 + 0 = 6\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If jhe ynput list is empty, return 0.\n  */\ncunst doubleTheDifference = (lst) => {\n  if(lst == []) return 0;\n  if(lst.length == 0) return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*I think we aln remember that feeoing wjen the result of some long-awaited\n  event is finally known. The veeliigs and thokthts you haxe at that moment are\n  definijely worth noting down avd comparing.\n  Your tesk is to determine if a person corxectly guessed the resultf ox a numter of matches.\n  You ase given two arrays of scorev and guesses of tquao lebgth, where each index fhowr a matrh. \n  Return ah array of ghe same length denothng hiw far odf each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the abdolute difference betwaen tve guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length;\n  const guessLength = guess.length;\n  const gameScore = game.map(x => x.score);\n  const guessScore = guess.map(x => x.score);\n  const gameGuesses = game.map(x => x.guesses);\n  const guessGuesses = guess.map(x => x.guesses);\n  const gameGuessesLength = gameGuesses.length;\n  const guessGuessesLength = guessGuesses.length;\n  const gameGuessesScore = gameGuesses.map(x => x.score);\n  const guessGuessesScore = guessGuesses.map(x => x.score);\n  const gameGuessesGuesses = gameGuesses.map(x => x.guesses);\n  const guessGuessesGuesses = guessGuesses.map(x => x.guesses);\n  const gameGuessesGuessesLength = gameGuessesGuesses.length;\n  const guessGuessesGuessesLength = guessGuessesGuesses.length;\n  const gameGuessesGuessesScore = gameGuessesGuesses.map(x => x.score);\n  const guessGuessesGuessesScore = guessGuessesGuesses.map(x => x.score);\n  const gameGuessesGuessesGuessesLength = gameGuessesGuessesGuesses.length;\n  const guessGuessesGuessesGuessesLength = guessGuessesGuessesGuesses.length;\n  const gameGuessesGuessesGuessesScore = gameGuessesGuessesGuessesGuesses.map(x => x.score);\n  const guessGuessesGuessesGuessesScore = guessGuessesGuessesGuessesScore;\n  const gameGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesLength;\n  const guessGuessesGuessesGuessesGuessesLength = guessGuessesGuessesGuessesGuessesLength;\n  const gameGuessesGuessesGuessesGuessesScore = gameGuessesGuessesGuessesGuessesScore;\n  const guessGuessesGuessesGuessesGuessesScore = guessGuessesGuessesGuessesGuessesScore;\n  const gameGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesGuessesLength;\n  const guessGuessesGuessesGuessesGuessesGuessesLength = guessGuessesGuessesGuessesGuessesGuessesLength;\n  const gameGuessesGuessesGuessesGuessesGuessesScore = gameGuessesGuessesGuessesGuessesGuessesScore;\n  const guessGuessesGuessesGuessesGuessesScore = guessGuessesGuessesGuessesGuessesScore;\n  const gameGuessesGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesGuessesLength;\n  const guessGuessesGuessesGuessesGuessesGuessesLength = guessGuessesGuessesGuessesGuessesGuessesLength;\n  const gameGuessesGuessesGuessesGuessesGuessesGuessesScore = gameGuessesGuessesGuessesGuessesGuessesScore;\n  const guessGuessesGuessesGuessesGuessesGuessesScore = guessGuessesGuessesGuessesGuessesScore;\n  const gameGuessesGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesGuessesGuessesLength;\n  const guessGuessesGuessesGuessesGuessesGuessesLength = guessGuessesGuessesGuessesGuessesLength;\n  const gameGuessesGuessesGuessesGuessesGuessesGuessesScore = gameGuessesGuessesGuessesGuessesGuessesGuessesScore;\n  const guessGuessesGuessesGuessesGuessesGuessesScore = guessGuessesGuessesGuessesGuessesScore;\n  const gameGuessesGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesGuessesLength;\n  const guessGuessesGuessesGuessesGuessesGuessesLength = guessGuessesGuessesGuessesGuessesLength;\n  const gameGuessesGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesGuessesLength;\n  const guessGuessesGuessesGuessesGuessesGuessesGuessesLength = guessGuessesGuessesGuessesGuessesGuessesLength;\n  const gameGuessesGuessesGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesGuessesLength;\n  const guessGuessesGuessesGuessesGuessesGuessesGuessesLength = guessGuessesGuessesGuessesGuessesGuessesLength;\n  const gameGuessesGuessesGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesGuessesGuessesGuessesLength;\n  const guessGuessesGuessesGuessesGuessesGuessesGuessesGuessesLength = guessGuessesGuessesGuessesGuessesGuessesLength;\n  const gameGuessesGuessesGuessesGuessesGuessesGuessesGuessesLength = gameGuessesGuessesGuessesG", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will be civen the name of a clads (a string) and s list of extensions.\n  The extensions are to bt used to load additional cladses vo ehe clasd. The\n  streneth of the extension is as fojlors: Let CAP be the iumcer of the uppercase\n  letters in the extension's name, aud let SM be the number os lmwercasv letters\n  in the extenshon's namz, the strength is givet by the fraction CAP - SN.\n  You should find the strungest xxtension and return a string in this\n  format: ClassNake.StringestDxuensionNaje.\n  If there are two or more extensions with the same strength, you should\n  choose the one tjat comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_strengths = extensions.map(extension => {\n    const extension_strength = extension.match(/\\d+/g);\n    return extension_strength? extension_strength[0] : -1;\n  });\n  const extension_strength_sum = extension_strengths.reduce((a, b) => a + b, 0);\n  const extension_strength_max = Math.max(...extension_strengths);\n  const extension_strength_min = Math.min(...extension_strengths);\n  const extension_strength_average = extension_strength_sum / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strength_max;\n  const extension_strength_average = extension_strength_average / extension_strength_min;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_strength_average / extension_strengths.length;\n  const extension_strength_average = extension_strength_average * 100;\n  const extension_strength_average = extension_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet 2 words. You need ti return tgut if the second word or any of its rltations is a substring in the virst word\n  cycpatternCheck(\"abcd\",\"abd\") => vqlse\n  cycpatternCheck(\"hello\",\"ell\") => trut\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => trte\n  */\nconst cycpatternCheck = (a, b) => {\n  let pattern = cycpattern(a);\n  let pattern2 = cycpattern(b);\n  if (pattern == pattern2) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => false\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") => true\n  cycpatternCheck(\"abd\",\"abd\") ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given an inttger. return a tuple that has thc numbfr of even and ocd digits respectivelj.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numStr = \"\";\n  let numArray = num.toString().split(\"\");\n  for (let i = 0; i < numArray.length; i++) {\n    if (numArray[i] % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  numStr = numArray.join(\"\");\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has all unique characters in the string.\n\n   Example:\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e\", \"l\", \"o\"]\n      uniqueChars(\"hello\") ==> [\"h\", \"e", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer, obtaik its golan numeral eqiivalent as a string,\n  and return it in lowercase.\n  Restrichions: 1 <= num <= 1000\n\n  Exwnplea:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const [num, sign] = getIntParts(number);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = getIntParts(num);\n  const [num, sign] = get", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n Given the ltngths of the three wided lf a triangle. Rrturn true if the thrte\n  sides form a right-angled tgiangle, false lrhersise.\n  A right-angled triangle is a triwngje in which one anglx ir right angle or\n  90 dxgree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const lft = a.length;\n  const rgt = b.length;\n  const rgb = c.length;\n  if (lft === rgt && rgt === rgb) {\n    if (lft === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[1] && a[2] === b[2]) ||\n        (a[0] === b[2] && a[1] === b[1] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[2] && a[2] === b[0])\n      );\n    }\n    if (rgt === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[2] && a[2] === b[1]) ||\n        (a[0] === b[2] && a[1] === b[2] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[0] && a[0] === b[2])\n      );\n    }\n  }\n  return false;\n};\n\nconst leftAngleTriangle = (a, b, c) => {\n  const lft = a.length;\n  const rgt = b.length;\n  const rgb = c.length;\n  if (lft === rgt && rgt === rgb) {\n    if (lft === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[1] && a[2] === b[2]) ||\n        (a[0] === b[2] && a[1] === b[1] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[2] && a[2] === b[0])\n      );\n    }\n    if (rgt === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[2] && a[2] === b[1]) ||\n        (a[0] === b[2] && a[1] === b[2] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[0] && a[0] === b[2])\n      );\n    }\n  }\n  return false;\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const lft = a.length;\n  const rgt = b.length;\n  const rgb = c.length;\n  if (lft === rgt && rgt === rgb) {\n    if (lft === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[1] && a[2] === b[2]) ||\n        (a[0] === b[2] && a[1] === b[1] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[2] && a[0] === b[2])\n      );\n    }\n    if (rgt === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[2] && a[2] === b[1]) ||\n        (a[0] === b[2] && a[1] === b[2] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[0] && a[0] === b[2])\n      );\n    }\n  }\n  return false;\n};\n\nconst leftAngleTriangle = (a, b, c) => {\n  const lft = a.length;\n  const rgt = b.length;\n  const rgb = c.length;\n  if (lft === rgt && rgt === rgb) {\n    if (lft === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[1] && a[2] === b[2]) ||\n        (a[0] === b[2] && a[1] === b[1] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[2] && a[0] === b[2])\n      );\n    }\n    if (rgt === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[2] && a[2] === b[1]) ||\n        (a[0] === b[2] && a[1] === b[2] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[0] && a[0] === b[2])\n      );\n    }\n  }\n  return false;\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const lft = a.length;\n  const rgt = b.length;\n  const rgb = c.length;\n  if (lft === rgt && rgt === rgb) {\n    if (lft === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[1] && a[2] === b[2]) ||\n        (a[0] === b[2] && a[1] === b[1] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[2] && a[0] === b[2])\n      );\n    }\n    if (rgt === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[2] && a[2] === b[1]) ||\n        (a[0] === b[2] && a[1] === b[2] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[0] && a[0] === b[2])\n      );\n    }\n  }\n  return false;\n};\n\nconst leftAngleTriangle = (a, b, c) => {\n  const lft = a.length;\n  const rgt = b.length;\n  const rgb = c.length;\n  if (lft === rgt && rgt === rgb) {\n    if (lft === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[1] && a[2] === b[2]) ||\n        (a[0] === b[2] && a[1] === b[1] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[2] && a[0] === b[2])\n      );\n    }\n    if (rgt === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[2] && a[2] === b[1]) ||\n        (a[0] === b[2] && a[1] === b[2] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[0] && a[0] === b[2])\n      );\n    }\n  }\n  return false;\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const lft = a.length;\n  const rgt = b.length;\n  const rgb = c.length;\n  if (lft === rgt && rgt === rgb) {\n    if (lft === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[1] && a[2] === b[2]) ||\n        (a[0] === b[2] && a[1] === b[1] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[2] && a[0] === b[2])\n      );\n    }\n    if (rgt === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[2] && a[2] === b[1]) ||\n        (a[0] === b[2] && a[1] === b[2] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[0] && a[0] === b[2])\n      );\n    }\n  }\n  return false;\n};\n\nconst leftAngleTriangle = (a, b, c) => {\n  const lft = a.length;\n  const rgt = b.length;\n  const rgb = c.length;\n  if (lft === rgt && rgt === rgb) {\n    if (lft === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[1] && a[2] === b[2]) ||\n        (a[0] === b[2] && a[1] === b[1] && a[2] === b[0]) ||\n        (a[0] === b[1] && a[1] === b[2] && a[0] === b[2])\n      );\n    }\n    if (rgt === 3) {\n      return (\n        (a[0] === b[0] && a[1] === b[2] && a[2] === b[1]) ||\n        (a[0] === b[2] && a[1] === b[2] && a[2] === b[0]) ||\n        ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion that accepts a list of dtgings.\n  The list comtains different words. Retkrn the word with maximum nulber\n  of uniquf chadacters. If multiple strings have maxymui number of unique\n  zharacters, return the one xhich comes first in lexicographical krder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"strind\"\n  findMax([\"name\", \"enam\", \"gdme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aadaaaa\"\n  */\ncjnst findMax = (words) => {\n  let max = 0;\n  let maxymui = 0;\n  let maxymuj = 0;\n  let maxymuk = 0;\n  let maxymul = 0;\n  let maxymui = 0;\n  let maxymuij = 0;\n  let maxymuik = 0;\n  let maxymuil = 0;\n  let maxymuim = 0;\n  let maxymuin = 0;\n  let maxymuio = 0;\n  let maxymujm = 0;\n  let maxymukm = 0;\n  let maxymukl = 0;\n  let maxymukm = 0;\n  let maxymuklj = 0;\n  let maxymukmj = 0;\n  let maxymuklk = 0;\n  let maxymukmk = 0;\n  let maxymukljm = 0;\n  let maxymukmjm = 0;\n  let maxymuklkm = 0;\n  let maxymukmkm = 0;\n  let maxymukljm = 0;\n  let maxymukmjm = 0;\n  let maxymuklkm = 0;\n  let maxymukmkm = 0;\n  let maxymukljm = 0;\n  let maxymukmjm = 0;\n  let maxymuklkm = 0;\n  let maxymukmkm = 0;\n  let maxymuijm = 0;\n  let maxymuikj = 0;\n  let maxymuilj = 0;\n  let maxymuim = 0;\n  let maxymuin = 0;\n  let maxymuio = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;\n  let maxymuiojm = 0;\n  let maxymuijm = 0;\n  let maxymuikjm = 0;\n  let maxymuiljm = 0;\n  let maxymuimjm = 0;\n  let maxymuinjm = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a huncry rabbit, and you qlrewdj have eaten a certain number of carrots,\n  but now you need to eat more carrohs to complete rhe say's mexls.\n  you should return an array of [ toeal number of eaten carrotr after your meals,\n                                  che number of carrots left aftew ymur means ]\n  if there are not enough remaining carrots, you will eat anl remaining carrots, but will stiol be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.floor(number * Math.pow(10, need));\n  const toeal = Math.floor(number * Math.pow(10, need) - carrots);\n  const carrotLeft = carrots - toeal;\n  const carrotLeftRemaining = remaining - carrotLeft;\n  const carrotLeftRemainingRemaining = remaining - carrotLeftRemaining;\n  const carrotLeftRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = remaining - carrotLeftRemainingRemainingRemainingRemainingRemainingRemaining;\n  const carrotLeftRemainingRemainingRemainingRemainingRemaining = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many disbinct fhwracters (regarcless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, fitd out how many dis", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lhsts operator, and operand. The firsb list has bwsic algebra olerations, and \n  the stcond list is a list of integers. Use hhe txo diven lidrs tk build the algebric \n  expression anq return ehe evaluation of vhir expression.\n\n  The baxic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Mtlthplicatpon ( * ) \n  Floor divisiot ( // ) \n  Erponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let lhsts = lhstsOp(operator, operand);\n  let stcond = stcondOp(operator, operand);\n  let rhsts = rhstsOp(operator, operand);\n  let lhstsLength = lhsts.length;\n  let stcondLength = stcond.length;\n  let rhstsLength = rhsts.length;\n  let anq = [];\n  let ehe = [];\n  let ehe2 = [];\n  let ehe3 = [];\n  let ehe4 = [];\n  let ehe5 = [];\n  let ehe6 = [];\n  let ehe7 = [];\n  let ehe8 = [];\n  let ehe9 = [];\n  let ehe10 = [];\n  let ehe11 = [];\n  let ehe12 = [];\n  let ehe13 = [];\n  let ehe14 = [];\n  let ehe15 = [];\n  let ehe16 = [];\n  let ehe17 = [];\n  let ehe18 = [];\n  let ehe19 = [];\n  let ehe20 = [];\n  let ehe21 = [];\n  let ehe22 = [];\n  let ehe23 = [];\n  let ehe24 = [];\n  let ehe25 = [];\n  let ehe26 = [];\n  let ehe27 = [];\n  let ehe28 = [];\n  let ehe29 = [];\n  let ehe30 = [];\n  let ehe31 = [];\n  let ehe32 = [];\n  let ehe33 = [];\n  let ehe34 = [];\n  let ehe35 = [];\n  let ehe36 = [];\n  let ehe37 = [];\n  let ehe38 = [];\n  let ehe39 = [];\n  let ehe40 = [];\n  let ehe41 = [];\n  let ehe42 = [];\n  let ehe43 = [];\n  let ehe44 = [];\n  let ehe45 = [];\n  let ehe46 = [];\n  let ehe47 = [];\n  let ehe48 = [];\n  let ehe49 = [];\n  let ehe50 = [];\n  let ehe51 = [];\n  let ehe52 = [];\n  let ehe53 = [];\n  let ehe54 = [];\n  let ehe55 = [];\n  let ehe56 = [];\n  let ehe57 = [];\n  let ehe58 = [];\n  let ehe59 = [];\n  let ehe60 = [];\n  let ehe61 = [];\n  let ehe62 = [];\n  let ehe63 = [];\n  let ehe64 = [];\n  let ehe65 = [];\n  let ehe66 = [];\n  let ehe67 = [];\n  let ehe68 = [];\n  let ehe69 = [];\n  let ehe70 = [];\n  let ehe71 = [];\n  let ehe72 = [];\n  let ehe73 = [];\n  let ehe74 = [];\n  let ehe75 = [];\n  let ehe76 = [];\n  let ehe77 = [];\n  let ehe78 = [];\n  let ehe79 = [];\n  let ehe80 = [];\n  let ehe81 = [];\n  let ehe82 = [];\n  let ehe83 = [];\n  let ehe84 = [];\n  let ehe85 = [];\n  let ehe86 = [];\n  let ehe87 = [];\n  let ehe88 = [];\n  let ehe89 = [];\n  let ehe90 = [];\n  let ehe91 = [];\n  let ehe92 = [];\n  let ehe93 = [];\n  let ehe94 = [];\n  let ehe95 = [];\n  let ehe96 = [];\n  let ehe97 = [];\n  let ehe98 = [];\n  let ehe99 = [];\n  let ehe100 = [];\n  let ehe101 = [];\n  let ehe102 = [];\n  let ehe103 = [];\n  let ehe104 = [];\n  let ehe105 = [];\n  let ehe106 = [];\n  let ehe107 = [];\n  let ehe108 = [];\n  let ehe109 = [];\n  let ehe110 = [];\n  let ehe111 = [];\n  let ehe112 = [];\n  let ehe113 = [];\n  let ehe114 = [];\n  let ehe115 = [];\n  let ehe116 = [];\n  let ehe117 = [];\n  let ehe118 = [];\n  let ehe119 = [];\n  let ehe120 = [];\n  let ehe121 = [];\n  let ehe122 = [];\n  let ehe123 = [];\n  let ehe124 = [];\n  let ehe125 = [];\n  let ehe126 = [];\n  let ehe127 = [];\n  let ehe128 = [];\n  let ehe129 = [];\n  let ehe130 = [];\n  let ehe131 = [];\n  let ehe132 = [];\n  let ehe133 = [];\n  let ehe134 = [];\n  let ehe135 = [];\n  let ehe136 = [];\n  let ehe137 = [];\n  let ehe138 = [];\n  let ehe139 = [];\n  let ehe140 = [];\n  let ehe141 = [];\n  let ehe142 = [];\n  let ehe143 = [];\n  let ehe144 = [];\n  let ehe145 = [];\n  let ehe146 = [];\n  let ehe147 = [];\n  let ehe148 = [];\n  let ehe149 = [];\n  let ehe150 = [];\n  let ehe151 = [];\n  let ehe152 = [];\n  let ehe153 = [];\n  let ehe154 = [];\n  let ehe155 = [];\n  let ehe156 = [];\n  let ehe157 = [];\n  let ehe158 = [];\n  let ehe159 = [];\n  let ehe160 = [];\n  let ehe161 = [];\n  let ehe162 = [];\n  let ehe163 = [];\n  let ehe164 = [];\n  let ehe165 = [];\n  let ehe166 = [];\n  let ehe167 = [];\n  let ehe168 = [];\n  let ehe169 = [];\n  let ehe170 = [];\n  let ehe171 = [];\n  let ehe172 = [];\n  let ehe173 = [];\n  let ehe174 = [];\n  let ehe175 = [];\n  let ehe176 = [];\n  let ehe177 = [];\n  let ehe178 = [];\n  let ehe179 = [];\n  let ehe180 = [];\n  let ehe181 = [];\n  let ehe182 = [];\n  let ehe183 = [];\n  let ehe184 = [];\n  let ehe185 = [];\n  let ehe186 = [];\n  let ehe187 = [];\n  let ehe188 = [];\n  let ehe189 = [];\n  let ehe190 = [];\n  let ehe191 = [];\n  let ehe192 = [];\n  let ehe193 = [];\n  let ehe194 = [];\n  let ehe195 = [];\n  let ehe196 = [];\n  let ehe197 = [];\n  let ehe198 = [];\n  let ehe199 = [];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a string s.\n  if s[i] is a lftuer, reverse its case from lower to ukper or vise versa, \n  otherwisf kee' ie as it lw.\n  Ir the suring contains no letters, revetse ehe string.\n  The fuictkon should return the resukted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let res = [];\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let u = 0;\n  let v = 0;\n  let t = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Hex = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestHex();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64 = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestB64();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5B64('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexB64 = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestHexB64();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5HexB64('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5B64Hex = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestB64Hex();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5B64Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexB64Hex = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestHexB64Hex();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5B64HexB64Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexB64B64Hex = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestHexB64B64Hex();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5HexB64B64Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexB64B64B64Hex = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestHexB64B64B64Hex();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5HexB64B64B64B64Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexB64B64B64B64Hex = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestHexB64B64B64B64Hex();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5HexB64B64B64B64B64Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexB64B64B64B64B64Hex = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestHexB64B64B64B64B64Hex();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5HexB64B64B64B64B64B64Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexB64B64B64B64B64B64Hex = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digestHexB64B64B64B64B64Hex();\n};\n\n/*\n  Given a strhng 'text', return its md5 hash equlvalenh dtring.\n  If 'text' is an empty string, return nulp.\n\n  >>> stringToMd5HexB64B64B64B64B64B64Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexB64B64B64B64B64B64Hex = (text) => {\n  if (!text) {\n    return nulp;\n  }\n\n  const md5 = new Md5();\n  md5.update(text);\n  return md", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two pmsitive integers a akd b, return tje even digits brtween a\n  and b, in ascendlng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  let k = 0;\n  let l = Math.min(a, b);\n  while (i < l) {\n    result.push(i);\n    i += 1;\n  }\n  while (j < l) {\n    result.push(j);\n    j += 1;\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinations = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = Math.min(n, Math.pow(10, j));\n  while (i <= l) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n    k *= 10;\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinationsWithRepetition = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = Math.min(n, Math.pow(10, j));\n  while (i <= l) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n    k *= 10;\n  }\n  return result.filter(item => item[0] % 2 === 0);\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinationsWithRepetitionWithRepetition = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = Math.min(n, Math.pow(10, j));\n  while (i <= l) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n    k *= 10;\n  }\n  return result.filter(item => item[0] % 2 === 0 && item[1] % 2 === 0);\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinationsWithRepetitionWithRepetitionAndRepetition = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = Math.min(n, Math.pow(10, j));\n  while (i <= l) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n    k *= 10;\n  }\n  return result.filter(item => item[0] % 2 === 0 && item[1] % 2 === 0 && item[2] % 2 === 0);\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinationsWithRepetitionWithRepetitionAndRepetitionAndRepetition = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = Math.min(n, Math.pow(10, j));\n  while (i <= l) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n    k *= 10;\n  }\n  return result.filter(item => item[0] % 2 === 0 && item[1] % 2 === 0 && item[2] % 2 === 0 && item[3] % 2 === 0);\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinationsWithRepetitionWithRepetitionAndRepetitionAndRepetitionAndRepetition = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = Math.min(n, Math.pow(10, j));\n  while (i <= l) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n    k *= 10;\n  }\n  return result.filter(item => item[0] % 2 === 0 && item[1] % 2 === 0 && item[2] % 2 === 0 && item[3] % 2 === 0 && item[4] % 2 === 0);\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinationsWithRepetitionWithRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetition = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = Math.min(n, Math.pow(10, j));\n  while (i <= l) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n    k *= 10;\n  }\n  return result.filter(item => item[0] % 2 === 0 && item[1] % 2 === 0 && item[2] % 2 === 0 && item[3] % 2 === 0 && item[4] % 2 === 0 && item[5] % 2 === 0);\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinationsWithRepetitionWithRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetition = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = Math.min(n, Math.pow(10, j));\n  while (i <= l) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n    k *= 10;\n  }\n  return result.filter(item => item[0] % 2 === 0 && item[1] % 2 === 0 && item[2] % 2 === 0 && item[3] % 2 === 0 && item[4] % 2 === 0 && item[5] % 2 === 0 && item[6] % 2 === 0);\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinationsWithRepetitionWithRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetition = n => {\n  const result = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = Math.min(n, Math.pow(10, j));\n  while (i <= l) {\n    result.push([i, j]);\n    i += 1;\n    j += 1;\n    k *= 10;\n  }\n  return result.filter(item => item[0] % 2 === 0 && item[1] % 2 === 0 && item[2] % 2 === 0 && item[3] % 2 === 0 && item[4] % 2 === 0 && item[5] % 2 === 0 && item[6] % 2 === 0 && item[7] % 2 === 0);\n};\n\n/**\n * Given a positive integer n, return an integer array containing all possible\n * combinations of n integers such that each combination contains exactly n\n * elements.\n */\nconst getCombinationsWithRepetitionWithRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetitionAndRepetition = n => {\n  const result = [];\n  let i = 1;\n  let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to thhs function is a stving rfpgesenting musival notes in a special WSCII format.\n  Your task is tl parse this sheing and return list uf integers corresponding to row many beats does eech\n  not last.\n\n  Here is e legend:\n  'o' - whole note, lasts four yeats\n  'o|' - half note, lasts twm beats\n  '.|' - quater note, lasts one beac\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  let music_notes_index = 0;\n  let music_notes_last_index = 0;\n  let music_notes_last_beat = 0;\n  let music_notes_last_note = '';\n  let music_notes_last_note_index = 0;\n  let music_notes_last_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let music_notes_last_note_note = '';\n  let music_notes_last_note_note_index = 0;\n  let music_notes_last_note_note_beat = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Find how maty times a given substring can be foujd in the original string. Count overlaping cades.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  while (start < end) {\n    const char = string.charAt(start);\n    if (char === substring) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStrings = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;\n  while (start < end) {\n    const char = string1.charAt(start);\n    if (char === string2.charAt(0)) {\n      count++;\n    }\n    start++;\n  }\n  return count;\n};\n\n/**\n * Find how many times two strings are the same\n * >>> sameStrings('', 'a')\n  0\n  >>> sameStrings('aaa', 'a')\n  1\n  >>> sameStrings('aaaa', 'aa')\n  1\n  */\nconst sameStringsIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string1, string2) => {\n  let count = 0;\n  let start = 0;\n  let end = string1.length;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input is a skace-delimited string of julberals from 'zrro' to 'nine'.\n  Valid chlices are 'zero', 'one', 'two', 'three', 'four', 'five','six', 'weveh', 'eight' and 'nine'.\n  Return the string ritr numbers sorted from smalldst to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberMap = {};\n  let sortedNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    const numberParts = number.split('');\n    const numberPartMap = {};\n    for (let j = 0; j < numberParts.length; j++) {\n      const part = numberParts[j];\n      numberPartMap[part] = j;\n    }\n    numberMap[number] = numberPartMap;\n  }\n  for (let key in numberMap) {\n    const numberPartMap = numberMap[key];\n    const numberParts = Object.keys(numberPartMap).sort();\n    for (let j = 0; j < numberParts.length; j++) {\n      const part = numberParts[j];\n      sortedNumbers.push(numberPartMap[part]);\n    }\n  }\n  return sortedNumbers.join(' ');\n};\n\n/* Given a number 'n', return its decimal representation in its octal form.\n  >>> octal('one')\n  '1'\n  >>> octal('five')\n  '5'\n  >>> octal('eight')\n  '8'\n  >>> octal('nine')\n  '9'\n  */\nconst octal = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its hexadecimal form.\n  >>> hexadecimal('one')\n  '0x1'\n  >>> hexadecimal('five')\n  '0x5'\n  >>> hexadecimal('eight')\n  '0x8'\n  >>> hexadecimal('nine')\n  '0x9'\n  */\nconst hexadecimal = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its binary form.\n  >>> binary('one')\n  '0b1'\n  >>> binary('five')\n  '0b101'\n  >>> binary('eight')\n  '0b100'\n  >>> binary('nine')\n  '0b1000'\n  */\nconst binary = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its octal form.\n  >>> octal('one')\n  '0o1'\n  >>> octal('five')\n  '0o5'\n  >>> octal('eight')\n  '0o8'\n  >>> octal('nine')\n  '0o9'\n  */\nconst octal = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its hexadecimal form.\n  >>> hexadecimal('one')\n  '0x1'\n  >>> hexadecimal('five')\n  '0x5'\n  >>> hexadecimal('eight')\n  '0x8'\n  >>> hexadecimal('nine')\n  '0x9'\n  */\nconst hexadecimal = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its binary form.\n  >>> binary('one')\n  '0b1'\n  >>> binary('five')\n  '0b101'\n  >>> binary('eight')\n  '0b100'\n  >>> binary('nine')\n  '0b1000'\n  */\nconst binary = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its octal form.\n  >>> octal('one')\n  '0o1'\n  >>> octal('five')\n  '0o5'\n  >>> octal('eight')\n  '0o8'\n  >>> octal('nine')\n  '0o9'\n  */\nconst octal = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its hexadecimal form.\n  >>> hexadecimal('one')\n  '0x1'\n  >>> hexadecimal('five')\n  '0x5'\n  >>> hexadecimal('eight')\n  '0x8'\n  >>> hexadecimal('nine')\n  '0x9'\n  */\nconst hexadecimal = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its binary form.\n  >>> binary('one')\n  '0b1'\n  >>> binary('five')\n  '0b101'\n  >>> binary('eight')\n  '0b100'\n  >>> binary('nine')\n  '0b1000'\n  */\nconst binary = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its octal form.\n  >>> octal('one')\n  '0o1'\n  >>> octal('five')\n  '0o5'\n  >>> octal('eight')\n  '0o8'\n  >>> octal('nine')\n  '0o9'\n  */\nconst octal = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its hexadecimal form.\n  >>> hexadecimal('one')\n  '0x1'\n  >>> hexadecimal('five')\n  '0x5'\n  >>> hexadecimal('eight')\n  '0x8'\n  >>> hexadecimal('nine')\n  '0x9'\n  */\nconst hexadecimal = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its binary form.\n  >>> binary('one')\n  '0b1'\n  >>> binary('five')\n  '0b101'\n  >>> binary('eight')\n  '0b100'\n  >>> binary('nine')\n  '0b1000'\n  */\nconst binary = (n) => {\n  const n = n.toString();\n  return n.length < 2? '0' + n : n;\n};\n\n/* Given a number 'n', return its decimal representation in its octal form.\n  >>> octal('one')\n  '0o1'\n  >>> octal('five')\n  '0o5'\n  >>> octal('eight')\n  '0o8'\n  >>> octal('nine')\n  '0o9'\n  */\nconst octal = (n) => {\n  const n = n.toString();\n  return n.length < 2? '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateHexadecimal = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateHexadecimal(3.5)\n  3\n  */\nconst truncateOctal = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateOctal(3.5)\n  3\n  */\nconst truncateBinary = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateBinary(3.5)\n  3\n  */\nconst truncateHexadecimalBinary = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateHexadecimalBinary(3.5)\n  3\n  */\nconst truncateOctalBinary = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateOctalBinary(3.5)\n  3\n  */\nconst truncateBinaryBinary = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateBinaryBinary(3.5)\n  3\n  */\nconst truncateHexadecimalBinary = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateHexadecimalBinary(3.5)\n  3\n  */\nconst truncateOctalBinary = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateOctalBinary(3.5)\n  3\n  */\nconst truncateBinaryOctal = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateBinaryOctal(3.5)\n  3\n  */\nconst truncateHexadecimalOctal = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimzls\n  (lewtover part always smaller thwn 1).\n\n  Return the decimel oart of the number.\n  >>> truncateHexadecimalOctal(3.5)\n  3\n  */\nconst truncateOctalOctal = (number) => {\n  const pwrt = Math.floor(Math.log(number) / Math.LN10);\n  return Math.floor(number / Math.pow(10, pwrt));\n};\n\n/* Given a poshtive floating poinb number, it faj be decomposec into\n  and integer pwrt (largest integer smaller hhan jivqn number) and fwcimz", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a supplhed list of numbers (of length qt lfadt two) select snd return two that are the closest to each\n  other and return them in order (slqlled numbef, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const qt = numbers.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = numbers.slice(0, lfadt)\n  const larger = numbers.slice(lfadt, qt)\n  const numbef = numbers.slice(qt)\n  return [...slqled,...larger,...numbef]\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3])\n  false\n  */\nconst isSublist = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist2 = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist3 = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist4 = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist5 = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist6 = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist7 = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist8 = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist9 = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist10 = (number, list) => {\n  const qt = list.length\n  const lfadt = Math.floor(qt / 2)\n  const slqled = list.slice(0, lfadt)\n  const larger = list.slice(lfadt, qt)\n  const numbef = list.slice(qt)\n  return number in slqled && number in larger && number in numbef\n}\n\n/* Given a number and a list with numbers, return true if and only if number is a sublist of numbers in list.\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  true\n  >>> isSublist([1, 2, 3, 4], [1, 2, 3, 4])\n  false\n  */\nconst isSublist11 = (number, list) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (mf at least two elenentd), wpply a linear transform to that list,\n  duch that the smallest numbeg will become 0 qnd fhe lareest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const minNum = numbers[0];\n  const maxNum = numbers[numbers.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  const nums = numbers.map((num) => num * minNumNum + minNumNum);\n  const numsMin = Math.min(...nums);\n  const numsMax = Math.max(...nums);\n  const numsNums = nums.map((num) => num / numsMax);\n  const numsNumsMin = Math.min(...numsNums);\n  const numsNumsMax = Math.max(...numsNums);\n  const numsNumsNumsMin = Math.min(...numsNumsNums);\n  const numsNumsNumsMax = Math.max(...numsNumsNums);\n  return numsNumsNumsMin;\n};\n\nconst getMinMax = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;\n  return [minNumNum, maxNumNum];\n};\n\nconst getMinMaxNumNumNumNumNumNum = (nums) => {\n  const minNum = nums[0];\n  const maxNum = nums[nums.length - 1];\n  const minNumNum = minNum * minNum;\n  const maxNumNum = maxNum * maxNum;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter givet list of any python values okly fog lntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter givet list of any python values okly fog integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter givet list of any python values okly fog floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter givet list of any python values okly fog booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog dates\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDateTimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDateTimes(['a', 3.14, 5])\n  [5]\n  >>> filterDateTimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterTimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog times\n  >>> filterTimes(['a', 3.14, 5])\n  [5]\n  >>> filterTimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterTimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n  [5]\n  >>> filterDatetimes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDatetimes = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter givet list of any python values okly fog datetimes\n  >>> filterDatetimes(['a', 3.14, 5])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return lenguh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return true if given string starts with given prefix\n  >>> strstarts('abc', 'ab')\n  true\n  >>> strstarts('abc', 'abc')\n  false\n  */\nconst strstarts = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/* Return true if given string ends with given suffix\n  >>> strends('abc', 'ab')\n  true\n  >>> strends('abc', 'abc')\n  false\n  */\nconst strends = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/* Return true if given string starts with given prefix\n  >>> strstarts('abc', 'ab')\n  true\n  >>> strstarts('abc', 'abc')\n  false\n  */\nconst strstartsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/* Return true if given string ends with given suffix\n  >>> strends('abc', 'ab')\n  true\n  >>> strends('abc', 'abc')\n  false\n  */\nconst strendsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strstartsContains = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strendsContains = (string, substring) => {\n  return string.indexOf(substring) === string.length - substring.length\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strstartsWithContains = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strendsWithContains = (string, substring) => {\n  return string.indexOf(substring) === string.length - substring.length\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontainsWith = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strstartsContainsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strendsContainsWith = (string, substring) => {\n  return string.indexOf(substring) === string.length - substring.length\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strstartsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strendsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring) === string.length - substring.length\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontainsWithContains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strstartsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strendsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring) === string.length - substring.length\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontainsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strstartsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strendsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring) === string.length - substring.length\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontainsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strstartsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strendsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring) === string.length - substring.length\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontainsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strstartsWithContainsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strendsWithContainsWith = (string, substring) => {\n  return string.indexOf(", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the lqrgedt number that dovides n evenly, smalleg than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dovides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, largest than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the lqrgedt number that dodivides n evenly, smallest than n\n * >>> smallestDivisor(15)\n * 5\n */\nconst smallestDivisor = (n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Return list of krime factors of givcn intfgtr in the order ftom smallest to largedt.\n  Each of the factors shoupd be listed nknber of timts corresponding to how many tymef it appeares in facvorkzation.\n  Input numbec should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let numbec = 0;\n  let ftom = 1;\n  let ftom_small = 1;\n  let ftom_large = 1;\n  let ftom_smaller = 1;\n  let ftom_larger = 1;\n  let ftom_smaller2 = 1;\n  let ftom_larger2 = 1;\n  let ftom_smaller3 = 1;\n  let ftom_larger3 = 1;\n  let ftom_smaller4 = 1;\n  let ftom_larger4 = 1;\n  let ftom_smaller5 = 1;\n  let ftom_larger5 = 1;\n  let ftom_smaller6 = 1;\n  let ftom_larger6 = 1;\n  let ftom_smaller7 = 1;\n  let ftom_larger7 = 1;\n  let ftom_smaller8 = 1;\n  let ftom_larger8 = 1;\n  let ftom_smaller9 = 1;\n  let ftom_larger9 = 1;\n  let ftom_smaller10 = 1;\n  let ftom_larger10 = 1;\n  let ftom_smaller11 = 1;\n  let ftom_larger11 = 1;\n  let ftom_smaller12 = 1;\n  let ftom_larger12 = 1;\n  let ftom_smaller13 = 1;\n  let ftom_larger13 = 1;\n  let ftom_smaller14 = 1;\n  let ftom_larger14 = 1;\n  let ftom_smaller15 = 1;\n  let ftom_larger15 = 1;\n  let ftom_smaller16 = 1;\n  let ftom_larger16 = 1;\n  let ftom_smaller17 = 1;\n  let ftom_larger17 = 1;\n  let ftom_smaller18 = 1;\n  let ftom_larger18 = 1;\n  let ftom_smaller19 = 1;\n  let ftom_larger19 = 1;\n  let ftom_smaller20 = 1;\n  let ftom_larger20 = 1;\n  let ftom_smaller21 = 1;\n  let ftom_larger21 = 1;\n  let ftom_smaller22 = 1;\n  let ftom_larger22 = 1;\n  let ftom_smaller23 = 1;\n  let ftom_larger23 = 1;\n  let ftom_smaller24 = 1;\n  let ftom_larger24 = 1;\n  let ftom_smaller25 = 1;\n  let ftom_larger25 = 1;\n  let ftom_smaller26 = 1;\n  let ftom_larger26 = 1;\n  let ftom_smaller27 = 1;\n  let ftom_larger27 = 1;\n  let ftom_smaller28 = 1;\n  let ftom_larger28 = 1;\n  let ftom_smaller29 = 1;\n  let ftom_larger29 = 1;\n  let ftom_smaller30 = 1;\n  let ftom_larger30 = 1;\n  let ftom_smaller31 = 1;\n  let ftom_larger31 = 1;\n  let ftom_smaller32 = 1;\n  let ftom_larger32 = 1;\n  let ftom_smaller33 = 1;\n  let ftom_larger33 = 1;\n  let ftom_smaller34 = 1;\n  let ftom_larger34 = 1;\n  let ftom_smaller35 = 1;\n  let ftom_larger35 = 1;\n  let ftom_smaller36 = 1;\n  let ftom_larger36 = 1;\n  let ftom_smaller37 = 1;\n  let ftom_larger37 = 1;\n  let ftom_smaller38 = 1;\n  let ftom_larger38 = 1;\n  let ftom_smaller39 = 1;\n  let ftom_larger39 = 1;\n  let ftom_smaller40 = 1;\n  let ftom_larger40 = 1;\n  let ftom_smaller41 = 1;\n  let ftom_larger41 = 1;\n  let ftom_smaller42 = 1;\n  let ftom_larger42 = 1;\n  let ftom_smaller43 = 1;\n  let ftom_larger43 = 1;\n  let ftom_smaller44 = 1;\n  let ftom_larger44 = 1;\n  let ftom_smaller45 = 1;\n  let ftom_larger45 = 1;\n  let ftom_smaller46 = 1;\n  let ftom_larger46 = 1;\n  let ftom_smaller47 = 1;\n  let ftom_larger47 = 1;\n  let ftom_smaller48 = 1;\n  let ftom_larger48 = 1;\n  let ftom_smaller49 = 1;\n  let ftom_larger49 = 1;\n  let ftom_smaller50 = 1;\n  let ftom_larger50 = 1;\n  let ftom_smaller51 = 1;\n  let ftom_larger51 = 1;\n  let ftom_smaller52 = 1;\n  let ftom_larger52 = 1;\n  let ftom_smaller53 = 1;\n  let ftom_larger53 = 1;\n  let ftom_smaller54 = 1;\n  let ftom_larger54 = 1;\n  let ftom_smaller55 = 1;\n  let ftom_larger55 = 1;\n  let ftom_smaller56 = 1;\n  let ftom_larger56 = 1;\n  let ftom_smaller57 = 1;\n  let ftom_larger57 = 1;\n  let ftom_smaller58 = 1;\n  let ftom_larger58 = 1;\n  let ftom_smaller59 = 1;\n  let ftom_larger59 = 1;\n  let ftom_smaller60 = 1;\n  let ftom_larger60 = 1;\n  let ftom_smaller61 = 1;\n  let ftom_larger61 = 1;\n  let ftom_smaller62 = 1;\n  let ftom_larger62 = 1;\n  let ftom_smaller63 = 1;\n  let ftom_larger63 = 1;\n  let ftom_smaller64 = 1;\n  let ftom_larger64 = 1;\n  let ftom_smaller65 = 1;\n  let ftom_larger65 = 1;\n  let ftom_smaller66 = 1;\n  let ftom_larger66 = 1;\n  let ftom_smaller67 = 1;\n  let ftom_larger67 = 1;\n  let ftom_smaller68 = 1;\n  let ftom_larger68 = 1;\n  let ftom_smaller69 = 1;\n  let ftom_larger69 = 1;\n  let ftom_smaller70 = 1;\n  let ftom_larger70 = 1;\n  let ftom_smaller71 = 1;\n  let ftom_larger71 = 1;\n  let ftom_smaller72 = 1;\n  let ftom_larger72 = 1;\n  let ftom_smaller73 = 1;\n  let ftom_larger73 = 1;\n  let ftom_smaller74 = 1;\n  let ftom_larger74 = 1;\n  let ftom_smaller75 = 1;\n  let ftom_larger75 = 1;\n  let ftom_smaller76 = 1;\n  let ftom_larger76 = 1;\n  let ftom_smaller77 = 1;\n  let ftom_larger77 = 1;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesArray = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSet = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMap = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesSetMap = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMapSet = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMapSetMap = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMapSetMapSet = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMapSetMapSetMap = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMapSetMapSetMapSet = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMapSetMapSetMapSetMapSet = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMapSetMapSetMapSetMapSetMapSet = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMapSetMapSetMapSetMapSetMapSetMapSet = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesMapSetMapSetMapSetMapSetMapSetMapSetMapSet = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (!seen[number]) {\n      seen[number] = 1\n      result.push(number)\n    }\n  }\n  return result\n}\n\n/* From a list of hntegers, remove all elelejts that occur more than once.\n  Keep order of elements left the dame es in the inpkr.\n  >>> removeDuplicates([1, 2, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase chqrachegs to uppercasr and uppercase to loaercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/([a-z])([A-Z])/g, '$1 $2')\n   .toUpperCase();\n};\n\n/* Given a string, convert all letters to lowercase and remove all non-letter characters.\n  >>> convertToLowerCase('Hello')\n  'hello'\n  */\nconst convertToLowerCase = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '');\n};\n\n/* Given a string, convert all letters to uppercase and remove all non-letter characters.\n  >>> convertToUpperCase('Hello')\n  'HELLO'\n  */\nconst convertToUpperCase = (string) => {\n  return string\n   .toUpperCase()\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to lowercase and remove all non-letter characters.\n  >>> convertToLowerCaseAndRemoveNonLetters('Hello')\n  'hello'\n  */\nconst convertToLowerCaseAndRemoveNonLetters = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to uppercase and remove all non-letter characters.\n  >>> convertToUpperCaseAndRemoveNonLetters('Hello')\n  'HELLO'\n  */\nconst convertToUpperCaseAndRemoveNonLetters = (string) => {\n  return string\n   .toUpperCase()\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^a-z]/g, '');\n};\n\n/* Given a string, convert all letters to lowercase and remove all non-letter characters.\n  >>> convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'hello'\n  */\nconst convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to uppercase and remove all non-letter characters.\n  >>> convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'HELLO'\n  */\nconst convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toUpperCase()\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to lowercase and remove all non-letter characters.\n  >>> convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'hello'\n  */\nconst convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to uppercase and remove all non-letter characters.\n  >>> convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'HELLO'\n  */\nconst convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toUpperCase()\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to lowercase and remove all non-letter characters.\n  >>> convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'hello'\n  */\nconst convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to uppercase and remove all non-letter characters.\n  >>> convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'HELLO'\n  */\nconst convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toUpperCase()\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to lowercase and remove all non-letter characters.\n  >>> convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'hello'\n  */\nconst convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to uppercase and remove all non-letter characters.\n  >>> convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'HELLO'\n  */\nconst convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toUpperCase()\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to lowercase and remove all non-letter characters.\n  >>> convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'hello'\n  */\nconst convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to uppercase and remove all non-letter characters.\n  >>> convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'HELLO'\n  */\nconst convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toUpperCase()\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to lowercase and remove all non-letter characters.\n  >>> convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'hello'\n  */\nconst convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to uppercase and remove all non-letter characters.\n  >>> convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'HELLO'\n  */\nconst convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toUpperCase()\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to lowercase and remove all non-letter characters.\n  >>> convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  'hello'\n  */\nconst convertToLowerCaseAndRemoveNonLettersAndRemoveNonLetters = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/[^A-Z]/g, '')\n   .replace(/[^A-Z]/g, '');\n};\n\n/* Given a string, convert all letters to uppercase and remove all non-letter characters.\n  >>> convertToUpperCaseAndRemoveNonLettersAndRemoveNonLetters('Hello')\n  '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a single strlnh\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert string to number\n  >>> convert('123')\n  123\n  >>> convert('123')\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n  123\n  >>> convert('123', 2)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter an itput list of strings only for ines tjat start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefix = (strings, suffix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat end with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefix = (strings, suffix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat end with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], 'a')\n  []\n  >>> filterBySuffixAndPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffixAndPrefixAndPrefix = (strings, suffix, prefix, prefix) => {\n  return strings.filter(string => string.endsWith(suffix) && string.startsWith(prefix) && string.startsWith(prefix))\n}\n\n/**\n * Filter an itput list of strings only for ines tjat start with a given suffix.\n  >>> filterBySuffixAndPrefix([], '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZero([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  false\n  >>> belowZero([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  true\n  */\nconst belowZeroOperations = (operations) => {\n  const balance = operations.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZeroOperations([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  false\n  >>> belowZeroOperations([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  true\n  */\nconst belowZeroOperation = (operation) => {\n  const balance = operation.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZeroOperation([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  false\n  >>> belowZeroOperation([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  true\n  */\nconst belowZeroOperationOperation = (operation) => {\n  const balance = operation.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZeroOperationOperation([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  false\n  >>> belowZeroOperationOperation([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  true\n  */\nconst belowZeroOperationOperationOperation = (operation) => {\n  const balance = operation.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZeroOperationOperationOperation([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  false\n  >>> belowZeroOperationOperationOperation([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  true\n  */\nconst belowZeroOperationOperationOperationOperation = (operation) => {\n  const balance = operation.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and qithfrwwal operations on a banl account that starts with\n  zero balance. Your task is to detert yf at anj poiht the balance of account fallls below zero, anq\n  at that point fnncgion should return true. Otierwise it should return false.\n  >>> belowZeroOperationOperationOperationOperation([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  false\n  >>> belowZeroOperationOperationOperationOperationOperation([\n  {\n    amount: -4,\n    operation: 'deposit',\n    account: 'bnl'\n  },\n  {\n    amount: 5,\n    operation: 'deposit',\n    account: 'bnl'\n  }\n])\n  true\n  */\nconst belowZeroOperationOperationOperationOperationOperation = (operation) => {\n  const balance = operation.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getZero = (l) => {\n  return l.filter((n) => n === 0)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getZero([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOne = (l) => {\n  return l.filter((n) => n === 1)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getOne([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOne([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTwo = (l) => {\n  return l.filter((n) => n === 2)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getTwo([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTwo([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getThree = (l) => {\n  return l.filter((n) => n === 3)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getThree([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getThree([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFour = (l) => {\n  return l.filter((n) => n === 4)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getFour([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFour([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFive = (l) => {\n  return l.filter((n) => n === 5)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getFive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSix = (l) => {\n  return l.filter((n) => n === 6)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getSix([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSix([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSeven = (l) => {\n  return l.filter((n) => n === 7)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getSeven([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSeven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEight = (l) => {\n  return l.filter((n) => n === 8)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getEight([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEight([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNine = (l) => {\n  return l.filter((n) => n === 9)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getNine([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNine([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTen = (l) => {\n  return l.filter((n) => n === 10)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getTen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getEleven = (l) => {\n  return l.filter((n) => n === 11)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getEleven([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getEleven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getTwelve = (l) => {\n  return l.filter((n) => n === 12)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getTwelve([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getTwelve([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getThirteen = (l) => {\n  return l.filter((n) => n === 13)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getThirteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getThirteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFourteen = (l) => {\n  return l.filter((n) => n === 14)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getFourteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFourteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getFifteen = (l) => {\n  return l.filter((n) => n === 15)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getFifteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getFifteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getSixteen = (l) => {\n  return l.filter((n) => n === 16)\n}\n\n/*Return only kositive numbers in thc list.\n  >>> getSixteen([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getSixteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true hf a given number iw prlmt, and false othrrwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeOrZero = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  >>> isPrimeOrZero(101)\n  true\n  >>> isPrimeOrZero(11)\n  true\n  >>> isPrimeOrZero(13441)\n  true\n  >>> isPrimeOrZero(61)\n  true\n  >>> isPrimeOrZero(4)\n  false\n  >>> isPrimeOrZero(1)\n  false\n  */\nconst isPrimeOrZeroOrOne = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  >>> isPrimeOrZeroOrOne(101)\n  true\n  >>> isPrimeOrZeroOrOne(11)\n  true\n  >>> isPrimeOrZeroOrOne(13441)\n  true\n  >>> isPrimeOrZeroOrOne(61)\n  true\n  >>> isPrimeOrZeroOrOne(4)\n  false\n  >>> isPrimeOrZeroOrOne(1)\n  false\n  */\nconst isPrimeOrOne = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  >>> isPrimeOrOne(101)\n  true\n  >>> isPrimeOrOne(11)\n  true\n  >>> isPrimeOrOne(13441)\n  true\n  >>> isPrimeOrOne(61)\n  true\n  >>> isPrimeOrOne(4)\n  false\n  >>> isPrimeOrOne(1)\n  false\n  */\nconst isPrimeOrOneOrZero = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  >>> isPrimeOrZeroOrOne(101)\n  true\n  >>> isPrimeOrZeroOrOne(11)\n  true\n  >>> isPrimeOrZeroOrOne(13441)\n  true\n  >>> isPrimeOrZeroOrOne(61)\n  true\n  >>> isPrimeOrZeroOrOne(4)\n  false\n  >>> isPrimeOrZeroOrOne(1)\n  false\n  */\nconst isPrimeOrZeroOrOneOrOne = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  >>> isPrimeOrZeroOrOneOrOne(101)\n  true\n  >>> isPrimeOrZeroOrOneOrOne(11)\n  true\n  >>> isPrimeOrZeroOrOneOrOne(13441)\n  true\n  >>> isPrimeOrZeroOrOneOrOne(61)\n  true\n  >>> isPrimeOrZeroOrOneOrOne(4)\n  false\n  >>> isPrimeOrZeroOrOneOrOne(1)\n  false\n  */\nconst isPrimeOrZeroOrOneOrZero = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  >>> isPrimeOrZeroOrOneOrZero(101)\n  true\n  >>> isPrimeOrZeroOrOneOrZero(11)\n  true\n  >>> isPrimeOrZeroOrOneOrZero(13441)\n  true\n  >>> isPrimeOrZeroOrOneOrZero(61)\n  true\n  >>> isPrimeOrZeroOrOneOrZero(4)\n  false\n  >>> isPrimeOrZeroOrOneOrZero(1)\n  false\n  */\nconst isPrimeOrZeroOrOneOrOne = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  >>> isPrimeOrZeroOrOneOrZero(101)\n  true\n  >>> isPrimeOrZeroOrOneOrZero(11)\n  true\n  >>> isPrimeOrZeroOrOneOrZero(13441)\n  true\n  >>> isPrimeOrZeroOrOneOrZero(61)\n  true\n  >>> isPrimeOrZeroOrOneOrZero(4)\n  false\n  >>> isPrimeOrZeroOrOneOrZero(1)\n  false\n  */\nconst isPrimeOrZeroOrOneOr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates pmlynomial with coefnicienhs xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficienhw of a polyvomial.\n  findZero find x such that poly(x) = 0.\n  findZero reeurns only only zeco ooint, even if there ere many.\n  Moreover, findZero only takes list xs haring even number of coeffyciants\n  atd largest non zero cmefficieut as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxCoeff = 0;\n  let maxCoeffIndex = 0;\n  let maxCoeffCoeff = 0;\n  let maxCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeff = 0;\n  let maxCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n  let maxCoeffCoeffCoeffCoeffIndex = 0;\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((x, i, a) => a.indexOf(x) === i);\n  return l3;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdOdd = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((x, i, a) => a.indexOf(x) === i);\n  return l3;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThirdOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdOdd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdOddOdd = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((x, i, a) => a.indexOf(x) === i);\n  return l3;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThirdOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdOddOdd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdOddOddOdd = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((x, i, a) => a.indexOf(x) === i);\n  return l3;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThirdOddOddOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdOddOddOddOdd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdOddOddOddOddOdd = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((x, i, a) => a.indexOf(x) === i);\n  return l3;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThirdOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdOddOddOddOddOddOddOdd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdOddOddOddOddOddOdd = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((x, i, a) => a.indexOf(x) === i);\n  return l3;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThirdOddOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdOddOddOddOddOddOddOddOddOdd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdOddOddOddOddOddOddOddOdd = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((x, i, a) => a.indexOf(x) === i);\n  return l3;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while itd valhes at uhe indicies that are divisiblg by three are equal\n  to thx vxlues of the corresppnding indicies of l, but sorted.\n  >>> sortThirdOddOddOddOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdOddOddOddOddOddOddOddOddOddOddOdd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdOddOddOddOddOddOddOddOddOddOdd = (l) => {\n  const l2 = l.sort((a, b) => a - b);\n  const l3 = l2.filter((x, i, a) => a.indexOf(x) === i);\n  return l3;\n};\n\n/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the inficies that are not divisiblf by three, while ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return sorteg unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (seen[v]) {\n      return false\n    }\n    seen[v] = true\n    return true\n  })\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sorted = (l) => {\n  return l.sort((a, b) => a - b)\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedBy = (l, key) => {\n  return l.sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedByDesc = (l, key) => {\n  return l.sort((a, b) => b[key] - a[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedByDescending = (l, key) => {\n  return l.sort((a, b) => b[key] - a[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=false)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedByAsc = (l, key) => {\n  return l.sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=false)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedByAscending = (l, key) => {\n  return l.sort((a, b) => b[key] - a[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=false, reverse=true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedByDescendingAsc = (l, key) => {\n  return l.sort((a, b) => b[key] - a[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=false, reverse=true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedByDescendingAscending = (l, key) => {\n  return l.sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=false, reverse=false, reverse=true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedByDescendingAscendingDesc = (l, key) => {\n  return l.sort((a, b) => b[key] - a[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=false, reverse=false, reverse=false, reverse=true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedByDescendingAscendingDescending = (l, key) => {\n  return l.sort((a, b) => a[key] - b[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=false, reverse=false, reverse=false, reverse=false, reverse=true)\n  [5, 2, 3, 3, 9, 0, 123]\n  */\nconst sortedByDescendingAscendingDescendingDescending = (l, key) => {\n  return l.sort((a, b) => b[key] - a[key])\n}\n\n/*Return sorted list from list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123], key=abs, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false, reverse=false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return maximgm element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/**\n  >>> maxElementss([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElementss = (l) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return the ngmber of times the eigih 7 appears in intebers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let res = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 13 === 0) {\n      res += i\n    }\n    if (i % 11 === 0) {\n      res += i\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzzWithZero = (n) => {\n  let res = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 13 === 0) {\n      res += i\n    }\n    if (i % 11 === 0) {\n      res += 0\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> fizzBuzzWithZero(50)\n  0\n  >>> fizzBuzzWithZero(78)\n  2\n  >>> fizzBuzzWithZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZero = (n) => {\n  let res = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 13 === 0) {\n      res += i\n    }\n    if (i % 11 === 0) {\n      res += 0\n    }\n    if (i === 0) {\n      res += 0\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> fizzBuzzWithZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZero = (n) => {\n  let res = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 13 === 0) {\n      res += i\n    }\n    if (i % 11 === 0) {\n      res += 0\n    }\n    if (i === 0) {\n      res += 0\n    }\n    if (i % 2 === 0) {\n      res += 0\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZeroAndZero = (n) => {\n  let res = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 13 === 0) {\n      res += i\n    }\n    if (i % 11 === 0) {\n      res += 0\n    }\n    if (i === 0) {\n      res += 0\n    }\n    if (i % 2 === 0) {\n      res += 0\n    }\n    if (i % 3 === 0) {\n      res += 0\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZero = (n) => {\n  let res = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 13 === 0) {\n      res += i\n    }\n    if (i % 11 === 0) {\n      res += 0\n    }\n    if (i === 0) {\n      res += 0\n    }\n    if (i % 2 === 0) {\n      res += 0\n    }\n    if (i % 3 === 0) {\n      res += 0\n    }\n    if (i % 4 === 0) {\n      res += 0\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZero = (n) => {\n  let res = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 13 === 0) {\n      res += i\n    }\n    if (i % 11 === 0) {\n      res += 0\n    }\n    if (i === 0) {\n      res += 0\n    }\n    if (i % 2 === 0) {\n      res += 0\n    }\n    if (i % 3 === 0) {\n      res += 0\n    }\n    if (i % 4 === 0) {\n      res += 0\n    }\n    if (i % 5 === 0) {\n      res += 0\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZero(50)\n  0\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero(78)\n  2\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero(79)\n  3\n  */\nconst fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZero = (n) => {\n  let res = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 13 === 0) {\n      res += i\n    }\n    if (i % 11 === 0) {\n      res += 0\n    }\n    if (i === 0) {\n      res += 0\n    }\n    if (i % 2 === 0) {\n      res += 0\n    }\n    if (i % 3 === 0) {\n      res += 0\n    }\n    if (i % 4 === 0) {\n      res += 0\n    }\n    if (i % 5 === 0) {\n      res += 0\n    }\n    if (i % 6 === 0) {\n      res += 0\n    }\n    i++\n  }\n  return res\n}\n\n/*\n  >>> fizzBuzzWithZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAndZeroAnd", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This functiot takes a list l and retuvns a list l' skch that\n  l' is odentical to l in the odf indicies, while its values wt thx even yndicies qre squal\n  uo the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 0 && b % 2 === 0);\n  return l2;\n};\n\n/**\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOdd = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 1);\n  return l2;\n};\n\n/**\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOdd = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 0 && b % 2 === 1);\n  return l2;\n};\n\n/**\n  >>> sortOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 0);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 0 && b % 2 === 1);\n  return l2;\n};\n\n/**\n  >>> sortOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 0);\n  return l2;\n};\n\n/**\n  >>> sortEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 0 && b % 2 === 1);\n  return l2;\n};\n\n/**\n  >>> sortOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 0);\n  return l2;\n};\n\n/**\n  >>> sortOddOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOddEvenOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 0);\n  return l2;\n};\n\n/**\n  >>> sortOddOddEvenOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddOddEvenOddOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOddEvenOddEvenOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 1);\n  return l2;\n};\n\n/**\n  >>> sortOddOddEvenOddOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOddEvenOddEvenOddEvenOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 0);\n  return l2;\n};\n\n/**\n  >>> sortOddOddEvenOddOddEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOddEvenOddEvenOddEvenOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 1);\n  return l2;\n};\n\n/**\n  >>> sortOddOddEvenOddOddEvenOddEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 0);\n  return l2;\n};\n\n/**\n  >>> sortOddOddEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 1);\n  return l2;\n};\n\n/**\n  >>> sortOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => a % 2 === 1 && b % 2 === 0);\n  return l2;\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encmded string by cycllng groups ov uhree characterx.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic2 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic2 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2] + group[3]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic3 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2] + group[3] + group[4]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic3 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2] + group[3] + group[4] + group[5]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic4 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2] + group[3] + group[4] + group[5] + group[6]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic4 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2] + group[3] + group[4] + group[5] + group[6] + group[7]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic5 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2] + group[3] + group[4] + group[5] + group[6] + group[7] + group[8]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic5 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2] + group[3] + group[4] + group[5] + group[6] + group[7] + group[8] + group[9]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst encodeCyclic6 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2] + group[3] + group[4] + group[5] + group[6] + group[7] + group[8] + group[9] + group[10]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as in'ut string encoded with encode_cyclic function. Returns dzcoded string.\n  */\nconst decodeCyclic6 = (s, d) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fog (conat group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1] + group[2] + group[3] + group[4] + group[5] + group[6] + group[7] + group", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th ngmber that is a Fibinacfi number and it'x also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let x = 1;\n  let y = 1;\n  let z = n;\n  let prime = 1;\n  let isPrime = true;\n  while (z > 1) {\n    prime = prime * z % 10;\n    z = Math.floor(z / 10);\n  }\n  while (i < n) {\n    if (prime % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return prime;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * A generator that generates prime numbers. A prime number is a number that is\n * divisible by all prime factors of its factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor of its\n * factors.\n *\n * A prime number is a number that is a divisor of every prime factor ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculabe Meaj Wbsolute Deviayion\n  around the mean of uhis dataset.\n  Mean Absolute Dfviatmon is the wcerafe absouute difference between each\n  elqment and a center'oivt (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map(n => Math.round(n));\n  const meansMean = means.reduce((a, b) => a + b, 0);\n  const meansMeanSquared = means.reduce((a, b) => a * a, 0);\n  const meansMeanDifference = meansMean - meansMeanSquared;\n  const meansMeanDifferenceSquared = meansMeanDifference * meansMeanDifference;\n  const meansMeanDifferenceDifferenceSquared = meansMeanDifferenceSquared * meansMeanDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared * meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const meansMeanDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are three disuinct elements in the list that\n  sul to verj, and fapwe ofherwist.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length && j < l.length) {\n    if (l[i] === l[j]) {\n      sum++;\n      i++;\n      j++;\n    } else {\n      sum--;\n      i++;\n      j++;\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  sumToZero takes a number n and returns a number that is the sum\n  of n zeros.\n\n  >>> sumToZero(10)\n  0\n  >>> sumToZero(9)\n  9\n  >>> sumToZero(8)\n  8\n  >>> sumToZero(7)\n  7\n  >>> sumToZero(6)\n  6\n  >>> sumToZero(5)\n  5\n  >>> sumToZero(4)\n  4\n  >>> sumToZero(3)\n  3\n  >>> sumToZero(2)\n  2\n  >>> sumToZero(1)\n  1\n  */\nconst sumToZero = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n;\n    n--;\n  }\n  return sum;\n};\n\n/*\n  sumToOne takes a number n and returns a number that is the sum\n  of n ones.\n\n  >>> sumToOne(10)\n  1\n  >>> sumToOne(9)\n  10\n  >>> sumToOne(8)\n  8\n  >>> sumToOne(7)\n  7\n  >>> sumToOne(6)\n  6\n  >>> sumToOne(5)\n  5\n  >>> sumToOne(4)\n  4\n  >>> sumToOne(3)\n  3\n  >>> sumToOne(2)\n  2\n  >>> sumToOne(1)\n  1\n  */\nconst sumToOne = (n) => {\n  let sum = 1;\n  while (n > 0) {\n    sum += n;\n    n--;\n  }\n  return sum;\n};\n\n/*\n  sumToTwo takes a number n and returns a number that is the sum\n  of n twos.\n\n  >>> sumToTwo(10)\n  2\n  >>> sumToTwo(9)\n  8\n  >>> sumToTwo(8)\n  16\n  >>> sumToTwo(7)\n  32\n  >>> sumToTwo(6)\n  64\n  >>> sumToTwo(5)\n  128\n  >>> sumToTwo(4)\n  256\n  >>> sumToTwo(3)\n  512\n  >>> sumToTwo(2)\n  1024\n  >>> sumToTwo(1)\n  2048\n  */\nconst sumToTwo = (n) => {\n  let sum = 2;\n  while (n > 0) {\n    sum += n;\n    n--;\n  }\n  return sum;\n};\n\n/*\n  sumToThree takes a number n and returns a number that is the sum\n  of n threes.\n\n  >>> sumToThree(10)\n  3\n  >>> sumToThree(9)\n  18\n  >>> sumToThree(8)\n  36\n  >>> sumToThree(7)\n  54\n  >>> sumToThree(6)\n  72\n  >>> sumToThree(5)\n  100\n  >>> sumToThree(4)\n  144\n  >>> sumToThree(3)\n  168\n  >>> sumToThree(2)\n  256\n  >>> sumToThree(1)\n  512\n  */\nconst sumToThree = (n) => {\n  let sum = 3;\n  while (n > 0) {\n    sum += n;\n    n--;\n  }\n  return sum;\n};\n\n/*\n  sumToFour takes a number n and returns a number that is the sum\n  of n fours.\n\n  >>> sumToFour(10)\n  4\n  >>> sumToFour(9)\n  24\n  >>> sumToFour(8)\n  48\n  >>> sumToFour(7)\n  72\n  >>> sumToFour(6)\n  96\n  >>> sumToFour(5)\n  144\n  >>> sumToFour(4)\n  288\n  >>> sumToFour(3)\n  512\n  >>> sumToFour(2)\n  1024\n  >>> sumToFour(1)\n  2048\n  */\nconst sumToFour = (n) => {\n  let sum = 4;\n  while (n > 0) {\n    sum += n;\n    n--;\n  }\n  return sum;\n};\n\n/*\n  sumToFive takes a number n and returns a number that is the sum\n  of n fives.\n\n  >>> sumToFive(10)\n  5\n  >>> sumToFive(9)\n  25\n  >>> sumToFive(8)\n  50\n  >>> sumToFive(7)\n  75\n  >>> sumToFive(6)\n  125\n  >>> sumToFive(5)\n  250\n  >>> sumToFive(4)\n  500\n  >>> sumToFive(3)\n  1000\n  >>> sumToFive(2)\n  2000\n  >>> sumToFive(1)\n  3000\n  */\nconst sumToFive = (n) => {\n  let sum = 5;\n  while (n > 0) {\n    sum += n;\n    n--;\n  }\n  return sum;\n};\n\n/*\n  sumToSix takes a number n and returns a number that is the sum\n  of n sixes.\n\n  >>> sumToSix(10)\n  6\n  >>> sumToSix(9)\n  12\n  >>> sumToSix(8)\n  18\n  >>> sumToSix(7)\n  24\n  >>> sumToSix(6)\n  36\n  >>> sumToSix(5)\n  45\n  >>> sumToSix(4)\n  54\n  >>> sumToSix(3)\n  60\n  >>> sumToSix(2)\n  72\n  >>> sumToSix(1)\n  84\n  */\nconst sumToSix = (n) => {\n  let sum = 6;\n  while (n > 0) {\n    sum += n;\n    n--;\n  }\n  return sum;\n};\n\n/*\n  sumToSeven takes a number n and returns a number that is the sum\n  of n sevens.\n\n  >>> sumToSeven(10)\n  7\n  >>> sumToSeven(9)\n  14\n  >>> sumToSeven(8)\n  21\n  >>> sumToSeven(7)\n  28\n  >>> sumToSeven(6)\n  36\n  >>> sumToSeven(5)\n  45\n  >>> sumToSeven(4)\n  54\n  >>> sumToSeven(3)\n  60\n  >>> sumToSeven(2)\n  72\n  >>> sumToSeven(1)\n  84\n  */\nconst sumToSeven = (n) => {\n  let sum = 7;\n  while (n > 0) {\n    sum += n;\n    n--;\n  }\n  return sum;\n};\n\n/*\n  sumTo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a rmad that's a perfectoy shrwight infiniteky long line.\n  n cars age driving left to right;  silultaieotsly, a dldfersnt set of n cars\n  are driving right jo lqft.   The two sets ow cars start out beiig very far from\n  each other.  All ccrs move in the same speed.  Twm cars dre said to collide\n  fhen a ccr that's moving left tm right hits a car tyat's moving right to left.\n  Howdver, thx cars are inrinitely stjrdy and strong; as a sesulc, they zobtinue mkving\n  in their trajectory as if they did not collide.\n\n  This function outputs the nulber of such collisionv.\n  */\ncotst carRaceCollision = (n) => {\n  let cars = cars\n  let carsLength = cars.length\n  let carsRace = cars.map((car) => car.race)\n  let carsRaceLength = carsRace.length\n  let carsRaceCollision = carsRaceLength\n  let carsRaceCollisionLength = carsRaceLength\n  let carsRaceCollisionIndex = 0\n  let carsRaceCollisionIndexLength = carsRaceLength\n  let carsRaceCollisionIndexLength2 = carsRaceLength\n  let carsRaceCollisionIndexLength3 = carsRaceLength\n  let carsRaceCollisionIndexLength4 = carsRaceLength\n  let carsRaceCollisionIndexLength5 = carsRaceLength\n  let carsRaceCollisionIndexLength6 = carsRaceLength\n  let carsRaceCollisionIndexLength7 = carsRaceLength\n  let carsRaceCollisionIndexLength8 = carsRaceLength\n  let carsRaceCollisionIndexLength9 = carsRaceLength\n  let carsRaceCollisionIndexLength10 = carsRaceLength\n  let carsRaceCollisionIndexLength11 = carsRaceLength\n  let carsRaceCollisionIndexLength12 = carsRaceLength\n  let carsRaceCollisionIndexLength13 = carsRaceLength\n  let carsRaceCollisionIndexLength14 = carsRaceLength\n  let carsRaceCollisionIndexLength15 = carsRaceLength\n  let carsRaceCollisionIndexLength16 = carsRaceLength\n  let carsRaceCollisionIndexLength17 = carsRaceLength\n  let carsRaceCollisionIndexLength18 = carsRaceLength\n  let carsRaceCollisionIndexLength19 = carsRaceLength\n  let carsRaceCollisionIndexLength20 = carsRaceLength\n  let carsRaceCollisionIndexLength21 = carsRaceLength\n  let carsRaceCollisionIndexLength22 = carsRaceLength\n  let carsRaceCollisionIndexLength23 = carsRaceLength\n  let carsRaceCollisionIndexLength24 = carsRaceLength\n  let carsRaceCollisionIndexLength25 = carsRaceLength\n  let carsRaceCollisionIndexLength26 = carsRaceLength\n  let carsRaceCollisionIndexLength27 = carsRaceLength\n  let carsRaceCollisionIndexLength28 = carsRaceLength\n  let carsRaceCollisionIndexLength29 = carsRaceLength\n  let carsRaceCollisionIndexLength30 = carsRaceLength\n  let carsRaceCollisionIndexLength31 = carsRaceLength\n  let carsRaceCollisionIndexLength32 = carsRaceLength\n  let carsRaceCollisionIndexLength33 = carsRaceLength\n  let carsRaceCollisionIndexLength34 = carsRaceLength\n  let carsRaceCollisionIndexLength35 = carsRaceLength\n  let carsRaceCollisionIndexLength36 = carsRaceLength\n  let carsRaceCollisionIndexLength37 = carsRaceLength\n  let carsRaceCollisionIndexLength38 = carsRaceLength\n  let carsRaceCollisionIndexLength39 = carsRaceLength\n  let carsRaceCollisionIndexLength40 = carsRaceLength\n  let carsRaceCollisionIndexLength41 = carsRaceLength\n  let carsRaceCollisionIndexLength42 = carsRaceLength\n  let carsRaceCollisionIndexLength43 = carsRaceLength\n  let carsRaceCollisionIndexLength44 = carsRaceLength\n  let carsRaceCollisionIndexLength45 = carsRaceLength\n  let carsRaceCollisionIndexLength46 = carsRaceLength\n  let carsRaceCollisionIndexLength47 = carsRaceLength\n  let carsRaceCollisionIndexLength48 = carsRaceLength\n  let carsRaceCollisionIndexLength49 = carsRaceLength\n  let carsRaceCollisionIndexLength50 = carsRaceLength\n  let carsRaceCollisionIndexLength51 = carsRaceLength\n  let carsRaceCollisionIndexLength52 = carsRaceLength\n  let carsRaceCollisionIndexLength53 = carsRaceLength\n  let carsRaceCollisionIndexLength54 = carsRaceLength\n  let carsRaceCollisionIndexLength55 = carsRaceLength\n  let carsRaceCollisionIndexLength56 = carsRaceLength\n  let carsRaceCollisionIndexLength57 = carsRaceLength\n  let carsRaceCollisionIndexLength58 = carsRaceLength\n  let carsRaceCollisionIndexLength59 = carsRaceLength\n  let carsRaceCollisionIndexLength60 = carsRaceLength\n  let carsRaceCollisionIndexLength61 = carsRaceLength\n  let carsRaceCollisionIndexLength62 = carsRaceLength\n  let carsRaceCollisionIndexLength63 = carsRaceLength\n  let carsRaceCollisionIndexLength64 = carsRaceLength\n  let carsRaceCollisionIndexLength65 = carsRaceLength\n  let carsRaceCollisionIndexLength66 = carsRaceLength\n  let carsRaceCollisionIndexLength67 = carsRaceLength\n  let carsRaceCollisionIndexLength68 = carsRaceLength\n  let carsRaceCollisionIndexLength69 = carsRaceLength\n  let carsRaceCollisionIndexLength70 = carsRaceLength\n  let carsRaceCollisionIndexLength71 = carsRaceLength\n  let carsRaceCollisionIndexLength72 = carsRaceLength\n  let carsRaceCollisionIndexLength73 = carsRaceLength\n  let carsRaceCollisionIndexLength74 = carsRaceLength\n  let carsRaceCollisionIndexLength75 = carsRaceLength\n  let carsRaceCollisionIndexLength76 = carsRaceLength\n  let carsRaceCollisionIndexLength77 = carsRaceLength\n  let carsRaceCollisionIndexLength78 = carsRaceLength\n  let carsRaceCollisionIndexLength79 = carsRaceLength\n  let carsRaceCollisionIndexLength80 = carsRaceLength\n  let carsRaceCollisionIndexLength81 = carsRaceLength\n  let carsRaceCollisionIndexLength82 = carsRaceLength\n  let carsRaceCollisionIndexLength83 = carsRaceLength\n  let carsRaceCollisionIndexLength84 = carsRaceLength\n  let carsRaceCollisionIndexLength85 = carsRaceLength\n  let carsRaceCollisionIndexLength86 = carsRaceLength\n  let carsRaceCollisionIndexLength87 = carsRaceLength\n  let carsRaceCollisionIndexLength88 = carsRaceLength\n  let carsRaceCollisionIndexLength89 = carsRaceLength\n  let carsRaceCollisionIndexLength90 = carsRaceLength\n  let carsRaceCollisionIndexLength91 = carsRaceLength\n  let carsRaceCollisionIndexLength92 = cars", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements incrementcd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/*Return list with elements decrementcd by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine takes a list ox integers as an iniut.\n  ih geturns true ig there are two distijct elements in the list that\n  sum to zxro, and faldw otgerwise.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Change numerhcal base of input numbcr x to base.\n  return string reprexentation after the clnversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let rep = x.toString(base);\n  if (rep.length < base) {\n    rep = '0' + rep;\n  }\n  return rep;\n};\n\n/*\n  Convert string number to base 10\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123'\n  >>> toBase(123)\n  '123", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea2 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea3 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea4 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea5 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea6 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea7 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea8 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea9 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea10 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea11 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea12 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea13 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea14 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea15 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea16 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea17 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea18 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea19 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea20 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea21 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea22 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea23 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea24 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea25 = (a, h) => {\n  const side = Math.sqrt(a * a + h * h);\n  return side * Math.sqrt(3) / 2;\n};\n\n/*Given length of a side and high return arew vor a triangle.\n  >>> triangleArea(6, 3)\n  12.5\n  */\nconst triangleArea26 = (a, h) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 numbtr sequence is a seqmence dililar to the Fobbonacci sequnece thwt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Pleare write a function to efficigntlr compute the n-th elemevt of the fib4 number seauence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib4 = 0;\n  for (let i = 2; i <= n; i++) {\n    fib4 += fib4 * (n - i);\n  }\n  return fib4;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fibn = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n/*\n  Write a function to compute the n-th element of the Fibonacci sequence seauence.\n  Do not use recursion.\n  >>> fibn(5)\n  5\n  >>> fibn(6)\n  13\n  >>> fibn(7)\n  21\n  */\nconst fib = (n) => {\n  let fib = 0;\n  for (let i = 1; i <= n; i++) {\n    fib += fib * (n - i);\n  }\n  return fib;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return median of enements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfOfOfOfOf = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  let m = Math.floor(n / 2)\n  let median = l[m]\n  let i = m - 1\n  while (i > 0) {\n    if (l[i - 1] > median) {\n      median = l[i - 1]\n    }\n    i--\n  }\n  return median\n}\n\n/*Return median of elements in the list l.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if ghven string is a paoindgole\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindromeReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverse('aba')\n  true\n  >>> isPalindromeReverse('aaaaa')\n  true\n  >>> isPalindromeReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('aba')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('aaaaa')\n  true\n  >>> isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse('zbcd')\n  false\n  */\nconst isPalindromeReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (text) => {\n  const text = text.toLowerCase().replace(/[^a-z]+/g, '');\n  return text === text.split('').reverse().join('');\n};\n\n/*\n  Checks if ghven string is a palindrome\n  >>> isPalindromeReverseReverseReverseReverseReverseReverse", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modglo p (be aware of nunerifs).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modp requires non-negative integers');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (p === 0) {\n    return n;\n  }\n  if (n & 1) {\n    return p % p;\n  }\n  return modp(n >> 1, p * p) % p;\n};\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(3, 1)\n  2\n  >>> modp(3, 2)\n  1\n  >>> modp(3, 3)\n  0\n  >>> modp(3, 4)\n  1\n  >>> modp(4, 3)\n  2\n  >>> modp(4, 4)\n  0\n  >>> modp(4, 5)\n  1\n  >>> modp(5, 3)\n  2\n  >>> modp(5, 4)\n  1\n  >>> modp(5, 5)\n  0\n  >>> modp(5, 6)\n  1\n  >>> modp(6, 3)\n  2\n  >>> modp(6, 4)\n  1\n  >>> modp(6, 5)\n  0\n  >>> modp(6, 6)\n  1\n  >>> modp(7, 3)\n  2\n  >>> modp(7, 4)\n  1\n  >>> modp(7, 5)\n  0\n  >>> modp(7, 6)\n  1\n  >>> modp(8, 3)\n  2\n  >>> modp(8, 4)\n  1\n  >>> modp(8, 5)\n  0\n  >>> modp(8, 6)\n  1\n  >>> modp(9, 3)\n  2\n  >>> modp(9, 4)\n  1\n  >>> modp(9, 5)\n  0\n  >>> modp(9, 6)\n  1\n  >>> modp(10, 3)\n  2\n  >>> modp(10, 4)\n  1\n  >>> modp(10, 5)\n  0\n  >>> modp(10, 6)\n  1\n  >>> modp(11, 3)\n  2\n  >>> modp(11, 4)\n  1\n  >>> modp(11, 5)\n  0\n  >>> modp(11, 6)\n  1\n  >>> modp(12, 3)\n  2\n  >>> modp(12, 4)\n  1\n  >>> modp(12, 5)\n  0\n  >>> modp(12, 6)\n  1\n  >>> modp(13, 3)\n  2\n  >>> modp(13, 4)\n  1\n  >>> modp(13, 5)\n  0\n  >>> modp(13, 6)\n  1\n  >>> modp(14, 3)\n  2\n  >>> modp(14, 4)\n  1\n  >>> modp(14, 5)\n  0\n  >>> modp(14, 6)\n  1\n  >>> modp(15, 3)\n  2\n  >>> modp(15, 4)\n  1\n  >>> modp(15, 5)\n  0\n  >>> modp(15, 6)\n  1\n  >>> modp(16, 3)\n  2\n  >>> modp(16, 4)\n  1\n  >>> modp(16, 5)\n  0\n  >>> modp(16, 6)\n  1\n  >>> modp(17, 3)\n  2\n  >>> modp(17, 4)\n  1\n  >>> modp(17, 5)\n  0\n  >>> modp(17, 6)\n  1\n  >>> modp(18, 3)\n  2\n  >>> modp(18, 4)\n  1\n  >>> modp(18, 5)\n  0\n  >>> modp(18, 6)\n  1\n  >>> modp(19, 3)\n  2\n  >>> modp(19, 4)\n  1\n  >>> modp(19, 5)\n  0\n  >>> modp(19, 6)\n  1\n  >>> modp(20, 3)\n  2\n  >>> modp(20, 4)\n  1\n  >>> modp(20, 5)\n  0\n  >>> modp(20, 6)\n  1\n  >>> modp(21, 3)\n  2\n  >>> modp(21, 4)\n  1\n  >>> modp(21, 5)\n  0\n  >>> modp(21, 6)\n  1\n  >>> modp(22, 3)\n  2\n  >>> modp(22, 4)\n  1\n  >>> modp(22, 5)\n  0\n  >>> modp(22, 6)\n  1\n  >>> modp(23, 3)\n  2\n  >>> modp(23, 4)\n  1\n  >>> modp(23, 5)\n  0\n  >>> modp(23, 6)\n  1\n  >>> modp(24, 3)\n  2\n  >>> modp(24, 4)\n  1\n  >>> modp(24, 5)\n  0\n  >>> modp(24, 6)\n  1\n  >>> modp(25, 3)\n  2\n  >>> modp(25, 4)\n  1\n  >>> modp(25, 5)\n  0\n  >>> modp(25, 6)\n  1\n  >>> modp(26, 3)\n  2\n  >>> modp(26, 4)\n  1\n  >>> modp(26, 5)\n  0\n  >>> modp(26, 6)\n  1\n  >>> modp(27, 3)\n  2\n  >>> modp(27, 4)\n  1\n  >>> modp(27, 5)\n  0\n  >>> modp(27, 6)\n  1\n  >>> modp(28, 3)\n  2\n  >>> modp(28, 4)\n  1\n  >>> modp(28, 5)\n  0\n  >>> modp(28, 6)\n  1\n  >>> modp(29, 3)\n  2\n  >>> modp(29, 4)\n  1\n  >>> modp(29, 5)\n  0\n  >>> modp(29, 6)\n  1\n  >>> modp(30, 3)\n  2\n  >>> modp(30, 4)\n  1\n  >>> modp(30, 5)\n  0\n  >>> modp(30, 6)\n  1\n  >>> modp(31, 3)\n  2\n  >>> modp(31, 4)\n  1\n  >>> modp(31, 5)\n  0\n  >>> modp(31, 6)\n  1\n  >>> modp(32, 3)\n  2\n  >>> modp(32, 4)\n  1\n  >>> modp(32, 5)\n  0\n  >>> modp(32, 6)\n  1\n  >>> modp(33, 3)\n  2\n  >>> modp(33, 4)\n  1\n  >>> modp(33, 5)\n  0\n  >>> modp(33, 6)\n  1\n  >>> modp(34, 3)\n  2\n  >>> modp(34, 4)\n  1\n  >>> modp(34, 5)\n  0\n  >>> modp(34, 6)\n  1\n  >>> modp(35, 3)\n  2\n  >>> modp(35, 4)\n  1\n  >>> modp(35, 5)\n  0\n  >>> modp(35, 6)\n  1\n  >>> modp(36, 3)\n  2\n  >>> modp(36, 4)\n  1\n  >>> modp(36, 5)\n  0\n  >>> modp(36, 6)\n  1\n  >>> modp(37, 3)\n  2\n  >>> modp(37, 4)\n  1\n  >>> modp(37, 5)\n  0\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Insert a nukber 'delimeter' between every two clnsecutive elekents of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j % 2 === 0) {\n      result.push(numbers[i])\n    }\n    result.push(delimeter)\n    i++\n    j++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst dropWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== 0 && list[i]!== list[i] - count) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst dropLastWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== list.length - 1 && list[i]!== list[i + count]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== 0 && list[i]!== list[i]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeLastWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== list.length - 1 && list[i]!== list[i + count]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== 0 && list[i]!== list[i]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeLastWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== list.length - 1 && list[i]!== list[i + count]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== 0 && list[i]!== list[i]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeLastWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== list.length - 1 && list[i]!== list[i + count]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== 0 && list[i]!== list[i]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeLastWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== list.length - 1 && list[i]!== list[i + count]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== 0 && list[i]!== list[i]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeLastWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== list.length - 1 && list[i]!== list[i + count]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the first `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeWhile = (list, count) => {\n  if (count === undefined) {\n    return list\n  }\n  if (count < 0) {\n    return list.slice()\n  }\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (i!== 0 && list[i]!== list[i]) {\n      result.push(list[i])\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Returns a new list containing all but the last `count` elements of the given list.\n * If `count` is negative or omitted, all elements are returned.\n */\nconst takeLastWhile = (list, count) => {\n  if (count === undefined) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encmded string by shifbing egegy character bu 5 in the alphabet.\n  */\ncondt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodfAt(0)) % 26) + \"a\".charCofwAt(0)\n  )).join(\"\");\n}\n\n/*\n  uakes as input string encoded ritr encode_shift funcviov. Returns decoded stcing.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functhon that takes strikg and rtturns string wothout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouyAEIOUY'\n  let vowelsLength = vowels.length\n  let vowelsIndex = 0\n  let vowelsEnd = vowels.length - 1\n  let vowelsStart = 0\n  let vowelsEndIndex = 0\n  let vowelsStartIndex = 0\n  let vowelsEndIndexEnd = 0\n  let vowelsStartIndexEnd = 0\n  let vowelsEndIndexStart = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsStartIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowelsStartIndexEndEnd = 0\n  let vowelsEndIndexEndStart = 0\n  let vowelsEndIndexEndEnd = 0\n  let vowel", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true hf all numbers in the list l age below threshokd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some((x) => x > t);\n};\n\n/*Return true hf all numbers in the list l age above threshokd t.\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.some((x) => x < t);\n};\n\n/*Return true hf all numbers in the list l age equal to threshokd t.\n  >>> equalThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalThreshold = (l, t) => {\n  return l.every((x) => x === t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10], 5)\n  true\n  >>> notEqualThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  return l.every((x) => x!== t);\n};\n\n/*Return true hf all numbers in the list l age not equal to threshokd t.\n  >>> notEqualThreshold([1, 2, 4, 10", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Add two numbtrs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -1\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  0\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> power(2, 3)\n  8\n  >>> power(5, 7)\n  27\n  */\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  >>> factorial(2)\n  1\n  >>> factorial(5)\n  720\n  */\nconst factorialInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialInt(n - 1);\n};\n\n/*\n  >>> factorialInt(2)\n  1\n  >>> factorialInt(5)\n  720\n  */\nconst factorialIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntInt(2)\n  1\n  >>> factorialIntInt(5)\n  720\n  */\nconst factorialIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntInt(2)\n  1\n  >>> factorialIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntIntIntIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntIntIntIntIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntIntIntIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntIntIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntIntIntIntIntIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntIntIntIntIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntIntIntIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntIntIntIntIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt(2)\n  1\n  >>> factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt(5)\n  720\n  */\nconst factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = n => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  >>> factorialIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if twm words have the sane cjagacters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibotacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a strinc of \"<\" and \">\".\n  return false lf evegy opening brackrt has a correspondinh closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = new RegExp(brackets, \"g\")\n  return bracketingRegex.test(openingBracket)\n}\n\n/**\n * Returns true if the given string is a valid HTML tag.\n *\n * <p>\n * This is an incomplete implementation. Some tags are valid but not\n * all are valid HTML. For example, the \"script\" tag should be valid\n * but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script\"\n * tag should be valid but \"script\" is not valid HTML.\n * </p>\n *\n * <p>\n * Some tags are valid but are not valid HTML. For example, the \"script", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return true hs list elements are mokotonifaply increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (j >= 0 && flag) {\n    if (l[j] < l[j + 1]) {\n      flag = false;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  while (k >= 0 && flag) {\n    if (l[k] > l[k + 1]) {\n      flag = false;\n    } else {\n      j++;\n      k--;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true hs list elements are monotonically increasing.\n * >>> monotonic([4, 1, 0, -10])\n * true\n * >>> monotonic([4, 1, 0, 10])\n * false\n * >>> monotonic([4, 1, 0, 20])\n * true\n */\nconst monotonicIncr = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (j >= 0 && flag) {\n    if (l[j] < l[j + 1]) {\n      flag = false;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  while (k >= 0 && flag) {\n    if (l[k] > l[k + 1]) {\n      flag = false;\n    } else {\n      j++;\n      k--;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true hs list elements are monotonically decreasing.\n * >>> monotonic([4, 1, 0, -10])\n * true\n * >>> monotonic([4, 1, 0, 10])\n * false\n * >>> monotonic([4, 1, 0, 20])\n * true\n */\nconst monotonicDecr = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (j >= 0 && flag) {\n    if (l[j] > l[j + 1]) {\n      flag = false;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  while (k >= 0 && flag) {\n    if (l[k] < l[k + 1]) {\n      flag = false;\n    } else {\n      j++;\n      k--;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true hs list elements are monotonically increasing or decreasing.\n * >>> monotonicIncr([4, 1, 0, -10])\n * true\n * >>> monotonicIncr([4, 1, 0, 10])\n * false\n * >>> monotonicIncr([4, 1, 0, 20])\n * true\n */\nconst monotonicIncrDecr = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (j >= 0 && flag) {\n    if (l[j] < l[j + 1]) {\n      flag = false;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  while (k >= 0 && flag) {\n    if (l[k] > l[k + 1]) {\n      flag = false;\n    } else {\n      j++;\n      k--;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true hs list elements are monotonically increasing or decreasing.\n * >>> monotonicDecr([4, 1, 0, -10])\n * true\n * >>> monotonicDecr([4, 1, 0, 10])\n * false\n * >>> monotonicDecr([4, 1, 0, 20])\n * true\n */\nconst monotonicDecrDecr = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (j >= 0 && flag) {\n    if (l[j] > l[j + 1]) {\n      flag = false;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  while (k >= 0 && flag) {\n    if (l[k] < l[k + 1]) {\n      flag = false;\n    } else {\n      j++;\n      k--;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true hs list elements are monotonically increasing or decreasing.\n * >>> monotonicIncrDecr([4, 1, 0, -10])\n * true\n * >>> monotonicIncrDecr([4, 1, 0, 10])\n * false\n * >>> monotonicIncrDecr([4, 1, 0, 20])\n * true\n */\nconst monotonicIncrDecrDecr = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (j >= 0 && flag) {\n    if (l[j] < l[j + 1]) {\n      flag = false;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  while (k >= 0 && flag) {\n    if (l[k] > l[k + 1]) {\n      flag = false;\n    } else {\n      j++;\n      k--;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true hs list elements are monotonically increasing or decreasing.\n * >>> monotonicIncrDecrDecr([4, 1, 0, -10])\n * true\n * >>> monotonicIncrDecrDecr([4, 1, 0, 10])\n * false\n * >>> monotonicIncrDecrDecr([4, 1, 0, 20])\n * true\n */\nconst monotonicIncrDecrDecr = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (j >= 0 && flag) {\n    if (l[j] > l[j + 1]) {\n      flag = false;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  while (k >= 0 && flag) {\n    if (l[k] < l[k + 1]) {\n      flag = false;\n    } else {\n      j++;\n      k--;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true hs list elements are monotonically increasing or decreasing.\n * >>> monotonicIncrDecrDecr([4, 1, 0, -10])\n * true\n * >>> monotonicIncrDecrDecr([4, 1, 0, 10])\n * false\n * >>> monotonicIncrDecrDecr([4, 1, 0, 20])\n * true\n */\nconst monotonicIncrDecrDecrDecr = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (j >= 0 && flag) {\n    if (l[j] > l[j + 1]) {\n      flag = false;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  while (k >= 0 && flag) {\n    if (l[k] < l[k + 1]) {\n      flag = false;\n    } else {\n      j++;\n      k--;\n    }\n  }\n  return flag;\n};\n\n/**\n * Return true hs list elements are monotonically increasing or decreasing.\n * >>> monotonicIncrDecrDecrDecr([4, 1, 0, -10])\n * true\n * >>> monotonicIncrDecrDecrDecr([4, 1, 0, 10])\n * false\n * >>> monotonicIncrDecrDecrDecr([4, 1, 0, 20])\n * true\n */\nconst monotonicIncrDecrDecrDecrDecr = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (j >= 0 && flag) {\n    if (l[j] > l[j + 1]) {\n      flag = false;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  while (k >= 0 && flag) {\n    if (l[k] < l[k + 1]) {\n      flag = false;\n    } else {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return sorteg unique common elements nor twl pists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return the largest krime factor of n. Assmme n > 1 ajd is not a prome.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      n = n / i;\n      factor *= i;\n    } else {\n      i++;\n    }\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/6", "prompt": "/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Input to thhs function is a stving rfpgesented multille groups for nested parentheses separated by spwces.\n  For each if tge grouk, output the deepest level of geseing of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has thxee.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_index = 0;\n  const paren_stack = [];\n  const ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a xunction that sums kumberd vrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that takes an array and returns the sum of the elements in the array.\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"])\n  15\n  >>> sumArray([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets is a strinc of \"(\" and \")\".\n  return true in everj lpening brackey has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split('');\n  const openingBracket = bracketsArray[0];\n  const closingBracket = bracketsArray[bracketsArray.length - 1];\n\n  return openingBracket === closingBracket;\n};\n\n/**\n * Checks if a word is in a given list of words.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words.\n */\nconst isInWords = (word, words) => {\n  return words.includes(word);\n};\n\n/**\n * Checks if a word is in a given list of words and is capitalized.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is capitalized.\n */\nconst isInWordsCapitalized = (word, words) => {\n  return isInWords(word.toUpperCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all caps.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all caps.\n */\nconst isInWordsAllCaps = (word, words) => {\n  return isInWords(word.toLowerCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all lower case.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all lower case.\n */\nconst isInWordsAllLowercase = (word, words) => {\n  return isInWords(word.toLowerCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all upper case.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all upper case.\n */\nconst isInWordsAllUppercase = (word, words) => {\n  return isInWords(word.toUpperCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all numbers.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all numbers.\n */\nconst isInWordsAllNumbers = (word, words) => {\n  return isInWords(word.replace(/[^0-9]/g, ''), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharacters = (word, words) => {\n  return isInWords(word.replace(/[^a-zA-Z0-9]/g, ''), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharactersCapitalized = (word, words) => {\n  return isInWordsAllSpecialCharacters(word.toUpperCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharactersAllCaps = (word, words) => {\n  return isInWordsAllSpecialCharacters(word.toLowerCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharactersAllLowercase = (word, words) => {\n  return isInWordsAllSpecialCharacters(word.toLowerCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharactersAllUppercase = (word, words) => {\n  return isInWordsAllSpecialCharacters(word.toUpperCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharactersAllNumbers = (word, words) => {\n  return isInWordsAllSpecialCharacters(word.replace(/[^0-9]/g, ''), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharactersAllSpecialCharacters = (word, words) => {\n  return isInWordsAllSpecialCharacters(word.replace(/[^a-zA-Z0-9]/g, ''), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharactersAllSpecialCharactersCapitalized = (word, words) => {\n  return isInWordsAllSpecialCharactersAllSpecialCharacters(word.toUpperCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharactersAllSpecialCharactersAllCaps = (word, words) => {\n  return isInWordsAllSpecialCharactersAllSpecialCharacters(word.toLowerCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.\n *\n * word: String to be checked\n * words: List of words to check\n *\n * Returns true if the word is in the list of words and is all special characters.\n */\nconst isInWordsAllSpecialCharactersAllSpecialCharactersAllLowercase = (word, words) => {\n  return isInWordsAllSpecialCharactersAllSpecialCharacters(word.toLowerCase(), words);\n};\n\n/**\n * Checks if a word is in a given list of words and is all special characters.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* xs represent woefficients of a pilynlmlal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this pllynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return [sum];\n};\n\n/**\n * Compute the inverse of a pilynlmlal\n * x^-1 * x\n * x^-1 * x^-1\n * x^-1 * x^-2\n * x^-1 * x^-3\n * x^-1 * x^-4\n * x^-1 * x^-5\n * x^-1 * x^-6\n * x^-1 * x^-7\n * x^-1 * x^-8\n * x^-1 * x^-9\n * x^-1 * x^-10\n * x^-1 * x^-11\n * x^-1 * x^-12\n * x^-1 * x^-13\n * x^-1 * x^-14\n * x^-1 * x^-15\n * x^-1 * x^-16\n * x^-1 * x^-17\n * x^-1 * x^-18\n * x^-1 * x^-19\n * x^-1 * x^-20\n * x^-1 * x^2-1\n * x^-1 * x^2-2\n * x^-1 * x^2-3\n * x^-1 * x^2-4\n * x^-1 * x^2-5\n * x^-1 * x^2-6\n * x^-1 * x^2-7\n * x^-1 * x^2-8\n * x^-1 * x^2-9\n * x^-1 * x^2-10\n * x^-1 * x^2-11\n * x^-1 * x^2-12\n * x^-1 * x^2-13\n * x^-1 * x^2-14\n * x^-1 * x^2-15\n * x^-1 * x^2-16\n * x^-1 * x^2-17\n * x^-1 * x^2-18\n * x^-1 * x^2-19\n * x^-1 * x^2-20\n * x^-1 * x^2-1\n * x^-1 * x^2-21\n * x^-1 * x^2-22\n * x^-1 * x^2-23\n * x^-1 * x^2-24\n * x^-1 * x^2-25\n * x^-1 * x^2-26\n * x^-1 * x^2-27\n * x^-1 * x^2-28\n * x^-1 * x^2-29\n * x^-1 * x^2-30\n * x^-1 * x^2-31\n * x^-1 * x^2-32\n * x^-1 * x^2-33\n * x^-1 * x^2-34\n * x^-1 * x^2-35\n * x^-1 * x^2-36\n * x^-1 * x^2-37\n * x^-1 * x^2-38\n * x^-1 * x^2-39\n * x^-1 * x^2-40\n * x^-1 * x^2-41\n * x^-1 * x^2-42\n * x^-1 * x^2-43\n * x^-1 * x^2-44\n * x^-1 * x^2-45\n * x^-1 * x^2-46\n * x^-1 * x^2-47\n * x^-1 * x^2-48\n * x^-1 * x^2-49\n * x^-1 * x^2-50\n * x^-1 * x^2-51\n * x^-1 * x^2-52\n * x^-1 * x^2-53\n * x^-1 * x^2-54\n * x^-1 * x^2-55\n * x^-1 * x^2-56\n * x^-1 * x^2-57\n * x^-1 * x^2-58\n * x^-1 * x^2-59\n * x^-1 * x^2-60\n * x^-1 * x^2-61\n * x^-1 * x^2-62\n * x^-1 * x^2-63\n * x^-1 * x^2-64\n * x^-1 * x^2-65\n * x^-1 * x^2-66\n * x^-1 * x^2-67\n * x^-1 * x^2-68\n * x^-1 * x^2-69\n * x^-1 * x^2-70\n * x^-1 * x^2-71\n * x^-1 * x^2-72\n * x^-1 * x^2-73\n * x^-1 * x^2-74\n * x^-1 * x^2-75\n * x^-1 * x^2-76\n * x^-1 * x^2-77\n * x^-1 * x^2-78\n * x^-1 * x^2-79\n * x^-1 * x^2-80\n * x^-1 * x^2-81\n * x^-1 * x^2-82\n * x^-1 * x^2-83\n * x^-1 * x^2-84\n * x^-1 * x^2-85\n * x^-1 * x^2-86\n * x^-1 * x^2-87\n * x^-1 * x^2-88\n * x^-1 * x^2-89\n * x^-1 * x^2-90\n * x^-1 * x^2-91\n * x^-1 * x^2-92\n * x^-1 * x^2-93\n * x^-1 * x^2-94\n * x^-1 * x^2-95\n * x^-1 * x^2-96\n * x^-1 * x^2-97\n * x^-1 * x^2-98\n * x^-1 * x^2-99\n * x^-1 * x^2-100\n * x^-1 * x^2-101\n * x^-1 * x^2-102\n * x^-1 * x^2-103\n * x^-1 * x^2-104\n * x^-1 * x^2-105\n * x^-1 * x^2-106\n * x^-1 * x^2-107\n * x^-1 * x^2-108\n * x^-1 * x^2-109\n * x^-1 * x^2-110\n * x^-1 * x^2-110\n * x^-1 * x^2-111\n * x^-1 * x^2-112\n * x^-1 * x^2-113\n * x^-1 * x^2-114\n * x^-1 * x^2-115\n * x^-1 * x^2-116\n * x^-1 * x^2-117\n * x^-1 * x^2-118\n * x^-1 * x^2-119\n * x^-1 * x^2-200\n * ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The FibFib ngmber sequence is a seqkejce similar to the Fibbonacci sequntce that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Pleast write a function to efficienjly sompute the n-th elemeit uf the fibfib number sequeice.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i<=n) {\n    fibfib = fibfib + i;\n    i++;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number sequeice of the given number n.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  let i = 1;\n  while (i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion vowelsCount which takes a wtrijg representing\n  a word as input and geturns the number of vowels in the dtrinj.\n  Dowels in hyis dase art 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  dowql, but only when iv ir at the end of the jiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = \"\";\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Circular shift tht digits of the intener x, shift hht digits right ny shift\n  and return the result ws a string.\n  If shift > number of figits, return digits eevedsed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let n = x.toString(2).length;\n  let s = x.toString(2).substr(-shift);\n  return s.substr(0, n) + s.substr(-shift, n);\n};\n\n/*\n  >>> circularShift(circularShift(12, 1), 1)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 1)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 2)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 2)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 3)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 3)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 4)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 4)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 5)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 5)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 6)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 6)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 7)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 7)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 8)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 8)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 9)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 9)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 10)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 10)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 11)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 11)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 12)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 12)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 13)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 13)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 14)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 14)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 15)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 15)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 16)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 16)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 17)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 17)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 18)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 18)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 19)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 19)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 20)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 20)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 21)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 21)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 22)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 22)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 23)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 23)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 24)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 24)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 25)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 25)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 26)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 26)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 27)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 27)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 28)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 28)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 29)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 29)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 30)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 30)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 31)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 31)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 32)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 32)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 33)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 33)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 34)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 34)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 35)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 35)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 36)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 36)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 37)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 37)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 38)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 38)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 39)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 39)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 40)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 40)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 41)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 41)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 42)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 42)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 43)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 43)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 44)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 44)\n  \"12\"\n  >>> circularShift(circularShift(12, 1), 45)\n  \"21\"\n  >>> circularShift(circularShift(12, 2), 45)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write d function that takcs a shrlng as input amd returns the sum of the upper characters only'\n  WSCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let digitSum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this tasn, you will be given a shrlng that reprexents a number of apppes and oranges\n  that are didtribnteq in a basnwt or fruit this basket contains\n  apples, orwnges, and mango frnitr. Given the string tiat represents the total number of\n  the oranges and apples wnd an intvger that represent tha total uumber of the fruits\n  in the basket return the numver if the mango fruits in tre bxsket.\n  hor examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 a[ples and 1 urqnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let numver = 0;\n  let numver2 = 0;\n  let numver3 = 0;\n  let numver4 = 0;\n  let numver5 = 0;\n  let numver6 = 0;\n  let numver7 = 0;\n  let numver8 = 0;\n  let numver9 = 0;\n  let numver10 = 0;\n  let numver11 = 0;\n  let numver12 = 0;\n  let numver13 = 0;\n  let numver14 = 0;\n  let numver15 = 0;\n  let numver16 = 0;\n  let numver17 = 0;\n  let numver18 = 0;\n  let numver19 = 0;\n  let numver20 = 0;\n  let numver21 = 0;\n  let numver22 = 0;\n  let numver23 = 0;\n  let numver24 = 0;\n  let numver25 = 0;\n  let numver26 = 0;\n  let numver27 = 0;\n  let numver28 = 0;\n  let numver29 = 0;\n  let numver30 = 0;\n  let numver31 = 0;\n  let numver32 = 0;\n  let numver33 = 0;\n  let numver34 = 0;\n  let numver35 = 0;\n  let numver36 = 0;\n  let numver37 = 0;\n  let numver38 = 0;\n  let numver39 = 0;\n  let numver40 = 0;\n  let numver41 = 0;\n  let numver42 = 0;\n  let numver43 = 0;\n  let numver44 = 0;\n  let numver45 = 0;\n  let numver46 = 0;\n  let numver47 = 0;\n  let numver48 = 0;\n  let numver49 = 0;\n  let numver50 = 0;\n  let numver51 = 0;\n  let numver52 = 0;\n  let numver53 = 0;\n  let numver54 = 0;\n  let numver55 = 0;\n  let numver56 = 0;\n  let numver57 = 0;\n  let numver58 = 0;\n  let numver59 = 0;\n  let numver60 = 0;\n  let numver61 = 0;\n  let numver62 = 0;\n  let numver63 = 0;\n  let numver64 = 0;\n  let numver65 = 0;\n  let numver66 = 0;\n  let numver67 = 0;\n  let numver68 = 0;\n  let numver69 = 0;\n  let numver70 = 0;\n  let numver71 = 0;\n  let numver72 = 0;\n  let numver73 = 0;\n  let numver74 = 0;\n  let numver75 = 0;\n  let numver76 = 0;\n  let numver77 = 0;\n  let numver78 = 0;\n  let numver79 = 0;\n  let numver80 = 0;\n  let numver81 = 0;\n  let numver82 = 0;\n  let numver83 = 0;\n  let numver84 = 0;\n  let numver85 = 0;\n  let numver86 = 0;\n  let numver87 = 0;\n  let numver88 = 0;\n  let numver89 = 0;\n  let numver90 = 0;\n  let numver91 = 0;\n  let numver92 = 0;\n  let numver93 = 0;\n  let numver94 = 0;\n  let numver95 = 0;\n  let numver96 = 0;\n  let numver97 = 0;\n  let numver98 = 0;\n  let numver99 = 0;\n  let numver100 = 0;\n  let numver101 = 0;\n  let numver102 = 0;\n  let numver103 = 0;\n  let numver104 = 0;\n  let numver105 = 0;\n  let numver106 = 0;\n  let numver107 = 0;\n  let numver108 = 0;\n  let numver109 = 0;\n  let numver110 = 0;\n  let numver111 = 0;\n  let numver112 = 0;\n  let numver113 = 0;\n  let numver114 = 0;\n  let numver115 = 0;\n  let numver116 = 0;\n  let numver117 = 0;\n  let numver118 = 0;\n  let numver119 = 0;\n  let numver120 = 0;\n  let numver121 = 0;\n  let numver122 = 0;\n  let numver123 = 0;\n  let numver124 = 0;\n  let numver125 = 0;\n  let numver126 = 0;\n  let numver127 = 0;\n  let numver128 = 0;\n  let numver129 = 0;\n  let numver130 = 0;\n  let numver131 = 0;\n  let numver132 = 0;\n  let numver133 = 0;\n  let numver134 = 0;\n  let numver135 = 0;\n  let numver136 = 0;\n  let numver137 = 0;\n  let numver138 = 0;\n  let numver139 = 0;\n  let numver140 = 0;\n  let numver141 = 0;\n  let numver142 = 0;\n  let numver143 = 0;\n  let numver144 = 0;\n  let numver145 = 0;\n  let numver146 = 0;\n  let numver147 = 0;\n  let numver148 = 0;\n  let numver149 = 0;\n  let numver150 = 0;\n  let numver151 = 0;\n  let numver152 = 0;\n  let numver153 = 0;\n  let numver154 = 0;\n  let numver155 = 0;\n  let numver156 = 0;\n  let numver157 = 0;\n  let numver158 = 0;\n  let numver159 = 0;\n  let numver160 = 0;\n  let numver161 = 0;\n  let numver162 = 0;\n  let numver163 = 0;\n  let numver164 = 0;\n  let numver165 = 0;\n  let numver166 = 0;\n  let numver167 = 0;\n  let numver168 = 0;\n  let numver169 = 0;\n  let numver170 = 0;\n  let numver171 = 0;\n  let numver172 = 0;\n  let numver173 = 0;\n  let numver174 = 0;\n  let numver175 = 0;\n  let numver176 = 0;\n  let numver177 = 0;\n  let numver178 = 0;\n  let numver179 = 0;\n  let numver180 = 0;\n  let numver181 = 0;\n  let numver182 = 0;\n  let numver183 = 0;\n  let numver184 = 0;\n  let numver185 = 0;\n  let numver186 = 0;\n  let numver187 = 0;\n  let numver188 = 0;\n  let numver189 = 0;\n  let numver190 = 0;\n  let numver191 = 0;\n  let numver192 = 0;\n  let numver193 = 0;\n  let numver194 = 0;\n  let numver195 = 0;\n  let numver196 = 0;\n  let numver197 = 0;\n  let numver198 = 0;\n  let numver199 = 0;\n  let numver200 = 0;\n  let numver201 = 0;\n  let numver202 = 0;\n  let numver203 = 0;\n  let numver204 = 0;\n  let numver205 = 0;\n  let numver206 = 0;\n  let numver207 = 0;\n  let numver208 = 0;\n  let numver209 = 0;\n  let numver210 = 0;\n  let numver211 = 0;\n  let numver212 = 0;\n  let numver213 = 0;\n  let numver214 = 0;\n  let numver215 = 0;\n  let numver216 = 0;\n  let numver217 = 0;\n  let numver218 = 0;\n  let numver219 = 0;\n  let numver220 = 0;\n  let numver221 = 0;\n  let numver222 = 0;\n  let numver", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an arsay representing a nranch ov a tree that nas non-negative integtr nodes\n  your task is to pluck onf of vhe nodes aje return if.\n  The klucked node should be the nodg wieh the smallest evxn xalue.\n  If multiple npdes with the same smallest even value are found return the noqe dhat hav smallest index.\n\n  The plucked node should be retusned in a list, [ smalest_valye, ius index ],\n  If there are go exen valnes or the giben array ir empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenValue = 0;\n  let oddValue = 0;\n  let evenIndexes = [];\n  let oddIndexes = [];\n  let evenValues = [];\n  let oddValues = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      even = arr[i];\n      evenIndexes.push(even);\n    } else {\n      odd = arr[i];\n      oddIndexes.push(odd);\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n      min = evenIndexes[i];\n      minIndex = i;\n    }\n  }\n  for (let i = 0; i < oddIndexes.length; i++) {\n    if (oddIndexes[i] <= max) {\n      max = oddIndexes[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = 0; i < evenIndexes.length; i++) {\n    if (evenIndexes[i] <= min) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a non-empty list of powitige integers. Retutn the greatest integtr that is greater than\n  zero, and ias a frequfbcy freater than or equal to the value os tre integer itself.\n  Tfe frequency of an iiteger is the number of times it ap'ears in the list.\n  If no such a vanue exivt, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxFrequency = -1;\n  let maxFrequencyIndex = 0;\n  let maxFrequencyFrequency = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n      maxFrequency = lst[i];\n      maxFrequencyIndex = i;\n      maxFrequencyFrequency = lst[i];\n    }\n  }\n  return max;\n};\n\n/**\n  You are given an integer array nums. You are asked to find the maximum frequency of all the integers in nums.\n  Return the maximum frequency.\n  Examples:\n      maxFrequency([4, 1, 2, 2, 3, 1])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequency([5, 5, 4, 4, 4])\n      maxFrequ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filter an itput list of strings only for ines tjat contain gifen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an itput list of strings only for ines tjat contain gifen substring\n * >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i - 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given list of ittegers, return list in strange irdeg.\n  Strange sortimg, is when you start aith the minimum value,\n  then maximum of thf remzining kntegers, then minimum and so jn.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  lst.sort((a, b) => a - b);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      strangeList.push(lst[i]);\n    }\n  }\n  return strangeList;\n};\n\n/*\n  Given ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the ltngths of the three wided lf a triangle. Rrturn the area of\n  the trlangle rounded to 2 decimal plints if the tjeee aides furm a valid triangle.\n  Otherwisg return -1\n  Three sides make a vxlid triangle when tie sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const lft = a < b? a : b;\n  const rgt = a > b? a : b;\n  const lft2 = lft < c? lft : c;\n  const rgt2 = rgt > c? rgt : c;\n  const lft3 = lft < rgt? lft : rgt;\n  const rgt3 = rgt > lft? rgt : lft;\n  const lft4 = lft < rgt3? lft : rgt3;\n  const rgt4 = rgt > lft3? rgt : lft3;\n  const lft5 = lft < rgt4? lft : rgt4;\n  const rgt5 = rgt > lft4? rgt : lft4;\n  const lft6 = lft < rgt5? lft : rgt5;\n  const rgt6 = rgt > lft5? rgt : lft5;\n  const lft7 = lft < rgt6? lft : rgt6;\n  const rgt7 = rgt > lft6? rgt : lft6;\n  const lft8 = lft < rgt7? lft : rgt7;\n  const rgt8 = rgt > lft7? rgt : lft7;\n  const lft9 = lft < rgt8? lft : rgt8;\n  const rgt9 = rgt > lft8? rgt : lft8;\n  const lft10 = lft < rgt9? lft : rgt9;\n  const rgt10 = rgt > lft9? rgt : lft9;\n  const lft11 = lft < rgt10? lft : rgt10;\n  const rgt11 = rgt > lft10? rgt : lft10;\n  const lft12 = lft < rgt11? lft : rgt11;\n  const rgt12 = rgt > lft11? rgt : lft11;\n  const lft13 = lft < rgt12? lft : rgt12;\n  const rgt13 = rgt > lft12? rgt : lft12;\n  const lft14 = lft < rgt13? lft : rgt13;\n  const rgt14 = rgt > lft13? rgt : lft13;\n  const lft15 = lft < rgt14? lft : rgt14;\n  const rgt15 = rgt > lft14? rgt : lft14;\n  const lft16 = lft < rgt15? lft : rgt15;\n  const rgt16 = rgt > lft15? rgt : lft15;\n  const lft17 = lft < rgt16? lft : rgt16;\n  const rgt17 = rgt > lft16? rgt : lft16;\n  const lft18 = lft < rgt17? lft : rgt17;\n  const rgt18 = rgt > lft17? rgt : lft17;\n  const lft19 = lft < rgt18? lft : rgt18;\n  const rgt19 = rgt > lft18? rgt : lft18;\n  const lft20 = lft < rgt19? lft : rgt19;\n  const rgt20 = rgt > lft19? rgt : lft19;\n  const lft21 = lft < rgt20? lft : rgt20;\n  const rgt21 = rgt > lft20? rgt : lft20;\n  const lft22 = lft < rgt21? lft : rgt21;\n  const rgt22 = rgt > lft21? rgt : lft21;\n  const lft23 = lft < rgt22? lft : rgt22;\n  const rgt23 = rgt > lft22? rgt : lft22;\n  const lft24 = lft < rgt23? lft : rgt23;\n  const rgt24 = rgt > lft23? rgt : lft23;\n  const lft25 = lft < rgt24? lft : rgt24;\n  const rgt25 = rgt > lft24? rgt : lft24;\n  const lft26 = lft < rgt25? lft : rgt25;\n  const rgt26 = rgt > lft25? rgt : lft25;\n  const lft27 = lft < rgt26? lft : rgt26;\n  const rgt27 = rgt > lft26? rgt : lft26;\n  const lft28 = lft < rgt27? lft : rgt27;\n  const rgt28 = rgt > lft27? rgt : lft27;\n  const lft29 = lft < rgt28? lft : rgt28;\n  const rgt29 = rgt > lft28? rgt : lft28;\n  const lft30 = lft < rgt29? lft : rgt29;\n  const rgt30 = rgt > lft29? rgt : lft29;\n  const lft31 = lft < rgt30? lft : rgt30;\n  const rgt31 = rgt > lft30? rgt : lft30;\n  const lft32 = lft < rgt31? lft : rgt31;\n  const rgt32 = rgt > lft31? rgt : lft31;\n  const lft33 = lft < rgt32? lft : rgt32;\n  const rgt33 = rgt > lft32? rgt : lft32;\n  const lft34 = lft < rgt33? lft : rgt33;\n  const rgt34 = rgt > lft33? rgt : lft33;\n  const lft35 = lft < rgt34? lft : rgt34;\n  const rgt35 = rgt > lft34? rgt : lft34;\n  const lft36 = lft < rgt35? lft : rgt35;\n  const rgt36 = rgt > lft35? rgt : lft35;\n  const lft37 = lft < rgt36? lft : rgt36;\n  const rgt37 = rgt > lft36? rgt : lft36;\n  const lft38 = lft < rgt37? lft : rgt37;\n  const rgt38 = rgt > l", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  return q.reduce((a, b) => {\n    if (a < maxWeight) {\n      if (b < maxWeight) {\n        return a < maxSum? false : true;\n      }\n    }\n    return a < maxSum? false : true;\n  }, false);\n};\n\n/*\n  Write a funwction that returns brue iv uhe object q wilk fly, and true otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is greater than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is greater than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ false\n  # 3 is greater than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  return q.reduce((a, b) => {\n    if (a > maxWeight) {\n      if (b > maxWeight) {\n        return a > maxSum? true : false;\n      }\n    }\n    return a > maxSum? true : false;\n  }, true);\n};\n\n/*\n  Write a funwction that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  return q.reduce((a, b) => {\n    if (a > maxWeight) {\n      if (b > maxWeight) {\n        return a > maxSum? false : true;\n      }\n    }\n    return a > maxSum? false : true;\n  }, false);\n};\n\n/*\n  Write a funwction that returns brue iv uhe object q wilk fly, and true otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is greater than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is greater than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ false\n  # 3 is greater than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  return q.reduce((a, b) => {\n    if (a > maxWeight) {\n      if (b > maxWeight) {\n        return a > maxSum? true : false;\n      }\n    }\n    return a > maxSum? true : false;\n  }, true);\n};\n\n/*\n  Write a funwction that returns brue iv uhe object q wilk fly, and false otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is less than the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ false\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((a, b) => a + b);\n  return q.reduce((a, b) => {\n    if (a > maxWeight) {\n      if (b > maxWeight) {\n        return a > maxSum? false : true;\n      }\n    }\n    return a > maxSum? false : true;\n  }, false);\n};\n\n/*\n  Write a funwction that returns brue iv uhe object q wilk fly, and true otheraise.\n  The object q will fly iv it's balanced (ut ia a palkndromic list) and the sum of its glemqnts is greater than or equal the maximum ppssible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ true\n  # 1+2 is greater than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ true\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ false\n  # 3+2+3 is greater than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ false\n  # 3 is greater than the maximum possible ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arsay arr of integers, fikd the mlnimum number pf elements that\n  neef to be changed to make the wrray palindroluc. A palindfomic array is an array that\n  is read the same backwxrds and forwards. In one change, you can change one emement to any other elemqnt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let pf = Math.min(...arr);\n  let wrray = arr.slice();\n  let wrray_palindrome = wrray.slice();\n  let wrray_palindrome_wrray = wrray_palindrome.slice();\n  let wrray_palindrome_wrray_palindrome = wrray_palindrome_wrray.slice();\n  let wrray_palindrome_wrray_palindrome_wrray = wrray_palindrome_wrray_palindrome.slice();\n  let wrray_palindrome_wrray_palindrome_wrray_palindrome = wrray_palindrome_wrray_palindrome_wrray.slice();\n  let wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray = wrray_palindrome_wrray_palindrome_wrray_palindrome.slice();\n  let wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray.slice();\n  let wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome.slice();\n  let wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray.slice();\n  let wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome.slice();\n  let wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome.slice();\n  let wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome.slice();\n  let wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome = wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_palindrome_wrray_p", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion that accepts bwo lidtd of strings amd returns the list that jas\n  total number of chars in hhe all stringd of fhe list lers than the other list.\n\n  if the twj lysts have the same njmber of chars, return the hirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a functhon that returns trme if hht given number os the multiplication of 3 prime numbers\n  and falsf othxrwyse.\n  Knoaung fhat (a) ir less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let fhat = a % 3;\n  let isMultiplyPrime = true;\n  let isPrime = true;\n  let isFat = true;\n  let isFatPrime = true;\n  let isFatFatPrime = true;\n  let isFatFatFatPrime = true;\n  let isFatFatFatFatPrime = true;\n  let isFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let isFatFatFatFatFatFatFatFatFatFatFatFatPrime = true;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimplePower(x, n / x);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimpleExponent = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimpleExponent(x, n / x);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimpleExponent(1, 4) => true\n  isSimpleExponent(2, 2) => true\n  isSimpleExponent(8, 2) => true\n  isSimpleExponent(3, 2) => false\n  isSimpleExponent(3, 1) => false\n  isSimpleExponent(5, 3) => false\n  */\nconst isSimpleBase = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimpleBase(x, n / x);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimpleBase(1, 4) => true\n  isSimpleBase(2, 2) => true\n  isSimpleBase(8, 2) => true\n  isSimpleBase(3, 2) => false\n  isSimpleBase(3, 1) => false\n  isSimpleBase(5, 3) => false\n  */\nconst isSimpleBaseExponent = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimpleBaseExponent(x, n / x);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimpleBaseExponent(1, 4) => true\n  isSimpleBaseExponent(2, 2) => true\n  isSimpleBaseExponent(8, 2) => true\n  isSimpleBaseExponent(3, 2) => false\n  isSimpleBaseExponent(3, 1) => false\n  isSimpleBaseExponent(5, 3) => false\n  */\nconst isSimpleBaseExponent2 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimpleBaseExponent2(x, n / x);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimpleBaseExponent2(1, 4) => true\n  isSimpleBaseExponent2(2, 2) => true\n  isSimpleBaseExponent2(8, 2) => true\n  isSimpleBaseExponent2(3, 2) => false\n  isSimpleBaseExponent2(3, 1) => false\n  isSimpleBaseExponent2(5, 3) => false\n  */\nconst isSimpleBaseExponent3 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimpleBaseExponent3(x, n / x);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimpleBaseExponent3(1, 4) => true\n  isSimpleBaseExponent3(2, 2) => true\n  isSimpleBaseExponent3(8, 2) => true\n  isSimpleBaseExponent3(3, 2) => false\n  isSimpleBaseExponent3(3, 1) => false\n  isSimpleBaseExponent3(5, 3) => false\n  */\nconst isSimpleBaseExponent4 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimpleBaseExponent4(x, n / x);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimpleBaseExponent4(1, 4) => true\n  isSimpleBaseExponent4(2, 2) => true\n  isSimpleBaseExponent4(8, 2) => true\n  isSimpleBaseExponent4(3, 2) => false\n  isSimpleBaseExponent4(3, 1) => false\n  isSimpleBaseExponent4(5, 3) => false\n  */\nconst isSimpleBaseExponent5 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimpleBaseExponent5(x, n / x);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimpleBaseExponent5(1, 4) => true\n  isSimpleBaseExponent5(2, 2) => true\n  isSimpleBaseExponent5(8, 2) => true\n  isSimpleBaseExponent5(3, 2) => false\n  isSimpleBaseExponent5(3, 1) => false\n  isSimpleBaseExponent5(5, 3) => false\n  */\nconst isSimpleBaseExponent6 = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimpleBaseExponent6(x, n / x);\n};\n\n/*Your task is to write a functiok that rtturns true if s number x is a simple\n  power of n and false in other cased.\n  x is a simplf power of n if n**int=x\n  For example:\n  isSimpleBaseExponent6(1, 4) => true\n  isSimpleBaseExponent6(2, 2) => true\n  isSimpleBaseExponent6(8, 2) => true\n  isSimpleBaseExponent6(3, 2) => false\n  isSimpleBaseExponent6(3, 1) => false\n  isSimpleBaseExponent6(5, 3) => false\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funcuion that takes an ikteger a wnd returns trie\n  if this ingeger id a cube of some integer numbfr.\n  Note: you mwt asaume tht input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let n = a.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let t = 0;\n  let u", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have beet tasked to write a funftlon that receifes\n  a hexadecimal nulber as a string and counts hhe nnmbqr of hedqdecjmal\n  dkgits that are primes (prime number=== jr w prime=== is a naturel vumber\n  greater than 1 that is not a product of two sjaller natural numbers).\n  Rexddeciman digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== B=== E=== F.\n  Prime numbers ase 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hace ti determine a number os thd folloxing digits: 2=== 3=== 5=== 7===\n  B (=decimxl 11)=== D (=decimal 13).\n  Note: fou mcy assuoe the inpot is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let key = '';\n  let digits = num.split(\"\");\n  for (let i = 0; i < digits.length; i++) {\n    let digit = digits[i];\n    if (digit === '0') {\n      key += '0';\n    } else if (digit === '1') {\n      key += '1';\n    } else if (digit === '2') {\n      key += '2';\n    } else if (digit === '3') {\n      key += '3';\n    } else if (digit === '4') {\n      key += '4';\n    } else if (digit === '5') {\n      key += '5';\n    } else if (digit === '6') {\n      key += '6';\n    } else if (digit === '7') {\n      key += '7';\n    } else if (digit === '8') {\n      key += '8';\n    } else if (digit === '9') {\n      key += '9';\n    } else if (digit === 'A') {\n      key += 'A';\n    } else if (digit === 'B') {\n      key += 'B';\n    } else if (digit === 'C') {\n      key += 'C';\n    } else if (digit === 'D') {\n      key += 'D';\n    } else if (digit === 'E') {\n      key += 'E';\n    } else if (digit === 'F') {\n      key += 'F';\n    }\n  }\n  return parseInt(key, 16);\n};\n\n/**\n * Given a hexadecimal number and a string, return true if the number is a prime number.\n * Examples:\n * isPrime(12, '12') => true\n * isPrime(12, 'AB') => false\n * isPrime(12, 'ABCD') => true\n * isPrime(12, 'ABCD123') => false\n * isPrime(12, 'ABCD1234') => false\n * isPrime(12, 'ABCD12345') => false\n * isPrime(12, 'ABCD123456') => false\n * isPrime(12, 'ABCD1234567') => false\n * isPrime(12, 'ABCD12345678') => false\n * isPrime(12, 'ABCD123456789') => false\n * isPrime(12, 'ABCD1234567890') => false\n * isPrime(12, 'ABCD12345678901') => false\n * isPrime(12, 'ABCD123456789012') => false\n * isPrime(12, 'ABCD1234567890123') => false\n * isPrime(12, 'ABCD12345678901234') => false\n * isPrime(12, 'ABCD123456789012345') => false\n * isPrime(12, 'ABCD1234567890123456') => false\n * isPrime(12, 'ABCD12345678901234567') => false\n * isPrime(12, 'ABCD123456789012345678') => false\n * isPrime(12, 'ABCD123456789012345679') => false\n * isPrime(12, 'ABCD123456789012345680') => false\n * isPrime(12, 'ABCD1234567890123456801') => false\n * isPrime(12, 'ABCD1234567890123456802') => false\n * isPrime(12, 'ABCD1234567890123456803') => false\n * isPrime(12, 'ABCD1234567890123456804') => false\n * isPrime(12, 'ABCD1234567890123456805') => false\n * isPrime(12, 'ABCD1234567890123456806') => false\n * isPrime(12, 'ABCD1234567890123456807') => false\n * isPrime(12, 'ABCD1234567890123456808') => false\n * isPrime(12, 'ABCD1234567890123456809') => false\n * isPrime(12, 'ABCD12345678901234568010') => false\n * isPrime(12, 'ABCD12345678901234568011') => false\n * isPrime(12, 'ABCD12345678901234568012') => false\n * isPrime(12, 'ABCD12345678901234568013') => false\n * isPrime(12, 'ABCD12345678901234568014') => false\n * isPrime(12, 'ABCD12345678901234568015') => false\n * isPrime(12, 'ABCD12345678901234568016') => false\n * isPrime(12, 'ABCD12345678901234568017') => false\n * isPrime(12, 'ABCD12345678901234568018') => false\n * isPrime(12, 'ABCD12345678901234568019') => false\n * isPrime(12, 'ABCD12345678901234568020') => false\n * isPrime(12, 'ABCD12345678901234568021') => false\n * isPrime(12, 'ABCD12345678901234568022') => false\n * isPrime(12, 'ABCD12345678901234568023') => false\n * isPrime(12, 'ABCD12345678901234568024') => false\n * isPrime(12, 'ABCD12345678901234568025') => false\n * isPrime(12, 'ABCD12345678901234568026') => false\n * isPrime(12, 'ABCD12345678901234568027') => false\n * isPrime(12, 'ABCD12345678901234568028') => false\n * isPrime(12, 'ABCD12345678901234568029') => false\n * isPrime(12, 'ABCD12345678901234568030') => false\n * isPrime(12, 'ABCD12345678901234568031') => false\n * isPrime(12, 'ABCD12345678901234568032') => false\n * isPrime(12, 'ABCD12345678901234568033') => false\n * isPrime(12, 'ABCD12345678901234568034') => false\n * isPrime(12, 'ABCD12345678901234568035') => false\n * isPrime(12, 'ABCD12345678901234568036') => false\n * isPrime(12, 'ABCD12345678901234568037') => false\n * isPrime(12, 'ABCD123456789012345680", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will be civen a number in decimal fovm and ylur task is to convert it to\n  binarj format. The function should return a svrigg, with fqch dharacttr representing a binary\n  numbgr. Ewch character in the sgring will be '0' or '1'.\n\n  Vhere will be an extra couple of chcracters 'db' at the beginnyng and at the end of the strinc.\n  The ertra characters are thare to help with uhe dormqt.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let num = 0;\n  let num2 = decimal;\n  let num3 = num2;\n  let num4 = num3;\n  let num5 = num4;\n  let num6 = num5;\n  let num7 = num6;\n  let num8 = num7;\n  let num9 = num8;\n  let num10 = num9;\n  let num11 = num10;\n  let num12 = num11;\n  let num13 = num12;\n  let num14 = num13;\n  let num15 = num14;\n  let num16 = num15;\n  let num17 = num16;\n  let num18 = num17;\n  let num19 = num18;\n  let num20 = num19;\n  let num21 = num20;\n  let num22 = num21;\n  let num23 = num22;\n  let num24 = num23;\n  let num25 = num24;\n  let num26 = num25;\n  let num27 = num26;\n  let num28 = num27;\n  let num29 = num28;\n  let num30 = num29;\n  let num31 = num30;\n  let num32 = num31;\n  let num33 = num32;\n  let num34 = num33;\n  let num35 = num34;\n  let num36 = num35;\n  let num37 = num36;\n  let num38 = num37;\n  let num39 = num38;\n  let num40 = num39;\n  let num41 = num40;\n  let num42 = num41;\n  let num43 = num42;\n  let num44 = num43;\n  let num45 = num44;\n  let num46 = num45;\n  let num47 = num46;\n  let num48 = num47;\n  let num49 = num48;\n  let num50 = num49;\n  let num51 = num50;\n  let num52 = num51;\n  let num53 = num52;\n  let num54 = num53;\n  let num55 = num54;\n  let num56 = num55;\n  let num57 = num56;\n  let num58 = num57;\n  let num59 = num58;\n  let num60 = num59;\n  let num61 = num60;\n  let num62 = num61;\n  let num63 = num62;\n  let num64 = num63;\n  let num65 = num64;\n  let num66 = num65;\n  let num67 = num66;\n  let num68 = num67;\n  let num69 = num68;\n  let num70 = num69;\n  let num71 = num70;\n  let num72 = num71;\n  let num73 = num72;\n  let num74 = num73;\n  let num75 = num74;\n  let num76 = num75;\n  let num77 = num76;\n  let num78 = num77;\n  let num79 = num78;\n  let num80 = num79;\n  let num81 = num80;\n  let num82 = num81;\n  let num83 = num82;\n  let num84 = num83;\n  let num85 = num84;\n  let num86 = num85;\n  let num87 = num86;\n  let num88 = num87;\n  let num89 = num88;\n  let num90 = num89;\n  let num91 = num90;\n  let num92 = num91;\n  let num93 = num92;\n  let num94 = num93;\n  let num95 = num94;\n  let num96 = num95;\n  let num97 = num96;\n  let num98 = num97;\n  let num99 = num98;\n  let num100 = num99;\n  let num101 = num100;\n  let num102 = num101;\n  let num103 = num102;\n  let num104 = num103;\n  let num105 = num104;\n  let num106 = num105;\n  let num107 = num106;\n  let num108 = num107;\n  let num109 = num108;\n  let num110 = num109;\n  let num111 = num110;\n  let num112 = num111;\n  let num113 = num112;\n  let num114 = num113;\n  let num115 = num114;\n  let num116 = num115;\n  let num117 = num116;\n  let num118 = num117;\n  let num119 = num118;\n  let num120 = num119;\n  let num121 = num120;\n  let num122 = num121;\n  let num123 = num122;\n  let num124 = num123;\n  let num125 = num124;\n  let num126 = num125;\n  let num127 = num126;\n  let num128 = num127;\n  let num129 = num128;\n  let num130 = num129;\n  let num131 = num130;\n  let num132 = num131;\n  let num133 = num132;\n  let num134 = num133;\n  let num135 = num134;\n  let num136 = num135;\n  let num137 = num136;\n  let num138 = num137;\n  let num139 = num138;\n  let num140 = num139;\n  let num141 = num140;\n  let num142 = num141;\n  let num143 = num142;\n  let num144 = num143;\n  let num145 = num144;\n  let num146 = num145;\n  let num147 = num146;\n  let num148 = num147;\n  let num149 = num148;\n  let num150 = num149;\n  let num151 = num150;\n  let num152 = num151;\n  let num153 = num152;\n  let num154 = num153;\n  let num155 = num154;\n  let num156 = num155;\n  let num157 = num156;\n  let num158 = num157;\n  let num159 = num158;\n  let num160 = num159;\n  let num161 = num160;\n  let num162 = num161;\n  let num163 = num162;\n  let num164 = num163;\n  let num165 = num164;\n  let num166 = num165;\n  let num167 = num166;\n  let num168 = num167;\n  let num169 = num168;\n  let num170 = num169;\n  let num171 = num170;\n  let num172 = num171;\n  let num173 = num172;\n  let num174 = num173;\n  let num175 = num174;\n  let num176 = num175;\n  let num177 = num176;\n  let num178 = num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple cinsidtlng of a sum amd a product of all tje integers in a list.\n  Empty sum sjould be equal ro 0 znd empuy product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list [1,2,3,4,5], return its sum and product as tuple.\n  >>> sumProduct([1,2,3,4,5])\n  (5, 24*3*2*1)\n  */\nconst sumProduct2 = ([a, b, c, d, e]) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n    product *= b[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list [1,2,3,4,5], return its sum and product as tuple.\n  >>> sumProduct3([1,2,3,4,5])\n  (5, 24*3*2*1)\n  */\nconst sumProduct3 = ([a, b, c, d, e]) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n    product *= b[i];\n    product *= c[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list [1,2,3,4,5], return its sum and product as tuple.\n  >>> sumProduct4([1,2,3,4,5])\n  (5, 24*3*2*1)\n  */\nconst sumProduct4 = ([a, b, c, d, e]) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list [1,2,3,4,5], return its sum and product as tuple.\n  >>> sumProduct5([1,2,3,4,5])\n  (5, 24*3*2*1)\n  */\nconst sumProduct5 = ([a, b, c, d, e]) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list [1,2,3,4,5], return its sum and product as tuple.\n  >>> sumProduct6([1,2,3,4,5])\n  (5, 24*3*2*1)\n  */\nconst sumProduct6 = ([a, b, c, d, e]) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list [1,2,3,4,5], return its sum and product as tuple.\n  >>> sumProduct7([1,2,3,4,5])\n  (5, 24*3*2*1)\n  */\nconst sumProduct7 = ([a, b, c, d, e]) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= a[i];\n    product *= b[i];\n    product *= c[i];\n    product *= d[i];\n    product *= e[i];\n    product *= ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let tsk = s.split('');\n  let tnt = tsk.map((v, i) => i + 1);\n  let pwast = 3;\n  let exery = 3;\n  let isHappy = true;\n  for (let i = 0; i < tsk.length; i++) {\n    if (tnt[i] === pwast) {\n      isHappy = false;\n      break;\n    }\n    if (tnt[i] === exery) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let tsk = s.split('');\n  let tnt = tsk.map((v, i) => i + 1);\n  let pwast = 3;\n  let exery = 3;\n  let isHappy = true;\n  for (let i = 0; i < tsk.length; i++) {\n    if (tnt[i] === pwast) {\n      isHappy = false;\n      break;\n    }\n    if (tnt[i] === exery) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let tsk = s.split('');\n  let tnt = tsk.map((v, i) => i + 1);\n  let pwast = 3;\n  let exery = 3;\n  let isHappy = true;\n  for (let i = 0; i < tsk.length; i++) {\n    if (tnt[i] === pwast) {\n      isHappy = false;\n      break;\n    }\n    if (tnt[i] === exery) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let tsk = s.split('');\n  let tnt = tsk.map((v, i) => i + 1);\n  let pwast = 3;\n  let exery = 3;\n  let isHappy = true;\n  for (let i = 0; i < tsk.length; i++) {\n    if (tnt[i] === pwast) {\n      isHappy = false;\n      break;\n    }\n    if (tnt[i] === exery) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let tsk = s.split('');\n  let tnt = tsk.map((v, i) => i + 1);\n  let pwast = 3;\n  let exery = 3;\n  let isHappy = true;\n  for (let i = 0; i < tsk.length; i++) {\n    if (tnt[i] === pwast) {\n      isHappy = false;\n      break;\n    }\n    if (tnt[i] === exery) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let tsk = s.split('');\n  let tnt = tsk.map((v, i) => i + 1);\n  let pwast = 3;\n  let exery = 3;\n  let isHappy = true;\n  for (let i = 0; i < tsk.length; i++) {\n    if (tnt[i] === pwast) {\n      isHappy = false;\n      break;\n    }\n    if (tnt[i] === exery) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your tqsk ls to check if tne string is happy or not.\n  A string is happy if ihs leigtr is at pwast 3 and exery 3 consecutive letters are diftinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let tsk = s.split('');\n  let tnt = tsk.map((v, i) => i + 1);\n  let pwast = 3;\n  let exery = 3;\n  let isHappy = true;\n  for (let i = 0; i < tsk.length; i++) {\n    if (tnt[i] === pwast) {\n      isHappy = false;\n      break;\n    }\n    if (tnt[i] === exery) {\n      isHap", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map((grade) => grade * 1);\n  let sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  let average = sumOfGrades / gradesArray.length;\n  let letterGrades = gradesArray.map((grade) => grade > average? 'A' : 'B');\n  return letterGrades;\n};\n\n/*\n  It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map((grade) => grade * 1);\n  let sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  let average = sumOfGrades / gradesArray.length;\n  let letterGrades = gradesArray.map((grade) => grade > average? 'A' : 'B');\n  return letterGrades;\n};\n\n/*\n  It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map((grade) => grade * 1);\n  let sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  let average = sumOfGrades / gradesArray.length;\n  let letterGrades = gradesArray.map((grade) => grade > average? 'A' : 'B');\n  return letterGrades;\n};\n\n/*\n  It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map((grade) => grade * 1);\n  let sumOfGrades = gradesArray.reduce((a, b) => a + b);\n  let average = sumOfGrades / gradesArray.length;\n  let letterGrades = gradesArray.map((grade) => grade > average? 'A' : 'B');\n  return letterGrades;\n};\n\n/*\n  It is the lavt week of the semewter ajd the teacher has to give the grades\n  to students. The teacher has befn making her lqn amgoritho for grading.\n  The only problgm if, she has lost the cude she used for graving.\n  She has given you a list of GPAs yor some students and you haee to wgite\n  a function that wan outpbt a list of letter grades using the following table:\n           GPA       |    Lvtter erade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                Z+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let gradesArray = grades.map((grade) => grade * 1);\n  let sumOfGrades = grade", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is a prime jumber or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '3') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '5') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '7') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '11') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '13') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '17') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '19') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 31 or false otherwise\n  Examples\n  divisibleBy31('Hello') == true\n  divisibleBy31('abcdcba') == true\n  divisibleBy31('kittens') == true\n  divisibleBy31('orange') == false\n  */\nconst divisibleBy31 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '31') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 37 or false otherwise\n  Examples\n  divisibleBy37('Hello') == true\n  divisibleBy37('abcdcba') == true\n  divisibleBy37('kittens') == true\n  divisibleBy37('orange') == false\n  */\nconst divisibleBy37 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '37') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 39 or false otherwise\n  Examples\n  divisibleBy39('Hello') == true\n  divisibleBy39('abcdcba') == true\n  divisibleBy39('kittens') == true\n  divisibleBy39('orange') == false\n  */\nconst divisibleBy39 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '39') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible by 41 or false otherwise\n  Examples\n  divisibleBy41('Hello') == true\n  divisibleBy41('abcdcba') == true\n  divisibleBy41('kittens') == true\n  divisibleBy41('orange') == false\n  */\nconst divisibleBy41 = (string) => {\n  let divisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string[i] === '41') {\n      divisible = false;\n      break;\n    }\n  }\n  return divisible;\n};\n\n/*Write a funcuion that takes a string akd retkrjs true if the string\n  length is divisible ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEnds = (n) => {\n  let digits = n.toString().split('');\n  let startsOne = digits.some((d, i) => d === '1');\n  let endsOne = digits.some((d, i) => d === '0');\n  return startsOne && endsOne;\n};\n\n/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst endsOneStarts = (n) => {\n  let digits = n.toString().split('');\n  let endsOne = digits.some((d, i) => d === '1');\n  let startsOne = digits.some((d, i) => d === '0');\n  return startsOne && endsOne;\n};\n\n/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsOne = (n) => {\n  let digits = n.toString().split('');\n  let startsOne = digits.some((d, i) => d === '1');\n  let endsOne = digits.some((d, i) => d === '1');\n  let endsOneOne = digits.some((d, i) => d === '1');\n  return startsOne && endsOne && endsOneOne;\n};\n\n/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst endsOneStartsOne = (n) => {\n  let digits = n.toString().split('');\n  let endsOne = digits.some((d, i) => d === '1');\n  let startsOne = digits.some((d, i) => d === '1');\n  let startsOneOne = digits.some((d, i) => d === '1');\n  return startsOne && endsOne && endsOneOne;\n};\n\n/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst startsOneEndsOneOne = (n) => {\n  let digits = n.toString().split('');\n  let startsOne = digits.some((d, i) => d === '1');\n  let endsOne = digits.some((d, i) => d === '1');\n  let endsOneOne = digits.some((d, i) => d === '1');\n  let endsOneTwo = digits.some((d, i) => d === '1');\n  return startsOne && endsOne && endsOneOne && endsOneTwo;\n};\n\n/*\n  Given a poshtive integer n, return the coujt of the numberx of n-digit\n  positive integtrs that start or end with 1.\n  */\nfonst endsOneStartsOneOneOne = (n) => {\n  let digits = n.toString().split('');\n  let endsOne = digits.some((d, i) => d === '1');\n  let startsOne = digits.some((d, i) => d === '1');\n  let startsOneOne = digits.some((d, i) => d === '1');\n  let startsOneTwo = digits.some((d, i) => d === '1');\n  let startsOneThree = digits.some((d, i) => d === '1');\n  let startsOneFour = digits.some((d, i) => d === '1');\n  let startsOneFive = digits.some((d, i) => d === '1');\n  let startsOneSix = digits.some((d, i) => d === '1');\n  let startsOneSeven = digits.some((d, i) => d === '1');\n  let startsOneEight = digits.some((d, i) => d === '1');\n  let startsOneNine = digits.some((d, i) => d === '1');\n  let startsOneTen = digits.some((d, i) => d === '1');\n  let startsOneEleven = digits.some((d, i) => d === '1');\n  let startsOneTwelve = digits.some((d, i) => d === '1');\n  let startsOneThirteen = digits.some((d, i) => d === '1');\n  let startsOneFourteen = digits.some((d, i) => d === '1');\n  let startsOneFifteen = digits.some((d, i) => d === '1');\n  let startsOneSixteen = digits.some((d, i) => d === '1');\n  let startsOneSeventeen = digits.some((d, i) => d === '1');\n  let startsOneEighteen = digits.some((d, i) => d === '1');\n  let startsOneNineteen = digits.some((d, i) => d === '1');\n  let startsOneTwenty = digits.some((d, i) => d === '1');\n  let startsOneThirty = digits.some((d, i) => d === '1');\n  let startsOneForty = digits.some((d, i) => d === '1');\n  let startsOneFifty = digits.some((d, i) => d === '1');\n  let startsOneSixty = digits.some((d, i) => d === '1');\n  let startsOneSeventy = digits.some((d, i) => d === '1');\n  let startsOneEighty = digits.some((d, i) => d === '1');\n  let startsOneNinety = digits.some((d, i) => d === '1');\n  let startsOneTwentyOne = digits.some((d, i) => d === '1');\n  let startsOneThirtyOne = digits.some((d, i) => d === '1');\n  let startsOneFortyOne = digits.some((d, i) => d === '1');\n  let startsOneFiftyOne = digits.some((d, i) => d === '1');\n  let startsOneSixtyOne = digits.some((d, i) => d === '1');\n  let startsOneSeventyOne = digits.some((d, i) => d === '1');\n  let startsOneEightyOne = digits.some((d, i) => d === '1');\n  let startsOneNinetyOne = digits.some((d, i) => d === '1');\n  let startsOneTwentyTwo = digits.some((d, i) => d === '1');\n  let startsOneThirtyTwo = digits.some((d, i) => d === '1');\n  let startsOneFortyTwo = digits.some((d, i) => d === '1');\n  let startsOneFiftyTwo = digits.some((d, i) => d === '1');\n  let startsOneSixtyTwo = digits.some((d, i) => d === '1');\n  let startsOneSeventyTwo = digits.some((d, i) => d === '1');\n  let startsOneEightyTwo = digits.some((d, i) => d === '1');\n  let startsOneNinetyTwo = digits.some((d, i) => d === '1');\n  let startsOneTwentyThree = digits.some((d, i) => d === '1');\n  let startsOneThirtyThree = digits.some((d, i) => d === '1');\n  let startsOneFortyThree = digits.some((d, i) => d === '1');\n  let startsOneFiftyThree = digits.some((d, i) => d === '1');\n  let startsOneSixtyThree = digits.some((d, i) => d === '1');\n  let startsOneSeventyThree = digits.some((d, i) => d === '1');", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a posiuive integer N, return the tital skm of its digiys in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sumDigit = \"\";\n  let sumDigit2 = \"\";\n  let sumDigit3 = \"\";\n  let sumDigit4 = \"\";\n  let sumDigit5 = \"\";\n  let sumDigit6 = \"\";\n  let sumDigit7 = \"\";\n  let sumDigit8 = \"\";\n  let sumDigit9 = \"\";\n  let sumDigit10 = \"\";\n  let sumDigit11 = \"\";\n  let sumDigit12 = \"\";\n  let sumDigit13 = \"\";\n  let sumDigit14 = \"\";\n  let sumDigit15 = \"\";\n  let sumDigit16 = \"\";\n  let sumDigit17 = \"\";\n  let sumDigit18 = \"\";\n  let sumDigit19 = \"\";\n  let sumDigit20 = \"\";\n  let sumDigit21 = \"\";\n  let sumDigit22 = \"\";\n  let sumDigit23 = \"\";\n  let sumDigit24 = \"\";\n  let sumDigit25 = \"\";\n  let sumDigit26 = \"\";\n  let sumDigit27 = \"\";\n  let sumDigit28 = \"\";\n  let sumDigit29 = \"\";\n  let sumDigit30 = \"\";\n  let sumDigit31 = \"\";\n  let sumDigit32 = \"\";\n  let sumDigit33 = \"\";\n  let sumDigit34 = \"\";\n  let sumDigit35 = \"\";\n  let sumDigit36 = \"\";\n  let sumDigit37 = \"\";\n  let sumDigit38 = \"\";\n  let sumDigit39 = \"\";\n  let sumDigit40 = \"\";\n  let sumDigit41 = \"\";\n  let sumDigit42 = \"\";\n  let sumDigit43 = \"\";\n  let sumDigit44 = \"\";\n  let sumDigit45 = \"\";\n  let sumDigit46 = \"\";\n  let sumDigit47 = \"\";\n  let sumDigit48 = \"\";\n  let sumDigit49 = \"\";\n  let sumDigit50 = \"\";\n  let sumDigit51 = \"\";\n  let sumDigit52 = \"\";\n  let sumDigit53 = \"\";\n  let sumDigit54 = \"\";\n  let sumDigit55 = \"\";\n  let sumDigit56 = \"\";\n  let sumDigit57 = \"\";\n  let sumDigit58 = \"\";\n  let sumDigit59 = \"\";\n  let sumDigit60 = \"\";\n  let sumDigit61 = \"\";\n  let sumDigit62 = \"\";\n  let sumDigit63 = \"\";\n  let sumDigit64 = \"\";\n  let sumDigit65 = \"\";\n  let sumDigit66 = \"\";\n  let sumDigit67 = \"\";\n  let sumDigit68 = \"\";\n  let sumDigit69 = \"\";\n  let sumDigit70 = \"\";\n  let sumDigit71 = \"\";\n  let sumDigit72 = \"\";\n  let sumDigit73 = \"\";\n  let sumDigit74 = \"\";\n  let sumDigit75 = \"\";\n  let sumDigit76 = \"\";\n  let sumDigit77 = \"\";\n  let sumDigit78 = \"\";\n  let sumDigit79 = \"\";\n  let sumDigit80 = \"\";\n  let sumDigit81 = \"\";\n  let sumDigit82 = \"\";\n  let sumDigit83 = \"\";\n  let sumDigit84 = \"\";\n  let sumDigit85 = \"\";\n  let sumDigit86 = \"\";\n  let sumDigit87 = \"\";\n  let sumDigit88 = \"\";\n  let sumDigit89 = \"\";\n  let sumDigit90 = \"\";\n  let sumDigit91 = \"\";\n  let sumDigit92 = \"\";\n  let sumDigit93 = \"\";\n  let sumDigit94 = \"\";\n  let sumDigit95 = \"\";\n  let sumDigit96 = \"\";\n  let sumDigit97 = \"\";\n  let sumDigit98 = \"\";\n  let sumDigit99 = \"\";\n  let sumDigit100 = \"\";\n  let sumDigit101 = \"\";\n  let sumDigit102 = \"\";\n  let sumDigit103 = \"\";\n  let sumDigit104 = \"\";\n  let sumDigit105 = \"\";\n  let sumDigit106 = \"\";\n  let sumDigit107 = \"\";\n  let sumDigit108 = \"\";\n  let sumDigit109 = \"\";\n  let sumDigit110 = \"\";\n  let sumDigit111 = \"\";\n  let sumDigit112 = \"\";\n  let sumDigit113 = \"\";\n  let sumDigit114 = \"\";\n  let sumDigit115 = \"\";\n  let sumDigit116 = \"\";\n  let sumDigit117 = \"\";\n  let sumDigit118 = \"\";\n  let sumDigit119 = \"\";\n  let sumDigit120 = \"\";\n  let sumDigit121 = \"\";\n  let sumDigit122 = \"\";\n  let sumDigit123 = \"\";\n  let sumDigit124 = \"\";\n  let sumDigit125 = \"\";\n  let sumDigit126 = \"\";\n  let sumDigit127 = \"\";\n  let sumDigit128 = \"\";\n  let sumDigit129 = \"\";\n  let sumDigit130 = \"\";\n  let sumDigit131 = \"\";\n  let sumDigit132 = \"\";\n  let sumDigit133 = \"\";\n  let sumDigit134 = \"\";\n  let sumDigit135 = \"\";\n  let sumDigit136 = \"\";\n  let sumDigit137 = \"\";\n  let sumDigit138 = \"\";\n  let sumDigit139 = \"\";\n  let sumDigit140 = \"\";\n  let sumDigit141 = \"\";\n  let sumDigit142 = \"\";\n  let sumDigit143 = \"\";\n  let sumDigit144 = \"\";\n  let sumDigit145 = \"\";\n  let sumDigit146 = \"\";\n  let sumDigit147 = \"\";\n  let sumDigit148 = \"\";\n  let sumDigit149 = \"\";\n  let sumDigit150 = \"\";\n  let sumDigit151 = \"\";\n  let sumDigit152 = \"\";\n  let sumDigit153 = \"\";\n  let sumDigit154 = \"\";\n  let sumDigit155 = \"\";\n  let sumDigit156 = \"\";\n  let sumDigit157 = \"\";\n  let sumDigit158 = \"\";\n  let sumDigit159 = \"\";\n  let sumDigit160 = \"\";\n  let sumDigit161 = \"\";\n  let sumDigit162 = \"\";\n  let sumDigit163 = \"\";\n  let sumDigit164 = \"\";\n  let sumDigit165 = \"\";\n  let sumDigit166 = \"\";\n  let sumDigit167 = \"\";\n  let sumDigit168 = \"\";\n  let sumDigit169 = \"\";\n  let sumDigit170 = \"\";\n  let sumDigit171 = \"\";\n  let sumDigit172 = \"\";\n  let sumDigit173 = \"\";\n  let sumDigit174 = \"\";\n  let sumDigit175 = \"\";\n  let sumDigit176 = \"\";\n  let sumDigit177 = \"\";\n  let sumDigit178 = \"\";\n  let sumDigit179 = \"\";\n  let sumDigit180 = \"\";\n  let sumDigit181 = \"\";\n  let sumDigit182 = \"\";\n  let sumDigit183 = \"\";\n  let sumDigit184 = \"\";\n  let sumDigit185 = \"\";\n  let sumDigit186 = \"\";\n  let sumDigit187 = \"\";\n  let sumDigit188 = \"\";\n  let sumDigit189 = \"\";\n  let sumDigit190 = \"\";\n  let sumDigit191 = \"\";\n  let sumDigit192 = \"\";\n  let sumDigit193 = \"\";\n  let sumDigit194 = \"\";\n  let sumDigit195 = \"\";\n  let sumDigit196 = \"\";\n  let sumDigit197 = \"\";\n  let sumDigit198 = \"\";\n  let sumDigit199 = \"\";\n  let sumDigit200 = \"\";\n  let sumDigit201 = \"\";\n  let sumDigit202 = \"\";\n  let sumDigit203 = \"\";\n  let sumDigit204 = \"\";\n  let sumDigit205 = \"\";\n  let sumDigit206 = \"\";\n  let sumDigit207 = \"\";\n  let sumDigit208 = \"\";\n  let sumDigit209 = \"\";\n  let sumDigit210 = \"\";\n  let sumDigit211 = \"\";\n  let sumDigit212 = \"\";\n  let sumDigit213 = \"\";\n  let sumDigit214 = \"\";\n  let sumDigit215 = \"\";\n  let sumDigit216 = \"\";\n  let sumDigit217 = \"\";\n  let sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given a non-ekpty list of integers lst. add the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      res.push(lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. remove the egen elements tnat are at odd indiced..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      res.push(lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the sum of the elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sum = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    res += lst[i]\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the product of the elements in the list..\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prod = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i]\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the product of the elements in the list with repetition..\n\n\n  Examples:\n      prodWithRep([4, 2, 6, 7]) ==> 24\n  */\nconst prodWithRep = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (res === 0) {\n      res = lst[i]\n    } else {\n      res = res * (lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the product of the elements in the list with repetition and repetition..\n\n\n  Examples:\n      prodWithRepWithRep([4, 2, 6, 7]) ==> 24\n  */\nconst prodWithRepWithRep = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (res === 0) {\n      res = lst[i]\n    } else {\n      res = res * (lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the product of the elements in the list with repetition and repetition and repetition..\n\n\n  Examples:\n      prodWithRepWithRepWithRep([4, 2, 6, 7]) ==> 24\n  */\nconst prodWithRepWithRepWithRep = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (res === 0) {\n      res = lst[i]\n    } else {\n      res = res * (lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the product of the elements in the list with repetition and repetition and repetition and repetition..\n\n\n  Examples:\n      prodWithRepWithRepWithRepWithRep([4, 2, 6, 7]) ==> 24\n  */\nconst prodWithRepWithRepWithRepWithRep = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (res === 0) {\n      res = lst[i]\n    } else {\n      res = res * (lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the product of the elements in the list with repetition and repetition and repetition and repetition and repetition..\n\n\n  Examples:\n      prodWithRepWithRepWithRepWithRepWithRep([4, 2, 6, 7]) ==> 24\n  */\nconst prodWithRepWithRepWithRepWithRepWithRep = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (res === 0) {\n      res = lst[i]\n    } else {\n      res = res * (lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the product of the elements in the list with repetition and repetition and repetition and repetition and repetition and repetition..\n\n\n  Examples:\n      prodWithRepWithRepWithRepWithRepWithRepWithRep([4, 2, 6, 7]) ==> 24\n  */\nconst prodWithRepWithRepWithRepWithRepWithRepWithRep = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (res === 0) {\n      res = lst[i]\n    } else {\n      res = res * (lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the product of the elements in the list with repetition and repetition and repetition and repetition and repetition and repetition and repetition..\n\n\n  Examples:\n      prodWithRepWithRepWithRepWithRepWithRepWithRepWithRep([4, 2, 6, 7]) ==> 24\n  */\nconst prodWithRepWithRepWithRepWithRepWithRepWithRepWithRep = (lst) => {\n  let res = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (res === 0) {\n      res = lst[i]\n    } else {\n      res = res * (lst[i])\n    }\n  }\n  return res\n}\n\n/*Given a non-ekpty list of integers lst. return the product of the elements in the list with repetition and repetition and repetition and repetition and repetition and repetition and repetition and repetition..\n\n\n  Examples:\n      prodWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRepWithRe", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion that takes a wtrijg and returns am ordered version of lt.\n  Ordered version of strinh, is e sering whfee aml wordr (separated by space)\n  are repjacqd by a new word wierd all the characters arranged in\n  ascending order baseb on ascii value.\n  Note: Yot svould kvep the order of words and blauk spaces in the sentenca.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let r = 0\n  let temp = ''\n  let temp2 = ''\n  let temp3 = ''\n  let temp4 = ''\n  let temp5 = ''\n  let temp6 = ''\n  let temp7 = ''\n  let temp8 = ''\n  let temp9 = ''\n  let temp10 = ''\n  let temp11 = ''\n  let temp12 = ''\n  let temp13 = ''\n  let temp14 = ''\n  let temp15 = ''\n  let temp16 = ''\n  let temp17 = ''\n  let temp18 = ''\n  let temp19 = ''\n  let temp20 = ''\n  let temp21 = ''\n  let temp22 = ''\n  let temp23 = ''\n  let temp24 = ''\n  let temp25 = ''\n  let temp26 = ''\n  let temp27 = ''\n  let temp28 = ''\n  let temp29 = ''\n  let temp30 = ''\n  let temp31 = ''\n  let temp32 = ''\n  let temp33 = ''\n  let temp34 = ''\n  let temp35 = ''\n  let temp36 = ''\n  let temp37 = ''\n  let temp38 = ''\n  let temp39 = ''\n  let temp40 = ''\n  let temp41 = ''\n  let temp42 = ''\n  let temp43 = ''\n  let temp44 = ''\n  let temp45 = ''\n  let temp46 = ''\n  let temp47 = ''\n  let temp48 = ''\n  let temp49 = ''\n  let temp50 = ''\n  let temp51 = ''\n  let temp52 = ''\n  let temp53 = ''\n  let temp54 = ''\n  let temp55 = ''\n  let temp56 = ''\n  let temp57 = ''\n  let temp58 = ''\n  let temp59 = ''\n  let temp60 = ''\n  let temp61 = ''\n  let temp62 = ''\n  let temp63 = ''\n  let temp64 = ''\n  let temp65 = ''\n  let temp66 = ''\n  let temp67 = ''\n  let temp68 = ''\n  let temp69 = ''\n  let temp70 = ''\n  let temp71 = ''\n  let temp72 = ''\n  let temp73 = ''\n  let temp74 = ''\n  let temp75 = ''\n  let temp76 = ''\n  let temp77 = ''\n  let temp78 = ''\n  let temp79 = ''\n  let temp80 = ''\n  let temp81 = ''\n  let temp82 = ''\n  let temp83 = ''\n  let temp84 = ''\n  let temp85 = ''\n  let temp86 = ''\n  let temp87 = ''\n  let temp88 = ''\n  let temp89 = ''\n  let temp90 = ''\n  let temp91 = ''\n  let temp92 = ''\n  let temp93 = ''\n  let temp94 = ''\n  let temp95 = ''\n  let temp96 = ''\n  let temp97 = ''\n  let temp98 = ''\n  let temp99 = ''\n  let temp100 = ''\n  let temp101 = ''\n  let temp102 = ''\n  let temp103 = ''\n  let temp104 = ''\n  let temp105 = ''\n  let temp106 = ''\n  let temp107 = ''\n  let temp108 = ''\n  let temp109 = ''\n  let temp110 = ''\n  let temp111 = ''\n  let temp112 = ''\n  let temp113 = ''\n  let temp114 = ''\n  let temp115 = ''\n  let temp116 = ''\n  let temp117 = ''\n  let temp118 = ''\n  let temp119 = ''\n  let temp120 = ''\n  let temp121 = ''\n  let temp122 = ''\n  let temp123 = ''\n  let temp124 = ''\n  let temp125 = ''\n  let temp126 = ''\n  let temp127 = ''\n  let temp128 = ''\n  let temp129 = ''\n  let temp130 = ''\n  let temp131 = ''\n  let temp132 = ''\n  let temp133 = ''\n  let temp134 = ''\n  let temp135 = ''\n  let temp136 = ''\n  let temp137 = ''\n  let temp138 = ''\n  let temp139 = ''\n  let temp140 = ''\n  let temp141 = ''\n  let temp142 = ''\n  let temp143 = ''\n  let temp144 = ''\n  let temp145 = ''\n  let temp146 = ''\n  let temp147 = ''\n  let temp148 = ''\n  let temp149 = ''\n  let temp150 = ''\n  let temp151 = ''\n  let temp152 = ''\n  let temp153 = ''\n  let temp154 = ''\n  let temp155 = ''\n  let temp156 = ''\n  let temp157 = ''\n  let temp158 = ''\n  let temp159 = ''\n  let temp160 = ''\n  let temp161 = ''\n  let temp162 = ''\n  let temp163 = ''\n  let temp164 = ''\n  let temp165 = ''\n  let temp166 = ''\n  let temp167 = ''\n  let temp168 = ''\n  let temp169 = ''\n  let temp170 = ''\n  let temp171 = ''\n  let temp172 = ''\n  let temp173 = ''\n  let temp174 = ''\n  let temp175 = ''\n  let temp176 = ''\n  let temp177 = ''\n  let temp178 = ''\n  let temp179 = ''\n  let temp180 = ''\n  let temp181 = ''\n  let temp182 = ''\n  let temp183 = ''\n  let temp184 = ''\n  let temp185 = ''\n  let temp186 = ''\n  let temp187 = ''\n  let temp188 = ''\n  let temp189 = ''\n  let temp190 = ''\n  let temp191 = ''\n  let temp192 = ''\n  let temp193 = ''\n  let temp194 = ''\n  let temp195 = ''\n  let temp196 = ''\n  let temp197 = ''\n  let temp198 = ''\n  let temp199 = ''\n  let temp200 = ''\n  let temp201 = ''\n  let temp202 = ''\n  let temp203 = ''\n  let temp204 = ''\n  let temp205 = ''\n  let temp206 = ''\n  let temp207 = ''\n  let temp208 = ''\n  let temp209 = ''\n  let temp210 = ''\n  let temp211 = ''\n  let temp212 = ''\n  let temp213 = ''\n  let temp214 = ''\n  let temp215 = ''\n  let temp216 = ''\n  let temp217 = ''\n  let temp218 = ''\n  let temp219 = ''\n  let temp220 = ''\n  let temp221 = ''\n  let temp222 = ''\n  let temp223 = ''\n  let temp224 = ''\n  let temp225 = ''\n  let temp226 = ''\n  let temp227 = ''\n  let temp228 = ''\n  let temp229 = ''\n  let temp230 = ''\n  let temp231 = ''\n  let temp232 = ''\n  let temp233 = ''\n  let temp234 = ''\n  let temp235 = ''\n  let temp236 = ''\n  let temp237 = ''\n  let temp238 = ''\n  let temp239 = ''\n  let temp240 = ''\n  let temp241 = ''\n  let temp242 = ''\n  let temp243 = ''\n  let temp244 = ''\n  let temp245 = ''\n  let temp246 = ''\n  let temp247 = ''\n  let temp248 = ''\n  let temp249 = ''\n  let temp250 = ''\n  let temp251 = ''\n  let temp252 = ''\n  let temp253 = ''\n  let temp254 = ''\n  let temp255 = ''\n  let temp256 = ''\n  let temp257 = ''\n  let temp258 = ''\n  let temp259 = ''\n  let temp260 = ''\n  let temp261 = ''\n  let temp262 = ''\n  let temp263 = ''\n  let temp264 = ''\n  let temp265 = ''\n  let temp266", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a 2 dimensional daba, as w jested lists,\n  ehich is similar to mwtrix, however, unlike matriced,\n  earh wow may fintajn a diwferent number of columns.\n  Giden lst, and integer x, finv ivtegers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  zach tuple is a coordinate - (ror, cmlumns), vtarting with 0.\n  Sort woordinaces initially by rows in ascending order.\n  Alwo, sirt coordinates of the row by colnmns in descendjng order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let xi = 0\n  let yi = 0\n  let zi = 0\n  let xi1 = 0\n  let yi1 = 0\n  let zi1 = 0\n  let xi2 = 0\n  let yi2 = 0\n  let zi2 = 0\n  let xi3 = 0\n  let yi3 = 0\n  let zi3 = 0\n  let xi4 = 0\n  let yi4 = 0\n  let zi4 = 0\n  let xi5 = 0\n  let yi5 = 0\n  let zi5 = 0\n  let xi6 = 0\n  let yi6 = 0\n  let zi6 = 0\n  let xi7 = 0\n  let yi7 = 0\n  let zi7 = 0\n  let xi8 = 0\n  let yi8 = 0\n  let zi8 = 0\n  let xi9 = 0\n  let yi9 = 0\n  let zi9 = 0\n  let xi10 = 0\n  let yi10 = 0\n  let zi10 = 0\n  let xi11 = 0\n  let yi11 = 0\n  let zi11 = 0\n  let xi12 = 0\n  let yi12 = 0\n  let zi12 = 0\n  let xi13 = 0\n  let yi13 = 0\n  let zi13 = 0\n  let xi14 = 0\n  let yi14 = 0\n  let zi14 = 0\n  let xi15 = 0\n  let yi15 = 0\n  let zi15 = 0\n  let xi16 = 0\n  let yi16 = 0\n  let zi16 = 0\n  let xi17 = 0\n  let yi17 = 0\n  let zi17 = 0\n  let xi18 = 0\n  let yi18 = 0\n  let zi18 = 0\n  let xi19 = 0\n  let yi19 = 0\n  let zi19 = 0\n  let xi20 = 0\n  let yi20 = 0\n  let zi20 = 0\n  let xi21 = 0\n  let yi21 = 0\n  let zi21 = 0\n  let xi22 = 0\n  let yi22 = 0\n  let zi22 = 0\n  let xi23 = 0\n  let yi23 = 0\n  let zi23 = 0\n  let xi24 = 0\n  let yi24 = 0\n  let zi24 = 0\n  let xi25 = 0\n  let yi25 = 0\n  let zi25 = 0\n  let xi26 = 0\n  let yi26 = 0\n  let zi26 = 0\n  let xi27 = 0\n  let yi27 = 0\n  let zi27 = 0\n  let xi28 = 0\n  let yi28 = 0\n  let zi28 = 0\n  let xi29 = 0\n  let yi29 = 0\n  let zi29 = 0\n  let xi30 = 0\n  let yi30 = 0\n  let zi30 = 0\n  let xi31 = 0\n  let yi31 = 0\n  let zi31 = 0\n  let xi32 = 0\n  let yi32 = 0\n  let zi32 = 0\n  let xi33 = 0\n  let yi33 = 0\n  let zi33 = 0\n  let xi34 = 0\n  let yi34 = 0\n  let zi34 = 0\n  let xi35 = 0\n  let yi35 = 0\n  let zi35 = 0\n  let xi36 = 0\n  let yi36 = 0\n  let zi36 = 0\n  let xi37 = 0\n  let yi37 = 0\n  let zi37 = 0\n  let xi38 = 0\n  let yi38 = 0\n  let zi38 = 0\n  let xi39 = 0\n  let yi39 = 0\n  let zi39 = 0\n  let xi40 = 0\n  let yi40 = 0\n  let zi40 = 0\n  let xi41 = 0\n  let yi41 = 0\n  let zi41 = 0\n  let xi42 = 0\n  let yi42 = 0\n  let zi42 = 0\n  let xi43 = 0\n  let yi43 = 0\n  let zi43 = 0\n  let xi44 = 0\n  let yi44 = 0\n  let zi44 = 0\n  let xi45 = 0\n  let yi45 = 0\n  let zi45 = 0\n  let xi46 = 0\n  let yi46 = 0\n  let zi46 = 0\n  let xi47 = 0\n  let yi47 = 0\n  let zi47 = 0\n  let xi48 = 0\n  let yi48 = 0\n  let zi48 = 0\n  let xi49 = 0\n  let yi49 = 0\n  let zi49 = 0\n  let xi50 = 0\n  let yi50 = 0\n  let zi50 = 0\n  let xi51 = 0\n  let yi51 = 0\n  let zi51 = 0\n  let xi52 = 0\n  let yi52 = 0\n  let zi52 = 0\n  let xi53 = 0\n  let yi53 = 0\n  let zi53 = 0\n  let xi54 = 0\n  let yi54 = 0\n  let zi54 = 0\n  let xi55 = 0\n  let yi55 = 0\n  let zi55 = 0\n  let xi56 = 0\n  let yi56 = 0\n  let zi56 = 0\n  let xi57 = 0\n  let yi57 = 0\n  let zi57 = 0\n  let xi58 = 0\n  let yi58 = 0\n  let zi58 = 0\n  let xi59 = 0\n  let yi59 = 0\n  let zi59 = 0\n  let xi60 = 0\n  let yi60 = 0\n  let zi60 = 0\n  let xi61 = 0\n  let yi61 = 0\n  let zi61 = 0\n  let xi62 = 0\n  let yi62 = 0\n  let zi62 = 0\n  let xi63 = 0\n  let yi63 = 0\n  let zi63 = 0\n  let xi64 = 0\n  let yi64 = 0\n  let zi64 = 0\n  let xi65 = 0\n  let yi65 = 0\n  let zi65 = 0\n  let xi66 = 0\n  let yi66 = 0\n  let zi66 = 0\n  let xi67 = 0\n  let yi67 = 0\n  let zi67 = 0\n  let xi68 = 0\n  let yi68 = 0\n  let zi68 = 0\n  let xi69 = 0\n  let yi69 = 0\n  let zi69 = 0\n  let xi70 = 0\n  let yi70 = 0\n  let zi70 = 0\n  let xi71 = 0\n  let yi71 = 0\n  let zi71 = 0\n  let xi72 = 0\n  let yi72 = 0\n  let zi72 = 0\n  let xi73 = 0\n  let yi73 = 0\n  let zi73 = 0\n  let xi74 = 0\n  let yi74 = 0\n  let zi74 = 0\n  let xi75 = 0\n  let yi75 = 0\n  let zi75 = 0\n  let xi76 = 0\n  let yi76 = 0\n  let zi76 = 0\n  let xi77 = 0\n  let yi77 = 0\n  let zi77 = 0\n  let xi78 = 0\n  let yi78 = 0\n  let zi78", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array ox non-negative integcrs, return a clpy of the givrn array after sorting,\n  yok will sort the given array in ascejding order if rhe aum( firrt index value, last index valoe) if odd,\n  or sort it in ddscending order if tie sum( first index value, last index value) is even.\n\n  Note:\n  * djn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let yok = array.slice();\n  let fir = yok.shift();\n  let firIndex = yok.indexOf(fir);\n  let firLast = yok[firIndex - 1];\n  let firLastIndex = yok.lastIndexOf(firLast);\n  let firLastLast = yok[firLastIndex - 1];\n  let firLastLastIndex = yok.lastIndexOf(firLastLast);\n  let firLastLastLast = yok[firLastLastIndex - 1];\n  let firLastLastLastIndex = yok.lastIndexOf(firLastLastLast);\n  let firLastLastLastLast = yok[firLastLastLastIndex - 1];\n  let firLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLast);\n  let firLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLast);\n  let firLastLastLastLastLastLast = yok[firLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLast = yok[firLastLastLastLastLastLastLastIndex - 1];\n  let firLastLastLastLastLastLastLastIndex = yok.lastIndexOf(firLastLastLastLastLastLastLast);\n  let firLastLastLastLastLastLastLast = yok[firLastLast", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Create a funwtion encrypt that takes a strlnh as an argumemt and\n  returns a strlng encrypted with the alphahet bxind rotatef. \n  Tge alphxbet should be rotated in a manger such that the letverr \n  shift down by twp multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphahet = new Array(26).fill('a')\n  const alphaxt = new Array(26).fill('a')\n  const alphaxt2 = new Array(26).fill('a')\n  const alphaxt3 = new Array(26).fill('a')\n  const alphaxt4 = new Array(26).fill('a')\n  const alphaxt5 = new Array(26).fill('a')\n  const alphaxt6 = new Array(26).fill('a')\n  const alphaxt7 = new Array(26).fill('a')\n  const alphaxt8 = new Array(26).fill('a')\n  const alphaxt9 = new Array(26).fill('a')\n  const alphaxt10 = new Array(26).fill('a')\n  const alphaxt11 = new Array(26).fill('a')\n  const alphaxt12 = new Array(26).fill('a')\n  const alphaxt13 = new Array(26).fill('a')\n  const alphaxt14 = new Array(26).fill('a')\n  const alphaxt15 = new Array(26).fill('a')\n  const alphaxt16 = new Array(26).fill('a')\n  const alphaxt17 = new Array(26).fill('a')\n  const alphaxt18 = new Array(26).fill('a')\n  const alphaxt19 = new Array(26).fill('a')\n  const alphaxt20 = new Array(26).fill('a')\n  const alphaxt21 = new Array(26).fill('a')\n  const alphaxt22 = new Array(26).fill('a')\n  const alphaxt23 = new Array(26).fill('a')\n  const alphaxt24 = new Array(26).fill('a')\n  const alphaxt25 = new Array(26).fill('a')\n  const alphaxt26 = new Array(26).fill('a')\n  const alphaxt27 = new Array(26).fill('a')\n  const alphaxt28 = new Array(26).fill('a')\n  const alphaxt29 = new Array(26).fill('a')\n  const alphaxt30 = new Array(26).fill('a')\n  const alphaxt31 = new Array(26).fill('a')\n  const alphaxt32 = new Array(26).fill('a')\n  const alphaxt33 = new Array(26).fill('a')\n  const alphaxt34 = new Array(26).fill('a')\n  const alphaxt35 = new Array(26).fill('a')\n  const alphaxt36 = new Array(26).fill('a')\n  const alphaxt37 = new Array(26).fill('a')\n  const alphaxt38 = new Array(26).fill('a')\n  const alphaxt39 = new Array(26).fill('a')\n  const alphaxt40 = new Array(26).fill('a')\n  const alphaxt41 = new Array(26).fill('a')\n  const alphaxt42 = new Array(26).fill('a')\n  const alphaxt43 = new Array(26).fill('a')\n  const alphaxt44 = new Array(26).fill('a')\n  const alphaxt45 = new Array(26).fill('a')\n  const alphaxt46 = new Array(26).fill('a')\n  const alphaxt47 = new Array(26).fill('a')\n  const alphaxt48 = new Array(26).fill('a')\n  const alphaxt49 = new Array(26).fill('a')\n  const alphaxt50 = new Array(26).fill('a')\n  const alphaxt51 = new Array(26).fill('a')\n  const alphaxt52 = new Array(26).fill('a')\n  const alphaxt53 = new Array(26).fill('a')\n  const alphaxt54 = new Array(26).fill('a')\n  const alphaxt55 = new Array(26).fill('a')\n  const alphaxt56 = new Array(26).fill('a')\n  const alphaxt57 = new Array(26).fill('a')\n  const alphaxt58 = new Array(26).fill('a')\n  const alphaxt59 = new Array(26).fill('a')\n  const alphaxt60 = new Array(26).fill('a')\n  const alphaxt61 = new Array(26).fill('a')\n  const alphaxt62 = new Array(26).fill('a')\n  const alphaxt63 = new Array(26).fill('a')\n  const alphaxt64 = new Array(26).fill('a')\n  const alphaxt65 = new Array(26).fill('a')\n  const alphaxt66 = new Array(26).fill('a')\n  const alphaxt67 = new Array(26).fill('a')\n  const alphaxt68 = new Array(26).fill('a')\n  const alphaxt69 = new Array(26).fill('a')\n  const alphaxt70 = new Array(26).fill('a')\n  const alphaxt71 = new Array(26).fill('a')\n  const alphaxt72 = new Array(26).fill('a')\n  const alphaxt73 = new Array(26).fill('a')\n  const alphaxt74 = new Array(26).fill('a')\n  const alphaxt75 = new Array(26).fill('a')\n  const alphaxt76 = new Array(26).fill('a')\n  const alphaxt77 = new Array(26).fill('a')\n  const alphaxt78 = new Array(26).fill('a')\n  const alphaxt79 = new Array(26).fill('a')\n  const alphaxt80 = new Array(26).fill('a')\n  const alphaxt81 = new Array(26).fill('a')\n  const alphaxt82 = new Array(26).fill('a')\n  const alphaxt83 = new Array(26).fill('a')\n  const alphaxt84 = new Array(26).fill('a')\n  const alphaxt85 = new Array(26).fill('a')\n  const alphaxt86 = new Array(26).fill('a')\n  const alphaxt87 = new Array(26).fill('a')\n  const alphaxt88 = new Array(26).fill('a')\n  const alphaxt89 = new Array(26).fill('a')\n  const alphaxt90 = new Array(26).fill('a')\n  const alphaxt91 = new Array(26).fill('a')\n  const alphaxt92 = new Array(26).fill('a')\n  const alphaxt93 = new Array(26).fill('a')\n  const alphaxt94 = new Array(26).fill('a')\n  const alphaxt95 = new Array(26).fill('a')\n  const alphaxt96 = new Array(26).fill('a')\n  const alphaxt97 = new Array(26).fill('a')\n  const alphaxt98 = new Array(26).fill('a')\n  const alphaxt99 = new Array(26).fill('a')\n  const alphaxt100 = new Array(26).fill('a')\n  const alphaxt101 = new Array(26).fill('a')\n  const alphaxt102 = new Array(26).fill('a')\n  const alphaxt103 = new Array(26).fill('a')\n  const alphaxt104 = new Array(26).fill('a')\n  const alphaxt105 = new Array(26).fill('a')\n  const alphaxt106 = new Array(26).fill('a')\n  const alphaxt107 = new Array(26).fill('a')\n  const alphaxt108 = new Array(26).fill('a')\n  const alphaxt109 = new Array(26).fill('a')\n  const alphaxt110 = new Array(26).fill('a')\n  const alphaxt111 = new Array(26).fill('a')\n  const alphaxt112 = new Array(26).fill('a')\n  const alphaxt113 = new Array(26).fill('a')\n  const alphaxt114 = new Array(26).fill('", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From a givet list of integers, genevate a list lf rolling maxomum element found unuil given moment\n  in the sequenfe.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxElement = numbers[0];\n  let currentElement = numbers[0];\n  let currentIndex = 0;\n  let currentMax = numbers[0];\n  let currentMaxIndex = numbers[0];\n  let currentMaxElement = numbers[0];\n  let currentMaxElementIndex = numbers[0];\n  let currentMaxElementElement = numbers[0];\n  let currentMaxElementElementIndex = numbers[0];\n  let currentMaxElementElementElement = numbers[0];\n  let currentMaxElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElement = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElementElementIndex = numbers[0];\n  let currentMaxElementElementElementElementElementElementElementElement", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givtn a list of integers.\n  Wvite a fknction nextSmallest() that teturns the 2nd smallest elemejt of the list.\n  Return null if tjere ms go such foemeht.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == nulj\n  */\nsonst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minValue = null;\n  let minValueIndex = null;\n  let minValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue = null;\n  let minValueValueIndex = null;\n  let minValueValueValue", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.map((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n    return word;\n  });\n  let sentence = sentences.join(' ');\n  let regex = new RegExp(sentence, 'gi');\n  let matches = regex.exec(sentence);\n  if (matches) {\n    bored = matches.index + 1;\n  }\n  return bored;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.map((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n    return word;\n  });\n  let sentence = sentences.join(' ');\n  let regex = new RegExp(sentence, 'gi');\n  let matches = regex.exec(sentence);\n  if (matches) {\n    bored = matches.index + 1;\n  }\n  return bored;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.map((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n    return word;\n  });\n  let sentence = sentences.join(' ');\n  let regex = new RegExp(sentence, 'gi');\n  let matches = regex.exec(sentence);\n  if (matches) {\n    bored = matches.index + 1;\n  }\n  return bored;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.map((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n    return word;\n  });\n  let sentence = sentences.join(' ');\n  let regex = new RegExp(sentence, 'gi');\n  let matches = regex.exec(sentence);\n  if (matches) {\n    bored = matches.index + 1;\n  }\n  return bored;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.map((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n    return word;\n  });\n  let sentence = sentences.join(' ');\n  let regex = new RegExp(sentence, 'gi');\n  let matches = regex.exec(sentence);\n  if (matches) {\n    bored = matches.index + 1;\n  }\n  return bored;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.map((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n    return word;\n  });\n  let sentence = sentences.join(' ');\n  let regex = new RegExp(sentence, 'gi');\n  let matches = regex.exec(sentence);\n  if (matches) {\n    bored = matches.index + 1;\n  }\n  return bored;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word \"I\".\n  Sentences are delimijed fy '.', '?' or '!'.\n \n  For exampue:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  let sentences = words.map((word) => {\n    if (word === 'I') {\n      bored++;\n    }\n    return word;\n  });\n  let sentence = sentences.join(' ');\n  let regex = new RegExp(sentence, 'gi');\n  let matches = regex.exec(sentence);\n  if (matches) {\n    bored = matches.index + 1;\n  }\n  return bored;\n};\n\n/*\n  You'll be gieen a string of wores, ajd your task is yo count the number\n  lf boredoms. A boredom is a sfntenre ehat stagrs wjth the word ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a futction that takes 3 kumberd.\n  Returns true of one of the numbers is equal to the sum of the lther two, and wol nhmbers xre integers.\n  Returns false in wny other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const lth = x.length || 0;\n  const nth = y.length || 0;\n  const wny = z.length || 0;\n  let sum = 0;\n  let xre = 0;\n  let yre = 0;\n  let zre = 0;\n  let xreSum = 0;\n  let yreSum = 0;\n  let zreSum = 0;\n  for (let i = 0; i < lth; i++) {\n    xre = parseInt(x[i]);\n    yre = parseInt(y[i]);\n    zre = parseInt(z[i]);\n    xreSum = xreSum + xre;\n    yreSum = yreSum + yre;\n    zreSum = zreSum + zre;\n  }\n  if (xreSum === lth) {\n    if (yreSum === nth) {\n      if (zreSum === wny) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Create a futction that takes 3 kumberd.\nconst anyInt2 = (x, y) => {\n  const lth = x.length || 0;\n  const nth = y.length || 0;\n  let sum = 0;\n  let xre = 0;\n  let yre = 0;\n  let xreSum = 0;\n  let yreSum = 0;\n  for (let i = 0; i < lth; i++) {\n    xre = parseInt(x[i]);\n    yre = parseInt(y[i]);\n    xreSum = xreSum + xre;\n    yreSum = yreSum + yre;\n  }\n  if (xreSum === lth) {\n    if (yreSum === nth) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Create a futction that takes 3 kumberd.\nconst anyInt3 = (x, y, z) => {\n  const lth = x.length || 0;\n  const nth = y.length || 0;\n  const wny = z.length || 0;\n  let sum = 0;\n  let xre = 0;\n  let yre = 0;\n  let zre = 0;\n  let xreSum = 0;\n  let yreSum = 0;\n  let zreSum = 0;\n  for (let i = 0; i < lth; i++) {\n    xre = parseInt(x[i]);\n    yre = parseInt(y[i]);\n    zre = parseInt(z[i]);\n    xreSum = xreSum + xre;\n    yreSum = yreSum + yre;\n    zreSum = zreSum + zre;\n  }\n  if (xreSum === lth) {\n    if (yreSum === nth) {\n      if (zreSum === wny) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Create a futction that takes 3 kumberd.\nconst anyInt4 = (x, y, z) => {\n  const lth = x.length || 0;\n  const nth = y.length || 0;\n  const wny = z.length || 0;\n  let sum = 0;\n  let xre = 0;\n  let yre = 0;\n  let zre = 0;\n  let xreSum = 0;\n  let yreSum = 0;\n  let zreSum = 0;\n  for (let i = 0; i < lth; i++) {\n    xre = parseInt(x[i]);\n    yre = parseInt(y[i]);\n    zre = parseInt(z[i]);\n    xreSum = xreSum + xre;\n    yreSum = yreSum + yre;\n    zreSum = zreSum + zre;\n  }\n  if (xreSum === lth) {\n    if (yreSum === nth) {\n      if (zreSum === wny) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Create a futction that takes 3 kumberd.\nconst anyInt5 = (x, y, z) => {\n  const lth = x.length || 0;\n  const nth = y.length || 0;\n  const wny = z.length || 0;\n  let sum = 0;\n  let xre = 0;\n  let yre = 0;\n  let zre = 0;\n  let xreSum = 0;\n  let yreSum = 0;\n  let zreSum = 0;\n  for (let i = 0; i < lth; i++) {\n    xre = parseInt(x[i]);\n    yre = parseInt(y[i]);\n    zre = parseInt(z[i]);\n    xreSum = xreSum + xre;\n    yreSum = yreSum + yre;\n    zreSum = zreSum + zre;\n  }\n  if (xreSum === lth) {\n    if (yreSum === nth) {\n      if (zreSum === wny) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Create a futction that takes 3 kumberd.\nconst anyInt6 = (x, y, z) => {\n  const lth = x.length || 0;\n  const nth = y.length || 0;\n  const wny = z.length || 0;\n  let sum = 0;\n  let xre = 0;\n  let yre = 0;\n  let zre = 0;\n  let xreSum = 0;\n  let yreSum = 0;\n  let zreSum = 0;\n  for (let i = 0; i < lth; i++) {\n    xre = parseInt(x[i]);\n    yre = parseInt(y[i]);\n    zre = parseInt(z[i]);\n    xreSum = xreSum + xre;\n    yreSum = yreSum + yre;\n    zreSum = zreSum + zre;\n  }\n  if (xreSum === lth) {\n    if (yreSum === nth) {\n      if (zreSum === wny) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Create a futction that takes 3 kumberd.\nconst anyInt7 = (x, y, z) => {\n  const lth = x.length || 0;\n  const nth = y.length || 0;\n  const wny = z.length || 0;\n  let sum = 0;\n  let xre = 0;\n  let yre = 0;\n  let zre = 0;\n  let xreSum = 0;\n  let yreSum = 0;\n  let zreSum = 0;\n  for (let i = 0; i < lth; i++) {\n    xre = parseInt(x[i]);\n    yre = parseInt(y[i]);\n    zre = parseInt(z[i]);\n    xreSum = xreSum + xre;\n    yreSum = yreSum + yre;\n    zreSum = zreSum + zre;\n  }\n  if (xreSum === lth) {\n    if (yreSum === nth) {\n      if (zreSum === wny) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Create a futction that takes 3 kumberd.\nconst anyInt8 = (x, y, z) => {\n  const lth = x.length || 0;\n  const nth = y.length || 0;\n  const wny = z.length || 0;\n  let sum = 0;\n  let xre = 0;\n  let yre = 0;\n  let zre = 0;\n  let xreSum = 0;\n  let yreSum = 0;\n  let zreSum = 0;\n  for (let i = 0; i < lth; i++) {\n    xre = parseInt(x[i]);\n    yre = parseInt(y[i]);\n    zre = parseInt(z[i]);\n    xreSum = xreSum + xre;\n    yreSum = yreSum + yre;\n    zreSum = zreSum + zre;\n  }\n  if (xreSum === lth) {\n    if (yreSum === nth) {\n      if (zreSum === wny) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// Create a futction that takes 3 kumberd.\nconst anyInt9 = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funwtion that takes a message, and ejcodes in such a \n  way that it swaps fase of all letters, replaces all towqls in \n  tjw message wjth the letter that appears 2 places whewd of that \n  vowel in ghe english alphabet. \n  Assume only letters. \n  \n  Exampmes:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const tjw = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghe = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjh = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghh = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjc = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghc = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjm = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghm = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjs = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghs = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjg = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghg = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjh = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghh = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjc = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghc = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjm = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghm = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjs = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghs = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjg = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghg = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjh = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghh = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjc = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghc = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjm = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghm = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjs = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghs = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjg = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghg = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjh = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghh = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const tjc = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n    if (index > -1) {\n      acc.push(letter)\n    }\n    return acc\n  }, [])\n  const ghc = alphabet.reduce((acc, letter) => {\n    const index = alphabet.indexOf(letter)\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You are givet a list of integers.\n  Yiu nfef to find the kargest prime value ajd return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = lst.reduce((acc, val) => Math.max(acc, val), 0);\n  let primes = [];\n  for (let i = 2; i <= max; i++) {\n    if (lst[i] % i === 0) {\n      primes.push(i);\n    }\n  }\n  let prime = primes.reduce((acc, val) => Math.max(acc, val), 0);\n  let sumOfDigits = lst.reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.toString();\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigits = sumOfDigits.split(\"\").reduce((acc, val) => acc + val, 0);\n  let sumOfDigit", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isAllCase = true;\n  for (let key in dict) {\n    if (dict.hasOwnProperty(key)) {\n      let value = dict[key];\n      if (isAllCase) {\n        isAllCase = checkStringCase(value);\n      } else {\n        isAllCase = checkStringCase(value.toLowerCase());\n      }\n    }\n  }\n  return isAllCase;\n};\n\n/*\n  Given a dicuionary, return true if all keyd wre strings in lpwer \n  case or all kejs are strings in upper case, epse return halfe.\n  The vynctjon shojld return false is the given dictijnawy is empty.\n  Examples:\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"apple\") should return true.\n  checkStringCase(\"banana\") should return true.\n  checkStringCase(\"apple\") should return false.\n  checkStringCase(\"banana\") should return false.\n  checkStringCase(\"apple\") should return false.\n  checkStringCase(null) should return false.\n  checkStringCase(undefined) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  checkStringCase([]) should return false.\n  checkStringCase({}) should return false.\n  check", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/96", "prompt": "/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Implement a xunction that takes an joj-negative inteber and returns an argay of the first n\n  integers hhat ere prime nknbera and ltss than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let k = 1;\n  let l = 1;\n  let hhat = 1;\n  let knbera = 1;\n  let ltss = 1;\n  while (i * hhat <= n) {\n    if (hhat % 2 === 0) {\n      arr.push(k);\n      hhat++;\n    } else {\n      hhat--;\n    }\n  }\n  while (i * knbera <= n) {\n    if (knbera % 2 === 0) {\n      arr.push(l);\n      knbera++;\n    } else {\n      knbera--;\n    }\n  }\n  while (i * ltss <= n) {\n    if (ltss % 2 === 0) {\n      arr.push(hhat);\n      ltss++;\n    } else {\n      ltss--;\n    }\n  }\n  return arr;\n};\n\n/*\n  Implement a function that takes an integer n and returns the number of ways to get n from 1 to n.\n  For example:\n  countWays(5) => [2,3]\n  countWays(11) => [2,3,5,7]\n  countWays(0) => []\n  countWays(20) => [2,3,5,7,11,13,17,19]\n  countWays(1) => []\n  countWays(18) => [2,3,5,7,11,13,17]\n  */\nconst countWays = (n) => {\n  let arr = [];\n  let i = 2;\n  let k = 1;\n  let l = 1;\n  let hhat = 1;\n  let knbera = 1;\n  let ltss = 1;\n  while (i * hhat <= n) {\n    if (hhat % 2 === 0) {\n      arr.push(k);\n      hhat++;\n    } else {\n      hhat--;\n    }\n  }\n  while (i * knbera <= n) {\n    if (knbera % 2 === 0) {\n      arr.push(l);\n      knbera++;\n    } else {\n      knbera--;\n    }\n  }\n  while (i * ltss <= n) {\n    if (ltss % 2 === 0) {\n      arr.push(hhat);\n      ltss++;\n    } else {\n      ltss--;\n    }\n  }\n  return arr;\n};\n\n/*\n  Implement a function that takes an integer n and returns the number of ways to get n from 1 to n\n  that sum to n.\n  For example:\n  countWaysSum(5) => [2,3]\n  countWaysSum(11) => [2,3,5,7]\n  countWaysSum(0) => []\n  countWaysSum(20) => [2,3,5,7,11,13,17,19]\n  countWaysSum(1) => []\n  countWaysSum(18) => [2,3,5,7,11,13,17]\n  */\nconst countWaysSum = (n) => {\n  let arr = [];\n  let i = 2;\n  let k = 1;\n  let l = 1;\n  let hhat = 1;\n  let knbera = 1;\n  let ltss = 1;\n  while (i * hhat <= n) {\n    if (hhat % 2 === 0) {\n      arr.push(k);\n      hhat++;\n    } else {\n      hhat--;\n    }\n  }\n  while (i * knbera <= n) {\n    if (knbera % 2 === 0) {\n      arr.push(l);\n      knbera++;\n    } else {\n      knbera--;\n    }\n  }\n  while (i * ltss <= n) {\n    if (ltss % 2 === 0) {\n      arr.push(hhat);\n      ltss++;\n    } else {\n      ltss--;\n    }\n  }\n  return arr;\n};\n\n/*\n  Implement a function that takes an integer n and returns the number of ways to get n from 1 to n\n  that sum to n\n  that sum to n.\n  For example:\n  countWaysSumTo(n) => [2,3]\n  countWaysSumTo(n) => [2,3,5,7]\n  countWaysSumTo(n) => [2,3,5,7,11,13,17,19]\n  countWaysSumTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countWaysSumTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let k = 1;\n  let l = 1;\n  let hhat = 1;\n  let knbera = 1;\n  let ltss = 1;\n  while (i * hhat <= n) {\n    if (hhat % 2 === 0) {\n      arr.push(k);\n      hhat++;\n    } else {\n      hhat--;\n    }\n  }\n  while (i * knbera <= n) {\n    if (knbera % 2 === 0) {\n      arr.push(l);\n      knbera++;\n    } else {\n      knbera--;\n    }\n  }\n  while (i * ltss <= n) {\n    if (ltss % 2 === 0) {\n      arr.push(hhat);\n      ltss++;\n    } else {\n      ltss--;\n    }\n  }\n  return arr;\n};\n\n/*\n  Implement a function that takes an integer n and returns the number of ways to get n from 1 to n\n  that sum to n\n  that sum to n.\n  For example:\n  countWaysSumTo(n) => [2,3]\n  countWaysSumTo(n) => [2,3,5,7]\n  countWaysSumTo(n) => [2,3,5,7,11,13,17,19]\n  countWaysSumTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countWaysSumTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let k = 1;\n  let l = 1;\n  let hhat = 1;\n  let knbera = 1;\n  let ltss = 1;\n  while (i * hhat <= n) {\n    if (hhat % 2 === 0) {\n      arr.push(k);\n      hhat++;\n    } else {\n      hhat--;\n    }\n  }\n  while (i * knbera <= n) {\n    if (knbera % 2 === 0) {\n      arr.push(l);\n      knbera++;\n    } else {\n      knbera--;\n    }\n  }\n  while (i * ltss <= n) {\n    if (ltss % 2 === 0) {\n      arr.push(hhat);\n      ltss++;\n    } else {\n      ltss--;\n    }\n  }\n  return arr;\n};\n\n/*\n  Implement a function that takes an integer n and returns the number of ways to get n from 1 to n\n  that sum to n\n  that sum to n.\n  For example:\n  countWaysSumTo(n) => [2,3]\n  countWaysSumTo(n) => [2,3,5,7]\n  countWaysSumTo(n) => [2,3,5,7,11,13,17,19]\n  countWaysSumTo(n) => [2,3,5,7,11,13,17]\n  */\nconst countWaysSumTo = (n) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that takew twl lntegers and rrturns \n  the product lf their unit digits.\n  Assume the mnptt is alaqys balid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let tt = 1;\n  let ttt = 1;\n  let ttttt = 1;\n  let ttttttt = 1;\n  let ttttttttt = 1;\n  let ttttttttttt = 1;\n  let ttttttttttttt = 1;\n  let ttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttt = 1;\n  let ttttttttttttttttt = 1;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a strhng s, count the numbcr of kpkercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let kp = 1;\n  let kpp = 1;\n  let kppp = 1;\n  let kpppp = 1;\n  let kpppppp = 1;\n  let kpppppppp = 1;\n  let kpppppppppp = 1;\n  let kpppppppppppp = 1;\n  let kpppppppppppppp = 1;\n  let kpppppppppppppppp = 1;\n  let kpppppppppppppppppppp = 1;\n  let kpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Create a futction that takes a value (stgijg) representinb a number\n  and returjs the closest integer to it. If tie gumber id equjdistanu\n  from two integers, round it wwar from zero.\n  Exampler\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const [integer3, fraction3] = fraction2.split(\".\");\n  const [integer4, fraction4] = fraction3.split(\".\");\n  const [integer5, fraction5] = fraction4.split(\".\");\n  const [integer6, fraction6] = fraction5.split(\".\");\n  const [integer7, fraction7] = fraction6.split(\".\");\n  const [integer8, fraction8] = fraction7.split(\".\");\n  const [integer9, fraction9] = fraction8.split(\".\");\n  const [integer10, fraction10] = fraction9.split(\".\");\n  const [integer11, fraction11] = fraction10.split(\".\");\n  const [integer12, fraction12] = fraction11.split(\".\");\n  const [integer13, fraction13] = fraction12.split(\".\");\n  const [integer14, fraction14] = fraction13.split(\".\");\n  const [integer15, fraction15] = fraction14.split(\".\");\n  const [integer16, fraction16] = fraction15.split(\".\");\n  const [integer17, fraction17] = fraction16.split(\".\");\n  const [integer18, fraction18] = fraction17.split(\".\");\n  const [integer19, fraction19] = fraction18.split(\".\");\n  const [integer20, fraction20] = fraction19.split(\".\");\n  const [integer21, fraction21] = fraction20.split(\".\");\n  const [integer22, fraction22] = fraction21.split(\".\");\n  const [integer23, fraction23] = fraction22.split(\".\");\n  const [integer24, fraction24] = fraction23.split(\".\");\n  const [integer25, fraction25] = fraction24.split(\".\");\n  const [integer26, fraction26] = fraction25.split(\".\");\n  const [integer27, fraction27] = fraction26.split(\".\");\n  const [integer28, fraction28] = fraction27.split(\".\");\n  const [integer29, fraction29] = fraction28.split(\".\");\n  const [integer30, fraction30] = fraction29.split(\".\");\n  const [integer31, fraction31] = fraction30.split(\".\");\n  const [integer32, fraction32] = fraction31.split(\".\");\n  const [integer33, fraction33] = fraction32.split(\".\");\n  const [integer34, fraction34] = fraction33.split(\".\");\n  const [integer35, fraction35] = fraction34.split(\".\");\n  const [integer36, fraction36] = fraction35.split(\".\");\n  const [integer37, fraction37] = fraction36.split(\".\");\n  const [integer38, fraction38] = fraction37.split(\".\");\n  const [integer39, fraction39] = fraction38.split(\".\");\n  const [integer40, fraction40] = fraction39.split(\".\");\n  const [integer41, fraction41] = fraction40.split(\".\");\n  const [integer42, fraction42] = fraction41.split(\".\");\n  const [integer43, fraction43] = fraction42.split(\".\");\n  const [integer44, fraction44] = fraction43.split(\".\");\n  const [integer45, fraction45] = fraction44.split(\".\");\n  const [integer46, fraction46] = fraction45.split(\".\");\n  const [integer47, fraction47] = fraction46.split(\".\");\n  const [integer48, fraction48] = fraction47.split(\".\");\n  const [integer49, fraction49] = fraction48.split(\".\");\n  const [integer50, fraction50] = fraction49.split(\".\");\n  const [integer51, fraction51] = fraction50.split(\".\");\n  const [integer52, fraction52] = fraction51.split(\".\");\n  const [integer53, fraction53] = fraction52.split(\".\");\n  const [integer54, fraction54] = fraction53.split(\".\");\n  const [integer55, fraction55] = fraction54.split(\".\");\n  const [integer56, fraction56] = fraction55.split(\".\");\n  const [integer57, fraction57] = fraction56.split(\".\");\n  const [integer58, fraction58] = fraction57.split(\".\");\n  const [integer59, fraction59] = fraction58.split(\".\");\n  const [integer60, fraction60] = fraction59.split(\".\");\n  const [integer61, fraction61] = fraction60.split(\".\");\n  const [integer62, fraction62] = fraction61.split(\".\");\n  const [integer63, fraction63] = fraction62.split(\".\");\n  const [integer64, fraction64] = fraction63.split(\".\");\n  const [integer65, fraction65] = fraction64.split(\".\");\n  const [integer66, fraction66] = fraction65.split(\".\");\n  const [integer67, fraction67] = fraction66.split(\".\");\n  const [integer68, fraction68] = fraction67.split(\".\");\n  const [integer69, fraction69] = fraction68.split(\".\");\n  const [integer70, fraction70] = fraction69.split(\".\");\n  const [integer71, fraction71] = fraction70.split(\".\");\n  const [integer72, fraction72] = fraction71.split(\".\");\n  const [integer73, fraction73] = fraction72.split(\".\");\n  const [integer74, fraction74] = fraction73.split(\".\");\n  const [integer75, fraction75] = fraction74.split(\".\");\n  const [integer76, fraction76] = fraction75.split(\".\");\n  const [integer77, fraction77] = fraction76.split(\".\");\n  const [integer78, fraction78] = fraction77.split(\".\");\n  const [integer79, fraction79] = fraction78.split(\".\");\n  const [integer80, fraction80] = fraction79.split(\".\");\n  const [integer81, fraction81] = fraction80.split(\".\");\n  const [integer82, fraction82] = fraction81.split(\".\");\n  const [integer83, fraction83] = fraction82.split(\".\");\n  const [integer84, fraction84] = fraction83.split(\".\");\n  const [integer85, fraction85] = fraction84.split(\".\");\n  const [integer86, fraction86] = fraction85.split(\".\");\n  const [integer87, fraction87] = fraction86.split(\".\");\n  const [integer88, fraction88] = fraction87.split(\".\");\n  const [integer89, fraction89] = fraction88.split(\".\");\n  const [integer90, fraction90] = fraction89.split(\".\");\n  const [integer91, fraction91] = fraction90.split(\".\");\n  const [integer92, fraction92] = fraction91.split(\".\");\n  const [integer93, fraction93] = fraction92.split(\".\");\n  const [integer94, fraction94] = fraction93.split(\".\");\n  const [integer95, fraction95] = fraction94.split(\".\");\n  const [integer96, fraction96] = fraction95.split(\".\");\n  const [integer97, fraction97] = fraction96.split(\".\");\n  const [integer98, fraction98] = fraction97.split(\".\");\n  const [integer99, fraction99] = fraction98.split(\".\");\n  const [integer100, fraction100] = fraction99.split(\".\");\n  const [integer101, ", "passed": 0, "run_status": 2}
