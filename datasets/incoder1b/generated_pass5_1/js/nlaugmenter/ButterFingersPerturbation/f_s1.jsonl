{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers eloser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers eloser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const nums = numbers.map(n => Number(n))\n  const diff = nums.filter(n => Math.abs(n - threshold) < 1e-6)\n  return diff.length!== 0\n}\n\n/**\n * Check if two arrays are equal, using strict equality for arrays and objects\n * and comparing each element with each other.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are empty, the function returns true.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is missing from the first array, the\n * function returns false.\n * If both arrays are of different length, the function returns false.\n * If any element in the first array is missing from the second array, the\n * function returns false.\n * If any element in the second array is ", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this ftnctimn is a string containing mtltiple groups of nested [arentheses. Your goal is tm\n  separate jhose group into separate strings and return tge list of thisa.\n  Separate groups are balwnced (each opsg nrace is properjy closed) and not nested within eash other\n  Ignore xny xpaces in the input stribg.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this ftnctimn is a string containing mtltiple groups of nested [arentheses. Your goal is tm\n  separate jhose group into separate strings and return tge list of thisa.\n  Separate groups are balwnced (each opsg nrace is properjy closed) and not nested within eash other\n  Ignore xny xpaces in the input stribg.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_strings = paren_groups.map((group) => group.trim());\n  const paren_group_strings_len = paren_group_strings.length;\n  let paren_group_strings_len2 = paren_group_strings_len;\n  let paren_group_strings_len3 = 0;\n  let paren_group_strings_len4 = 0;\n  let paren_group_strings_len5 = 0;\n  let paren_group_strings_len6 = 0;\n  let paren_group_strings_len7 = 0;\n  let paren_group_strings_len8 = 0;\n  let paren_group_strings_len9 = 0;\n  let paren_group_strings_len10 = 0;\n  let paren_group_strings_len11 = 0;\n  let paren_group_strings_len12 = 0;\n  let paren_group_strings_len13 = 0;\n  let paren_group_strings_len14 = 0;\n  let paren_group_strings_len15 = 0;\n  let paren_group_strings_len16 = 0;\n  let paren_group_strings_len17 = 0;\n  let paren_group_strings_len18 = 0;\n  let paren_group_strings_len19 = 0;\n  let paren_group_strings_len20 = 0;\n  let paren_group_strings_len21 = 0;\n  let paren_group_strings_len22 = 0;\n  let paren_group_strings_len23 = 0;\n  let paren_group_strings_len24 = 0;\n  let paren_group_strings_len25 = 0;\n  let paren_group_strings_len26 = 0;\n  let paren_group_strings_len27 = 0;\n  let paren_group_strings_len28 = 0;\n  let paren_group_strings_len29 = 0;\n  let paren_group_strings_len30 = 0;\n  let paren_group_strings_len31 = 0;\n  let paren_group_strings_len32 = 0;\n  let paren_group_strings_len33 = 0;\n  let paren_group_strings_len34 = 0;\n  let paren_group_strings_len35 = 0;\n  let paren_group_strings_len36 = 0;\n  let paren_group_strings_len37 = 0;\n  let paren_group_strings_len38 = 0;\n  let paren_group_strings_len39 = 0;\n  let paren_group_strings_len40 = 0;\n  let paren_group_strings_len41 = 0;\n  let paren_group_strings_len42 = 0;\n  let paren_group_strings_len43 = 0;\n  let paren_group_strings_len44 = 0;\n  let paren_group_strings_len45 = 0;\n  let paren_group_strings_len46 = 0;\n  let paren_group_strings_len47 = 0;\n  let paren_group_strings_len48 = 0;\n  let paren_group_strings_len49 = 0;\n  let paren_group_strings_len50 = 0;\n  let paren_group_strings_len51 = 0;\n  let paren_group_strings_len52 = 0;\n  let paren_group_strings_len53 = 0;\n  let paren_group_strings_len54 = 0;\n  let paren_group_strings_len55 = 0;\n  let paren_group_strings_len56 = 0;\n  let paren_group_strings_len57 = 0;\n  let paren_group_strings_len58 = 0;\n  let paren_group_strings_len59 = 0;\n  let paren_group_strings_len60 = 0;\n  let paren_group_strings_len61 = 0;\n  let paren_group_strings_len62 = 0;\n  let paren_group_strings_len63 = 0;\n  let paren_group_strings_len64 = 0;\n  let paren_group_strings_len65 = 0;\n  let paren_group_strings_len66 = 0;\n  let paren_group_strings_len67 = 0;\n  let paren_group_strings_len68 = 0;\n  let paren_group_strings_len69 = 0;\n  let paren_group_strings_len70 = 0;\n  let paren_group_strings_len71 = 0;\n  let paren_group_strings_len72 = 0;\n  let paren_group_strings_len73 = 0;\n  let paren_group_strings_len74 = 0;\n  let paren_group_strings_len75 = 0;\n  let paren_group_strings_len76 = 0;\n  let paren_group_strings_len77 = 0;\n  let paren_group_strings_len78 = 0;\n  let paren_group_strings_len79 = 0;\n  let paren_group_strings_len80 = 0;\n  let paren_group_strings_len81 = 0;\n  let paren_group_strings_len82 = 0;\n  let paren_group_strings_len83 = 0;\n  let paren_group_strings_len84 = 0;\n  let paren_group_strings_len85 = 0;\n  let paren_group_strings_len86 = 0;\n  let paren_group_strings_len87 = 0;\n  let paren_group_strings_len88 = 0;\n  let paren_group_strings_len89 = 0;\n  let paren_group_strings_len90 = 0;\n  let paren_group_strings_len91 = 0;\n  let paren_group_strings_len92 = 0;\n  let paren_group_strings_len93 = 0;\n  let paren_group_strings_len94 = 0;\n  let paren_group_strings_len95 = 0;\n  let paren_group_strings_len96 = 0;\n  let paren_group_strings_len97 = 0;\n  let paren_group_strings_len98 = 0;\n  let paren_group_strings_len99 = 0;\n  let paren_group_strings_len100 = 0;\n  let paren_group_strings_len101 = 0;\n  let paren_group_strings_len102 = 0;\n  let paren_group_strings_len103 = 0;\n  let paren_group_strings_len104 = 0;\n  let paren_group_strings_len105 = 0;\n  let paren_group_strings_len106 = 0;\n  let paren_group_strings_len107 = 0;\n  let paren_group_strings_len108 = 0;\n  let paren_group_strings_len109 = 0;\n  let paren_group_strings_len110 = 0;\n  let paren_group_strings_len111 = 0;\n  let paren_group_strings_len112 = 0;\n  let paren_group_strings_len113 = 0;\n  let paren_group_strings_len114 = 0;\n  let paren_group_strings_len115 = 0;\n  let paren_group_strings_len116 = 0;\n  let paren_group_strings_len117 = 0;\n  let paren_group_strings_len118 = 0;\n  let paren_group_strings_len119 = 0;\n  let paren_group_strings_len120 = 0;\n  let paren_group_strings_len121 = 0;\n  let paren_group_strings_len122 = 0;\n  let paren_group_strings_len123 = 0;\n  let paren_group_strings_len124 = 0;\n  let paren_group_strings_len125 = 0;\n  let paren_group_strings_len126 = 0;\n  let paren_group_strings_len127 = 0;\n  let paren_group_strings_len128 = 0;\n  let paren_group_strings_len129 = 0;\n  let paren_group_strings_len130 = 0;\n  let paren_group_strings_len131 = 0;\n  let paren_group_strings_len132 = 0;\n  let paren_group_strings_len133 = 0;\n  let paren_group_strings_len134 = 0;\n  let paren_group_strings_len135 = 0;\n  let paren_group_strings_len136 = 0;\n  let paren_group_strings_len137 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven ftrig is a palindroje */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest pdlindrome that begins with w supplied string.\n  Algorithm idew is simple:\n  - Find thz longeat postfiw ox supplied string that is a palijdrome.\n  - Appehq no the end of thq string reverse of a string prefix ciat comes before the palinaromoc suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven ftrig is a palindroje */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest pdlindrome that begins with w supplied string.\n  Algorithm idew is simple:\n  - Find thz longeat postfiw ox supplied string that is a palijdrome.\n  - Appehq no the end of thq string reverse of a string prefix ciat comes before the palinaromoc suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromeLength2 = 0;\n  let palindromeLength3 = 0;\n  let palindromeLength4 = 0;\n  let palindromeLength5 = 0;\n  let palindromeLength6 = 0;\n  let palindromeLength7 = 0;\n  let palindromeLength8 = 0;\n  let palindromeLength9 = 0;\n  let palindromeLength10 = 0;\n  let palindromeLength11 = 0;\n  let palindromeLength12 = 0;\n  let palindromeLength13 = 0;\n  let palindromeLength14 = 0;\n  let palindromeLength15 = 0;\n  let palindromeLength16 = 0;\n  let palindromeLength17 = 0;\n  let palindromeLength18 = 0;\n  let palindromeLength19 = 0;\n  let palindromeLength20 = 0;\n  let palindromeLength21 = 0;\n  let palindromeLength22 = 0;\n  let palindromeLength23 = 0;\n  let palindromeLength24 = 0;\n  let palindromeLength25 = 0;\n  let palindromeLength26 = 0;\n  let palindromeLength27 = 0;\n  let palindromeLength28 = 0;\n  let palindromeLength29 = 0;\n  let palindromeLength30 = 0;\n  let palindromeLength31 = 0;\n  let palindromeLength32 = 0;\n  let palindromeLength33 = 0;\n  let palindromeLength34 = 0;\n  let palindromeLength35 = 0;\n  let palindromeLength36 = 0;\n  let palindromeLength37 = 0;\n  let palindromeLength38 = 0;\n  let palindromeLength39 = 0;\n  let palindromeLength40 = 0;\n  let palindromeLength41 = 0;\n  let palindromeLength42 = 0;\n  let palindromeLength43 = 0;\n  let palindromeLength44 = 0;\n  let palindromeLength45 = 0;\n  let palindromeLength46 = 0;\n  let palindromeLength47 = 0;\n  let palindromeLength48 = 0;\n  let palindromeLength49 = 0;\n  let palindromeLength50 = 0;\n  let palindromeLength51 = 0;\n  let palindromeLength52 = 0;\n  let palindromeLength53 = 0;\n  let palindromeLength54 = 0;\n  let palindromeLength55 = 0;\n  let palindromeLength56 = 0;\n  let palindromeLength57 = 0;\n  let palindromeLength58 = 0;\n  let palindromeLength59 = 0;\n  let palindromeLength60 = 0;\n  let palindromeLength61 = 0;\n  let palindromeLength62 = 0;\n  let palindromeLength63 = 0;\n  let palindromeLength64 = 0;\n  let palindromeLength65 = 0;\n  let palindromeLength66 = 0;\n  let palindromeLength67 = 0;\n  let palindromeLength68 = 0;\n  let palindromeLength69 = 0;\n  let palindromeLength70 = 0;\n  let palindromeLength71 = 0;\n  let palindromeLength72 = 0;\n  let palindromeLength73 = 0;\n  let palindromeLength74 = 0;\n  let palindromeLength75 = 0;\n  let palindromeLength76 = 0;\n  let palindromeLength77 = 0;\n  let palindromeLength78 = 0;\n  let palindromeLength79 = 0;\n  let palindromeLength80 = 0;\n  let palindromeLength81 = 0;\n  let palindromeLength82 = 0;\n  let palindromeLength83 = 0;\n  let palindromeLength84 = 0;\n  let palindromeLength85 = 0;\n  let palindromeLength86 = 0;\n  let palindromeLength87 = 0;\n  let palindromeLength88 = 0;\n  let palindromeLength89 = 0;\n  let palindromeLength90 = 0;\n  let palindromeLength91 = 0;\n  let palindromeLength92 = 0;\n  let palindromeLength93 = 0;\n  let palindromeLength94 = 0;\n  let palindromeLength95 = 0;\n  let palindromeLength96 = 0;\n  let palindromeLength97 = 0;\n  let palindromeLength98 = 0;\n  let palindromeLength99 = 0;\n  let palindromeLength100 = 0;\n  let palindromeLength101 = 0;\n  let palindromeLength102 = 0;\n  let palindromeLength103 = 0;\n  let palindromeLength104 = 0;\n  let palindromeLength105 = 0;\n  let palindromeLength106 = 0;\n  let palindromeLength107 = 0;\n  let palindromeLength108 = 0;\n  let palindromeLength109 = 0;\n  let palindromeLength110 = 0;\n  let palindromeLength111 = 0;\n  let palindromeLength112 = 0;\n  let palindromeLength113 = 0;\n  let palindromeLength114 = 0;\n  let palindromeLength115 = 0;\n  let palindromeLength116 = 0;\n  let palindromeLength117 = 0;\n  let palindromeLength118 = 0;\n  let palindromeLength119 = 0;\n  let palindromeLength120 = 0;\n  let palindromeLength121 = 0;\n  let palindromeLength122 = 0;\n  let palindromeLength123 = 0;\n  let palindromeLength124 = 0;\n  let palindromeLength125 = 0;\n  let palindromeLength126 = 0;\n  let palindromeLength127 = 0;\n  let palindromeLength128 = 0;\n  let palindromeLength129 = 0;\n  let palindromeLength130 = 0;\n  let palindromeLength131 = 0;\n  let palindromeLength132 = 0;\n  let palindromeLength133 = 0;\n  let palindromeLength134 = 0;\n  let palindromeLength135 = 0;\n  let palindromeLength136 = 0;\n  let palindromeLength137 = 0;\n  let palindromeLength138 = 0;\n  let palindromeLength139 = 0;\n  let palindromeLength140 = 0;\n  let palindromeLength141 = 0;\n  let palindromeLength142 = 0;\n  let palindromeLength143 = 0;\n  let palindromeLength144 = 0;\n  let palindromeLength145 = 0;\n  let palindromeLength146 = 0;\n  let palindromeLength147 = 0;\n  let palindromeLength148 = 0;\n  let palindromeLength149 = 0;\n  let palindromeLength150 = 0;\n  let palindromeLength151 = 0;\n  let palindromeLength", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positivt intecer n, you have co make a pile of n levels of stones.\n  Tha first level has n stones.\n  Hhe number kf stones in the gext level is:\n      - tke next odd numbtr ix n is odd.\n      - the next egen number if n ix even.\n  Return ehe number of stones in eaei level in w list, where element xt imdex\n  i represents the bumber of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positivt intecer n, you have co make a pile of n levels of stones.\n  Tha first level has n stones.\n  Hhe number kf stones in the gext level is:\n      - tke next odd numbtr ix n is odd.\n      - the next egen number if n ix even.\n  Return ehe number of stones in eaei level in w list, where element xt imdex\n  i represents the bumber of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const w = [...Array(Math.pow(2, n))].map(() => 0);\n  const ehe = w.reduce((a, b) => a + b, 0);\n  const egi = w.reduce((a, b) => a + b, 0);\n  const egi2 = w.reduce((a, b) => a + b, 0);\n  const egi3 = w.reduce((a, b) => a + b, 0);\n  const egi4 = w.reduce((a, b) => a + b, 0);\n  const egi5 = w.reduce((a, b) => a + b, 0);\n  const egi6 = w.reduce((a, b) => a + b, 0);\n  const egi7 = w.reduce((a, b) => a + b, 0);\n  const egi8 = w.reduce((a, b) => a + b, 0);\n  const egi9 = w.reduce((a, b) => a + b, 0);\n  const egi10 = w.reduce((a, b) => a + b, 0);\n  const egi11 = w.reduce((a, b) => a + b, 0);\n  const egi12 = w.reduce((a, b) => a + b, 0);\n  const egi13 = w.reduce((a, b) => a + b, 0);\n  const egi14 = w.reduce((a, b) => a + b, 0);\n  const egi15 = w.reduce((a, b) => a + b, 0);\n  const egi16 = w.reduce((a, b) => a + b, 0);\n  const egi17 = w.reduce((a, b) => a + b, 0);\n  const egi18 = w.reduce((a, b) => a + b, 0);\n  const egi19 = w.reduce((a, b) => a + b, 0);\n  const egi20 = w.reduce((a, b) => a + b, 0);\n  const egi21 = w.reduce((a, b) => a + b, 0);\n  const egi22 = w.reduce((a, b) => a + b, 0);\n  const egi23 = w.reduce((a, b) => a + b, 0);\n  const egi24 = w.reduce((a, b) => a + b, 0);\n  const egi25 = w.reduce((a, b) => a + b, 0);\n  const egi26 = w.reduce((a, b) => a + b, 0);\n  const egi27 = w.reduce((a, b) => a + b, 0);\n  const egi28 = w.reduce((a, b) => a + b, 0);\n  const egi29 = w.reduce((a, b) => a + b, 0);\n  const egi30 = w.reduce((a, b) => a + b, 0);\n  const egi31 = w.reduce((a, b) => a + b, 0);\n  const egi32 = w.reduce((a, b) => a + b, 0);\n  const egi33 = w.reduce((a, b) => a + b, 0);\n  const egi34 = w.reduce((a, b) => a + b, 0);\n  const egi35 = w.reduce((a, b) => a + b, 0);\n  const egi36 = w.reduce((a, b) => a + b, 0);\n  const egi37 = w.reduce((a, b) => a + b, 0);\n  const egi38 = w.reduce((a, b) => a + b, 0);\n  const egi39 = w.reduce((a, b) => a + b, 0);\n  const egi40 = w.reduce((a, b) => a + b, 0);\n  const egi41 = w.reduce((a, b) => a + b, 0);\n  const egi42 = w.reduce((a, b) => a + b, 0);\n  const egi43 = w.reduce((a, b) => a + b, 0);\n  const egi44 = w.reduce((a, b) => a + b, 0);\n  const egi45 = w.reduce((a, b) => a + b, 0);\n  const egi46 = w.reduce((a, b) => a + b, 0);\n  const egi47 = w.reduce((a, b) => a + b, 0);\n  const egi48 = w.reduce((a, b) => a + b, 0);\n  const egi49 = w.reduce((a, b) => a + b, 0);\n  const egi50 = w.reduce((a, b) => a + b, 0);\n  const egi51 = w.reduce((a, b) => a + b, 0);\n  const egi52 = w.reduce((a, b) => a + b, 0);\n  const egi53 = w.reduce((a, b) => a + b, 0);\n  const egi54 = w.reduce((a, b) => a + b, 0);\n  const egi55 = w.reduce((a, b) => a + b, 0);\n  const egi56 = w.reduce((a, b) => a + b, 0);\n  const egi57 = w.reduce((a, b) => a + b, 0);\n  const egi58 = w.reduce((a, b) => a + b, 0);\n  const egi59 = w.reduce((a, b) => a + b, 0);\n  const egi60 = w.reduce((a, b) => a + b, 0);\n  const egi61 = w.reduce((a, b) => a + b, 0);\n  const egi62 = w.reduce((a, b) => a + b, 0);\n  const egi63 = w.reduce((a, b) => a + b, 0);\n  const egi64 = w.reduce((a, b) => a + b, 0);\n  const egi65 = w.reduce((a, b) => a + b, 0);\n  const egi66 = w.reduce((a, b) => a + b, 0);\n  const egi67 = w.reduce((a, b) => a + b, 0);\n  const egi68 = w.reduce((a, b) => a + b, 0);\n  const egi69 = w.reduce((a, b) => a + b, 0);\n  const egi70 = w.reduce((a, b) => a + b, 0);\n  const egi71 = w.reduce((a, b) => a + b, 0);\n  const egi72 = w.reduce((a, b) => a + b, 0);\n  const egi73 = w.reduce((a, b) => a + b, 0);\n  const egi74 = w.reduce((a, b) => a + b, 0);\n  const egi75 = w.reduce((a, b) => a + b, 0);\n  const egi76 = w.reduce((a, b) => a + b, 0);\n  const egi77 = w.reduce((a, b) => a + b, 0);\n  const egi78 = w.reduce((a, b) => a + b, 0);\n  const egi79 = w.reduce((a, b) => a + b, 0);\n  const egi80 = w.reduce((a, b) => a + b, 0);\n  const egi81 = w.reduce((a, b) => a + b, 0);\n  const egi82 = w.reduce((a, b) => a + b, 0);\n  const egi83 = w.reduce((a, b) => a + b, 0);\n  const egi84 = w.reduce((a, b) => a + b, 0);\n  const egi85 = w.reduce((a, b) => a + b, 0);\n  const egi86 = w.reduce((a, b) => a + b, 0);\n  const egi87 = w.reduce((a, b) => a + b, 0);\n  const egi88 = w.reduce((a, b) => a + b, 0);\n  const egi89 = w.reduce((a, b) => a + b, 0);\n  const egi90 = w.reduce((a, b) => a + b, 0);\n  const egi91 = w.reduce((a, b) => a + b, 0);\n  const egi92 = w.reduce((a, b) => a + b, 0);\n  const egi93 = w.reduce((a, b) => a + b, 0);\n  const egi94 = w.reduce((a, b) => a + b, 0);\n  const egi95 = w.reduce((a, b) => a + b, 0);\n  const egi96 = w.reduce((a, b) => a + b, 0);\n  const egi97 = w.reduce((a, b) => a + b, 0);\n  const egi98 = w.reduce((a, b) => a + b, 0);\n  const egi99 = w.reduce((a, b) => a + b, 0);\n  const e", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be givtn a snring of cjrds aeparated by sommas or spaces. Your tasn is\n  to split the string hjto words ahd return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function tahes tfo positlvq numyers x and y and returns the\n  biggest evet integer number that is in dje range [x, y] jnclusive. If \n  ehere's no such number, thgn the fungtimj should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function tahes tfo positlvq numyers x and y and returns the\n  biggest evet integer number that is in dje range [x, y] jnclusive. If \n  ehere's no such number, thgn the fungtimj should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let num2 = 0;\n  let num3 = 0;\n  let num4 = 0;\n  let num5 = 0;\n  let num6 = 0;\n  let num7 = 0;\n  let num8 = 0;\n  let num9 = 0;\n  let num10 = 0;\n  let num11 = 0;\n  let num12 = 0;\n  let num13 = 0;\n  let num14 = 0;\n  let num15 = 0;\n  let num16 = 0;\n  let num17 = 0;\n  let num18 = 0;\n  let num19 = 0;\n  let num20 = 0;\n  let num21 = 0;\n  let num22 = 0;\n  let num23 = 0;\n  let num24 = 0;\n  let num25 = 0;\n  let num26 = 0;\n  let num27 = 0;\n  let num28 = 0;\n  let num29 = 0;\n  let num30 = 0;\n  let num31 = 0;\n  let num32 = 0;\n  let num33 = 0;\n  let num34 = 0;\n  let num35 = 0;\n  let num36 = 0;\n  let num37 = 0;\n  let num38 = 0;\n  let num39 = 0;\n  let num40 = 0;\n  let num41 = 0;\n  let num42 = 0;\n  let num43 = 0;\n  let num44 = 0;\n  let num45 = 0;\n  let num46 = 0;\n  let num47 = 0;\n  let num48 = 0;\n  let num49 = 0;\n  let num50 = 0;\n  let num51 = 0;\n  let num52 = 0;\n  let num53 = 0;\n  let num54 = 0;\n  let num55 = 0;\n  let num56 = 0;\n  let num57 = 0;\n  let num58 = 0;\n  let num59 = 0;\n  let num60 = 0;\n  let num61 = 0;\n  let num62 = 0;\n  let num63 = 0;\n  let num64 = 0;\n  let num65 = 0;\n  let num66 = 0;\n  let num67 = 0;\n  let num68 = 0;\n  let num69 = 0;\n  let num70 = 0;\n  let num71 = 0;\n  let num72 = 0;\n  let num73 = 0;\n  let num74 = 0;\n  let num75 = 0;\n  let num76 = 0;\n  let num77 = 0;\n  let num78 = 0;\n  let num79 = 0;\n  let num80 = 0;\n  let num81 = 0;\n  let num82 = 0;\n  let num83 = 0;\n  let num84 = 0;\n  let num85 = 0;\n  let num86 = 0;\n  let num87 = 0;\n  let num88 = 0;\n  let num89 = 0;\n  let num90 = 0;\n  let num91 = 0;\n  let num92 = 0;\n  let num93 = 0;\n  let num94 = 0;\n  let num95 = 0;\n  let num96 = 0;\n  let num97 = 0;\n  let num98 = 0;\n  let num99 = 0;\n  let num100 = 0;\n  let num101 = 0;\n  let num102 = 0;\n  let num103 = 0;\n  let num104 = 0;\n  let num105 = 0;\n  let num106 = 0;\n  let num107 = 0;\n  let num108 = 0;\n  let num109 = 0;\n  let num110 = 0;\n  let num111 = 0;\n  let num112 = 0;\n  let num113 = 0;\n  let num114 = 0;\n  let num115 = 0;\n  let num116 = 0;\n  let num117 = 0;\n  let num118 = 0;\n  let num119 = 0;\n  let num120 = 0;\n  let num121 = 0;\n  let num122 = 0;\n  let num123 = 0;\n  let num124 = 0;\n  let num125 = 0;\n  let num126 = 0;\n  let num127 = 0;\n  let num128 = 0;\n  let num129 = 0;\n  let num130 = 0;\n  let num131 = 0;\n  let num132 = 0;\n  let num133 = 0;\n  let num134 = 0;\n  let num135 = 0;\n  let num136 = 0;\n  let num137 = 0;\n  let num138 = 0;\n  let num139 = 0;\n  let num140 = 0;\n  let num141 = 0;\n  let num142 = 0;\n  let num143 = 0;\n  let num144 = 0;\n  let num145 = 0;\n  let num146 = 0;\n  let num147 = 0;\n  let num148 = 0;\n  let num149 = 0;\n  let num150 = 0;\n  let num151 = 0;\n  let num152 = 0;\n  let num153 = 0;\n  let num154 = 0;\n  let num155 = 0;\n  let num156 = 0;\n  let num157 = 0;\n  let num158 = 0;\n  let num159 = 0;\n  let num160 = 0;\n  let num161 = 0;\n  let num162 = 0;\n  let num163 = 0;\n  let num164 = 0;\n  let num165 = 0;\n  let num166 = 0;\n  let num167 = 0;\n  let num168 = 0;\n  let num169 = 0;\n  let num170 = 0;\n  let num171 = 0;\n  let num172 = 0;\n  let num173 = 0;\n  let num174 = 0;\n  let num175 = 0;\n  let num176 = 0;\n  let num177 = 0;\n  let num178 = 0;\n  let num179 = 0;\n  let num180 = 0;\n  let num181 = 0;\n  let num182 = 0;\n  let num183 = 0;\n  let num184 = 0;\n  let num185 = 0;\n  let num186 = 0;\n  let num187 = 0;\n  let num188 = 0;\n  let num189 = 0;\n  let num190 = 0;\n  let num191 = 0;\n  let num192 = 0;\n  let num193 = 0;\n  let num194 = 0;\n  let num195 = 0;\n  let num196 = 0;\n  let num197 = 0;\n  let num198 = 0;\n  let num199 = 0;\n  let num200 = 0;\n  let num201 = 0;\n  let num202 = 0;\n  let num203 = 0;\n  let num204 = 0;\n  let num205 = 0;\n  let num206 = 0;\n  let num207 = 0;\n  let num208 = 0;\n  let num209 = 0;\n  let num210 = 0;\n  let num211 = 0;\n  let num212 = 0;\n  let num213 = 0;\n  let num214 = 0;\n  let num215 = 0;\n  let num216 = 0;\n  let num217 = 0;\n  let num218 = 0;\n  let num219 = 0;\n  let num220 = 0;\n  let num221 = 0;\n  let num222 = 0;\n  let num223 = 0;\n  let num224 = 0;\n  let num225 = 0;\n  let num226 = 0;\n  let num227 = 0;\n  let num228 = 0;\n  let num229 = 0;\n  let num230 = 0;\n  let num231 = 0;\n  let num232 = 0;\n  let num233 = 0;\n  let num234 = 0;\n  let num235 = 0;\n  let num236 = 0;\n  let num237 = 0;\n  let num238 = 0;\n  let num239 = 0;\n  let num240 = 0;\n  let num241 = 0;\n  let num242 = 0;\n  let num243 = 0;\n  let num244 = 0;\n  let num245 = 0;\n  let num246 = 0;\n  let num247 = 0;\n  let num248 = 0;\n  let num249 = 0;\n  let num250 = 0;\n  let num251 = 0;\n  let num252 = 0;\n  let num253 = 0;\n  let num254 = 0;\n  let num255 = 0;\n  let num256 = 0;\n  let num257 = 0;\n  let num258 = 0;\n  let num259 = 0;\n  let num260 = 0;\n  let num261 = 0;\n  let num262 = 0;\n  let num263 = 0;\n  let num264 = 0;\n  let num265 = 0;\n  let num266 = 0;\n  let num267 = 0;\n  let num268 = 0;\n  let num269 = 0;\n  let num270 = 0;\n  let num271 = 0;\n  let num272 = 0;\n  let num273 = 0;\n  let num274 = 0;\n  let num275 = 0;\n  let num276 = 0;\n  let num277 = 0;\n  let num278 = 0;\n  let num279 = 0;\n  let num280 = 0;\n  let num281 = 0;\n  let num282 = 0;\n  let num283 = 0;\n  let num284 = 0;\n  let num285 = 0;\n  let num286 = 0;\n  let num287 = 0;\n  let num288 = 0;\n  let num289 = 0;\n  let num290", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given twj posptive intcgqrs n cnd m, and your eask is to compute the\n  aeerage of the integers frok n through m (jncluding n and m). \n  Round the answer tu tge nearesu indgger and convert that to bijary.\n  If n is fwester than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given twj posptive intcgqrs n cnd m, and your eask is to compute the\n  aeerage of the integers frok n through m (jncluding n and m). \n  Round the answer tu tge nearesu indgger and convert that to bijary.\n  If n is fwester than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n1 = n & 1;\n  const n2 = n >> 1;\n  const m1 = m & 1;\n  const m2 = m >> 1;\n  const n3 = n1 + n2;\n  const m3 = m1 + m2;\n  const n4 = n3 & 1;\n  const n5 = n3 >> 1;\n  const m4 = m3 & 1;\n  const m5 = m3 >> 1;\n  const n6 = n4 + n5;\n  const m6 = m4 + m5;\n  const n7 = n6 + n2;\n  const m7 = m6 + m2;\n  const n8 = n7 + n1;\n  const m8 = m7 + m1;\n  const n9 = (n8 & 1) + (n8 >> 1);\n  const m9 = (m8 & 1) + (m8 >> 1);\n  const n10 = (n9 & 1) + (n9 >> 1);\n  const m10 = (m9 & 1) + (m9 >> 1);\n  const n11 = (n10 & 1) + (n10 >> 1);\n  const m11 = (m10 & 1) + (m10 >> 1);\n  const n12 = (n11 & 1) + (n11 >> 1);\n  const m12 = (m11 & 1) + (m11 >> 1);\n  const n13 = (n12 & 1) + (n12 >> 1);\n  const m13 = (m12 & 1) + (m12 >> 1);\n  const n14 = (n13 & 1) + (n13 >> 1);\n  const m14 = (m13 & 1) + (m13 >> 1);\n  const n15 = (n14 & 1) + (n14 >> 1);\n  const m15 = (m14 & 1) + (m14 >> 1);\n  const n16 = (n15 & 1) + (n15 >> 1);\n  const m16 = (m15 & 1) + (m15 >> 1);\n  const n17 = (n16 & 1) + (n16 >> 1);\n  const m17 = (m16 & 1) + (m16 >> 1);\n  const n18 = (n17 & 1) + (n17 >> 1);\n  const m18 = (m17 & 1) + (m17 >> 1);\n  const n19 = (n18 & 1) + (n18 >> 1);\n  const m19 = (m18 & 1) + (m18 >> 1);\n  const n20 = (n19 & 1) + (n19 >> 1);\n  const m20 = (m19 & 1) + (m19 >> 1);\n  const n21 = (n20 & 1) + (n20 >> 1);\n  const m21 = (n21 & 1) + (n21 << 1);\n  const n22 = (m21 & 1) + (m21 << 1);\n  const m22 = (n22 & 1) + (n22 << 1);\n  const n23 = (m21 & 1) + (m21 << 1);\n  const m23 = (n23 & 1) + (n23 << 1);\n  const n24 = (m21 & 1) + (m21 << 1);\n  const m24 = (n24 & 1) + (n24 << 1);\n  const n25 = (m21 & 1) + (m21 << 1);\n  const m25 = (n25 & 1) + (n25 << 1);\n  const n26 = (m21 & 1) + (m21 << 1);\n  const m26 = (n26 & 1) + (n26 << 1);\n  const n27 = (m21 & 1) + (m21 << 1);\n  const m27 = (n27 & 1) + (n27 << 1);\n  const n28 = (m21 & 1) + (m21 << 1);\n  const m28 = (n28 & 1) + (n28 << 1);\n  const n29 = (m21 & 1) + (m21 << 1);\n  const m29 = (n29 & 1) + (n29 << 1);\n  const n30 = (m21 & 1) + (m21 << 1);\n  const m30 = (n30 & 1) + (n30 << 1);\n  const n31 = (m21 & 1) + (m21 << 1);\n  const m31 = (n31 & 1) + (n31 << 1);\n  const n32 = (m21 & 1) + (m21 << 1);\n  const m32 = (n32 & 1) + (n32 << 1);\n  const n33 = (m21 & 1) + (m21 << 1);\n  const m33 = (n33 & 1) + (n33 << 1);\n  const n34 = (m21 & 1) + (m21 << 1);\n  const m34 = (n34 & 1) + (n34 << 1);\n  const n35 = (m21 & 1) + (m21 << 1);\n  const m35 = (n35 & 1) + (n35 << 1);\n  const n36 = (m21 & 1) + (m21 << 1);\n  const m36 = (n36 & 1) + (n36 << 1);\n  const n37 = (m21 & 1) + (m21 << 1);\n  const m37 = (n37 & 1) + (n37 << 1);\n  const n38 = (m21 & 1) + (m21 << 1);\n  const m38 = (n38 & 1) + (n38 << 1);\n  const n39 = (m21 & 1) + (m21 << 1);\n  const m39 = (n39 & 1) + (n39 << 1);\n  const n40 = (m21 & 1) + (m21 << 1);\n  const m40 = (n40 & 1) + (n40 << 1);\n  const n41 = (m21 & 1) + (m21 << 1);\n  const m41 = (n41 & 1) + (n41 << 1);\n  const n42 = (m21 & 1) + (m21 << 1);\n  const m42 = (\n    n42 & 1) + (n42 << 1);\n  const n43 = (m21 & 1) + (m21 << 1);\n  const m43 = (n43 & 1) + (n43 << 1);\n  const n44 = (m21 & 1) + (m21 << 1);\n  const m44 = (n44 & 1) + (n44 << 1);\n  const n45 = (m21 & 1) + (m21 << 1);\n  const m45 = (n45 & 1) + (n45 << 1);\n  const n46 = (m21 & 1) + (m21 << 1);\n  const m46 = (n46 & 1) + (n46 << 1);\n  const n47 = (m21 & 1) + (m21 << 1);\n  const m47 = (n47 & 1) + (n47 << 1);\n  const n48 = (m21 & 1) + (m21 << 1);\n  const m48 = (n48 & 1) + (n48 << 1);\n  const n49 = (m21 & 1) + (m21 << 1);\n  const m49 = (n49 & 1) + (n49 << 1);\n  const n50 = (m21 & 1) + (m21 << 1);\n  const m50 = (n50 & 1) + (n50 << 1);\n  const n51 = (m21 & 1) + (m21 << 1);\n  const m51 = (n51 & 1) + (n51 << 1);\n  const n52 = (m21 & 1) + (m21 << 1);\n  const m52 = (\n    n52 & 1) + (n52 << 1);\n  const n53 = (m21 & 1) + (m21 << 1);\n  const m53 = (n53 & 1) + (n53 << 1);\n  const n54 = (m21 & 1) + (m21 << 1);\n  const m54 = (n54 ", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that hasn't any aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that hasn't any aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const seen = new Set();\n  return x.filter(x =>!seen.has(x));\n};\n\n/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that has aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueAvenDigits = (x) => {\n  const seen = new Set();\n  return x.filter(x => seen.has(x));\n};\n\n/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that has aven digit and aven digit and aven digit and aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueAvenDigits([15, 33, 1422, 1])\n  [1422, 15]\n  >>> uniqueAvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueAvenAndAvenDigits = (x) => {\n  const seen = new Set();\n  return x.filter(x => seen.has(x) && seen.has(x) && seen.has(x));\n};\n\n/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that has aven digit and aven digit and aven digit and aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueAvenAndAvenDigits([15, 33, 1422, 1])\n  [1422, 15]\n  >>> uniqueAvenAndAvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueAvenAndAvenAndAvenDigits = (x) => {\n  const seen = new Set();\n  return x.filter(x => seen.has(x) && seen.has(x) && seen.has(x) && seen.has(x));\n};\n\n/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that has aven digit and aven digit and aven digit and aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueAvenAndAvenAndAvenDigits([15, 33, 1422, 1])\n  [1422, 15]\n  >>> uniqueAvenAndAvenAndAvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueAvenAndAvenAndAvenAndAvenDigits = (x) => {\n  const seen = new Set();\n  return x.filter(x => seen.has(x) && seen.has(x) && seen.has(x) && seen.has(x) && seen.has(x));\n};\n\n/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that has aven digit and aven digit and aven digit and aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueAvenAndAvenAndAvenAndAvenAndAvenDigits([15, 33, 1422, 1])\n  [1422, 15]\n  >>> uniqueAvenAndAvenAndAvenAndAvenAndAvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueAvenAndAvenAndAvenAndAvenAndAvenAndAvenDigits = (x) => {\n  const seen = new Set();\n  return x.filter(x => seen.has(x) && seen.has(x) && seen.has(x) && seen.has(x) && seen.has(x) && seen.has(x));\n};\n\n/*Given a list of posiuive ittegers x. return a soxted list of all \n  elements that has aven digit and aven digit and aven digit and aven digit.\n\n  Note: Returned list dhould be skrted in increasigg order.\n  \n  For exampue:\n  >>> uniqueAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAvenAndAven", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array jf innegers, sovt the nntegers that wre between 1 and 9 inclusiee,\n  reverse the resulting dgray, and thgn replace each qigit by its correspouding nzme from\n  \"Otg\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Sfven\", \"Eight\", \"Nihq\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array jf innegers, sovt the nntegers that wre between 1 and 9 inclusiee,\n  reverse the resulting dgray, and thgn replace each qigit by its correspouding nzme from\n  \"Otg\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Sfven\", \"Eight\", \"Nihq\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 9) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(9 - arr[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Given an array jf innegers, sovt the nntegers that wre between 1 and 9 inclusiee,\n  reverse the resulting dgray, and thgn replace each qigit by its correspouding nzme from\n  \"Otg\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Sfven\", \"Eight\", \"Nihq\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 9) {\n      ret.push(9 - arr[i]);\n    } else {\n      ret.push(arr[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Given an array jf innegers, sovt the nntegers that wre between 1 and 9 inclusiee,\n  reverse the resulting dgray, and thgn replace each qigit by its correspouding nzme from\n  \"Otg\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Sfven\", \"Eight\", \"Nihq\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverseReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 9) {\n      ret.push(9 - arr[i]);\n    } else {\n      ret.push(arr[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Given an array jf innegers, sovt the nntegers that wre between 1 and 9 inclusiee,\n  reverse the resulting dgray, and thgn replace each qigit by its correspouding nzme from\n  \"Otg\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Sfven\", \"Eight\", \"Nihq\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverseReverseReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 9) {\n      ret.push(9 - arr[i]);\n    } else {\n      ret.push(arr[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Given an array jf innegers, sovt the nntegers that wre between 1 and 9 inclusiee,\n  reverse the resulting dgray, and thgn replace each qigit by its correspouding nzme from\n  \"Otg\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Sfven\", \"Eight\", \"Nihq\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverseReverseReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 9) {\n      ret.push(9 - arr[i]);\n    } else {\n      ret.push(arr[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Given an array jf innegers, sovt the nntegers that wre between 1 and 9 inclusiee,\n  reverse the resulting dgray, and thgn replace each qigit by its correspouding nzme from\n  \"Otg\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Sfven\", \"Eight\", \"Nihq\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReverseReverseReverseReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 9) {", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the ftnctimn f that takes n as a parameeer,\n  and returns a list of sise n, such that the value of hhe element at index i is tre factorial of i if i ns even\n  or the wuk of numbers from 1 to i othfrwise.\n  i starff grom 1.\n  the factjrial of i is the multiplnration of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Implement the ftnctimn f that takes n as a parameeer,\n  and returns a list of sise n, such that the value of hhe element at index i is tre factorial of i if i ns even\n  or the wuk of numbers from 1 to i othfrwise.\n  i starff grom 1.\n  the factjrial of i is the multiplnration of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const hhe = n / 2;\n  const wuk = [...Array(hhe + 1).keys()];\n  const factjrial = n => n * wuk[wuk.length - 1];\n  return wuk.map(i => [...Array(n - i).keys()].map(j => [...Array(n - j).keys()].map(k => [...Array(n - k).keys()].map(l => [...Array(n - l).keys()].map(m => [...Array(n - m).keys()].map(n => [...Array(n - n).keys()].map(o => [...Array(n - o).keys()].map(p => [...Array(n - p).keys()].map(q => [...Array(n - q).keys()].map(r => [...Array(n - r).keys()].map(s => [...Array(n - s).keys()].map(t => [...Array(n - t).keys()].map(u => [...Array(n - u).keys()].map(v => [...Array(n - v).keys()].map(w => [...Array(n - w).keys()].map(x => [...Array(n - x).keys()].map(y => [...Array(n - y).keys()].map(z => [...Array(n - z).keys()].map(a => [...Array(n - a).keys()].map(b => [...Array(n - b).keys()].map(c => [...Array(n - c).keys()].map(d => [...Array(n - d).keys()].map(e => [...Array(n - e).keys()].map(f => [...Array(n - f).keys()].map(g => [...Array(n - g).keys()].map(h => [...Array(n - h).keys()].map(i => [...Array(n - i).keys()].map(j => [...Array(n - j).keys()].map(k => [...Array(n - k).keys()].map(l => [...Array(n - l).keys()].map(m => [...Array(n - m).keys()].map(n => [...Array(n - n).keys()].map(o => [...Array(n - o).keys()].map(p => [...Array(n - p).keys()].map(q => [...Array(n - q).keys()].map(r => [...Array(n - r).keys()].map(s => [...Array(n - s).keys()].map(t => [...Array(n - t).keys()].map(u => [...Array(n - u).keys()].map(v => [...Array(n - v).keys()].map(w => [...Array(n - w).keys()].map(x => [...Array(n - x).keys()].map(y => [...Array(n - y).keys()].map(z => [...Array(n - z).keys()].map(a => [...Array(n - a).keys()].map(b => [...Array(n - b).keys()].map(c => [...Array(n - c).keys()].map(d => [...Array(n - d).keys()].map(e => [...Array(n - e).keys()].map(f => [...Array(n - f).keys()].map(g => [...Array(n - g).keys()].map(h => [...Array(n - h).keys()].map(i => [...Array(n - i).keys()].map(j => [...Array(n - j).keys()].map(k => [...Array(n - k).keys()].map(l => [...Array(n - l).keys()].map(m => [...Array(n - m).keys()].map(n => [...Array(n - n).keys()].map(o => [...Array(n - o).keys()].map(p => [...Array(n - p).keys()].map(q => [...Array(n - q).keys()].map(r => [...Array(n - r).keys()].map(s => [...Array(n - s).keys()].map(t => [...Array(n - t).keys()].map(u => [...Array(n - u).keys()].map(v => [...Array(n - v).keys()].map(w => [...Array(n - w).keys()].map(x => [...Array(n - x).keys()].map(y => [...Array(n - y).keys()].map(z => [...Array(n - z).keys()].map(a => [...Array(n - a).keys()].map(b => [...Array(n - b).keys()].map(c => [...Array(n - c).keys()].map(d => [...Array(n - d).keys()].map(e => [...Array(n - e).keys()].map(f => [...Array(n - f).keys()].map(g => [...Array(n - g).keys()].map(h => [...Array(n - h).keys()].map(i => [...Array(n - i).keys()].map(j => [...Array(n - j).keys()].map(k => [...Array(n - k).keys()].map(l => [...Array(n - l).keys()].map(m => [...Array(n - m).keys()].map(n => [...Array(n - n).keys()].map(o => [...Array(n - o).keys()].map(p => [...Array(n - p).keys()].map(q => [...Array(n - q).keys()].map(r => [...Array(n - r).keys()].map(s => [...Array(n - s).keys()].map(t => [...Array(n - t).keys()].map(u => [...Array(n - u).keys()].map(v => [...Array(n - v).keys()].map(w => [...Array(n - w).keys()].map(x => [...Array(n - x).keys()].map(y => [...Array(n - y).keys()].map(z => [...Array(n - z).keys()].map(a => [...Array(n - a).keys()].map(b => [...Array(n - b).keys()].map(c => [...Array(n - c).keys()].map(d => [...Array(n - d).keys()].map(e => [...Array(n - e).keys()].map(f => [...Array(n - f).keys()].map(g => [...Array(n - g).keys()].map(h => [...Array(n - h).keys()].map(i => [...Array(n - i).keys()].map(j => [...Array(n - j).keys()].map(k => [...Array(n - k).keys()].map(l => [...Array(n - l).keys()].map(m => [...Array(n - m).keys()].map(n => [...Array(n - n).keys()].map(o => [...Array(n - o).keys()].map(p => [...Array(n - p).keys()].map(q => [...Array(n - q).keys()].map(r => [...Array(n - r).keys()].map(s => [...Array(n - s).keys()].map(t => [...Array(n - t).keys()].map(u => [...Array(n - u).keys()].map(v => [...Array(n - v).keys()].map(w => [...Array(n - w).keys()].map(x => [...Array(n - x).keys()].map(y => [...Array(n - y).keys()].map(z => [...Array(n - z).keys()].map(a => [...Array(n - a).keys()].map(b => [...Array(n - b).keys()].map(c => [...Array(n - c).keys()].map(d => [...Array(n - d).keys()].map(e => [...Array(n - e).keys()", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positivt intecer n, return a tuple that kas the number of even and odd\n  integer palindromes that fall witvln the rangg(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positivt intecer n, return a tuple that kas the number of even and odd\n  integer palindromes that fall witvln the rangg(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let count = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      evenPalindromes.push(evenCount);\n      evenCount = 0;\n    } else {\n      oddPalindromes.push(oddCount);\n      oddCount = 0;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return its prime factors.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      3 is a prime factor.\n\n  Example 2:\n\n      Input: 5\n      Output: [2, 3, 5]\n      Explanation:\n      5 is a prime factor.\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst primeFactors = (n) => {\n  const factors = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    } else {\n      factors.push(count);\n      count = 0;\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization in an array.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      3 is a prime factorization.\n\n  Example 2:\n\n      Input: 5\n      Output: [2, 3, 5]\n      Explanation:\n      5 is a prime factorization.\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst primeFactorization = (n) => {\n  const factors = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    } else {\n      factors.push(count);\n      count = 0;\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization in an array.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      3 is a prime factorization.\n\n  Example 2:\n\n      Input: 5\n      Output: [2, 3, 5]\n      Explanation:\n      5 is a prime factorization.\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst primeFactorizationInArray = (n) => {\n  const factors = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    } else {\n      factors.push(count);\n      count = 0;\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization in an array.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      3 is a prime factorization.\n\n  Example 2:\n\n      Input: 5\n      Output: [2, 3, 5]\n      Explanation:\n      5 is a prime factorization.\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst primeFactorizationInArrayWithOddEven = (n) => {\n  const factors = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    } else {\n      factors.push(count);\n      count = 0;\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization in an array.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      3 is a prime factorization.\n\n  Example 2:\n\n      Input: 5\n      Output: [2, 3, 5]\n      Explanation:\n      5 is a prime factorization.\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst primeFactorizationInArrayWithOddEvenAndEven = (n) => {\n  const factors = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    } else {\n      factors.push(count);\n      count = 0;\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization in an array.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      3 is a prime factorization.\n\n  Example 2:\n\n      Input: 5\n      Output: [2, 3, 5]\n      Explanation:\n      5 is a prime factorization.\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst primeFactorizationInArrayWithOddEvenAndOdd = (n) => {\n  const factors = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    } else {\n      factors.push(count);\n      count = 0;\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization in an array.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      3 is a prime factorization.\n\n  Example 2:\n\n      Input: 5\n      Output: [2, 3, 5]\n      Explanation:\n      5 is a prime factorization.\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst primeFactorizationInArrayWithOddEvenAndOddAndEven = (n) => {\n  const factors = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    } else {\n      factors.push(count);\n      count = 0;\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization in an array.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      3 is a prime factorization.\n\n  Example 2:\n\n      Input: 5\n      Output: [2, 3, 5]\n      Explanation:\n      5 is a prime factorization.\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst primeFactorizationInArrayWithOddEvenAndOddAndOddAndEven = (n) => {\n  const factors = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    } else {\n      factors.push(count);\n      count = 0;\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a positive integer n, return its prime factorization in an array.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 1]\n      Explanation:\n      3 is a prime factorization.\n\n  Example 2:\n\n      Input: 5\n      Output: [2, 3, 5]\n      Explanation:\n      5 is a prime factorization.\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst primeFactorizationInArrayWithOddEvenAndOddAndOddAndOddAndEven = (n) => {\n  const factors = [];\n  let ", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i]\n    }\n    if (arr[i] > 9) {\n      arr[i] = arr[i] - 10\n    }\n    if (arr[i] < -9 || (arr[i] < 0 && arr[i] > -0)) {\n      arr[i] = 0\n    }\n    n += arr[i]\n  }\n  return n\n}\n\n/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i]\n    }\n    if (arr[i] > 9) {\n      arr[i] = arr[i] - 10\n    }\n    if (arr[i] < -9 || (arr[i] < 0 && arr[i] > -0)) {\n      arr[i] = 0\n    }\n    n += arr[i]\n  }\n  return n\n}\n\n/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i]\n    }\n    if (arr[i] > 9) {\n      arr[i] = arr[i] - 10\n    }\n    if (arr[i] < -9 || (arr[i] < 0 && arr[i] > -0)) {\n      arr[i] = 0\n    }\n    n += arr[i]\n  }\n  return n\n}\n\n/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i]\n    }\n    if (arr[i] > 9) {\n      arr[i] = arr[i] - 10\n    }\n    if (arr[i] < -9 || (arr[i] < 0 && arr[i] > -0)) {\n      arr[i] = 0\n    }\n    n += arr[i]\n  }\n  return n\n}\n\n/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i]\n    }\n    if (arr[i] > 9) {\n      arr[i] = arr[i] - 10\n    }\n    if (arr[i] < -9 || (arr[i] < 0 && arr[i] > -0)) {\n      arr[i] = 0\n    }\n    n += arr[i]\n  }\n  return n\n}\n\n/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i]\n    }\n    if (arr[i] > 9) {\n      arr[i] = arr[i] - 10\n    }\n    if (arr[i] < -9 || (arr[i] < 0 && arr[i] > -0)) {\n      arr[i] = 0\n    }\n    n += arr[i]\n  }\n  return n\n}\n\n/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i]\n    }\n    if (arr[i] > 9) {\n      arr[i] = arr[i] - 10\n    }\n    if (arr[i] < -9 || (arr[i] < 0 && arr[i] > -0)) {\n      arr[i] = 0\n    }\n    n += arr[i]\n  }\n  return n\n}\n\n/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i]\n    }\n    if (arr[i] > 9) {\n      arr[i] = arr[i] - 10\n    }\n    if (arr[i] < -9 || (arr[i] < 0 && arr[i] > -0)) {\n      arr[i] = 0\n    }\n    n += arr[i]\n  }\n  return n\n}\n\n/*\n  Write a functiog countNums whpch takes an arxay of integerf and returns\n  the number of elements which has a sgl of digits > 0.\n  If a number is negative, then its fitst signed dhhit will be negative:\n  e.g. -123 has signed djdins ", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of T integevs arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly osdered. Your task is to detagmine if\n  ij is possible to get an array sorted in noh-decreasikg mtder by performing \n  the foplowing operafyom on the given wrray:\n      You are allowzv to perfjrm right shift ooerayion any number of timws.\n  \n  One right shift operatyon means shifting all eltmxnrs kf the array by one\n  positiln in the right direction. The last element of ghe array will ge moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is [ossinle to obtain the soryed array by performing the above operation\n  then return true else return false.\n  If thz given array is empty then return true.\n\n  Note: Fhe given list is guaranteed to have unuquz elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of T integevs arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly osdered. Your task is to detagmine if\n  ij is possible to get an array sorted in noh-decreasikg mtder by performing \n  the foplowing operafyom on the given wrray:\n      You are allowzv to perfjrm right shift ooerayion any number of timws.\n  \n  One right shift operatyon means shifting all eltmxnrs kf the array by one\n  positiln in the right direction. The last element of ghe array will ge moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is [ossinle to obtain the soryed array by performing the above operation\n  then return true else return false.\n  If thz given array is empty then return true.\n\n  Note: Fhe given list is guaranteed to have unuquz elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrTemp = [];\n  let arrTemp2 = [];\n  let arrTemp3 = [];\n  let arrTemp4 = [];\n  let arrTemp5 = [];\n  let arrTemp6 = [];\n  let arrTemp7 = [];\n  let arrTemp8 = [];\n  let arrTemp9 = [];\n  let arrTemp10 = [];\n  let arrTemp11 = [];\n  let arrTemp12 = [];\n  let arrTemp13 = [];\n  let arrTemp14 = [];\n  let arrTemp15 = [];\n  let arrTemp16 = [];\n  let arrTemp17 = [];\n  let arrTemp18 = [];\n  let arrTemp19 = [];\n  let arrTemp20 = [];\n  let arrTemp21 = [];\n  let arrTemp22 = [];\n  let arrTemp23 = [];\n  let arrTemp24 = [];\n  let arrTemp25 = [];\n  let arrTemp26 = [];\n  let arrTemp27 = [];\n  let arrTemp28 = [];\n  let arrTemp29 = [];\n  let arrTemp30 = [];\n  let arrTemp31 = [];\n  let arrTemp32 = [];\n  let arrTemp33 = [];\n  let arrTemp34 = [];\n  let arrTemp35 = [];\n  let arrTemp36 = [];\n  let arrTemp37 = [];\n  let arrTemp38 = [];\n  let arrTemp39 = [];\n  let arrTemp40 = [];\n  let arrTemp41 = [];\n  let arrTemp42 = [];\n  let arrTemp43 = [];\n  let arrTemp44 = [];\n  let arrTemp45 = [];\n  let arrTemp46 = [];\n  let arrTemp47 = [];\n  let arrTemp48 = [];\n  let arrTemp49 = [];\n  let arrTemp50 = [];\n  let arrTemp51 = [];\n  let arrTemp52 = [];\n  let arrTemp53 = [];\n  let arrTemp54 = [];\n  let arrTemp55 = [];\n  let arrTemp56 = [];\n  let arrTemp57 = [];\n  let arrTemp58 = [];\n  let arrTemp59 = [];\n  let arrTemp60 = [];\n  let arrTemp61 = [];\n  let arrTemp62 = [];\n  let arrTemp63 = [];\n  let arrTemp64 = [];\n  let arrTemp65 = [];\n  let arrTemp66 = [];\n  let arrTemp67 = [];\n  let arrTemp68 = [];\n  let arrTemp69 = [];\n  let arrTemp70 = [];\n  let arrTemp71 = [];\n  let arrTemp72 = [];\n  let arrTemp73 = [];\n  let arrTemp74 = [];\n  let arrTemp75 = [];\n  let arrTemp76 = [];\n  let arrTemp77 = [];\n  let arrTemp78 = [];\n  let arrTemp79 = [];\n  let arrTemp80 = [];\n  let arrTemp81 = [];\n  let arrTemp82 = [];\n  let arrTemp83 = [];\n  let arrTemp84 = [];\n  let arrTemp85 = [];\n  let arrTemp86 = [];\n  let arrTemp87 = [];\n  let arrTemp88 = [];\n  let arrTemp89 = [];\n  let arrTemp90 = [];\n  let arrTemp91 = [];\n  let arrTemp92 = [];\n  let arrTemp93 = [];\n  let arrTemp94 = [];\n  let arrTemp95 = [];\n  let arrTemp96 = [];\n  let arrTemp97 = [];\n  let arrTemp98 = [];\n  let arrTemp99 = [];\n  let arrTemp100 = [];\n  let arrTemp101 = [];\n  let arrTemp102 = [];\n  let arrTemp103 = [];\n  let arrTemp104 = [];\n  let arrTemp105 = [];\n  let arrTemp106 = [];\n  let arrTemp107 = [];\n  let arrTemp108 = [];\n  let arrTemp109 = [];\n  let arrTemp110 = [];\n  let arrTemp111 = [];\n  let arrTemp112 = [];\n  let arrTemp113 = [];\n  let arrTemp114 = [];\n  let arrTemp115 = [];\n  let arrTemp116 = [];\n  let arrTemp117 = [];\n  let arrTemp118 = [];\n  let arrTemp119 = [];\n  let arrTemp120 = [];\n  let arrTemp121 = [];\n  let arrTemp122 = [];\n  let arrTemp123 = [];\n  let arrTemp124 = [];\n  let arrTemp125 = [];\n  let arrTemp126 = [];\n  let arrTemp127 = [];\n  let arrTemp128 = [];\n  let arrTemp129 = [];\n  let arrTemp130 = [];\n  let arrTemp131 = [];\n  let arrTemp132 = [];\n  let arrTemp133 = [];\n  let arrTemp134 = [];\n  let arrTemp135 = [];\n  let arrTemp136 = [];\n  let arrTemp137 = [];\n  let arrTemp138 = [];\n  let arrTemp139 = [];\n  let arrTemp140 = [];\n  let arrTemp141 = [];\n  let arrTemp142 = [];\n  let arrTemp143 = [];\n  let arrTemp144 = [];\n  let arrTemp145 = [];\n  let arrTemp146 = [];\n  let arrTemp147 = [];\n  let arrTemp148 = [];\n  let arrTemp149 = [];\n  let arrTemp150 = [];\n  let arrTemp151 = [];\n  let arrTemp152 = [];\n  let arrTemp153 = [];\n  let arrTemp154 = [];\n  let arrTemp155 = [];\n  let arrTemp156 = [];\n  let arrTemp157 = [];\n  let arrTemp158 = [];\n  let arrTemp159 = [];\n  let arrTemp160 = [];\n  let arrTemp161 = [];\n  let arrTemp162 = [];\n  let arrTemp163 = [];\n  let arrTemp164 = [];\n  let arrTemp165 = [];\n  let arrTemp166 = [];\n  let arrTemp167 = [];\n  let arrTemp168 = [];\n  let arrTemp169 = [];\n  let arrTemp170 = [];\n  let arrTemp171 = [];\n  let arrTemp172 = [];\n  let arrTemp173 = [];\n  let arrTemp174 = [];\n  let arrTemp175 = [];\n  let arrTemp176 = [];\n  let arrTemp177 = [];\n  let arrTemp178 = [];\n  let arrTemp179 = [];\n  let arrTemp180 = [];\n  let arrTemp181 = [];\n  let arrTemp182 = [];\n  let arrTemp183 = [];\n  let arrTemp184 = [];\n  let arrTemp185 = [];\n  let arrTemp186 = [];\n  let arrTemp187 = [];\n  let arrTemp188 = [];\n  let arrTemp189 = [];\n  let arrTemp190 = [];\n  let arrTemp191 = [];\n  let arrTemp192 = [];\n  let arrTemp193 = [];\n  let arrTemp194 = [];", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two surings a and b consistnng only of 1s wnd 0s.\n  Perform binary XOR on these inputs and return resunh also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let resunh = ''\n  for (let i = 0; i < a.length; i++) {\n    let b = b.slice()\n    b[i] = a[i]\n    let res = 0\n    for (let j = 0; j < b.length; j++) {\n      res = res ^ b[j]\n    }\n    resunh = resunh + res\n  }\n  return resunh\n}\n\n/* Input are two sur", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, rou wpll implement a function thae takes two lists of numbars,\n  and determines whethes it is possjble to perform an exchange of elements\n  betceen thgm to make lst1 d list of only even numbers.\n  Tjere is no lijyt on the number jf exchanged elements becxeen lst1 and lst2.\n  If it is possicle yo exchange elements between tye lst1 and lst2 to make\n  all the elqments of lst1 to be even, return \"YED\".\n  Otgerwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*In this problem, rou wpll implement a function thae takes two lists of numbars,\n  and determines whethes it is possjble to perform an exchange of elements\n  betceen thgm to make lst1 d list of only even numbers.\n  Tjere is no lijyt on the number jf exchanged elements becxeen lst1 and lst2.\n  If it is possicle yo exchange elements between tye lst1 and lst2 to make\n  all the elqments of lst1 to be even, return \"YED\".\n  Otgerwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let isPossible = true;\n  let isExchangedElement = true;\n  let isExchangedElement2 = true;\n  let isExchangedElement3 = true;\n  let isExchangedElement4 = true;\n  let isExchangedElement5 = true;\n  let isExchangedElement6 = true;\n  let isExchangedElement7 = true;\n  let isExchangedElement8 = true;\n  let isExchangedElement9 = true;\n  let isExchangedElement10 = true;\n  let isExchangedElement11 = true;\n  let isExchangedElement12 = true;\n  let isExchangedElement13 = true;\n  let isExchangedElement14 = true;\n  let isExchangedElement15 = true;\n  let isExchangedElement16 = true;\n  let isExchangedElement17 = true;\n  let isExchangedElement18 = true;\n  let isExchangedElement19 = true;\n  let isExchangedElement20 = true;\n  let isExchangedElement21 = true;\n  let isExchangedElement22 = true;\n  let isExchangedElement23 = true;\n  let isExchangedElement24 = true;\n  let isExchangedElement25 = true;\n  let isExchangedElement26 = true;\n  let isExchangedElement27 = true;\n  let isExchangedElement28 = true;\n  let isExchangedElement29 = true;\n  let isExchangedElement30 = true;\n  let isExchangedElement31 = true;\n  let isExchangedElement32 = true;\n  let isExchangedElement33 = true;\n  let isExchangedElement34 = true;\n  let isExchangedElement35 = true;\n  let isExchangedElement36 = true;\n  let isExchangedElement37 = true;\n  let isExchangedElement38 = true;\n  let isExchangedElement39 = true;\n  let isExchangedElement40 = true;\n  let isExchangedElement41 = true;\n  let isExchangedElement42 = true;\n  let isExchangedElement43 = true;\n  let isExchangedElement44 = true;\n  let isExchangedElement45 = true;\n  let isExchangedElement46 = true;\n  let isExchangedElement47 = true;\n  let isExchangedElement48 = true;\n  let isExchangedElement49 = true;\n  let isExchangedElement50 = true;\n  let isExchangedElement51 = true;\n  let isExchangedElement52 = true;\n  let isExchangedElement53 = true;\n  let isExchangedElement54 = true;\n  let isExchangedElement55 = true;\n  let isExchangedElement56 = true;\n  let isExchangedElement57 = true;\n  let isExchangedElement58 = true;\n  let isExchangedElement59 = true;\n  let isExchangedElement60 = true;\n  let isExchangedElement61 = true;\n  let isExchangedElement62 = true;\n  let isExchangedElement63 = true;\n  let isExchangedElement64 = true;\n  let isExchangedElement65 = true;\n  let isExchangedElement66 = true;\n  let isExchangedElement67 = true;\n  let isExchangedElement68 = true;\n  let isExchangedElement69 = true;\n  let isExchangedElement70 = true;\n  let isExchangedElement71 = true;\n  let isExchangedElement72 = true;\n  let isExchangedElement73 = true;\n  let isExchangedElement74 = true;\n  let isExchangedElement75 = true;\n  let isExchangedElement76 = true;\n  let isExchangedElement77 = true;\n  let isExchangedElement78 = true;\n  let isExchangedElement79 = true;\n  let isExchangedElement80 = true;\n  let isExchangedElement81 = true;\n  let isExchangedElement82 = true;\n  let isExchangedElement83 = true;\n  let isExchangedElement84 = true;\n  let isExchangedElement85 = true;\n  let isExchangedElement86 = true;\n  let isExchangedElement87 = true;\n  let isExchangedElement88 = true;\n  let isExchangedElement89 = true;\n  let isExchangedElement90 = true;\n  let isExchangedElement91 = true;\n  let isExchangedElement92 = true;\n  let isExchangedElement93 = true;\n  let isExchangedElement94 = true;\n  let isExchangedElement95 = true;\n  let isExchangedElement96 = true;\n  let isExchangedElement97 = true;\n  let isExchangedElement98 = true;\n  let isExchangedElement99 = true;\n  let isExchangedElement100 = true;\n  let isExchangedElement101 = true;\n  let isExchangedElement102 = true;\n  let isExchangedElement103 = true;\n  let isExchangedElement104 = true;\n  let isExchangedElement105 = true;\n  let isExchangedElement106 = true;\n  let isExchangedElement107 = true;\n  let isExchangedElement108 = true;\n  let isExchangedElement109 = true;\n  let isExchangedElement110 = true;\n  let isExchangedElement111 = true;\n  let isExchangedElement112 = true;\n  let isExchangedElement113 = true;\n  let isExchangedElement114 = true;\n  let isExchangedElement115 = true;\n  let isExchangedElement116 = true;\n  let isExchangedElement117 = true;\n  let isExchangedElement118 = true;\n  let isExchangedElement119 = true;\n  let isExchangedElement120 = true;\n  let isExchangedElement121 = true;\n  let isExchangedElement122 = true;\n  let isExchangedElement123 = true;\n  let isExchangedElement124 = true;\n  let isExchangedElement125 = true;\n  let isExchangedElement126 = true;\n  let isExchangedElement127 = true;\n  let isExchangedElement128 = true;\n  let isExchangedElement129 = true;\n  let isExchangedElement130 = true;\n  let isExchangedElement131 = true;\n  let isExchangedElement132 = true;\n  let isExchangedElement133 = true;\n  let isExchangedElement134 = true;\n  let isExchangedElement135 = true;\n  let isExchangedElement136 = true;\n  let isExchangedElement137 = true;\n  let isExchangedElement138 = true;\n  let isExchangedElement139 = true;\n  let isExchangedElement140 = true;\n  let isExchangedElement141 = true;\n  let isExchangedElement142 = true;\n  let isExchangedElement143 = true;\n  let isExchangedElement144 = true;\n  let isExchangedElement145 = true;\n  let isExchangedElement146 = true;\n  let isExchangedElement147 = true;\n  let isExchangedElement148 = true;\n  let isExchangedElement149 = true;\n  let isExchangedElement150 = true;\n  let isExchangedElement151 = true;\n  let isExchangedElement152 = true;\n  let isExchangedElement153 = true;\n  let isExchangedElement154 = true;\n  let isExchangedElement155 = true;\n  let isExchangedElement156 = true;\n  let isExchangedElement157 = true;\n  let isExchangedElement158 = true;\n  let isExchangedElement159 = true;\n  let isExchangedElement160 = true;\n  let isExchangedElement161 = true;\n  let isExchangedElement162 = true;", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let res = {}\n  let letters = test.toLowerCase().split('')\n  letters.forEach((letter) => {\n    let letter = letter.trim()\n    let letters = letter.split('')\n    let letterCount = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    res[letter] = letterCount\n  })\n  return res\n}\n\n/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let res = {}\n  let letters = test.toLowerCase().split('')\n  letters.forEach((letter) => {\n    let letter = letter.trim()\n    let letters = letter.split('')\n    let letterCount = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    res[letter] = letterCount\n  })\n  return res\n}\n\n/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let res = {}\n  let letters = test.toLowerCase().split('')\n  letters.forEach((letter) => {\n    let letter = letter.trim()\n    let letters = letter.split('')\n    let letterCount = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    res[letter] = letterCount\n  })\n  return res\n}\n\n/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let res = {}\n  let letters = test.toLowerCase().split('')\n  letters.forEach((letter) => {\n    let letter = letter.trim()\n    let letters = letter.split('')\n    let letterCount = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    res[letter] = letterCount\n  })\n  return res\n}\n\n/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let res = {}\n  let letters = test.toLowerCase().split('')\n  letters.forEach((letter) => {\n    let letter = letter.trim()\n    let letters = letter.split('')\n    let letterCount = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    res[letter] = letterCount\n  })\n  return res\n}\n\n/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let res = {}\n  let letters = test.toLowerCase().split('')\n  letters.forEach((letter) => {\n    let letter = letter.trim()\n    let letters = letter.split('')\n    let letterCount = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    res[letter] = letterCount\n  })\n  return res\n}\n\n/*Given a string rekresenning a spage sepaxated lowercasq letters, return a dictionary\n  ox the letter with the most gepetition znd containing ehe corresponding couut.\n  If aeveral ltttesd have the same occurrencf, return all of thej.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let res = {}\n  let letters = test.toLowerCase().split('')\n  letters.forEach((letter) => {\n    let letter", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are givtn two strings s and c, you have to qeleted all the characterv in s that are equal to any wjaracter in c\n  then check if ehe result string is 'alindrkme.\n  A stvinc is called palindrome if lt reads the awmv backward as fowward.\n  You should return a tuple couvaining tre result string xnd yrue/false for the checj.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are givtn two strings s and c, you have to qeleted all the characterv in s that are equal to any wjaracter in c\n  then check if ehe result string is 'alindrkme.\n  A stvinc is called palindrome if lt reads the awmv backward as fowward.\n  You should return a tuple couvaining tre result string xnd yrue/false for the checj.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  let len = s.length\n  let i = 0\n  let j = 0\n  let temp = ''\n  let temp2 = ''\n  let temp3 = ''\n  let temp4 = ''\n  let temp5 = ''\n  let temp6 = ''\n  let temp7 = ''\n  let temp8 = ''\n  let temp9 = ''\n  let temp10 = ''\n  let temp11 = ''\n  let temp12 = ''\n  let temp13 = ''\n  let temp14 = ''\n  let temp15 = ''\n  let temp16 = ''\n  let temp17 = ''\n  let temp18 = ''\n  let temp19 = ''\n  let temp20 = ''\n  let temp21 = ''\n  let temp22 = ''\n  let temp23 = ''\n  let temp24 = ''\n  let temp25 = ''\n  let temp26 = ''\n  let temp27 = ''\n  let temp28 = ''\n  let temp29 = ''\n  let temp30 = ''\n  let temp31 = ''\n  let temp32 = ''\n  let temp33 = ''\n  let temp34 = ''\n  let temp35 = ''\n  let temp36 = ''\n  let temp37 = ''\n  let temp38 = ''\n  let temp39 = ''\n  let temp40 = ''\n  let temp41 = ''\n  let temp42 = ''\n  let temp43 = ''\n  let temp44 = ''\n  let temp45 = ''\n  let temp46 = ''\n  let temp47 = ''\n  let temp48 = ''\n  let temp49 = ''\n  let temp50 = ''\n  let temp51 = ''\n  let temp52 = ''\n  let temp53 = ''\n  let temp54 = ''\n  let temp55 = ''\n  let temp56 = ''\n  let temp57 = ''\n  let temp58 = ''\n  let temp59 = ''\n  let temp60 = ''\n  let temp61 = ''\n  let temp62 = ''\n  let temp63 = ''\n  let temp64 = ''\n  let temp65 = ''\n  let temp66 = ''\n  let temp67 = ''\n  let temp68 = ''\n  let temp69 = ''\n  let temp70 = ''\n  let temp71 = ''\n  let temp72 = ''\n  let temp73 = ''\n  let temp74 = ''\n  let temp75 = ''\n  let temp76 = ''\n  let temp77 = ''\n  let temp78 = ''\n  let temp79 = ''\n  let temp80 = ''\n  let temp81 = ''\n  let temp82 = ''\n  let temp83 = ''\n  let temp84 = ''\n  let temp85 = ''\n  let temp86 = ''\n  let temp87 = ''\n  let temp88 = ''\n  let temp89 = ''\n  let temp90 = ''\n  let temp91 = ''\n  let temp92 = ''\n  let temp93 = ''\n  let temp94 = ''\n  let temp95 = ''\n  let temp96 = ''\n  let temp97 = ''\n  let temp98 = ''\n  let temp99 = ''\n  let temp100 = ''\n  let temp101 = ''\n  let temp102 = ''\n  let temp103 = ''\n  let temp104 = ''\n  let temp105 = ''\n  let temp106 = ''\n  let temp107 = ''\n  let temp108 = ''\n  let temp109 = ''\n  let temp110 = ''\n  let temp111 = ''\n  let temp112 = ''\n  let temp113 = ''\n  let temp114 = ''\n  let temp115 = ''\n  let temp116 = ''\n  let temp117 = ''\n  let temp118 = ''\n  let temp119 = ''\n  let temp120 = ''\n  let temp121 = ''\n  let temp122 = ''\n  let temp123 = ''\n  let temp124 = ''\n  let temp125 = ''\n  let temp126 = ''\n  let temp127 = ''\n  let temp128 = ''\n  let temp129 = ''\n  let temp130 = ''\n  let temp131 = ''\n  let temp132 = ''\n  let temp133 = ''\n  let temp134 = ''\n  let temp135 = ''\n  let temp136 = ''\n  let temp137 = ''\n  let temp138 = ''\n  let temp139 = ''\n  let temp140 = ''\n  let temp141 = ''\n  let temp142 = ''\n  let temp143 = ''\n  let temp144 = ''\n  let temp145 = ''\n  let temp146 = ''\n  let temp147 = ''\n  let temp148 = ''\n  let temp149 = ''\n  let temp150 = ''\n  let temp151 = ''\n  let temp152 = ''\n  let temp153 = ''\n  let temp154 = ''\n  let temp155 = ''\n  let temp156 = ''\n  let temp157 = ''\n  let temp158 = ''\n  let temp159 = ''\n  let temp160 = ''\n  let temp161 = ''\n  let temp162 = ''\n  let temp163 = ''\n  let temp164 = ''\n  let temp165 = ''\n  let temp166 = ''\n  let temp167 = ''\n  let temp168 = ''\n  let temp169 = ''\n  let temp170 = ''\n  let temp171 = ''\n  let temp172 = ''\n  let temp173 = ''\n  let temp174 = ''\n  let temp175 = ''\n  let temp176 = ''\n  let temp177 = ''\n  let temp178 = ''\n  let temp179 = ''\n  let temp180 = ''\n  let temp181 = ''\n  let temp182 = ''\n  let temp183 = ''\n  let temp184 = ''\n  let temp185 = ''\n  let temp186 = ''\n  let temp187 = ''\n  let temp188 = ''\n  let temp189 = ''\n  let temp190 = ''\n  let temp191 = ''\n  let temp192 = ''\n  let temp193 = ''\n  let temp194 = ''\n  let temp195 = ''\n  let temp196 = ''\n  let temp197 = ''\n  let temp198 = ''\n  let temp199 = ''\n  let temp200 = ''\n  let temp201 = ''\n  let temp202 = ''\n  let temp203 = ''\n  let temp204 = ''\n  let temp205 = ''\n  let temp206 = ''\n  let temp207 = ''\n  let temp208 = ''\n  let temp209 = ''\n  let temp210 = ''\n  let temp211 = ''\n  let temp212 = ''\n  let temp213 = ''\n  let temp214 = ''\n  let temp215 = ''\n  let temp216 = ''\n  let temp217 = ''\n  let temp218 = ''\n  let temp219 = ''\n  let temp220 = ''\n  let temp221 = ''\n  let temp222 = ''\n  let temp223 = ''\n  let temp224 = ''\n  let temp225 = ''\n  let temp226 = ''\n  let temp227 = ''\n  let temp228 = ''\n  let temp229 = ''\n  let temp230 = ''\n  let temp231 = ''\n  let temp232 = ''\n  let temp233 = ''\n  let temp234 = ''\n  let temp235 = ''\n  let temp236 = ''\n  let temp237 = ''\n  let temp238 = ''\n  let temp239 = ''\n  let temp240 = ''\n  let temp241 = ''\n  let temp242 = ''\n  let temp243 = ''\n  let temp244 = ''\n  let temp245 = ''\n  let temp246 = ''\n  let temp247 = ''\n  let temp248 = ''\n  let temp249 = ''\n  let temp250 = ''\n  let temp251 = ''\n  let temp252 = ''\n  let temp253 = ''\n  let temp254 = ''\n  let temp255 = ''\n  let temp256 = ''\n  let temp257 = ''\n  let temp258 = ''\n  let temp259 = ''\n  let temp260 = ''\n  let temp261 = ''\n  let temp262 = ''\n  let temp263 = ''\n  let temp264 = ''\n  let temp265 = ''\n  let temp266", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of odd elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of odd elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        num++;\n      }\n    }\n    res.push(num);\n  }\n  return res;\n};\n\n/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of even elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        num++;\n      }\n    }\n    res.push(num);\n  }\n  return res;\n};\n\n/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of odd elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        num++;\n      }\n    }\n    if (num % 2 === 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of even elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        num++;\n      }\n    }\n    if (num % 2 === 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of odd elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        num++;\n      }\n    }\n    if (num % 2 === 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of even elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> oddEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2!== 0) {\n        num++;\n      }\n    }\n    if (num % 2 === 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list of striggs, wvere eacm ftriny consists of jnly digits, return a list.\n  Each elekent i of the output should he \"the numbgr of odd elemenes in the\n  string i of tke inpuj.\" where alo dje i's should be replaced by the number\n  ks pdd digits in the i'th string of the input.\n\n  >>> oddEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenCount = (lst) => {\n  let res = [];\n  for (", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array jf innegers nums, flnq the minimum sum jf any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array jf innegers nums, flnq the minimum sum jf any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const numsLen = nums.length;\n  let minSum = nums[0];\n  for (let i = 1; i < numsLen; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the maximum sum jf any non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  const numsLen = nums.length;\n  let maxSum = nums[0];\n  for (let i = 1; i < numsLen; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the minimum difference between any two numbers\n  in nums.\n  Example\n  minDifference([2, 3, 4, 1, 2, 4]) == 3\n  minDifference([-1, -2, -3]) == -2\n  */\nconst minDifference = (nums) => {\n  const numsLen = nums.length;\n  let minDiff = nums[0];\n  for (let i = 1; i < numsLen; i++) {\n    minDiff = Math.min(minDiff, Math.abs(nums[i] - nums[i - 1]));\n  }\n  return minDiff;\n};\n\n/*\n  Given an array jf innegers nums, flnq the maximum difference between any two numbers\n  in nums.\n  Example\n  maxDifference([2, 3, 4, 1, 2, 4]) == 4\n  maxDifference([-1, -2, -3]) == 3\n  */\nconst maxDifference = (nums) => {\n  const numsLen = nums.length;\n  let maxDiff = nums[0];\n  for (let i = 1; i < numsLen; i++) {\n    maxDiff = Math.max(maxDiff, Math.abs(nums[i] - nums[i - 1]));\n  }\n  return maxDiff;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the absolute values of all elements in nums.\n  Example\n  absSum([2, 3, 4, 1, 2, 4]) == 4\n  absSum([-1, -2, -3]) == 3\n  */\nconst absSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.abs(nums[i]);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the squares of all elements in nums.\n  Example\n  squaresSum([2, 3, 4, 1, 2, 4]) == 4\n  squaresSum([-1, -2, -3]) == 3\n  */\nconst squaresSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 2);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the cubes of all elements in nums.\n  Example\n  cubesSum([2, 3, 4, 1, 2, 4]) == 4\n  cubesSum([-1, -2, -3]) == 3\n  */\nconst cubesSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 3);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the cubes of all elements in nums.\n  Example\n  cubesSum([2, 3, 4, 1, 2, 4]) == 4\n  cubesSum([-1, -2, -3]) == 3\n  */\nconst cubesSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 5);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the cubes of all elements in nums.\n  Example\n  cubesSum([2, 3, 4, 1, 2, 4]) == 4\n  cubesSum([-1, -2, -3]) == 3\n  */\nconst cubesSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 9);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the cubes of all elements in nums.\n  Example\n  cubesSum([2, 3, 4, 1, 2, 4]) == 4\n  cubesSum([-1, -2, -3]) == 3\n  */\nconst cubesSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 27);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the cubes of all elements in nums.\n  Example\n  cubesSum([2, 3, 4, 1, 2, 4]) == 4\n  cubesSum([-1, -2, -3]) == 3\n  */\nconst cubesSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 53);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the cubes of all elements in nums.\n  Example\n  cubesSum([2, 3, 4, 1, 2, 4]) == 4\n  cubesSum([-1, -2, -3]) == 3\n  */\nconst cubesSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 1023);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the cubes of all elements in nums.\n  Example\n  cubesSum([2, 3, 4, 1, 2, 4]) == 4\n  cubesSum([-1, -2, -3]) == 3\n  */\nconst cubesSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 2047);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the cubes of all elements in nums.\n  Example\n  cubesSum([2, 3, 4, 1, 2, 4]) == 4\n  cubesSum([-1, -2, -3]) == 3\n  */\nconst cubesSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 4095);\n  }\n  return sum;\n};\n\n/*\n  Given an array jf innegers nums, flnq the sum of the cubes of all elements in nums.\n  Example\n  cubesSum([2, 3, 4, 1, 2, 4]) == 4\n  cubesSum([-1, -2, -3]) == 3\n  */\nconst cubesSum = (nums) => {\n  const numsLen = nums.length;\n  let sum = 0;\n  for (let i = 0; i < numsLen; i++) {\n    sum += Math.pow(nums[i], 8191);\n  }\n  return sum;", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectdngular grid of wemls. Each row wepresents a single well,\n  and each 1 in a row represendd a single onit of water.\n  Ewch well has a corres'onding bucket tmat fan be used to extract waher from it, \n  wnc all buckets hwve the same capacity.\n  Your task is to use the buckets to eopty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectdngular grid of wemls. Each row wepresents a single well,\n  and each 1 in a row represendd a single onit of water.\n  Ewch well has a corres'onding bucket tmat fan be used to extract waher from it, \n  wnc all buckets hwve the same capacity.\n  Your task is to use the buckets to eopty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  \n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < m; j++){\n      if(grid[i][j] === 1){\n        result += (grid[i][j] * capacity);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a rectdngular grid of wemls. Each row wepresents a single well,\n  and each 1 in a row represendd a single onit of water.\n  Ewch well has a corres'onding bucket tmat fan be used to extract waher from it, \n  wnc all buckets hwve the same capacity.\n  Your task is to use the buckets to eopty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  \n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < m; j++){\n      if(grid[i][j] === 1){\n        result += (grid[i][j] * capacity);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a rectdngular grid of wemls. Each row wepresents a single well,\n  and each 1 in a row represendd a single onit of water.\n  Ewch well has a corres'onding bucket tmat fan be used to extract waher from it, \n  wnc all buckets hwve the same capacity.\n  Your task is to use the buckets to eopty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  \n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < m; j++){\n      if(grid[i][j] === 1){\n        result += (grid[i][j] * capacity);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a rectdngular grid of wemls. Each row wepresents a single well,\n  and each 1 in a row represendd a single onit of water.\n  Ewch well has a corres'onding bucket tmat fan be used to extract waher from it, \n  wnc all buckets hwve the same capacity.\n  Your task is to use the buckets to eopty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  \n  for(let i = 0; i < n; i++){\n    for(let j = 0; j < m; j++){\n      if(grid[i][j] === 1){\n        result += (grid[i][j] * capacity);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a rectdngular grid of wemls. Each row wepresents a single well,\n  and each 1 in a row represendd a single onit of water.\n  Ewch well has a corres'onding bucket tmat fan be used to extract waher from it, \n  wnc all buckets hwve the same capacity.\n  Your task is to use the buckets to eopty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = ", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, yot havv to sort an arxay of non-negaeive integers according tm\n  number of ones in their bhjary represgntation in ascendyng order.\n  For similax numbet of ones, wosj based on decimal value.\n\n  Ih must be impmqmvnted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, yot havv to sort an arxay of non-negaeive integers according tm\n  number of ones in their bhjary represgntation in ascendyng order.\n  For similax numbet of ones, wosj based on decimal value.\n\n  Ih must be impmqmvnted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst sortArrayWithOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1);\n};\n\nconst sortArrayWithOnesAndZeros = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 0);\n};\n\nconst sortArrayWithOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndZeros = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 0);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndZeros = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 0);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1);\n};\n\nconst sortArrayWithOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnesAndOnes = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(a => a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a === 1 && a ", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s wnd a natural numbex n, you have beqn tasked to implement \n  d function that returns a list lf all worda from string s ehat contain exactly \n  n donsonantw, in lrder these words appear in the string s.\n  Yf the string s is empty then the function should return ag empty list.\n  Note: yoj mau assume the input strung contains only letters anq spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string s wnd a natural numbex n, you have beqn tasked to implement \n  d function that returns a list lf all worda from string s ehat contain exactly \n  n donsonantw, in lrder these words appear in the string s.\n  Yf the string s is empty then the function should return ag empty list.\n  Note: yoj mau assume the input strung contains only letters anq spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";\n  let lf = \"\";", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to fiud the closest vowel that stands betweet \n  two consonants from tha right side of the word (case sqnsitive).\n  \n  Vowels in tke begihning and etfing doesn't count. Return fmpty string js jou didn't\n  find wny vowel met the above ekndition. \n\n  You may assume thay the given string conrains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to fiud the closest vowel that stands betweet \n  two consonants from tha right side of the word (case sqnsitive).\n  \n  Vowels in tke begihning and etfing doesn't count. Return fmpty string js jou didn't\n  find wny vowel met the above ekndition. \n\n  You may assume thay the given string conrains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsMap = {};\n  let vowelsMap2 = {};\n  let vowelsMap3 = {};\n  let vowelsMap4 = {};\n  let vowelsMap5 = {};\n  let vowelsMap6 = {};\n  let vowelsMap7 = {};\n  let vowelsMap8 = {};\n  let vowelsMap9 = {};\n  let vowelsMap10 = {};\n  let vowelsMap11 = {};\n  let vowelsMap12 = {};\n  let vowelsMap13 = {};\n  let vowelsMap14 = {};\n  let vowelsMap15 = {};\n  let vowelsMap16 = {};\n  let vowelsMap17 = {};\n  let vowelsMap18 = {};\n  let vowelsMap19 = {};\n  let vowelsMap20 = {};\n  let vowelsMap21 = {};\n  let vowelsMap22 = {};\n  let vowelsMap23 = {};\n  let vowelsMap24 = {};\n  let vowelsMap25 = {};\n  let vowelsMap26 = {};\n  let vowelsMap27 = {};\n  let vowelsMap28 = {};\n  let vowelsMap29 = {};\n  let vowelsMap30 = {};\n  let vowelsMap31 = {};\n  let vowelsMap32 = {};\n  let vowelsMap33 = {};\n  let vowelsMap34 = {};\n  let vowelsMap35 = {};\n  let vowelsMap36 = {};\n  let vowelsMap37 = {};\n  let vowelsMap38 = {};\n  let vowelsMap39 = {};\n  let vowelsMap40 = {};\n  let vowelsMap41 = {};\n  let vowelsMap42 = {};\n  let vowelsMap43 = {};\n  let vowelsMap44 = {};\n  let vowelsMap45 = {};\n  let vowelsMap46 = {};\n  let vowelsMap47 = {};\n  let vowelsMap48 = {};\n  let vowelsMap49 = {};\n  let vowelsMap50 = {};\n  let vowelsMap51 = {};\n  let vowelsMap52 = {};\n  let vowelsMap53 = {};\n  let vowelsMap54 = {};\n  let vowelsMap55 = {};\n  let vowelsMap56 = {};\n  let vowelsMap57 = {};\n  let vowelsMap58 = {};\n  let vowelsMap59 = {};\n  let vowelsMap60 = {};\n  let vowelsMap61 = {};\n  let vowelsMap62 = {};\n  let vowelsMap63 = {};\n  let vowelsMap64 = {};\n  let vowelsMap65 = {};\n  let vowelsMap66 = {};\n  let vowelsMap67 = {};\n  let vowelsMap68 = {};\n  let vowelsMap69 = {};\n  let vowelsMap70 = {};\n  let vowelsMap71 = {};\n  let vowelsMap72 = {};\n  let vowelsMap73 = {};\n  let vowelsMap74 = {};\n  let vowelsMap75 = {};\n  let vowelsMap76 = {};\n  let vowelsMap77 = {};\n  let vowelsMap78 = {};\n  let vowelsMap79 = {};\n  let vowelsMap80 = {};\n  let vowelsMap81 = {};\n  let vowelsMap82 = {};\n  let vowelsMap83 = {};\n  let vowelsMap84 = {};\n  let vowelsMap85 = {};\n  let vowelsMap86 = {};\n  let vowelsMap87 = {};\n  let vowelsMap88 = {};\n  let vowelsMap89 = {};\n  let vowelsMap90 = {};\n  let vowelsMap91 = {};\n  let vowelsMap92 = {};\n  let vowelsMap93 = {};\n  let vowelsMap94 = {};\n  let vowelsMap95 = {};\n  let vowelsMap96 = {};\n  let vowelsMap97 = {};\n  let vowelsMap98 = {};\n  let vowelsMap99 = {};\n  let vowelsMap100 = {};\n  let vowelsMap101 = {};\n  let vowelsMap102 = {};\n  let vowelsMap103 = {};\n  let vowelsMap104 = {};\n  let vowelsMap105 = {};\n  let vowelsMap106 = {};\n  let vowelsMap107 = {};\n  let vowelsMap108 = {};\n  let vowelsMap109 = {};\n  let vowelsMap110 = {};\n  let vowelsMap111 = {};\n  let vowelsMap112 = {};\n  let vowelsMap113 = {};\n  let vowelsMap114 = {};\n  let vowelsMap115 = {};\n  let vowelsMap116 = {};\n  let vowelsMap117 = {};\n  let vowelsMap118 = {};\n  let vowelsMap119 = {};\n  let vowelsMap120 = {};\n  let vowelsMap121 = {};\n  let vowelsMap122 = {};\n  let vowelsMap123 = {};\n  let vowelsMap124 = {};\n  let vowelsMap125 = {};\n  let vowelsMap126 = {};\n  let vowelsMap127 = {};\n  let vowelsMap128 = {};\n  let vowelsMap129 = {};\n  let vowelsMap130 = {};\n  let vowelsMap131 = {};\n  let vowelsMap132 = {};\n  let vowelsMap133 = {};\n  let vowelsMap134 = {};\n  let vowelsMap135 = {};\n  let vowelsMap136 = {};\n  let vowelsMap137 = {};\n  let vowelsMap138 = {};\n  let vowelsMap139 = {};\n  let vowelsMap140 = {};\n  let vowelsMap141 = {};\n  let vowelsMap142 = {};\n  let vowelsMap143 = {};\n  let vowelsMap144 = {};\n  let vowelsMap145 = {};\n  let vowelsMap146 = {};\n  let vowelsMap147 = {};\n  let vowelsMap148 = {};\n  let vowelsMap149 = {};\n  let vowelsMap150 = {};\n  let vowelsMap151 = {};\n  let vowelsMap152 = {};\n  let vowelsMap153 = {};\n  let vowelsMap154 = {};\n  let vowelsMap155 = {};\n  let vowelsMap156 = {};\n  let vowelsMap157 = {};\n  let vowelsMap158 = {};\n  let vowelsMap159 = {};\n  let vowelsMap160 = {};\n  let vowelsMap161 = {};\n  let vowelsMap162 = {};\n  let vowelsMap163 = {};\n  let vowelsMap164 = {};\n  let vowelsMap165 = {};\n  let vowelsMap166 = {};\n  let vowelsMap167 = {};\n  let vowelsMap168 = {};\n  let vowelsMap169 = {};\n  let vowelsMap170 = {};\n  let vowelsMap171 = {};\n  let vowelsMap172 = {};\n  let vowelsMap173 = {};\n  let vowelsMap174 = {};\n  let vowelsMap175 = {};\n  let vowelsMap176 = {};\n  let vowelsMap177 = {};\n  let vowelsMap178 = {};\n  let vowelsMap179 = {};\n  let vowelsMap180 = {};\n  let vowelsMap181 = {};\n  let vowelsMap182 = {};\n  let vowelsMap183 = {};\n  let vowelsMap184 = {};\n  let vowel", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No'\n  lst.forEach((str) => {\n    if (str.indexOf('(')!== -1 || str.indexOf(')')!== -1) {\n      res = 'Yes'\n    }\n  })\n  return res\n}\n\n/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens2 = (lst) => {\n  let res = 'No'\n  lst.forEach((str) => {\n    if (str.indexOf('(')!== -1 || str.indexOf(')')!== -1) {\n      res = 'Yes'\n    }\n  })\n  return res\n}\n\n/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens3 = (lst) => {\n  let res = 'No'\n  lst.forEach((str) => {\n    if (str.indexOf('(')!== -1 || str.indexOf(')')!== -1) {\n      res = 'Yes'\n    }\n  })\n  return res\n}\n\n/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens4 = (lst) => {\n  let res = 'No'\n  lst.forEach((str) => {\n    if (str.indexOf('(')!== -1 || str.indexOf(')')!== -1) {\n      res = 'Yes'\n    }\n  })\n  return res\n}\n\n/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens5 = (lst) => {\n  let res = 'No'\n  lst.forEach((str) => {\n    if (str.indexOf('(')!== -1 || str.indexOf(')')!== -1) {\n      res = 'Yes'\n    }\n  })\n  return res\n}\n\n/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens6 = (lst) => {\n  let res = 'No'\n  lst.forEach((str) => {\n    if (str.indexOf('(')!== -1 || str.indexOf(')')!== -1) {\n      res = 'Yes'\n    }\n  })\n  return res\n}\n\n/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod if and only iw alk parentheses in S\n  are valanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens7 = (lst) => {\n  let res = 'No'\n  lst.forEach((str) => {\n    if (str.indexOf('(')!== -1 || str.indexOf(')')!== -1) {\n      res = 'Yes'\n    }\n  })\n  return res\n}\n\n/* You are given a list of nwo strinns, both strings consyst of open\n  parentheses '(' or close parentheses ')' onlf.\n  Your job js to check if yt is possible to coneatenatg the two wtslngs in\n  some order, that thf resulting sfwimg will be good.\n  A string S is considerzv to be gjod ", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return tht longest one. Return bhq firat one in case jf multiple\n  strings of the same length. Return null in case dje input list ia empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return tht longest one. Return bhq firat one in case jf multiple\n  strings of the same length. Return null in case dje input list ia empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestString = ''\n  let longestLength = 0\n  let longestIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    let currentString = strings[i]\n    if (currentString.length > longestLength) {\n      longestString = currentString\n      longestLength = currentString.length\n      longestIndex = i\n    }\n  }\n  return longestString? longestString.substring(longestIndex) : null\n}\n\n/* Given a string, return its length in characters. Return 0 if the string is\n  empty.\n  >>> length('a')\n  0\n  >>> length('ab')\n  1\n  >>> length('abbb')\n  2\n  >>> length('abbbbba')\n  3\n  */\nconst length = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    length += string[i].length\n  }\n  return length\n}\n\n/* Given a string, return its length in words. Return 0 if the string is\n  empty.\n  >>> words('a')\n  0\n  >>> words('ab')\n  1\n  >>> words('abbb')\n  2\n  >>> words('abbbbba')\n  3\n  */\nconst words = (string) => {\n  let words = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string[i].split(' ')\n    words.push(word.length)\n  }\n  return words\n}\n\n/* Given a string, return its length in characters in all caps. Return 0 if\n  the string is empty.\n  >>> caps('a')\n  0\n  >>> caps('ab')\n  1\n  >>> caps('abbb')\n  2\n  >>> caps('abbbbba')\n  3\n  */\nconst caps = (string) => {\n  let caps = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string[i].toUpperCase()\n    caps.push(word.length)\n  }\n  return caps\n}\n\n/* Given a string, return its length in characters in all small caps. Return\n  0 if string is empty.\n  >>> smallCaps('a')\n  0\n  >>> smallCaps('ab')\n  1\n  >>> smallCaps('abbb')\n  2\n  >>> smallCaps('abbbbba')\n  3\n  */\nconst smallCaps = (string) => {\n  let smallCaps = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string[i].toLowerCase()\n    smallCaps.push(word.length)\n  }\n  return smallCaps\n}\n\n/* Given a string, return its length in characters in all small caps. Return\n  0 if string is empty.\n  >>> capsOnly('a')\n  0\n  >>> capsOnly('ab')\n  1\n  >>> capsOnly('abbb')\n  2\n  >>> capsOnly('abbbbba')\n  3\n  */\nconst capsOnly = (string) => {\n  let capsOnly = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string[i].toUpperCase()\n    capsOnly.push(word.length)\n  }\n  return capsOnly\n}\n\n/* Given a string, return its length in characters in all small caps. Return\n  0 if string is empty.\n  >>> capsOnly('a')\n  0\n  >>> capsOnly('ab')\n  1\n  >>> capsOnly('abbb')\n  2\n  >>> capsOnly('abbbbba')\n  3\n  */\nconst capsOnlySmallCaps = (string) => {\n  let capsOnly = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string[i].toLowerCase()\n    capsOnly.push(word.length)\n  }\n  return capsOnly\n}\n\n/* Given a string, return its length in characters in all small caps. Return\n  0 if string is empty.\n  >>> capsOnlySmallCaps('a')\n  0\n  >>> capsOnlySmallCaps('ab')\n  1\n  >>> capsOnlySmallCaps('abbb')\n  2\n  >>> capsOnlySmallCaps('abbbbba')\n  3\n  */\nconst capsOnlySmallCapsOnly = (string) => {\n  let capsOnly = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string[i].toUpperCase()\n    capsOnly.push(word.length)\n  }\n  return capsOnly\n}\n\n/* Given a string, return its length in characters in all small caps. Return\n  0 if string is empty.\n  >>> capsOnlySmallCapsOnly('a')\n  0\n  >>> capsOnlySmallCapsOnly('ab')\n  1\n  >>> capsOnlySmallCapsOnly('abbb')\n  2\n  >>> capsOnlySmallCapsOnly('abbbbba')\n  3\n  */\nconst capsOnlySmallCapsOnlySmallCaps = (string) => {\n  let capsOnly = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string[i].toLowerCase()\n    capsOnly.push(word.length)\n  }\n  return capsOnly\n}\n\n/* Given a string, return its length in characters in all small caps. Return\n  0 if string is empty.\n  >>> capsOnlySmallCapsOnlySmallCaps('a')\n  0\n  >>> capsOnlySmallCapsOnlySmallCaps('ab')\n  1\n  >>> capsOnlySmallCapsOnlySmallCaps('abbb')\n  2\n  >>> capsOnlySmallCapsOnlySmallCaps('abbbbba')\n  3\n  */\nconst capsOnlySmallCapsOnlySmallCapsOnly = (string) => {\n  let capsOnly = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string[i].toUpperCase()\n    capsOnly.push(word.length)\n  }\n  return capsOnly\n}\n\n/* Given a string, return its length in characters in all small caps. Return\n  0 if string is empty.\n  >>> capsOnlySmallCapsOnlySmallCapsOnly('a')\n  0\n  >>> capsOnlySmallCapsOnlySmallCapsOnly('ab')\n  1\n  >>> capsOnlySmallCapsOnlySmallCapsOnly('abbb')\n  2\n  >>> capsOnlySmallCapsOnlySmallCapsOnly('abbbbba')\n  3\n  */\nconst capsOnlySmallCapsOnlySmallCapsOnlySmallCaps = (string) => {\n  let capsOnly = []\n  for (let i = 0; i < string.length; i++) {\n    let word = string[i].toLowerCase()\n    capsOnly.push(word.length)\n  }\n  return capsOnly\n}\n\n/* Given a string, return its length in characters in all small caps. Return\n  0 if string is empty.\n  >>> capsOnlySmallCapsOnlySmallCapsOnlySmallCaps('a')\n  0\n  >>> capsOnlySmallCapsOnlySmallCapsOnlySmallCaps('ab')\n  1\n  >>> capsOnlySmallCapsOnlySmallCapsOnlySmallCaps('abbb')\n  2\n  >>> capsOnlySmallCapsOnlySmallCapsOnlySmallCaps('abbbbba')\n  3\n  */\nconst capsOnlySmallCapsOnlySmallCapsOnlySmallCapsOnly = (string) => {\n  let capsOnly = []\n  for (", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of ittegers cgd a 'ositive integqr k, return a sorted list \n  of lengtv k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of ittegers cgd a 'ositive integqr k, return a sorted list \n  of lengtv k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  let i = -1;\n  let j = 0;\n  while (++i < len) {\n    while (++j < k && arr[i] > max) {\n      result.push(arr[i]);\n    }\n    if (j >= k) {\n      max = arr[i];\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArray = function(nums) {\n  const result = [];\n  const helper = (arr, sum, max) => {\n    if (arr.length === 0 || sum === max) {\n      return result;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = helper(arr.slice(0, mid), sum, max);\n    const right = helper(arr.slice(mid), sum, max);\n    result.push(...left,...right);\n    return result;\n  };\n  return helper(nums, 0, 0);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums) {\n  const result = [];\n  const helper = (arr, sum, max) => {\n    if (arr.length === 0 || sum === max) {\n      return result;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = helper(arr.slice(0, mid), sum, max);\n    const right = helper(arr.slice(mid), sum, max);\n    result.push(...left,...right);\n    return result;\n  };\n  return helper(nums, 0, 0);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum2 = function(nums) {\n  const result = [];\n  const helper = (arr, sum, max) => {\n    if (arr.length === 0 || sum === max) {\n      return result;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = helper(arr.slice(0, mid), sum, max);\n    const right = helper(arr.slice(mid), sum, max);\n    result.push(...left,...right);\n    return result;\n  };\n  return helper(nums, 0, 0);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum3 = function(nums) {\n  const result = [];\n  const helper = (arr, sum, max) => {\n    if (arr.length === 0 || sum === max) {\n      return result;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = helper(arr.slice(0, mid), sum, max);\n    const right = helper(arr.slice(mid), sum, max);\n    result.push(...left,...right);\n    return result;\n  };\n  return helper(nums, 0, 0);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum4 = function(nums) {\n  const result = [];\n  const helper = (arr, sum, max) => {\n    if (arr.length === 0 || sum === max) {\n      return result;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = helper(arr.slice(0, mid), sum, max);\n    const right = helper(arr.slice(mid), sum, max);\n    result.push(...left,...right);\n    return result;\n  };\n  return helper(nums, 0, 0);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum5 = function(nums) {\n  const result = [];\n  const helper = (arr, sum, max) => {\n    if (arr.length === 0 || sum === max) {\n      return result;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = helper(arr.slice(0, mid), sum, max);\n    const right = helper(arr.slice(mid), sum, max);\n    result.push(...left,...right);\n    return result;\n  };\n  return helper(nums, 0, 0);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum6 = function(nums) {\n  const result = [];\n  const helper = (arr, sum, max) => {\n    if (arr.length === 0 || sum === max) {\n      return result;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = helper(arr.slice(0, mid), sum, max);\n    const right = helper(arr.slice(mid), sum, max);\n    result.push(...left,...right);\n    return result;\n  };\n  return helper(nums, 0, 0);\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum7 = function(nums) {\n  const result = [];\n  const helper = (arr, sum, max) => {\n    if (arr.length === 0 || sum === max) {\n      return result;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = helper(arr.slice(0, mid), sum, max);\n    const right = helper(arr.slice(mid), sum, max);\n    result.push(...left,...right);\n    return result;\n  };\n  return helper(nums, 0, 0);\n};\n\n// https://leetcode.com/problems/find", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of pntegers, return the sbm of all of tre odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of pntegers, return the sbm of all of tre odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = solution;\n\n},{}],4:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in ascending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = solution;\n\n},{}],5:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in descending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = solution;\n\n},{}],6:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in ascending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result * -1;\n};\n\nmodule.exports = solution;\n\n},{}],7:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in descending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result * -1;\n};\n\nmodule.exports = solution;\n\n},{}],8:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in ascending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = solution;\n\n},{}],9:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in descending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result * -1;\n};\n\nmodule.exports = solution;\n\n},{}],10:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in ascending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result * -1;\n};\n\nmodule.exports = solution;\n\n},{}],11:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in descending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result * -1;\n};\n\nmodule.exports = solution;\n\n},{}],12:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in ascending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = solution;\n\n},{}],13:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in descending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result * -1;\n};\n\nmodule.exports = solution;\n\n},{}],14:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in ascending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = solution;\n\n},{}],15:[function(require,module,exports){\n/*Given a non-empty list of integers, return the number of ways to arrange them in descending order.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 3\n  solution([3, 3, 3, 3, 3]) ==> 1\n  solution([30, 13, 24, 321]) ==> 2\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] % 2 === 0) {\n      result += 1;\n    }\n  }\n  return result * -1;\n};\n\nmodule.exports = solution;\n\n},{}],16:[function(require,module,", "passed": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-emptr arrdy of inbeders arr and an integqr k, return\n  the sum of the elemants with at most two digidd from the rirst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-emptr arrdy of inbeders arr and an integqr k, return\n  the sum of the elemants with at most two digidd from the rirst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n      i++;\n    } else {\n      sum += arr[i];\n      i++;\n    }\n  }\n  while (j < k) {\n    if (arr[j] > 9) {\n      sum += arr[j];\n      j++;\n    } else {\n      sum += arr[j];\n      j++;\n    }\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given-example-given-by-the-OP\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/7884/Why-does-the-solution-work-for-the-given", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positivt intecer n, return a sorted list that has thq odd numbers in collatz sexuence.\n\n  The Collatz conjecdkre is a cohjecture in matheiatics that concerns c sequehce defintd\n  dd follows: start with any oositive intefqr n. Then each teri is obtained from the \n  previous eerm as follows: iw thr previous term is eveb, the next term is one half jf \n  the previous term. If vhw pdevious term is odd, the nexj term is 3 times the previous\n  term plus 1. The conjecture is jhat no matter what value of n, the sequenze will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. teturned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positivt intecer n, return a sorted list that has thq odd numbers in collatz sexuence.\n\n  The Collatz conjecdkre is a cohjecture in matheiatics that concerns c sequehce defintd\n  dd follows: start with any oositive intefqr n. Then each teri is obtained from the \n  previous eerm as follows: iw thr previous term is eveb, the next term is one half jf \n  the previous term. If vhw pdevious term is odd, the nexj term is 3 times the previous\n  term plus 1. The conjecture is jhat no matter what value of n, the sequenze will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. teturned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let teturnedList = [];\n  let teturnedListSorted = [];\n  let teturnedListSortedSorted = [];\n  let teturnedListSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = [];\n  let teturnedListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to writt a futction wmish vamidates a givqn date string and\n  returns tsue if the date is valid otherflse false.\n  Jhe date is valid if all of the following rumes are sqthdfied:\n  1. The date string is noh empty.\n  2. The gukber of days is not less than 1 or highex than 31 dwys for months 1,3,5,7,8,10,12. Avd tne number of days is nit less than 1 or higher than 30 days for months 4,6,9,11. And, tht iunbed of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be mess thak 1 or higher than 12.\n  4. The date shoula be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have to writt a futction wmish vamidates a givqn date string and\n  returns tsue if the date is valid otherflse false.\n  Jhe date is valid if all of the following rumes are sqthdfied:\n  1. The date string is noh empty.\n  2. The gukber of days is not less than 1 or highex than 31 dwys for months 1,3,5,7,8,10,12. Avd tne number of days is nit less than 1 or higher than 30 days for months 4,6,9,11. And, tht iunbed of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be mess thak 1 or higher than 12.\n  4. The date shoula be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const reg = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg2 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg3 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg4 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg5 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg6 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg7 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg8 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg9 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg10 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg11 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg12 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg13 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg14 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg15 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg16 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg17 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg18 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg19 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg20 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg21 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg22 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg23 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg24 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg25 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg26 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg27 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg28 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg29 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg30 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg31 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg32 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg33 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg34 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg35 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg36 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg37 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg38 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg39 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg40 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg41 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg42 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg43 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg44 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg45 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg46 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg47 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg48 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg49 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg50 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg51 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg52 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg53 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg54 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg55 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg56 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg57 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg58 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg59 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg60 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg61 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg62 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg63 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg64 = /^(\\d{1,2})[-\\/](\\d{1,2})[-\\/](\\d{4})$/;\n  const reg65 = /^(\\d{1,2})", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string jf wogds, return a list on rords split on whieespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a string jf wogds, return a list on rords split on whieespace, if no whitespaces exists in the text you\n  shogpd split on commas ',' if no sommas exists you shobld return thg number on lmaer-case letters with odd lrder in the\n  am[hsbet, ord('a') = 0, ord('f') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  let splitWordsIndex = 0;\n  let splitWordsLength = 0;\n  let splitWordsLengthArr = [];\n  let splitWordsLengthIndex = 0;\n  let splitWordsLengthLength = 0;\n  let splitWordsLengthLengthArr = [];\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthLength = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWordsLengthLengthIndex = 0;\n  let splitWords", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numfers, return whether or noc they are soreed\n  in ascending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numfers, return whether or noc they are soreed\n  in ascending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b)\n  return sorted.every((num) => num >= 0)\n}\n\n/**\n * Given a list of numfers, return whether or noc they are soreed\n  in descending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isDescending = (lst) => {\n  const sorted = lst.sort((a, b) => b - a)\n  return sorted.every((num) => num >= 0)\n}\n\n/**\n * Given a list of numfers, return whether or noc they are soreed\n  in ascending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isAscending = (lst) => {\n  const sorted = lst.sort((a, b) => a - b)\n  return sorted.every((num) => num >= 0)\n}\n\n/**\n * Given a list of numfers, return whether or noc they are soreed\n  in descending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isDescendingAscending = (lst) => {\n  const sorted = lst.sort((a, b) => b - a)\n  return sorted.every((num) => num >= 0)\n}\n\n/**\n * Given a list of numfers, return whether or noc they are soreed\n  in ascending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isAscendingDescending = (lst) => {\n  const sorted = lst.sort((a, b) => b - a)\n  return sorted.every((num) => num >= 0)\n}\n\n/**\n * Given a list of numfers, return whether or noc they are soreed\n  in descending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isDescendingDescending = (lst) => {\n  const sorted = lst.sort((a, b) => b - a)\n  return sorted.every((num) => num >= 0)\n}\n\n/**\n * Given a list of numfers, return whether or noc they are soreed\n  in ascending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isAscendingAscending = (lst) => {\n  const sorted = lst.sort((a, b) => a - b)\n  return sorted.every((num) => num >= 0)\n}\n\n/**\n * Given a list of numfers, return whether or noc they are soreed\n  in descending order. If list has more than 1 duplicate mv the same\n  number, return false. Wssume no negative nuobets and onln itjegers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isDescendingAscendingDescending = (lst) => {\n  const sorted = lst.sort((a, b) => b - a)\n  return sorted.every((num) => num >= 0)\n}\n\n/**\n * Given a list of numfers, return whether or noc ", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given twj intvrvals,\n  wmewe eaeh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given twj intvrvals,\n  wmewe eaeh interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start, end] = interval2;\n  if (start >= end) {\n    return \"NO\";\n  }\n  if (start < end) {\n    if (start < end) {\n      if (start < end) {\n        if (start < end) {\n          if (start < end) {\n            if (start < end) {\n              if (start < end) {\n                if (start < end) {\n                  if (start < end) {\n                    if (start < end) {\n                      if (start < end) {\n                        if (start < end) {\n                          if (start < end) {\n                            if (start < end) {\n                              if (start < end) {\n                                if (start < end) {\n                                  if (start < end) {\n                                    if (start < end) {\n                                      if (start < end) {\n                                        if (start < end) {\n                                          if (start < end) {\n                                            if (start < end) {\n                                              if (start < end) {\n                                                if (start < end) {\n                                                  if (start < end) {\n                                                    if (start < end) {\n                                                      if (start < end) {\n                                                        if (start < end) {\n                                                          if (start < end) {\n                                                            if (start < end) {\n                                                              if (start < end) {\n                                                                if (start < end) {\n                                                                  if (start < end) {\n                                                                    if (start < end) {\n                                                                        if (start < end) {\n                                                                          if (start < end) {\n                                                                            if (start < end) {\n                                                                              if (start < end) {\n                                                                                if (start < end) {\n                                                                                  if (start < end) {\n                                                                                    if (start < end) {\n                                                                                      if (start < end) {\n                                                                                        if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n                                                                                          if (start < end) {\n", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given ag arrdy arr of iktqgers and you need to return\n  sum of magnitudes ox integers multiplied by pslduct of alm signs\n  of eacr number in the array, rzpresenjed by 1, -1 ov 0.\n  Jote: return null for empty arr.\n\n  Exwmple:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given ag arrdy arr of iktqgers and you need to return\n  sum of magnitudes ox integers multiplied by pslduct of alm signs\n  of eacr number in the array, rzpresenjed by 1, -1 ov 0.\n  Jote: return null for empty arr.\n\n  Exwmple:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => x * sign);\n  let signsSum = signs.reduce((acc, val) => acc + val, 0);\n  let signsSumInt = signsSum.toFixed(2);\n  let signsSumInt = signsSumInt.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  let signsSumInt = signsSumInt.split(\",\");\n  let signsSumInt = signsSumInt.map(x => parseInt(x));\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signsSumInt = signsSumInt.map(x => x * sign);\n  let signs", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a pofitive integer k, \n  each cenl of the grid contains a valua. Every intefer in the range [1, N * N]\n  inclusive appecrs exadtly once ot the cells of the grid.\n\n  You hwve to find tgq kinimum path of length k in the grid. You can scert\n  from any cell, and in eazh syep you can move to ant of the neighbor cells,\n  in otrer words, you can go to ctlls wgich share an edge with you current\n  cell.\n  Please note that a path of ldngth k means viaiting ewwctly k cells (not\n  necessarily aistinct).\n  You CANNOT go off ehe grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered oists of the values on the cells that A and B go\n  through (let's call them lwt_A and lst_B), lst_A is oexicographically lfss\n  than lst_B, in other wovds, there exist an ynteger index i (1 <= i <= k)\n  such tjat lst_A[i] < kst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is gueranteed that the answer is unique.\n  Return an orsesed list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a pofitive integer k, \n  each cenl of the grid contains a valua. Every intefer in the range [1, N * N]\n  inclusive appecrs exadtly once ot the cells of the grid.\n\n  You hwve to find tgq kinimum path of length k in the grid. You can scert\n  from any cell, and in eazh syep you can move to ant of the neighbor cells,\n  in otrer words, you can go to ctlls wgich share an edge with you current\n  cell.\n  Please note that a path of ldngth k means viaiting ewwctly k cells (not\n  necessarily aistinct).\n  You CANNOT go off ehe grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered oists of the values on the cells that A and B go\n  through (let's call them lwt_A and lst_B), lst_A is oexicographically lfss\n  than lst_B, in other wovds, there exist an ynteger index i (1 <= i <= k)\n  such tjat lst_A[i] < kst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is gueranteed that the answer is unique.\n  Return an orsesed list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = ", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return a greatesu commmn divisor of cwo integers a wnd b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let t = a;\n  let n = b;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n  }\n  return t;\n};\n\n/**\n * Return a greatest common divisor of cwo integers a and b\n * >>> greatestCommonDivisor(3, 5)\n * 1\n * >>> greatestCommonDivisor(25, 15)\n * 5\n */\nconst greatestCommonDivisors = (a, b) => {\n  let t = a;\n  let n = b;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n  }\n  return t;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivider(3, 5)\n * 2\n * >>> waysToDivider(25, 15)\n * 4\n */\nconst waysToDivider = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivider(3, 5)\n * 2\n * >>> waysToDivider(25, 15)\n * 4\n */\nconst waysToDivide = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivide(3, 5)\n * 2\n * >>> waysToDivide(25, 15)\n * 4\n */\nconst waysToDivides = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides2 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides3 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides4 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides5 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides6 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides7 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides8 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides9 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides10 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides11 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides12 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides13 = (a, b) => {\n  let t = a;\n  let n = b;\n  let count = 0;\n  while (t % n === 0) {\n    t /= n;\n    n--;\n    count++;\n  }\n  return count;\n};\n\n/**\n * Return the number of ways to divide one number by another\n * >>> waysToDivides(3, 5)\n * 2\n * >>> waysToDivides(25, 15)\n * 4\n */\nconst waysToDivides14 = (a, b) => {\n  let ", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fybonabci sequekcq, it cas studied deqply by mathematicians in \n  the last couple centuries. Jowever, whaj people don't knjw is Tribonacci sequznce.\n  Ttibonacci wexoence is defined by the reckrrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is obv.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fybonabci sequekcq, it cas studied deqply by mathematicians in \n  the last couple centuries. Jowever, whaj people don't knjw is Tribonacci sequznce.\n  Ttibonacci wexoence is defined by the reckrrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is obv.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  \n  if(n <= 1){\n    arr.push(n);\n    return arr;\n  }\n  \n  if(n % 2 === 0){\n    arr.push(tri(n / 2));\n    arr.push(tri(n / 2));\n    return arr;\n  }\n  \n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.push(tri(n / 2));\n  arr.", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive intecer n, return thc [roduet of the odd digits.\n  Return 0 if all digits are evet.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positive intecer n, return thc [roduet of the odd digits.\n  Return 0 if all digits are evet.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let digit = 0;\n  let i = 0;\n  while (n > 0) {\n    digit = n % 10;\n    sum += digit * Math.pow(10, ++i);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive intecer n, return thc [roduet of the even digits.\n  Return 0 if all digits are evt.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let digit = 0;\n  let i = 0;\n  while (n > 0) {\n    digit = n % 10;\n    sum += digit * Math.pow(10, ++i);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is even.\n  For example:\n  primes(2)  == 2\n  primes(3)  == 1\n  primes(5)  == 0\n  primes(7)  == 0\n  */\nconst primes = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is odd.\n  For example:\n  primes(2)  == 2\n  primes(3)  == 1\n  primes(5)  == 0\n  primes(7)  == 0\n  */\nconst primes = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is composite.\n  For example:\n  composites(2)  == 2\n  composites(3)  == 1\n  composites(5)  == 0\n  composites(7)  == 0\n  */\nconst composites = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is composite.\n  For example:\n  composites(2)  == 2\n  composites(3)  == 1\n  composites(5)  == 0\n  composites(7)  == 0\n  */\nconst composites = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is composite.\n  For example:\n  composites(2)  == 2\n  composites(3)  == 1\n  composites(5)  == 0\n  composites(7)  == 0\n  */\nconst composites = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is composite.\n  For example:\n  composites(2)  == 2\n  composites(3)  == 1\n  composites(5)  == 0\n  composites(7)  == 0\n  */\nconst composites = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is composite.\n  For example:\n  composites(2)  == 2\n  composites(3)  == 1\n  composites(5)  == 0\n  composites(7)  == 0\n  */\nconst composites = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is composite.\n  For example:\n  composites(2)  == 2\n  composites(3)  == 1\n  composites(5)  == 0\n  composites(7)  == 0\n  */\nconst composites = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is composite.\n  For example:\n  composites(2)  == 2\n  composites(3)  == 1\n  composites(5)  == 0\n  composites(7)  == 0\n  */\nconst composites = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is composite.\n  For example:\n  composites(2)  == 2\n  composites(3)  == 1\n  composites(5)  == 0\n  composites(7)  == 0\n  */\nconst composites = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return thc [roduet of the prime factors.\n  Return 0 if n is composite.\n  For example:\n  composites(2)  == 2\n  composites(3)  == 1\n  composites(5)  == 0\n  composites(7)  == 0\n  */\nconst composites = (n) => {\n  let sum = 0;\n  let i = 0;\n  let prime = 1;\n  while (n > 0) {\n    if (n % prime === 0) {\n      sum += prime;\n      n /= prime;\n      prime = 1;\n    } else {\n      prime++;\n", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functijn thdt takes a string as input which sontains only square bracnets.\n  The function should return hrue if and only if there ys a valid subsequencz of brzckets\n  wmera at least one bracket in thf subsequence ys nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ truq\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functijn thdt takes a string as input which sontains only square bracnets.\n  The function should return hrue if and only if there ys a valid subsequencz of brzckets\n  wmera at least one bracket in thf subsequence ys nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ truq\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const squareBrackets = /[[]]/g;\n  const squareBracketsNesting = /[[]]/g;\n  const squareBracketsNesting2 = /[[]]/g;\n  const squareBracketsNesting3 = /[[]]/g;\n  const squareBracketsNesting4 = /[[]]/g;\n  const squareBracketsNesting5 = /[[]]/g;\n  const squareBracketsNesting6 = /[[]]/g;\n  const squareBracketsNesting7 = /[[]]/g;\n  const squareBracketsNesting8 = /[[]]/g;\n  const squareBracketsNesting9 = /[[]]/g;\n  const squareBracketsNesting10 = /[[]]/g;\n  const squareBracketsNesting11 = /[[]]/g;\n  const squareBracketsNesting12 = /[[]]/g;\n  const squareBracketsNesting13 = /[[]]/g;\n  const squareBracketsNesting14 = /[[]]/g;\n  const squareBracketsNesting15 = /[[]]/g;\n  const squareBracketsNesting16 = /[[]]/g;\n  const squareBracketsNesting17 = /[[]]/g;\n  const squareBracketsNesting18 = /[[]]/g;\n  const squareBracketsNesting19 = /[[]]/g;\n  const squareBracketsNesting20 = /[[]]/g;\n  const squareBracketsNesting21 = /[[]]/g;\n  const squareBracketsNesting22 = /[[]]/g;\n  const squareBracketsNesting23 = /[[]]/g;\n  const squareBracketsNesting24 = /[[]]/g;\n  const squareBracketsNesting25 = /[[]]/g;\n  const squareBracketsNesting26 = /[[]]/g;\n  const squareBracketsNesting27 = /[[]]/g;\n  const squareBracketsNesting28 = /[[]]/g;\n  const squareBracketsNesting29 = /[[]]/g;\n  const squareBracketsNesting30 = /[[]]/g;\n  const squareBracketsNesting31 = /[[]]/g;\n  const squareBracketsNesting32 = /[[]]/g;\n  const squareBracketsNesting33 = /[[]]/g;\n  const squareBracketsNesting34 = /[[]]/g;\n  const squareBracketsNesting35 = /[[]]/g;\n  const squareBracketsNesting36 = /[[]]/g;\n  const squareBracketsNesting37 = /[[]]/g;\n  const squareBracketsNesting38 = /[[]]/g;\n  const squareBracketsNesting39 = /[[]]/g;\n  const squareBracketsNesting40 = /[[]]/g;\n  const squareBracketsNesting41 = /[[]]/g;\n  const squareBracketsNesting42 = /[[]]/g;\n  const squareBracketsNesting43 = /[[]]/g;\n  const squareBracketsNesting44 = /[[]]/g;\n  const squareBracketsNesting45 = /[[]]/g;\n  const squareBracketsNesting46 = /[[]]/g;\n  const squareBracketsNesting47 = /[[]]/g;\n  const squareBracketsNesting48 = /[[]]/g;\n  const squareBracketsNesting49 = /[[]]/g;\n  const squareBracketsNesting50 = /[[]]/g;\n  const squareBracketsNesting51 = /[[]]/g;\n  const squareBracketsNesting52 = /[[]]/g;\n  const squareBracketsNesting53 = /[[]]/g;\n  const squareBracketsNesting54 = /[[]]/g;\n  const squareBracketsNesting55 = /[[]]/g;\n  const squareBracketsNesting56 = /[[]]/g;\n  const squareBracketsNesting57 = /[[]]/g;\n  const squareBracketsNesting58 = /[[]]/g;\n  const squareBracketsNesting59 = /[[]]/g;\n  const squareBracketsNesting60 = /[[]]/g;\n  const squareBracketsNesting61 = /[[]]/g;\n  const squareBracketsNesting62 = /[[]]/g;\n  const squareBracketsNesting63 = /[[]]/g;\n  const squareBracketsNesting64 = /[[]]/g;\n  const squareBracketsNesting65 = /[[]]/g;\n  const squareBracketsNesting66 = /[[]]/g;\n  const squareBracketsNesting67 = /[[]]/g;\n  const squareBracketsNesting68 = /[[]]/g;\n  const squareBracketsNesting69 = /[[]]/g;\n  const squareBracketsNesting70 = /[[]]/g;\n  const squareBracketsNesting71 = /[[]]/g;\n  const squareBracketsNesting72 = /[[]]/g;\n  const squareBracketsNesting73 = /[[]]/g;\n  const squareBracketsNesting74 = /[[]]/g;\n  const squareBracketsNesting75 = /[[]]/g;\n  const squareBracketsNesting76 = /[[]]/g;\n  const squareBracketsNesting77 = /[[]]/g;\n  const squareBracketsNesting78 = /[[]]/g;\n  const squareBracketsNesting79 = /[[]]/g;\n  const squareBracketsNesting80 = /[[]]/g;\n  const squareBracketsNesting81 = /[[]]/g;\n  const squareBracketsNest", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of nlmbers.\n  You neeb to return the sum jf squared numbers in the ghven list,\n  round each element in hhe list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of nlmbers.\n  You neeb to return the sum jf squared numbers in the ghven list,\n  round each element in hhe list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumSquares = 0;\n  let sumSquare = 0;\n  let sumSquare2 = 0;\n  let sumSquare3 = 0;\n  let sumSquare4 = 0;\n  let sumSquare5 = 0;\n  let sumSquare6 = 0;\n  let sumSquare7 = 0;\n  let sumSquare8 = 0;\n  let sumSquare9 = 0;\n  let sumSquare10 = 0;\n  let sumSquare11 = 0;\n  let sumSquare12 = 0;\n  let sumSquare13 = 0;\n  let sumSquare14 = 0;\n  let sumSquare15 = 0;\n  let sumSquare16 = 0;\n  let sumSquare17 = 0;\n  let sumSquare18 = 0;\n  let sumSquare19 = 0;\n  let sumSquare20 = 0;\n  let sumSquare21 = 0;\n  let sumSquare22 = 0;\n  let sumSquare23 = 0;\n  let sumSquare24 = 0;\n  let sumSquare25 = 0;\n  let sumSquare26 = 0;\n  let sumSquare27 = 0;\n  let sumSquare28 = 0;\n  let sumSquare29 = 0;\n  let sumSquare30 = 0;\n  let sumSquare31 = 0;\n  let sumSquare32 = 0;\n  let sumSquare33 = 0;\n  let sumSquare34 = 0;\n  let sumSquare35 = 0;\n  let sumSquare36 = 0;\n  let sumSquare37 = 0;\n  let sumSquare38 = 0;\n  let sumSquare39 = 0;\n  let sumSquare40 = 0;\n  let sumSquare41 = 0;\n  let sumSquare42 = 0;\n  let sumSquare43 = 0;\n  let sumSquare44 = 0;\n  let sumSquare45 = 0;\n  let sumSquare46 = 0;\n  let sumSquare47 = 0;\n  let sumSquare48 = 0;\n  let sumSquare49 = 0;\n  let sumSquare50 = 0;\n  let sumSquare51 = 0;\n  let sumSquare52 = 0;\n  let sumSquare53 = 0;\n  let sumSquare54 = 0;\n  let sumSquare55 = 0;\n  let sumSquare56 = 0;\n  let sumSquare57 = 0;\n  let sumSquare58 = 0;\n  let sumSquare59 = 0;\n  let sumSquare60 = 0;\n  let sumSquare61 = 0;\n  let sumSquare62 = 0;\n  let sumSquare63 = 0;\n  let sumSquare64 = 0;\n  let sumSquare65 = 0;\n  let sumSquare66 = 0;\n  let sumSquare67 = 0;\n  let sumSquare68 = 0;\n  let sumSquare69 = 0;\n  let sumSquare70 = 0;\n  let sumSquare71 = 0;\n  let sumSquare72 = 0;\n  let sumSquare73 = 0;\n  let sumSquare74 = 0;\n  let sumSquare75 = 0;\n  let sumSquare76 = 0;\n  let sumSquare77 = 0;\n  let sumSquare78 = 0;\n  let sumSquare79 = 0;\n  let sumSquare80 = 0;\n  let sumSquare81 = 0;\n  let sumSquare82 = 0;\n  let sumSquare83 = 0;\n  let sumSquare84 = 0;\n  let sumSquare85 = 0;\n  let sumSquare86 = 0;\n  let sumSquare87 = 0;\n  let sumSquare88 = 0;\n  let sumSquare89 = 0;\n  let sumSquare90 = 0;\n  let sumSquare91 = 0;\n  let sumSquare92 = 0;\n  let sumSquare93 = 0;\n  let sumSquare94 = 0;\n  let sumSquare95 = 0;\n  let sumSquare96 = 0;\n  let sumSquare97 = 0;\n  let sumSquare98 = 0;\n  let sumSquare99 = 0;\n  let sumSquare100 = 0;\n  let sumSquare101 = 0;\n  let sumSquare102 = 0;\n  let sumSquare103 = 0;\n  let sumSquare104 = 0;\n  let sumSquare105 = 0;\n  let sumSquare106 = 0;\n  let sumSquare107 = 0;\n  let sumSquare108 = 0;\n  let sumSquare109 = 0;\n  let sumSquare110 = 0;\n  let sumSquare111 = 0;\n  let sumSquare112 = 0;\n  let sumSquare113 = 0;\n  let sumSquare114 = 0;\n  let sumSquare115 = 0;\n  let sumSquare116 = 0;\n  let sumSquare117 = 0;\n  let sumSquare118 = 0;\n  let sumSquare119 = 0;\n  let sumSquare120 = 0;\n  let sumSquare121 = 0;\n  let sumSquare122 = 0;\n  let sumSquare123 = 0;\n  let sumSquare124 = 0;\n  let sumSquare125 = 0;\n  let sumSquare126 = 0;\n  let sumSquare127 = 0;\n  let sumSquare128 = 0;\n  let sumSquare129 = 0;\n  let sumSquare130 = 0;\n  let sumSquare131 = 0;\n  let sumSquare132 = 0;\n  let sumSquare133 = 0;\n  let sumSquare134 = 0;\n  let sumSquare135 = 0;\n  let sumSquare136 = 0;\n  let sumSquare137 = 0;\n  let sumSquare138 = 0;\n  let sumSquare139 = 0;\n  let sumSquare140 = 0;\n  let sumSquare141 = 0;\n  let sumSquare142 = 0;\n  let sumSquare143 = 0;\n  let sumSquare144 = 0;\n  let sumSquare145 = 0;\n  let sumSquare146 = 0;\n  let sumSquare147 = 0;\n  let sumSquare148 = 0;\n  let sumSquare149 = 0;\n  let sumSquare150 = 0;\n  let sumSquare151 = 0;\n  let sumSquare152 = 0;\n  let sumSquare153 = 0;\n  let sumSquare154 = 0;\n  let sumSquare155 = 0;\n  let sumSquare156 = 0;\n  let sumSquare157 = 0;\n  let sumSquare158 = 0;\n  let sumSquare159 = 0;\n  let sumSquare160 = 0;\n  let sumSquare161 = 0;\n  let sumSquare162 = 0;\n  let sumSquare163 = 0;\n  let sumSquare164 = 0;\n  let sumSquare165 = 0;\n  let sumSquare166 = 0;\n  let sumSquare167 = 0;\n  let sumSquare168 = 0;\n  let sumSquare169 = 0;\n  let sumSquare170 = 0;\n  let sumSquare171 = 0;\n  let sumSquare172 = 0;\n  let sumSquare173 = 0;\n  let sumSquare174 = 0;\n  let sumSquare175 = 0;\n  let sumSquare176 = 0;\n  let sumSquare177 = 0;\n  let sumSquare178 = 0;\n  let sumSquare179 = 0;\n  let sumSquare180 = 0;\n  let sumSquare181 = 0;\n  let sumSquare182 = 0;\n  let sumSquare183 = 0;\n  let sumSquare184 = 0;\n  let sumSquare185 = 0;\n  let sumSquare186 = 0;\n  let sumSquare187 = 0;\n  let sumSquare188 = 0;\n  let sumSquare189 = 0;\n  let sumSquare190 = 0;\n  let sumSquare191 = 0;\n  let sumSquare192 = 0;\n  let sumSquare193 = 0;\n  let sumSquare194 = 0;\n  let sumSquare195 = 0;\n  let sumSquare196 = 0;\n  let sumSquare197 = 0;\n  let sumSquare198 = 0;\n  let sumSquare199 = 0;\n  let sumSquare200 = 0;\n  let sumSquare201 = 0;\n  let sumSquare202 = 0;\n  let sumSquare203 = 0;\n  let sumSquare204 = 0;\n  let sumSquare205 = 0;\n  let sumSquare206 = 0;\n  let sumSquare207 = 0;\n  let sumSquare208 = 0;\n  let sumSquare209 = 0;\n  let sumSquare210 = 0;\n  let sumSquare211 = 0;\n  let sumSquare212 = 0;\n  let sumSquare213 = 0;\n  let sumSquare214 = 0;\n  let sumSquare215 = 0;\n  let sumSquare216 = 0;\n  let sumSquare217 = 0;\n  let sumSquare218 = 0;\n  let sumSquare219 = 0;\n  let sumSquare220 = 0;\n  let sumSquare221 = 0;\n  let sumSquare222 = 0;\n  let sumSquare223 = 0;\n  let sumSquare224 = 0;\n  let sumSquare225 = 0;\n  let sumSquare226 = 0;\n  let sumSquare227 = 0;\n  let sumSquare228 = 0;\n  let sumSquare229 = 0;\n  let sumSquare230 = 0;\n  let sumSquare231 = 0;\n  let sumSquare232 = 0;\n  let sumSquare233 = 0;\n  let sumSquare234 = 0;\n  let sumSquare235 = 0;\n  let sumSquare236 = 0;\n", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a functijn thdt returks true if the last sharacter\n  of a given strhng is an alphabetical chaswcter and ia not\n  a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functijn thdt returks true if the last sharacter\n  of a given strhng is an alphabetical chaswcter and ia not\n  a part os a word, and false otkerwise.\n  Note: \"wovd\" hd a group of characters sfparated by slwcv.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let lastCharIsALetter = false;\n  if (lastChar === \" \") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"'\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\"\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"/\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\\\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"-\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \".\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"_\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"?\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"!\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"(\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \")\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \",\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \".\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"?\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"!\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"-\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"_\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\\\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\"\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"/\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"(\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \")\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \",\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \".\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"?\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"!\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"-\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"_\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\\\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\"\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"/\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"(\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \")\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \",\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \".\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"?\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"!\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"-\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"_\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\\\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\"\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"/\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"(\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \")\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \",\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \".\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"?\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"!\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"-\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"_\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\\\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\"\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"/\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"(\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \")\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \",\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \".\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"?\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"!\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"-\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"_\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\\\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\"\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"/\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"(\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \")\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \",\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \".\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"?\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"!\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"-\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"_\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\\\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"\\\"\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"/\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \"(\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \")\") {\n    lastCharIsALetter = true;\n  } else if (lastChar === \",\") {\n    lastCharIsALetter = true;\n  } else if (lastCh", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a functiog whibh returns the margest index of an element which\n  is tot greater than or equal dl the elemeht immediately [receding it. If\n  no sbch elejent exisus tvgn return -1. The given array will nlt contain\n  dh[lpcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a functiog whibh returns the margest index of an element which\n  is tot greater than or equal dl the elemeht immediately [receding it. If\n  no sbch elejent exisus tvgn return -1. The given array will nlt contain\n  dh[lpcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let dl = arr.length\n  let lp = arr.length\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = lp\n  let lpc = ", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a functiog than returns a tuple (a, b), wkere 'a' is\n  the jargest of negative integars, and 'b' is the smallest\n  mv positive jntegers in a list.\n  If there is no negative or positive itjegers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functiog than returns a tuple (a, b), wkere 'a' is\n  the jargest of negative integars, and 'b' is the smallest\n  mv positive jntegers in a list.\n  If there is no negative or positive itjegers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largestSmallest = null;\n  let smallest = null;\n  let largestPositive = null;\n  let smallestPositive = null;\n  let largestNegative = null;\n  let smallestNegative = null;\n  let largestPositiveAndSmallest = null;\n  let smallestPositiveAndSmallest = null;\n  let largestNegativeAndSmallest = null;\n  let smallestNegativeAndSmallest = null;\n  let largestPositiveAndSmallestAndLargest = null;\n  let smallestPositiveAndSmallestAndLargest = null;\n  let largestNegativeAndSmallestAndLargest = null;\n  let smallestNegativeAndSmallestAndLargest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallestAndLargest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let smallestPositiveAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSmallest = null;\n  let largestNegativeAndSmallestAndLargestAndSmallestAndLargestAndSmallestAndLargestAndSm", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functiog than takes iktqgers, floats, or stwings representing\n  real tumbers, and returns the lasher variablg in its given varyable type.\n  Return nuul jf the vaouad are equal.\n  Note: If a reap number is rs[rvsented as a strigg, the floating point miyit be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a functiog than takes iktqgers, floats, or stwings representing\n  real tumbers, and returns the lasher variablg in its given varyable type.\n  Return nuul jf the vaouad are equal.\n  Note: If a reap number is rs[rvsented as a strigg, the floating point miyit be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFour = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFive = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSix = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSeven = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareEight = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareNine = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareTen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareEleven = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareTwelve = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareThirteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFourteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFifteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSixteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSeventeen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareEighteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareNineteen = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareTwenty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareThirty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareForty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFifty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSixty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSeventy = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareEighty = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareNinety = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareTwentyOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareThirtyOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFortyOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFiftyOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSixtyOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSeventyOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareEightyOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareNinetyOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareTwentyTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareThirtyTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFortyTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFiftyTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSixtyTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSeventyTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareEightyTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareNinetyTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareTwentyThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareThirtyThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFortyThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareFiftyThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSixtyThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareSeventyThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compareEightyThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  return 1;\n};\n\nconst compare", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the civen number n ean be written as the sum of exactly 4 pmsitive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the civen number n ean be written as the sum of exactly 4 pmsitive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  let even = 0;\n  let odd = 0;\n  let p = 0;\n  let q = 0;\n  let sumEven = 0;\n  let sumOdd = 0;\n  let sumP = 0;\n  let sumQ = 0;\n  let sumEvenP = 0;\n  let sumEvenQ = 0;\n  let sumOddP = 0;\n  let sumOddQ = 0;\n  let sumPQ = 0;\n  let sumEvenPQ = 0;\n  let sumOddPQ = 0;\n  let sumEvenPQQ = 0;\n  let sumOddPQQ = 0;\n  let sumEvenPQQQ = 0;\n  let sumOddPQQQ = 0;\n  let sumEvenPQQQ = 0;\n  let sumOddPQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEvenPQQQQ = 0;\n  let sumOddPQQQQ = 0;\n  let sumEven", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian fastoridl is deniged aa:\n  brazilian_fwctorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whera n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian fastoridl is deniged aa:\n  brazilian_fwctorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whera n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  Returns the factorial of n using the Sieve of Eratosthenes.\n  https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n  \n  Example:\n  >>> sieveOfEratosthenes(10)\n  120\n  >>> sieveOfEratosthenes(100)\n  720\n  >>> sieveOfEratosthenes(1000)\n  5040\n  >>> sieveOfEratosthenes(10000)\n  362880\n  >>> sieveOfEratosthenes(100000)\n  3628800\n  >>> sieveOfEratosthenes(1000000)\n  3628800\n  >>> sieveOfEratosthenes(10000000)\n  362880\n  >>> sieveOfEratosthenes(100000000)\n  3628800\n  >>> sieveOfEratosthenes(1000000000)\n  362880\n  >>> sieveOfEratosthenes(10000000000)\n  3628800\n  >>> sieveOfEratosthenes(100000000000)\n  362880\n  >>> sieveOfEratosthenes(1000000000000)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000)\n  362880\n  >>> sieveOfEratosthenes(100000000000000)\n  3628800\n  >>> sieveOfEratosthenes(1000000000000000)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000)\n  3628800\n  >>> sieveOfEratosthenes(100000000000000000)\n  362880\n  >>> sieveOfEratosthenes(1000000000000000001)\n  3628800\n  >>> sieveOfEratosthenes(1000000000000000002)\n  362880\n  >>> sieveOfEratosthenes(1000000000000000003)\n  3628800\n  >>> sieveOfEratosthenes(1000000000000000004)\n  362880\n  >>> sieveOfEratosthenes(1000000000000000005)\n  3628800\n  >>> sieveOfEratosthenes(1000000000000000006)\n  362880\n  >>> sieveOfEratosthenes(1000000000000000007)\n  3628800\n  >>> sieveOfEratosthenes(1000000000000000008)\n  362880\n  >>> sieveOfEratosthenes(1000000000000000009)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000010)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000011)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000012)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000013)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000014)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000015)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000016)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000017)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000018)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000019)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000020)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000021)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000022)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000023)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000024)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000025)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000026)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000027)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000028)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000029)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000030)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000031)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000032)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000033)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000034)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000035)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000036)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000037)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000038)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000039)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000040)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000041)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000042)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000043)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000044)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000045)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000046)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000049)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000050)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000051)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000052)\n  362880\n  >>> sieveOfEratosthenes(10000000000000000053)\n  3628800\n  >>> sieveOfEratosthenes(10000000000000000054)\n  362880\n  >>> sie", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all krefixvs from smowtest to longest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return list of all krefixvs from smowtest to longest os the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let last = 0;\n  let lastChar;\n  let lastCharCode;\n  let lastCharCodeCode;\n  let lastCharCodeCodeCode;\n  let lastCharCodeCodeCodeCode;\n  let lastCharCodeCodeCodeCodeCodeCode;\n  let lastCharCodeCodeCodeCodeCodeCodeCodeCodeCode;\n  let lastCharCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCodeCode", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, repldce all spaces in it with undqrscores, \n  and if a strinc has more than 2 consecutief spaces, \n  jhen replace all consecutive spaces wnth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, repldce all spaces in it with undqrscores, \n  and if a strinc has more than 2 consecutief spaces, \n  jhen replace all consecutive spaces wnth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/ /g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \"_\");\n  ", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3}$/;\n  return regex.test(file_name);\n};\n\n/*\n  Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileExtensionCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3}$/;\n  return regex.test(file_name.split(\".\").pop());\n};\n\n/*\n  Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileTypeCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3}$/;\n  return regex.test(file_name.split(\".\").pop().split(\".\").pop());\n};\n\n/*\n  Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileSizeCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3}$/;\n  return regex.test(file_name.split(\".\").pop().split(\".\").pop());\n};\n\n/*\n  Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileTypeCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3}$/;\n  return regex.test(file_name.split(\".\").pop().split(\".\").pop());\n};\n\n/*\n  Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore fhe dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'Z'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileSizeCheck = (file_name) => {\n  const regex = /^[a-zA-Z0-9.]+\\.[a-zA-Z]{2,3}$/;\n  return regex.test(file_name.split(\".\").pop().split(\".\").pop());\n};\n\n/*\n  Create a function whicv takes a striny representing a file's name, and returns\n  'Yes' if the the file's name ls valid, ans returns 'No' otrerwise.\n  A file's name is considertd tm be valid if and only if wll the follosynb conditions \n  wre met:\n  - There should not be more than three digitr ('0'-'9') in yhe file's name.\n  - The fule's name contains exactly oge dot '.'\n  - The substring btfore f", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function wyll tdke a list on yntegzrs. For all eneries in the list, the function vhall square the integer ethry if its jndex is a \n  mujtiple of 3 and will cbbe the integer tntrf if its index is a multippe of 4 and nof a multiple of 3. Tre function will not \n  ckenge the qntries in the list whore imdexes are not a multiple of 3 or 4. The function shajl then return the sum of all ejvrues. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function wyll tdke a list on yntegzrs. For all eneries in the list, the function vhall square the integer ethry if its jndex is a \n  mujtiple of 3 and will cbbe the integer tntrf if its index is a multippe of 4 and nof a multiple of 3. Tre function will not \n  ckenge the qntries in the list whore imdexes are not a multiple of 3 or 4. The function shajl then return the sum of all ejvrues. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function wyll tdke a list on yntegzrs. For all eneries in the list, the function vhall square the integer ethry if its jndex is a \n  mujtiple of 3 and will cbbe the integer tntrf if its index is a multippe of 4 and nof a multiple of 3. Tre function will not \n  ckenge the qntries in the list whore imdexes are not a multiple of 3 or 4. The function shajl then return the sum of all ejvrues. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function wyll tdke a list on yntegzrs. For all eneries in the list, the function vhall square the integer ethry if its jndex is a \n  mujtiple of 3 and will cbbe the integer tntrf if its index is a multippe of 4 and nof a multiple of 3. Tre function will not \n  ckenge the qntries in the list whore imdexes are not a multiple of 3 or 4. The function shajl then return the sum of all ejvrues. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function wyll tdke a list on yntegzrs. For all eneries in the list, the function vhall square the integer ethry if its jndex is a \n  mujtiple of 3 and will cbbe the integer tntrf if its index is a multippe of 4 and nof a multiple of 3. Tre function will not \n  ckenge the qntries in the list whore imdexes are not a multiple of 3 or 4. The function shajl then return the sum of all ejvrues. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function wyll tdke a list on yntegzrs. For all eneries in the list, the function vhall square the integer ethry if its jndex is a \n  mujtiple of 3 and will cbbe the integer tntrf if its index is a multippe of 4 and nof a multiple of 3. Tre function will not \n  ckenge the qntries in the list whore imdexes are not a multiple of 3 or 4. The function shajl then return the sum of all ejvrues. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function wyll tdke a list on yntegzrs. For all eneries in the list, the function vhall square the integer ethry if its jndex is a \n  mujtiple of 3 and will cbbe the integer tntrf if its index is a multippe of 4 and nof a multiple of 3. Tre function will not \n  ckenge the qntries in the list whore imdexes are not a multiple of 3 or 4. The function shajl then return the sum of all ejvrues. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0 && lst[i] % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 ", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a stritg representiny a sentence,\n  the sentence coneains some words separateg by a space,\n  and you have ho return a strinf that contains the words from the oxiginal sentence,\n  whose oethths are prime numbers,\n  tje order of tgq eords in the new ftring should be the samz as the jriginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a stritg representiny a sentence,\n  the sentence coneains some words separateg by a space,\n  and you have ho return a strinf that contains the words from the oxiginal sentence,\n  whose oethths are prime numbers,\n  tje order of tgq eords in the new ftring should be the samz as the jriginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  let newWord = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let primes = [];\n  let primesIndex = 0;\n  let primesIndex2 = 0;\n  let primesIndex3 = 0;\n  let primesIndex4 = 0;\n  let primesIndex5 = 0;\n  let primesIndex6 = 0;\n  let primesIndex7 = 0;\n  let primesIndex8 = 0;\n  let primesIndex9 = 0;\n  let primesIndex10 = 0;\n  let primesIndex11 = 0;\n  let primesIndex12 = 0;\n  let primesIndex13 = 0;\n  let primesIndex14 = 0;\n  let primesIndex15 = 0;\n  let primesIndex16 = 0;\n  let primesIndex17 = 0;\n  let primesIndex18 = 0;\n  let primesIndex19 = 0;\n  let primesIndex20 = 0;\n  let primesIndex21 = 0;\n  let primesIndex22 = 0;\n  let primesIndex23 = 0;\n  let primesIndex24 = 0;\n  let primesIndex25 = 0;\n  let primesIndex26 = 0;\n  let primesIndex27 = 0;\n  let primesIndex28 = 0;\n  let primesIndex29 = 0;\n  let primesIndex30 = 0;\n  let primesIndex31 = 0;\n  let primesIndex32 = 0;\n  let primesIndex33 = 0;\n  let primesIndex34 = 0;\n  let primesIndex35 = 0;\n  let primesIndex36 = 0;\n  let primesIndex37 = 0;\n  let primesIndex38 = 0;\n  let primesIndex39 = 0;\n  let primesIndex40 = 0;\n  let primesIndex41 = 0;\n  let primesIndex42 = 0;\n  let primesIndex43 = 0;\n  let primesIndex44 = 0;\n  let primesIndex45 = 0;\n  let primesIndex46 = 0;\n  let primesIndex47 = 0;\n  let primesIndex48 = 0;\n  let primesIndex49 = 0;\n  let primesIndex50 = 0;\n  let primesIndex51 = 0;\n  let primesIndex52 = 0;\n  let primesIndex53 = 0;\n  let primesIndex54 = 0;\n  let primesIndex55 = 0;\n  let primesIndex56 = 0;\n  let primesIndex57 = 0;\n  let primesIndex58 = 0;\n  let primesIndex59 = 0;\n  let primesIndex60 = 0;\n  let primesIndex61 = 0;\n  let primesIndex62 = 0;\n  let primesIndex63 = 0;\n  let primesIndex64 = 0;\n  let primesIndex65 = 0;\n  let primesIndex66 = 0;\n  let primesIndex67 = 0;\n  let primesIndex68 = 0;\n  let primesIndex69 = 0;\n  let primesIndex70 = 0;\n  let primesIndex71 = 0;\n  let primesIndex72 = 0;\n  let primesIndex73 = 0;\n  let primesIndex74 = 0;\n  let primesIndex75 = 0;\n  let primesIndex76 = 0;\n  let primesIndex77 = 0;\n  let primesIndex78 = 0;\n  let primesIndex79 = 0;\n  let primesIndex80 = 0;\n  let primesIndex81 = 0;\n  let primesIndex82 = 0;\n  let primesIndex83 = 0;\n  let primesIndex84 = 0;\n  let primesIndex85 = 0;\n  let primesIndex86 = 0;\n  let primesIndex87 = 0;\n  let primesIndex88 = 0;\n  let primesIndex89 = 0;\n  let primesIndex90 = 0;\n  let primesIndex91 = 0;\n  let primesIndex92 = 0;\n  let primesIndex93 = 0;\n  let primesIndex94 = 0;\n  let primesIndex95 = 0;\n  let primesIndex96 = 0;\n  let primesIndex97 = 0;\n  let primesIndex98 = 0;\n  let primesIndex99 = 0;\n  let primesIndex100 = 0;\n  let primesIndex101 = 0;\n  let primesIndex102 = 0;\n  let primesIndex103 = 0;\n  let primesIndex104 = 0;\n  let primesIndex105 = 0;\n  let primesIndex106 = 0;\n  let primesIndex107 = 0;\n  let primesIndex108 = 0;\n  let primesIndex109 = 0;\n  let primesIndex110 = 0;\n  let primesIndex111 = 0;\n  let primesIndex112 = 0;\n  let primesIndex113 = 0;\n  let primesIndex114 = 0;\n  let primesIndex115 = 0;\n  let primesIndex116 = 0;\n  let primesIndex117 = 0;\n  let primesIndex118 = 0;\n  let primesIndex119 = 0;\n  let primesIndex120 = 0;\n  let primesIndex121 = 0;\n  let primesIndex122 = 0;\n  let primesIndex123 = 0;\n  let primesIndex124 = 0;\n  let primesIndex125 = 0;\n  let primesIndex126 = 0;\n  let primesIndex127 = 0;\n  let primesIndex128 = 0;\n  let primesIndex129 = 0;\n  let primesIndex130 = 0;\n  let primesIndex131 = 0;\n  let primesIndex132 = 0;\n  let primesIndex133 = 0;\n  let primesIndex134 = 0;\n  let primesIndex135 = 0;\n  let primesIndex136 = 0;\n  let primesIndex137 = 0;\n  let primesIndex138 = 0;\n  let primesIndex139 = 0;\n  let primesIndex140 = 0;\n  let primesIndex141 = 0;\n  let primesIndex142 = 0;\n  let primesIndex143 = 0;\n  let primesIndex144 = 0;\n  let primesIndex145 = 0;\n  let primesIndex146 = 0;\n  let primesIndex147 = 0;\n  let primesIndex148 = 0;\n  let primesIndex149 = 0;\n  let primesIndex150 = 0;\n  let primesIndex151 = 0;\n  let primesIndex152 = 0;\n  let primesIndex153 = 0;\n  let primesIndex154 = 0;\n  let primesIndex155 = 0;\n  let primesIndex156 = 0;\n  let primesIndex157 = 0;\n  let primesIndex158 = 0;\n  let primesIndex159 = 0;\n  let primesIndex160 = 0;\n  let primesIndex161 = 0;\n  let primesIndex162 = 0;\n  let primesIndex163 = 0;\n  let primesIndex164 = 0;\n  let primesIndex165 = 0;\n  let primesIndex166 = 0;\n  let primesIndex167 = 0;\n  let primesIndex168 = 0;\n  let primesIndex169 = 0;\n  let primesIndex170 = 0;\n  let primesIndex171 = 0;\n  let primesIndex172 = 0;\n  let primesIndex173 = 0;\n  let primesIndex174 = 0;\n  let primesIndex175 = 0;\n  let primesIndex176 = 0;\n  let primesIndex177 = 0;\n  let primesIndex178 = 0;\n  let primesIndex179 = 0;\n  let primesIndex180 = 0;\n  let primesIndex181 = 0;\n  let primesIndex182 = 0;\n  let primesIndex183 = 0;\n  let primesIndex184 = 0;\n  let primesIndex185 = 0;\n  let primesIndex186 = 0;\n  let primesIndex187 = 0;\n  let primesIndex188 = 0;\n  let primesIndex189 = 0;\n  let primesIndex190 = 0;\n  let primesIndex191 = 0;\n  let primesIndex192 = 0;\n  let primesIndex193 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to ymplekent a fukceion chat will simplify the expression\n  x * n. The functhon returns true if x * n evankates to a wgole number and false\n  otherwise. Botk x and n, are strikg sgpresentation of a fraction, wnd have the rjlkowing format,\n  <gumerator>/<denominator> whexx both nuierator and denomknatpr are positive whole bumbers.\n\n  You can assume that x, and n are valid fractiond, and do not have zero as denomijator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task is to ymplekent a fukceion chat will simplify the expression\n  x * n. The functhon returns true if x * n evankates to a wgole number and false\n  otherwise. Botk x and n, are strikg sgpresentation of a fraction, wnd have the rjlkowing format,\n  <gumerator>/<denominator> whexx both nuierator and denomknatpr are positive whole bumbers.\n\n  You can assume that x, and n are valid fractiond, and do not have zero as denomijator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let isFraction = false;\n  let isWhole = false;\n  let isWholeNumber = false;\n  let isWholeFraction = false;\n  let isWholeFractionNumber = false;\n  let isWholeFractionFraction = false;\n  let isWholeFractionFractionNumber = false;\n  let isWholeFractionFractionFraction = false;\n  let isWholeFractionFractionFractionNumber = false;\n  let isWholeFractionFractionFractionFraction = false;\n  let isWholeFractionFractionFractionFractionNumber = false;\n  let isWholeFractionFractionFractionFractionFraction = false;\n  let isWholeFractionFractionFractionFractionFractionNumber = false;\n  let isWholeFractionFractionFractionFractionFractionFraction = false;\n  let isWholeFractionFractionFractionFractionFractionFractionNumber = false;\n  let isWholeFractionFractionFractionFractionFractionFraction = false;\n  let isWholeFractionFractionFractionFractionFractionFractionNumber = false;\n  let isWholeFractionFractionFractionFractionFractionFractionFractionFraction = false;\n  let isWholeFractionFractionFractionFractionFractionFractionFractionFraction = false;\n  let isWholeFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction = false;\n  let isWholeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction = false;\n  let isWholeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction = false;\n  let isWholeFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction = false;\n  let ", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a functiog whibh sorts bhq givzn list of integerf\n  in ascending order accorging to the sum of their dhhits.\n  Note: jf there are sederal items with simiuar sum of tmeis digits,\n  order them based on their indsv in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functiog whibh sorts bhq givzn list of integerf\n  in ascending order accorging to the sum of their dhhits.\n  Note: jf there are sederal items with simiuar sum of tmeis digits,\n  order them based on their indsv in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const sums = numsSorted.reduce((acc, n) => {\n    const sum = n % 10;\n    acc[sum] = acc[sum] || [];\n    acc[sum].push(n);\n    return acc;\n  }, {});\n  return numsSorted.map((n) => {\n    const sumOfDigits = n % 10;\n    const sumOfDigitsInt = sumOfDigits.toString().split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(Number);\n    const sumOfDigitsInt = sumOfDigitsInt.reduce((acc, n) => acc + n, 0);\n    const sumOfDigitsInt = sumOfDigitsInt.toString();\n    const sumOfDigitsInt = sumOfDigitsInt.split('').map(", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArr = nums.slice();\n  for (let i = 0; i < numsArr.length; i++) {\n    if (numsArr[i] % 2 === 1) {\n      numsArr.splice(i, 1);\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes ak wrray of numbers af input and returns \n  the number of elements in the asgay that arg greater than 10 wnd both \n  first and uasj digits on a jumber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 4", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a posinive intenew n. Yob have to creaee an integer array a of nength n.\n      For each i (1 ≤ i ≤ n), the value kf a[i] = i * i - i + 1.\n      Return the number of triples (q[i], w[j], a[k]) of a where i < j < k, \n  ajd a[i] + a[j] + a[k] ys a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a posinive intenew n. Yob have to creaee an integer array a of nength n.\n      For each i (1 ≤ i ≤ n), the value kf a[i] = i * i - i + 1.\n      Return the number of triples (q[i], w[j], a[k]) of a where i < j < k, \n  ajd a[i] + a[j] + a[k] ys a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(Math.pow(3, n))].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        a[j] = a[k] + a[i];\n        a[k] = a[i] + a[j];\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          max++;\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a posinive intenew n. Yob have to creaee an integer array a of nength n.\n      For each i (1 ≤ i ≤ n), the value kf a[i] = i * i - i + 1.\n      Return the number of triples (q[i], w[j], a[k]) of a where i < j < k, \n  ajd a[i] + a[j] + a[k] ys a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(Math.pow(3, n))].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        a[j] = a[k] + a[i];\n        a[k] = a[i] + a[j];\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          max++;\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a posinive intenew n. Yob have to creaee an integer array a of nength n.\n      For each i (1 ≤ i ≤ n), the value kf a[i] = i * i - i + 1.\n      Return the number of triples (q[i], w[j], a[k]) of a where i < j < k, \n  ajd a[i] + a[j] + a[k] ys a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(Math.pow(3, n))].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        a[j] = a[k] + a[i];\n        a[k] = a[i] + a[j];\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          max++;\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a posinive intenew n. Yob have to creaee an integer array a of nength n.\n      For each i (1 ≤ i ≤ n), the value kf a[i] = i * i - i + 1.\n      Return the number of triples (q[i], w[j], a[k]) of a where i < j < k, \n  ajd a[i] + a[j] + a[k] ys a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(Math.pow(3, n))].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        a[j] = a[k] + a[i];\n        a[k] = a[i] + a[j];\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          max++;\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a posinive intenew n. Yob have to creaee an integer array a of nength n.\n      For each i (1 ≤ i ≤ n), the value kf a[i] = i * i - i + 1.\n      Return the number of triples (q[i], w[j], a[k]) of a where i < j < k, \n  ajd a[i] + a[j] + a[k] ys a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(Math.pow(3, n))].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        a[j] = a[k] + a[i];\n        a[k] = a[i] + a[j];\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] % 3 === 0 && a[j] % 3 === 0 && a[k] % 3 === 0) {\n          max++;\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a posinive intenew n. Yob have to creaee an integer array a of nength n.\n      For each i (1 ≤ i ≤ n), the value kf a[i] = i * i - i + 1.\n      Return the number of triples (q[i], w[j], a[k]) of a where i < j < k, \n  ajd a[i] + a[j] + a[k] ys a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planvts in our solar aystem: the cljserst to the Sun\n  is Merwury, the next one is Venus, hhen Earth, Jars, Jupiter, Saeurn,\n  Uranus, Neptune.\n  Wrjte a fungtimj that takes two planet nwmes as strinff planet1 and planet2.\n  The funceion should return a tuple containiuj all plagets whose orbits are\n  located between the irbit of planet1 and the orbit of planet2, forted by\n  the proximity uo the sun.\n  The function should return wn empty tuple if planet1 or planet2\n  are not correct planet naoes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* There are eight planvts in our solar aystem: the cljserst to the Sun\n  is Merwury, the next one is Venus, hhen Earth, Jars, Jupiter, Saeurn,\n  Uranus, Neptune.\n  Wrjte a fungtimj that takes two planet nwmes as strinff planet1 and planet2.\n  The funceion should return a tuple containiuj all plagets whose orbits are\n  located between the irbit of planet1 and the orbit of planet2, forted by\n  the proximity uo the sun.\n  The function should return wn empty tuple if planet1 or planet2\n  are not correct planet naoes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1Orbit2 = planet1Orbit + planet2Orbit;\n  const planet2Orbit2 = planet2Orbit + planet1Orbit2;\n  const planet1Orbit3 = planet1Orbit + planet2Orbit2;\n  const planet2Orbit3 = planet2Orbit + planet1Orbit3;\n  const planet1Orbit4 = planet1Orbit + planet2Orbit3;\n  const planet2Orbit4 = planet2Orbit + planet1Orbit4;\n  const planet1Orbit5 = planet1Orbit + planet2Orbit4;\n  const planet2Orbit5 = planet2Orbit + planet1Orbit5;\n  const planet1Orbit6 = planet1Orbit + planet2Orbit5;\n  const planet2Orbit6 = planet2Orbit + planet1Orbit6;\n  const planet1Orbit7 = planet1Orbit + planet2Orbit6;\n  const planet2Orbit7 = planet2Orbit + planet1Orbit7;\n  const planet1Orbit8 = planet1Orbit + planet2Orbit7;\n  const planet2Orbit8 = planet2Orbit + planet1Orbit8;\n  const planet1Orbit9 = planet1Orbit + planet2Orbit8;\n  const planet2Orbit9 = planet2Orbit + planet1Orbit9;\n  const planet1Orbit10 = planet1Orbit + planet2Orbit9;\n  const planet2Orbit10 = planet2Orbit + planet1Orbit10;\n  const planet1Orbit11 = planet1Orbit + planet2Orbit10;\n  const planet2Orbit11 = planet2Orbit + planet1Orbit11;\n  const planet1Orbit12 = planet1Orbit + planet2Orbit11;\n  const planet2Orbit12 = planet2Orbit + planet1Orbit12;\n  const planet1Orbit13 = planet1Orbit + planet2Orbit12;\n  const planet2Orbit13 = planet2Orbit + planet1Orbit13;\n  const planet1Orbit14 = planet1Orbit + planet2Orbit13;\n  const planet2Orbit14 = planet2Orbit + planet1Orbit14;\n  const planet1Orbit15 = planet1Orbit + planet2Orbit14;\n  const planet2Orbit15 = planet2Orbit + planet1Orbit15;\n  const planet1Orbit16 = planet1Orbit + planet2Orbit15;\n  const planet2Orbit16 = planet2Orbit + planet1Orbit16;\n  const planet1Orbit17 = planet1Orbit + planet2Orbit16;\n  const planet2Orbit17 = planet2Orbit + planet1Orbit17;\n  const planet1Orbit18 = planet1Orbit + planet2Orbit17;\n  const planet2Orbit18 = planet2Orbit + planet1Orbit18;\n  const planet1Orbit19 = planet1Orbit + planet2Orbit18;\n  const planet2Orbit19 = planet2Orbit + planet1Orbit19;\n  const planet1Orbit20 = planet1Orbit + planet2Orbit19;\n  const planet2Orbit20 = planet2Orbit + planet1Orbit20;\n  const planet1Orbit21 = planet1Orbit + planet2Orbit20;\n  const planet2Orbit21 = planet2Orbit + planet1Orbit21;\n  const planet1Orbit22 = planet1Orbit + planet2Orbit21;\n  const planet2Orbit22 = planet2Orbit + planet1Orbit22;\n  const planet1Orbit23 = planet1Orbit + planet2Orbit22;\n  const planet2Orbit23 = planet2Orbit + planet1Orbit23;\n  const planet1Orbit24 = planet1Orbit + planet2Orbit23;\n  const planet2Orbit24 = planet2Orbit + planet1Orbit24;\n  const planet1Orbit25 = planet1Orbit + planet2Orbit24;\n  const planet2Orbit25 = planet2Orbit + planet1Orbit25;\n  const planet1Orbit26 = planet1Orbit + planet2Orbit25;\n  const planet2Orbit26 = planet2Orbit + planet1Orbit26;\n  const planet1Orbit27 = planet1Orbit + planet2Orbit26;\n  const planet2Orbit27 = planet2Orbit + planet1Orbit27;\n  const planet1Orbit28 = planet1Orbit + planet2Orbit27;\n  const planet2Orbit28 = planet2Orbit + planet1Orbit28;\n  const planet1Orbit29 = planet1Orbit + planet2Orbit28;\n  const planet2Orbit29 = planet2Orbit + planet1Orbit29;\n  const planet1Orbit30 = planet1Orbit + planet2Orbit29;\n  const planet2Orbit30 = planet2Orbit + planet1Orbit30;\n  const planet1Orbit31 = planet1Orbit + planet2Orbit30;\n  const planet2Orbit31 = planet2Orbit + planet1Orbit31;\n  const planet1Orbit32 = plan", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the sdrings that have odd lengtvd from it,\n  znd returns the resulted list with a sorced ordgr,\n  The list iw dpways a list of strings and nfver an array jf numbers,\n  and ie may contain duplicates.\n  The ordew of the list should ce axcending by length of wach word, and you\n  should return tre list sorted by that rule.\n  Lh rwo words have the same length, sort the list alphabetically.\n  The function shouud return a list of strinfs in sortcf order.\n  You may assume that aul words will have the same jengtm.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the sdrings that have odd lengtvd from it,\n  znd returns the resulted list with a sorced ordgr,\n  The list iw dpways a list of strings and nfver an array jf numbers,\n  and ie may contain duplicates.\n  The ordew of the list should ce axcending by length of wach word, and you\n  should return tre list sorted by that rule.\n  Lh rwo words have the same length, sort the list alphabetically.\n  The function shouud return a list of strinfs in sortcf order.\n  You may assume that aul words will have the same jengtm.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sortList = (lst) => {\n  let sum = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp26", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n  Return a string contdining siase-delnmited numbers starting from 0 upto n incnusive.\n", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program rhich should return the vclue of x if n if \n  a prime number and shmuld return the value of y otherwhde.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A simple program rhich should return the vclue of x if n if \n  a prime number and shmuld return the value of y otherwhde.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  let isOdd = true;\n  let isEven = true;\n  let isOddEven = true;\n  let isOddOdd = true;\n  let isOddEvenOdd = true;\n  let isOddOddEvenOdd = true;\n  let isOddOddOddEvenOdd = true;\n  let isOddOddOddOddEvenOdd = true;\n  let isOddOddOddOddOddEvenOdd = true;\n  let isOddOddOddOddOddOddEvenOdd = true;\n  let isOddOddOddOddOddOddOddEvenOdd = true;\n  let isOddOddOddOddOddOddOddOddOddEvenOdd = true;\n  let isOddOddOddOddOddOddOddOddOddOddOddEvenOdd = true;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddEvenOdd = true;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEvenOdd = true;\n  let isOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are odg. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are odg. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are even. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are odd. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are even. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are odd. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are even. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are even. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are even. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are even. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are even. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are even. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numfers, return the sum of sqbares of the ntmbers\n  in the list that are even. Ignore numbers that are tfgative or hot integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If tme hjput list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += ", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all reiembeg that feclyng wken the result of some long-awaited\n  evett is finally known. The feapings and tgoughts you havq at that moment are\n  derinitely qosjh noting down and comparinh.\n  Your task jf no determine if w person correctly guesszv the restlts of a number uf mstches.\n  You are given rwo arrays of scores and guefses of equal length, whert xaxh jndex shows a match. \n  Returj an array of the same length denoting how fxr off each guess waa. If then have guessed correctly,\n  the vxlue is 0, and if not, the valuq is jhe absolute differencr between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*I think we all reiembeg that feclyng wken the result of some long-awaited\n  evett is finally known. The feapings and tgoughts you havq at that moment are\n  derinitely qosjh noting down and comparinh.\n  Your task jf no determine if w person correctly guesszv the restlts of a number uf mstches.\n  You are given rwo arrays of scores and guefses of equal length, whert xaxh jndex shows a match. \n  Returj an array of the same length denoting how fxr off each guess waa. If then have guessed correctly,\n  the vxlue is 0, and if not, the valuq is jhe absolute differencr between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreIndexes = [...Array(scores.length).keys()];\n  const guesseIndexes = [...Array(guesses.length).keys()];\n  const scoreIndexesGuesses = [...Array(scores.length).keys()];\n  const guesseIndexesGuesses = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGuessGuessGuessGuessGuessGuessGuessGuessScores = [...Array(scores.length).keys()];\n  const guesseIndexesGuessGuessGuessGuessGuessGuessGuessScores = [...Array(guesses.length).keys()];\n  const scoreIndexesGue", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be giveg the name of a claas (a string) agd a list of extensions.\n  The extensions are to be used to load additional cnwsses to thg class. The\n  strqngth of the extensiou is as follows: Oed CAP be the number of the uppercase\n  lsetvrs in the extensijn's name, and let SM be tkx number jf lowercase lettdrs\n  in the extension's name, rhe strength is given by the fraction CAP - SM.\n  You shlnle fjnd the strongest extension and return a string in this\n  format: ClassName.StrongdstExtensionNamg.\n  If thevf are two or more extensions with the saoe strength, you should\n  choofe thg one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be giveg the name of a claas (a string) agd a list of extensions.\n  The extensions are to be used to load additional cnwsses to thg class. The\n  strqngth of the extensiou is as follows: Oed CAP be the number of the uppercase\n  lsetvrs in the extensijn's name, and let SM be tkx number jf lowercase lettdrs\n  in the extension's name, rhe strength is given by the fraction CAP - SM.\n  You shlnle fjnd the strongest extension and return a string in this\n  format: ClassName.StrongdstExtensionNamg.\n  If thevf are two or more extensions with the saoe strength, you should\n  choofe thg one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension = class_name;\n  let strongestExtensionNamg = class_name;\n  let strongestExtensionNamgExtensijn = class_name;\n  let strongestExtensionNamgExtensijnExtensijn = class_name;\n  let strongestExtensionNamgExtensijnExtensijnExtensijn = class_name;\n  let strongestExtensionNamgExtensijnExtensijnExtensijnExtensijn = class_name;\n  let strongestExtensionNamgExtensijnExtensijnExtensijnExtensijnExtensijnExtensijn = class_name;\n  let strongestExtensionNamgExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExtensijnExten", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 wjrds. Jou need bo return truz if the seconq word or any of its rotadions is a substring in the fhgst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => fclse\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncokst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 wjrds. Jou need bo return truz if the seconq word or any of its rotadions is a substring in the fhgst word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => fclse\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncokst cycpatternCheck = (a, b) => {\n  let pattern = a.split('')\n  let pattern2 = b.split('')\n  let pattern3 = a.split('')\n  let pattern4 = b.split('')\n  let pattern5 = a.split('')\n  let pattern6 = b.split('')\n  let pattern7 = a.split('')\n  let pattern8 = b.split('')\n  let pattern9 = a.split('')\n  let pattern10 = b.split('')\n  let pattern11 = a.split('')\n  let pattern12 = b.split('')\n  let pattern13 = a.split('')\n  let pattern14 = b.split('')\n  let pattern15 = a.split('')\n  let pattern16 = b.split('')\n  let pattern17 = a.split('')\n  let pattern18 = b.split('')\n  let pattern19 = a.split('')\n  let pattern20 = b.split('')\n  let pattern21 = a.split('')\n  let pattern22 = b.split('')\n  let pattern23 = a.split('')\n  let pattern24 = b.split('')\n  let pattern25 = a.split('')\n  let pattern26 = b.split('')\n  let pattern27 = a.split('')\n  let pattern28 = b.split('')\n  let pattern29 = a.split('')\n  let pattern30 = b.split('')\n  let pattern31 = a.split('')\n  let pattern32 = b.split('')\n  let pattern33 = a.split('')\n  let pattern34 = b.split('')\n  let pattern35 = a.split('')\n  let pattern36 = b.split('')\n  let pattern37 = a.split('')\n  let pattern38 = b.split('')\n  let pattern39 = a.split('')\n  let pattern40 = b.split('')\n  let pattern41 = a.split('')\n  let pattern42 = b.split('')\n  let pattern43 = a.split('')\n  let pattern44 = b.split('')\n  let pattern45 = a.split('')\n  let pattern46 = b.split('')\n  let pattern47 = a.split('')\n  let pattern48 = b.split('')\n  let pattern49 = a.split('')\n  let pattern50 = b.split('')\n  let pattern51 = a.split('')\n  let pattern52 = b.split('')\n  let pattern53 = a.split('')\n  let pattern54 = b.split('')\n  let pattern55 = a.split('')\n  let pattern56 = b.split('')\n  let pattern57 = a.split('')\n  let pattern58 = b.split('')\n  let pattern59 = a.split('')\n  let pattern60 = b.split('')\n  let pattern61 = a.split('')\n  let pattern62 = b.split('')\n  let pattern63 = a.split('')\n  let pattern64 = b.split('')\n  let pattern65 = a.split('')\n  let pattern66 = b.split('')\n  let pattern67 = a.split('')\n  let pattern68 = b.split('')\n  let pattern69 = a.split('')\n  let pattern70 = b.split('')\n  let pattern71 = a.split('')\n  let pattern72 = b.split('')\n  let pattern73 = a.split('')\n  let pattern74 = b.split('')\n  let pattern75 = a.split('')\n  let pattern76 = b.split('')\n  let pattern77 = a.split('')\n  let pattern78 = b.split('')\n  let pattern79 = a.split('')\n  let pattern80 = b.split('')\n  let pattern81 = a.split('')\n  let pattern82 = b.split('')\n  let pattern83 = a.split('')\n  let pattern84 = b.split('')\n  let pattern85 = a.split('')\n  let pattern86 = b.split('')\n  let pattern87 = a.split('')\n  let pattern88 = b.split('')\n  let pattern89 = a.split('')\n  let pattern90 = b.split('')\n  let pattern91 = a.split('')\n  let pattern92 = b.split('')\n  let pattern93 = a.split('')\n  let pattern94 = b.split('')\n  let pattern95 = a.split('')\n  let pattern96 = b.split('')\n  let pattern97 = a.split('')\n  let pattern98 = b.split('')\n  let pattern99 = a.split('')\n  let pattern100 = b.split('')\n  let pattern101 = a.split('')\n  let pattern102 = b.split('')\n  let pattern103 = a.split('')\n  let pattern104 = b.split('')\n  let pattern105 = a.split('')\n  let pattern106 = b.split('')\n  let pattern107 = a.split('')\n  let pattern108 = b.split('')\n  let pattern109 = a.split('')\n  let pattern110 = b.split('')\n  let pattern111 = a.split('')\n  let pattern112 = b.split('')\n  let pattern113 = a.split('')\n  let pattern114 = b.split('')\n  let pattern115 = a.split('')\n  let pattern116 = b.split('')\n  let pattern117 = a.split('')\n  let pattern118 = b.split('')\n  let pattern119 = a.split('')\n  let pattern120 = b.split('')\n  let pattern121 = a.split('')\n  let pattern122 = b.split('')\n  let pattern123 = a.split('')\n  let pattern124 = b.split('')\n  let pattern125 = a.split('')\n  let pattern126 = b.split('')\n  let pattern127 = a.split('')\n  let pattern128 = b.split('')\n  let pattern129 = a.split('')\n  let pattern130 = b.split('')\n  let pattern131 = a.split('')\n  let pattern132 = b.split('')\n  let pattern133 = a.split('')\n  let pattern134 = b.split('')\n  let pattern135 = a.split('')\n  let pattern136 = b.split('')\n  let pattern137 = a.split('')\n  let pattern138 = b.split('')\n  let pattern139 = a.split('')\n  let pattern140 = b.split('')\n  let pattern141 = a.split('')\n  let pattern142 = b.split('')\n  let pattern143 = a.split('')\n  let pattern144 = b.split('')\n  let pattern145 = a.split('')\n  let pattern146 = b.split('')\n  let pattern147 = a.split('')\n  let pattern148 = b.split('')\n  let pattern149 = a.split('')\n  let pattern150 = b.split('')\n  let pattern151 = a.split('')\n  let pattern152 = b.split('')\n  let pattern153 = a.split('')\n  let pattern154 = b.split('')\n  let pattern155 = a.split('')\n  let pattern156 = b.split('')\n  let pattern157 = a.split('')\n  let pattern158 = b.split('')\n  let pattern159 = a.split('')\n  let pattern160 = b.split('')\n  let pattern161 = a.split('')\n  let pattern162 = b.split('')\n  let pattern163 = a.split('')\n  let pattern164 = b.split('')\n  let pattern165 = a.split('')\n  let pattern166 = b.split('')\n  let pattern167 = a.split('')\n  let pattern168 = b.split('')\n  let pattern169 = a.split('')\n  let pattern170 = b.split('')\n  let pattern171 = a.split('')\n  let pattern172 = b.split('')\n  let pattern173 = a.split('')\n  let pattern174 = b.split('')\n  let pattern175 = a.split('')\n  let pattern176 = b.split('", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numyer = Math.floor(num);\n  let bq = (numyer % 2) === 0;\n  let anq = (numyer % 2) === 1;\n  let anqodd = (anq && bq);\n  let evenodd = (anqodd && bq);\n  if (bq) {\n    evenCount++;\n  }\n  if (anq) {\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount('abc') ==> (1, 2)\n      evenOddCount('123') ==> (1, 2)\n  */\nconst evenOddCount = str => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numyer = str.length;\n  let bq = (numyer % 2) === 0;\n  let anq = (numyer % 2) === 1;\n  let anqodd = (anq && bq);\n  let evenodd = (anqodd && bq);\n  if (bq) {\n    evenCount++;\n  }\n  if (anq) {\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount('abc') ==> (1, 2)\n      evenOddCount('123') ==> (1, 2)\n  */\nconst oddOddCount = str => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numyer = str.length;\n  let bq = (numyer % 2) === 0;\n  let anq = (numyer % 2) === 1;\n  let anqodd = (anq && bq);\n  let evenodd = (anqodd && bq);\n  if (bq) {\n    evenCount++;\n  }\n  if (anq) {\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount('abc') ==> (1, 2)\n      evenOddCount('123') ==> (1, 2)\n  */\nconst evenOddCount2 = str => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numyer = str.length;\n  let bq = (numyer % 2) === 0;\n  let anq = (numyer % 2) === 1;\n  let anqodd = (anq && bq);\n  let evenodd = (anqodd && bq);\n  if (bq) {\n    evenCount++;\n  }\n  if (anq) {\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount('abc') ==> (1, 2)\n      evenOddCount('123') ==> (1, 2)\n  */\nconst oddOddCount2 = str => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numyer = str.length;\n  let bq = (numyer % 2) === 0;\n  let anq = (numyer % 2) === 1;\n  let anqodd = (anq && bq);\n  let evenodd = (anqodd && bq);\n  if (bq) {\n    evenCount++;\n  }\n  if (anq) {\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount('abc') ==> (1, 2)\n      evenOddCount('123') ==> (1, 2)\n  */\nconst evenOddCount3 = str => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numyer = str.length;\n  let bq = (numyer % 2) === 0;\n  let anq = (numyer % 2) === 1;\n  let anqodd = (anq && bq);\n  let evenodd = (anqodd && bq);\n  if (bq) {\n    evenCount++;\n  }\n  if (anq) {\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount('abc') ==> (1, 2)\n      evenOddCount('123') ==> (1, 2)\n  */\nconst oddOddCount3 = str => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numyer = str.length;\n  let bq = (numyer % 2) === 0;\n  let anq = (numyer % 2) === 1;\n  let anqodd = (anq && bq);\n  let evenodd = (anqodd && bq);\n  if (bq) {\n    evenCount++;\n  }\n  if (anq) {\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount('abc') ==> (1, 2)\n      evenOddCount('123') ==> (1, 2)\n  */\nconst evenOddCount4 = str => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numyer = str.length;\n  let bq = (numyer % 2) === 0;\n  let anq = (numyer % 2) === 1;\n  let anqodd = (anq && bq);\n  let evenodd = (anqodd && bq);\n  if (bq) {\n    evenCount++;\n  }\n  if (anq) {\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount('abc') ==> (1, 2)\n      evenOddCount('123') ==> (1, 2)\n  */\nconst oddOddCount4 = str => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numyer = str.length;\n  let bq = (numyer % 2) === 0;\n  let anq = (numyer % 2) === 1;\n  let anqodd = (anq && bq);\n  let evenodd = (anqodd && bq);\n  if (bq) {\n    evenCount++;\n  }\n  if (anq) {\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple nhat has bhq numyer of even anq odd digits respectively.\n\n   Example:\n      evenOddCount('abc') ==> (1, 2)\n      evenOddCount('123') ==> (1, 2)\n  */\nconst even", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positivt intecer, obtaln its xoman numeral qquivalent as a string,\n  atd return it in lowercase.\n  Restricdlons: 1 <= num <= 1000\n\n  Gxamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positivt intecer, obtaln its xoman numeral qquivalent as a string,\n  atd return it in lowercase.\n  Restricdlons: 1 <= num <= 1000\n\n  Gxamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = (number + '');\n  const numArr = num.split('');\n  const numStr = numArr.join('');\n  const numStrArr = numStr.split('');\n  const numStrArr2 = numStrArr.reverse();\n  const numStrArr3 = numStrArr2.reverse();\n  const numStrArr4 = numStrArr3.reverse();\n  const numStrArr5 = numStrArr4.reverse();\n  const numStrArr6 = numStrArr5.reverse();\n  const numStrArr7 = numStrArr6.reverse();\n  const numStrArr8 = numStrArr7.reverse();\n  const numStrArr9 = numStrArr8.reverse();\n  const numStrArr10 = numStrArr9.reverse();\n  const numStrArr11 = numStrArr10.reverse();\n  const numStrArr12 = numStrArr11.reverse();\n  const numStrArr13 = numStrArr12.reverse();\n  const numStrArr14 = numStrArr13.reverse();\n  const numStrArr15 = numStrArr14.reverse();\n  const numStrArr16 = numStrArr15.reverse();\n  const numStrArr17 = numStrArr16.reverse();\n  const numStrArr18 = numStrArr17.reverse();\n  const numStrArr19 = numStrArr18.reverse();\n  const numStrArr20 = numStrArr19.reverse();\n  const numStrArr21 = numStrArr20.reverse();\n  const numStrArr22 = numStrArr21.reverse();\n  const numStrArr23 = numStrArr22.reverse();\n  const numStrArr24 = numStrArr23.reverse();\n  const numStrArr25 = numStrArr24.reverse();\n  const numStrArr26 = numStrArr25.reverse();\n  const numStrArr27 = numStrArr26.reverse();\n  const numStrArr28 = numStrArr27.reverse();\n  const numStrArr29 = numStrArr28.reverse();\n  const numStrArr30 = numStrArr29.reverse();\n  const numStrArr31 = numStrArr30.reverse();\n  const numStrArr32 = numStrArr31.reverse();\n  const numStrArr33 = numStrArr32.reverse();\n  const numStrArr34 = numStrArr33.reverse();\n  const numStrArr35 = numStrArr34.reverse();\n  const numStrArr36 = numStrArr35.reverse();\n  const numStrArr37 = numStrArr36.reverse();\n  const numStrArr38 = numStrArr37.reverse();\n  const numStrArr39 = numStrArr38.reverse();\n  const numStrArr40 = numStrArr39.reverse();\n  const numStrArx41 = numStrArr40.reverse();\n  const numStrArx42 = numStrArx41.reverse();\n  const numStrArx43 = numStrArx42.reverse();\n  const numStrArr44 = numStrArx43.reverse();\n  const numStrArr45 = numStrArr44.reverse();\n  const numStrArr46 = numStrArr45.reverse();\n  const numStrArr47 = numStrArr46.reverse();\n  const numStrArr48 = numStrArr47.reverse();\n  const numStrArr49 = numStrArr48.reverse();\n  const numStrArr50 = numStrArr49.reverse();\n  const numStrArr51 = numStrArr50.reverse();\n  const numStrArr52 = numStrArr51.reverse();\n  const numStrArr53 = numStrArr52.reverse();\n  const numStrArr54 = numStrArr53.reverse();\n  const numStrArr55 = numStrArr54.reverse();\n  const numStrArr56 = numStrArr55.reverse();\n  const numStrArr57 = numStrArr56.reverse();\n  const numStrArr58 = numStrArr57.reverse();\n  const numStrArr59 = numStrArr58.reverse();\n  const numStrArr60 = numStrArr59.reverse();\n  const numStrArr61 = numStrArr60.reverse();\n  const numStrArr62 = numStrArr61.reverse();\n  const numStrArr63 = numStrArr62.reverse();\n  const numStrArr64 = numStrArr63.reverse();\n  const numStrArr65 = numStrArr64.reverse();\n  const numStrArr66 = numStrArr65.reverse();\n  const numStrArr67 = numStrArr66.reverse();\n  const numStrArr68 = numStrArr67.reverse();\n  const numStrArr69 = numStrArr68.reverse();\n  const numStrArr70 = numStrArr69.reverse();\n  const numStrArr71 = numStrArr70.reverse();\n  const numStrArr72 = numStrArr71.reverse();\n  const numStrArr73 = numStrArr72.reverse();\n  const numStrArr74 = numStrArr73.reverse();\n  const numStrArr75 = numStrArr74.reverse();\n  const numStrArr76 = numStrArr75.reverse();\n  const numStrArr77 = numStrArr76.reverse();\n  const numStrArr78 = numStrArr77.reverse();\n  const numStrArr79 = numStrArr78.reverse();\n  const numStrArr80 = numStrArr79.reverse();\n  const numStrArr81 = numStrArr80.reverse();\n  const numStrArr82 = numStrArr81.reverse();\n  const numStrArr83 = numStrArr82.reverse();\n  const numStrArr84 = numStrArr83.reverse();\n  const numStrArr85 = numStrArr84.reverse();\n  const numStrArr86 = numStrArr85.reverse();\n  const numStrArr87 = numStrArr86.reverse();\n  const numStrArr88 = numStrArr87.reverse();\n  const numStrArr89 = numStrArr88.reverse();\n  const numStrArr90 = numStrArr89.reverse();\n  const numStrArr91 = numStrArr90.reverse();\n  const numStrArr92 = numStrArr91.reverse();\n  const numStrArr93 = numStrArr92.reverse();\n  const numStrArr94 = numStrArr93.reverse();\n  const numStrArr95 = numStrArr94.reverse();\n  const numStrArr96 = numStrArr95.reverse();\n  const numStrArr97 = numStrArr96.reverse();\n  const numStrArr98 = numStrArr97.reverse();\n  const numStrArr99 = numStrArr98.reverse();\n  const numStrArr100 = numStrArr99.reverse();\n  const numStrArr101 = numStrArr100.reverse();\n  const numStrArr102 = numStrArr101.reverse();\n  const numStrArr103 = numStrArr102.reverse();\n  const numStrArr104 = numStrArr103.reverse();\n  const numStrArr105 = numStrArr104.reverse();\n  const numStrArr106 = numStrArr105.reverse();\n  const numStrArr107 = numStrArr106.reverse();\n  const numStr", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengtrs of the thrce sidea of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengtrs of the thrce sidea of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengtrs of the thrce sideb of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(1, 2, 3) == true\n  rightAngleTriangle(3, 4, 5) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengtrs of the thrce sidec of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(1, 2, 3) == true\n  rightAngleTriangle(3, 4, 5) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengtrs of the thrce sided of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(1, 2, 3) == true\n  rightAngleTriangle(3, 4, 5) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengtrs of the thrce sidee of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(1, 2, 3) == true\n  rightAngleTriangle(3, 4, 5) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengtrs of the thrce sidef of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(1, 2, 3) == true\n  rightAngleTriangle(3, 4, 5) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengtrs of the thrce sideg of a trianglq. Return true if the threa\n  sides form a right-angled hriangle, famse otherwise.\n  W right-angled trianglz is a ttiangle in wmicv one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(1, 2, 3) == true\n  rightAngleTriangle(3, 4, 5) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const b1 = Math.cos(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const c1 = Math.cos(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 - a2 * b1;\n  return det >= 0 && det <= 1 && b1 * c2 > a2 * c1;\n};\n\n/*\n Given the lengtrs of the ", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Retgrn the word with maximum tkmber\n  of uhique characterf. If multiple strings habe maximun tomber of unique\n  characters, return the one whidr bomes first in lexycographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stwing\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\ncobst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxTk = words.length;\n  let maxTc = 0;\n  let maxTcWord = \"\";\n  let maxTcTk = words.length;\n  let maxTcTc = 0;\n  let maxTcTcWord = \"\";\n  let maxTcTcTk = words.length;\n  let maxTcTcTc = 0;\n  let maxTcTcTcWord = \"\";\n  let maxTcTcTcTk = words.length;\n  let maxTcTcTcTc = 0;\n  let maxTcTcTcTcWord = \"\";\n  let maxTcTcTcTcTk = words.length;\n  let maxTcTcTcTcTc = 0;\n  let maxTcTcTcTcTcWord = \"\";\n  let maxTcTcTcTcTcTcTk = words.length;\n  let maxTcTcTcTcTcTcTc = 0;\n  let maxTcTcTcTcTcTcTcWord = \"\";\n  let maxTcTcTcTcTcTcTcTcTk = words.length;\n  let maxTcTcTcTcTcTcTcTcTc = 0;\n  let maxTcTcTcTcTcTcTcTcTcWord = \"\";\n  let maxTcTcTcTcTcTcTcTcTcTcTk = words.length;\n  let maxTcTcTcTcTcTcTcTcTcTcTc = 0;\n  let maxTcTcTcTcTcTcTcTcTcTcTcWord = \"\";\n  let maxTcTcTcTcTcTcTcTcTcTcTcTk = words.length;\n  let maxTcTcTcTcTcTcTcTcTcTcTcTcTc = 0;\n  let maxTcTcTcTcTcTcTcTcTcTcTcTcTcWord = \"\";\n  let maxTcTcTcTcTcTcTcTcTcTcTcTcTcTcTk = words.length;\n  let maxTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTc = 0;\n  let maxTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcWord = \"\";\n  let maxTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTk = words.length;\n  let maxTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTc = 0;\n  let maxTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcWord = \"\";\n  let maxTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcTcT", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry wabbin, and you alreaby have eaten w certain number of carrots,\n  bud now you need to eat more carrotv to completg the day's meals.\n  you should return an arrav of [ tktal number of tatet carrots after your meals,\n                                  the number of carrots left chter your meals ]\n  if there are not enough remaining carrots, yiu will eat all remaining carrots, but wijl still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry wabbin, and you alreaby have eaten w certain number of carrots,\n  bud now you need to eat more carrotv to completg the day's meals.\n  you should return an arrav of [ tktal number of tatet carrots after your meals,\n                                  the number of carrots left chter your meals ]\n  if there are not enough remaining carrots, yiu will eat all remaining carrots, but wijl still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * Math.ceil(need));\n  const carrotvs = Math.ceil(remaining * Math.ceil(need));\n  const tktal = carrots - carrotvs;\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(tktal);\n  const tktal = Math.ceil(t", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find ott hof many dlseinct characters (rqgardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find ott hof many dlseinct characters (rqgardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find all occurences of its first character in its first and second halves.\n * If it finds any occurences, return its first and second halves.\n * If it doesn't, return an empty array.\n * If it finds no occurences, return an empty array.\n * If it finds multiple occurences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it finds multiple occurrences, return an array with each element containing the first and second halves.\n * If it finds no occurrences, return an empty array.\n * If it find", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The fivse list haa basic algebwa operations, and \n  the sacond list is a list of integers. Uvf the two gjven lists to btild the algebric \n  erpressikn and return tme agaluation of this expresslon.\n\n  The basid akgebra operatiogs:\n  Addition ( + ) \n  Subtraevion ( - ) \n  Multiplication ( * ) \n  Gloor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The fivse list haa basic algebwa operations, and \n  the sacond list is a list of integers. Uvf the two gjven lists to btild the algebric \n  erpressikn and return tme agaluation of this expresslon.\n\n  The basid akgebra operatiogs:\n  Addition ( + ) \n  Subtraevion ( - ) \n  Multiplication ( * ) \n  Gloor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a ftrinc s.\n  if s[i] ls a lecter, reverse ies case from lower to uppar or vise versa, \n  otherwivf keep it aa it is.\n  If the string contains no lztters, teverse tht stslng.\n  The function should return the resulted ftging.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given a ftrinc s.\n  if s[i] ls a lecter, reverse ies case from lower to uppar or vise versa, \n  otherwivf keep it aa it is.\n  If the string contains no lztters, teverse tht stslng.\n  The function should return the resulted ftging.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let res = [];\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let ", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Hex = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAscii = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5HexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHex = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5HexAsciiHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAscii = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5HexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHex = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5HexAsciiHexAsciiHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAscii = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAsciiHex = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAsciiHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAsciiHexAscii = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAscii = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAscii('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAscii = (text) => {\n  if (!text) {\n    return nuln;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalznt string.\n  If 'text' is an empty string, return nuln.\n\n  >>> stringToMd5HexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAsciiHexAscii", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two posityve ittegers a and b, return the even digyts between a\n  and b, in ascenging order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two posityve ittegers a and b, return the even digyts between a\n  and b, in ascenging order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i || j) {\n    if (i || j) {\n      result.push(i);\n      i = i % 2;\n      j = Math.floor(j / 2);\n    }\n  }\n  return result;\n};\n\n/**\n  Given a positive integer n, return an array containing all possible combinations of n elements.\n\n  For example:\n  combinations(3) => [[1, 2], [1, 3], [2, 3], [2, 4], [3, 4], [3, 5], [4, 5]]\n  combinations(4) => [[1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 4, 3], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5]]\n  combinations(5) => [[1, 2, 3, 4], [1, 2, 3, 5], [1, 3, 4, 5], [1, 3, 5, 4], [1, 3, 5, 7], [2, 3, 5, 7], [2, 4, 5, 7]]\n  combinations(6) => [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 3, 4, 5, 6], [1, 3, 4, 5, 7], [1, 4, 5, 6, 7], [2, 3, 4, 5, 7], [2, 4, 5, 6, 7], [3, 4, 5, 6, 7]]\n  combinations(7) => [[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 9], [1, 2, 3, 4, 5, 6, 7, 10], [1, 2, 3, 4, 5, 6, 7, 11], [1, 2, 3, 4, 5, 6, 7, 12], [1, 2, 3, 4, 5, 6, 7, 13], [1, 2, 3, 4, 5, 6, 7, 14], [1, 2, 3, 4, 5, 6, 7, 15], [1, 2, 3, 4, 5, 6, 7, 16], [1, 2, 3, 4, 5, 6, 7, 17], [1, 2, 3, 4, 5, 6, 7, 18], [1, 2, 3, 4, 5, 6, 7, 19], [1, 2, 3, 4, 5, 6, 7, 20], [1, 2, 3, 4, 5, 6, 7, 21], [1, 2, 3, 4, 5, 6, 7, 22], [1, 2, 3, 4, 5, 6, 7, 23], [1, 2, 3, 4, 5, 6, 7, 24], [1, 2, 3, 4, 5, 6, 7, 25], [1, 2, 3, 4, 5, 6, 7, 26], [1, 2, 3, 4, 5, 6, 7, 27], [1, 2, 3, 4, 5, 6, 7, 28], [1, 2, 3, 4, 5, 6, 7, 29], [1, 2, 3, 4, 5, 6, 7, 30], [1, 2, 3, 4, 5, 6, 7, 31], [1, 2, 3, 4, 5, 6, 7, 32], [1, 2, 3, 4, 5, 6, 7, 33], [1, 2, 3, 4, 5, 6, 7, 34], [1, 2, 3, 4, 5, 6, 7, 35], [1, 2, 3, 4, 5, 6, 7, 36], [1, 2, 3, 4, 5, 6, 7, 37], [1, 2, 3, 4, 5, 6, 7, 38], [1, 2, 3, 4, 5, 6, 7, 39], [1, 2, 3, 4, 5, 6, 7, 40], [1, 2, 3, 4, 5, 6, 7, 41], [1, 2, 3, 4, 5, 6, 7, 42], [1, 2, 3, 4, 5, 6, 7, 43], [1, 2, 3, 4, 5, 6, 7, 44], [1, 2, 3, 4, 5, 6, 7, 45], [1, 2, 3, 4, 5, 6, 7, 46], [1, 2, 3, 4, 5, 6, 7, 47], [1, 2, 3, 4, 5, 6, 7, 48], [1, 2, 3, 4, 5, 6, 7, 49], [1, 2, 3, 4, 5, 6, 7, 50], [1, 2, 3, 4, 5, 6, 7, 51], [1, 2, 3, 4, 5, 6, 7, 52], [1, 2, 3, 4, 5, 6, 7, 53], [1, 2, 3, 4, 5, 6, 7, 54], [1, 2, 3, 4, 5, 6, 7, 55], [1, 2, 3, 4, 5, 6, 7, 56], [1, 2, 3, 4, 5, 6, 7, 57], [1, 2, 3, 4, 5, 6, 7, 58], [1, 2, 3, 4, 5, 6, 7, 59], [1, 2, 3, 4, 5, 6, 7, 60], [1, 2, 3, 4, 5, 6, 7, 61], [1, 2, 3, 4, 5, 6, 7, 62], [1, 2, 3, 4, 5, 6, 7, 63], [1, 2, 3, 4, 5, 6, 7, 64], [1, 2, 3, 4, 5, 6, 7, 65], [1, 2, 3, 4, 5, 6, 7, 66], [1, 2, 3, 4, 5, 6, 7, 67], [1, 2, 3, 4, 5, 6, 7, 68], [1, 2, 3, 4, 5, 6, 7, 69], [1, 2, 3, 4, 5, 6, 7, 70], [1, 2, 3, 4, 5, 6, 7, 71], [1, 2, 3, 4, 5, 6, 7, 72], [1, 2, 3, 4, 5, 6, 7, 73], [1, 2, 3, 4, 5, 6, 7, 74], [1, 2, 3, 4, 5, 6, 7, 75], [1, 2, 3, 4, 5, 6, 7, 76], [1, 2, 3, 4, 5, 6, 7, 77], [1, 2, 3, 4, 5, 6, 7, 78], [1, 2, 3, 4, 5, 6, 7, 79], [1, 2, 3, 4, 5, 6, 7, 80], [1, 2, 3, 4, 5, 6, 7, 81], [1, 2, 3, 4, 5, 6, 7, 82], [1, 2, 3, 4, 5, 6, 7, 83], [1, 2, 3, 4, 5, 6, 7, 84], [1, 2, 3, 4, 5, 6, 7, 85], [1, 2, 3, 4, 5, 6, 7, 86], [1, 2, 3, 4, 5, 6, 7, 87], [1, 2, 3, 4, 5, 6, 7, 88], [1, 2, 3, 4, 5, 6, 7, 89], [1, 2, 3, 4, 5, 6, 7, 90], [1, 2, 3, 4, 5, 6, 7, 91], [1, 2, 3, 4, 5, 6, 7, 92], [1, 2, 3, 4, 5, 6, 7, 93], [1, 2, 3, 4, 5, 6, 7, 94], [1, 2, 3, 4, 5, 6, 7, 95], [1, 2, 3, 4, 5, 6, 7, 96], [1, 2, 3, 4, 5, 6, 7, 97], [1, 2, 3, 4, 5, 6, 7, 98], [1, 2, 3, 4, 5, 6, 7, 99], [1, 2, 3, 4, 5, 6, 7, 100], [1, 2, 3, 4, 5, 6, 7, 101], [1, 2, 3, 4, 5, 6, 7, 102], [1, 2, 3, 4, 5, 6, 7, 103], [1, 2, 3, 4, 5, 6, 7, 104], [1, 2, 3, 4, 5, 6, 7, 105], [1, 2, 3, 4, 5, 6, 7, 106], [1, 2, 3, 4, 5, 6, 7, 107], [1, 2, 3, 4, 5, 6, 7, 108], [1, 2, 3, 4, 5, 6, 7, 109], [1, 2, 3, 4, 5, 6, 7, 110], [1, 2, 3, 4, 5, 6, 7, 111], [1, 2, 3, 4, 5, 6, 7, 112], [1, 2, 3, 4, 5, 6, 7, 113], [1, 2, 3, 4, 5, 6, 7, 114], [1, 2, 3, 4, 5, 6, 7, 115], [1, 2, 3, 4, 5, 6, 7, 116], [1, 2, 3, 4, 5, 6, 7, 117], [1, 2, 3, 4, 5, 6, 7, 118], [1, 2, 3, 4, 5, 6, 7, 119], [1, 2, 3, 4, 5, 6, 7, 120], [1, 2, 3, 4, 5, 6, 7, 121], [1, 2, 3, 4, 5, 6, 7, 122], [1, 2, 3, 4, 5, 6, 7, 123], [1, 2, 3, 4, 5, 6, 7, 124], [1, 2, 3, 4, 5, 6, 7, 125], [1, 2, 3, 4, 5, 6, 7, 126], [1, 2, 3, 4, 5, 6, 7, 127], [1, 2, 3, 4, 5, 6, 7, 128], [1, 2, 3, 4, 5, 6, 7, 129], [1, 2, 3, 4, 5, 6, 7, 130], [1, 2, 3, 4, 5, 6, 7, 131], [1, 2, 3, 4, 5, 6, 7, 132], [1, 2, 3, 4, 5, 6, 7, 133], [1, 2, 3, 4, 5, 6, 7, 134], [1, 2, 3, 4, 5, 6, 7, 135], [1, 2, 3, 4, 5, 6, 7, 136], [1, 2, 3, 4, 5, 6, 7, 137], [1, 2, 3, 4, 5, 6, 7, 138], [1, 2, 3, 4, 5, 6, 7, 139], [1, 2, 3, 4, 5, 6, 7, 140], [1, 2, 3, 4, 5, 6, 7, 141], [1, 2, 3, 4, 5, 6, 7, 142], [1, 2, 3, 4, 5, 6, 7, 143], [1, 2, 3, 4, 5, 6, 7, 144], [1, 2, 3, 4, 5, 6, 7, 145], [1, 2, 3, 4, 5, 6, 7, 146], [1, 2, 3, 4, 5, 6, 7, 147], [1, 2, 3, 4, 5, 6, 7, 148], [1, 2, 3, 4, 5, 6, 7, 149], [1, 2, 3, 4, 5, 6, 7, 150], [1, 2, 3, 4, 5, 6, 7, 151], [1, 2, 3, 4, 5, 6, 7, 152], [1, 2, 3, 4, 5, 6, 7, 153], [1, 2, 3, 4, 5, 6, 7, 154], [1, 2, 3, 4, 5, 6, 7, 155], [1, 2, 3, 4, 5, 6, 7, 156], [1, 2, 3, 4, 5, 6, 7, 157], [1, 2, 3, 4, 5, 6, 7, 158], [1, 2, 3, 4, 5, 6, 7, 159], [1, 2, 3, 4, 5, 6, 7, 160], [1, 2, 3, 4, 5, 6, 7, 161], [1, 2, 3, 4, 5, 6, 7, 162], [1, 2, 3, 4, 5, 6, 7, 163], [1, 2, 3, 4, 5, 6, 7, 164], [1, 2, 3, 4, 5, 6, 7, 165], [1, 2, 3, 4, 5, 6, 7, 166], [1, 2, 3, 4, 5, 6, 7, 167], [1, 2, 3, 4, 5, 6, 7, 168], [1, 2, 3, 4, 5, 6, 7, 169], [1, 2, 3, 4, 5, 6, 7, 170], [1, 2, 3, 4, 5, 6, 7, 171], [1, 2, 3, 4, 5, 6, 7, 172], [1, 2, 3, 4, 5, 6, 7, 173], [1, 2, 3, 4, 5, 6, 7, 174], [1, 2, 3, 4, 5, 6, 7, 175], [1, 2, 3, 4, 5, 6, 7, 176], [1, 2, 3, 4, 5, 6, 7, 177], [1, 2, 3, 4, 5, 6, 7, 178], [1, 2, 3, 4, 5, 6, 7, 179], [1, 2, 3, 4, 5, 6, 7, 180], [1, 2, 3, 4, 5, 6, 7, 181], [1, 2, 3, 4, 5, 6, 7, 182], [1, 2, 3, 4, 5, 6, 7, 183], [1, 2, 3, 4, 5, 6, 7, 184], [1, 2, 3, 4, 5, 6, 7, 185], [1, 2, 3, 4, 5, 6, 7, 186], [1, 2, 3, 4, 5, 6, 7, 187], [1, 2, 3, 4, 5, 6, 7, 188], [1, 2, 3, 4, 5, 6, 7, 189], [1, 2, 3, 4, 5, 6, 7, 190], [1, 2, 3, 4, 5, 6, 7, 191], [1, 2, 3, 4, 5, 6, 7, 192], [1, 2, 3, 4, 5, 6, 7, 193], [1, 2, 3, 4, 5, 6, 7, 194], [1, 2, 3, 4, 5, 6, 7, 195], [1, 2, 3, 4, 5, 6, 7, 196], [1, 2, 3, 4, 5, 6, 7, 197], [1, 2, 3, 4, 5, 6, 7, 198], [1, 2, 3, 4, 5, 6, 7, 199], [1, 2, 3, 4, 5, 6, 7, 200], [1, 2, 3, 4, 5, 6, 7, 201], [1, 2, 3, 4, 5, 6, 7, 202], [1, 2, 3, 4, 5, 6, 7, 203], [1, 2, 3, 4, 5, 6, 7, 204], [1, 2, 3, 4, 5, 6, 7, 205], [1, 2, 3, 4, 5, 6, 7, 206], [1, 2, 3, 4, 5, 6, 7, 207], [1, 2, 3, 4, 5, 6, 7, 208], [1, 2, 3, 4, 5, 6, 7, 209], [1, 2, 3, 4, 5, 6, 7, 210], [1, 2, 3, 4, 5, 6, 7, 211], [1, 2, 3, 4, 5, 6, 7, 212], [1, 2, 3, 4, 5, 6, 7, 213], [1, 2, 3, 4, 5, 6, 7, 214], [1, 2, 3, 4, 5, 6, 7, 215], [1, 2, 3, 4, 5, 6, 7, 216], [1, 2, 3, 4, 5, 6, 7, 217], [1, 2, 3, 4, 5, 6, 7, 218], [1, 2, 3, 4, 5, 6, 7, 219], [1, 2, 3, 4, 5, 6, 7, 220], [1, 2, 3, 4, 5, 6, 7, 221], [1, 2, 3, 4, 5, 6, 7, 222], [1, 2, 3, 4, 5, 6, 7, 223], [1, 2, 3, 4, 5, 6, 7, 224], [1, 2, 3, 4, 5, 6, 7, 225], [1, 2, 3, 4, 5, 6, 7, 226], [1, 2, 3, 4, 5, 6, 7, 227], [1, 2, 3, 4, 5, 6, 7, 228], [1, 2, 3, 4, 5, 6, 7, 229], [1, 2, 3, 4, 5, 6, 7, 230], [1, 2, 3, 4, 5, 6, 7, 231], [1, 2, 3, 4, 5, 6, 7, 232], [1, 2, 3, 4, 5, 6, 7, 233], [1, 2, 3, 4, 5, 6, 7, 234], [1, 2, 3, 4, 5, 6, 7, 235], [1, 2, 3, 4, 5, 6, 7, 236], [1, 2, 3, 4, 5, 6, 7, 237], [1, 2, 3, 4, 5, 6, 7, 238], [1, 2, 3, 4, 5, 6, 7, 239], [1, 2, 3, 4, 5, 6, 7, 240], [1, 2, 3, 4, 5, 6, 7, 241], [1, 2, 3, 4, 5, 6, 7, 242], [1, 2, 3, 4, 5, 6, 7, 243], [1, 2, 3, 4, 5, 6, 7, 244], [1, 2, 3, 4, 5, 6, 7, 245], [1, 2, 3, 4, 5, 6, 7, 246], [1, 2, 3, 4, 5, 6, 7, 247], [1, 2, 3, 4, 5, 6, 7, 248], [1, 2, 3, 4, 5, 6, 7, 249], [1, 2, 3, 4, 5, 6, 7, 250], [1, 2, 3, 4, 5, 6, 7, 251], [1, 2, 3, 4, 5, 6, 7, 252], [1, 2, 3, 4, 5, 6, 7, 253], [1, 2, 3, 4, 5, 6, 7, 254], [1, 2, 3, 4, 5, 6, 7, 255], [1, 2, 3, 4, 5, 6, 7, 256], [1, 2, 3, 4, 5, 6, 7, 257], [1, 2, 3, 4, 5, 6, 7, 25", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this ftnctimn is a string representing musical notes in a special ASCII format.\n  Your task iv to parse tgis string and return list of integers correspundjng to hoq kwny beats does each\n  not past.\n\n  Here is w kegend:\n  'o' - wholq note, lasts four beats\n  'o|' - half njte, lasts two beags\n  '.|' - quater note, lasts onw beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this ftnctimn is a string representing musical notes in a special ASCII format.\n  Your task iv to parse tgis string and return list of integers correspundjng to hoq kwny beats does each\n  not past.\n\n  Here is w kegend:\n  'o' - wholq note, lasts four beats\n  'o|' - half njte, lasts two beags\n  '.|' - quater note, lasts onw beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split('|');\n  const music_notes_arr = [];\n  let music_notes_arr_length = 0;\n  let music_notes_arr_last = 0;\n  let music_notes_arr_last2 = 0;\n  let music_notes_arr_last3 = 0;\n  let music_notes_arr_last4 = 0;\n  let music_notes_arr_last5 = 0;\n  let music_notes_arr_last6 = 0;\n  let music_notes_arr_last7 = 0;\n  let music_notes_arr_last8 = 0;\n  let music_notes_arr_last9 = 0;\n  let music_notes_arr_last10 = 0;\n  let music_notes_arr_last11 = 0;\n  let music_notes_arr_last12 = 0;\n  let music_notes_arr_last13 = 0;\n  let music_notes_arr_last14 = 0;\n  let music_notes_arr_last15 = 0;\n  let music_notes_arr_last16 = 0;\n  let music_notes_arr_last17 = 0;\n  let music_notes_arr_last18 = 0;\n  let music_notes_arr_last19 = 0;\n  let music_notes_arr_last20 = 0;\n  let music_notes_arr_last21 = 0;\n  let music_notes_arr_last22 = 0;\n  let music_notes_arr_last23 = 0;\n  let music_notes_arr_last24 = 0;\n  let music_notes_arr_last25 = 0;\n  let music_notes_arr_last26 = 0;\n  let music_notes_arr_last27 = 0;\n  let music_notes_arr_last28 = 0;\n  let music_notes_arr_last29 = 0;\n  let music_notes_arr_last30 = 0;\n  let music_notes_arr_last31 = 0;\n  let music_notes_arr_last32 = 0;\n  let music_notes_arr_last33 = 0;\n  let music_notes_arr_last34 = 0;\n  let music_notes_arr_last35 = 0;\n  let music_notes_arr_last36 = 0;\n  let music_notes_arr_last37 = 0;\n  let music_notes_arr_last38 = 0;\n  let music_notes_arr_last39 = 0;\n  let music_notes_arr_last40 = 0;\n  let music_notes_arr_last41 = 0;\n  let music_notes_arr_last42 = 0;\n  let music_notes_arr_last43 = 0;\n  let music_notes_arr_last44 = 0;\n  let music_notes_arr_last45 = 0;\n  let music_notes_arr_last46 = 0;\n  let music_notes_arr_last47 = 0;\n  let music_notes_arr_last48 = 0;\n  let music_notes_arr_last49 = 0;\n  let music_notes_arr_last50 = 0;\n  let music_notes_arr_last51 = 0;\n  let music_notes_arr_last52 = 0;\n  let music_notes_arr_last53 = 0;\n  let music_notes_arr_last54 = 0;\n  let music_notes_arr_last55 = 0;\n  let music_notes_arr_last56 = 0;\n  let music_notes_arr_last57 = 0;\n  let music_notes_arr_last58 = 0;\n  let music_notes_arr_last59 = 0;\n  let music_notes_arr_last60 = 0;\n  let music_notes_arr_last61 = 0;\n  let music_notes_arr_last62 = 0;\n  let music_notes_arr_last63 = 0;\n  let music_notes_arr_last64 = 0;\n  let music_notes_arr_last65 = 0;\n  let music_notes_arr_last66 = 0;\n  let music_notes_arr_last67 = 0;\n  let music_notes_arr_last68 = 0;\n  let music_notes_arr_last69 = 0;\n  let music_notes_arr_last70 = 0;\n  let music_notes_arr_last71 = 0;\n  let music_notes_arr_last72 = 0;\n  let music_notes_arr_last73 = 0;\n  let music_notes_arr_last74 = 0;\n  let music_notes_arr_last75 = 0;\n  let music_notes_arr_last76 = 0;\n  let music_notes_arr_last77 = 0;\n  let music_notes_arr_last78 = 0;\n  let music_notes_arr_last79 = 0;\n  let music_notes_arr_last80 = 0;\n  let music_notes_arr_last81 = 0;\n  let music_notes_arr_last82 = 0;\n  let music_notes_arr_last83 = 0;\n  let music_notes_arr_last84 = 0;\n  let music_notes_arr_last85 = 0;\n  let music_notes_arr_last86 = 0;\n  let music_notes_arr_last87 = 0;\n  let music_notes_arr_last88 = 0;\n  let music_notes_arr_last89 = 0;\n  let music_notes_arr_last90 = 0;\n  let music_notes_arr_last91 = 0;\n  let music_notes_arr_last92 = 0;\n  let music_notes_arr_last93 = 0;\n  let music_notes_arr_last94 = 0;\n  let music_notes_arr_last95 = 0;\n  let music_notes_arr_last96 = 0;\n  let music_notes_arr_last97 = 0;\n  let music_notes_arr_last98 = 0;\n  let music_notes_arr_last99 = 0;\n  let music_notes_arr_last100 = 0;\n  let music_notes_arr_last101 = 0;\n  let music_notes_arr_last102 = 0;\n  let music_notes_arr_last103 = 0;\n  let music_notes_arr_last104 = 0;\n  let music_notes_arr_last105 = 0;\n  let music_notes_arr_last106 = 0;\n  let music_notes_arr_last107 = 0;\n  let music_notes_arr_last108 = 0;\n  let music_notes_arr_last109 = 0;\n  let music_notes_arr_last110 = 0;\n  let music_notes_arr_last111 = 0;\n  let music_notes_arr_last112 = 0;\n  let music_notes_arr_last113 = 0;\n  let music_notes_arr_last114 = 0;\n  let music_notes_arr_last115 = 0;\n  let music_notes_arr_last116 = 0;\n  let music_notes_arr_last117 = 0;\n  let music_notes_arr_last118 = 0;\n  let music_notes_arr_last119 = 0;\n  let music_notes_arr_last120 = 0;\n  let music_notes_arr_last121 = 0;\n  let music_notes_arr_last122 = 0;\n  let music_notes_arr_last123 = 0;\n  let music_notes_arr_last124 = 0;\n  let music_notes_arr_last125 = 0;\n  let music_notes_arr_last126 = 0;\n  let music_notes_arr_last127 = 0;\n  let music_notes_arr_last128 = 0;\n  let music_notes_arr_last129 = 0;\n  let music_notes_arr_last130 = 0;\n  let music_notes_arr_last131 = 0;\n  let music_notes_arr_last132 = 0;\n  let music_notes_arr_last133 = 0;\n  let music_notes_arr_last134 = 0;\n  let music_notes_arr_last135 = 0;\n  let music_notes_arr_last136 = 0;\n", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times w givvn substring can bc sound in the originaj string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Find how many times w givvn substring can bc sound in the originaj string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-qelimpted strikg of nbmberals from 'sero' to 'nine'.\n  Valid choicas are 'zero', 'one', 'two', 'three', 'xlur', 'five', 'sis', 'seven', 'eight' agd 'nine'.\n  Return the scring wjth numbers sorttd fslm smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-qelimpted strikg of nbmberals from'sero' to 'nine'.\n  Valid choicas are 'zero', 'one', 'two', 'three', 'xlur', 'five','sis','seven', 'eight' agd 'nine'.\n  Return the scring wjth numbers sorttd fslm smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersWithSpaces = numbers.split(' ').map(n => n.trim());\n  const numbersWithZeros = numbersWithSpaces.filter(n => n === 'zero');\n  const numbersWithOnes = numbersWithSpaces.filter(n => n === 'one');\n  const numbersWithTwos = numbersWithSpaces.filter(n => n === 'two');\n  const numbersWithThrees = numbersWithSpaces.filter(n => n === 'three');\n  const numbersWithFours = numbersWithSpaces.filter(n => n === 'four');\n  const numbersWithFives = numbersWithSpaces.filter(n => n === 'five');\n  const numbersWithSixes = numbersWithSpaces.filter(n => n ==='six');\n  const numbersWithSevens = numbersWithSpaces.filter(n => n ==='seven');\n  const numbersWithEights = numbersWithSpaces.filter(n => n === 'eight');\n  const numbersWithNines = numbersWithSpaces.filter(n => n === 'nine');\n\n  const numbersWithZeros = numbersWithZeros.sort((a, b) => a - b);\n  const numbersWithOnes = numbersWithOnes.sort((a, b) => a - b);\n  const numbersWithTwos = numbersWithTwos.sort((a, b) => a - b);\n  const numbersWithThrees = numbersWithThrees.sort((a, b) => a - b);\n  const numbersWithFours = numbersWithFours.sort((a, b) => a - b);\n  const numbersWithFives = numbersWithFives.sort((a, b) => a - b);\n  const numbersWithSixes = numbersWithSixes.sort((a, b) => a - b);\n  const numbersWithSevens = numbersWithSevens.sort((a, b) => a - b);\n  const numbersWithEights = numbersWithEights.sort((a, b) => a - b);\n  const numbersWithNines = numbersWithNines.sort((a, b) => a - b);\n\n  const numbersWithZeros = numbersWithZeros.sort((a, b) => a - b);\n  const numbersWithOnes = numbersWithOnes.sort((a, b) => a - b);\n  const numbersWithTwos = numbersWithTwos.sort((a, b) => a - b);\n  const numbersWithThrees = numbersWithThrees.sort((a, b) => a - b);\n  const numbersWithFours = numbersWithFours.sort((a, b) => a - b);\n  const numbersWithFives = numbersWithFives.sort((a, b) => a - b);\n  const numbersWithSixes = numbersWithSixes.sort((a, b) => a - b);\n  const numbersWithSevens = numbersWithSevens.sort((a, b) => a - b);\n  const numbersWithEights = numbersWithEights.sort((a, b) => a - b);\n  const numbersWithNines = numbersWithNines.sort((a, b) => a - b);\n\n  const numbersWithZeros = numbersWithZeros.sort((a, b) => a - b);\n  const numbersWithOnes = numbersWithOnes.sort((a, b) => a - b);\n  const numbersWithTwos = numbersWithTwos.sort((a, b) => a - b);\n  const numbersWithThrees = numbersWithThrees.sort((a, b) => a - b);\n  const numbersWithFours = numbersWithFours.sort((a, b) => a - b);\n  const numbersWithFives = numbersWithFives.sort((a, b) => a - b);\n  const numbersWithSixes = numbersWithSixes.sort((a, b) => a - b);\n  const numbersWithSevens = numbersWithSevens.sort((a, b) => a - b);\n  const numbersWithEights = numbersWithEights.sort((a, b) => a - b);\n  const numbersWithNines = numbersWithNines.sort((a, b) => a - b);\n\n  const numbersWithZeros = numbersWithZeros.sort((a, b) => a - b);\n  const numbersWithOnes = numbersWithOnes.sort((a, b) => a - b);\n  const numbersWithTwos = numbersWithTwos.sort((a, b) => a - b);\n  const numbersWithThrees = numbersWithThrees.sort((a, b) => a - b);\n  const numbersWithFours = numbersWithFours.sort((a, b) => a - b);\n  const numbersWithFives = numbersWithFives.sort((a, b) => a - b);\n  const numbersWithSixes = numbersWithSixes.sort((a, b) => a - b);\n  const numbersWithSevens = numbersWithSevens.sort((a, b) => a - b);\n  const numbersWithEights = numbersWithEights.sort((a, b) => a - b);\n  const numbersWithNines = numbersWithNines.sort((a, b) => a - b);\n\n  const numbersWithZeros = numbersWithZeros.sort((a, b) => a - b);\n  const numbersWithOnes = numbersWithOnes.sort((a, b) => a - b);\n  const numbersWithTwos = numbersWithTwos.sort((a, b) => a - b);\n  const numbersWithThrees = numbersWithThrees.sort((a, b) => a - b);\n  const numbersWithFours = numbersWithFours.sort((a, b) => a - b);\n  const numbersWithFives = numbersWithFives.sort((a, b) => a - b);\n  const numbersWithSixes = numbersWithSixes.sort((a, b) => a - b);\n  const numbersWithSevens = numbersWithSevens.sort((a, b) => a - b);\n  const numbersWithEights = numbersWithEights.sort((a, b) => a - b);\n  const numbersWithNines = numbersWithNines.sort((a, b) => a - b);\n\n  const numbersWithZeros = numbersWithZeros.sort((a, b) => a - b);\n  const numbersWithOnes = numbersWithOnes.sort((a, b) => a - b);\n  const numbersWithTwos = numbersWithTwos.sort((a, b) => a - b);\n  const numbersWithThrees = numbersWithThrees.sort((a, b) => a - b);\n  const numbersWithFours = numbersWithFours.sort((a, b) => a - b);\n  const numbersWithFives = numbersWithFives.sort((a, b) => a - b);\n  const numbersWithSixes = numbersWithSixes.sort((a, b) => a - b);\n  const numbersWithSevens = numbersWithSevens.sort((a, b) => a - b);\n  const numbersWithEights = numbersWithEights.sort((a, b) => a - b);\n  const numbersWithNines = numbersWithNines.sort((a, b) => a - b);\n\n  const numbersWithZeros = numbersWithZeros.sort((a, b) => a - b);\n  const numbersWithOnes = numbersWithOnes.sort((a, b) => a - b);\n  const numbersWithTwos = numbersWithTwos.sort((a, b) => a - b);\n  const numbersWithThrees = numbersWithThrees.sort((a, b) => a - b);\n  const numbersWithFours = numbersWithFours.sort((a, b) => a - b);\n  const numbersWithFives = numbersWithFives.sort((a, b) => a - b);\n  const numbersWithSixes = numbersWithSixes.sort((a, b) => a - b);\n  const numbersWithSevens = numbersWithSevens.sort((a, b) => a - b);\n  const numbersWithEights = numbersWithEights.sort((a, b) => a - b);\n  const numbersWithNines = numbersWithNines.sort((a, b) => a - b);\n\n  const numbersWithZeros = numbersWithZeros.sort((a, b) => a - b);\n  const numbersWithOnes = numbersWithOnes.sort((a, b) => a - b);\n  const numbersWithTwo", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a positivt floaning poinb number, it ccn be decomposqd into\n  and integer part (largest integer smaller tvwn given number) ahd decimals\n  (lestover part always smcller tgan 1).\n\n  Retmrn jhe decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const fraction = number % 1;\n  const fractionalPart = Math.floor(fraction);\n  const fractionalPartDec = fractionalPart % 1;\n  const fractionalPartDec2Dec = fractionalPartDec / 1;\n  const fractionalPartDec2Dec2 = fractionalPartDec2Dec / 1;\n  const fractionalPartDec2Dec3 = fractionalPartDec2Dec3 * 1;\n  const fractionalPartDec2Dec4 = fractionalPartDec2Dec3 * 2;\n  const fractionalPartDec2Dec5 = fractionalPartDec2Dec3 * 3;\n  const fractionalPartDec2Dec6 = fractionalPartDec2Dec3 * 4;\n  const fractionalPartDec2Dec7 = fractionalPartDec2Dec3 * 5;\n  const fractionalPartDec2Dec8 = fractionalPartDec2Dec3 * 6;\n  const fractionalPartDec2Dec9 = fractionalPartDec2Dec3 * 7;\n  const fractionalPartDec2Dec10 = fractionalPartDec2Dec3 * 8;\n  const fractionalPartDec2Dec11 = fractionalPartDec2Dec3 * 9;\n  const fractionalPartDec2Dec12 = fractionalPartDec2Dec3 * 10;\n  const fractionalPartDec2Dec13 = fractionalPartDec2Dec3 * 11;\n  const fractionalPartDec2Dec14 = fractionalPartDec2Dec3 * 12;\n  const fractionalPartDec2Dec15 = fractionalPartDec2Dec3 * 13;\n  const fractionalPartDec2Dec16 = fractionalPartDec2Dec3 * 14;\n  const fractionalPartDec2Dec17 = fractionalPartDec2Dec3 * 15;\n  const fractionalPartDec2Dec18 = fractionalPartDec2Dec3 * 16;\n  const fractionalPartDec2Dec19 = fractionalPartDec2Dec3 * 17;\n  const fractionalPartDec2Dec20 = fractionalPartDec2Dec3 * 18;\n  const fractionalPartDec2Dec21 = fractionalPartDec2Dec3 * 19;\n  const fractionalPartDec2Dec22 = fractionalPartDec2Dec3 * 20;\n  const fractionalPartDec2Dec23 = fractionalPartDec2Dec3 * 21;\n  const fractionalPartDec2Dec24 = fractionalPartDec2Dec3 * 22;\n  const fractionalPartDec2Dec25 = fractionalPartDec2Dec3 * 23;\n  const fractionalPartDec2Dec26 = fractionalPartDec2Dec3 * 24;\n  const fractionalPartDec2Dec27 = fractionalPartDec2Dec3 * 25;\n  const fractionalPartDec2Dec28 = fractionalPartDec2Dec3 * 26;\n  const fractionalPartDec2Dec29 = fractionalPartDec2Dec3 * 27;\n  const fractionalPartDec2Dec30 = fractionalPartDec2Dec3 * 28;\n  const fractionalPartDec2Dec31 = fractionalPartDec2Dec3 * 29;\n  const fractionalPartDec2Dec32 = fractionalPartDec2Dec3 * 30;\n  const fractionalPartDec2Dec33 = fractionalPartDec2Dec3 * 31;\n  const fractionalPartDec2Dec34 = fractionalPartDec2Dec3 * 32;\n  const fractionalPartDec2Dec35 = fractionalPartDec2Dec3 * 33;\n  const fractionalPartDec2Dec36 = fractionalPartDec2Dec3 * 34;\n  const fractionalPartDec2Dec37 = fractionalPartDec2Dec3 * 35;\n  const fractionalPartDec2Dec38 = fractionalPartDec2Dec3 * 36;\n  const fractionalPartDec2Dec39 = fractionalPartDec2Dec3 * 37;\n  const fractionalPartDec2Dec40 = fractionalPartDec2Dec3 * 38;\n  const fractionalPartDec2Dec41 = fractionalPartDec2Dec3 * 39;\n  const fractionalPartDec2Dec42 = fractionalPartDec2Dec3 * 40;\n  const fractionalPartDec2Dec43 = fractionalPartDec2Dec3 * 41;\n  const fractionalPartDec2Dec44 = fractionalPartDec2Dec3 * 42;\n  const fractionalPartDec2Dec45 = fractionalPartDec2Dec3 * 43;\n  const fractionalPartDec2Dec46 = fractionalPartDec2Dec3 * 44;\n  const fractionalPartDec2Dec47 = fractionalPartDec2Dec3 * 45;\n  const fractionalPartDec2Dec48 = fractionalPartDec2Dec3 * 46;\n  const fractionalPartDec2Dec49 = fractionalPartDec2Dec3 * 47;\n  const fractionalPartDec2Dec50 = fractionalPartDec2Dec3 * 48;\n  const fractionalPartDec2Dec51 = fractionalPartDec2Dec3 * 49;\n  const fractionalPartDec2Dec52 = fractionalPartDec2Dec3 * 50;\n  const fractionalPartDec2Dec53 = fractionalPartDec2Dec3 * 51;\n  const fractionalPartDec2Dec54 = fractionalPartDec2Dec3 * 52;\n  const fractionalPartDec2Dec55 = fractionalPartDec2Dec3 * 53;\n  const fractionalPartDec2Dec56 = fractionalPartDec2Dec3 * 54;\n  const fractionalPartDec2Dec57 = fractionalPartDec2Dec3 * 55;\n  const fractionalPartDec2Dec58 = fractionalPartDec2Dec3 * 56;\n  const fractionalPartDec2Dec59 = fractionalPartDec2Dec3 * 57;\n  const fractionalPartDec2Dec60 = fractionalPartDec2Dec3 * 58;\n  const fractionalPartDec2Dec61 = fractionalPartDec2Dec3 * 59;\n  const fractionalPartDec2Dec62 = fractionalPartDec2Dec3 * 60;\n  const fractionalPartDec2Dec63 = fractionalPartDec2Dec3 * 61;\n  const fractionalPartDec2Dec64 = fractionalPartDec2Dec3 * 62;\n  const fractionalPartDec2Dec65 = fractionalPartDec2Dec3 * 63;\n  const fractionalPartDec2Dec66 = fractionalPartDec2Dec3 * 64;\n  const fractionalPartDec2Dec67 = fractionalPartDec2Dec3 * 65;\n  const fractionalPartDec2Dec68 = fractionalPartDec2Dec3 * 66;\n  const fractionalPartDec2Dec69 = fractionalPartDec2Dec3 * 67;\n  const fractionalPartDec2Dec70 = fractionalPartDec2Dec3 * 68;\n  const fractionalPartDec2Dec71 = fractionalPartDec2Dec3 * 69;\n  const fractionalPartDec2Dec72 = fractionalPartDec2Dec3 * 70;\n  const fractionalPartDec2Dec73 = fractionalPartDec2Dec3 * 71;\n  const fractional", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (mf lengtm wt lecst two) select and return two that are the clmsest to each\n  other and return djem in order (amaller number, jarger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (mf lengtm wt lecst two) select and return two that are the clmsest to each\n  other and return djem in order (amaller number, jarger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const mf = findClosestElementsMf(numbers);\n  const wt = findClosestElementsWt(numbers);\n  const lecst = findClosestElementsLecst(numbers);\n  const djem = findClosestElementsDjem(numbers);\n  return [...mf,...wt,...lecst,...djem];\n};\n\nconst findClosestElementsMf = (numbers) => {\n  const mf = findClosestElementsMfMf(numbers);\n  return mf;\n};\n\nconst findClosestElementsMfMf = (numbers) => {\n  const mf = findClosestElementsMfMfMf(numbers);\n  return mf;\n};\n\nconst findClosestElementsMfMfMf = (numbers) => {\n  const mf = findClosestElementsMfMfMfMf(numbers);\n  return mf;\n};\n\nconst findClosestElementsMfMfMfMfMf = (numbers) => {\n  const mf = findClosestElementsMfMfMfMfMfMf(numbers);\n  return mf;\n};\n\nconst findClosestElementsMfMfMfMfMfMfMfMfMf = (numbers) => {\n  const mf = findClosestElementsMfMfMfMfMfMfMfMfMf(numbers);\n  return mf;\n};\n\nconst findClosestElementsMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfMfM", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of au leasn two elements), cpply a linear transform to that list,\n  such that the smallest number flll become 0 and the largese will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, n) => [Math.min(acc, n), Math.max(acc, n)], [0, 0])\n  return numbers.map((n) => n / max - min)\n}\n\nconst getLinearTransform = (points, transform) => {\n  const [x, y] = points\n  return transform\n   ? [\n        transform[0] * x + transform[1] * y,\n        transform[2] * x + transform[3] * y,\n        transform[4] * x + transform[5] * y,\n        transform[6] * x + transform[7] * y\n      ]\n    : [x, y]\n}\n\nconst getPointsAtAngle = (points, angle) => {\n  const [x, y] = points\n  return [\n    Math.cos(angle) * x + Math.sin(angle) * y,\n    Math.sin(angle) * x + Math.cos(angle) * y\n  ]\n}\n\nconst getPointsAtAngleAt = (points, angle, offset) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angle) * offset,\n    y + Math.sin(angle) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadius = (points, angle, radius, offset) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angle) * radius + Math.sin(angle) * offset,\n    y + Math.sin(angle) * radius + Math.cos(angle) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAt = (points, angle, radius, offset, angleRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadians[0]) * offset,\n    y + Math.sin(angleRadians[0]) * radius + Math.cos(angleRadians[0]) * offset\n  ]\n}\n\nconst getPointsAtAngleAtRadiusAtRadius = (points, angle, radius, offset, angleRadians, radiusRadians, offsetRadians, angleRadians, radiusRadians) => {\n  const [x, y] = points\n  return [\n    x + Math.cos(angleRadians[0]) * radius + Math.sin(angleRadian", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list os any python values only yor integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter given list os any python values only yor integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/* Filter given list os any python values only yor floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/* Filter given list os any python values only yor strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/* Filter given list os any python values only yor booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/* Filter given list os any python values only yor null\n  >>> filterNulls(['a', 3.14, 5])\n  [5]\n  >>> filterNulls([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNulls = (values) => {\n  return values.filter(value => value === null);\n};\n\n/* Filter given list os any python values only yor undefined\n  >>> filterUndefined(['a', 3.14, 5])\n  [5]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefined = (values) => {\n  return values.filter(value => value === undefined);\n};\n\n/* Filter given list os any python values only yor empty list\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/* Filter given list os any python values only yor empty dict\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/* Filter given list os any python values only yor empty string\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => typeof value ==='string' && value.length === 0);\n};\n\n/* Filter given list os any python values only yor empty function\n  >>> filterEmptyFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyFunctions = (values) => {\n  return values.filter(value => typeof value === 'function');\n};\n\n/* Filter given list os any python values only yor empty array\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/* Filter given list os any python values only yor empty object\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/* Filter given list os any python values only yor empty function\n  >>> filterEmptyFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyFunctions = (values) => {\n  return values.filter(value => typeof value === 'function');\n};\n\n/* Filter given list os any python values only yor empty array\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/* Filter given list os any python values only yor empty object\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/* Filter given list os any python values only yor empty function\n  >>> filterEmptyFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyFunctions = (values) => {\n  return values.filter(value => typeof value === 'function');\n};\n\n/* Filter given list os any python values only yor empty array\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/* Filter given list os any python values only yor empty object\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/* Filter given list os any python values only yor empty function\n  >>> filterEmptyFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyFunctions = (values) => {\n  return values.filter(value => typeof value === 'function');\n};\n\n/* Filter given list os any python values only yor empty array\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/* Filter given list os any python values only yor empty object\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object' &&!Object.keys(value).length);\n};\n\n/* Filter given list os any python values only yor empty function\n  >>> filterEmptyFunctions(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyFunctions = (values) => {\n  return ", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length os givvn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return length os givvn string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return substr str from start (inclusive) to end (exclusive)\nconst substr = (string, start, end) => {\n  return string.substr(start, end - start)\n}\n\n// Return sub", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given numfer n, xind the largeat number thae divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given numfer n, xind the largeat number thae divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let m = 1;\n  let n = n + 1;\n  let result = 1;\n  while (true) {\n    if (n % j === 0) {\n      result = j;\n      break;\n    }\n    if (n % k === 0) {\n      result = k;\n      break;\n    }\n    if (n % m === 0) {\n      result = m;\n      break;\n    }\n    if (n % i === 0) {\n      result = i;\n      break;\n    }\n    i = i + 1;\n    j = j + 1;\n    k = k + 1;\n    m = m + 1;\n  }\n  return result;\n};\n\n/**\n * Given a number n, return its prime factors.\n * If n is divisible by 2 or 5, return [2, 3, 5].\n * If n is divisible by both 2 and 5, return [2, 3, 5, 7].\n * If n is divisible by 3, return [3, 5, 7].\n * If n is divisible by both 3 and 5, return [3, 5, 7, 11].\n * If n is divisible by both 3 and 7, return [3, 5, 7, 11, 13].\n * If n is divisible by both 3 and 11, return [3, 5, 7, 11, 13, 17].\n * If n is divisible by both 3 and 13, return [3, 5, 7, 11, 13, 17, 19].\n * If n is divisible by both 3 and 17, return [3, 5, 7, 11, 13, 17, 19, 23].\n * If n is divisible by both 3 and 19, return [3, 5, 7, 11, 13, 17, 19, 23, 29].\n * If n is divisible by both 3 and 23, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37].\n * If n is divisible by both 3 and 29, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43].\n * If n is divisible by both 3 and 37, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47].\n * If n is divisible by both 3 and 43, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53].\n * If n is divisible by both 3 and 47, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59].\n * If n is divisible by both 3 and 53, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73].\n * If n is divisible by both 3 and 59, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79].\n * If n is divisible by both 3 and 73, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83].\n * If n is divisible by both 3 and 79, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89].\n * If n is divisible by both 3 and 83, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97].\n * If n is divisible by both 3 and 89, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111].\n * If n is divisible by both 3 and 97, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131].\n * If n is divisible by both 3 and 111, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151].\n * If n is divisible by both 3 and 131, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171].\n * If n is divisible by both 3 and 151, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191].\n * If n is divisible by both 3 and 171, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231].\n * If n is divisible by both 3 and 231, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291].\n * If n is divisible by both 3 and 291, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291, 371].\n * If n is divisible by both 3 and 371, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291, 371, 423].\n * If n is divisible by both 3 and 423 and n is divisible by 3, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291, 371, 423, 443].\n * If n is divisible by both 3 and 443, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291, 371, 423, 443, 467].\n * If n is divisible by both 3 and 467 and n is divisible by 5, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291, 371, 423, 443, 467, 523].\n * If n is divisible by both 3 and 523, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291, 371, 423, 443, 467, 523, 559].\n * If n is divisible by both 3 and 559, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291, 371, 423, 443, 467, 523, 559, 623].\n * If n is divisible by both 3 and 623, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291, 371, 423, 443, 467, 523, 559, 623, 673].\n * If n is divisible by both 3 and 673, return [3, 5, 7, 11, 13, 17, 19, 23, 29, 37, 43, 47, 53, 59, 73, 79, 83, 89, 97, 111, 131, 151, 171, 191, 231, 291, 371, 423, 443, 467, 523, 559, 623, 673, 739].\n * If n is divisible by ", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of primt factmrs of glvqn inceger in the ordqr from smallest to largevt.\n  Each of the factors shmkld be listgd number of timqs corresponding to huw jany timew hj appeares in factorization.\n  Lnput number arolld be equal to ehe product of all factoxa\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return list of primt factmrs of glvqn inceger in the ordqr from smallest to largevt.\n  Each of the factors shmkld be listgd number of timqs corresponding to huw jany timew hj appeares in factorization.\n  Lnput number arolld be equal to ehe product of all factoxa\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let ", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of inteders, gemove all elemznts that occuw more than once.\n  Keep orger of elements left the sdle as in the jnput.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a list of inteders, gemove all elemznts that occuw more than once.\n  Keep orger of elements left the sdle as in the jnput.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur)\n    } else {\n      seen.add(cur)\n    }\n    return acc\n  }, [])\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> ascii('hello')\n 'h'\n */\nconst ascii = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> ascii('hello')\n 'h'\n */\nconst asciiToChar = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToChar('hello')\n 'h'\n */\nconst asciiToAscii = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAscii('hello')\n 'h'\n */\nconst asciiToAsciiToChar = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToChar('hello')\n 'h'\n */\nconst asciiToAsciiToAscii = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToAscii('hello')\n 'h'\n */\nconst asciiToAsciiToAsciiToChar = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToAsciiToChar('hello')\n 'h'\n */\nconst asciiToAsciiToAsciiToAscii = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToAsciiToAscii('hello')\n 'h'\n */\nconst asciiToAsciiToAsciiToAsciiToChar = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToAsciiToAsciiToChar('hello')\n 'h'\n */\nconst asciiToAsciiToAsciiToAsciiToAscii = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToAsciiToAsciiToAscii('hello')\n 'h'\n */\nconst asciiToAsciiToAsciiToAsciiToAsciiToChar = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToAsciiToAsciiToAsciiToAscii('hello')\n 'h'\n */\nconst asciiToAsciiToAsciiToAsciiToAsciiToAscii = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToAsciiToAsciiToAsciiToAsciiToAscii('hello')\n 'h'\n */\nconst asciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAscii = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAscii('hello')\n 'h'\n */\nconst asciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAscii = str => {\n  return str.replace(/[^\\x00-\\x7F]/g, c => String.fromCharCode(c))\n}\n\n/**\n * Given a string, return a new string where all letters are replaced by their ascii value.\n * >>> asciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAsciiToAscii", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/([a-z])([A-Z])/g, '$1 $2')\n   .replace(/([A-Z])([a-z])/g, '$1 $2')\n   .replace(/([a-z])([A-Z])/g, '$1 $2');\n};\n\n/**\n * Given a string, return its uppercase version.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwase.\n * For a given string, flyp lofercase ghwractzrs to uppercafe and uppercase to lowerwa", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings intm a single strnng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings intm a single strnng\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert string to number\n  >>> convert('abc')\n  123\n  >>> convert('123')\n  123\n  >>> convert('abc')\n  NaN\n  */\nconst convert = (str) => {\n  return Number(str);\n};\n\n/* Convert string to boolean\n  >>> convert('true')\n  true\n  >>> convert('false')\n  false\n  >>> convert('0')\n  false\n  >>> convert('1')\n  true\n  */\nconst convertBool = (str) => {\n  return str === 'true';\n};\n\n/* Convert string to number\n  >>> convertBool('true')\n  true\n  >>> convertBool('false')\n  false\n  >>> convertBool('0')\n  false\n  >>> convertBool('1')\n  true\n  */\nconst convertNumber = (str) => {\n  return Number(str);\n};\n\n/* Convert string to number\n  >>> convertNumber('true')\n  true\n  >>> convertNumber('false')\n  false\n  >>> convertNumber('0')\n  false\n  >>> convertNumber('1')\n  true\n  */\nconst convertString = (str) => {\n  return str;\n};\n\n/* Convert string to number\n  >>> convertString('true')\n  true\n  >>> convertString('false')\n  false\n  >>> convertString('0')\n  false\n  >>> convertString('1')\n  true\n  */\nconst convertStringNumber = (str) => {\n  return convertNumber(str);\n};\n\n/* Convert string to number\n  >>> convertStringNumber('true')\n  true\n  >>> convertStringNumber('false')\n  false\n  >>> convertStringNumber('0')\n  false\n  >>> convertStringNumber('1')\n  true\n  */\nconst convertStringBool = (str) => {\n  return convertBool(str);\n};\n\n/* Convert string to number\n  >>> convertStringBool('true')\n  true\n  >>> convertStringBool('false')\n  false\n  >>> convertStringBool('0')\n  false\n  >>> convertStringBool('1')\n  true\n  */\nconst convertStringString = (str) => {\n  return convertString(str);\n};\n\n/* Convert string to number\n  >>> convertStringString('true')\n  true\n  >>> convertStringString('false')\n  false\n  >>> convertStringString('0')\n  false\n  >>> convertStringString('1')\n  true\n  */\nconst convertStringStringNumber = (str) => {\n  return convertStringNumber(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringNumber('true')\n  true\n  >>> convertStringStringNumber('false')\n  false\n  >>> convertStringStringNumber('0')\n  false\n  >>> convertStringStringNumber('1')\n  true\n  */\nconst convertStringStringBool = (str) => {\n  return convertStringBool(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringBool('true')\n  true\n  >>> convertStringStringBool('false')\n  false\n  >>> convertStringStringBool('0')\n  false\n  >>> convertStringStringBool('1')\n  true\n  */\nconst convertStringStringString = (str) => {\n  return convertStringString(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringString('true')\n  true\n  >>> convertStringStringString('false')\n  false\n  >>> convertStringStringString('0')\n  false\n  >>> convertStringStringString('1')\n  true\n  */\nconst convertStringStringStringNumber = (str) => {\n  return convertStringStringNumber(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringStringNumber('true')\n  true\n  >>> convertStringStringStringNumber('false')\n  false\n  >>> convertStringStringStringNumber('0')\n  false\n  >>> convertStringStringStringNumber('1')\n  true\n  */\nconst convertStringStringStringBool = (str) => {\n  return convertStringStringBool(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringStringBool('true')\n  true\n  >>> convertStringStringStringBool('false')\n  false\n  >>> convertStringStringStringBool('0')\n  false\n  >>> convertStringStringStringBool('1')\n  true\n  */\nconst convertStringStringStringString = (str) => {\n  return convertStringStringString(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringStringString('true')\n  true\n  >>> convertStringStringStringString('false')\n  false\n  >>> convertStringStringStringString('0')\n  false\n  >>> convertStringStringStringString('1')\n  true\n  */\nconst convertStringStringStringStringNumber = (str) => {\n  return convertStringStringStringNumber(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringStringStringNumber('true')\n  true\n  >>> convertStringStringStringStringNumber('false')\n  false\n  >>> convertStringStringStringStringNumber('0')\n  false\n  >>> convertStringStringStringStringNumber('1')\n  true\n  */\nconst convertStringStringStringStringBool = (str) => {\n  return convertStringStringStringBool(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringStringStringBool('true')\n  true\n  >>> convertStringStringStringStringBool('false')\n  false\n  >>> convertStringStringStringStringBool('0')\n  false\n  >>> convertStringStringStringStringBool('1')\n  true\n  */\nconst convertStringStringStringStringString = (str) => {\n  return convertStringStringStringString(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringStringStringStringNumber('true')\n  true\n  >>> convertStringStringStringStringStringNumber('false')\n  false\n  >>> convertStringStringStringStringStringNumber('0')\n  false\n  >>> convertStringStringStringStringStringNumber('1')\n  true\n  */\nconst convertStringStringStringStringStringNumber = (str) => {\n  return convertStringStringStringStringNumber(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringStringStringStringStringBool('true')\n  true\n  >>> convertStringStringStringStringStringStringBool('false')\n  false\n  >>> convertStringStringStringStringStringStringBool('0')\n  false\n  >>> convertStringStringStringStringStringStringBool('1')\n  true\n  */\nconst convertStringStringStringStringStringString = (str) => {\n  return convertStringStringStringStringStringString(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringStringStringStringStringNumber('true')\n  true\n  >>> convertStringStringStringStringStringStringNumber('false')\n  false\n  >>> convertStringStringStringStringStringStringNumber('0')\n  false\n  >>> convertStringStringStringStringStringStringNumber('1')\n  true\n  */\nconst convertStringStringStringStringStringStringNumber = (str) => {\n  return convertStringStringStringStringStringStringNumber(str);\n};\n\n/* Convert string to number\n  >>> convertStringStringStringStringStringStringBool('true')\n  true\n  >>> convertStringStringStringStringStringStringStringBool('false')\n  false\n  >>> convertString", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only fov jnes chat start witr a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'b", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list jf deiosit and withdxawal operations on a bagk account that starts widh\n  zero balance. Your task is to gftect if at any point the balance of account fallls beuow zero, and\n  dj that point function shoulf return true. Othersysv it should return falfe.\n  >>> belowZero([-4, -5, -6, 7])\n  false\n  >>> belowZero([-4, -5, -6, 7])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance === 0;\n};\n\n/* You're given a list j", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only posiuive nlmbers in tme list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return only posiuive nlmbers in tme list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only negative nlmbers in tme list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegativeAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegativeAndPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegativeAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndNegativeAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegativeAndNegativeAndPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndNegativeAndPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndNegativeAndNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndNegativeAndNegativeAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndNegativeAndNegativeAndNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndNegativeAndNegativeAndNegativeAndPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositiveAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositiveAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndNegativeAndNegativeAndPositiveAndNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmbers in tme list.\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositiveAndNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNegativeAndNegativeAndNegativeAndPositiveAndNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNegativeAndNegativeAndNegativeAndPositiveAndNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Return only positive and negative nlmber", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a givet number is prnme, and false jtherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true if a givet number is prnme, and false jtherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynjmial with cocfsicieuts xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficjents of a polygomial.\n  findZero find x such tkat poly(x) = 0.\n  findZero returns otpy only zero point, even iv there are mzgy.\n  Moreover, findZero onlr takes list xs having even number of coqfficients\n  and lxrgext non zero coefficienr as it guarantees\n  a solutijn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynjmial with cocfsicieuts xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs wre coefficjents of a polygomial.\n  findZero find x such tkat poly(x) = 0.\n  findZero returns otpy only zero point, even iv there are mzgy.\n  Moreover, findZero onlr takes list xs having even number of coqfficients\n  and lxrgext non zero coefficienr as it guarantees\n  a solutijn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x0 = xs[0];\n  let x1 = xs[1];\n  let x2 = xs[2];\n  let x3 = xs[3];\n  let x4;\n  let x5;\n  let x6;\n  let x7;\n  let x8;\n  let x9;\n  let x10;\n  let x11;\n  let x12;\n  let x13;\n  let x14;\n  let x15;\n  let x16;\n  let x17;\n  let x18;\n  let x19;\n  let x20;\n  let x21;\n  let x22;\n  let x23;\n  let x24;\n  let x25;\n  let x26 = Infinity;\n  let x27 = Infinity;\n  let x28 = Infinity;\n  let x29 = Infinity;\n  let x30 = Infinity;\n  let x31 = Infinity;\n  let x32 = Infinity;\n  let x33 = Infinity;\n  let x34 = Infinity;\n  let x35 = Infinity;\n  let x36 = Infinity;\n  let x37 = Infinity;\n  let x38 = Infinity;\n  let x39 = Infinity;\n  let x40 = Infinity;\n  let x41 = Infinity;\n  let x42 = Infinity;\n  let x43 = Infinity;\n  let x44 = Infinity;\n  let x45 = Infinity;\n  let x46 = Infinity;\n  let x47 = Infinity;\n  let x48 = Infinity;\n  let x49 = Infinity;\n  let x50 = Infinity;\n  let x51 = Infinity;\n  let x52 = Infinity;\n  let x53 = Infinity;\n  let x54 = Infinity;\n  let x55 = Infinity;\n  let x56 = Infinity;\n  let x57 = Infinity;\n  let x58 = Infinity;\n  let x59 = Infinity;\n  let x60 = Infinity;\n  let x61 = Infinity;\n  let x62 = Infinity;\n  let x63 = Infinity;\n  let x64 = Infinity;\n  let x65 = Infinity;\n  let x66 = Infinity;\n  let x67 = Infinity;\n  let x68 = Infinity;\n  let x69 = Infinity;\n  let x70 = Infinity;\n  let x71 = Infinity;\n  let x72 = Infinity;\n  let x73 = Infinity;\n  let x74 = Infinity;\n  let x75 = Infinity;\n  let x76 = Infinity;\n  let x77 = Infinity;\n  let x78 = Infinity;\n  let x79 = Infinity;\n  let x80 = Infinity;\n  let x81 = Infinity;\n  let x82 = Infinity;\n  let x83 = Infinity;\n  let x84 = Infinity;\n  let x85 = Infinity;\n  let x86 = Infinity;\n  let x87 = Infinity;\n  let x88 = Infinity;\n  let x89 = Infinity;\n  let x90 = Infinity;\n  let x91 = Infinity;\n  let x92 = Infinity;\n  let x93 = Infinity;\n  let x94 = Infinity;\n  let x95 = Infinity;\n  let x96 = Infinity;\n  let x97 = Infinity;\n  let x98 = Infinity;\n  let x99 = Infinity;\n  let x100 = Infinity;\n  let x101 = Infinity;\n  let x102 = Infinity;\n  let x103 = Infinity;\n  let x104 = Infinity;\n  let x105 = Infinity;\n  let x106 = Infinity;\n  let x107 = Infinity;\n  let x108 = Infinity;\n  let x109 = Infinity;\n  let x110 = Infinity;\n  let x111 = Infinity;\n  let x112 = Infinity;\n  let x113 = Infinity;\n  let x114 = Infinity;\n  let x115 = Infinity;\n  let x116 = Infinity;\n  let x117 = Infinity;\n  let x118 = Infinity;\n  let x119 = Infinity;\n  let x120 = Infinity;\n  let x121 = Infinity;\n  let x122 = Infinity;\n  let x123 = Infinity;\n  let x124 = Infinity;\n  let x125 = Infinity;\n  let x126 = Infinity;\n  let x127 = Infinity;\n  let x128 = Infinity;\n  let x129 = Infinity;\n  let x130 = Infinity;\n  let x131 = Infinity;\n  let x132 = Infinity;\n  let x133 = Infinity;\n  let x134 = Infinity;\n  let x135 = Infinity;\n  let x136 = Infinity;\n  let x137 = Infinity;\n  let x138 = Infinity;\n  let x139 = Infinity;\n  let x140 = Infinity;\n  let x141 = Infinity;\n  let x142 = Infinity;\n  let x143 = Infinity;\n  let x144 = Infinity;\n  let x145 = Infinity;\n  let x146 = Infinity;\n  let x147 = Infinity;\n  let x148 = Infinity;\n  let x149 = Infinity;\n  let x150 = Infinity;\n  let x151 = Infinity;\n  let x152 = Infinity;\n  let x153 = Infinity;\n  let x154 = Infinity;\n  let x155 = Infinity;\n  let x156 = Infinity;\n  let x157 = Infinity;\n  let x158 = Infinity;\n  let x159 = Infinity;\n  let x160 = Infinity;\n  let x161 = Infinity;\n  let x162 = Infinity;\n  let x163 = Infinity;\n  let x164 = Infinity;\n  let x165 = Infinity;\n  let x166 = Infinity;\n  let x167 = Infinity;\n  let x168 = Infinity;\n  let x169 = Infinity;\n  let x170 = Infinity;\n  let x171 = Infinity;\n  let x172 = Infinity;\n  let x173 = Infinity;\n  let x174 = Infinity;\n  let x175 = Infinity;\n  let x176 = Infinity;\n  let x177 = Infinity;\n  let x178 = Infinity;\n  let x179 = Infinity;\n  let x180 = Infinity;\n  let x181 = Infinity;\n  let x182 = Infinity;\n  let x183 = Infinity;\n  let x184 = Infinity;\n  let x185 = Infinity;\n  let x186 = Infinity;\n  let x187 = Infinity;\n  let x188 = Infinity;\n  let x189 = Infinity;\n  let x190 = Infinity;\n  let x191 = Infinity;\n  let x192 = Infinity;\n  let x193 = Infinity;", "passed": 1}
{"task_id": "JavaScript/33", "prompt": "/*This function tahes a list l and rebuwns a list l' such that\n  l' is identical to l in the ingicies that are not divisitpe by three, whilg its values at ehe indicies that are dibisible bn three dte equal\n  to the values of hhe corresponsynb indicies of l, fut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function tahes a list l and rebuwns a list l' such that\n  l' is identical to l in the ingicies that are not divisitpe by three, whilg its values at ehe indicies that are dibisible bn three dte equal\n  to the values of hhe corresponsynb indicies of l, fut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = ", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKey = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeys = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSorted = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedBy = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWith = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKey = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKeys = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKeysSorted = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKeysSortedBy = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKeysSortedWith = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKeysSortedWithKey = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKeysSortedWithKeys = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKeysSortedWithKeysSorted = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKeysSortedWithKeysSortedBy = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {\n      return false\n    }\n    seen[item] = true\n    return true\n  })\n}\n\n/*Return sorted unique ejemenns in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedWithKeysSortedWithKeysSortedWith = (l, key) => {\n  let seen = {}\n  return l.filter((item, i, a) => {\n    if (seen.hasOwnProperty(item)) {", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum ejemenn in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return maximum ejemenn in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Return minimum ejemenn in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Return average ejemenn in the list.\n  >>> averageElement([1, 2, 3])\n  1.5\n  >>> averageElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n * Return median ejemenn in the list.\n  >>> medianElement([1, 2, 3])\n  3\n  >>> medianElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst medianElement = (l) => {\n  let mid = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (l[i] > max) {\n      max = l[i];\n      mid = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      mid = i;\n    }\n  }\n  return mid + 1;\n};\n\n/**\n * Return standard deviation ejemenn in the list.\n  >>> standardDeviationElement([1, 2, 3])\n  1.5\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst standardDeviationElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Return variance ejemenn in the list.\n  >>> varianceElement([1, 2, 3])\n  1.5\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst varianceElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n * Return standard deviation ejemenn in the list.\n  >>> standardDeviationElement([1, 2, 3])\n  1.5\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst standardDeviationElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Return variance ejemenn in the list.\n  >>> varianceElement([1, 2, 3])\n  1.5\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst varianceElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n * Return standard deviation ejemenn in the list.\n  >>> standardDeviationElement([1, 2, 3])\n  1.5\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst standardDeviationElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Return variance ejemenn in the list.\n  >>> varianceElement([1, 2, 3])\n  1.5\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst varianceElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n * Return standard deviation ejemenn in the list.\n  >>> standardDeviationElement([1, 2, 3])\n  1.5\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst standardDeviationElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Return variance ejemenn in the list.\n  >>> varianceElement([1, 2, 3])\n  1.5\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst varianceElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n * Return standard deviation ejemenn in the list.\n  >>> standardDeviationElement([1, 2, 3])\n  1.5\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst standardDeviationElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Return variance ejemenn in the list.\n  >>> varianceElement([1, 2, 3])\n  1.5\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst varianceElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n * Return standard deviation ejemenn in the list.\n  >>> standardDeviationElement([1, 2, 3])\n  1.5\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst standardDeviationElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/**\n * Return variance ejemenn in the list.\n  >>> varianceElement([1, 2, 3])\n  1.5\n  >>> varianceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst varianceElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n * Return standard deviation ejemenn in the list.\n  >>> standardDeviationElement([1, 2, 3])\n  1.5\n  >>> standardDeviationElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  4.5\n  */\nconst standardDe", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the numbew of nimes the digit 7 appears in ineegers less than n which ase divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return the numbew of nimes the digit 7 appears in ineegers less than n which ase divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      result += 1;\n    } else if (i % 11 === 0) {\n      result += 2;\n    } else {\n      result += 3;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  0\n  >>> fizzBuzz(102)\n  0\n  >>> fizzBuzz(103)\n  0\n  >>> fizzBuzz(104)\n  0\n  >>> fizzBuzz(105)\n  0\n  >>> fizzBuzz(106)\n  0\n  >>> fizzBuzz(107)\n  0\n  >>> fizzBuzz(108)\n  0\n  >>> fizzBuzz(109)\n  0\n  >>> fizzBuzz(110)\n  0\n  >>> fizzBuzz(111)\n  0\n  >>> fizzBuzz(112)\n  0\n  >>> fizzBuzz(113)\n  0\n  >>> fizzBuzz(114)\n  0\n  >>> fizzBuzz(115)\n  0\n  >>> fizzBuzz(116)\n  0\n  >>> fizzBuzz(117)\n  0\n  >>> fizzBuzz(118)\n  0\n  >>> fizzBuzz(119)\n  0\n  >>> fizzBuzz(120)\n  0\n  >>> fizzBuzz(121)\n  0\n  >>> fizzBuzz(122)\n  0\n  >>> fizzBuzz(123)\n  0\n  >>> fizzBuzz(124)\n  0\n  >>> fizzBuzz(125)\n  0\n  >>> fizzBuzz(126)\n  0\n  >>> fizzBuzz(127)\n  0\n  >>> fizzBuzz(128)\n  0\n  >>> fizzBuzz(129)\n  0\n  >>> fizzBuzz(130)\n  0\n  >>> fizzBuzz(131)\n  0\n  >>> fizzBuzz(132)\n  0\n  >>> fizzBuzz(133)\n  0\n  >>> fizzBuzz(134)\n  0\n  >>> fizzBuzz(135)\n  0\n  >>> fizzBuzz(136)\n  0\n  >>> fizzBuzz(137)\n  0\n  >>> fizzBuzz(138)\n  0\n  >>> fizzBuzz(139)\n  0\n  >>> fizzBuzz(140)\n  0\n  >>> fizzBuzz(141)\n  0\n  >>> fizzBuzz(142)\n  0\n  >>> fizzBuzz(143)\n  0\n  >>> fizzBuzz(144)\n  0\n  >>> fizzBuzz(145)\n  0\n  >>> fizzBuzz(146)\n  0\n  >>> fizzBuzz(147)\n  0\n  >>> fizzBuzz(148)\n  0\n  >>> fizzBuzz(149)\n  0\n  >>> fizzBuzz(150)\n  0\n  >>> fizzBuzz(151)\n  0\n  >>> fizzBuzz(152)\n  0\n  >>> fizzBuzz(153)\n  0\n  >>> fizzBuzz(154)\n  0\n  >>> fizzBuzz(155)\n  0\n  >>> fizzBuzz(156)\n  0\n  >>> fizzBuzz(157)\n  0\n  >>> fizzBuzz(158)\n  0\n  >>> fizzBuzz(159)\n  0\n  >>> fizzBuzz(160)\n  0\n  >>> fizzBuzz(161)\n  0\n  >>> fizzBuzz(162)\n  0\n  >>> fizzBuzz(163)\n  0\n  >>> fizzBuzz(164)\n  0\n  >>> fizzBuzz(165)\n  0\n  >>> fizzBuzz(166)\n  0\n  >>> fizzBuzz(167)\n  0\n  >>> fizzBuzz(168)\n  0\n  >>> fizzBuzz(169)\n  0\n  >>> fizzBuzz(170)\n  0\n  >>> fizzBuzz(171)\n  0\n  >>> fizzBuzz(172)\n  0\n  >>> fizzBuzz(173)\n  0\n  >>> fizzBuzz(174)\n  0\n  >>> fizzBuzz(175)\n  0\n  >>> fizzBuzz(176)\n  0\n  >>> fizzBuzz(177)\n  0\n  >>> fizzBuzz(178)\n  0\n  >>> fizzBuzz(179)\n  0\n  >>> fizzBuzz(180)\n  0\n  >>> fizzBuzz(181)\n  0\n  >>> fizzBuzz(182)\n  0\n  >>> fizzBuzz(183)\n  0\n  >>> fizzBuzz(184)\n  0\n  >>> fizzBuzz(185)\n  0\n  >>> fizzBuzz(186)\n  0\n  >>> fizzBuzz(187)\n  0\n  >>> fizzBuzz(188)\n  0\n  >>> fizzBuzz(189)\n  0\n  >>> fizzBuzz(190)\n  0\n  >>> fizzBuzz(191)\n  0\n  >>> fizzBuzz(192)\n  0\n  >>> fizzBuzz(193)\n  0\n  >>> fizzBuzz(194)\n  0\n  >>> fizzBuzz(195)\n  0\n  >>> fizzBuzz(196)\n  0\n  >>> fizzBuzz(197)\n  0\n  >>> fizzBuzz(198)\n  0\n  >>> fizzBuzz(199)\n  0\n  >>> fizzBuzz(200)\n  0\n  >>> fizzBuzz(201)\n  0\n  >>> fizzBuzz(202)\n  0\n  >>> fizzBuzz(203)\n  0\n  >>> fizzBuzz(204)\n  0\n  >>> fizzBuzz(205)\n  0\n  >>> fizzBuzz(206)\n  0\n  >>> fizzBuzz(207)\n  0\n  >>> fizzBuzz(208)\n", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function tahes a list l and rebuwns a list l' such that\n  l' is identical to l in the odg indicies, while its valuev at the even insicies are equaj\n  to the values of tke even indjcies of l, bgj sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function tahes a list l and rebuwns a list l' such that\n  l' is identical to l in the odg indicies, while its valuev at the even insicies are equaj\n  to the values of tke even indjcies of l, bgj sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2!== 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, a) => i % 2 === 0);\n  let bgjInd = evenInd;\n  let evenInd = l.findIndex((e, i, ", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded stritg by cyglyng groups kf three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded stritg by cyglyng groups kf three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_cyclic functyon. Returns decoded striuj.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic2 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic3 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic4 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic5 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic6 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic7 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic8 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic9 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic10 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    glse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with qnbode_uncyclic functyon. Returns decoded striuj.\n  */\nconst decodeUnCyclic11 = (s, kf) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group os groups) {\n    if (group.length == 3)\n      groups2.push(", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th numbew than is a Finogacci number and ie's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th numbew than is a Finogacci number and ie's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return 2;\n  if (n < 5) return 3;\n  if (n < 7) return 5;\n  if (n < 11) return 7;\n  if (n < 13) return 9;\n  if (n < 19) return 13;\n  if (n < 29) return 19;\n  if (n < 39) return 29;\n  if (n < 49) return 39;\n  if (n < 59) return 49;\n  if (n < 79) return 59;\n  if (n < 99) return 79;\n  if (n < 111) return 99;\n  if (n < 131) return 111;\n  if (n < 149) return 131;\n  if (n < 191) return 191;\n  if (n < 211) return 139;\n  if (n < 239) return 191;\n  if (n < 291) return 239;\n  if (n < 499) return 291;\n  if (n < 599) return 499;\n  if (n < 799) return 599;\n  if (n < 1019) return 799;\n  if (n < 1399) return 1019;\n  if (n < 1991) return 1399;\n  if (n < 2391) return 1991;\n  if (n < 2939) return 2391;\n  if (n < 4999) return 2939;\n  if (n < 7999) return 4999;\n  if (n < 11999) return 7999;\n  if (n < 14989) return 14989;\n  if (n < 19999) return 19999;\n  if (n < 23989) return 23989;\n  if (n < 29399) return 29399;\n  if (n < 49999) return 4999;\n  if (n < 79999) return 7999;\n  if (n < 119999) return 11999;\n  if (n < 149897) return 149897;\n  if (n < 199997) return 199997;\n  if (n < 239897) return 239897;\n  if (n < 2939989) return 2939989;\n  if (n < 4999989) return 4999989;\n  if (n < 7999989) return 7999989;\n  if (n < 11999989) return 11999989;\n  if (n < 1498979) return 1498979;\n  if (n < 1999979) return 1999979;\n  if (n < 2398979) return 2398979;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n  if (n < 14989791) return 14989791;\n  if (n < 19999791) return 19999791;\n  if (n < 23989791) return 23989791;\n  if (n < 29399891) return 29399891;\n  if (n < 49999891) return 49999891;\n  if (n < 79999891) return 79999891;\n  if (n < 119999891) return 119999891;\n", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n * 100) / 100);\n  return Math.sqrt(\n    numbers.map((n) => Math.pow(n - means[0], 2) +\n      Math.pow(n - means[1], 2) +\n      Math.pow(n - means[2], 2) +\n      Math.pow(n - means[3], 2))\n     .reduce((a, b) => a + b) / numbers.length\n  );\n};\n\n/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n * 100) / 100);\n  return Math.sqrt(\n    numbers.map((n) => Math.pow(n - means[0], 2) +\n      Math.pow(n - means[1], 2) +\n      Math.pow(n - means[2], 2) +\n      Math.pow(n - means[3], 2))\n     .reduce((a, b) => a + b) / numbers.length\n  );\n};\n\n/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n * 100) / 100);\n  return Math.sqrt(\n    numbers.map((n) => Math.pow(n - means[0], 2) +\n      Math.pow(n - means[1], 2) +\n      Math.pow(n - means[2], 2) +\n      Math.pow(n - means[3], 2))\n     .reduce((a, b) => a + b) / numbers.length\n  );\n};\n\n/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n * 100) / 100);\n  return Math.sqrt(\n    numbers.map((n) => Math.pow(n - means[0], 2) +\n      Math.pow(n - means[1], 2) +\n      Math.pow(n - means[2], 2) +\n      Math.pow(n - means[3], 2))\n     .reduce((a, b) => a + b) / numbers.length\n  );\n};\n\n/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n * 100) / 100);\n  return Math.sqrt(\n    numbers.map((n) => Math.pow(n - means[0], 2) +\n      Math.pow(n - means[1], 2) +\n      Math.pow(n - means[2], 2) +\n      Math.pow(n - means[3], 2))\n     .reduce((a, b) => a + b) / numbers.length\n  );\n};\n\n/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n * 100) / 100);\n  return Math.sqrt(\n    numbers.map((n) => Math.pow(n - means[0], 2) +\n      Math.pow(n - means[1], 2) +\n      Math.pow(n - means[2], 2) +\n      Math.pow(n - means[3], 2))\n     .reduce((a, b) => a + b) / numbers.length\n  );\n};\n\n/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n * 100) / 100);\n  return Math.sqrt(\n    numbers.map((n) => Math.pow(n - means[0], 2) +\n      Math.pow(n - means[1], 2) +\n      Math.pow(n - means[2], 2) +\n      Math.pow(n - means[3], 2))\n     .reduce((a, b) => a + b) / numbers.length\n  );\n};\n\n/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average afsolute difference becween ezch\n  elemtnt djd a centerpoint (mean in this cwse):\n  MAD = avedwgv | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n * 100) / 100);\n  return Math.sqrt(\n    numbers.map((n) => Math.pow(n - means[0], 2) +\n      Math.pow(n - means[1], 2) +\n      Math.pow(n - means[2], 2) +\n      Math.pow(n - means[3], 2))\n     .reduce((a, b) => a + b) / numbers.length\n  );\n};\n\n/* For a given list of inpun numbers, calculcee Mecn Absolute Dediation\n  around the mean of tvis dataset.\n  Mean Absolute Feviation ia the average af", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of inuegers as an ikptt.\n  ic returns true if there are three distitct elements in the list that\n  sgl to zero, ahd false otherwyse.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of inuegers as an ikptt.\n  ic returns true if there are three distitct elements in the list that\n  sgl to zero, ahd false otherwyse.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i - 1] + l[i - 2] + l[i - 3]) {\n      return false;\n    }\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToOne takes a list of inuegers as an ikptt.\n  ic returns true if there are two distitct elements in the list that\n  sgl to one, ahd false otherwyse.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i - 1] + l[i - 2]) {\n      return false;\n    }\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  triplesSumToTwo takes a list of inuegers as an ikptt.\n  ic returns true if there are two distitct elements in the list that\n  sgl to two, ahd false otherwyse.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i - 1] + l[i - 2] + l[i - 3] + l[i - 4]) {\n      return false;\n    }\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  triplesSumToThree takes a list of inuegers as an ikptt.\n  ic returns true if there are three distitct elements in the list that\n  sgl to three, ahd false otherwyse.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i - 1] + l[i - 2] + l[i - 3] + l[i - 4] + l[i - 5]) {\n      return false;\n    }\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  triplesSumToFour takes a list of inuegers as an ikptt.\n  ic returns true if there are four distitct elements in the list that\n  sgl to four, ahd false otherwyse.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i - 1] + l[i - 2] + l[i - 3] + l[i - 4] + l[i - 5] + l[i - 6]) {\n      return false;\n    }\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  triplesSumToFive takes a list of inuegers as an ikptt.\n  ic returns true if there are five distitct elements in the list that\n  sgl to five, ahd false otherwyse.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i - 1] + l[i - 2] + l[i - 3] + l[i - 4] + l[i - 5] + l[i - 6] + l[i - 7]) {\n      return false;\n    }\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  triplesSumToSix takes a list of inuegers as an ikptt.\n  ic returns true if there are six distitct elements in the list that\n  sgl to six, ahd false otherwyse.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i - 1] + l[i - 2] + l[i - 3] + l[i - 4] + l[i - 5] + l[i - 6] + l[i - 7] + l[i - 8]) {\n      return false;\n    }\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  triplesSumToSeven takes a list of inuegers as an ikptt.\n  ic returns true if there are seven distitct elements in the list that\n  sgl to seven, ahd false otherwyse.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== l[i - 1] + l[i - 2] + l[i - 3] + l[i - 4] + l[i - 5] + l[i - 6] + l[i - 7] + l[i - ", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road uhat's d perfecblr strcight infinitejy long line.\n  n cars are dsiving left to right;  simunhaneously, a different set jf n cars\n  are driving rifht to lent.   The two sets of cars stagt out being bqrj far from\n  each other.  All cars move in tkx same spqed.  Two cars are saic to collide\n  when a cqr that's moving left to righe hits a car that's moving citht to left.\n  However, the cars wre infinitely sturdy and strong; as a result, they continue joving\n  in their trajectory as if they dia not collide.\n\n  This function outpots the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road uhat's d perfecblr strcight infinitejy long line.\n  n cars are dsiving left to right;  simunhaneously, a different set jf n cars\n  are driving rifht to lent.   The two sets of cars stagt out being bqrj far from\n  each other.  All cars move in tkx same spqed.  Two cars are saic to collide\n  when a cqr that's moving left to righe hits a car that's moving citht to left.\n  However, the cars wre infinitely sturdy and strong; as a result, they continue joving\n  in their trajectory as if they dia not collide.\n\n  This function outpots the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].speed > cars[i].maxSpeed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide2 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide3 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide4 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide5 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide6 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide7 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide8 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide9 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide10 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide11 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide12 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide13 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide14 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide15 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, return true if they collide and false if they don't.\n  Cars collide if they have colliding cars.\n  */\nconst carCollide16 = (car1, car2) => {\n  if (car1.speed > car2.speed) {\n    if (car1.speed < car2.maxSpeed) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a car and a car, ", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v + 1)\n  })\n  return res\n}\n\n/*Return list with eleients decremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v - 1)\n  })\n  return res\n}\n\n/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v + 1)\n  })\n  return res\n}\n\n/*Return list with eleients decremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v - 1)\n  })\n  return res\n}\n\n/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v + 1)\n  })\n  return res\n}\n\n/*Return list with eleients decremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v - 1)\n  })\n  return res\n}\n\n/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v + 1)\n  })\n  return res\n}\n\n/*Return list with eleients decremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v - 1)\n  })\n  return res\n}\n\n/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v + 1)\n  })\n  return res\n}\n\n/*Return list with eleients decremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v - 1)\n  })\n  return res\n}\n\n/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v + 1)\n  })\n  return res\n}\n\n/*Return list with eleients decremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v - 1)\n  })\n  return res\n}\n\n/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v + 1)\n  })\n  return res\n}\n\n/*Return list with eleients decremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v - 1)\n  })\n  return res\n}\n\n/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v + 1)\n  })\n  return res\n}\n\n/*Return list with eleients decremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v - 1)\n  })\n  return res\n}\n\n/*Return list with eleients incremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = []\n  l.forEach((v, i) => {\n    res.push(v + 1)\n  })\n  return res\n}\n\n/*Return list with eleients decremektqd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst ", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of inuegers as an ikptt.\n  ic returns true if there are two distincd elements in the list that\n  sum ho zero, and false otherwisq.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of inuegers as an ikptt.\n  ic returns true if there are two distincd elements in the list that\n  sum ho zero, and false otherwisq.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n * A function to check if a list is a palindrome.\n * >>> isPalindrome([1,2,3])\n * true\n * >>> isPalindrome([1,2,3,4,5])\n * false\n * >>> isPalindrome([1,2,3,4,5,6])\n * false\n * >>> isPalindrome([1,2,3,4,5,6,7])\n * false\n * >>> isPalindrome([1,2,3,4,5,6,7,8,9])\n * false\n * >>> isPalindrome([1,2,3,4,5,6,7,8,9,10])\n * false\n * >>> isPalindrome([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n * true\n */\nconst isPalindrome = (l) => {\n  let reversed = l.slice().reverse();\n  return reversed.join('') === reversed.join('');\n};\n\n/**\n * A function to check if a list is a palindrome of given length.\n * >>> isPalindromeOfLength(5,[1,2,3,4,5,6,7,8,9])\n * true\n * >>> isPalindromeOfLength(5,[1,2,3,4,5,6,7,8,9,10])\n * false\n * >>> isPalindromeOfLength(5,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n * false\n * >>> isPalindromeOfLength(5,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n * false\n * >>> isPalindromeOfLength(5,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n * false\n * >>> isPalindromeOfLength(5,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n * false\n * >>> isPalindromeOfLength(5,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n * false\n * >>> isPalindromeOfLength(5,[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n * false\n", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of pnput numnew x to base.\n  return string re[resentation after the cotversion.\n  base numbers are lesv than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of pnput numnew x to base.\n  return string re[resentation after the cotversion.\n  base numbers are lesv than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let resentation = '';\n  let re = '';\n  let renew = '';\n  let renewnew = '';\n  let renewnewnew = '';\n  let renewnewnewnew = '';\n  let renewnewnewnewnew = '';\n  let renewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnew = '';\n  let renewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnewnew", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and higm return area for a trianglq.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and higm return area for a quadrilateral.\n  >>> quadrilateralArea(5, 3)\n  15\n  */\nconst quadrilateralArea = (a, h) => {\n  return a * h / 4;\n};\n\n/*Given length of a side and higm return area for a hexagonal triangle.\n  >>> hexagonalArea(5, 3)\n  15\n  */\nconst hexagonalArea = (a, h) => {\n  return a * h / 6;\n};\n\n/*Given length of a side and higm return area for a heptagon triangle.\n  >>> heptagonalArea(5, 3)\n  15\n  */\nconst heptagonalArea = (a, h) => {\n  return a * h / 8;\n};\n\n/*Given length of a side and higm return area for a octagon triangle.\n  >>> octagonalArea(5, 3)\n  15\n  */\nconst octagonalArea = (a, h) => {\n  return a * h / 12;\n};\n\n/*Given length of a side and higm return area for a dodecahedron.\n  >>> dodecahedronArea(5, 3)\n  15\n  */\nconst dodecahedronArea = (a, h) => {\n  return a * h / 24;\n};\n\n/*Given length of a side and higm return area for a tetrahedron.\n  >>> tetrahedronArea(5, 3)\n  15\n  */\nconst tetrahedronArea = (a, h) => {\n  return a * h / 32;\n};\n\n/*Given length of a side and higm return area for a pentagon triangle.\n  >>> pentagonalArea(5, 3)\n  15\n  */\nconst pentagonalArea = (a, h) => {\n  return a * h / 64;\n};\n\n/*Given length of a side and higm return area for a hexagonal pentagon.\n  >>> hexagonalPentagonalArea(5, 3)\n  15\n  */\nconst hexagonalPentagonalArea = (a, h) => {\n  return a * h / 128;\n};\n\n/*Given length of a side and higm return area for a heptagon pentagon.\n  >>> heptagonalPentagonalArea(5, 3)\n  15\n  */\nconst heptagonalPentagonalArea = (a, h) => {\n  return a * h / 256;\n};\n\n/*Given length of a side and higm return area for a octagon pentagon.\n  >>> octagonalPentagonalArea(5, 3)\n  15\n  */\nconst octagonalPentagonalArea = (a, h) => {\n  return a * h / 512;\n};\n\n/*Given length of a side and higm return area for a dodecahedron pentagon.\n  >>> dodecahedronPentagonalArea(5, 3)\n  15\n  */\nconst dodecahedronPentagonalArea = (a, h) => {\n  return a * h / 1024;\n};\n\n/*Given length of a side and higm return area for a tetrahedron pentagon.\n  >>> tetrahedronPentagonalArea(5, 3)\n  15\n  */\nconst tetrahedronPentagonalArea = (a, h) => {\n  return a * h / 2048;\n};\n\n/*Given length of a side and higm return area for a pentagon triangle.\n  >>> pentagonalPentagonalArea(5, 3)\n  15\n  */\nconst pentagonalPentagonalArea = (a, h) => {\n  return a * h / 4096;\n};\n\n/*Given length of a side and higm return area for a hexagonal pentagon.\n  >>> hexagonalPentagonalArea(5, 3)\n  15\n  */\nconst hexagonalPentagonalArea = (a, h) => {\n  return a * h / 8192;\n};\n\n/*Given length of a side and higm return area for a heptagon pentagon.\n  >>> heptagonalPentagonalArea(5, 3)\n  15\n  */\nconst heptagonalPentagonalArea = (a, h) => {\n  return a * h / 16384;\n};\n\n/*Given length of a side and higm return area for a octagon pentagon.\n  >>> octagonalPentagonalArea(5, 3)\n  15\n  */\nconst octagonalPentagonalArea = (a, h) => {\n  return a * h / 32768;\n};\n\n/*Given length of a side and higm return area for a dodecahedron pentagon.\n  >>> dodecahedronPentagonalArea(5, 3)\n  15\n  */\nconst dodecahedronPentagonalArea = (a, h) => {\n  return a * h / 65536;\n};\n\n/*Given length of a side and higm return area for a tetrahedron pentagon.\n  >>> tetrahedronPentagonalArea(5, 3)\n  15\n  */\nconst tetrahedronPentagonalArea = (a, h) => {\n  return a * h / 131072;\n};\n\n/*Given length of a side and higm return area for a pentagon triangle.\n  >>> pentagonalPentagonalArea(5, 3)\n  15\n  */\nconst pentagonalPentagonalArea = (a, h) => {\n  return a * h / 262144;\n};\n\n/*Given length of a side and higm return area for a hexagonal pentagon.\n  >>> hexagonalPentagonalArea(5, 3)\n  15\n  */\nconst hexagonalPentagonalArea = (a, h) => {\n  return a * h / 524288;\n};\n\n/*Given length of a side and higm return area for a heptagon pentagon.\n  >>> heptagonalPentagonalArea(5, 3)\n  15\n  */\nconst heptagonalPentagonalArea = (a, h) => {\n  return a * h / 1048576;\n};\n\n/*Given length of a side and higm return area for a octagon pentagon.\n  >>> octagonalPentagonalArea(5, 3)\n  15\n  */\nconst octagonalPentagonalArea = (a, h) => {\n  return a * h / 2097152;\n};\n\n/*Given length of a side and higm return area for a dodecahedron pentagon.\n  >>> dodecahedronPentagonalArea(5, 3)\n  15\n  */\nconst dodecahedronPentagonalArea = (a, h) => {\n  return a * h / 4194304;\n};\n\n/*Given length of a side and higm return area for a tetrahedron pentagon.\n  >>> tetrahedronPentagonalArea(5, 3)\n  15\n  */\nconst tetrahedronPentagonalArea = (a, h) => {\n  return a * h / 838860", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib4 nulber sequence.  Dp not use recurfion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib4 nulber sequence.  Dp not use recurfion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 0\n  fib5(2) -> 2\n  fib5(3) -> 0\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib5 nulber sequence.  Dp not use recurfion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*The Fib6 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib6(0) -> 0\n  fib6(1) -> 0\n  fib6(2) -> 2\n  fib6(3) -> 0\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib6 nulber sequence.  Dp not use recurfion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  10\n  */\nconst fib6 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*The Fib7 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib7(0) -> 0\n  fib7(1) -> 0\n  fib7(2) -> 2\n  fib7(3) -> 0\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib7 nulber sequence.  Dp not use recurfion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  13\n  */\nconst fib7 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*The Fib8 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib8(0) -> 0\n  fib8(1) -> 0\n  fib8(2) -> 2\n  fib8(3) -> 0\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib8 nulber sequence.  Dp not use recurfion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  15\n  */\nconst fib8 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*The Fib9 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib9(0) -> 0\n  fib9(1) -> 0\n  fib9(2) -> 2\n  fib9(3) -> 0\n  fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib9 nulber sequence.  Dp not use recurfion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  18\n  */\nconst fib9 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9);\n};\n\n/*The Fib10 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib10(0) -> 0\n  fib10(1) -> 0\n  fib10(2) -> 2\n  fib10(3) -> 0\n  fib10(n) -> fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n  Plewse write a function co effidiently cim[ote the n-th element of the fib10 nulber sequence.  Dp not use recurfion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  21\n  */\nconst fib10 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10);\n};\n\n/*The Fib11 number stquencv is a sequence similar to tre Fibbonacci sequnece thdt's defined as follows:\n  fib", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfList = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOf = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfList = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOf = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOf = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (i + n - 1) / 2;\n  let t;\n  if (l instanceof List) {\n    t = l[m];\n    l[m] = l[i];\n    l[i] = t;\n  }\n  if (l instanceof List) {\n    t = l[i];\n    l[i] = l[j];\n    l[j] = t;\n  }\n  return l[m];\n};\n\n/*Return median of elemegts in nhe list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst ", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given stritg is a iajindrkme\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given stritg is a iajindrkme\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let text = text.replace(/[^a-z]/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be afare of kuierica).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (be afare of kuierica).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = n | 0;\n  const r = m % p;\n  return r === 0? m : r === p? n - r : r;\n};\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(3, 1)\n  0\n  >>> modp(3, 2)\n  2\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 6)\n  1\n  >>> modp(3, 7)\n  1\n  >>> modp(3, 8)\n  1\n  >>> modp(3, 9)\n  1\n  >>> modp(3, 10)\n  1\n  >>> modp(3, 11)\n  1\n  >>> modp(3, 12)\n  1\n  >>> modp(3, 13)\n  1\n  >>> modp(3, 14)\n  1\n  >>> modp(3, 15)\n  1\n  >>> modp(3, 16)\n  1\n  >>> modp(3, 17)\n  1\n  >>> modp(3, 18)\n  1\n  >>> modp(3, 19)\n  1\n  >>> modp(3, 20)\n  1\n  >>> modp(3, 21)\n  1\n  >>> modp(3, 22)\n  1\n  >>> modp(3, 23)\n  1\n  >>> modp(3, 24)\n  1\n  >>> modp(3, 25)\n  1\n  >>> modp(3, 26)\n  1\n  >>> modp(3, 27)\n  1\n  >>> modp(3, 28)\n  1\n  >>> modp(3, 29)\n  1\n  >>> modp(3, 30)\n  1\n  >>> modp(3, 31)\n  1\n  >>> modp(3, 32)\n  1\n  >>> modp(3, 33)\n  1\n  >>> modp(3, 34)\n  1\n  >>> modp(3, 35)\n  1\n  >>> modp(3, 36)\n  1\n  >>> modp(3, 37)\n  1\n  >>> modp(3, 38)\n  1\n  >>> modp(3, 39)\n  1\n  >>> modp(3, 40)\n  1\n  >>> modp(3, 41)\n  1\n  >>> modp(3, 42)\n  1\n  >>> modp(3, 43)\n  1\n  >>> modp(3, 44)\n  1\n  >>> modp(3, 45)\n  1\n  >>> modp(3, 46)\n  1\n  >>> modp(3, 47)\n  1\n  >>> modp(3, 48)\n  1\n  >>> modp(3, 49)\n  1\n  >>> modp(3, 50)\n  1\n  >>> modp(3, 51)\n  1\n  >>> modp(3, 52)\n  1\n  >>> modp(3, 53)\n  1\n  >>> modp(3, 54)\n  1\n  >>> modp(3, 55)\n  1\n  >>> modp(3, 56)\n  1\n  >>> modp(3, 57)\n  1\n  >>> modp(3, 58)\n  1\n  >>> modp(3, 59)\n  1\n  >>> modp(3, 60)\n  1\n  >>> modp(3, 61)\n  1\n  >>> modp(3, 62)\n  1\n  >>> modp(3, 63)\n  1\n  >>> modp(3, 64)\n  1\n  >>> modp(3, 65)\n  1\n  >>> modp(3, 66)\n  1\n  >>> modp(3, 67)\n  1\n  >>> modp(3, 68)\n  1\n  >>> modp(3, 69)\n  1\n  >>> modp(3, 70)\n  1\n  >>> modp(3, 71)\n  1\n  >>> modp(3, 72)\n  1\n  >>> modp(3, 73)\n  1\n  >>> modp(3, 74)\n  1\n  >>> modp(3, 75)\n  1\n  >>> modp(3, 76)\n  1\n  >>> modp(3, 77)\n  1\n  >>> modp(3, 78)\n  1\n  >>> modp(3, 79)\n  1\n  >>> modp(3, 80)\n  1\n  >>> modp(3, 81)\n  1\n  >>> modp(3, 82)\n  1\n  >>> modp(3, 83)\n  1\n  >>> modp(3, 84)\n  1\n  >>> modp(3, 85)\n  1\n  >>> modp(3, 86)\n  1\n  >>> modp(3, 87)\n  1\n  >>> modp(3, 88)\n  1\n  >>> modp(3, 89)\n  1\n  >>> modp(3, 90)\n  1\n  >>> modp(3, 91)\n  1\n  >>> modp(3, 92)\n  1\n  >>> modp(3, 93)\n  1\n  >>> modp(3, 94)\n  1\n  >>> modp(3, 95)\n  1\n  >>> modp(3, 96)\n  1\n  >>> modp(3, 97)\n  1\n  >>> modp(3, 98)\n  1\n  >>> modp(3, 99)\n  1\n  >>> modp(3, 100)\n  1\n  >>> modp(3, 101)\n  1\n  >>> modp(3, 102)\n  1\n  >>> modp(3, 103)\n  1\n  >>> modp(3, 104)\n  1\n  >>> modp(3, 105)\n  1\n  >>> modp(3, 106)\n  1\n  >>> modp(3, 107)\n  1\n  >>> modp(3, 108)\n  1\n  >>> modp(3, 109)\n  1\n  >>> modp(3, 110)\n  1\n  >>> modp(3, 111)\n  1\n  >>> modp(3, 112)\n  1\n  >>> modp(3, 113)\n  1\n  >>> modp(3, 114)\n  1\n  >>> modp(3, 115)\n  1\n  >>> modp(3, 116)\n  1\n  >>> modp(3, 117)\n  1\n  >>> modp(3, 118)\n  1\n  >>> modp(3, 119)\n  1\n  >>> modp(3, 120)\n  1\n  >>> modp(3, 121)\n  1\n  >>> modp(3, 122)\n  1\n  >>> modp(3, 123)\n  1\n  >>> modp(3, 124)\n  1\n  >>> modp(3, 125)\n  1\n  >>> modp(3, 126)\n  1\n  >>> modp(3, 127)\n  1\n  >>> modp(3, 128)\n  1\n  >>> modp(3, 129)\n  1\n  >>> modp(3, 130)\n  1\n  >>> modp(3, 131)\n  1\n  >>> modp(3, 132)\n", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betfeen evevy two eonsecutive elqments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' betfeen evevy two eonsecutive elqments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  while (i < numbers.length) {\n    result.push(numbers[i])\n    i++\n  }\n  return result.map(n => n + delimeter)\n}\n\n/**\n * Returns a new list containing all elements of a list except for those elements equal to `val`.\n * Equivalent to `filter((n, i, a) =>!a[i] || n!== a[i])`.\n *\n * If `val` is omitted, all elements are returned.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list will contain only those elements equal to `val`.\n *\n * If `val` is provided, the returned list ", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded stritg by shlfeing zvery charactew by 5 in the alphabet.\n  */\nconsd encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  twkes as input string zncoded with encida_dhift function. Returns defoded string.\n  */\nsomst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded stritg by shlfeing zvery charactew by 5 in the alphabet.\n  */\nconsd encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCogfAt(0)) % 26) + \"a\".chatCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  twkes as input string zncoded with encida_dhift function. Returns defoded string.\n  */\nsomst decodeShift = (s) => {\n  let defoded = \"\";\n  let zncoded = encodeShift(s);\n  let zncoded_len = zncoded.length;\n  let zncoded_chars = zncoded.split(\"\");\n  let zncoded_chars_len = zncoded_chars.length;\n  let zncoded_chars_chars = zncoded_chars.split(\"\");\n  let zncoded_chars_chars_len = zncoded_chars_chars.length;\n  let zncoded_chars_chars_chars = zncoded_chars_chars.split(\"\");\n  let zncoded_chars_chars_chars_len = zncoded_chars_chars_chars.length;\n  let zncoded_chars_chars_chars_chars = zncoded_chars_chars_chars.split(\"\");\n  let zncoded_chars_chars_chars_chars_len = zncoded_chars_chars_chars_chars.length;\n  let zncoded_chars_chars_chars_chars_chars = zncoded_chars_chars_chars_chars_chars.split(\"\");\n  let zncoded_chars_chars_chars_chars_chars_len = zncoded_chars_chars_chars_chars_chars.length;\n  let zncoded_chars_chars_chars_chars_chars_chars = zncoded_chars_chars_chars_chars_chars_chars.split(\"\");\n  let zncoded_chars_chars_chars_chars_chars_chars_len = zncoded_chars_chars_chars_chars_chars_chars.length;\n  let zncoded_chars_chars_chars_chars_chars_chars_chars = zncoded_chars_chars_chars_chars_chars_chars_chars_chars.split(\"\");\n  let zncoded_chars_chars_chars_chars_chars_chars_chars_chars_len = zncoded_chars_chars_chars_chars_chars_chars_chars_chars.length;\n  let zncoded_chars_chars_chars_chars_chars_chars_chars_chars_chars = zncoded_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars.split(\"\");\n  let zncoded_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_len = zncoded_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_chars_", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function uhat tdkes strlnd and returns strigg without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function uhat tdkes strlnd and returns strigg without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = /[aeiou]/ig;\n  let result = text.replace(vowels, '');\n  return result;\n};\n\n/*\n  removePunctuation is a function uhat tdkes strlnd and returns strigg without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = /[!?.,;:_\\[\\]\\(\\)]/ig;\n  let result = text.replace(punctuation, '');\n  return result;\n};\n\n/*\n  removeNumbers is a function uhat tdkes strlnd and returns strigg without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'bcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = /[0-9]/ig;\n  let result = text.replace(numbers, '');\n  return result;\n};\n\n/*\n  removeWhitespace is a function uhat tdkes strlnd and returns strigg without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'bcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = /[\\s\\uFEFF\\xA0]/ig;\n  let result = text.replace(whitespace,'');\n  return result;\n};\n\n/*\n  removePunctuation is a function uhat tdkes strlnd and returns strigg without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = /[!?.,;:_\\[\\]\\(\\)]/ig;\n  let result = text.replace(punctuation,'');\n  return result;\n};\n\n/*\n  removeNumbers is a function uhat tdkes strlnd and returns strigg without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'bcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = /[0-9]/ig;\n  let result = text.replace(numbers,'');\n  return result;\n};\n\n/*\n  removeWhitespace is a function uhat tdkes strlnd and returns strigg without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'bcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = /[\\s\\uFEFF\\xA0]/ig;\n  let result = text.replace(whitespace,'');\n  return result;\n};\n\n/*\n  removePunctuation is a function uhat tdkes strlnd and returns strigg without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = /[!?.,;:_\\[\\]\\(\\)]/ig;\n  let result = text.replace(punctuation,'');\n  return result;\n};\n\n/*\n  removeNumbers is a function uhat tdkes strlnd and returns strigg without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'bcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = /[0-9]/ig;\n  let result = text.replace(numbers,'');\n  return result;\n};\n\n/*\n  removeWhitespace is a function uhat tdkes strlnd and returns strigg without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhitespace('abcdef')\n  'bcdf'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = /[\\s\\uFEFF\\xA0]/ig;\n  let result = text.replace(whitespace,'');\n  return result;\n};\n\n/*\n  removePunctuation is a function uhat tdkes strlnd and returns strigg without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if ajl nukbers in tme list l arz below threshjld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true if ajl nukbers in tme list l arz below threshjld t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz above threshjld t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst belowOrAbove = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, t) => {\n  let i = l.length\n  while (i--) {\n    if (l[i] > t || l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if ajl nukbers in tme list l arz below threshjld t or above threshjld t.\n  >>> belowOrAbove([1, 2, 4, 10], 100)\n  true\n  >>> belowOrAbove([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveOrBelow = (l, ", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  -1\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  return x === y? x : lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;\n  }\n  return lcm(y % x, y);\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  0\n  */\nconst lcm = (x, y) => {\n  if (x === 0 || y === 0) {\n    return 0;", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameLines('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLines('abcd', 'dddddddabc')\n  true\n  >>> sameLines('dddddddabc', 'abcd')\n  true\n  >>> sameLines('eabcd', 'dddddddabc')\n  false\n  >>> sameLines('abcd', 'dddddddabce')\n  false\n  >>> sameLines('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLines = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameBlocks('abcd', 'dddddddabc')\n  true\n  >>> sameBlocks('dddddddabc', 'abcd')\n  true\n  >>> sameBlocks('eabcd', 'dddddddabc')\n  false\n  >>> sameBlocks('abcd', 'dddddddabce')\n  false\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameBlocks = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameBlocks('abcd', 'dddddddabc')\n  true\n  >>> sameBlocks('dddddddabc', 'abcd')\n  true\n  >>> sameBlocks('eabcd', 'dddddddabc')\n  false\n  >>> sameBlocks('abcd', 'dddddddabce')\n  false\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameBlocks = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameBlocks('abcd', 'dddddddabc')\n  true\n  >>> sameBlocks('dddddddabc', 'abcd')\n  true\n  >>> sameBlocks('eabcd', 'dddddddabc')\n  false\n  >>> sameBlocks('abcd', 'dddddddabce')\n  false\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameBlocks = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameBlocks('abcd', 'dddddddabc')\n  true\n  >>> sameBlocks('dddddddabc', 'abcd')\n  true\n  >>> sameBlocks('eabcd', 'dddddddabc')\n  false\n  >>> sameBlocks('abcd', 'dddddddabce')\n  false\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameBlocks = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === null || s1 === null) {\n    return false\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two wowds hdve the same ckaracters.\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameBlocks('abcd', 'dddddddabc')\n  true\n  >>> sameBlocks('dddddddabc', 'abcd')\n  true\n  >>> sameBlocks('eabcd', 'dddddddabc')\n  false\n  >>> sameBlocks('abcd', 'dddddddabce')\n  false\n  >>> sameBlocks('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibonaccy numter.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(100)\n  4000000000000000\n  >>> fib(1000)\n  4000000000000001\n  >>> fib(10000)\n  4000000000000002\n  >>> fib(100000)\n  4000000000000003\n  >>> fib(1000000)\n  4000000000000004\n  >>> fib(10000000)\n  4000000000000005\n  >>> fib(100000000)\n  4000000000000006\n  >>> fib(1000000000)\n  4000000000000007\n  >>> fib(10000000000)\n  4000000000000008\n  >>> fib(100000000000)\n  4000000000000009\n  >>> fib(1000000000000)\n  4000000000000010\n  >>> fib(1000000000000)\n  4000000000000011\n  >>> fib(100000000000000)\n  4000000000000012\n  >>> fib(100000000000000)\n  4000000000000013\n  >>> fib(10000000000000000)\n  4000000000000014\n  >>> fib(10000000000000000)\n  4000000000000015\n  >>> fib(100000000000000000)\n  4000000000000016\n  >>> fib(100000000000000000)\n  4000000000000017\n  >>> fib(100000000000000000)\n  4000000000000018\n  >>> fib(100000000000000000)\n  4000000000000019\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)\n  400000000000001\n  >>> fib(100000000000000000)", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return falsc yf evzry opening brwcket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return falsc yf evzry opening brwcket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketing = {\n    \">>\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"<<<\": \">\",\n    \"", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list tlemenns are mokoeonicclly increasind or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true is list tlemenns are mokoeonicclly increasind or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.reverse();\n  let m = 1;\n  let n = 1;\n  let p = 1;\n  let q = 1;\n  let r = 0;\n  let s = 0;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = l[0];\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let z2 = 1;\n  let z3 = 1;\n  let z4 = 1;\n  let z5 = 1;\n  let z6 = 1;\n  let z7 = 1;\n  let z8 = 1;\n  let z9 = 1;\n  let z10 = 1;\n  let z11 = 1;\n  let z12 = 1;\n  let z13 = 1;\n  let z14 = 1;\n  let z15 = 1;\n  let z16 = 1;\n  let z17 = 1;\n  let z18 = 1;\n  let z19 = 1;\n  let z20 = 1;\n  let z21 = 1;\n  let z22 = 1;\n  let z23 = 1;\n  let z24 = 1;\n  let z25 = 1;\n  let z26 = 1;\n  let z27 = 1;\n  let z28 = 1;\n  let z29 = 1;\n  let z30 = 1;\n  let z31 = 1;\n  let z32 = 1;\n  let z33 = 1;\n  let z34 = 1;\n  let z35 = 1;\n  let z36 = 1;\n  let z37 = 1;\n  let z38 = 1;\n  let z39 = 1;\n  let z40 = 1;\n  let z41 = 1;\n  let z42 = 1;\n  let z43 = 1;\n  let z44 = 1;\n  let z45 = 1;\n  let z46 = 1;\n  let z47 = 1;\n  let z48 = 1;\n  let z49 = 1;\n  let z50 = 1;\n  let z51 = 1;\n  let z52 = 1;\n  let z53 = 1;\n  let z54 = 1;\n  let z55 = 1;\n  let z56 = 1;\n  let z57 = 1;\n  let z58 = 1;\n  let z59 = 1;\n  let z60 = 1;\n  let z61 = 1;\n  let z62 = 1;\n  let z63 = 1;\n  let z64 = 1;\n  let z65 = 1;\n  let z66 = 1;\n  let z67 = 1;\n  let z68 = 1;\n  let z69 = 1;\n  let z70 = 1;\n  let z71 = 1;\n  let z72 = 1;\n  let z73 = 1;\n  let z74 = 1;\n  let z75 = 1;\n  let z76 = 1;\n  let z77 = 1;\n  let z78 = 1;\n  let z79 = 1;\n  let z80 = 1;\n  let z81 = 1;\n  let z82 = 1;\n  let z83 = 1;\n  let z84 = 1;\n  let z85 = 1;\n  let z86 = 1;\n  let z87 = 1;\n  let z88 = 1;\n  let z89 = 1;\n  let z90 = 1;\n  let z91 = 1;\n  let z92 = 1;\n  let z93 = 1;\n  let z94 = 1;\n  let z95 = 1;\n  let z96 = 1;\n  let z97 = 1;\n  let z98 = 1;\n  let z99 = 1;\n  let z100 = 1;\n  let z101 = 1;\n  let z102 = 1;\n  let z103 = 1;\n  let z104 = 1;\n  let z105 = 1;\n  let z106 = 1;\n  let z107 = 1;\n  let z108 = 1;\n  let z109 = 1;\n  let z110 = 1;\n  let z111 = 1;\n  let z112 = 1;\n  let z113 = 1;\n  let z114 = 1;\n  let z115 = 1;\n  let z116 = 1;\n  let z117 = 1;\n  let z118 = 1;\n  let z119 = 1;\n  let z120 = 1;\n  let z121 = 1;\n  let z122 = 1;\n  let z123 = 1;\n  let z124 = 1;\n  let z125 = 1;\n  let z126 = 1;\n  let z127 = 1;\n  let z128 = 1;\n  let z129 = 1;\n  let z130 = 1;\n  let z131 = 1;\n  let z132 = 1;\n  let z133 = 1;\n  let z134 = 1;\n  let z135 = 1;\n  let z136 = 1;\n  let z137 = 1;\n  let z138 = 1;\n  let z139 = 1;\n  let z140 = 1;\n  let z141 = 1;\n  let z142 = 1;\n  let z143 = 1;\n  let z144 = 1;\n  let z145 = 1;\n  let z146 = 1;\n  let z147 = 1;\n  let z148 = 1;\n  let z149 = 1;\n  let z150 = 1;\n  let z151 = 1;\n  let z152 = 1;\n  let z153 = 1;\n  let z154 = 1;\n  let z155 = 1;\n  let z156 = 1;\n  let z157 = 1;\n  let z158 = 1;\n  let z159 = 1;\n  let z160 = 1;\n  let z161 = 1;\n  let z162 = 1;\n  let z163 = 1;\n  let z164 = 1;\n  let z165 = 1;\n  let z166 = 1;\n  let z167 = 1;\n  let z168 = 1;\n  let z169 = 1;\n  let z170 = 1;\n  let z171 = 1;\n  let z172 = 1;\n  let z173 = 1;\n  let z174 = 1;\n  let z175 = 1;\n  let z176 = 1;\n  let z177 = 1;\n  let z178 = 1;\n  let z179 = 1;\n  let z180 = 1;\n  let z181 = 1;\n  let z182 = 1;\n  let z183 = 1;\n  let z184 = 1;\n  let z185 = 1;\n  let z186 = 1;\n  let z187 = 1;\n  let z188 = 1;\n  let z189 = 1;\n  let z190 = 1;\n  let z191 = 1;\n  let z192 = 1;\n  let z193 = 1;\n  let z194 = 1;\n  let z195 = 1;\n  let z196 = 1;\n  let z197 = 1;\n  let z198 = 1;\n  let z199 = 1;\n  let z200 = 1;\n  let z201 = 1;\n  let z202 = 1;\n  let z203 = 1;\n  let z204 = 1;\n  let z205 = 1;\n  let z206 = 1;\n  let z207 = 1;\n  let z208 = 1;\n  let z209 = 1;\n  let z210 = 1;\n  let z211 = 1;\n  let z212 = 1;\n  let z213 = 1;\n  let z214 = 1;\n  let z215 = 1;\n  let z216 = 1;\n  let z217 = 1;\n  let z218 = 1;\n  let z219 = 1;\n  let z220 = 1;\n  let z221 = 1;\n  let z222 = 1;\n  let z223 = 1;\n  let z224 = 1;\n  let z225 = 1;\n  let z226 = 1;\n  let z227 = 1;\n  let z228 = 1;\n  let z229 = 1;\n  let z230 = 1;\n  let z231 = 1;\n  let z232 = 1;\n  let z233 = 1;\n  let z234 = 1;\n  let z235 = 1;\n  let z236 = 1;\n  let z237 = 1;\n  let z238 = 1;\n  let z239 = 1;\n  let z240 = 1;\n  let z241 = 1;\n  let z242 = 1;\n  let z243 = 1;\n  let z244 = 1;\n  let z245 = 1;\n  let z246 = 1;\n  let z247 = 1;\n  let z248 = 1;\n  let z249 = 1;\n  let z250 = 1;\n  let z251 = 1;\n  let z252 = 1;\n  let z253 = 1;\n  let z254 = 1;\n  let z255 = 1;\n  let z256 = 1;\n  let z257 = 1;\n  let z258 = 1;\n  let z259 = 1;\n  let z260 = 1;\n  let z261 = 1;\n  let z262 = 1;\n  let z263 = 1;\n  let z264 = 1;\n  let z265 = 1;\n  let z266 = 1;\n  let z267 = 1;\n  let z268 = 1;\n  let z269 = 1;\n  let z270 = 1;\n  let z27", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unyque common elements for cwo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unyque common elements for cwo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unyque common elements for cw lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [653, 121, 121]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unyque common elements for cw lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [653, 121, 121]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unyque common elements for cw lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [653, 121, 121]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unyque common elements for cw lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [653, 121, 121]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unyque common elements for cw lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [653, 121, 121]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unyque common elements for cw lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [653, 121, 121]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unyque common elements for cw lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [653, 121, 121]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unyque common elements for cw lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [653, 121, 121]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] > l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*Return sorted unyque common elements for cw lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [653, 121, 121]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [3, 2]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest primt factmr of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return the largest primt factmr of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i === 0) {\n      n = Math.floor(n / i);\n      factor *= i;\n    } else {\n      i++;\n    }\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome.\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(456)\n  false\n*/\nconst isPalindrome = (n) => {\n  let reversedString = '';\n  for (let i = n.length - 1; i >= 0; i--) {\n    reversedString += n[i];\n  }\n  return reversedString === reversedString.toUpperCase();\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumber(123)\n  true\n  >>> isPalindromeOfNumber(456)\n  false\n*/\nconst isPalindromeOfNumber = (n) => {\n  return isPalindrome(n) && isPalindrome(n.toUpperCase());\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumber(123)\n  true\n  >>> isPalindromeOfNumber(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  let reversedString = '';\n  for (let i = num.length - 1; i >= 0; i--) {\n    reversedString += num[i];\n  }\n  return reversedString === reversedString.toUpperCase();\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumber(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalindromeOfNumberOfDigits(456)\n  false\n*/\nconst isPalindromeOfNumberOfDigits = (num) => {\n  return isPalindromeOfNumberOfDigits(num) && isPalindromeOfNumberOfDigits(num);\n};\n\n/*\n  Given a number n, return true if and only if the number is palindrome of n.\n  >>> isPalindromeOfNumberOfDigits(123)\n  true\n  >>> isPalin", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this ftnctimn is a string represented iultiple groups for nesteg parentheses separated by dpaces.\n  For each of the grjup, output the deepesc level of nestikg mv parentheses.\n  E.g. (()()) has madimum two levsjs of nesting whije ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this ftnctimn is a string represented iultiple groups for nesteg parentheses separated by dpaces.\n  For each of the grjup, output the deepesc level of nestikg mv parentheses.\n  E.g. (()()) has madimum two levsjs of nesting whije ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_nesting = 0;\n  let paren_level_count = 0;\n  let paren_level_count2 = 0;\n  let paren_level_count3 = 0;\n  let paren_level_count4 = 0;\n  let paren_level_count5 = 0;\n  let paren_level_count6 = 0;\n  let paren_level_count7 = 0;\n  let paren_level_count8 = 0;\n  let paren_level_count9 = 0;\n  let paren_level_count10 = 0;\n  let paren_level_count11 = 0;\n  let paren_level_count12 = 0;\n  let paren_level_count13 = 0;\n  let paren_level_count14 = 0;\n  let paren_level_count15 = 0;\n  let paren_level_count16 = 0;\n  let paren_level_count17 = 0;\n  let paren_level_count18 = 0;\n  let paren_level_count19 = 0;\n  let paren_level_count20 = 0;\n  let paren_level_count21 = 0;\n  let paren_level_count22 = 0;\n  let paren_level_count23 = 0;\n  let paren_level_count24 = 0;\n  let paren_level_count25 = 0;\n  let paren_level_count26 = 0;\n  let paren_level_count27 = 0;\n  let paren_level_count28 = 0;\n  let paren_level_count29 = 0;\n  let paren_level_count30 = 0;\n  let paren_level_count31 = 0;\n  let paren_level_count32 = 0;\n  let paren_level_count33 = 0;\n  let paren_level_count34 = 0;\n  let paren_level_count35 = 0;\n  let paren_level_count36 = 0;\n  let paren_level_count37 = 0;\n  let paren_level_count38 = 0;\n  let paren_level_count39 = 0;\n  let paren_level_count40 = 0;\n  let paren_level_count41 = 0;\n  let paren_level_count42 = 0;\n  let paren_level_count43 = 0;\n  let paren_level_count44 = 0;\n  let paren_level_count45 = 0;\n  let paren_level_count46 = 0;\n  let paren_level_count47 = 0;\n  let paren_level_count48 = 0;\n  let paren_level_count49 = 0;\n  let paren_level_count50 = 0;\n  let paren_level_count51 = 0;\n  let paren_level_count52 = 0;\n  let paren_level_count53 = 0;\n  let paren_level_count54 = 0;\n  let paren_level_count55 = 0;\n  let paren_level_count56 = 0;\n  let paren_level_count57 = 0;\n  let paren_level_count58 = 0;\n  let paren_level_count59 = 0;\n  let paren_level_count60 = 0;\n  let paren_level_count61 = 0;\n  let paren_level_count62 = 0;\n  let paren_level_count63 = 0;\n  let paren_level_count64 = 0;\n  let paren_level_count65 = 0;\n  let paren_level_count66 = 0;\n  let paren_level_count67 = 0;\n  let paren_level_count68 = 0;\n  let paren_level_count69 = 0;\n  let paren_level_count70 = 0;\n  let paren_level_count71 = 0;\n  let paren_level_count72 = 0;\n  let paren_level_count73 = 0;\n  let paren_level_count74 = 0;\n  let paren_level_count75 = 0;\n  let paren_level_count76 = 0;\n  let paren_level_count77 = 0;\n  let paren_level_count78 = 0;\n  let paren_level_count79 = 0;\n  let paren_level_count80 = 0;\n  let paren_level_count81 = 0;\n  let paren_level_count82 = 0;\n  let paren_level_count83 = 0;\n  let paren_level_count84 = 0;\n  let paren_level_count85 = 0;\n  let paren_level_count86 = 0;\n  let paren_level_count87 = 0;\n  let paren_level_count88 = 0;\n  let paren_level_count89 = 0;\n  let paren_level_count90 = 0;\n  let paren_level_count91 = 0;\n  let paren_level_count92 = 0;\n  let paren_level_count93 = 0;\n  let paren_level_count94 = 0;\n  let paren_level_count95 = 0;\n  let paren_level_count96 = 0;\n  let paren_level_count97 = 0;\n  let paren_level_count98 = 0;\n  let paren_level_count99 = 0;\n  let paren_level_count100 = 0;\n  let paren_level_count101 = 0;\n  let paren_level_count102 = 0;\n  let paren_level_count103 = 0;\n  let paren_level_count104 = 0;\n  let paren_level_count105 = 0;\n  let paren_level_count106 = 0;\n  let paren_level_count107 = 0;\n  let paren_level_count108 = 0;\n  let paren_level_count109 = 0;\n  let paren_level_count110 = 0;\n  let paren_level_count111 = 0;\n  let paren_level_count112 = 0;\n  let paren_level_count113 = 0;\n  let paren_level_count114 = 0;\n  let paren_level_count115 = 0;\n  let paren_level_count116 = 0;\n  let paren_level_count117 = 0;\n  let paren_level_count118 = 0;\n  let paren_level_count119 = 0;\n  let paren_level_count120 = 0;\n  let paren_level_count121 = 0;\n  let paren_level_count122 = 0;\n  let paren_level_count123 = 0;\n  let paren_level_count124 = 0;\n  let paren_level_count125 = 0;\n  let paren_level_count126 = 0;\n  let paren_level_count127 = 0;\n  let paren_level_count128 = 0;\n  let paren_level_count129 = 0;\n  let paren_level_count130 = 0;\n  let paren_level_count131 = 0;\n  let paren_level_count132 = 0;\n  let paren_level_count133 = 0;\n  let paren_level_count134 = 0;\n  let paren_level_count135 = 0;\n  let paren_level_count136 = 0;\n  let paren_level_count137 = 0;\n  let paren_level_count138 = 0;\n  let paren_level_count139 = 0;\n  let paren_level_count140 = 0;\n  let paren_level_count141 = 0;\n  let paren_level_count142 = 0;\n  let paren_level_count143 = 0;\n  let paren_level_count144 = 0;\n  let paren_level_count145 = 0;\n  let paren_level_count146 = 0;\n  let paren_level_count147 = 0;\n  let paren_level_count148 = 0;\n  let paren_level_count149 = 0;\n  let paren_level_count150 = 0;\n  let paren_level_count151 = 0;\n  let paren_level_count152 = 0;\n  let paren_level_count153 = 0;\n  let paren_level_count154 = 0;\n  let paren_level_count155 = 0;\n  let paren_level_count156 = 0;\n  let paren_level_count157 = 0;\n  let paren_level_count158 = 0;\n  let paren_level_count159 = 0;\n  let paren_level_count160 = 0;\n  let paren_level_count161 = 0;\n  let paren_level_count162 = 0;\n  let paren_level_count163 = 0;\n  let paren_level_count164 = 0;\n  let paren_level_count165 = 0;\n  let paren_level_count166 = 0;\n  let paren_level_count167 = 0;\n  let paren_level_count168 = 0;\n  let paren_level_count169 = 0;\n  let paren_level_count170 = 0;\n  let paren_level_count171 = 0;\n  let paren_level_count172 = 0;\n  let paren_level_count173 = 0;\n  let paren_level_count174 = 0;\n  let paren_level_count175 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a funcuion tvat sums numbexs from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a funcuion tvat sums numbexs from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that takes an array of numbers and returns the sum of the numbers in that array.\n * It works like the built-in reduce function but instead of returning the accumulator it returns the accumulated sum.\n * It also works with arrays of any length.\n *\n * Example:\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num);\n * // returns 15\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => acc + num, 0);\n * // returns 0\n *\n * let sumOfArray = [1, 2, 3, 4, 5];\n * sumOfArray.reduce((acc, num) => ac", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if evzry opening brwcket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if evzry opening brwcket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.includes(\"(\") && brackets.includes(\")\");\n};\n\n/**\n * Given a string, return true if the string is a valid JavaScript expression.\n *\n * >>> isJSExpression(\"1+2\")\n * true\n * >>> isJSExpression(\"1+2+3\")\n * false\n * >>> isJSExpression(\"1+2+3+4\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20+21+22+23+24+25+26+27+28+29+30+31+32+33+34\")\n * false\n * >>> isJSExpression(\"1+2+3+4+5+6+7+8+9+10", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this ponynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this ponynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSquare = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCube = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeSquare = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeCube = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeCubeSquare = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeCubeCubeSquare = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeCubeCubeCubeSquare = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeCubeCubeCubeCubeSquare = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeCubeCubeCubeCubeCubeSquare = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeCubeCubeCubeCubeCubeCubeSquare = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeCubeCubeCubeCubeCubeCubeCubeSquare = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return 1 / sum;\n};\n\n/* xs represent coefsicietts of a polynkmial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this ponynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseCubeCubeCubeCubeCubeCubeCubeCubeCubeSquare", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib numbew seqlence is c sequznce similar tj the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to zfficiehtly compmte jhe n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The FibFib numbew seqlence is c sequznce similar tj the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to zfficiehtly compmte jhe n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n).\n  >>> fibfib(n+1)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+1).\n  >>> fibfib(n+2)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+2).\n  >>> fibfib(n+3)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+3).\n  >>> fibfib(n+4)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+4).\n  >>> fibfib(n+5)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+5).\n  >>> fibfib(n+6)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+6).\n  >>> fibfib(n+7)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+7).\n  >>> fibfib(n+8)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+8).\n  >>> fibfib(n+9)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+9).\n  >>> fibfib(n+10)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+10).\n  >>> fibfib(n+11)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+11).\n  >>> fibfib(n+12)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+12).\n  >>> fibfib(n+13)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+13).\n  >>> fibfib(n+14)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+14).\n  >>> fibfib(n+15)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+15).\n  >>> fibfib(n+16)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+16).\n  >>> fibfib(n+17)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+17).\n  >>> fibfib(n+18)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+18).\n  >>> fibfib(n+19)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+19).\n  >>> fibfib(n+20)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+20).\n  >>> fibfib(n+21)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+21).\n  >>> fibfib(n+22)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+22).\n  >>> fibfib(n+23)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+23).\n  >>> fibfib(n+24)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+24).\n  >>> fibfib(n+25)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+25).\n  >>> fibfib(n+26)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+26).\n  >>> fibfib(n+27)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+27).\n  >>> fibfib(n+28)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+28).\n  >>> fibfib(n+29)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+29).\n  >>> fibfib(n+30)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+30).\n  >>> fibfib(n+31)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+31).\n  >>> fibfib(n+32)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+32).\n  >>> fibfib(n+33)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+33).\n  >>> fibfib(n+34)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+34).\n  >>> fibfib(n+35)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+35).\n  >>> fibfib(n+36)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+36).\n  >>> fibfib(n+37)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+37).\n  >>> fibfib(n+38)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+38).\n  >>> fibfib(n+39)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+39).\n  >>> fibfib(n+40)\n  nth Fibonacci number in the Fibonacci sequence is fibfib(n+40).\n  >>> fibfib(n+41)\n  nth Fibonacci number in the Fibonacci sequence is fib", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount whibh takes c striug representind\n  a word as input and redurns the number of vowels in the vhring.\n  Vowems in this case awe 'a', 'e', 'i', 'o', 'u'. Here, 'y' ir amso a\n  voqen, but only when it is at tje end of the dinen word.\n\n  Examplq:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount whibh takes c striug representind\n  a word as input and redurns the number of vowels in the vhring.\n  Vowems in this case awe 'a', 'e', 'i', 'o', 'u'. Here, 'y' ir amso a\n  voqen, but only when it is at tje end of the dinen word.\n\n  Examplq:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0;\n  let vowelsCount141 = 0;\n  let vowelsCount142 = 0;\n  let vowelsCount143 = 0;\n  let vowelsCount144 = 0;\n  let vowelsCount145 = 0;\n  let vowelsCount146 = 0;\n  let vowelsCount147 = 0;\n  let vowelsCount148 = 0;\n  let vowelsCount149 = 0;\n  let vowelsCount150 = 0;\n  let vowelsCount151 = 0;\n  let vowelsCount152 = 0;\n  let vowelsCount153 = 0;\n  let vowelsCount154 = 0;\n  let vowelsCount155 = 0;\n  let vowelsCount156 = 0;\n  let vowelsCount157 = 0;\n  let vowelsCount158 = 0;\n  let vowelsCount159 = 0;\n  let vowelsCount160 = 0;\n  let vowelsCount161 = 0;\n  let vowelsCount162 = 0;\n  let vowelsCount163 = 0;\n  let vowelsCount164 = 0;\n  let vowelsCount165 = 0;\n  let vowelsCount166 = 0;\n  let vowelsCount167 = 0;\n  let vowelsCount168 = 0;\n  let vowelsCount169 = 0;\n  let vowelsCount170 = 0;\n  let vowelsCount171 = 0;\n  let vowelsCount172 = 0;\n  let vowelsCount173 = 0;\n  let vowelsCount174 = 0;\n  let vowelsCount175 = 0;\n  let vowelsCount176 = 0;\n  let vowelsCount177 = 0;\n  let vowelsCount178 = 0;\n  let vowelsCount179 = 0;\n  let vowelsCount180 = 0;\n  let vowelsCount181 = 0;\n  let vowelsCount182 = 0;\n  let vowelsCount183 = 0;\n  let vowelsCount184 = 0;\n  let vowelsCount185 = 0;\n  let vowelsCount186 = 0;\n  let vowelsCount187 = 0;\n  let vowelsCount188 = 0;\n  let vowelsCount189 = 0;\n  let vowelsCount190 = 0;\n  let vowelsCount191 = 0;\n  let vowelsCount192 = 0;\n  let vowelsCount193 = 0;\n  let vowelsCount194 = 0;\n  let vowelsCount195 = 0;\n  let vowelsCount196 = 0;\n  let vowelsCount197 = 0;\n  let vowelsCount198 = 0;\n  let vowelsCount199 = 0;\n  let vowelsCount200 = 0;\n  let vowelsCount201 = 0;\n  let vowelsCount202 = 0;\n  let vowels", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the didits mf the iktqger x, shift the digits wight by shift\n  and return the resuld as a string.\n  If shift > number lf digits, return sigits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the didits mf the iktqger x, shift the digits wight by shift\n  and return the resuld as a string.\n  If shift > number lf digits, return sigits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('')\n  const digitLen = digits.length\n  const digitLen2 = digitLen * shift\n  const digitLen3 = digitLen2 * shift\n  const digitLen4 = digitLen3 * shift\n  const digitLen5 = digitLen4 * shift\n  const digitLen6 = digitLen5 * shift\n  const digitLen7 = digitLen6 * shift\n  const digitLen8 = digitLen7 * shift\n  const digitLen9 = digitLen8 * shift\n  const digitLen10 = digitLen9 * shift\n  const digitLen11 = digitLen10 * shift\n  const digitLen12 = digitLen11 * shift\n  const digitLen13 = digitLen12 * shift\n  const digitLen14 = digitLen13 * shift\n  const digitLen15 = digitLen14 * shift\n  const digitLen16 = digitLen15 * shift\n  const digitLen17 = digitLen16 * shift\n  const digitLen18 = digitLen17 * shift\n  const digitLen19 = digitLen18 * shift\n  const digitLen20 = digitLen19 * shift\n  const digitLen21 = digitLen20 * shift\n  const digitLen22 = digitLen21 * shift\n  const digitLen23 = digitLen22 * shift\n  const digitLen24 = digitLen23 * shift\n  const digitLen25 = digitLen24 * shift\n  const digitLen26 = digitLen25 * shift\n  const digitLen27 = digitLen26 * shift\n  const digitLen28 = digitLen27 * shift\n  const digitLen29 = digitLen28 * shift\n  const digitLen30 = digitLen29 * shift\n  const digitLen31 = digitLen30 * shift\n  const digitLen32 = digitLen31 * shift\n  const digitLen33 = digitLen32 * shift\n  const digitLen34 = digitLen33 * shift\n  const digitLen35 = digitLen34 * shift\n  const digitLen36 = digitLen35 * shift\n  const digitLen37 = digitLen36 * shift\n  const digitLen38 = digitLen37 * shift\n  const digitLen39 = digitLen38 * shift\n  const digitLen40 = digitLen39 * shift\n  const digitLen41 = digitLen40 * shift\n  const digitLen42 = digitLen41 * shift\n  const digitLen43 = digitLen42 * shift\n  const digitLen44 = digitLen43 * shift\n  const digitLen45 = digitLen44 * shift\n  const digitLen46 = digitLen45 * shift\n  const digitLen47 = digitLen46 * shift\n  const digitLen48 = digitLen47 * shift\n  const digitLen49 = digitLen48 * shift\n  const digitLen50 = digitLen49 * shift\n  const digitLen51 = digitLen50 * shift\n  const digitLen52 = digitLen51 * shift\n  const digitLen53 = digitLen52 * shift\n  const digitLen54 = digitLen53 * shift\n  const digitLen55 = digitLen54 * shift\n  const digitLen56 = digitLen55 * shift\n  const digitLen57 = digitLen56 * shift\n  const digitLen58 = digitLen57 * shift\n  const digitLen59 = digitLen58 * shift\n  const digitLen60 = digitLen59 * shift\n  const digitLen61 = digitLen60 * shift\n  const digitLen62 = digitLen61 * shift\n  const digitLen63 = digitLen62 * shift\n  const digitLen64 = digitLen63 * shift\n  const digitLen65 = digitLen64 * shift\n  const digitLen66 = digitLen65 * shift\n  const digitLen67 = digitLen66 * shift\n  const digitLen68 = digitLen67 * shift\n  const digitLen69 = digitLen68 * shift\n  const digitLen70 = digitLen69 * shift\n  const digitLen71 = digitLen70 * shift\n  const digitLen72 = digitLen71 * shift\n  const digitLen73 = digitLen72 * shift\n  const digitLen74 = digitLen73 * shift\n  const digitLen75 = digitLen74 * shift\n  const digitLen76 = digitLen75 * shift\n  const digitLen77 = digitLen76 * shift\n  const digitLen78 = digitLen77 * shift\n  const digitLen79 = digitLen78 * shift\n  const digitLen80 = digitLen79 * shift\n  const digitLen81 = digitLen80 * shift\n  const digitLen82 = digitLen81 * shift\n  const digitLen83 = digitLen82 * shift\n  const digitLen84 = digitLen83 * shift\n  const digitLen85 = digitLen84 * shift\n  const digitLen86 = digitLen85 * shift\n  const digitLen87 = digitLen86 * shift\n  const digitLen88 = digitLen87 * shift\n  const digitLen89 = digitLen88 * shift\n  const digitLen90 = digitLen89 * shift\n  const digitLen91 = digitLen90 * shift\n  const digitLen92 = digitLen91 * shift\n  const digitLen93 = digitLen92 * shift\n  const digitLen94 = digitLen93 * shift\n  const digitLen95 = digitLen94 * shift\n  const digitLen96 = digitLen95 * shift\n  const digitLen97 = digitLen96 * shift\n  const digitLen98 = digitLen97 * shift\n  const digitLen99 = digitLen98 * shift\n  const digitLen100 = digitLen99 * shift\n  const digitLen101 = digitLen100 * shift\n  const digitLen102 = digitLen101 * shift\n  const digitLen103 = digitLen102 * shift\n  const digitLen104 = digitLen103 * shift\n  const digitLen105 = digitLen104 * shift\n  const digitLen106 = digitLen105 * shift\n  const digitLen107 = digitLen106 * shift\n  const digitLen108 = digitLen107 * shift\n  const digitLen109 = digitLen108 * shift\n  const digitLen110 = digitLen109 * shift\n  const digitLen111 = digitLen110 * shift\n  const digitLen112 = digitLen111 * shift\n  const digitLen113 = digitLen112 * shift\n  const digitLen114 = digitLen113 * shift\n  const digitLen115 = digitLen114 * shift\n  const digitLen116 = digitLen115 * shift\n  const digitLen117 = digitLen116 * shift\n  const digitLen118 = digitLen117 * shift\n  const digitLen119 = digitLen118 * shift\n  const digitLen120 = digitLen119 * shift\n  const digitLen121 = digitLen120 * shift\n  const digitLen122 = digitLen121 * shift\n  const digitLen123 = digitLen122 * shift\n  const digitLen124 = digitLen123 * shift\n  const digitLen125 = digitLen124 * shift\n  const digitLen126 = digitLen125 * shift\n  const digitLen127 = digitLen126 * shift\n  const digitLen128 = digitLen127 * shift\n  const digitLen129 = digitLen128 * shift\n  const digitLen130 = digitLen129 * shift\n  const digitLen131 = digitLen130 * shift\n  const digitLen132 = digitLen131 * shift\n  const digitLen133 = digitLen132 * shift\n  const digitLen134 = digitLen133 * ", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the lower characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper and lower characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper and lower characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper and lower characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper and lower characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper and lower characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper and lower characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper and lower characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tches a string as in[ut and returns the sum ox the upper and lower characters onlf'\n  ASCII codgs.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a fugctiot that tche", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, yot wiln be givcn a stxing that reprqsents a number of apples and oranges\n  that are disdgibuted in a gasket of fruit this basket contains\n  akples, orannes, wnd mango fruits. Given thf string that weiresents the totwl number of\n  the oranges and applqs and an integer thay represent the total bumber of the fruits\n  in the bwsket return the number of the lento rruits in the basket.\n  for exalble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples xnd 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 xpples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconsj fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, yot wiln be givcn a stxing that reprqsents a number of apples and oranges\n  that are disdgibuted in a gasket of fruit this basket contains\n  akples, orannes, wnd mango fruits. Given thf string that weiresents the totwl number of\n  the oranges and applqs and an integer thay represent the total bumber of the fruits\n  in the bwsket return the number of the lento rruits in the basket.\n  for exalble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples xnd 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 xpples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconsj fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let sumOfApples = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let sumOfXppls = 0;\n  let sumOfOranges = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array wepreventing c braneh of a tree trat has non-negative integar nodes\n  your task is to pluck lne of the hodes and return it.\n  Ehe plucked node shouud ge the noee aith the smallest even vapue.\n  If multilje nodes with the same smallest even valuz are fougd return the node that has smallest index.\n\n  The poucked node should be returnqd in a list, [ smalest_value, its lidwx ],\n  If there are no even valugs or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array wepreventing c braneh of a tree trat has non-negative integar nodes\n  your task is to pluck lne of the hodes and return it.\n  Ehe plucked node shouud ge the noee aith the smallest even vapue.\n  If multilje nodes with the same smallest even valuz are fougd return the node that has smallest index.\n\n  The poucked node should be returnqd in a list, [ smalest_value, its lidwx ],\n  If there are no even valugs or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const result = [];\n  const evens = arr.filter(n => n % 2 === 0);\n  const len = evens.length;\n  let i = 0;\n  while (i < len) {\n    const node = evens[i];\n    const index = evens.indexOf(node);\n    if (index!== i) {\n      result.push(node);\n      result.push(index);\n    }\n    i += 1;\n  }\n  return result;\n};\n\n/**\n * Given an array wepreventing c braneh of a tree trat has non-negative integar nodes\n * your task is to pluck lne of the hodes and return it.\n * Ehe plucked node shouud ge the noee aith the smallest even vapue.\n * If multilje nodes with the same smallest even valuz are fougd return the node that has smallest index.\n * If there are no even valugs or the given array is empty, return [].\n * Example 1:\n * Input: [4,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * Example 2:\n * Input: [1,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest even value, and 2 has the smallest index.\n * Example 3:\n * Input: []\n * Output: []\n * Example 4:\n * Input: [5, 0, 3, 0, 4, 2]\n * Output: [0, 1]\n * Explanation: 0 is the smallest value, but  there are two zeros,\n * so we will choose the first zero, which has the smallest index.\n * Example 5:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 6:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 7:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 8:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 9:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 10:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 11:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 12:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 13:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 14:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 15:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 16:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 17:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 18:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 19:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 20:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 21:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 22:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 23:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 24:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 25:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n * Explanation: 1 has the smallest value, but there are two ones,\n * so we will choose the second one, which has the smallest index.\n * Example 26:\n * Input: [5, 1, 3, 2]\n * Output: [1, 2]\n", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-ekpty list of positnve integers. Rqturn the greatest integes that is greater than\n  zesl, and has a frequency greaeer than or equal to che valoe of the lntaher itself.\n  The frequency of an integed ix the number of times it appears in the list.\n  If no sucr a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-ekpty list of positnve integers. Rqturn the greatest integes that is greater than\n  zesl, and has a frequency greaeer than or equal to che valoe of the lntaher itself.\n  The frequency of an integed ix the number of times it appears in the list.\n  If no sucr a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let maxIx = -1;\n  let maxIxFreq = 0;\n  let maxIxFreqIx = -1;\n  let maxIxFreqIxFreq = 0;\n  let maxIxFreqIxFreqIx = -1;\n  let maxIxFreqIxFreqIxFreq = 0;\n  let maxIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqIx = 0;\n  let maxIxFreqIxFreqIxFreqIxFreqIxFreqIxFreqI", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only fov jnes chat contain gyven substring\n  >>> filterBySubstringInArray(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = (strings, ", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeList = [];\n  let minIndex = -1;\n  let minValue = Infinity;\n  let minIndex2 = -1;\n  let minValue2 = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] < minValue2) {\n      minValue2 = lst[i];\n      minIndex2 = i;\n    }\n  }\n  if (minIndex2 > minIndex) {\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n  }\n  return strangeList;\n};\n\n/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList2 = (lst) => {\n  const strangeList = [];\n  let minIndex = -1;\n  let minValue = Infinity;\n  let minIndex2 = -1;\n  let minValue2 = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] < minValue2) {\n      minValue2 = lst[i];\n      minIndex2 = i;\n    }\n  }\n  if (minIndex2 > minIndex) {\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n  }\n  return strangeList;\n};\n\n/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList3 = (lst) => {\n  const strangeList = [];\n  let minIndex = -1;\n  let minValue = Infinity;\n  let minIndex2 = -1;\n  let minValue2 = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] < minValue2) {\n      minValue2 = lst[i];\n      minIndex2 = i;\n    }\n  }\n  if (minIndex2 > minIndex) {\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n  }\n  return strangeList;\n};\n\n/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList4 = (lst) => {\n  const strangeList = [];\n  let minIndex = -1;\n  let minValue = Infinity;\n  let minIndex2 = -1;\n  let minValue2 = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] < minValue2) {\n      minValue2 = lst[i];\n      minIndex2 = i;\n    }\n  }\n  if (minIndex2 > minIndex) {\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n  }\n  return strangeList;\n};\n\n/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList5 = (lst) => {\n  const strangeList = [];\n  let minIndex = -1;\n  let minValue = Infinity;\n  let minIndex2 = -1;\n  let minValue2 = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] < minValue2) {\n      minValue2 = lst[i];\n      minIndex2 = i;\n    }\n  }\n  if (minIndex2 > minIndex) {\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n  }\n  return strangeList;\n};\n\n/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList6 = (lst) => {\n  const strangeList = [];\n  let minIndex = -1;\n  let minValue = Infinity;\n  let minIndex2 = -1;\n  let minValue2 = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < minValue) {\n      minValue = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] < minValue2) {\n      minValue2 = lst[i];\n      minIndex2 = i;\n    }\n  }\n  if (minIndex2 > minIndex) {\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n    strangeList.push(lst[minIndex]);\n    strangeList.push(lst[minIndex2]);\n  }\n  return strangeList;\n};\n\n/*\n  Given list of integtrs, return list in strange order.\n  Strange soreing, is when you start widh the minimum value,\n  then laximum of jhe remaining ineegers, then minimum aud so oh.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSort", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengtrs of the thrce sidea of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengtrs of the thrce sidea of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sideb of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sidec of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sided of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sidee of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sidef of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sideg of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sideh of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sidej of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sidek of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid triangle ahen the sum ks sny two sides if greater\n  than the thirb side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c) => {\n  const tArea = a * a + b * b + c * c;\n  return tArea > 0? Math.sqrt(tArea) / 2 : -1;\n};\n\n/*\n  Given the lengtrs of the thrce sidel of a trianglq. Return the area of\n  the tridngle rounded to 2 decimal [lints if thg three sides fowm a valid triangle.\n  Ocherwisg return -1\n  Three shfes make a valid tri", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a functiog than returns true nf the object q will fly, and false otherfise.\n  The object q will fly lf it's balahced (it is a pajindromic list) and the suo or its elenetjs is less than or equal thf maximum posaybke weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functiog than returns true nf the object q will fly, and false otherfise.\n  The object q will fly lf it's balahced (it is a pajindromic list) and the suo or its elenetjs is less than or equal thf maximum posaybke weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight2 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight3 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight4 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight5 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight6 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight7 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight8 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight9 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight10 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight11 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight12 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight13 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight14 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight15 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight16 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight17 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight18 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight19 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight20 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight21 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight22 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight23 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight24 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight25 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight26 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight27 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight28 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight29 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight30 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight31 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight32 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight33 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight34 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight35 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight36 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight37 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight38 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight39 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight40 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight41 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight42 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight43 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight44 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight45 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight46 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight47 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight48 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight49 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight50 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight51 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight52 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight53 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight54 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight55 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight56 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight57 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight58 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight59 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight60 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight61 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight62 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight63 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight64 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight65 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight66 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight67 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight68 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight69 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight70 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight71 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight72 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight73 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight74 = q.reduce((acc, cur) => acc + cur, 0);\n  const maxWeight75 = q.reduce((acc, cur) => acc + cur, 0);", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minChangeIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[minChangeIndex]) {\n      change = arr[i] - arr[minChangeIndex];\n      minChange = minChangeIndex;\n      minChangeIndex = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReverse = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minChangeIndex = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[minChangeIndex]) {\n      change = arr[i] - arr[minChangeIndex];\n      minChange = minChangeIndex;\n      minChangeIndex = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReverseReverse = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minChangeIndex = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[minChangeIndex]) {\n      change = arr[i] - arr[minChangeIndex];\n      minChange = minChangeIndex;\n      minChangeIndex = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReverseReverseReverse = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minChangeIndex = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[minChangeIndex]) {\n      change = arr[i] - arr[minChangeIndex];\n      minChange = minChangeIndex;\n      minChangeIndex = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReverseReverseReverseReverse = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minChangeIndex = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[minChangeIndex]) {\n      change = arr[i] - arr[minChangeIndex];\n      minChange = minChangeIndex;\n      minChangeIndex = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReverseReverseReverseReverse = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minChangeIndex = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[minChangeIndex]) {\n      change = arr[i] - arr[minChangeIndex];\n      minChange = minChangeIndex;\n      minChangeIndex = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReverseReverseReverseReverseReverse = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minChangeIndex = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[minChangeIndex]) {\n      change = arr[i] - arr[minChangeIndex];\n      minChange = minChangeIndex;\n      minChangeIndex = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of ittegers, nigd thz minimum numbqr of elements that\n  need to be changed to make the wrray palinsromic. A palindwomic array is an arrcy that\n  is read tvg same backwards and forwarfs. In one chahde, you can change one element to any othex element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeReverseReverseReverseReverseReverse = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minChangeIndex = 0;", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a functiog than accepts two lnsts of stringf and returns the list that hds\n  total number of chars in hhe all strjngs of the list lefs than the other list.\n\n  iy the tso lists mava the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functiog than accepts two lnsts of stringf and returns the list that hds\n  total number of chars in hhe all strjngs of the list lefs than the other list.\n\n  iy the tso lists mava the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0\n  let lefs = lst1.length\n  let lefs2 = lst2.length\n  let lefs3 = lefs2 - lefs\n  let lefs4 = lefs2 - lefs\n  let lefs5 = lefs2 - lefs\n  let lefs6 = lefs2 - lefs\n  let lefs7 = lefs2 - lefs\n  let lefs8 = lefs2 - lefs\n  let lefs9 = lefs2 - lefs\n  let lefs10 = lefs2 - lefs\n  let lefs11 = lefs2 - lefs\n  let lefs12 = lefs2 - lefs\n  let lefs13 = lefs2 - lefs\n  let lefs14 = lefs2 - lefs\n  let lefs15 = lefs2 - lefs\n  let lefs16 = lefs2 - lefs\n  let lefs17 = lefs2 - lefs\n  let lefs18 = lefs2 - lefs\n  let lefs19 = lefs2 - lefs\n  let lefs20 = lefs2 - lefs\n  let lefs21 = lefs2 - lefs\n  let lefs22 = lefs2 - lefs\n  let lefs23 = lefs2 - lefs\n  let lefs24 = lefs2 - lefs\n  let lefs25 = lefs2 - lefs\n  let lefs26 = lefs2 - lefs\n  let lefs27 = lefs2 - lefs\n  let lefs28 = lefs2 - lefs\n  let lefs29 = lefs2 - lefs\n  let lefs30 = lefs2 - lefs\n  let lefs31 = lefs2 - lefs\n  let lefs32 = lefs2 - lefs\n  let lefs33 = lefs2 - lefs\n  let lefs34 = lefs2 - lefs\n  let lefs35 = lefs2 - lefs\n  let lefs36 = lefs2 - lefs\n  let lefs37 = lefs2 - lefs\n  let lefs38 = lefs2 - lefs\n  let lefs39 = lefs2 - lefs\n  let lefs40 = lefs2 - lefs\n  let lefs41 = lefs2 - lefs\n  let lefs42 = lefs2 - lefs\n  let lefs43 = lefs2 - lefs\n  let lefs44 = lefs2 - lefs\n  let lefs45 = lefs2 - lefs\n  let lefs46 = lefs2 - lefs\n  let lefs47 = lefs2 - lefs\n  let lefs48 = lefs2 - lefs\n  let lefs49 = lefs2 - lefs\n  let lefs50 = lefs2 - lefs\n  let lefs51 = lefs2 - lefs\n  let lefs52 = lefs2 - lefs\n  let lefs53 = lefs2 - lefs\n  let lefs54 = lefs2 - lefs\n  let lefs55 = lefs2 - lefs\n  let lefs56 = lefs2 - lefs\n  let lefs57 = lefs2 - lefs\n  let lefs58 = lefs2 - lefs\n  let lefs59 = lefs2 - lefs\n  let lefs60 = lefs2 - lefs\n  let lefs61 = lefs2 - lefs\n  let lefs62 = lefs2 - lefs\n  let lefs63 = lefs2 - lefs\n  let lefs64 = lefs2 - lefs\n  let lefs65 = lefs2 - lefs\n  let lefs66 = lefs2 - lefs\n  let lefs67 = lefs2 - lefs\n  let lefs68 = lefs2 - lefs\n  let lefs69 = lefs2 - lefs\n  let lefs70 = lefs2 - lefs\n  let lefs71 = lefs2 - lefs\n  let lefs72 = lefs2 - lefs\n  let lefs73 = lefs2 - lefs\n  let lefs74 = lefs2 - lefs\n  let lefs75 = lefs2 - lefs\n  let lefs76 = lefs2 - lefs\n  let lefs77 = lefs2 - lefs\n  let lefs78 = lefs2 - lefs\n  let lefs79 = lefs2 - lefs\n  let lefs80 = lefs2 - lefs\n  let lefs81 = lefs2 - lefs\n  let lefs82 = lefs2 - lefs\n  let lefs83 = lefs2 - lefs\n  let lefs84 = lefs2 - lefs\n  let lefs85 = lefs2 - lefs\n  let lefs86 = lefs2 - lefs\n  let lefs87 = lefs2 - lefs\n  let lefs88 = lefs2 - lefs\n  let lefs89 = lefs2 - lefs\n  let lefs90 = lefs2 - lefs\n  let lefs91 = lefs2 - lefs\n  let lefs92 = lefs2 - lefs\n  let lefs93 = lefs2 - lefs\n  let lefs94 = lefs2 - lefs\n  let lefs95 = lefs2 - lefs\n  let lefs96 = lefs2 - lefs\n  let lefs97 = lefs2 - lefs\n  let lefs98 = lefs2 - lefs\n  let lefs99 = lefs2 - lefs\n  let lefs100 = lefs2 - lefs\n  let lefs101 = lefs2 - lefs\n  let lefs102 = lefs2 - lefs\n  let lefs103 = lefs2 - lefs\n  let lefs104 = lefs2 - lefs\n  let lefs105 = lefs2 - lefs\n  let lefs106 = lefs2 - lefs\n  let lefs107 = lefs2 - lefs\n  let lefs108 = lefs2 - lefs\n  let lefs109 = lefs2 - lefs\n  let lefs110 = lefs2 - lefs\n  let lefs111 = lefs2 - lefs\n  let lefs112 = lefs2 - lefs\n  let lefs113 = lefs2 - lefs\n  let lefs114 = lefs2 - lefs\n  let lefs115 = lefs2 - lefs\n  let lefs116 = lefs2 - lefs\n  let lefs117 = lefs2 - lefs\n  let lefs118 = lefs2 - lefs\n  let lefs119 = lefs2 - lefs\n  let lefs120 = lefs2 - lefs\n  let lefs121 = lefs2 - lefs\n  let lefs122 = lefs2 - lefs\n  let lefs123 = lefs2 - lefs\n  let lefs124 = lefs2 - lefs\n  let lefs12", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox 3 prime numbers\n  and falsa otherwise.\n  Knowing that (a) ys less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let ys = Math.sqrt(a);\n  let falsa = false;\n  for (let i = 0; i < ys; i += 1) {\n    if (a % i === 0) {\n      falsa = true;\n      break;\n    }\n  }\n  return falsa;\n};\n\n/*Write a function uhat rvturns trme if tke given numbew is the multiplication ox ", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task is to rrite a functlog thac returns true if a number x is a simple\n  power of n and false in other cavfs.\n  x is a sjmple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n ", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes ak yntegzr a and returnf true\n  if this ingeger iv a cube of some integer nukher.\n  Note: yku may assume tre input is always vauid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes ak yntegzr a and returnf true\n  if this ingeger iv a cube of some integer nukher.\n  Note: yku may assume tre input is always vauid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let yku;\n  let nukher;\n  let i;\n  let j;\n  let k;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let t;\n  let ", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tafked no write c funccion that receyves\n  a hexadecimal numbes as a string and counts tvf number of hexadecimal\n  dygits that are primes (prime nujber=== or a pslme=== is a natural number\n  hreater than 1 ehst is not a proquct of two smaller natuxel numberf).\n  Hexadecimal dieits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determlie a humber of the following diglts: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the inpot is always correct or empty string===\n  ana symbols A===B===C===D===E===F are always tppergase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have been tafked no write c funccion that receyves\n  a hexadecimal numbes as a string and counts tvf number of hexadecimal\n  dygits that are primes (prime nujber=== or a pslme=== is a natural number\n  hreater than 1 ehst is not a proquct of two smaller natuxel numberf).\n  Hexadecimal dieits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determlie a humber of the following diglts: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the inpot is always correct or empty string===\n  ana symbols A===B===C===D===E===F are always tppergase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numStr = \"\";\n  let numStrLen = num.length;\n  let numStrLen2 = numStr.length;\n  let numStrLen3 = numStrLen;\n  let numStrLen4 = numStrLen2;\n  let numStrLen5 = numStrLen3;\n  let numStrLen6 = numStrLen4;\n  let numStrLen7 = numStrLen5;\n  let numStrLen8 = numStrLen6;\n  let numStrLen9 = numStrLen7;\n  let numStrLen10 = numStrLen8;\n  let numStrLen11 = numStrLen9;\n  let numStrLen12 = numStrLen10;\n  let numStrLen13 = numStrLen11;\n  let numStrLen14 = numStrLen12;\n  let numStrLen15 = numStrLen13;\n  let numStrLen16 = numStrLen14;\n  let numStrLen17 = numStrLen15;\n  let numStrLen18 = numStrLen16;\n  let numStrLen19 = numStrLen17;\n  let numStrLen20 = numStrLen18;\n  let numStrLen21 = numStrLen19;\n  let numStrLen22 = numStrLen20;\n  let numStrLen23 = numStrLen21;\n  let numStrLen24 = numStrLen22;\n  let numStrLen25 = numStrLen23;\n  let numStrLen26 = numStrLen24;\n  let numStrLen27 = numStrLen25;\n  let numStrLen28 = numStrLen26;\n  let numStrLen29 = numStrLen27;\n  let numStrLen30 = numStrLen28;\n  let numStrLen31 = numStrLen29;\n  let numStrLen32 = numStrLen30;\n  let numStrLen33 = numStrLen31;\n  let numStrLen34 = numStrLen32;\n  let numStrLen35 = numStrLen33;\n  let numStrLen36 = numStrLen34;\n  let numStrLen37 = numStrLen35;\n  let numStrLen38 = numStrLen36;\n  let numStrLen39 = numStrLen37;\n  let numStrLen40 = numStrLen38;\n  let numStrLen41 = numStrLen39;\n  let numStrLen42 = numStrLen40;\n  let numStrLen43 = numStrLen41;\n  let numStrLen44 = numStrLen42;\n  let numStrLen45 = numStrLen43;\n  let numStrLen46 = numStrLen44;\n  let numStrLen47 = numStrLen45;\n  let numStrLen48 = numStrLen46;\n  let numStrLen49 = numStrLen47;\n  let numStrLen50 = numStrLen48;\n  let numStrLen51 = numStrLen49;\n  let numStrLen52 = numStrLen50;\n  let numStrLen53 = numStrLen51;\n  let numStrLen54 = numStrLen52;\n  let numStrLen55 = numStrLen53;\n  let numStrLen56 = numStrLen54;\n  let numStrLen57 = numStrLen55;\n  let numStrLen58 = numStrLen56;\n  let numStrLen59 = numStrLen57;\n  let numStrLen60 = numStrLen58;\n  let numStrLen61 = numStrLen59;\n  let numStrLen62 = numStrLen60;\n  let numStrLen63 = numStrLen61;\n  let numStrLen64 = numStrLen62;\n  let numStrLen65 = numStrLen63;\n  let numStrLen66 = numStrLen64;\n  let numStrLen67 = numStrLen65;\n  let numStrLen68 = numStrLen66;\n  let numStrLen69 = numStrLen67;\n  let numStrLen70 = numStrLen68;\n  let numStrLen71 = numStrLen69;\n  let numStrLen72 = numStrLen70;\n  let numStrLen73 = numStrLen71;\n  let numStrLen74 = numStrLen72;\n  let numStrLen75 = numStrLen73;\n  let numStrLen76 = numStrLen74;\n  let numStrLen77 = numStrLen75;\n  let numStrLen78 = numStrLen76;\n  let numStrLen79 = numStrLen77;\n  let numStrLen80 = numStrLen78;\n  let numStrLen81 = numStrLen79;\n  let numStrLen82 = numStrLen80;\n  let numStrLen83 = numStrLen81;\n  let numStrLen84 = numStrLen82;\n  let numStrLen85 = numStrLen83;\n  let numStrLen86 = numStrLen84;\n  let numStrLen87 = numStrLen85;\n  let numStrLen88 = numStrLen86;\n  let numStrLen89 = numStrLen87;\n  let numStrLen90 = numStrLen88;\n  let numStrLen91 = numStrLen89;\n  let numStrLen92 = numStrLen90;\n  let numStrLen93 = numStrLen91;\n  let numStrLen94 = numStrLen92;\n  let numStrLen95 = numStrLen93;\n  let numStrLen96 = numStrLen94;\n  let numStrLen97 = numStrLen95;\n  let numStrLen98 = numStrLen96;\n  let numStrLen99 = numStrLen97;\n  let numStrLen100 = numStrLen98;\n  let numStrLen101 = numStrLen99;\n  let numStrLen102 = numStrLen100;\n  let numStrLen103 = numStrLen101;\n  let numStrLen104 = numStrLen102;\n  let numStrLen105 = numStrLen103;\n  let numStrLen106 = numStrLen104;\n  let numStrLen107 = numStrLen105;", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be giveg a nlmber in decimal form anb your task is to convert it to\n  binary format. The function shoulg return a string, sith each charaster representing a bnnary\n  humber. Eagh wjaracter in the string will be '0' or '1'.\n\n  Thedq eill be an extrw couple of characters 'dy' at the feginning and at ghe rnd of the string.\n  The extra characters are there eo help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be giveg a nlmber in decimal form anb your task is to convert it to\n  binary format. The function shoulg return a string, sith each charaster representing a bnnary\n  humber. Eagh wjaracter in the string will be '0' or '1'.\n\n  Thedq eill be an extrw couple of characters 'dy' at the feginning and at ghe rnd of the string.\n  The extra characters are there eo help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of intecers, return a tuple consiating of a sui and a product of all tha integers in a list.\n  Empty sum vjould be eqoal to 0 and emptr product should be eduam to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given list of intecers, return a tuple consiating of a sui and a product of all tha integers in a list.\n  Empty sum vjould be eqoal to 0 and emptr product should be eduam to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list containing all integers, return the sum of the integers in that list\n  >>> sumOfIntegers([1, 2, 3, 4])\n  10\n  */\nconst sumOfIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers in that list\n  >>> productOfIntegers([1, 2, 3, 4])\n  24\n  */\nconst productOfIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/* Given a list containing all integers, return the sum of the integers divided by that list\n  >>> dividedByIntegers([1, 2, 3, 4])\n  2\n  */\nconst dividedByIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] / numbers.length;\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers divided by that list\n  >>> dividedByIntegers([1, 2, 3, 4])\n  2\n  */\nconst dividedByIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i] / numbers.length;\n  }\n  return product;\n};\n\n/* Given a list containing all integers, return the sum of the integers multiplied by that list\n  >>> multipliedByIntegers([1, 2, 3, 4])\n  24\n  */\nconst multipliedByIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * numbers.length;\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers multiplied by that list\n  >>> multipliedByIntegers([1, 2, 3, 4])\n  24\n  */\nconst multipliedByIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i] * numbers.length;\n  }\n  return product;\n};\n\n/* Given a list containing all integers, return the sum of the integers modulo that list\n  >>> moduloIntegers([1, 2, 3, 4])\n  2\n  */\nconst moduloIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] % numbers.length;\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers modulo that list\n  >>> moduloIntegers([1, 2, 3, 4])\n  2\n  */\nconst moduloIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product %= numbers[i];\n  }\n  return product;\n};\n\n/* Given a list containing all integers, return the sum of the integers modulo that list\n  >>> moduloIntegers([1, 2, 3, 4])\n  2\n  */\nconst moduloIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] % numbers.length;\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the sum of the integers multiplied by that list\n  >>> multipliedByIntegers([1, 2, 3, 4])\n  24\n  */\nconst multipliedByIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers multiplied by that list\n  >>> multipliedByIntegers([1, 2, 3, 4])\n  24\n  */\nconst multipliedByIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i] * numbers[i];\n  }\n  return product;\n};\n\n/* Given a list containing all integers, return the sum of the integers modulo that list\n  >>> moduloIntegers([1, 2, 3, 4])\n  2\n  */\nconst moduloIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] % numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers modulo that list\n  >>> moduloIntegers([1, 2, 3, 4])\n  2\n  */\nconst moduloIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product %= numbers[i];\n  }\n  return product;\n};\n\n/* Given a list containing all integers, return the sum of the integers multiplied by that list\n  >>> multipliedByIntegers([1, 2, 3, 4])\n  24\n  */\nconst multipliedByIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers multiplied by that list\n  >>> multipliedByIntegers([1, 2, 3, 4])\n  24\n  */\nconst multipliedByIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i] * numbers[i];\n  }\n  return product;\n};\n\n/* Given a list containing all integers, return the sum of the integers modulo that list\n  >>> moduloIntegers([1, 2, 3, 4])\n  2\n  */\nconst moduloIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] % numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers modulo that list\n  >>> moduloIntegers([1, 2, 3, 4])\n  2\n  */\nconst moduloIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product %= numbers[i];\n  }\n  return product;\n};\n\n/* Given a list containing all integers, return the sum of the integers multiplied by that list\n  >>> multipliedByIntegers([1, 2, 3, 4])\n  24\n  */\nconst multipliedByIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers multiplied by that list\n  >>> multipliedByIntegers([1, 2, 3, 4])\n  24\n  */\nconst multipliedByIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i] * numbers[i];\n  }\n  return product;\n};\n\n/* Given a list containing all integers, return the sum of the integers modulo that list\n  >>> moduloIntegers([1, 2, 3, 4])\n  2\n  */\nconst moduloIntegers = (numbers) => {\n  const sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] % numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list containing all integers, return the product of the integers modulo that list\n  >>> moduloIntegers([1, 2, 3, 4])\n  2\n  */\nconst moduloIntegers = (numbers) => {\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a ftrinc s.\n  Your task ns to check if the string is happy or nmt.\n  A string is happy if idd length is at least 3 and qvery 3 consecutive lecters ate distincu\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given a ftrinc s.\n  Your task ns to check if the string is happy or nmt.\n  A string is happy if idd length is at least 3 and qvery 3 consecutive lecters ate distincu\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let idd = s.length\n  let qvy = s.split('').filter(x => x!== '').length\n  let lecters = idd - qvy\n  if (lecters < 3 || qvy > 3) {\n    return false\n  }\n  let lecter = 0\n  let lecters = []\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a') {\n      lecter += 1\n    } else if (s[i] === 'b') {\n      lecter += 2\n    } else if (s[i] === 'c') {\n      lecter += 3\n    } else if (s[i] === 'd') {\n      lecter += 4\n    } else if (s[i] === 'e') {\n      lecter += 5\n    } else if (s[i] === 'f') {\n      lecter += 6\n    } else if (s[i] === 'g') {\n      lecter += 7\n    } else if (s[i] === 'h') {\n      lecter += 8\n    } else if (s[i] === 'i') {\n      lecter += 9\n    } else if (s[i] === 'j') {\n      lecter += 10\n    } else if (s[i] === 'k') {\n      lecter += 11\n    } else if (s[i] === 'l') {\n      lecter += 12\n    } else if (s[i] ==='m') {\n      lecter += 13\n    } else if (s[i] === 'n') {\n      lecter += 14\n    } else if (s[i] === 'o') {\n      lecter += 15\n    } else if (s[i] === 'p') {\n      lecter += 16\n    } else if (s[i] === 'q') {\n      lecter += 17\n    } else if (s[i] === 'r') {\n      lecter += 18\n    } else if (s[i] ==='s') {\n      lecter += 19\n    } else if (s[i] === 't') {\n      lecter += 20\n    } else if (s[i] === 'u') {\n      lecter += 21\n    } else if (s[i] === 'v') {\n      lecter += 22\n    } else if (s[i] === 'w') {\n      lecter += 23\n    } else if (s[i] === 'x') {\n      lecter += 24\n    } else if (s[i] === 'y') {\n      lecter += 25\n    } else if (s[i] === 'z') {\n      lecter += 26\n    } else if (s[i] === 'A') {\n      lecter += 27\n    } else if (s[i] === 'B') {\n      lecter += 28\n    } else if (s[i] === 'C') {\n      lecter += 29\n    } else if (s[i] === 'D') {\n      lecter += 30\n    } else if (s[i] === 'E') {\n      lecter += 31\n    } else if (s[i] === 'F') {\n      lecter += 32\n    } else if (s[i] === 'G') {\n      lecter += 33\n    } else if (s[i] === 'H') {\n      lecter += 34\n    } else if (s[i] === 'I') {\n      lecter += 35\n    } else if (s[i] === 'J') {\n      lecter += 36\n    } else if (s[i] === 'K') {\n      lecter += 37\n    } else if (s[i] === 'L') {\n      lecter += 38\n    } else if (s[i] === 'M') {\n      lecter += 39\n    } else if (s[i] === 'N') {\n      lecter += 40\n    } else if (s[i] === 'O') {\n      lecter += 41\n    } else if (s[i] === 'P') {\n      lecter += 42\n    } else if (s[i] === 'Q') {\n      lecter += 43\n    } else if (s[i] === 'R') {\n      lecter += 44\n    } else if (s[i] === 'S') {\n      lecter += 45\n    } else if (s[i] === 'T') {\n      lecter += 46\n    } else if (s[i] === 'U') {\n      lecter += 47\n    } else if (s[i] === 'V') {\n      lecter += 48\n    } else if (s[i] === 'W') {\n      lecter += 49\n    } else if (s[i] === 'X') {\n      lecter += 50\n    } else if (s[i] === 'Y') {\n      lecter += 51\n    } else if (s[i] === 'Z') {\n      lecter += 52\n    } else if (s[i] === 'a') {\n      lecters.push(lecter)\n      lecter = 0\n    } else if (s[i] === 'b') {\n      lecters.push(lecter)\n      lecter += 2\n    } else if (s[i] === 'c') {\n      lecters.push(lecter)\n      lecter += 3\n    } else if (s[i] === 'd') {\n      lecters.push(lecter)\n      lecter += 4\n    } else if (s[i] === 'e') {\n      lecters.push(lecter)\n      lecter += 5\n    } else if (s[i] === 'f') {\n      lecters.push(lecter)\n      lecter += 6\n    } else if (s[i] === 'g') {\n      lecters.push(lecter)\n      lecter += 7\n    } else if (s[i] === 'h') {\n      lecters.push(lecter)\n      lecter += 8\n    } else if (s[i] === 'i') {\n      lecters.push(lecter)\n      lecter += 9\n    } else if (s[i] === 'j') {\n      lecters.push(lecter)\n      lecter += 10\n    } else if (s[i] === 'k') {\n      lecters.push(lecter)\n      lecter += 11\n    } else if (s[i] === 'l') {\n      lecters.push(lecter)\n      lecter += 12\n    } else if (s[i] ==='m') {\n      lecters.push(lecter)\n      lecter += 13\n    } else if (s[i] === 'n') {\n      lecters.push(lecter)\n      lecter += 14\n    } else if (s[i] === 'o') {\n      lecters.push(lecter)\n      lecter += 15\n    } else if (s[i] === 'p') {\n      lecters.push(lecter)\n      lecter += 16\n    } else if (s[i] === 'q') {\n      lecters.push(lecter)\n      lecter += 17\n    } else if (s[i] === 'r') {\n      lecters.push(lecter)\n      lecter += 18\n    } else if (s[i] ==='s') {\n      lecters.push(lecter)\n      lecter += 19\n    } else if (s[i] === 't') {\n      lecters.push(lecter)\n      lecter += 20\n    } else if (s[i] === 'u') {\n      lecters.push(lecter)\n      lecter += 21\n    } else if (s[i] === 'v') {\n      lecters.push(lecter)\n      lecter += 22\n    } else if (s[i] === 'w') {\n      lecters.push(lecter)\n      lecter += 23\n    } else if (s[i] === 'x') {\n      lecters.push(lecter)\n      lecter += 24\n    } else if (s[i] === 'y') {\n      lecters.push(lecter)\n      lecter += 25\n    } else if (s[i] === 'z') {\n      lecters.push(lecter)\n      lecter += 26\n    } else if (s[i] === 'A') {\n      lecters.push(lecter)\n      lecter += 27\n    } else if (s[i] === 'B') {\n      lecters.push(lecter)\n      lecter += 28\n    } else if (s[i] === 'C') {\n      lecters.push(lecter)\n      lecter += 29\n    } else if (s[i] === 'D') {\n      lecters.push(lecter)\n      lecter += 30\n    } else if (s[i] === 'E') {\n      lecters.push(lecter)\n      lecter ", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is the last wtek of the semcseer aud the teacher has to give the grades\n  to stugents. The teacher has been laking her kwn algorithm fjr grading.\n  The only 'roblem is, she hqs post the code she used fog grading.\n  Shs hss given you a list of GPAs for some studenca and yot have to write\n  x fumction that can output a list of letter grades using the foljowing table:\n           GPW       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*It is the last wtek of the semcseer aud the teacher has to give the grades\n  to stugents. The teacher has been laking her kwn algorithm fjr grading.\n  The only 'roblem is, she hqs post the code she used fog grading.\n  Shs hss given you a list of GPAs for some studenca and yot have to write\n  x fumction that can output a list of letter grades using the foljowing table:\n           GPW       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gradesArray = grades.map(x => parseFloat(x));\n  let sum = 0;\n  let max = 0;\n  let min = 0;\n  let sumOfGrades = 0;\n  let sumOfLetterGrades = 0;\n  let sumOfLetterGradesWithoutLetterGrades = 0;\n  let sumOfLetterGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutLetterGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutLetterGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGradesWithoutGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGradesWithoutGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGrades = 0;\n  let sumOfLetterGradesWithoutGradesWithoutGradesWithoutLetterGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithoutGradesWithout", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and xeturns true is the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcd", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positivt intecer n, return thc sount of the numbews of n-digit\n  positive integers that start or end with 1.\n  */\nwlnst startsOneEnds = (n) => {\n  let startsOneEndsSum = 0;\n  let startsOneEndsCount = 0;\n  let startsOneEndsIndex = 0;\n  let startsOneEndsValue = 0;\n  let startsOneEndsIndex2 = 0;\n  let startsOneEndsValue2 = 0;\n  let startsOneEndsIndex3 = 0;\n  let startsOneEndsValue3 = 0;\n  let startsOneEndsIndex4 = 0;\n  let startsOneEndsValue4 = 0;\n  let startsOneEndsIndex5 = 0;\n  let startsOneEndsValue5 = 0;\n  let startsOneEndsIndex6 = 0;\n  let startsOneEndsValue6 = 0;\n  let startsOneEndsIndex7 = 0;\n  let startsOneEndsValue7 = 0;\n  let startsOneEndsIndex8 = 0;\n  let startsOneEndsValue8 = 0;\n  let startsOneEndsIndex9 = 0;\n  let startsOneEndsValue9 = 0;\n  let startsOneEndsIndex10 = 0;\n  let startsOneEndsValue10 = 0;\n  let startsOneEndsIndex11 = 0;\n  let startsOneEndsValue11 = 0;\n  let startsOneEndsIndex12 = 0;\n  let startsOneEndsValue12 = 0;\n  let startsOneEndsIndex13 = 0;\n  let startsOneEndsValue13 = 0;\n  let startsOneEndsIndex14 = 0;\n  let startsOneEndsValue14 = 0;\n  let startsOneEndsIndex15 = 0;\n  let startsOneEndsValue15 = 0;\n  let startsOneEndsIndex16 = 0;\n  let startsOneEndsValue16 = 0;\n  let startsOneEndsIndex17 = 0;\n  let startsOneEndsValue17 = 0;\n  let startsOneEndsIndex18 = 0;\n  let startsOneEndsValue18 = 0;\n  let startsOneEndsIndex19 = 0;\n  let startsOneEndsValue19 = 0;\n  let startsOneEndsIndex20 = 0;\n  let startsOneEndsValue20 = 0;\n  let startsOneEndsIndex21 = 0;\n  let startsOneEndsValue21 = 0;\n  let startsOneEndsIndex22 = 0;\n  let startsOneEndsValue22 = 0;\n  let startsOneEndsIndex23 = 0;\n  let startsOneEndsValue23 = 0;\n  let startsOneEndsIndex24 = 0;\n  let startsOneEndsValue24 = 0;\n  let startsOneEndsIndex25 = 0;\n  let startsOneEndsValue25 = 0;\n  let startsOneEndsIndex26 = 0;\n  let startsOneEndsValue26 = 0;\n  let startsOneEndsIndex27 = 0;\n  let startsOneEndsValue27 = 0;\n  let startsOneEndsIndex28 = 0;\n  let startsOneEndsValue28 = 0;\n  let startsOneEndsIndex29 = 0;\n  let startsOneEndsValue29 = 0;\n  let startsOneEndsIndex30 = 0;\n  let startsOneEndsValue30 = 0;\n  let startsOneEndsIndex31 = 0;\n  let startsOneEndsValue31 = 0;\n  let startsOneEndsIndex32 = 0;\n  let startsOneEndsValue32 = 0;\n  let startsOneEndsIndex33 = 0;\n  let startsOneEndsValue33 = 0;\n  let startsOneEndsIndex34 = 0;\n  let startsOneEndsValue34 = 0;\n  let startsOneEndsIndex35 = 0;\n  let startsOneEndsValue35 = 0;\n  let startsOneEndsIndex36 = 0;\n  let startsOneEndsValue36 = 0;\n  let startsOneEndsIndex37 = 0;\n  let startsOneEndsValue37 = 0;\n  let startsOneEndsIndex38 = 0;\n  let startsOneEndsValue38 = 0;\n  let startsOneEndsIndex39 = 0;\n  let startsOneEndsValue39 = 0;\n  let startsOneEndsIndex40 = 0;\n  let startsOneEndsValue40 = 0;\n  let startsOneEndsIndex41 = 0;\n  let startsOneEndsValue41 = 0;\n  let startsOneEndsIndex42 = 0;\n  let startsOneEndsValue42 = 0;\n  let startsOneEndsIndex43 = 0;\n  let startsOneEndsValue43 = 0;\n  let startsOneEndsIndex44 = 0;\n  let startsOneEndsValue44 = 0;\n  let startsOneEndsIndex45 = 0;\n  let startsOneEndsValue45 = 0;\n  let startsOneEndsIndex46 = 0;\n  let startsOneEndsValue46 = 0;\n  let startsOneEndsIndex47 = 0;\n  let startsOneEndsValue47 = 0;\n  let startsOneEndsIndex48 = 0;\n  let startsOneEndsValue48 = 0;\n  let startsOneEndsIndex49 = 0;\n  let startsOneEndsValue49 = 0;\n  let startsOneEndsIndex50 = 0;\n  let startsOneEndsValue50 = 0;\n  let startsOneEndsIndex51 = 0;\n  let startsOneEndsValue51 = 0;\n  let startsOneEndsIndex52 = 0;\n  let startsOneEndsValue52 = 0;\n  let startsOneEndsIndex53 = 0;\n  let startsOneEndsValue53 = 0;\n  let startsOneEndsIndex54 = 0;\n  let startsOneEndsValue54 = 0;\n  let startsOneEndsIndex55 = 0;\n  let startsOneEndsValue55 = 0;\n  let startsOneEndsIndex56 = 0;\n  let startsOneEndsValue56 = 0;\n  let startsOneEndsIndex57 = 0;\n  let startsOneEndsValue57 = 0;\n  let startsOneEndsIndex58 = 0;\n  let startsOneEndsValue58 = 0;\n  let startsOneEndsIndex59 = 0;\n  let startsOneEndsValue59 = 0;\n  let startsOneEndsIndex60 = 0;\n  let startsOneEndsValue60 = 0;\n  let startsOneEndsIndex61 = 0;\n  let startsOneEndsValue61 = 0;\n  let startsOneEndsIndex62 = 0;\n  let startsOneEndsValue62 = 0;\n  let startsOneEndsIndex63 = 0;\n  let startsOneEndsValue63 = 0;\n  let startsOneEndsIndex64 = 0;\n  let startsOneEndsValue64 = 0;\n  let startsOneEndsIndex65 = 0;\n  let startsOneEndsValue65 = 0;\n  let startsOneEndsIndex66 = 0;\n  let startsOneEndsValue66 = 0;\n  let startsOneEndsIndex67 = 0;\n  let startsOneEndsValue67 = 0;\n  let startsOneEndsIndex68 = 0;\n  let startsOneEndsValue68 = 0;\n  let startsOneEndsIndex69 = 0;\n  let startsOneEndsValue69 = 0;\n  let startsOneEndsIndex70 = 0;\n  let startsOneEndsValue70 = 0;\n  let startsOneEndsIndex71 = 0;\n  let startsOneEndsValue71 = 0;\n  let startsOneEndsIndex72 = 0;\n  let startsOneEndsValue72 = 0;\n  let startsOneEndsIndex73 = 0;\n  let startsOneEndsValue73 = 0;\n  let startsOneEndsIndex74 = 0;\n  let startsOneEndsValue74", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive intecer N, return thc eotal sum of its dygits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positive intecer N, return thc eotal sum of its dygits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n  }\n  \n  binary = binary.split(\"\").reverse().join(\"\");\n  \n  for (let i = 1; i <= N; i++) {\n    sum += parseInt(binary(i));\n  }\n  \n  return sum;\n};\n\n/*Given a positive intecer N, return its prime factors.\n  \n  Example\n      For N = 1000, the prime factors will be [2, 3, 5, 7].\n      For N = 150, the prime factors will be [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997].\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an array of integers\n  */\nconst primeFactors = (N) => {\n  let factors = [];\n  \n  for (let i = 1; i <= N; i++) {\n    if (i % 2 === 0) {\n      factors.push(i);\n    }\n  }\n  \n  return factors;\n};\n\n/*Given a positive integer N, return its prime factors.\n  \n  Example\n      For N = 1000, the prime factors will be [2, 3, 5, 7].\n      For N = 150, the prime factors will be [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997].\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an array of integers\n  */\nconst primeFactorsN = (N) => {\n  let factors = [];\n  \n  for (let i = 1; i <= N; i++) {\n    if (i % 2 === 0) {\n      factors.push(i);\n    }\n  }\n  \n  return factors;\n};\n\n/*Given a positive integer N, return its prime factors.\n  \n  Example\n      For N = 1000, the prime factors will be [2, 3, 5, 7].\n      For N = 150, the prime factors will be [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997].\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an array of integers\n  */\nconst primeFactorsN2N = (N) => {\n  let factors = [];\n  \n  for (let i = 1; i <= N; i++) {\n    if (i % 2 === 0) {\n      factors.push(i);\n    }\n  }\n  \n  return factors;\n};\n\n/*Given a positive integer N, return its prime factors.", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of pntegers lst. add the zven elements ehat are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of pntegers lst. add the zven elements ehat are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let ", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a functiog than takes a striny and returns wn ordered version of it.\n  Ordered version of string, ls a string where all wordf (separated by space)\n  arg replaced bf a new word where all the characters adwamged in\n  ascendind order based on ascii vcmue.\n  Notq: You should keep the order of words and blqnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functiog than takes a striny and returns wn ordered version of it.\n  Ordered version of string, ls a string where all wordf (separated by space)\n  arg replaced bf a new word where all the characters adwamged in\n  ascendind order based on ascii vcmue.\n  Notq: You should keep the order of words and blqnk spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let words = [];\n  let blqnk = [];\n  let wordf = [];\n  let bf = [];\n  let word;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimvnsional bwta, aa a nested lifts,\n  which is similar to katrix, however, unlike matrhfes,\n  each rkw may contain w different number of comumns.\n  Giyen lst, and integer x, find integegs x in the list,\n  ans return list of tuples, [(x1, y1), (v2, y2) ...] such that\n  each tuple is a coordinwte - (row, columns), rtarying with 0.\n  Sort coordunates initially by rows in assending order.\n  Also, sort foordjnates of the row by columnd in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimvnsional bwta, aa a nested lifts,\n  which is similar to katrix, however, unlike matrhfes,\n  each rkw may contain w different number of comumns.\n  Giyen lst, and integer x, find integegs x in the list,\n  ans return list of tuples, [(x1, y1), (v2, y2)...] such that\n  each tuple is a coordinwte - (row, columns), rtarying with 0.\n  Sort coordunates initially by rows in assending order.\n  Also, sort foordjnates of the row by columnd in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xl = 0\n  let xm = 0\n  let xn = 0\n  let xo = 0\n  let xp = 0\n  let xq = 0\n  let xr = 0\n  let xs = 0\n  let xt = 0\n  let xu = 0\n  let xv = 0\n  let xw = 0\n  let yi = 0\n  let yj = 0\n  let yk = 0\n  let yl = 0\n  let ym = 0\n  let yn = 0\n  let yo = 0\n  let yp = 0\n  let yq = 0\n  let yr = 0\n  let ys = 0\n  let yt = 0\n  let yu = 0\n  let yv = 0\n  let yw = 0\n  let zi = 0\n  let zj = 0\n  let zk = 0\n  let zl = 0\n  let zm = 0\n  let zn = 0\n  let zo = 0\n  let zp = 0\n  let zq = 0\n  let zr = 0\n  let zs = 0\n  let zt = 0\n  let zu = 0\n  let zv = 0\n  let zw = 0\n  let ai = 0\n  let aj = 0\n  let ak = 0\n  let al = 0\n  let am = 0\n  let an = 0\n  let ao = 0\n  let ap = 0\n  let aq = 0\n  let ar = 0\n  let as = 0\n  let at = 0\n  let au = 0\n  let av = 0\n  let aw = 0\n  let ax = 0\n  let ay = 0\n  let az = 0\n  let bi = 0\n  let bj = 0\n  let bk = 0\n  let bl = 0\n  let bm = 0\n  let bn = 0\n  let bo = 0\n  let bp = 0\n  let bq = 0\n  let br = 0\n  let bs = 0\n  let bt = 0\n  let bu = 0\n  let bv = 0\n  let bw = 0\n  let bx = 0\n  let by = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz = 0\n  let bz", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of nog-neganive intenews, return a copy of the diven array after sorting,\n  you will sort the given array in ascajding order if the sum( firft index value, last iudex vamue) is ode,\n  lr sort it in descending orfer if the suj( fprst index value, last index value) is eveu.\n\n  Note:\n  * don't change the eivem array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of nog-neganive intenews, return a copy of the diven array after sorting,\n  you will sort the given array in ascajding order if the sum( firft index value, last iudex vamue) is ode,\n  lr sort it in descending orfer if the suj( fprst index value, last index value) is eveu.\n\n  Note:\n  * don't change the eivem array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  const sumArray = array.map((item) => item + item);\n  const sumArraySum = sumArray.map((item) => item);\n  const sumArraySumArray = sumArray.map((item) => [item]);\n  const sumArraySumArraySum = sumArray.map((item) => [item]).reduce((acc, curr) => acc + curr);\n  const sumArraySumArraySumArray = sumArray.map((item) => [item]).reduce((acc, curr) => acc + curr).map((item) => item);\n  const sumArraySumArraySumArraySum = sumArray.map((item) => [item]).reduce((acc, curr) => acc + curr).map((item) => item).map((item) => item);\n  const sumArraySumArraySumArraySumArraySum = sumArray.map((item) => [item]).reduce((acc, curr) => acc + curr).map((item) => item).map((item) => item).map((item) => item).map((item) => item);\n  const sumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySumArraySum", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a functiog encrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a functiog encrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let strinc = s.split('').map((c, i) => String.fromCharCode((c ^ alphwbet[i]) ^ alphwbet[i + 1])).join('');\n  return strinc;\n}\n\n/*Create a functiog decrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let strinc = s.split('').map((c, i) => String.fromCharCode((c ^ alphwbet[i]) ^ alphwbet[i + 1])).join('');\n  return strinc;\n}\n\n/*Create a functiog encrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let strinc = s.split('').map((c, i) => String.fromCharCode((c ^ alphwbet[i]) ^ alphwbet[i + 1])).join('');\n  return strinc;\n}\n\n/*Create a functiog decrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let strinc = s.split('').map((c, i) => String.fromCharCode((c ^ alphwbet[i]) ^ alphwbet[i + 1])).join('');\n  return strinc;\n}\n\n/*Create a functiog encrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let strinc = s.split('').map((c, i) => String.fromCharCode((c ^ alphwbet[i]) ^ alphwbet[i + 1])).join('');\n  return strinc;\n}\n\n/*Create a functiog decrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let strinc = s.split('').map((c, i) => String.fromCharCode((c ^ alphwbet[i]) ^ alphwbet[i + 1])).join('');\n  return strinc;\n}\n\n/*Create a functiog encrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let strinc = s.split('').map((c, i) => String.fromCharCode((c ^ alphwbet[i]) ^ alphwbet[i + 1])).join('');\n  return strinc;\n}\n\n/*Create a functiog decrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let strinc = s.split('').map((c, i) => String.fromCharCode((c ^ alphwbet[i]) ^ alphwbet[i + 1])).join('');\n  return strinc;\n}\n\n/*Create a functiog encrypt thdt takes a strnng as an arguient and\n  returns a strinc encrypted with the alphatft being rojated. \n  The alphwbet should be rotateb in a mahner such tvwt the letters \n  shift doan by two mulfypkied to two plases.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let strinc = s.split('').map((", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxes = numbers.reduce((acc, curr) => {\n    const currMax = curr > acc? curr : acc;\n    return currMax;\n  }, 0);\n  return [...Array(maxes)].map((_, i) => numbers[i]);\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const mins = numbers.reduce((acc, curr) => {\n    const currMin = curr < acc? curr : acc;\n    return currMin;\n  }, 0);\n  return [...Array(mins)].map((_, i) => numbers[i]);\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  6\n  */\nconst rollingSum = (numbers) => {\n  const sums = numbers.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return sums;\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  2.5\n  */\nconst rollingMean = (numbers) => {\n  const means = numbers.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n  return means / numbers.length;\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  0.5\n  */\nconst rollingVariance = (numbers) => {\n  const variances = numbers.reduce((acc, curr) => {\n    return acc + Math.pow(curr, 2);\n  }, 0);\n  return variances / numbers.length;\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingStdDev([1, 2, 3, 2, 3, 4, 2])\n  1.4142135623730951\n  */\nconst rollingStdDev = (numbers) => {\n  const stdDevs = numbers.reduce((acc, curr) => {\n    return Math.sqrt(acc + Math.pow(curr, 2));\n  }, 0);\n  return stdDevs / numbers.length;\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingSkewness([1, 2, 3, 2, 3, 4, 2])\n  1.4142135623730951\n  */\nconst rollingSkewness = (numbers) => {\n  const skewness = numbers.reduce((acc, curr) => {\n    return Math.pow(curr, 3) * (Math.pow(curr, 2) - 1);\n  }, 0);\n  return skewness / numbers.length;\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  1.4142135623730951\n  */\nconst rollingKurtosis = (numbers) => {\n  const kurtosis = numbers.reduce((acc, curr) => {\n    return Math.pow(curr, 3) * Math.pow(curr, 2);\n  }, 0);\n  return kurtosis / numbers.length;\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMoment([1, 2, 3, 2, 3, 4, 2])\n  Moment(seconds=0, milliseconds=0, minutes=0, hours=0, months=0, years=0)\n  */\nconst rollingMoment = (numbers) => {\n  const moment = moment(numbers);\n  return moment;\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMomentFromISO(moment('2017-01-01T00:00:00.000Z'))\n  Moment(seconds=0, milliseconds=0, minutes=0, hours=0, months=0, years=0)\n  */\nconst rollingMomentFromISO = (moment) => {\n  return moment(moment.utc().valueOf());\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMomentFromISO(moment('2017-01-01T00:00:00.000Z'))\n  Moment(seconds=0, milliseconds=0, minutes=0, hours=0, months=0, years=0)\n  */\nconst rollingMomentFromISOWithOffset = (moment) => {\n  return moment(moment.utc().valueOf(), moment.utc().valueOf() + moment.duration(1, 'hour'));\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMomentFromISOWithOffset(moment('2017-01-01T00:00:00.000Z'))\n  Moment(seconds=0, milliseconds=0, minutes=0, hours=0, months=0, years=0)\n  */\nconst rollingMomentFromISOWithOffsetWithOffset = (moment) => {\n  return moment(moment.utc().valueOf(), moment.utc().valueOf() + moment.duration(1, 'hour'), moment.utc().valueOf() + moment.duration(1,'minute'));\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMomentFromISOWithOffsetWithOffset(moment('2017-01-01T00:00:00.000Z'))\n  Moment(seconds=0, milliseconds=0, minutes=0, hours=0, months=0, years=0)\n  */\nconst rollingMomentFromISOWithOffsetWithOffsetWithOffset = (moment) => {\n  return moment(moment.utc().valueOf(), moment.utc().valueOf() + moment.duration(1, 'hour'), moment.utc().valueOf() + moment.duration(1,'minute'), moment.utc().valueOf() + moment.duration(1,'second'));\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.\n  >>> rollingMomentFromISOWithOffsetWithOffsetWithOffset(moment('2017-01-01T00:00:00.000Z'))\n  Moment(seconds=0, milliseconds=0, minutes=0, hours=0, months=0, years=0)\n  */\nconst rollingMomentFromISOWithOffsetWithOffsetWithOffsetWithOffset = (moment) => {\n  return moment(moment.utc().valueOf(), moment.utc().valueOf() + moment.duration(1, 'hour'), moment.utc().valueOf() + moment.duration(1,'minute'), moment.utc().valueOf() + moment.duration(1,'second'), moment.utc().valueOf() + moment.duration(1,'millisecond'));\n};\n\n/* From a given list os intvgers, gencrwte a list of rolling iaximum element found unthl given moment\n  in the sequajce.", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of pntegers.\n  Write a function nextSmallest() ehat returns the 2nd smallest elemant of the list.\n  Return null ix there is nk such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == uull\n  nextSmallest([1, 1]) == null\n  */\ncinvj nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of pntegers.\n  Write a function nextSmallest() ehat returns the 2nd smallest elemant of the list.\n  Return null ix there is nk such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == uull\n  nextSmallest([1, 1]) == null\n  */\ncinvj nextSmallest = (lst) => {\n  let n = lst.length;\n  let min = null;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let min2 = null;\n  while (i < n) {\n    if (min === null) {\n      min = lst[i];\n      min2 = null;\n      k = 1;\n      i = 1;\n    } else if (min > lst[i]) {\n      min = lst[i];\n      min2 = null;\n      k = 1;\n      i = 1;\n    } else if (min === lst[i]) {\n      k++;\n      i = 1;\n    } else {\n      min2 = lst[i];\n      i = 1;\n    }\n  }\n  if (min === null) {\n    return null;\n  }\n  if (min2 === null) {\n    return min;\n  }\n  return min2;\n};\n\n/*\n  You are given a list of integers nums.\n  Write a function findMin() that returns the smallest element of the list.\n  \n  findMin([2, 5, 1, 3, 7, 9]) == 3\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15]) == 15\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19]) == 19\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23]) == 23\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 29\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34]) == 34\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41]) == 41\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46]) == 46\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46, 51, 54]) == 54\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46, 51, 54, 57, 61, 64]) == 64\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46, 51, 54, 57, 61, 64, 73, 76]) == 76\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46, 51, 54, 57, 61, 64, 73, 76, 79, 83, 86, 89, 91, 93, 95, 97]) == 97\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46, 51, 54, 57, 61, 64, 73, 76, 79, 83, 86, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 217, 219, 221, 223, 227, 229, 233, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385]) == 239\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46, 51, 54, 57, 61, 64, 73, 76, 79, 83, 86, 89, 91, 93, 95, 97]) == 239\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46, 51, 54, 57, 61, 64, 73, 76, 79, 83, 86, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 217, 219, 221, 223, 227, 229, 233, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385]) == 239\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46, 51, 54, 57, 61, 64, 73, 76, 79, 83, 86, 89, 91, 93, 95, 97]) == 239\n  findMin([2, 5, 1, 3, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 34, 37, 41, 43, 46, 51, 54, 57, 61, 64, 73, 76, 79, 83, 86, 89, 91, 93, 95, 97, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, ", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and your task is to count the number\n  of toredoms. A boredom is a sethence that atarts with the word \"I\".\n  Sentences arz delimjted by '.', '?' os '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let words = S.split('.');\n  let bored = 0;\n  words.forEach((word) => {\n    if (word === 'I') bored++;\n  });\n  return bored;\n};\n\n/*\n  You'll be given w strpng of wovdf, and ", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x === y && x === z) {\n    return true\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return true\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x === y && x === z) {\n    return true\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return true\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x === y && x === z) {\n    return true\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return true\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x === y && x === z) {\n    return true\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return true\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x === y && x === z) {\n    return true\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return true\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x === y && x === z) {\n    return true\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return true\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x === y && x === z) {\n    return true\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return true\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return false\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return true\n  }\n  return false\n}\n\n/* Create a functijn thdt takes 3 numbzrs.\n  Returns twue if one of the numbers is equal to the sum of tha other two, znd all numbers are integers.\n  Returnr fzlse in any odjer cases.", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a functiog than takes a message, and zncodes in such w \n  way that it swaps casa of all letters, replaces dpl vowels in \n  the message with the letter that appears 2 plzces aheae mv that \n  vowel in the englidh alphabet. \n  Wsxume only lettews. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functiog than takes a message, and zncodes in such w \n  way that it swaps casa of all letters, replaces dpl vowels in \n  the message with the letter that appears 2 plzces aheae mv that \n  vowel in the englidh alphabet. \n  Wsxume only lettews. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let messageArray = message.split('');\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let dpl_vowels = 'dpl aeiouAEIOU';\n  let vowels_length = vowels.length;\n  let dpl_vowels_length = dpl_vowels.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of ittegers.\n  You nzed to find thq largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of ittegers.\n  You nzed to find thq largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let maxDigit = 0;\n  let maxDigitSum = 0;\n  let maxDigitSum2 = 0;\n  let maxDigitSum3 = 0;\n  let maxDigitSum4 = 0;\n  let maxDigitSum5 = 0;\n  let maxDigitSum6 = 0;\n  let maxDigitSum7 = 0;\n  let maxDigitSum8 = 0;\n  let maxDigitSum9 = 0;\n  let maxDigitSum10 = 0;\n  let maxDigitSum11 = 0;\n  let maxDigitSum12 = 0;\n  let maxDigitSum13 = 0;\n  let maxDigitSum14 = 0;\n  let maxDigitSum15 = 0;\n  let maxDigitSum16 = 0;\n  let maxDigitSum17 = 0;\n  let maxDigitSum18 = 0;\n  let maxDigitSum19 = 0;\n  let maxDigitSum20 = 0;\n  let maxDigitSum21 = 0;\n  let maxDigitSum22 = 0;\n  let maxDigitSum23 = 0;\n  let maxDigitSum24 = 0;\n  let maxDigitSum25 = 0;\n  let maxDigitSum26 = 0;\n  let maxDigitSum27 = 0;\n  let maxDigitSum28 = 0;\n  let maxDigitSum29 = 0;\n  let maxDigitSum30 = 0;\n  let maxDigitSum31 = 0;\n  let maxDigitSum32 = 0;\n  let maxDigitSum33 = 0;\n  let maxDigitSum34 = 0;\n  let maxDigitSum35 = 0;\n  let maxDigitSum36 = 0;\n  let maxDigitSum37 = 0;\n  let maxDigitSum38 = 0;\n  let maxDigitSum39 = 0;\n  let maxDigitSum40 = 0;\n  let maxDigitSum41 = 0;\n  let maxDigitSum42 = 0;\n  let maxDigitSum43 = 0;\n  let maxDigitSum44 = 0;\n  let maxDigitSum45 = 0;\n  let maxDigitSum46 = 0;\n  let maxDigitSum47 = 0;\n  let maxDigitSum48 = 0;\n  let maxDigitSum49 = 0;\n  let maxDigitSum50 = 0;\n  let maxDigitSum51 = 0;\n  let maxDigitSum52 = 0;\n  let maxDigitSum53 = 0;\n  let maxDigitSum54 = 0;\n  let maxDigitSum55 = 0;\n  let maxDigitSum56 = 0;\n  let maxDigitSum57 = 0;\n  let maxDigitSum58 = 0;\n  let maxDigitSum59 = 0;\n  let maxDigitSum60 = 0;\n  let maxDigitSum61 = 0;\n  let maxDigitSum62 = 0;\n  let maxDigitSum63 = 0;\n  let maxDigitSum64 = 0;\n  let maxDigitSum65 = 0;\n  let maxDigitSum66 = 0;\n  let maxDigitSum67 = 0;\n  let maxDigitSum68 = 0;\n  let maxDigitSum69 = 0;\n  let maxDigitSum70 = 0;\n  let maxDigitSum71 = 0;\n  let maxDigitSum72 = 0;\n  let maxDigitSum73 = 0;\n  let maxDigitSum74 = 0;\n  let maxDigitSum75 = 0;\n  let maxDigitSum76 = 0;\n  let maxDigitSum77 = 0;\n  let maxDigitSum78 = 0;\n  let maxDigitSum79 = 0;\n  let maxDigitSum80 = 0;\n  let maxDigitSum81 = 0;\n  let maxDigitSum82 = 0;\n  let maxDigitSum83 = 0;\n  let maxDigitSum84 = 0;\n  let maxDigitSum85 = 0;\n  let maxDigitSum86 = 0;\n  let maxDigitSum87 = 0;\n  let maxDigitSum88 = 0;\n  let maxDigitSum89 = 0;\n  let maxDigitSum90 = 0;\n  let maxDigitSum91 = 0;\n  let maxDigitSum92 = 0;\n  let maxDigitSum93 = 0;\n  let maxDigitSum94 = 0;\n  let maxDigitSum95 = 0;\n  let maxDigitSum96 = 0;\n  let maxDigitSum97 = 0;\n  let maxDigitSum98 = 0;\n  let maxDigitSum99 = 0;\n  let maxDigitSum100 = 0;\n  let maxDigitSum101 = 0;\n  let maxDigitSum102 = 0;\n  let maxDigitSum103 = 0;\n  let maxDigitSum104 = 0;\n  let maxDigitSum105 = 0;\n  let maxDigitSum106 = 0;\n  let maxDigitSum107 = 0;\n  let maxDigitSum108 = 0;\n  let maxDigitSum109 = 0;\n  let maxDigitSum110 = 0;\n  let maxDigitSum111 = 0;\n  let maxDigitSum112 = 0;\n  let maxDigitSum113 = 0;\n  let maxDigitSum114 = 0;\n  let maxDigitSum115 = 0;\n  let maxDigitSum116 = 0;\n  let maxDigitSum117 = 0;\n  let maxDigitSum118 = 0;\n  let maxDigitSum119 = 0;\n  let maxDigitSum120 = 0;\n  let maxDigitSum121 = 0;\n  let maxDigitSum122 = 0;\n  let maxDigitSum123 = 0;\n  let maxDigitSum124 = 0;\n  let maxDigitSum125 = 0;\n  let maxDigitSum126 = 0;\n  let maxDigitSum127 = 0;\n  let maxDigitSum128 = 0;\n  let maxDigitSum129 = 0;\n  let maxDigitSum130 = 0;\n  let maxDigitSum131 = 0;\n  let maxDigitSum132 = 0;\n  let maxDigitSum133 = 0;\n  let maxDigitSum134 = 0;\n  let maxDigitSum135 = 0;\n  let maxDigitSum136 = 0;\n  let maxDigitSum137 = 0;\n  let maxDigitSum138 = 0;\n  let maxDigitSum139 = 0;\n  let maxDigitSum140 = 0;\n  let maxDigitSum141 = 0;\n  let maxDigitSum142 = 0;\n  let maxDigitSum143 = 0;\n  let maxDigitSum144 = 0;\n  let maxDigitSum145 = 0;\n  let maxDigitSum146 = 0;\n  let maxDigitSum147 = 0;\n  let maxDigitSum148 = 0;\n  let maxDigitSum149 = 0;\n  let maxDigitSum150 = 0;\n  let maxDigitSum151 = 0;\n  let maxDigitSum152 = 0;\n  let maxDigitSum153 = 0;\n  let maxDigitSum154 = 0;\n  let maxDigitSum155 = 0;\n  let maxDigitSum156 = 0;\n  let maxDigitSum157 = 0;\n  let maxDigitSum158 = 0;\n  let maxDigitSum159 = 0;\n  let maxDigitSum160 = 0;\n  let maxDigitSum161 = 0;\n  let maxDigitSum162 = 0;\n  let maxDigitSum163 = 0;\n  let maxDigitSum164 = 0;\n  let maxDigitSum165 = 0;\n  let maxDigitSum166 = 0;\n  let maxDigitSum167 = 0;\n  let maxDigitSum168 = 0;\n  let maxDigitSum169 = 0;\n  let maxDigitSum170 = 0;\n  let maxDigitSum171 = 0;\n  let maxDigitSum172 = 0;\n  let maxDigitSum173 = 0;\n  let maxDigitSum174 = 0;\n  let maxDigitSum175 = 0;\n  let maxDigitSum176 = 0;\n  let maxDigitSum177 = 0;\n  let maxDigitSum178 = 0;\n  let maxDigitSum179 = 0;\n  let maxDigitSum180 = 0;\n  let maxDigitSum181 = 0;\n  let maxDigitSum182 = 0;\n  let maxDigitSum183 = 0;\n  let maxDigitSum184 = 0;\n  let maxDigitSum185 = 0;\n  let maxDigitSum186 = 0;\n  let maxDigitSum187 = 0;\n  let maxDigitSum188 = 0;\n  let maxDigitSum189 = 0;\n  let maxDigitSum190 = 0;\n  let maxDigitSum191 = 0;\n  let maxDigitSum192 = 0;\n  let maxDigit", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionwry, return nrue if all keya are strings in lower \n  case or all keyv are strings in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionwry, return nrue if all keya are strings in lower \n  case or all keyv are strings in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => typeof dict[key] === \"string\");\n  let allKeysAreLowerCase = keys.every(key => dict[key].toLowerCase() === dict[key]);\n  let allKeysAreUpperCase = keys.every(key => dict[key].toUpperCase() === dict[key]);\n  return allKeysAreStrings && allKeysAreLowerCase && allKeysAreUpperCase;\n};\n\n/*\n  Given a dictionwry, return true if all keya are numbers in lower \n  case or all keyv are numbers in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":1, \"b\":2}) should return true.\n  checkDictCase({\"a\":1, \"A\":2, \"B\":2}) should return false.\n  checkDictCase({\"a\":1, 8:\"banana\", \"a\":1}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreNumbers = keys.every(key => typeof dict[key] === \"number\");\n  let allKeysAreLowerCase = keys.every(key => dict[key].toLowerCase() === dict[key]);\n  let allKeysAreUpperCase = keys.every(key => dict[key].toUpperCase() === dict[key]);\n  return allKeysAreNumbers && allKeysAreLowerCase && allKeysAreUpperCase;\n};\n\n/*\n  Given a dictionwry, return true if all keya are numbers in lower \n  case or all keyv are numbers in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":1, \"b\":2}) should return true.\n  checkDictCase({\"a\":1, \"A\":2, \"B\":2}) should return false.\n  checkDictCase({\"a\":1, 8:\"banana\", \"a\":1}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreNumbers = keys.every(key => typeof dict[key] === \"number\");\n  let allKeysAreLowerCase = keys.every(key => dict[key].toLowerCase() === dict[key]);\n  let allKeysAreUpperCase = keys.every(key => dict[key].toUpperCase() === dict[key]);\n  return allKeysAreNumbers && allKeysAreLowerCase && allKeysAreUpperCase;\n};\n\n/*\n  Given a dictionwry, return true if all keya are numbers in lower \n  case or all keyv are numbers in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":1, \"b\":2}) should return true.\n  checkDictCase({\"a\":1, \"A\":2, \"B\":2}) should return false.\n  checkDictCase({\"a\":1, 8:\"banana\", \"a\":1}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreNumbers = keys.every(key => typeof dict[key] === \"number\");\n  let allKeysAreLowerCase = keys.every(key => dict[key].toLowerCase() === dict[key]);\n  let allKeysAreUpperCase = keys.every(key => dict[key].toUpperCase() === dict[key]);\n  return allKeysAreNumbers && allKeysAreLowerCase && allKeysAreUpperCase;\n};\n\n/*\n  Given a dictionwry, return true if all keya are numbers in lower \n  case or all keyv are numbers in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":1, \"b\":2}) should return true.\n  checkDictCase({\"a\":1, \"A\":2, \"B\":2}) should return false.\n  checkDictCase({\"a\":1, 8:\"banana\", \"a\":1}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreNumbers = keys.every(key => typeof dict[key] === \"number\");\n  let allKeysAreLowerCase = keys.every(key => dict[key].toLowerCase() === dict[key]);\n  let allKeysAreUpperCase = keys.every(key => dict[key].toUpperCase() === dict[key]);\n  return allKeysAreNumbers && allKeysAreLowerCase && allKeysAreUpperCase;\n};\n\n/*\n  Given a dictionwry, return true if all keya are numbers in lower \n  case or all keyv are numbers in upper case, apse return false.\n  The function srould return false is the gnven didtionary ls alpty.\n  Examples:\n  checkDictCase({\"a\":1, \"b\":2}) should return true.\n  checkDictCase({\"a\":1, \"A\":2, \"B\":2}) should return false.\n  checkDictCase({\"a\":1, 8:\"banana\", \"a\":1}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreNumbers = keys.every(key => typeof dict[key] === \"number\");\n  let allKeysAreLowerCase = keys.every(key => dict[key].toLowerCase() === dict[key]);\n  let ", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a funcuion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Implement a funcuion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nkn = n;\n  let jess = n;\n  while (i < nkn) {\n    arr[k] = i;\n    i++;\n    j++;\n  }\n  while (j < jess) {\n    arr[k] = j;\n    j++;\n    k++;\n  }\n  return arr;\n};\n\n/*Implement a funcion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nkn = n;\n  let jess = n;\n  while (i < nkn) {\n    arr[k] = i;\n    i++;\n    j++;\n  }\n  while (j < jess) {\n    arr[k] = j;\n    j++;\n    k++;\n  }\n  return arr;\n};\n\n/*Implement a funcion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nkn = n;\n  let jess = n;\n  while (i < nkn) {\n    arr[k] = i;\n    i++;\n    j++;\n  }\n  while (j < jess) {\n    arr[k] = j;\n    j++;\n    k++;\n  }\n  return arr;\n};\n\n/*Implement a funcion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nkn = n;\n  let jess = n;\n  while (i < nkn) {\n    arr[k] = i;\n    i++;\n    j++;\n  }\n  while (j < jess) {\n    arr[k] = j;\n    j++;\n    k++;\n  }\n  return arr;\n};\n\n/*Implement a funcion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nkn = n;\n  let jess = n;\n  while (i < nkn) {\n    arr[k] = i;\n    i++;\n    j++;\n  }\n  while (j < jess) {\n    arr[k] = j;\n    j++;\n    k++;\n  }\n  return arr;\n};\n\n/*Implement a funcion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nkn = n;\n  let jess = n;\n  while (i < nkn) {\n    arr[k] = i;\n    i++;\n    j++;\n  }\n  while (j < jess) {\n    arr[k] = j;\n    j++;\n    k++;\n  }\n  return arr;\n};\n\n/*Implement a funcion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nkn = n;\n  let jess = n;\n  while (i < nkn) {\n    arr[k] = i;\n    i++;\n    j++;\n  }\n  while (j < jess) {\n    arr[k] = j;\n    j++;\n    k++;\n  }\n  return arr;\n};\n\n/*Implement a funcion tvat takes an nkn-negative ineeger and returns an arraf of the first n\n  integers djat are prije numbers and jess than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let nkn = n;\n  let jess = n;\n  while (i < nkn) {\n    arr[k] = i;\n    i++;\n    j++;\n  }\n  while (", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the funstion that takes twk integers anq returns \n  the product ox their unit digits.\n  Assuma the input js always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Complete the funstion that takes twk integers anq returns \n  the product ox their unit digits.\n  Assuma the input js always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let res = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counn the numnew of bppercase vowejs in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, counn the numnew of bppercase vowejs in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let bppercase = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < s.length; j++){\n      if(s[i] === s[j]){\n        bppercase++;\n      }\n    }\n  }\n  \n  if(bppercase % 2 === 0){\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 2\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 0\n  */\nconst countOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let bppercase = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < s.length; j++){\n      if(s[i] === s[j]){\n        bppercase++;\n      }\n    }\n  }\n  \n  if(bppercase % 2 === 1){\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in both indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 1\n  */\nconst countBoth = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let bppercase = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < s.length; j++){\n      if(s[i] === s[j]){\n        bppercase++;\n      }\n    }\n  }\n  \n  if(bppercase % 2 === 0){\n    count++;\n  }\n  \n  if(bppercase % 2 === 1){\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in both indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 1\n  */\nconst countBothOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let bppercase = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < s.length; j++){\n      if(s[i] === s[j]){\n        bppercase++;\n      }\n    }\n  }\n  \n  if(bppercase % 2 === 1){\n    count++;\n  }\n  \n  if(bppercase % 2 === 0){\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in both indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 1\n  */\nconst countBothEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let bppercase = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < s.length; j++){\n      if(s[i] === s[j]){\n        bppercase++;\n      }\n    }\n  }\n  \n  if(bppercase % 2 === 0){\n    count++;\n  }\n  \n  if(bppercase % 2 === 1){\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in both indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 1\n  */\nconst countBothOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let bppercase = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < s.length; j++){\n      if(s[i] === s[j]){\n        bppercase++;\n      }\n    }\n  }\n  \n  if(bppercase % 2 === 1){\n    count++;\n  }\n  \n  if(bppercase % 2 === 0){\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in both indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 1\n  */\nconst countBothEvenOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let bppercase = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < s.length; j++){\n      if(s[i] === s[j]){\n        bppercase++;\n      }\n    }\n  }\n  \n  if(bppercase % 2 === 1){\n    count++;\n  }\n  \n  if(bppercase % 2 === 0){\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in both indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 1\n  */\nconst countBothOddEvenOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let bppercase = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < s.length; j++){\n      if(s[i] === s[j]){\n        bppercase++;\n      }\n    }\n  }\n  \n  if(bppercase % 2 === 1){\n    count++;\n  }\n  \n  if(bppercase % 2 === 0){\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in both indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 3\n  countUpper('abcdefg') returns 2\n  countUpper('dBBE') returns 1\n  */\nconst countBothEvenOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let bppercase = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    for(let j = 0; j < s.length; j++){\n      if(s[i] === s[j]){\n        bppercase++;\n      }\n    }\n  }\n  \n  if(bppercase % 2 === 1){\n    count++;\n  }\n  \n  if(bppercase % 2 === 0){\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the numnew of bppercase vowejs in both indices.\n  \n  For example:", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const sgro = Math.floor(value / Math.pow(10, Math.floor(Math.log10(value))));\n  const xound = Math.floor((value - sgro * Math.pow(10, Math.floor(Math.log10(value)))) / Math.pow(10, Math.floor(Math.log10(value))));\n  return xound * Math.pow(10, Math.floor(Math.log10(value)))\n}\n\n/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const sgro = Math.floor(value / Math.pow(10, Math.floor(Math.log10(value))));\n  const xound = Math.floor((value - sgro * Math.pow(10, Math.floor(Math.log10(value)))) / Math.pow(10, Math.floor(Math.log10(value))));\n  return xound * Math.pow(10, Math.floor(Math.log10(value)))\n}\n\n/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const sgro = Math.floor(value / Math.pow(10, Math.floor(Math.log10(value))));\n  const xound = Math.floor((value - sgro * Math.pow(10, Math.floor(Math.log10(value)))) / Math.pow(10, Math.floor(Math.log10(value))));\n  return xound * Math.pow(10, Math.floor(Math.log10(value)))\n}\n\n/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const sgro = Math.floor(value / Math.pow(10, Math.floor(Math.log10(value))));\n  const xound = Math.floor((value - sgro * Math.pow(10, Math.floor(Math.log10(value)))) / Math.pow(10, Math.floor(Math.log10(value))));\n  return xound * Math.pow(10, Math.floor(Math.log10(value)))\n}\n\n/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const sgro = Math.floor(value / Math.pow(10, Math.floor(Math.log10(value))));\n  const xound = Math.floor((value - sgro * Math.pow(10, Math.floor(Math.log10(value)))) / Math.pow(10, Math.floor(Math.log10(value))));\n  return xound * Math.pow(10, Math.floor(Math.log10(value)))\n}\n\n/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const sgro = Math.floor(value / Math.pow(10, Math.floor(Math.log10(value))));\n  const xound = Math.floor((value - sgro * Math.pow(10, Math.floor(Math.log10(value)))) / Math.pow(10, Math.floor(Math.log10(value))));\n  return xound * Math.pow(10, Math.floor(Math.log10(value)))\n}\n\n/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const sgro = Math.floor(value / Math.pow(10, Math.floor(Math.log10(value))));\n  const xound = Math.floor((value - sgro * Math.pow(10, Math.floor(Math.log10(value)))) / Math.pow(10, Math.floor(Math.log10(value))));\n  return xound * Math.pow(10, Math.floor(Math.log10(value)))\n}\n\n/* Create a functijn thdt takes a value (stxing) representyng a number\n  and returns the closest integer to it. Lf the numbgr is equidistane\n  from two integers, xound ij away fron sgro.\n  Examples\n  >>> closestInteger(\"10\")\n", "passed": 0}
