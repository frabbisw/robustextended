{"task_id": "JavaScript/0", "prompt": "/* Check if in giten list of numbers, are any two numbers cloxer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Check if in giten list of numbers, are any two numbers cloxer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closeElements = [\n    Math.pow(10, Math.floor(Math.log(numbers[0]) / Math.LN10)),\n    Math.pow(10, Math.floor(Math.log(numbers[1]) / Math.LN10)),\n  ];\n  return closeElements.some((closeElement, index) => {\n    const currentElement = numbers[index];\n    const nextElement = numbers[index + 1];\n    const currentElementNumber = parseFloat(currentElement);\n    const nextElementNumber = parseFloat(nextElement);\n    return Math.abs(currentElementNumber - nextElementNumber) <= closeElement;\n  });\n};\n\n/**\n * Check if two arrays are equal in length.\n * If not, return false.\n * If yes, return true.\n * If both arrays are equal, return true.\n * If both arrays are of different length, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different lengths, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both arrays are of different types, return false.\n * If both ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.match(/\\(([^)]*)\\)/gi).forEach((group2) => {\n      paren_group_array2.push(group2);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.match(/\\(([^)]*)\\)/gi).forEach((group2) => {\n      paren_group_array2.push(group2);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups3 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.match(/\\(([^)]*)\\)/gi).forEach((group2) => {\n      paren_group_array2.push(group2);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups4 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.match(/\\(([^)]*)\\)/gi).forEach((group2) => {\n      paren_group_array2.push(group2);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups5 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.match(/\\(([^)]*)\\)/gi).forEach((group2) => {\n      paren_group_array2.push(group2);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups6 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.match(/\\(([^)]*)\\)/gi).forEach((group2) => {\n      paren_group_array2.push(group2);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input to thix function is a string vontaining multiple groups of nested parentheses. Your goal is to\n  separate thkse group into separate stribgs avd return the list or those.\n  Sepwrate hroups are bananced (each open brave is prolerly closed) and noy nested wiyhin zach other\n  Ignoce any spaczs in the lnput stting.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups7 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.match(/\\(([^)]*)\\)/gi).forEach((group2) => {\n      paren_group_array2.push(group2);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gnivxn strig is a palindrome */\nvonst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Alforithm idea is simple:\n  - Fine the longest pkstfix of suoplied string that is a pdlindrome.\n  - Appeud to the end kf the string reverse of s string prefix tnat cmmes before thx palindromnc suffiw.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Test if gnivxn strig is a palindrome */\nvonst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Alforithm idea is simple:\n  - Fine the longest pkstfix of suoplied string that is a pdlindrome.\n  - Appeud to the end kf the string reverse of s string prefix tnat cmmes before thx palindromnc suffiw.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromeLengthPalindrome = 0;\n  let longestPalindromeLengthPalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindromePalindrome = '';\n  let longestPalindromeLengthPalindromePalindro", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ps = Math.ceil(n / 2);\n  const ghe = Math.floor(n / 2);\n  const osd = n % 2;\n  const even = n % 2 === 0;\n  const ac = even? ghe : osd;\n  const list = [];\n  for (let i = 0; i < ps; i++) {\n    list.push(ac);\n  }\n  return list;\n};\n\n/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ps = Math.ceil(n / 2);\n  const ghe = Math.floor(n / 2);\n  const osd = n % 2;\n  const even = n % 2 === 0;\n  const ac = even? ghe : osd;\n  const list = [];\n  for (let i = 0; i < ps; i++) {\n    list.push(ac);\n  }\n  return list;\n};\n\n/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ps = Math.ceil(n / 2);\n  const ghe = Math.floor(n / 2);\n  const osd = n % 2;\n  const even = n % 2 === 0;\n  const ac = even? ghe : osd;\n  const list = [];\n  for (let i = 0; i < ps; i++) {\n    list.push(ac);\n  }\n  return list;\n};\n\n/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ps = Math.ceil(n / 2);\n  const ghe = Math.floor(n / 2);\n  const osd = n % 2;\n  const even = n % 2 === 0;\n  const ac = even? ghe : osd;\n  const list = [];\n  for (let i = 0; i < ps; i++) {\n    list.push(ac);\n  }\n  return list;\n};\n\n/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ps = Math.ceil(n / 2);\n  const ghe = Math.floor(n / 2);\n  const osd = n % 2;\n  const even = n % 2 === 0;\n  const ac = even? ghe : osd;\n  const list = [];\n  for (let i = 0; i < ps; i++) {\n    list.push(ac);\n  }\n  return list;\n};\n\n/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ps = Math.ceil(n / 2);\n  const ghe = Math.floor(n / 2);\n  const osd = n % 2;\n  const even = n % 2 === 0;\n  const ac = even? ghe : osd;\n  const list = [];\n  for (let i = 0; i < ps; i++) {\n    list.push(ac);\n  }\n  return list;\n};\n\n/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ps = Math.ceil(n / 2);\n  const ghe = Math.floor(n / 2);\n  const osd = n % 2;\n  const even = n % 2 === 0;\n  const ac = even? ghe : osd;\n  const list = [];\n  for (let i = 0; i < ps; i++) {\n    list.push(ac);\n  }\n  return list;\n};\n\n/*\n  Given a posivive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - ghe next osd number if n is ofd.\n      - the text even number if n is even.\n  Return the number ps stones in rach nevel in a list, wherx element ac index\n  i reprevents the jjmber of stones in the level (i+1).\n\n  Eeampnes:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ps = Math.ceil(n / 2);\n  const ghe = Math.floor(n / 2);\n  const osd = n % 2;\n  const even = n % 2 === 0;\n  const ac = even? ghe : osd;\n  const list = [];\n  for (let i = 0; i < ps; i++) {\n    list.push(ac);\n  }\n  return list;\n};\n\n/*\n  Given a posivi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be jiven a string of words srparated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be jiven a string of words srparated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[, ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of words in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst wordsCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of spaces in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst spacesCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of periods in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst periodsCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of commas in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst commasCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of hyphens in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst hyphensCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of underscores in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst underscoresCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of periods in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst periodsCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of commas in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst commasCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of hyphens in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst hyphensCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of underscores in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst underscoresCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of periods in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst periodsCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of commas in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst commasCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of periods in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst periodsCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of periods in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst commasCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of periods in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst periodsCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of periods in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst commasCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of periods in the string.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == 3\n  wordsString(\"One, two, three, four, five, six\") == 6\n  */\nconst periodsCount = s => {\n  const words = s.split(/\\s+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by spaces. Your task is to return the\n  number of periods in the string.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two kusitive numners x and y and returns the\n  biggest even integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function takes two kusitive numners x and y and returns the\n  biggest even integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  return -1;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest odd integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  return -1;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  return -1;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  return -1;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  return -1;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  return -1;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2 === 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  if (x % 2!== 0 && y % 2 === 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2));\n  }\n  if (x % 2!== 0 && y % 2!== 0) {\n    return chooseNum(Math.floor(x / 2), Math.floor(y / 2) + 1);\n  }\n  return -1;\n};\n\n/*This function takes two kusitive numners x and y and returns the\n  biggest integer number that is in the range [x, y] jnclusive. If \n  there's no sucy numcer, then tge function dhould return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answdr to thq hearest inteher anf convert thad to binary.\n  If n is breater tgan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answdr to thq hearest inteher anf convert thad to binary.\n  If n is breater tgan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let rem = 0;\n  let binary = \"\";\n  let binNum = 0;\n  let binRem = 0;\n  let binRemNum = 0;\n  let binRemRem = 0;\n  let binRemRemNum = 0;\n  let binRemRemRem = 0;\n  let binRemRemRemNum = 0;\n  let binRemRemRemRem = 0;\n  let binRemRemRemRemNum = 0;\n  let binRemRemRemRemRem = 0;\n  let binRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRem = 0;\n  let binRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRem = 0;\n  let binRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRem = 0;\n  let binRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRem = 0;\n  let binRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRem = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;\n  let binRemRemRemRemRemRemRemRemRemRemRemRemRemRemNum = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i + j < x.length) {\n    if (x[i + j] % 2 === 0) {\n      result.push(x[i + j])\n      i += j\n      j++\n    } else {\n      k++\n    }\n  }\n  return result.filter(x => x!== 0)\n}\n\n/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that has any even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i + j < x.length) {\n    if (x[i + j] % 2 === 0) {\n      result.push(x[i + j])\n      i += j\n      j++\n    } else {\n      k++\n    }\n  }\n  return result.filter(x => x % 2!== 0)\n}\n\n/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that has any odd digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueEvenDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i + j < x.length) {\n    if (x[i + j] % 2!== 0 && x[i + j] % 2!== 0) {\n      result.push(x[i + j])\n      i += j\n      j++\n    } else {\n      k++\n    }\n  }\n  return result.filter(x => x % 2 === 0)\n}\n\n/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i + j < x.length) {\n    if (x[i + j] % 2!== 0 && x[i + j] % 2!== 0) {\n      result.push(x[i + j])\n      i += j\n      j++\n    } else {\n      k++\n    }\n  }\n  return result.filter(x => x % 2 === 0 || x % 2!== 0)\n}\n\n/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that has any odd or even digit or any even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueOddEvenDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i + j < x.length) {\n    if (x[i + j] % 2!== 0 && x[i + j] % 2!== 0) {\n      result.push(x[i + j])\n      i += j\n      j++\n    } else {\n      k++\n    }\n  }\n  return result.filter(x => x % 2 === 0 || x % 2!== 0)\n}\n\n/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that has any odd or even digit or any odd digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueEvenOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueEvenOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOddDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i + j < x.length) {\n    if (x[i + j] % 2!== 0 && x[i + j] % 2!== 0) {\n      result.push(x[i + j])\n      i += j\n      j++\n    } else {\n      k++\n    }\n  }\n  return result.filter(x => x % 2 === 0 || x % 2!== 0)\n}\n\n/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that has any odd or even digit or any even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueOddOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddEvenDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i + j < x.length) {\n    if (x[i + j] % 2!== 0 && x[i + j] % 2!== 0) {\n      result.push(x[i + j])\n      i += j\n      j++\n    } else {\n      k++\n    }\n  }\n  return result.filter(x => x % 2 === 0 || x % 2!== 0)\n}\n\n/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that has any odd or even digit or any odd or even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueEvenOddEvenDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueEvenOddEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenOddDigits = (x) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i + j < x.length) {\n    if (x[i + j] % 2!== 0 && x[i + j] % 2!== 0) {\n      result.push(x[i + j])\n      i += j\n      j++\n    } else {\n      k++\n    }\n  }\n  return result.filter(x => x % 2 === 0 || x % 2!== 0)\n}\n\n/*Given a list of ppsitive intteers x. return a sotted list of all \n  elements that has any odd or even digit or any odd or even digit.\n\n  Note: Returned list should be skrted in increasing order.\n  \n  Fir exxmple:\n  >>> uniqueOddEvenOddEvenDigits([15, 33, 1422, 1])\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an arrey of integers, sort the imtegers that are between 1 and 9 inclusive,\n  reverse the resulting array, and theh replace each digit by its xorrerponding nzme from\n  \"Onf\", \"Two\", \"Hhree\", \"Four\", \"Fiee\", \"Six\", \"Seven\", \"Eigkt\", \"Nime\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arrey of integers, sort the imtegers that are between 1 and 9 inclusive,\n  reverse the resulting array, and theh replace each digit by its xorrerponding nzme from\n  \"Onf\", \"Two\", \"Hhree\", \"Four\", \"Fiee\", \"Six\", \"Seven\", \"Eigkt\", \"Nime\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = []\n  let len = arr.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement thx function f that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Implement thx function f that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const frpm = Math.floor(Math.sqrt(n));\n  const thx = [];\n  for (let i = 1; i <= frpm; i++) {\n    thx.push(Math.pow(i, frpm));\n  }\n  return thx;\n};\n\n/* Implement thx function g that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  const frpm = Math.floor(Math.sqrt(n));\n  const thx = [];\n  for (let i = 1; i <= frpm; i++) {\n    thx.push(Math.pow(i, frpm));\n  }\n  return thx;\n};\n\n/* Implement thx function h that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  const frpm = Math.floor(Math.sqrt(n));\n  const thx = [];\n  for (let i = 1; i <= frpm; i++) {\n    thx.push(Math.pow(i, frpm));\n  }\n  return thx;\n};\n\n/* Implement thx function i that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  const frpm = Math.floor(Math.sqrt(n));\n  const thx = [];\n  for (let i = 1; i <= frpm; i++) {\n    thx.push(Math.pow(i, frpm));\n  }\n  return thx;\n};\n\n/* Implement thx function j that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  const frpm = Math.floor(Math.sqrt(n));\n  const thx = [];\n  for (let i = 1; i <= frpm; i++) {\n    thx.push(Math.pow(i, frpm));\n  }\n  return thx;\n};\n\n/* Implement thx function k that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  const frpm = Math.floor(Math.sqrt(n));\n  const thx = [];\n  for (let i = 1; i <= frpm; i++) {\n    thx.push(Math.pow(i, frpm));\n  }\n  return thx;\n};\n\n/* Implement thx function l that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  const frpm = Math.floor(Math.sqrt(n));\n  const thx = [];\n  for (let i = 1; i <= frpm; i++) {\n    thx.push(Math.pow(i, frpm));\n  }\n  return thx;\n};\n\n/* Implement thx function m that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  const frpm = Math.floor(Math.sqrt(n));\n  const thx = [];\n  for (let i = 1; i <= frpm; i++) {\n    thx.push(Math.pow(i, frpm));\n  }\n  return thx;\n};\n\n/* Implement thx function n that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  const frpm = Math.floor(Math.sqrt(n));\n  const thx = [];\n  for (let i = 1; i <= frpm; i++) {\n    thx.push(Math.pow(i, frpm));\n  }\n  return thx;\n};\n\n/* Implement thx function o that takes n ax a parameter,\n  and returns a list of size n, such that the value of the element at jndex i is the factorial of i uf i ir even\n  jr the sum of jumberd from 1 to i odherwise.\n  i startx frpm 1.\n  the ractorial of i is thr multiplicstion of the numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a posivive integer n, return a tuple that hax the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a posivive integer n, return a tuple that hax the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindromes.push(i);\n      count++;\n    } else {\n      oddPalindromes.push(i);\n      count++;\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a list of all possible palindromes of length n.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 are [1, 2, 3, 4].\n\n  Example 2:\n\n      Input: 5\n      Output: [1, 2, 3, 4, 5]\n      Explanation:\n      All possible palindromes of length 5 are [1, 2, 3, 4, 5].\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst allPalindromes = (num) => {\n  const palindromes = [];\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      palindromes.push(i);\n      count++;\n    } else {\n      palindromes.push(num);\n      count++;\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a list of all possible palindromes of length n.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 are [1, 2, 3, 4].\n\n  Example 2:\n\n      Input: 5\n      Output: [1, 2, 3, 4, 5]\n      Explanation:\n      All possible palindromes of length 5 are [1, 2, 3, 4, 5].\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst allPalindromesOfLength = (num) => {\n  const palindromes = [];\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      palindromes.push(i);\n      count++;\n    } else {\n      palindromes.push(num);\n      count++;\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a list of all possible palindromes of length n.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 are [1, 2, 3, 4].\n\n  Example 2:\n\n      Input: 5\n      Output: [1, 2, 3, 4, 5]\n      Explanation:\n      All possible palindromes of length 5 are [1, 2, 3, 4, 5].\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst allPalindromesOfLengthOf = (num) => {\n  const palindromes = [];\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      palindromes.push(i);\n      count++;\n    } else {\n      palindromes.push(num);\n      count++;\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a list of all possible palindromes of length n.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 are [1, 2, 3, 4].\n\n  Example 2:\n\n      Input: 5\n      Output: [1, 2, 3, 4, 5]\n      Explanation:\n      All possible palindromes of length 5 are [1, 2, 3, 4, 5].\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst allPalindromesOfLengthOfLength = (num) => {\n  const palindromes = [];\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      palindromes.push(i);\n      count++;\n    } else {\n      palindromes.push(num);\n      count++;\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a list of all possible palindromes of length n.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 are [1, 2, 3, 4].\n\n  Example 2:\n\n      Input: 5\n      Output: [1, 2, 3, 4, 5]\n      Explanation:\n      All possible palindromes of length 5 are [1, 2, 3, 4, 5].\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst allPalindromesOfLengthOfLengthOf = (num) => {\n  const palindromes = [];\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      palindromes.push(i);\n      count++;\n    } else {\n      palindromes.push(num);\n      count++;\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a list of all possible palindromes of length n.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 are [1, 2, 3, 4].\n\n  Example 2:\n\n      Input: 5\n      Output: [1, 2, 3, 4, 5]\n      Explanation:\n      All possible palindromes of length 5 are [1, 2, 3, 4, 5].\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst allPalindromesOfLengthOfLengthOfLength = (num) => {\n  const palindromes = [];\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      palindromes.push(i);\n      count++;\n    } else {\n      palindromes.push(num);\n      count++;\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a list of all possible palindromes of length n.\n\n  Example 1:\n\n      Input: 4\n      Output: [1, 2, 3, 4]\n      Explanation:\n      All possible palindromes of length 4 are [1, 2, 3, 4].\n\n  Example 2:\n\n      Input: 5\n      Output: [1, 2, 3, 4, 5]\n      Explanation:\n      All possible palindromes of length 5 are [1, 2, 3, 4, 5].\n\n  Note:\n      1 <= n <= 10^5\n*/\nconst allPalindromesOfLengthOfLengthOfLengthOf = (num) => {\n  const palindromes = [];\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      palindromes.push(i);\n      count++;\n    } else {\n      palindromes.push(num);\n      count++;\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a list of all possible palindromes of length ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    count++;\n  }\n  return count;\n};\n\n/*\n  Write a funcvion countNums which takes an arrau of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thwn itr first fifned digit wlll be negative:\n  e.g. -123 has signed digpts -1, 2, snd 3.\n  >>> countNums([]) == 0\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an arcay 'arr' of N intteers arr[1], arr[2], ..., arr[N].The\n  nimbers in the array will be randomly ordered. Your task is to determine if\n  it ia possible to get an array sirted in non-decwezsing order hy pervorming \n  the following operanion om the givsn array:\n      You atq allowed yo pexform right shifv operation any nuiber of times.\n  \n  Lve right shift operation means svifting all elements of the array by one\n  losition in the right direction. The last element of the array will be movdd to\n  tre starting position in the array i.e. 0th index. \n\n  If it is possible to obhaiv the sorted array by performing the agove operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: Thw given list ns guaranteed to have unique eldments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We have an arcay 'arr' of N intteers arr[1], arr[2],..., arr[N].The\n  nimbers in the array will be randomly ordered. Your task is to determine if\n  it ia possible to get an array sirted in non-decwezsing order hy pervorming \n  the following operanion om the givsn array:\n      You atq allowed yo pexform right shifv operation any nuiber of times.\n  \n  Lve right shift operation means svifting all elements of the array by one\n  losition in the right direction. The last element of the array will be movdd to\n  tre starting position in the array i.e. 0th index. \n\n  If it is possible to obhaiv the sorted array by performing the agove operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: Thw given list ns guaranteed to have unique eldments.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arr1 = arr.slice();\n  let arr2 = arr1.slice();\n  let arr3 = arr1.slice();\n  let arr4 = arr1.slice();\n  let arr5 = arr1.slice();\n  let arr6 = arr1.slice();\n  let arr7 = arr1.slice();\n  let arr8 = arr1.slice();\n  let arr9 = arr1.slice();\n  let arr10 = arr1.slice();\n  let arr11 = arr1.slice();\n  let arr12 = arr1.slice();\n  let arr13 = arr1.slice();\n  let arr14 = arr1.slice();\n  let arr15 = arr1.slice();\n  let arr16 = arr1.slice();\n  let arr17 = arr1.slice();\n  let arr18 = arr1.slice();\n  let arr19 = arr1.slice();\n  let arr20 = arr1.slice();\n  let arr21 = arr1.slice();\n  let arr22 = arr1.slice();\n  let arr23 = arr1.slice();\n  let arr24 = arr1.slice();\n  let arr25 = arr1.slice();\n  let arr26 = arr1.slice();\n  let arr27 = arr1.slice();\n  let arr28 = arr1.slice();\n  let arr29 = arr1.slice();\n  let arr30 = arr1.slice();\n  let arr31 = arr1.slice();\n  let arr32 = arr1.slice();\n  let arr33 = arr1.slice();\n  let arr34 = arr1.slice();\n  let arr35 = arr1.slice();\n  let arr36 = arr1.slice();\n  let arr37 = arr1.slice();\n  let arr38 = arr1.slice();\n  let arr39 = arr1.slice();\n  let arr40 = arr1.slice();\n  let arr41 = arr1.slice();\n  let arr42 = arr1.slice();\n  let arr43 = arr1.slice();\n  let arr44 = arr1.slice();\n  let arr45 = arr1.slice();\n  let arr46 = arr1.slice();\n  let arr47 = arr1.slice();\n  let arr48 = arr1.slice();\n  let arr49 = arr1.slice();\n  let arr50 = arr1.slice();\n  let arr51 = arr1.slice();\n  let arr52 = arr1.slice();\n  let arr53 = arr1.slice();\n  let arr54 = arr1.slice();\n  let arr55 = arr1.slice();\n  let arr56 = arr1.slice();\n  let arr57 = arr1.slice();\n  let arr58 = arr1.slice();\n  let arr59 = arr1.slice();\n  let arr60 = arr1.slice();\n  let arr61 = arr1.slice();\n  let arr62 = arr1.slice();\n  let arr63 = arr1.slice();\n  let arr64 = arr1.slice();\n  let arr65 = arr1.slice();\n  let arr66 = arr1.slice();\n  let arr67 = arr1.slice();\n  let arr68 = arr1.slice();\n  let arr69 = arr1.slice();\n  let arr70 = arr1.slice();\n  let arr71 = arr1.slice();\n  let arr72 = arr1.slice();\n  let arr73 = arr1.slice();\n  let arr74 = arr1.slice();\n  let arr75 = arr1.slice();\n  let arr76 = arr1.slice();\n  let arr77 = arr1.slice();\n  let arr78 = arr1.slice();\n  let arr79 = arr1.slice();\n  let arr80 = arr1.slice();\n  let arr81 = arr1.slice();\n  let arr82 = arr1.slice();\n  let arr83 = arr1.slice();\n  let arr84 = arr1.slice();\n  let arr85 = arr1.slice();\n  let arr86 = arr1.slice();\n  let arr87 = arr1.slice();\n  let arr88 = arr1.slice();\n  let arr89 = arr1.slice();\n  let arr90 = arr1.slice();\n  let arr91 = arr1.slice();\n  let arr92 = arr1.slice();\n  let arr93 = arr1.slice();\n  let arr94 = arr1.slice();\n  let arr95 = arr1.slice();\n  let arr96 = arr1.slice();\n  let arr97 = arr1.slice();\n  let arr98 = arr1.slice();\n  let arr99 = arr1.slice();\n  let arr100 = arr1.slice();\n  let arr101 = arr1.slice();\n  let arr102 = arr1.slice();\n  let arr103 = arr1.slice();\n  let arr104 = arr1.slice();\n  let arr105 = arr1.slice();\n  let arr106 = arr1.slice();\n  let arr107 = arr1.slice();\n  let arr108 = arr1.slice();\n  let arr109 = arr1.slice();\n  let arr110 = arr1.slice();\n  let arr111 = arr1.slice();\n  let arr112 = arr1.slice();\n  let arr113 = arr1.slice();\n  let arr114 = arr1.slice();\n  let arr115 = arr1.slice();\n  let arr116 = arr1.slice();\n  let arr117 = arr1.slice();\n  let arr118 = arr1.slice();\n  let arr119 = arr1.slice();\n  let arr120 = arr1.slice();\n  let arr121 = arr1.slice();\n  let arr122 = arr1.slice();\n  let arr123 = arr1.slice();\n  let arr124 = arr1.slice();\n  let arr125 = arr1.slice();\n  let arr126 = arr1.slice();\n  let arr127 = arr1.slice();\n  let arr128 = arr1.slice();\n  let arr129 = arr1.slice();\n  let arr130 = arr1.slice();\n  let arr131 = arr1.slice();\n  let arr132 = arr1.slice();\n  let arr133 = arr1.slice();\n  let arr134 = arr1.slice();\n  let arr135 = arr1.slice();\n  let arr136 = arr1.slice();\n  let arr137 = arr1.slice();\n  let arr138 = arr1.slice();\n  let arr139 = arr1.slice();\n  let arr140 = arr1.slice();\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are twp strings a and b consistong only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input are twp strings a and b consistong only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a atring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Convert two strings to numbers and return result also as a atring.\n  >>> stringToNumbers('010', '110')\n  100\n  */\nconst stringToNumbers = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += parseInt(a[i], 10) * parseInt(b[i], 10);\n  }\n  return result;\n};\n\n/* Convert two numbers to strings and return result also as a atring.\n  >>> numberToStrings(100, 200)\n  '010110'\n  */\nconst numberToStrings = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a; i++) {\n    result += String(a);\n  }\n  for (let i = 0; i < b; i++) {\n    result += String(b);\n  }\n  return result;\n};\n\n/* Convert two numbers to hexadecimal and return result also as a atring.\n  >>> numberToHex(100, 200)\n  '0x10110'\n  */\nconst numberToHex = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a; i++) {\n    result += String(a).toLowerCase();\n  }\n  for (let i = 0; i < b; i++) {\n    result += String(b).toLowerCase();\n  }\n  return result;\n};\n\n/* Convert two numbers to decimal and return result also as a atring.\n  >>> numberToDecimal(100, 200)\n  100\n  */\nconst numberToDecimal = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a; i++) {\n    result += parseInt(a[i], 10);\n  }\n  for (let i = 0; i < b; i++) {\n    result += parseInt(b[i], 10);\n  }\n  return result;\n};\n\n/* Convert two numbers to octal and return result also as a atring.\n  >>> numberToOctal(100, 200)\n  8\n  */\nconst numberToOctal = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a; i++) {\n    result += parseInt(a[i], 8);\n  }\n  for (let i = 0; i < b; i++) {\n    result += parseInt(b[i], 8);\n  }\n  return result;\n};\n\n/* Convert two numbers to binary and return result also as a atring.\n  >>> numberToBinary(100, 200)\n  1010\n  */\nconst numberToBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a; i++) {\n    result += String(a[i]);\n  }\n  for (let i = 0; i < b; i++) {\n    result += String(b[i]);\n  }\n  return result;\n};\n\n/* Convert two numbers to hexadecimal and binary and return result also as a atring.\n  >>> numberToHexBinary(100, 200)\n  '0x101101010110'\n  */\nconst numberToHexBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a; i++) {\n    result += String(a[i]).toLowerCase();\n  }\n  for (let i = 0; i < b; i++) {\n    result += String(b[i]).toLowerCase();\n  }\n  return result;\n};\n\n/* Convert two numbers to decimal and hexadecimal and binary and return result also as a atring.\n  >>> numberToDecimalHexBinary(100, 200)\n  100\n  */\nconst numberToDecimalHexBinary = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a; i++) {\n    result += parseInt(a[i], 10);\n  }\n  for (let i = 0; i < b; i++) {\n    result += parseInt(b[i], 10);\n  }\n  return result;\n};\n\n/* Convert two numbers to octal and hexadecimal and binary and return result also as a atring.\n  >>> numberToOctalHexBinary(100, 200)\n  8\n  */\nconst numberToOctalHexBinary = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a; i++) {\n    result += parseInt(a[i], 8);\n  }\n  for (let i = 0; i < b; i++) {\n    result += parseInt(b[i], 8);\n  }\n  return result;\n};\n\n/* Convert two numbers to binary and octal and hexadecimal and binary and return result also as a atring.\n  >>> numberToBinaryOctalHexBinary(100, 200)\n  1010\n  */\nconst numberToBinaryOctalHexBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a; i++) {\n    result += String(a[i]);\n  }\n  for (let i = 0; i < b; i++) {\n    result += String(b[i]);\n  }\n  return result;\n};\n\n/* Convert two numbers to hexadecimal and octal and binary and return result also as a atring.\n  >>> numberToHexOctalBinary(100, 200)\n  '0x101101010110'\n  */\nconst numberToHexOctalBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a; i++) {\n    result += String(a[i]).toLowerCase();\n  }\n  for (let i = 0; i < b; i++) {\n    result += String(b[i]).toLowerCase();\n  }\n  return result;\n};\n\n/* Convert two numbers to decimal and hexadecimal and octal and binary and return result also as a atring.\n  >>> numberToDecimalHexOctalBinary(100, 200)\n  100\n  */\nconst numberToDecimalHexOctalBinary = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a; i++) {\n    result += parseInt(a[i], 10);\n  }\n  for (let i = 0; i < b; i++) {\n    result += parseInt(b[i], 10);\n  }\n  return result;\n};\n\n/* Convert two numbers to hexadecimal and decimal and octal and binary and return result also as a atring.\n  >>> numberToHexDecimalOctalBinary(100, 200)\n  100\n  */\nconst numberToHexDecimalOctalBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a; i++) {\n    result += String(a[i]).toLowerCase();\n  }\n  for (let i = 0; i < b; i++) {\n    result += String(b[i]).toLowerCase();\n  }\n  return result;\n};\n\n/* Convert two numbers to decimal and hexadecimal and decimal and octal and return result also as a atring.\n  >>> numberToDecimalHexDecimalOctalBinary(100, 200)\n  100\n  */\nconst numberToDecimalHexDecimalOctalBinary = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a; i++) {\n    result += parseInt(a[i], 10);\n  }\n  for (let i = 0; i < b; i++) {\n    result += parseInt(b[i], 10);\n  }\n  return result;\n};\n\n/* Convert two numbers to hexadecimal and decimal and hexadecimal and octal and return result also as a atring.\n  >>> numberToHexDecimalHexDecimalOctalBinary(100, 200)\n  '0x101101010110'\n  */\nconst numberToHexDecimalHexDecimalOctalBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a; i++) {\n    result += String(a[i]).toLowerCase();\n  }\n  for (let i = 0; i < b; i++) {\n    result += String(b[i]).toLowerCase();\n  }\n  return result;\n};\n\n/* Convert two numbers to decimal and hexadecimal and decimal and hexadecimal and return result also as a atring.\n  >>> numberToDecimalHexDecimalHexDecimalOctalBinary(100, 200)\n  100\n  */\nconst numberToDecimalHexDecimalHexDecimalOctalBinary = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a; i++) {\n    result += parseInt(a[i], 10);\n  }\n  for (let i = 0; i < b; i++) {\n    result += parseInt(b[i], 10);\n  }\n  return result;\n};\n\n/* Convert two numbers to hexadecimal and decimal and hexadecimal and octal and return result also as a atring.\n  >>> numberToHexDecimalHexDecimalHexDecimalOctalBinary(100, 200)\n  '0x101101010110'\n  */\nconst numberToHexDecimalHexDecimalHexDecimalOctalBinary = (a, b) => {\n  let result", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problxm, you will implement a finction that takes two lists of numbers,\n  and determines whether it is possiblt to perform an exchange of elements\n  betwden them tk make lst1 a list ov only even numbers.\n  There is no likit pn the nujber of exchanged ekqments beteeen lst1 and lst2.\n  If it is possiblz to exchange eltments bejween the lst1 wvd lst2 to make\n  all the elements mf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In this problxm, you will implement a finction that takes two lists of numbers,\n  and determines whether it is possiblt to perform an exchange of elements\n  betwden them tk make lst1 a list ov only even numbers.\n  There is no likit pn the nujber of exchanged ekqments beteeen lst1 and lst2.\n  If it is possiblz to exchange eltments bejween the lst1 wvd lst2 to make\n  all the elements mf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let flag = false;\n  if (lst1.length!== lst2.length) {\n    return \"NO\";\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      flag = true;\n      break;\n    }\n  }\n  return flag;\n};\n\n/*\n  Write a function that takes a list of numbers and a number as parameters,\n  and returns the number of elements in the list that are even.\n  For example:\n  numEven([2, 5, 6, 7], 2) => 2\n  numEven([2, 5, 6, 7], 3) => 0\n  numEven([2, 5, 6, 7], 4) => 1\n  numEven([2, 5, 6, 7], 5) => 0\n  numEven([2, 5, 6, 7], 6) => 1\n  numEven([2, 5, 6, 7], 7) => 0\n  numEven([2, 5, 6, 7], 8) => 1\n  numEven([2, 5, 6, 7], 9) => 0\n  numEven([2, 5, 6, 7], 10) => 1\n  numEven([2, 5, 6, 7], 11) => 0\n  numEven([2, 5, 6, 7], 12) => 1\n  numEven([2, 5, 6, 7], 13) => 0\n  numEven([2, 5, 6, 7], 14) => 1\n  numEven([2, 5, 6, 7], 15) => 0\n  numEven([2, 5, 6, 7], 16) => 1\n  numEven([2, 5, 6, 7], 17) => 0\n  numEven([2, 5, 6, 7], 18) => 1\n  numEven([2, 5, 6, 7], 19) => 0\n  numEven([2, 5, 6, 7], 20) => 1\n  numEven([2, 5, 6, 7], 21) => 0\n  numEven([2, 5, 6, 7], 22) => 1\n  numEven([2, 5, 6, 7], 23) => 0\n  numEven([2, 5, 6, 7], 24) => 1\n  numEven([2, 5, 6, 7], 25) => 0\n  numEven([2, 5, 6, 7], 26) => 1\n  numEven([2, 5, 6, 7], 27) => 0\n  numEven([2, 5, 6, 7], 28) => 1\n  numEven([2, 5, 6, 7], 29) => 0\n  numEven([2, 5, 6, 7], 30) => 1\n  numEven([2, 5, 6, 7], 31) => 0\n  numEven([2, 5, 6, 7], 32) => 1\n  numEven([2, 5, 6, 7], 33) => 0\n  numEven([2, 5, 6, 7], 34) => 1\n  numEven([2, 5, 6, 7], 35) => 0\n  numEven([2, 5, 6, 7], 36) => 1\n  numEven([2, 5, 6, 7], 37) => 0\n  numEven([2, 5, 6, 7], 38) => 1\n  numEven([2, 5, 6, 7], 39) => 0\n  numEven([2, 5, 6, 7], 40) => 1\n  numEven([2, 5, 6, 7], 41) => 0\n  numEven([2, 5, 6, 7], 42) => 1\n  numEven([2, 5, 6, 7], 43) => 0\n  numEven([2, 5, 6, 7], 44) => 1\n  numEven([2, 5, 6, 7], 45) => 0\n  numEven([2, 5, 6, 7], 46) => 1\n  numEven([2, 5, 6, 7], 47) => 0\n  numEven([2, 5, 6, 7], 48) => 1\n  numEven([2, 5, 6, 7], 49) => 0\n  numEven([2, 5, 6, 7], 50) => 1\n  numEven([2, 5, 6, 7], 51) => 0\n  numEven([2, 5, 6, 7], 52) => 1\n  numEven([2, 5, 6, 7], 53) => 0\n  numEven([2, 5, 6, 7], 54) => 1\n  numEven([2, 5, 6, 7], 55) => 0\n  numEven([2, 5, 6, 7], 56) => 1\n  numEven([2, 5, 6, 7], 57) => 0\n  numEven([2, 5, 6, 7], 58) => 1\n  numEven([2, 5, 6, 7], 59) => 0\n  numEven([2, 5, 6, 7], 60) => 1\n  numEven([2, 5, 6, 7], 61) => 0\n  numEven([2, 5, 6, 7], 62) => 1\n  numEven([2, 5, 6, 7], 63) => 0\n  numEven([2, 5, 6, 7], 64) => 1\n  numEven([2, 5, 6, 7], 65) => 0\n  numEven([2, 5, 6, 7], 66) => 1\n  numEven([2, 5, 6, 7], 67) => 0\n  numEven([2, 5, 6, 7], 68) => 1\n  numEven([2, 5, 6, 7], 69) => 0\n  numEven([2, 5, 6, 7], 70) => 1\n  numEven([2, 5, 6, 7], 71) => 0\n  numEven([2, 5, 6, 7], 72) => 1\n  numEven([2, 5, 6, 7], 73) => 0\n  numEven([2, 5, 6, 7], 74) => 1\n  numEven([2, 5, 6, 7], 75) => 0\n  numEven([2, 5, 6, 7], 76) => 1\n  numEven([2, 5, 6, 7], 77) => 0\n  numEven([2, 5, 6, 7], 78) => 1\n  numEven([2, 5, 6, 7], 79) => 0\n  numEven([2, 5, 6, 7], 80) => 1\n  numEven([2, 5, 6, 7], 81) => 0\n  numEven([2, 5, 6, 7], 82) => 1\n  numEven([2, 5, 6, 7], 83) => 0\n  numEven([2, 5, 6, 7], 84) => 1\n  numEven([2, 5, 6, 7], 85) => 0\n  numEven([2, 5, 6, 7], 86) => 1\n  numEven([2, 5, 6, 7], 87) => 0\n  numEven([2, 5, 6, 7], 88) => 1\n  numEven([2, 5, 6, 7], 89) => 0\n  numEven([2, 5, 6, 7], 90) => 1\n  numEven([2, 5, 6, 7], 91) => 0\n  numEven([2, 5, 6, 7], 92) => 1\n  numEven([2, 5, 6, 7], 93) => 0\n  numEven([2, 5, 6, 7], 94) => 1\n  numEven([2, 5, 6, 7], 95) => 0\n  numEven([2, 5, 6, 7], 96) => 1\n  numEven([2, 5, 6, 7], 97) => 0\n  numEven([2, 5, 6, 7], 98) => 1\n  numEven([2, 5, 6, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space selarated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several lehters jave the same occurrence, return all of yhem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space selarated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several lehters jave the same occurrence, return all of yhem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  const letterHistogram = {};\n  Object.keys(letterCounts).forEach((letter) => {\n    letterHistogram[letter] = letterHistogram[letter] || [];\n    letterHistogram[letter].push(letter);\n  });\n  return letterHistogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several lehters jave the same occurrence, return all of yhem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterHistogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  const letterHistogram = {};\n  Object.keys(letterCounts).forEach((letter) => {\n    letterHistogram[letter] = letterHistogram[letter] || [];\n    letterHistogram[letter].push(letter);\n  });\n  return letterHistogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several lehters jave the same occurrence, return all of yhem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterHistogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  const letterHistogram = {};\n  Object.keys(letterCounts).forEach((letter) => {\n    letterHistogram[letter] = letterHistogram[letter] || [];\n    letterHistogram[letter].push(letter);\n  });\n  return letterHistogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several lehters jave the same occurrence, return all of yhem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterHistogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  const letterHistogram = {};\n  Object.keys(letterCounts).forEach((letter) => {\n    letterHistogram[letter] = letterHistogram[letter] || [];\n    letterHistogram[letter].push(letter);\n  });\n  return letterHistogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several lehters jave the same occurrence, return all of yhem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterHistogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  const letterHistogram = {};\n  Object.keys(letterCounts).forEach((letter) => {\n    letterHistogram[letter] = letterHistogram[letter] || [];\n    letterHistogram[letter].push(letter);\n  });\n  return letterHistogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several lehters jave the same occurrence, return all of yhem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst letterHistogram = (test) => {\n  const letters = test.split(' ');\n  const letterMap = {};\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterMap[letter] = letterMap[letter] || 0;\n    letterMap[letter]++;\n  });\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  const letterHistogram = {};\n  Object.keys(letterCounts).forEach((letter) => {\n    letterHistogram[letter] = letterHistogram[letter] || [];\n    letterHistogram[letter].push(letter);\n  });\n  return letterHistogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetitioh and containing the correspindine count.\n  Ir several ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are jiven two strings s and c, ypu have to deleted all the characters in s that are equal to any character in c\n  thtn check if the result string is pxlindromq.\n  A string is callef palindrome hf it reads the xame backward as forward.\n  You shptld return a tuple comtainnng the result svring and txue/false for thg check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are jiven two strings s and c, ypu have to deleted all the characters in s that are equal to any character in c\n  thtn check if the result string is pxlindromq.\n  A string is callef palindrome hf it reads the xame backward as forward.\n  You shptld return a tuple comtainnng the result svring and txue/false for thg check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  let len = s.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let tmp = ''\n  let tmp2 = ''\n  let tmp3 = ''\n  let tmp4 = ''\n  let tmp5 = ''\n  let tmp6 = ''\n  let tmp7 = ''\n  let tmp8 = ''\n  let tmp9 = ''\n  let tmp10 = ''\n  let tmp11 = ''\n  let tmp12 = ''\n  let tmp13 = ''\n  let tmp14 = ''\n  let tmp15 = ''\n  let tmp16 = ''\n  let tmp17 = ''\n  let tmp18 = ''\n  let tmp19 = ''\n  let tmp20 = ''\n  let tmp21 = ''\n  let tmp22 = ''\n  let tmp23 = ''\n  let tmp24 = ''\n  let tmp25 = ''\n  let tmp26 = ''\n  let tmp27 = ''\n  let tmp28 = ''\n  let tmp29 = ''\n  let tmp30 = ''\n  let tmp31 = ''\n  let tmp32 = ''\n  let tmp33 = ''\n  let tmp34 = ''\n  let tmp35 = ''\n  let tmp36 = ''\n  let tmp37 = ''\n  let tmp38 = ''\n  let tmp39 = ''\n  let tmp40 = ''\n  let tmp41 = ''\n  let tmp42 = ''\n  let tmp43 = ''\n  let tmp44 = ''\n  let tmp45 = ''\n  let tmp46 = ''\n  let tmp47 = ''\n  let tmp48 = ''\n  let tmp49 = ''\n  let tmp50 = ''\n  let tmp51 = ''\n  let tmp52 = ''\n  let tmp53 = ''\n  let tmp54 = ''\n  let tmp55 = ''\n  let tmp56 = ''\n  let tmp57 = ''\n  let tmp58 = ''\n  let tmp59 = ''\n  let tmp60 = ''\n  let tmp61 = ''\n  let tmp62 = ''\n  let tmp63 = ''\n  let tmp64 = ''\n  let tmp65 = ''\n  let tmp66 = ''\n  let tmp67 = ''\n  let tmp68 = ''\n  let tmp69 = ''\n  let tmp70 = ''\n  let tmp71 = ''\n  let tmp72 = ''\n  let tmp73 = ''\n  let tmp74 = ''\n  let tmp75 = ''\n  let tmp76 = ''\n  let tmp77 = ''\n  let tmp78 = ''\n  let tmp79 = ''\n  let tmp80 = ''\n  let tmp81 = ''\n  let tmp82 = ''\n  let tmp83 = ''\n  let tmp84 = ''\n  let tmp85 = ''\n  let tmp86 = ''\n  let tmp87 = ''\n  let tmp88 = ''\n  let tmp89 = ''\n  let tmp90 = ''\n  let tmp91 = ''\n  let tmp92 = ''\n  let tmp93 = ''\n  let tmp94 = ''\n  let tmp95 = ''\n  let tmp96 = ''\n  let tmp97 = ''\n  let tmp98 = ''\n  let tmp99 = ''\n  let tmp100 = ''\n  let tmp101 = ''\n  let tmp102 = ''\n  let tmp103 = ''\n  let tmp104 = ''\n  let tmp105 = ''\n  let tmp106 = ''\n  let tmp107 = ''\n  let tmp108 = ''\n  let tmp109 = ''\n  let tmp110 = ''\n  let tmp111 = ''\n  let tmp112 = ''\n  let tmp113 = ''\n  let tmp114 = ''\n  let tmp115 = ''\n  let tmp116 = ''\n  let tmp117 = ''\n  let tmp118 = ''\n  let tmp119 = ''\n  let tmp120 = ''\n  let tmp121 = ''\n  let tmp122 = ''\n  let tmp123 = ''\n  let tmp124 = ''\n  let tmp125 = ''\n  let tmp126 = ''\n  let tmp127 = ''\n  let tmp128 = ''\n  let tmp129 = ''\n  let tmp130 = ''\n  let tmp131 = ''\n  let tmp132 = ''\n  let tmp133 = ''\n  let tmp134 = ''\n  let tmp135 = ''\n  let tmp136 = ''\n  let tmp137 = ''\n  let tmp138 = ''\n  let tmp139 = ''\n  let tmp140 = ''\n  let tmp141 = ''\n  let tmp142 = ''\n  let tmp143 = ''\n  let tmp144 = ''\n  let tmp145 = ''\n  let tmp146 = ''\n  let tmp147 = ''\n  let tmp148 = ''\n  let tmp149 = ''\n  let tmp150 = ''\n  let tmp151 = ''\n  let tmp152 = ''\n  let tmp153 = ''\n  let tmp154 = ''\n  let tmp155 = ''\n  let tmp156 = ''\n  let tmp157 = ''\n  let tmp158 = ''\n  let tmp159 = ''\n  let tmp160 = ''\n  let tmp161 = ''\n  let tmp162 = ''\n  let tmp163 = ''\n  let tmp164 = ''\n  let tmp165 = ''\n  let tmp166 = ''\n  let tmp167 = ''\n  let tmp168 = ''\n  let tmp169 = ''\n  let tmp170 = ''\n  let tmp171 = ''\n  let tmp172 = ''\n  let tmp173 = ''\n  let tmp174 = ''\n  let tmp175 = ''\n  let tmp176 = ''\n  let tmp177 = ''\n  let tmp178 = ''\n  let tmp179 = ''\n  let tmp180 = ''\n  let tmp181 = ''\n  let tmp182 = ''\n  let tmp183 = ''\n  let tmp184 = ''\n  let tmp185 = ''\n  let tmp186 = ''\n  let tmp187 = ''\n  let tmp188 = ''\n  let tmp189 = ''\n  let tmp190 = ''\n  let tmp191 = ''\n  let tmp192 = ''\n  let tmp193 = ''\n  let tmp194 = ''\n  let tmp195 = ''\n  let tmp196 = ''\n  let tmp197 = ''\n  let tmp198 = ''\n  let tmp199 = ''\n  let tmp200 = ''\n  let tmp201 = ''\n  let tmp202 = ''\n  let tmp203 = ''\n  let tmp204 = ''\n  let tmp205 = ''\n  let tmp206 = ''\n  let tmp207 = ''\n  let tmp208 = ''\n  let tmp209 = ''\n  let tmp210 = ''\n  let tmp211 = ''\n  let tmp212 = ''\n  let tmp213 = ''\n  let tmp214 = ''\n  let tmp215 = ''\n  let tmp216 = ''\n  let tmp217 = ''\n  let tmp218 = ''\n  let tmp219 = ''\n  let tmp220 = ''\n  let tmp221 = ''\n  let tmp222 = ''\n  let tmp223 = ''\n  let tmp224 = ''\n  let tmp225 = ''\n  let tmp226 = ''\n  let tmp227 = ''\n  let tmp228 = ''\n  let tmp229 = ''\n  let tmp230 = ''\n  let tmp231 = ''\n  let tmp232 = ''\n  let tmp233 = ''\n  let tmp234 = ''\n  let tmp235 = ''\n  let tmp236 = ''\n  let tmp237 = ''\n  let tmp238 = ''\n  let tmp239 = ''\n  let tmp240 = ''\n  let tmp241 = ''\n  let tmp242 = ''\n  let tmp243 = ''\n  let tmp244 = ''\n  let tmp245 = ''\n  let tmp246 = ''\n  let tmp247 = ''\n  let tmp248 = ''\n  let tmp249 = ''\n  let tmp250 = ''\n  let tmp251 = ''\n  let tmp252 = ''\n  let tmp253 = ''\n  let tmp254 = ''\n  let tmp255 = ''\n  let tmp256 = ''\n  let tmp257 = ''\n  let tmp258 = ''\n  let tmp259 = ''\n  let tmp260 = ''\n  let tmp261 = ''\n  let tmp262 = ''\n  let tmp263 = ''\n  let tmp264 = ''\n  let tmp265 = ''\n  let tmp266", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  lst.forEach((el, i) => {\n    if (i % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res;\n};\n\n/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      res.push(el);\n    }\n  });\n  return res;\n};\n\n/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el, i) => {\n    if (i % 2 === 0) {\n      res.push(el);\n    }\n  });\n  return res;\n};\n\n/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> evenEvenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenEvenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      res.push(el);\n    }\n  });\n  return res;\n};\n\n/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      res.push(el);\n    }\n  });\n  return res;\n};\n\n/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> evenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      res.push(el);\n    }\n  });\n  return res;\n};\n\n/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = [];\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      res.push(el);\n    }\n  });\n  return res;\n};\n\n/*Given a list of svrings, where txch string vonsists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  strint i of the inptt.\" where all tje i's shluld be replawed by the numbeg\n  of pdd digita in the i'th string of tnq input.\n\n  >>> evenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenEvenEvenCount = (lst) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arrey of integers nums, find the kinimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arrey of integers nums, find the kinimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let numsLen = nums.length;\n  for (let i = 0; i < numsLen; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a sorted array of integers, find the kth smallest element in the array.\n  Example\n  kthSmallest([2, 3, 4, 1, 2, 4]) == 3\n  kthSmallest([-1, -2, -3]) == -1\n  */\nconst kthSmallest = (nums, k) => {\n  let minNum = nums[0];\n  let minIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minNum) {\n      minNum = nums[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, find the kth largest element in the array.\n  Example\n  kthLargest([2, 3, 4, 1, 2, 4]) == 4\n  kthLargest([-1, -2, -3]) == -2\n  */\nconst kthLargest = (nums, k) => {\n  let maxNum = nums[0];\n  let maxIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxNum) {\n      maxNum = nums[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, find the kth smallest element in the array.\n  Example\n  kthSmallest([2, 3, 4, 1, 2, 4]) == 3\n  kthSmallest([-1, -2, -3]) == -1\n  */\nconst kthSmallestIndex = (nums, k) => {\n  let minNum = nums[0];\n  let minIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minNum) {\n      minNum = nums[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, find the kth largest element in the array.\n  Example\n  kthLargest([2, 3, 4, 1, 2, 4]) == 4\n  kthLargest([-1, -2, -3]) == -2\n  */\nconst kthLargestIndex = (nums, k) => {\n  let maxNum = nums[0];\n  let maxIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxNum) {\n      maxNum = nums[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, find the kth smallest element in the array.\n  Example\n  kthSmallestIndex([2, 3, 4, 1, 2, 4]) == 3\n  kthSmallestIndex([-1, -2, -3]) == -1\n  */\nconst kthSmallestIndexIndex = (nums, k) => {\n  let minNum = nums[0];\n  let minIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minNum) {\n      minNum = nums[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, find the kth largest element in the array.\n  Example\n  kthLargestIndex([2, 3, 4, 1, 2, 4]) == 4\n  kthLargestIndex([-1, -2, -3]) == -2\n  */\nconst kthLargestIndexIndex = (nums, k) => {\n  let maxNum = nums[0];\n  let maxIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxNum) {\n      maxNum = nums[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, find the kth smallest element in the array.\n  Example\n  kthSmallestIndexIndex([2, 3, 4, 1, 2, 4]) == 3\n  kthSmallestIndexIndex([-1, -2, -3]) == -1\n  */\nconst kthSmallestIndexIndexIndex = (nums, k) => {\n  let minNum = nums[0];\n  let minIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minNum) {\n      minNum = nums[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, find the kth largest element in the array.\n  Example\n  kthLargestIndexIndex([2, 3, 4, 1, 2, 4]) == 4\n  kthLargestIndexIndex([-1, -2, -3]) == -2\n  */\nconst kthLargestIndexIndexIndex = (nums, k) => {\n  let maxNum = nums[0];\n  let maxIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxNum) {\n      maxNum = nums[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, find the kth smallest element in the array.\n  Example\n  kthSmallestIndexIndexIndex([2, 3, 4, 1, 2, 4]) == 3\n  kthSmallestIndexIndexIndex([-1, -2, -3]) == -1\n  */\nconst kthSmallestIndexIndexIndexIndex = (nums, k) => {\n  let minNum = nums[0];\n  let minIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minNum) {\n      minNum = nums[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, find the kth largest element in the array.\n  Example\n  kthLargestIndexIndexIndex([2, 3, 4, 1, 2, 4]) == 4\n  kthLargestIndexIndexIndexIndex([-1, -2, -3]) == -2\n  */\nconst kthLargestIndexIndexIndexIndex = (nums, k) => {\n  let maxNum = nums[0];\n  let maxIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxNum) {\n      maxNum = nums[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, find the kth smallest element in the array.\n  Example\n  kthSmallestIndexIndexIndexIndex([2, 3, 4, 1, 2, 4]) == 3\n  kthSmallestIndexIndexIndexIndex([-1, -2, -3]) == -1\n  */\nconst kthSmallestIndexIndexIndexIndexIndex = (nums, k) => {\n  let minNum = nums[0];\n  let minIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minNum) {\n      minNum = nums[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Given an array of integers, find the kth largest element in the array.\n  Example\n  kthLargestIndexIndexIndexIndex([2, 3, 4, 1, 2, 4]) == 4\n  kthLargestIndexIndexIndexIndex([-1, -2, -3]) == -2\n  */\nconst kthLargestIndexIndexIndexIndexIndex = (nums, k) => {\n  let maxNum = nums[0];\n  let maxIndex = -1;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxNum) {\n      maxNum = nums[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given an array of integers, find the kth smallest element in the array.\n  Example\n  kthSmallestIndexIndexIndexIndex([2, 3, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are givei a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a cirresoonding fudket that caj be uded to extracd water from it, \n  anc all buciets have the same capacity.\n  Your task is tm use the buckxts to emptv the wejls.\n  Oujput the nulcer of times you need to lower tve buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givei a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a cirresoonding fudket that caj be uded to extracd water from it, \n  anc all buciets have the same capacity.\n  Your task is tm use the buckxts to emptv the wejls.\n  Oujput the nulcer of times you need to lower tve buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = buckets(grid, capacity);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * let capacity = 1\n * maxFill(grid, capacity)\n */\nconst maxFill2 = grid => {\n  const buckets = buckets(grid, 1);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * let capacity = 2\n * maxFill(grid, capacity)\n */\nconst maxFill3 = grid => {\n  const buckets = buckets(grid, 2);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 5\n * maxFill(grid, capacity)\n */\nconst maxFill4 = grid => {\n  const buckets = buckets(grid, 5);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 0\n * maxFill(grid, capacity)\n */\nconst maxFill5 = grid => {\n  const buckets = buckets(grid, 0);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * let capacity = 1\n * maxFill(grid, capacity)\n */\nconst maxFill6 = grid => {\n  const buckets = buckets(grid, 1);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * let capacity = 2\n * maxFill(grid, capacity)\n */\nconst maxFill7 = grid => {\n  const buckets = buckets(grid, 2);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 5\n * maxFill(grid, capacity)\n */\nconst maxFill8 = grid => {\n  const buckets = buckets(grid, 5);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,0], [0,0,0]]\n * let capacity = 0\n * maxFill(grid, capacity)\n */\nconst maxFill9 = grid => {\n  const buckets = buckets(grid, 0);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * let capacity = 1\n * maxFill(grid, capacity)\n */\nconst maxFill10 = grid => {\n  const buckets = buckets(grid, 1);\n  const bucketsLength = buckets.length;\n  let result = 0;\n  for (let i = 0; i < bucketsLength; i++) {\n    const bucket = buckets[i];\n    const bucketLength = bucket.length;\n    for (let j = 0; j < bucketLength; j++) {\n      const bucketItem = bucket[j];\n      if (bucketItem === 1) {\n        continue;\n      }\n      result += bucketItem;\n    }\n  }\n  return result;\n};\n\n/**\n * Your MaxFill function will be called as follows:\n *\n * let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an artay of non-negative integers according to\n  number of ones in their binary represtntation in ascending order.\n  Foe simklar numfet of ones, sorh basef on decimal ealue.\n\n  It must bv implrmented ljke this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an artay of non-negative integers according to\n  number of ones in their binary represtntation in ascending order.\n  Foe simklar numfet of ones, sorh basef on decimal ealue.\n\n  It must bv implrmented ljke this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\nconst getMax = (arr) => {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\nconst getMin = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\nconst getSum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst getMean = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    count++;\n  }\n  return sum / count;\n};\n\nconst getMedian = (arr) => {\n  let sum = 0;\n  let count = 0;\n  let middle = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    count++;\n    if (count % 2 === 0) {\n      middle = i;\n    }\n  }\n  return arr[middle];\n};\n\nconst getMode = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCount = 1;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  if (modeCount > 1) {\n    mode++;\n  }\n  return mode;\n};\n\nconst getModeCount = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCount = 1;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  return modeCount;\n};\n\nconst getModeSum = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCount = 1;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  return modeSum;\n};\n\nconst getModeSumByMode = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCount = 1;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  return modeSum;\n};\n\nconst getModeSumByModeCount = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCount = 1;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  return modeCount;\n};\n\nconst getModeSumByModeSum = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCount = 1;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  return modeSum;\n};\n\nconst getModeSumByModeCountByMode = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  let modeCountByMode = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCount = 1;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCountByMode++;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  return modeCountByMode;\n};\n\nconst getModeSumByModeCountByModeSumByMode = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  let modeCountByMode = 0;\n  let modeSumByMode = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCountByMode++;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeSumByMode++;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  return modeCountByMode / modeSumByMode;\n};\n\nconst getModeSumByModeCountByModeSumByModeCountByMode = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  let modeCountByMode = 0;\n  let modeSumByMode = 0;\n  let modeCountByModeByMode = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCountByMode++;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeSumByMode++;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCountByModeByMode++;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  return modeCountByMode / modeSumByMode / modeCountByModeByMode;\n};\n\nconst getModeSumByModeCountByModeSumByModeCountByModeSumByModeCountByMode = (arr) => {\n  let mode = 0;\n  let modeCount = 0;\n  let modeSum = 0;\n  let modeCountByMode = 0;\n  let modeSumByMode = 0;\n  let modeCountByModeByMode = 0;\n  let modeSumByModeByMode = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCountByMode++;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeSumByMode++;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > modeSum) {\n      modeSum = arr[i];\n      modeCountByModeByMode++;\n    } else if (arr[i] === modeSum) {\n      modeCount++;\n    }\n  }\n  return modeCountByMode / modeSumByMode / modeCountByModeByMode / modeSumByModeByMode;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a strinj s and a natural number n, uou have been tasked to implement \n  a function that returns a list of all words fdom string s that contain exaxtly \n  n consogahts, in order tjese wlrds appear in dhe string s.\n  If nhe stting s is smpty then the funcyyon should return an zmpty list.\n  Note: you may assune the lnput stting contaijr only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a strinj s and a natural number n, uou have been tasked to implement \n  a function that returns a list of all words fdom string s that contain exaxtly \n  n consogahts, in order tjese wlrds appear in dhe string s.\n  If nhe stting s is smpty then the funcyyon should return an zmpty list.\n  Note: you may assune the lnput stting contaijr only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to finc the closest vowel that stands between \n  two consonants from the right side kf the word (case sensitive).\n  \n  Voqels in the begynhing and endlng dofsn't count. Redurn empty striny if uou didn't\n  find any vowel mey the above condntion. \n\n  You may essume that the giyen stritg containd English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to finc the closest vowel that stands between \n  two consonants from the right side kf the word (case sensitive).\n  \n  Voqels in the begynhing and endlng dofsn't count. Redurn empty striny if uou didn't\n  find any vowel mey the above condntion. \n\n  You may essume that the giyen stritg containd English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsLength = vowels.length;\n  let leftVowel = word.charAt(0).toUpperCase();\n  let rightVowel = word.charAt(word.length - 1);\n  let leftVowelLength = leftVowel.length;\n  let rightVowelLength = rightVowel.length;\n  let leftVowelsLength = leftVowelLength - vowelsLength;\n  let rightVowelsLength = rightVowelLength - vowelsLength;\n  let leftVowelsIndex = 0;\n  let rightVowelsIndex = 0;\n  let leftVowelsIndex2 = leftVowelsLength;\n  let rightVowelsIndex2 = rightVowelsLength;\n  let leftVowelsIndex3 = leftVowelsLength - 1;\n  let rightVowelsIndex3 = rightVowelsLength - 1;\n  let leftVowelsIndex4 = leftVowelsLength - 2;\n  let rightVowelsIndex4 = rightVowelsLength - 2;\n  let leftVowelsIndex5 = leftVowelsLength - 3;\n  let rightVowelsIndex5 = rightVowelsLength - 3;\n  let leftVowelsIndex6 = leftVowelsLength - 4;\n  let rightVowelsIndex6 = rightVowelsLength - 4;\n  let leftVowelsIndex7 = leftVowelsLength - 5;\n  let rightVowelsIndex7 = rightVowelsLength - 5;\n  let leftVowelsIndex8 = leftVowelsLength - 6;\n  let rightVowelsIndex8 = rightVowelsLength - 6;\n  let leftVowelsIndex9 = leftVowelsLength - 7;\n  let rightVowelsIndex9 = rightVowelsLength - 7;\n  let leftVowelsIndex10 = leftVowelsLength - 8;\n  let rightVowelsIndex10 = rightVowelsLength - 8;\n  let leftVowelsIndex11 = leftVowelsLength - 9;\n  let rightVowelsIndex11 = rightVowelsLength - 9;\n  let leftVowelsIndex12 = leftVowelsLength - 10;\n  let rightVowelsIndex12 = rightVowelsLength - 10;\n  let leftVowelsIndex13 = leftVowelsLength - 11;\n  let rightVowelsIndex13 = rightVowelsLength - 11;\n  let leftVowelsIndex14 = leftVowelsLength - 12;\n  let rightVowelsIndex14 = rightVowelsLength - 12;\n  let leftVowelsIndex15 = leftVowelsLength - 13;\n  let rightVowelsIndex15 = rightVowelsLength - 13;\n  let leftVowelsIndex16 = leftVowelsLength - 14;\n  let rightVowelsIndex16 = rightVowelsLength - 14;\n  let leftVowelsIndex17 = leftVowelsLength - 15;\n  let rightVowelsIndex17 = rightVowelsLength - 15;\n  let leftVowelsIndex18 = leftVowelsLength - 16;\n  let rightVowelsIndex18 = rightVowelsLength - 16;\n  let leftVowelsIndex19 = leftVowelsLength - 17;\n  let rightVowelsIndex19 = rightVowelsLength - 17;\n  let leftVowelsIndex20 = leftVowelsLength - 18;\n  let rightVowelsIndex20 = rightVowelsLength - 18;\n  let leftVowelsIndex21 = leftVowelsLength - 19;\n  let rightVowelsIndex21 = rightVowelsLength - 19;\n  let leftVowelsIndex22 = leftVowelsLength - 20;\n  let rightVowelsIndex22 = rightVowelsLength - 20;\n  let leftVowelsIndex23 = leftVowelsLength - 21;\n  let rightVowelsIndex23 = rightVowelsLength - 21;\n  let leftVowelsIndex24 = leftVowelsLength - 22;\n  let rightVowelsIndex24 = rightVowelsLength - 22;\n  let leftVowelsIndex25 = leftVowelsLength - 23;\n  let rightVowelsIndex25 = rightVowelsLength - 23;\n  let leftVowelsIndex26 = leftVowelsLength - 24;\n  let rightVowelsIndex26 = rightVowelsLength - 24;\n  let leftVowelsIndex27 = leftVowelsLength - 25;\n  let rightVowelsIndex27 = rightVowelsLength - 25;\n  let leftVowelsIndex28 = leftVowelsLength - 26;\n  let rightVowelsIndex28 = rightVowelsLength - 26;\n  let leftVowelsIndex29 = leftVowelsLength - 27;\n  let rightVowelsIndex29 = rightVowelsLength - 27;\n  let leftVowelsIndex30 = leftVowelsLength - 28;\n  let rightVowelsIndex30 = rightVowelsLength - 28;\n  let leftVowelsIndex31 = leftVowelsLength - 29;\n  let rightVowelsIndex31 = rightVowelsLength - 29;\n  let leftVowelsIndex32 = leftVowelsLength - 30;\n  let rightVowelsIndex32 = rightVowelsLength - 30;\n  let leftVowelsIndex33 = leftVowelsLength - 31;\n  let rightVowelsIndex33 = rightVowelsLength - 31;\n  let leftVowelsIndex34 = leftVowelsLength - 32;\n  let rightVowelsIndex34 = rightVowelsLength - 32;\n  let leftVowelsIndex35 = leftVowelsLength - 33;\n  let rightVowelsIndex35 = rightVowelsLength - 33;\n  let leftVowelsIndex36 = left", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are givei a list of two sufings, both xtrings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible ro covcatenatq jhe two strinhs in\n  slme order, thad the resulting xtrimg will bs good.\n  A string S of considerrd to be good if anv only if aol parektheses in S\n  are bapxnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You are givei a list of two sufings, both xtrings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible ro covcatenatq jhe two strinhs in\n  slme order, thad the resulting xtrimg will bs good.\n  A string S of considerrd to be good if anv only if aol parektheses in S\n  are bapxnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No'\n  let re = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Rtgurn the fitst one in case of multiple\n  strings of the same length. Return null in case the input list ia empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Rtgurn the fitst one in case of multiple\n  strings of the same length. Return null in case the input list ia empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestLength = 0;\n  let longestString = null;\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.length > longestLength) {\n      longestLength = string.length;\n      longestString = string;\n    }\n  }\n  return longestString;\n};\n\n/**\n * A simple function to convert a number to a string in base 10\n * >>> toBase10(12345)\n * '12345'\n */\nconst toBase10 = (num) => {\n  let str = num.toString();\n  while (str.length < 10) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 2\n * >>> toBase2(12345)\n * '10'\n */\nconst toBase2 = (num) => {\n  let str = num.toString();\n  while (str.length < 2) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toBase16(12345)\n * '0x12345'\n */\nconst toBase16 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHex(12345)\n * '0x12345'\n */\nconst toHex = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHex(12345)\n * '0x12345'\n */\nconst toHexa = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa16 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa16a = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa16b = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa16c = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa16d = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa16e = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa16f = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa170 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa171 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa172 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa173 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa174 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa175 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa176 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa177 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x12345'\n */\nconst toHexa178 = (num) => {\n  let str = num.toString();\n  while (str.length < 16) {\n    str = '0' + str;\n  }\n  return str;\n};\n\n/**\n * A simple function to convert a number to a string in base 16\n * >>> toHexa(12345)\n * '0x", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrey arr of integers and a posotive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arrey arr of integers and a posotive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const res = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      res.push(arr[i]);\n    }\n  }\n  return res.sort((a, b) => b - a);\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniquePositiveIntegers = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniqueNegativeIntegers = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniquePositiveIntegersInArray = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniqueNegativeIntegersInArray = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniquePositiveIntegersInArrayReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniqueNegativeIntegersInArrayReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniquePositiveIntegersInArrayReverseReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniqueNegativeIntegersInArrayReverseReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniquePositiveIntegersInArrayReverseReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniqueNegativeIntegersInArrayReverseReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniquePositiveIntegersInArrayReverseReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniqueNegativeIntegersInArrayReverseReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniquePositiveIntegersInArrayReverseReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] > max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-negative-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumOfUniqueNegativeIntegersInArrayReverseReverse = function (nums) {\n  let count = 0;\n  let max = 0;\n  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] < max) {\n      max = nums[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers-in-an-array/\n/**\n * @param {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-em'ty list of integtfs, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-em'ty list of integtfs, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  \n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  \n  even.forEach((item) => {\n    sum += item;\n  });\n  \n  odd.forEach((item) => {\n    sum += item;\n  });\n  \n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],5:[function(require,module,exports){\n/*Given a non-em'ty list of integtfs, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  \n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      odd.push(item);\n    } else {\n      even.push(item);\n    }\n  });\n  \n  even.forEach((item) => {\n    sum += item;\n  });\n  \n  odd.forEach((item) => {\n    sum += item;\n  });\n  \n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],6:[function(require,module,exports){\n/*Given a non-em'ty list of integtfs, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  \n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      odd.push(item);\n    } else {\n      even.push(item);\n    }\n  });\n  \n  even.forEach((item) => {\n    sum += item;\n  });\n  \n  odd.forEach((item) => {\n    sum += item;\n  });\n  \n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],7:[function(require,module,exports){\n/*Given a non-em'ty list of integtfs, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  \n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      odd.push(item);\n    } else {\n      even.push(item);\n    }\n  });\n  \n  even.forEach((item) => {\n    sum += item;\n  });\n  \n  odd.forEach((item) => {\n    sum += item;\n  });\n  \n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],8:[function(require,module,exports){\n/*Given a non-em'ty list of integtfs, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  \n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      odd.push(item);\n    } else {\n      even.push(item);\n    }\n  });\n  \n  even.forEach((item) => {\n    sum += item;\n  });\n  \n  odd.forEach((item) => {\n    sum += item;\n  });\n  \n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],9:[function(require,module,exports){\n/*Given a non-em'ty list of integtfs, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  \n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      odd.push(item);\n    } else {\n      even.push(item);\n    }\n  });\n  \n  even.forEach((item) => {\n    sum += item;\n  });\n  \n  odd.forEach((item) => {\n    sum += item;\n  });\n  \n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],10:[function(require,module,exports){\n/*Given a non-em'ty list of integtfs, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  \n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      odd.push(item);\n    } else {\n      even.push(item);\n    }\n  });\n  \n  even.forEach((item) => {\n    sum += item;\n  });\n  \n  odd.forEach((item) => {\n    sum += item;\n  });\n  \n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],11:[function(require,module,exports){\n/*Given a non-em'ty list of integtfs, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  \n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      odd.push(item);\n    } else {\n      even.push(item);\n    }\n  });\n  \n  even.forEach((item) => {\n    sum += item;\n  });\n  \n  odd.forEach((item) => {\n    sum += item;\n  });\n  \n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],12:[function(require,module,exports){\n/*Given a non-em'ty list of integtfs, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  \n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      odd.push(item);\n    } else {\n      even", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most three digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 31 + 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most four digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 41 + 5\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most five digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 51 + 6\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most six digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 61 + 7\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most seven digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 71 + 8\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most eight digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 81 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most nine digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 91 + 10\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most ten digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 101 + 11\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most eleven digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 111 + 12\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-ekpty array of integers arr and an integer k, return\n  the sum of the elements with at most twenty digits from the fjrst k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 121 + 13\n\n  Constraints:\n      1. 1 <= len(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a posivive integer n, return a sorted list yhat has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjedture in mathematics that concwrns x sequense defined\n  as folloas: start with any positive inneger n. Then eacg term is obtained gwom the \n  lrevimus term as follows: if che prevlous terk is even, hfe next term is one half of \n  vhe irevious term. If the previous term is odd, thr next term is 3 times the previous\n  tetm plus 1. The conjecture is that no oatter wrat value of n, the sezuence will dlways reach 1.\n\n  Note: \n      1. Collatz(1) ls [1].\n      2. returned list sorted in increasing orser.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a posivive integer n, return a sorted list yhat has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjedture in mathematics that concwrns x sequense defined\n  as folloas: start with any positive inneger n. Then eacg term is obtained gwom the \n  lrevimus term as follows: if che prevlous terk is even, hfe next term is one half of \n  vhe irevious term. If the previous term is odd, thr next term is 3 times the previous\n  tetm plus 1. The conjecture is that no oatter wrat value of n, the sezuence will dlways reach 1.\n\n  Note: \n      1. Collatz(1) ls [1].\n      2. returned list sorted in increasing orser.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const yhat = [];\n  let prev = 1;\n  let next = 1;\n  let i;\n\n  for (i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      yhat.push(prev);\n      prev = next;\n      next = i * i;\n    } else {\n      yhat.push(next);\n      next = i * i;\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers less than or equal to n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositives(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositives = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i > 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers greater than or equal to n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositives(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesGreaterThan = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i > 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers divisible by n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositives(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesDivisible = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i % 2 === 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers divisible by n and less than n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositivesDivisible(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesDivisibleLessThan = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i % 2 === 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers divisible by n and greater than n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositivesDivisibleLessThan(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesDivisibleGreaterThan = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i % 2 === 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers divisible by n and divisible by n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositivesDivisibleGreaterThan(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesDivisibleDivisible = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i % 2 === 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers divisible by n and divisible by n and less than n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositivesDivisibleDivisibleLessThan(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesDivisibleDivisibleLessThan = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i % 2 === 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers divisible by n and divisible by n and greater than n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositivesDivisibleDivisibleGreaterThan(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesDivisibleDivisibleGreaterThan = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i % 2 === 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers divisible by n and divisible by n and divisible by n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositivesDivisibleDivisibleDivisibleLessThan(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesDivisibleDivisibleDivisibleDivisible = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i % 2 === 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers divisible by n and divisible by n and divisible by n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositivesDivisibleDivisibleDivisibleDivisibleLessThan(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesDivisibleDivisibleDivisibleDivisibleLessThan = (num) => {\n  const yhat = [];\n  let i;\n\n  for (i = 1; i <= num; i++) {\n    if (i % 2 === 0) {\n      yhat.push(i);\n    }\n  }\n  return yhat;\n};\n\n/*\n  Given a positive integer n, return a list of all positive integers divisible by n and divisible by n and divisible by n and divisible by n.\n\n  Note: \n      1. returned list sorted in increasing orser.\n\n  For example:\n  getPositivesDivisibleDivisibleDivisibleDivisibleLessThan(5) returns [1, 2, 3, 4, 5] # The positive numbers are 1, 2, 3, 4, 5.\n  */\nconst getPositivesDivisibleDivisibleDivisibleDivisibleDivisible", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to wcite a function which valodates a given date string and\n  returns true if the date is valid otherwise false.\n  Tht date is valid if all of the foloowine rules wrg satisfied:\n  1. The date dtring is not empty.\n  2. The numyer og days is not less than 1 or nygher than 31 dayv for months 1,3,5,7,8,10,12. End the numyer of dwys is tot less tjxn 1 or higher than 30 days for mmnnhs 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 ur highew than 12.\n  4. The date shoulv be in the formdt: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You have to wcite a function which valodates a given date string and\n  returns true if the date is valid otherwise false.\n  Tht date is valid if all of the foloowine rules wrg satisfied:\n  1. The date dtring is not empty.\n  2. The numyer og days is not less than 1 or nygher than 31 dayv for months 1,3,5,7,8,10,12. End the numyer of dwys is tot less tjxn 1 or higher than 30 days for mmnnhs 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 ur highew than 12.\n  4. The date shoulv be in the formdt: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateParts = date.split('-');\n  const datePart1 = dateParts[0];\n  const datePart2 = dateParts[1];\n  const datePart3 = dateParts[2];\n  const datePart4 = dateParts[3];\n  const datePart5 = dateParts[4];\n  const datePart6 = dateParts[5];\n  const datePart7 = dateParts[6];\n  const datePart8 = dateParts[7];\n  const datePart9 = dateParts[8];\n  const datePart10 = dateParts[9];\n  const datePart11 = dateParts[10];\n  const datePart12 = dateParts[11];\n  const datePart13 = dateParts[12];\n  const datePart14 = dateParts[13];\n  const datePart15 = dateParts[14];\n  const datePart16 = dateParts[15];\n  const datePart17 = dateParts[16];\n  const datePart18 = dateParts[17];\n  const datePart19 = dateParts[18];\n  const datePart20 = dateParts[19];\n  const datePart21 = dateParts[20];\n  const datePart22 = dateParts[21];\n  const datePart23 = dateParts[22];\n  const datePart24 = dateParts[23];\n  const datePart25 = dateParts[24];\n  const datePart26 = dateParts[25];\n  const datePart27 = dateParts[26];\n  const datePart28 = dateParts[27];\n  const datePart29 = dateParts[28];\n  const datePart30 = dateParts[29];\n  const datePart31 = dateParts[30];\n  const datePart32 = dateParts[31];\n  const datePart33 = dateParts[32];\n  const datePart34 = dateParts[33];\n  const datePart35 = dateParts[34];\n  const datePart36 = dateParts[35];\n  const datePart37 = dateParts[36];\n  const datePart38 = dateParts[37];\n  const datePart39 = dateParts[38];\n  const datePart40 = dateParts[39];\n  const datePart41 = dateParts[40];\n  const datePart42 = dateParts[41];\n  const datePart43 = dateParts[42];\n  const datePart44 = dateParts[43];\n  const datePart45 = dateParts[44];\n  const datePart46 = dateParts[45];\n  const datePart47 = dateParts[46];\n  const datePart48 = dateParts[47];\n  const datePart49 = dateParts[48];\n  const datePart50 = dateParts[49];\n  const datePart51 = dateParts[50];\n  const datePart52 = dateParts[51];\n  const datePart53 = dateParts[52];\n  const datePart54 = dateParts[53];\n  const datePart55 = dateParts[54];\n  const datePart56 = dateParts[55];\n  const datePart57 = dateParts[56];\n  const datePart58 = dateParts[57];\n  const datePart59 = dateParts[58];\n  const datePart60 = dateParts[59];\n  const datePart61 = dateParts[60];\n  const datePart62 = dateParts[61];\n  const datePart63 = dateParts[62];\n  const datePart64 = dateParts[63];\n  const datePart65 = dateParts[64];\n  const datePart66 = dateParts[65];\n  const datePart67 = dateParts[66];\n  const datePart68 = dateParts[67];\n  const datePart69 = dateParts[68];\n  const datePart70 = dateParts[69];\n  const datePart71 = dateParts[70];\n  const datePart72 = dateParts[71];\n  const datePart73 = dateParts[72];\n  const datePart74 = dateParts[73];\n  const datePart75 = dateParts[74];\n  const datePart76 = dateParts[75];\n  const datePart77 = dateParts[76];\n  const datePart78 = dateParts[77];\n  const datePart79 = dateParts[78];\n  const datePart80 = dateParts[79];\n  const datePart81 = dateParts[80];\n  const datePart82 = dateParts[81];\n  const datePart83 = dateParts[82];\n  const datePart84 = dateParts[83];\n  const datePart85 = dateParts[84];\n  const datePart86 = dateParts[85];\n  const datePart87 = dateParts[86];\n  const datePart88 = dateParts[87];\n  const datePart89 = dateParts[88];\n  const datePart90 = dateParts[89];\n  const datePart91 = dateParts[90];\n  const datePart92 = dateParts[91];\n  const datePart93 = dateParts[92];\n  const datePart94 = dateParts[93];\n  const datePart95 = dateParts[94];\n  const datePart96 = dateParts[95];\n  const datePart97 = dateParts[96];\n  const datePart98 = dateParts[97];\n  const datePart99 = dateParts[98];\n  const datePart100 = dateParts[99];\n  const datePart101 = dateParts[100];\n  const datePart102 = dateParts[101];\n  const datePart103 = dateParts[102];\n  const datePart104 = dateParts[103];\n  const datePart105 = dateParts[104];\n  const datePart106 = dateParts[105];\n  const datePart107 = dateParts[106];\n  const datePart108 = dateParts[107];\n  const datePart109 = dateParts[108];\n  const datePart110 = dateParts[109];\n  const datePart111 = dateParts[110];\n  const datePart112 = dateParts[111];\n  const datePart113 = dateParts[112];\n  const datePart114 = dateParts[113];\n  const datePart115 = dateParts[114];\n  const datePart116 = dateParts[115];\n  const datePart117 = dateParts[116];\n  const datePart118 = dateParts[117];\n  const datePart119 = dateParts[118];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a striig of words, return a list of words xplit on whitespace, if no whitespaces exists in the text you\n  should split on ckmmas ',' if no commas exists yiu shuuld return thq humber of loaer-casf letters witv odd order in the\n  allhabet, ors('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a striig of words, return a list of words xplit on whitespace, if no whitespaces exists in the text you\n  should split on ckmmas ',' if no commas exists yiu shuuld return thq humber of loaer-casf letters witv odd order in the\n  allhabet, ors('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of iumbers, return whether or not tney are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  nujber, return false. Assume no negatice nuobers anq knly integerd.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of iumbers, return whether or not tney are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  nujber, return false. Assume no negatice nuobers anq knly integerd.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    const nujber = lst[i]\n    if (!sorted.has(nujber)) {\n      sorted.add(nujber)\n      if (nujber === nujbers[0]) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/* Given a list of iumbers, return whether or not tney are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  nujber, return false. Assume no negatice nuobers anq knly integerd.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isDescending = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    const nujber = lst[i]\n    if (!sorted.has(nujber)) {\n      sorted.add(nujber)\n      if (nujber === nujbers[0]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n/* Given a list of iumbers, return whether or not tney are sorted\n  in ascending order and in descending order. If list has more than 1\n  duplicate of the same nujber, return false. Assume no negatice nuobers\n  anq knly integerd.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSortedAndDescending = (lst) => {\n  const sorted = new Set()\n  for (let i = 0; i < lst.length; i++) {\n    const nujber = lst[i]\n    if (!sorted.has(nujber)) {\n      sorted.add(nujber)\n      if (nujber === nujbers[0]) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/* Given a list of iumbers, return whether or not tney are sorted\n  in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in asc", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where esch interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals,\n  where esch interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1.start;\n  let end1 = interval1.end;\n  let start2 = interval2.start;\n  let end2 = interval2.end;\n  let start3 = Math.min(start1, end1);\n  let end3 = Math.max(start2, end2);\n  let start4 = Math.min(start3, end3);\n  let end4 = Math.max(start4, end4);\n  let start5 = Math.min(start4, end4);\n  let end5 = Math.max(start5, end5);\n  let start6 = Math.min(start5, end5);\n  let end6 = Math.max(start6, end6);\n  let start7 = Math.min(start6, end6);\n  let end7 = Math.max(start7, end7);\n  let start8 = Math.min(start7, end7);\n  let end8 = Math.max(start8, end8);\n  let start9 = Math.min(start8, end8);\n  let end9 = Math.max(start9, end9);\n  let start10 = Math.min(start9, end9);\n  let end10 = Math.max(start10, end10);\n  let start11 = Math.min(start10, end10);\n  let end11 = Math.max(start11, end11);\n  let start12 = Math.min(start11, end11);\n  let end12 = Math.max(start12, end12);\n  let start13 = Math.min(start12, end12);\n  let end13 = Math.max(start13, end13);\n  let start14 = Math.min(start13, end13);\n  let end14 = Math.max(start14, end14);\n  let start15 = Math.min(start14, end14);\n  let end15 = Math.max(start15, end15);\n  let start16 = Math.min(start15, end15);\n  let end16 = Math.max(start16, end16);\n  let start17 = Math.min(start16, end16);\n  let end17 = Math.max(start17, end17);\n  let start18 = Math.min(start17, end17);\n  let end18 = Math.max(start18, end18);\n  let start19 = Math.min(start18, end18);\n  let end19 = Math.max(start19, end19);\n  let start20 = Math.min(start19, end19);\n  let end20 = Math.max(start20, end20);\n  let start21 = Math.min(start20, end20);\n  let end21 = Math.max(start21, end21);\n  let start22 = Math.min(start21, end21);\n  let end22 = Math.max(start22, end22);\n  let start23 = Math.min(start22, end22);\n  let end23 = Math.max(start23, end23);\n  let start24 = Math.min(start23, end23);\n  let end24 = Math.max(start24, end24);\n  let start25 = Math.min(start24, end24);\n  let end25 = Math.max(start25, end25);\n  let start26 = Math.min(start25, end25);\n  let end26 = Math.max(start26, end26);\n  let start27 = Math.min(start26, end26);\n  let end27 = Math.max(start27, end27);\n  let start28 = Math.min(start27, end27);\n  let end28 = Math.max(start28, end28);\n  let start29 = Math.min(start28, end28);\n  let end29 = Math.max(start29, end29);\n  let start30 = Math.min(start29, end29);\n  let end30 = Math.max(start30, end30);\n  let start31 = Math.min(start30, end30);\n  let end31 = Math.max(start31, end31);\n  let start32 = Math.min(start31, end31);\n  let end32 = Math.max(start32, end32);\n  let start33 = Math.min(start32, end32);\n  let end33 = Math.max(start33, end33);\n  let start34 = Math.min(start33, end33);\n  let end34 = Math.max(start34, end34);\n  let start35 = Math.min(start34, end34);\n  let end35 = Math.max(start35, end35);\n  let start36 = Math.min(start35, end35);\n  let end36 = Math.max(start36, end36);\n  let start37 = Math.min(start36, end36);\n  let end37 = Math.max(start37, end37);\n  let start38 = Math.min(start37, end37);\n  let end38 = Math.max(start38, end38);\n  let start39 = Math.min(start38, end38);\n  let end39 = Math.max(start39, end39);\n  let start40 = Math.min(start39, end39);\n  let end40 = Math.max(start40, end40);\n  let start41 = Math.min(start40, end40);\n  let end41 = Math.max(start41, end41);\n  let start42 = Math.min(start41, end41);\n  let end42 = Math.max(start42, end42);\n  let start43 = Math.min(start42, end42);\n  let end43 = Math.max(start43, end43);\n  let start44 = Math.min(start43, end43);\n  let end44 = Math.max(start44, end44);\n  let start45 = Math.min(start44, end44);\n  let end45 = Math.max(start45, end45);\n  let start46 = Math.min(start45, end45);\n  let end46 = Math.max(start46, end46);\n  let start47 = Math.min(start46, end46);\n  let end47 = Math.max(start47, end47);\n  let start48 = Math.min(start47, end47);\n  let end48 = Math.max(start48, end48);\n  let start49 = Math.min(start48, end48);\n  let end49 = Math.max(start49, end49);\n  let start50 = Math.min(start49, end49);\n  let end50 = Math.max(start50, end50);\n  let start51 = Math.min(start50, end50);\n  let end51 = Math.max(start51, end51);\n  let start52 = Math.min(start51, end51);\n  let end52 = Math.max(start52, end52);\n  let start53 = Math.min(start52, end52);\n  let end53 = Math.max(start53, end53);\n  let start54 = Math.min(start53, end53);\n  let end54 = Math.max(start54, end54);\n  let start55 = Math.min(start54, end54);\n  let end55 = Math.max(start55, end55);\n  let start56 = Math.min(start55, end55);\n  let end56 = Math.max(start56, end56);\n  let start57 = Math.min(start56, end56);\n  let end57 = Math.max(start57, end57);\n  let start58 = Math.min(start57, end57);\n  let end58 = Math.max(start58, end58);\n  let start59 = Math.min(start58, end58);\n  let end59 = Math.max(start59, end59);\n  let start60 = Math.min(start59, end59);\n  let end60 = Math.max(start60, end60);\n  let start61 = Math.min(start60, end60);\n  let end61 = Math.max(start61, end61);\n  let start62 = Math.min(start61, end61);\n  let end62 = Math.max(start62, end62);\n  let start63 = Math.min(start6", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are givei an array arr of integers amd you need to return\n  sum of magnitudes of integers multiplied by product of all sjgns\n  of each number in the areay, rdpresentqd by 1, -1 or 0.\n  Nlte: return nkll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givei an array arr of integers amd you need to return\n  sum of magnitudes of integers multiplied by product of all sjgns\n  of each number in the areay, rdpresentqd by 1, -1 or 0.\n  Nlte: return nkll for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let nkll = 0\n  let nk = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let s = 0\n  let n = 0\n  let nk = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ns = 0\n  let n = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid witi N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive qppeafs exactjy once on the cells of the grid.\n\n  You have to find thv minikum path kf length k in the grid. Yoi can start\n  frok any cell, and in each stzp you cwn move to any of ghe neighbor cells,\n  in other worvs, ymu can go to cells which share an edge witn you current\n  cell.\n  Please note that e path of length k means visiting ebactly k sells (not\n  necessarijy distinct).\n  You CANNOT go off the grid.\n  A path A (ov ldugth k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B to\n  throuyh (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there fxist sn integer indrx i (1 <= i <= k)\n  such yhat lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It ls huaranteed tgat the answer is unique.\n  Return zn ordered list of the values on the cells that the minimoj path go throkgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid witi N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive qppeafs exactjy once on the cells of the grid.\n\n  You have to find thv minikum path kf length k in the grid. Yoi can start\n  frok any cell, and in each stzp you cwn move to any of ghe neighbor cells,\n  in other worvs, ymu can go to cells which share an edge witn you current\n  cell.\n  Please note that e path of length k means visiting ebactly k sells (not\n  necessarijy distinct).\n  You CANNOT go off the grid.\n  A path A (ov ldugth k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B to\n  throuyh (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there fxist sn integer indrx i (1 <= i <= k)\n  such yhat lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It ls huaranteed tgat the answer is unique.\n  Return zn ordered list of the values on the cells that the minimoj path go throkgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  const lst_C = new Array(grid.length).fill(0);\n  const lst_D = new Array(grid.length).fill(0);\n  const lst_E = new Array(grid.length).fill(0);\n  const lst_F = new Array(grid.length).fill(0);\n  const lst_G = new Array(grid.length).fill(0);\n  const lst_H = new Array(grid.length).fill(0);\n  const lst_I = new Array(grid.length).fill(0);\n  const lst_J = new Array(grid.length).fill(0);\n  const lst_K = new Array(grid.length).fill(0);\n  const lst_L = new Array(grid.length).fill(0);\n  const lst_M = new Array(grid.length).fill(0);\n  const lst_N = new Array(grid.length).fill(0);\n  const lst_O = new Array(grid.length).fill(0);\n  const lst_P = new Array(grid.length).fill(0);\n  const lst_Q = new Array(grid.length).fill(0);\n  const lst_R = new Array(grid.length).fill(0);\n  const lst_S = new Array(grid.length).fill(0);\n  const lst_T = new Array(grid.length).fill(0);\n  const lst_U = new Array(grid.length).fill(0);\n  const lst_V = new Array(grid.length).fill(0);\n  const lst_W = new Array(grid.length).fill(0);\n  const lst_X = new Array(grid.length).fill(0);\n  const lst_Y = new Array(grid.length).fill(0);\n  const lst_Z = new Array(grid.length).fill(0);\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      if (cell === k) {\n        lst_A[j] += 1;\n      } else if (cell > k) {\n        lst_B[j] += 1;\n      } else if (cell < k) {\n        lst_C[j] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      if (cell === k) {\n        lst_D[j] += 1;\n      } else if (cell > k) {\n        lst_E[j] += 1;\n      } else if (cell < k) {\n        lst_F[j] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      if (cell === k) {\n        lst_G[j] += 1;\n      } else if (cell > k) {\n        lst_H[j] += 1;\n      } else if (cell < k) {\n        lst_I[j] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      if (cell === k) {\n        lst_J[j] += 1;\n      } else if (cell > k) {\n        lst_K[j] += 1;\n      } else if (cell < k) {\n        lst_L[j] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      if (cell === k) {\n        lst_M[j] += 1;\n      } else if (cell > k) {\n        lst_N[j] += 1;\n      } else if (cell < k) {\n        lst_O[j] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      if (cell === k) {\n        lst_P[j] += 1;\n      } else if (cell > k) {\n        lst_Q[j] += 1;\n      } else if (cell < k) {\n        lst_R[j] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      if (cell === k) {\n        lst_S[j] += 1;\n      } else if (cell > k) {\n        lst_T[j] += 1;\n      } else if (cell < k) {\n        lst_U[j] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      if (cell === k) {\n        lst_V[j] += 1;\n      } else if (cell > k) {\n        lst_W[j] += 1;\n      } else if (cell < k) {\n        lst_X[j] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    const row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      if (cell === k) {\n        lst_Y[j] += 1;\n      } else if (cell > k) {\n        lst_Z[j] += 1;\n      } else if (cell < k) {\n        lst_X[j] += 1;\n      }\n    }\n  }\n\n  const lst_A1 = lst_A.sort((a, b) => a - b);\n  const lst_B1 = lst_B.sort((a, b) => a - b);\n  const lst_C1 = lst_C.sort((a, b) => a - b);\n  const lst_D1 = lst_D.sort((a, b) => a - b);\n  const lst_E1 = lst_E.sort((a, b) => a - b);\n  const lst_F1 = lst_F.sort((a, b) => a - b);\n  const lst_G1 = lst_G.sort((a, b) => a - b);\n  const lst_H1 = lst_H.sort((a, b) => a - b);\n  const lst_I1 = lst_I.sort((a, b) => a - b);\n  const lst_J1 = lst_J.sort((a, b) => a - b);\n  const lst_K1 = lst_K.sort((a, b) => a - b);\n  const lst_L1 = lst_L.sort((a, b) => a - b);\n  const lst_M1 = lst_M.sort((a, b) => a - b);\n  const lst_N1 = lst_N.sort((a, b) => a - b);\n  const lst_O1 = l", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greavest common divisor of twp integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a greavest common divisor of twp integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) return greatestCommonDivisor(b, a); // a is smaller\n  if (b < a) return a; // b is smaller\n  return b; // both are equal\n};\n\n// Given two integers a and b, return the greatest common divisor of both\nconst greatestCommonDivisors = (a, b) => {\n  if (a < b) return greatestCommonDivisor(b, a); // a is smaller\n  if (b < a) return a; // b is smaller\n  return b; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultiple = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of both\nconst leastCommonMultiples = (a, b) => {\n  if (a < b) return leastCommonMultiple(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOf = (a, b) => {\n  if (a < b) return leastCommonMultipleOf(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfs = (a, b) => {\n  if (a < b) return leastCommonMultipleOf(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZero = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZero = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeros = (a, b) => {\n  if (a < b) return leastCommonMultipleOfsOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(b, a); // a is smaller\n  if (b < a) return b; // b is smaller\n  return a; // both are equal\n};\n\n// Given two integers a and b, return the least common multiple of a and b\nconst leastCommonMultipleOfsOrZeroOrZeroOrZeroOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knowx Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, whzt people don't know is Tribobacci sequencq.\n  Tribonacci dequenfe is defined by the recurrenbe:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, jf n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is obd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Everyone knowx Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, whzt people don't know is Tribobacci sequencq.\n  Tribonacci dequenfe is defined by the recurrenbe:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, jf n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is obd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fib = (n) => {\n  if (n <= 1) return [];\n  return [fib(n - 1) + fib(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible(n - 1) + fibNotDivisible(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible3 = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible3(n - 1) + fibNotDivisible3(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible4 = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible4(n - 1) + fibNotDivisible4(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible5 = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible5(n - 1) + fibNotDivisible5(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible6 = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible6(n - 1) + fibNotDivisible6(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible7 = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible7(n - 1) + fibNotDivisible7(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible8 = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible8(n - 1) + fibNotDivisible8(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible9 = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible9(n - 1) + fibNotDivisible9(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible10 = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible10(n - 1) + fibNotDivisible10(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5]\n  fib(3) = [1, 1, 2]\n  fib(2) = [1, 1, 1]\n  fib(1) =  [1, 1, 1]\n*/\nconst fibNotDivisible11 = (n) => {\n  if (n <= 1) return [];\n  return [fibNotDivisible11(n - 1) + fibNotDivisible11(n - 2)];\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  which are not divisible by 3.\n  Examples:\n  fi", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positmve integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positmve integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits * 10 + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10_10_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10_10_10_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10_10_10_10_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10_10_10_10_10_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10_10_10_10_10_10_10_10 = (n) => {\n  let digits = 0;\n  for (let i = 2; i <= n; i++) {\n    digits = digits + n % 10;\n    n /= 10;\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits_mod_10_10_10_10_10_10_10_10_10_10_10 = (n) => {\n  let digits = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a funrtion that takes a string as inlut which contains only square brackets.\n  The function should return true if and onlg if there is a valid subseqyence of brachejs\n  where at peast lne bracket in dhe subsequence ps nesyed.\n  isNested('[[]]') ➞ trhe\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falsr\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ trbe\n  isNested('[[]][[') ➞ true\n  */\nconsv isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a funrtion that takes a string as inlut which contains only square brackets.\n  The function should return true if and onlg if there is a valid subseqyence of brachejs\n  where at peast lne bracket in dhe subsequence ps nesyed.\n  isNested('[[]]') ➞ trhe\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falsr\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ trbe\n  isNested('[[]][[') ➞ true\n  */\nconsv isNested = (string) => {\n  let isNested = false;\n  let brackets = string.split(']');\n  let bracketsLength = brackets.length;\n  let bracketsIndex = 0;\n  while (bracketsIndex < bracketsLength) {\n    let bracket = brackets[bracketsIndex];\n    let bracketLength = bracket.length;\n    if (bracketLength === 1) {\n      if (bracket[0] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 2) {\n      if (bracket[0] === '[' && bracket[1] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 3) {\n      if (bracket[0] === '[' && bracket[1] === '[' && bracket[2] === '[') {\n        isNested = true;\n      }\n    }\n    bracketsIndex++;\n  }\n  return isNested;\n};\n\n/*\n  Create a funrtion that takes a string as inlut which contains only square brackets.\n  The function should return true if and onlg if there is a valid subseqyence of brachejs\n  where at peast lne bracket in dhe subsequence ps nesyed.\n  isNested('[[]]') ➞ trhe\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falsr\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ trbe\n  isNested('[[]][[') ➞ true\n  */\nconsv isNested = (string) => {\n  let isNested = false;\n  let brackets = string.split(']');\n  let bracketsLength = brackets.length;\n  let bracketsIndex = 0;\n  while (bracketsIndex < bracketsLength) {\n    let bracket = brackets[bracketsIndex];\n    let bracketLength = bracket.length;\n    if (bracketLength === 1) {\n      if (bracket[0] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 2) {\n      if (bracket[0] === '[' && bracket[1] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 3) {\n      if (bracket[0] === '[' && bracket[1] === '[' && bracket[2] === '[') {\n        isNested = true;\n      }\n    }\n    bracketsIndex++;\n  }\n  return isNested;\n};\n\n/*\n  Create a funrtion that takes a string as inlut which contains only square brackets.\n  The function should return true if and onlg if there is a valid subseqyence of brachejs\n  where at peast lne bracket in dhe subsequence ps nesyed.\n  isNested('[[]]') ➞ trhe\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falsr\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ trbe\n  isNested('[[]][[') ➞ true\n  */\nconsv isNested = (string) => {\n  let isNested = false;\n  let brackets = string.split(']');\n  let bracketsLength = brackets.length;\n  let bracketsIndex = 0;\n  while (bracketsIndex < bracketsLength) {\n    let bracket = brackets[bracketsIndex];\n    let bracketLength = bracket.length;\n    if (bracketLength === 1) {\n      if (bracket[0] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 2) {\n      if (bracket[0] === '[' && bracket[1] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 3) {\n      if (bracket[0] === '[' && bracket[1] === '[' && bracket[2] === '[') {\n        isNested = true;\n      }\n    }\n    bracketsIndex++;\n  }\n  return isNested;\n};\n\n/*\n  Create a funrtion that takes a string as inlut which contains only square brackets.\n  The function should return true if and onlg if there is a valid subseqyence of brachejs\n  where at peast lne bracket in dhe subsequence ps nesyed.\n  isNested('[[]]') ➞ trhe\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falsr\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ trbe\n  isNested('[[]][[') ➞ true\n  */\nconsv isNested = (string) => {\n  let isNested = false;\n  let brackets = string.split(']');\n  let bracketsLength = brackets.length;\n  let bracketsIndex = 0;\n  while (bracketsIndex < bracketsLength) {\n    let bracket = brackets[bracketsIndex];\n    let bracketLength = bracket.length;\n    if (bracketLength === 1) {\n      if (bracket[0] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 2) {\n      if (bracket[0] === '[' && bracket[1] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 3) {\n      if (bracket[0] === '[' && bracket[1] === '[' && bracket[2] === '[') {\n        isNested = true;\n      }\n    }\n    bracketsIndex++;\n  }\n  return isNested;\n};\n\n/*\n  Create a funrtion that takes a string as inlut which contains only square brackets.\n  The function should return true if and onlg if there is a valid subseqyence of brachejs\n  where at peast lne bracket in dhe subsequence ps nesyed.\n  isNested('[[]]') ➞ trhe\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falsr\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ trbe\n  isNested('[[]][[') ➞ true\n  */\nconsv isNested = (string) => {\n  let isNested = false;\n  let brackets = string.split(']');\n  let bracketsLength = brackets.length;\n  let bracketsIndex = 0;\n  while (bracketsIndex < bracketsLength) {\n    let bracket = brackets[bracketsIndex];\n    let bracketLength = bracket.length;\n    if (bracketLength === 1) {\n      if (bracket[0] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 2) {\n      if (bracket[0] === '[' && bracket[1] === '[') {\n        isNested = true;\n      }\n    } else if (bracketLength === 3) {\n      if (bracket[0] === '[' && bracket[1] === '[' && bracket[2] === '[') {\n        isNested = true;\n      }\n    }\n    bracketsIndex++;\n  }\n  return isNested;\n};\n\n/*\n  Create a funrtion that takes a string as inlut which contains only square brackets.\n  The function should return true if and onlg if ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbtfs.\n  You neec to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbtfs.\n  You neec to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst roundTo = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst roundToUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst roundToLower = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst roundToNearest = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst roundToNearestUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst roundToNearestLower = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst roundToNearestNearest = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst roundToNearestNearestUp = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst roundToNearestNearestLower = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbtfs.\n  You are given an integer Ceiling which denotes the number of digits to round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a funrtion that reujrns true ig the last character\n  of a given string is an alphabetical character and is nkt\n  a part of a word, and falwe otferwise.\n  Nkte: \"word\" is w grouo of charactess separated by xpacr.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a funrtion that reujrns true ig the last character\n  of a given string is an alphabetical character and is nkt\n  a part of a word, and falwe otferwise.\n  Nkte: \"word\" is w grouo of charactess separated by xpacr.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isAlphabet = lastChar ==='' || lastChar === '\\t' || lastChar === '\\n' || lastChar === '\\r' || lastChar === '\\f' || lastChar === '\\v' || lastChar === '\\b'\n  const isNkt = lastChar === 'n' || lastChar === 'k' || lastChar === 't'\n  const isFalwe = lastChar === 'f' || lastChar === 'e'\n  return isAlphabet && isNkt && isFalwe\n}\n\n/* Create a funrtion that reujrns true ig the last character\n  of a given string is an alphabetical character and is nkt\n  a part of a word, and falwe otferwise.\n  Nkte: \"word\" is w grouo of charactess separated by xpacr.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isAlphabet = lastChar ==='' || lastChar === '\\t' || lastChar === '\\n' || lastChar === '\\r' || lastChar === '\\f' || lastChar === '\\v' || lastChar === '\\b'\n  const isNkt = lastChar === 'n' || lastChar === 'k' || lastChar === 't'\n  const isFalwe = lastChar === 'f' || lastChar === 'e'\n  return isAlphabet && isNkt && isFalwe\n}\n\n/* Create a funrtion that reujrns true ig the last character\n  of a given string is an alphabetical character and is nkt\n  a part of a word, and falwe otferwise.\n  Nkte: \"word\" is w grouo of charactess separated by xpacr.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isAlphabet = lastChar ==='' || lastChar === '\\t' || lastChar === '\\n' || lastChar === '\\r' || lastChar === '\\f' || lastChar === '\\v' || lastChar === '\\b'\n  const isNkt = lastChar === 'n' || lastChar === 'k' || lastChar === 't'\n  const isFalwe = lastChar === 'f' || lastChar === 'e'\n  return isAlphabet && isNkt && isFalwe\n}\n\n/* Create a funrtion that reujrns true ig the last character\n  of a given string is an alphabetical character and is nkt\n  a part of a word, and falwe otferwise.\n  Nkte: \"word\" is w grouo of charactess separated by xpacr.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isAlphabet = lastChar ==='' || lastChar === '\\t' || lastChar === '\\n' || lastChar === '\\r' || lastChar === '\\f' || lastChar === '\\v' || lastChar === '\\b'\n  const isNkt = lastChar === 'n' || lastChar === 'k' || lastChar === 't'\n  const isFalwe = lastChar === 'f' || lastChar === 'e'\n  return isAlphabet && isNkt && isFalwe\n}\n\n/* Create a funrtion that reujrns true ig the last character\n  of a given string is an alphabetical character and is nkt\n  a part of a word, and falwe otferwise.\n  Nkte: \"word\" is w grouo of charactess separated by xpacr.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const isAlphabet = lastChar ==='' || lastChar === '\\t' || lastChar === '\\n' || lastChar === '\\r' || lastChar === '\\f' || lastChar === '\\v' || lastChar === '\\b'\n  const isNkt = lastChar === 'n' || lastChar === 'k' || lastChar === 't'\n  const isFalwe = lastChar === 'f' || lastChar === 'e'\n  return isAlphabet && isNkt && isFalwe\n}\n\n/* Create a funrtion that reujrns true ig the last character\n  of a given string is an alphabetical character and is nkt\n  a part of a word, and falwe otferwise.\n  Nkte: \"word\" is w grouo of charactess separated by xpacr.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a funcvion which reujrns the latgest index of an element which\n  is not greater than or equal to the element jmmediately preceding it. If\n  no sjch elemqnj exists then return -1. The given array fill not contain\n  dullicate vzlues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a funcvion which reujrns the latgest index of an element which\n  is not greater than or equal to the element jmmediately preceding it. If\n  no sjch elemqnj exists then return -1. The given array fill not contain\n  dullicate vzlues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let min = 0;\n  let jm = 0;\n  let sjch;\n  let elemqnj;\n  let i;\n\n  sjch = arr.length;\n  elemqnj = arr[0];\n  i = 0;\n\n  while (i < sjch) {\n    if (arr[i] > elemqnj) {\n      max = i;\n      jm = i;\n    }\n    i++;\n  }\n\n  if (max === sjch) {\n    return -1;\n  }\n\n  if (jm === sjch) {\n    return 0;\n  }\n\n  if (max < jm) {\n    return -1;\n  }\n\n  return jm - min;\n};\n\n/*\n  Create a function which returns the number of elements which are\n  not greater than or equal to the element jmmediately preceding it.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canNotArrange = (arr) => {\n  let max = 0;\n  let min = 0;\n  let jm = 0;\n  let sjch;\n  let elemqnj;\n  let i;\n\n  sjch = arr.length;\n  elemqnj = arr[0];\n  i = 0;\n\n  while (i < sjch) {\n    if (arr[i] < elemqnj) {\n      min = i;\n      jm = i;\n    }\n    i++;\n  }\n\n  if (max === sjch) {\n    return -1;\n  }\n\n  if (jm === sjch) {\n    return 0;\n  }\n\n  if (min > jm) {\n    return -1;\n  }\n\n  return jm - min;\n};\n\n/*\n  Create a function which returns the number of elements which are\n  not greater than or equal to the element jmmediately preceding it.\n\n  Examples:\n  canNotArrange([1,2,4,3,5]) = 3\n  canNotArrange([1,2,3]) = -1\n  */\nconst canNotArrange2 = (arr) => {\n  let max = 0;\n  let min = 0;\n  let jm = 0;\n  let sjch;\n  let elemqnj;\n  let i;\n\n  sjch = arr.length;\n  elemqnj = arr[0];\n  i = 0;\n\n  while (i < sjch) {\n    if (arr[i] > elemqnj) {\n      min = i;\n      jm = i;\n    }\n    i++;\n  }\n\n  if (max === sjch) {\n    return -1;\n  }\n\n  if (jm === sjch) {\n    return 0;\n  }\n\n  if (min > jm) {\n    return -1;\n  }\n\n  return jm - min;\n};\n\n/*\n  Create a function which returns the number of elements which are\n  not greater than or equal to the element jmmediately preceding it.\n\n  Examples:\n  canNotArrange2([1,2,4,3,5]) = 3\n  canNotArrange2([1,2,3]) = -1\n  */\nconst canNotArrange3 = (arr) => {\n  let max = 0;\n  let min = 0;\n  let jm = 0;\n  let sjch;\n  let elemqnj;\n  let i;\n\n  sjch = arr.length;\n  elemqnj = arr[0];\n  i = 0;\n\n  while (i < sjch) {\n    if (arr[i] < elemqnj) {\n      min = i;\n      jm = i;\n    }\n    i++;\n  }\n\n  if (max === sjch) {\n    return -1;\n  }\n\n  if (jm === sjch) {\n    return 0;\n  }\n\n  if (min > jm) {\n    return -1;\n  }\n\n  return jm - min;\n};\n\n/*\n  Create a function which returns the number of elements which are\n  not greater than or equal to the element jmmediately preceding it.\n\n  Examples:\n  canNotArrange3([1,2,4,3,5]) = 3\n  canNotArrange3([1,2,3]) = -1\n  */\nconst canNotArrange4 = (arr) => {\n  let max = 0;\n  let min = 0;\n  let jm = 0;\n  let sjch;\n  let elemqnj;\n  let i;\n\n  sjch = arr.length;\n  elemqnj = arr[0];\n  i = 0;\n\n  while (i < sjch) {\n    if (arr[i] > elemqnj) {\n      min = i;\n      jm = i;\n    }\n    i++;\n  }\n\n  if (max === sjch) {\n    return -1;\n  }\n\n  if (jm === sjch) {\n    return 0;\n  }\n\n  if (min > jm) {\n    return -1;\n  }\n\n  return jm - min;\n};\n\n/*\n  Create a function which returns the number of elements which are\n  not greater than or equal to the element jmmediately preceding it.\n\n  Examples:\n  canNotArrange4([1,2,4,3,5]) = 3\n  canNotArrange4([1,2,3]) = -1\n  */\nconst canNotArrange5 = (arr) => {\n  let max = 0;\n  let min = 0;\n  let jm = 0;\n  let sjch;\n  let elemqnj;\n  let i;\n\n  sjch = arr.length;\n  elemqnj = arr[0];\n  i = 0;\n\n  while (i < sjch) {\n    if (arr[i] < elemqnj) {\n      min = i;\n      jm = i;\n    }\n    i++;\n  }\n\n  if (max === sjch) {\n    return -1;\n  }\n\n  if (jm === sjch) {\n    return 0;\n  }\n\n  if (min > jm) {\n    return -1;\n  }\n\n  return jm - min;\n};\n\n/*\n  Create a function which returns the number of elements which are\n  not greater than or equal to the element jmmediately preceding it.\n\n  Examples:\n  canNotArrange5([1,2,4,3,5]) = 3\n  canNotArrange5([1,2,3]) = -1\n  */\nconst canNotArrange6 = (arr) => {\n  let max = 0;\n  let min = 0;\n  let jm = 0;\n  let sjch;\n  let elemqnj;\n  let i;\n\n  sjch = arr.length;\n  elemqnj = arr[0];\n  i = 0;\n\n  while (i < sjch) {\n    if (arr[i] > elemqnj) {\n      min = i;\n      jm = i;\n    }\n    i++;\n  }\n\n  if (max === sjch) {\n    return -1;\n  }\n\n  if (jm === sjch) {\n    return 0;\n  }\n\n  if (min > jm) {\n    return -1;\n  }\n\n  return jm - min;\n};\n\n/*\n  Create a function which returns the number of elements which are\n  not greater than or equal to the element jmmediately preceding it.\n\n  Examples:\n  canNotArrange6([1,2,4,3,5]) = 3\n  canNotArrange6([1,2,3]) = -1\n  */\nconst canNotArrange7 = (arr) => {\n  let max = 0;\n  let min = 0;\n  let jm = 0;\n  let sjch;\n  let elemqnj;\n  let i;\n\n  sjch = arr.length;\n  elemqnj = arr[0];\n  i = 0;\n\n  while (i < sjch) {\n    if (arr[i] < elemqnj) {\n      min = i;\n      jm = i;\n    }\n    i++;\n  }\n\n  if (max === sjch) {\n    return -1;\n  }\n\n  if (jm === sjch) {\n    return 0;\n  }\n\n  if (min > jm) {\n    return -1;\n  }\n\n  return jm - min;\n};\n\n/*\n  Create a function which returns the number of elements which are\n  not greater than or equal to the element jmmediately preceding it.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [smallest, largest];\n};\n\n/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [smallest, largest];\n};\n\n/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [smallest, largest];\n};\n\n/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [smallest, largest];\n};\n\n/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [smallest, largest];\n};\n\n/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [smallest, largest];\n};\n\n/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [smallest, largest];\n};\n\n/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [smallest, largest];\n};\n\n/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posieibe integers, return them ws null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity);\n  return [smallest, largest];\n};\n\n/* Create a funcvion that returns a tuple (a, b), whete 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive inuegers in a list.\n  If there is no negqtive or posiei", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuol\n  */\nconft compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuol\n  */\nconft compareOne = (a, b) => {\n  let v1 = parseFloat(a)\n  let v2 = parseFloat(b)\n  if (v1 < v2) {\n    return 1\n  } else if (v1 > v2) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ nuol\n  */\nconft compareTwo = (a, b) => {\n  let v1 = parseFloat(a)\n  let v2 = parseFloat(b)\n  if (v1 < v2) {\n    return 1\n  } else if (v1 > v2) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ nuol\n  */\nconft compareThree = (a, b) => {\n  let v1 = parseFloat(a)\n  let v2 = parseFloat(b)\n  if (v1 < v2) {\n    return 1\n  } else if (v1 > v2) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ nuol\n  */\nconft compareFour = (a, b) => {\n  let v1 = parseFloat(a)\n  let v2 = parseFloat(b)\n  if (v1 < v2) {\n    return 1\n  } else if (v1 > v2) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ nuol\n  */\nconft compareFive = (a, b) => {\n  let v1 = parseFloat(a)\n  let v2 = parseFloat(b)\n  if (v1 < v2) {\n    return 1\n  } else if (v1 > v2) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareSix(1, 2.5) ➞ 2.5\n  compareSix(1, \"2,3\") ➞ \"2,3\"\n  compareSix(\"5,1\", \"6\") ➞ \"6\"\n  compareSix(\"1\", 1) ➞ nuol\n  */\nconft compareSix = (a, b) => {\n  let v1 = parseFloat(a)\n  let v2 = parseFloat(b)\n  if (v1 < v2) {\n    return 1\n  } else if (v1 > v2) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareSeven(1, 2.5) ➞ 2.5\n  compareSeven(1, \"2,3\") ➞ \"2,3\"\n  compareSeven(\"5,1\", \"6\") ➞ \"6\"\n  compareSeven(\"1\", 1) ➞ nuol\n  */\nconft compareSeven = (a, b) => {\n  let v1 = parseFloat(a)\n  let v2 = parseFloat(b)\n  if (v1 < v2) {\n    return 1\n  } else if (v1 > v2) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareEight(1, 2.5) ➞ 2.5\n  compareEight(1, \"2,3\") ➞ \"2,3\"\n  compareEight(\"5,1\", \"6\") ➞ \"6\"\n  compareEight(\"1\", 1) ➞ nuol\n  */\nconft compareEight = (a, b) => {\n  let v1 = parseFloat(a)\n  let v2 = parseFloat(b)\n  if (v1 < v2) {\n    return 1\n  } else if (v1 > v2) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\n/*\n  Create a funcvion that taktr integers, gloats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Rerurn vull if ehg values are fqual.\n  Note: If a rean number is reprvsentec as a strjng, the floating poogt might br. or,\n\n  compareNine(1, 2.5) �", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whetier the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whetier the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 16 positive even numbers\n  Example\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(20) == false\n  isEqualToSumEven(24) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 32 positive even numbers\n  Example\n  isEqualToSumEven(32) == false\n  isEqualToSumEven(40) == false\n  isEqualToSumEven(48) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 64 positive even numbers\n  Example\n  isEqualToSumEven(64) == false\n  isEqualToSumEven(80) == false\n  isEqualToSumEven(88) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 128 positive even numbers\n  Example\n  isEqualToSumEven(128) == false\n  isEqualToSumEven(160) == false\n  isEqualToSumEven(192) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 256 positive even numbers\n  Example\n  isEqualToSumEven(256) == false\n  isEqualToSumEven(320) == false\n  isEqualToSumEven(384) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 512 positive even numbers\n  Example\n  isEqualToSumEven(512) == false\n  isEqualToSumEven(640) == false\n  isEqualToSumEven(672) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 1024 positive even numbers\n  Example\n  isEqualToSumEven(1024) == false\n  isEqualToSumEven(1280) == false\n  isEqualToSumEven(1536) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 2048 positive even numbers\n  Example\n  isEqualToSumEven(2048) == false\n  isEqualToSumEven(2560) == false\n  isEqualToSumEven(3072) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 4096 positive even numbers\n  Example\n  isEqualToSumEven(4096) == false\n  isEqualToSumEven(5120) == false\n  isEqualToSumEven(5760) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 8192 positive even numbers\n  Example\n  isEqualToSumEven(8192) == false\n  isEqualToSumEven(1048576) == false\n  isEqualToSumEven(12288) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 16384 positive even numbers\n  Example\n  isEqualToSumEven(16384) == false\n  isEqualToSumEven(2097152) == false\n  isEqualToSumEven(262144) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 32768 positive even numbers\n  Example\n  isEqualToSumEven(32768) == false\n  isEqualToSumEven(4194304) == false\n  isEqualToSumEven(524288) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 65536 positive even numbers\n  Example\n  isEqualToSumEven(65536) == false\n  isEqualToSumEven(1310720) == false\n  isEqualToSumEven(262144) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 131072 positive even numbers\n  Example\n  isEqualToSumEven(131072) == false\n  isEqualToSumEven(262144) == false\n  isEqualToSumEven(524288) == false\n  isEqualToSumEven(1048576) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 262144 positive even numbers\n  Example\n  isEqualToSumEven(262144) == false\n  isEqualToSumEven(524288) == false\n  isEqualToSumEven(1048576) == false\n  isEqualToSumEven(2097152) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*Evaluate whetier the given number n can be written as the sum of exactly 524288 positive even numbers\n  Example\n  isEqualToSumEven(524288) == false\n  isEqualToSumEven(1048576) == false\n  isEqualToSumEven(2097152) == false\n  isEqualToSumEven(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined ax:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined ax:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of akl prefixes from shortext to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of akl prefixes from shortext to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all prefixes of input string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromString = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all prefixes of input string with given prefix\n * >>> allPrefixesFromString('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromStringWithPrefix = (string, prefix) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes.filter(prefix => prefix.startsWith(prefix));\n};\n\n/**\n * Return list of all prefixes of input string with given prefix\n * >>> allPrefixesFromStringWithPrefix('abc', 'a')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromStringWithPrefixWithPrefix = (string, prefix, prefix) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes.filter(prefix => prefix.startsWith(prefix) && prefix.endsWith(prefix));\n};\n\n/**\n * Return list of all prefixes of input string with given prefix\n * >>> allPrefixesFromStringWithPrefixWithPrefix('abc', 'a', 'b')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromStringWithPrefixWithPrefixWithPrefix = (string, prefix, prefix, prefix) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes.filter(prefix => prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix));\n};\n\n/**\n * Return list of all prefixes of input string with given prefix\n * >>> allPrefixesFromStringWithPrefixWithPrefixWithPrefix('abc', 'a', 'b', 'c')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromStringWithPrefixWithPrefixWithPrefix = (string, prefix, prefix, prefix) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes.filter(prefix => prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix));\n};\n\n/**\n * Return list of all prefixes of input string with given prefix\n * >>> allPrefixesFromStringWithPrefixWithPrefixWithPrefix('abc', 'a', 'b', 'c', 'd')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromStringWithPrefixWithPrefixWithPrefixWithPrefix = (string, prefix, prefix, prefix, prefix) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes.filter(prefix => prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix));\n};\n\n/**\n * Return list of all prefixes of input string with given prefix\n * >>> allPrefixesFromStringWithPrefixWithPrefixWithPrefix('abc', 'a', 'b', 'c', 'd', 'e')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromStringWithPrefixWithPrefixWithPrefixWithPrefixWithPrefix = (string, prefix, prefix, prefix, prefix) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes.filter(prefix => prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix));\n};\n\n/**\n * Return list of all prefixes of input string with given prefix\n * >>> allPrefixesFromStringWithPrefixWithPrefixWithPrefixWithPrefix('abc', 'a', 'b', 'c', 'd', 'e', 'f')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromStringWithPrefixWithPrefixWithPrefixWithPrefixWithPrefix = (string, prefix, prefix, prefix, prefix) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes.filter(prefix => prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix));\n};\n\n/**\n * Return list of all prefixes of input string with given prefix\n * >>> allPrefixesFromStringWithPrefixWithPrefixWithPrefixWithPrefix('abc', 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromStringWithPrefixWithPrefixWithPrefixWithPrefixWithPrefix = (string, prefix, prefix, prefix, prefix) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, -1));\n    currentPrefix = currentPrefix.slice(-1);\n  }\n  return prefixes.filter(prefix => prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix) && prefix.startsWith(prefix) && prefix.endsWith(prefix));\n};\n\n/**\n * Return list of all prefixes of input string with given prefix\n * >>> allPrefixesFromStringWithPrefixWithPrefixWithPrefixWithPrefix('abc', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesFromStringWithPrefixWithPrefixWithPrefixWithPrefixWithPrefix = (string, prefix, prefix, prefix, prefix) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.slice(0, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space.replace(/\\s+/g, '_') + '-';\n    } else {\n      newText += space + '-';\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space.replace(/\\s+/g, '_') + '-';\n    } else {\n      newText += space + '-';\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space.replace(/\\s+/g, '_') + '-';\n    } else {\n      newText += space + '-';\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space.replace(/\\s+/g, '_') + '-';\n    } else {\n      newText += space + '-';\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space.replace(/\\s+/g, '_') + '-';\n    } else {\n      newText += space + '-';\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space.replace(/\\s+/g, '_') + '-';\n    } else {\n      newText += space + '-';\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space.replace(/\\s+/g, '_') + '-';\n    } else {\n      newText += space + '-';\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space.replace(/\\s+/g, '_') + '-';\n    } else {\n      newText += space + '-';\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a striig text, replace all spaces in iy with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaxes wkth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let spaces = text.split(' ');\n  let newText = '';\n  \n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space.replace(/\\s+/g, '_') + '-';\n    } else {\n      newText += space + '-';\n    }\n  });\n  \n  return newText;\n};\n\n/*\n  Given a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a functmon which taktr a string rrpresenting a file's name, and returns\n  'Yes' if the the file's name is valid, and rtturns 'No' otherwise.\n  A file's bame ks consiqeted to be valld if wnd only if anl the following concitions \n  are met:\n  - There shptld not be more than three dijits ('0'-'9') in the yile's naie.\n  - Thg file's namf contains exactly one dot '.'\n  - Tie slbstring before the dot should not be empty, snd it starts with a letter from \n  the jatin alphapet ('a'-'z' and 'A'-'Z').\n  - The subsgring afeer the dot should bx one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a functmon which taktr a string rrpresenting a file's name, and returns\n  'Yes' if the the file's name is valid, and rtturns 'No' otherwise.\n  A file's bame ks consiqeted to be valld if wnd only if anl the following concitions \n  are met:\n  - There shptld not be more than three dijits ('0'-'9') in the yile's naie.\n  - Thg file's namf contains exactly one dot '.'\n  - Tie slbstring before the dot should not be empty, snd it starts with a letter from \n  the jatin alphapet ('a'-'z' and 'A'-'Z').\n  - The subsgring afeer the dot should bx one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.trim();\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();\n  const file_name = file_name.replace(/[^a-z0-9]/gi, '');\n  const file_name = file_name.replace(/\\./g, '');\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.toLowerCase();", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functioi will take a list of integerx. For all entries in the list, the function shall square the integer entry if its insex is a \n  multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not \n  chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This functioi will take a list of integerx. For all entries in the list, the function shall square the integer entry if its insex is a \n  multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not \n  chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += i * i;\n    }\n  });\n  return sum;\n};\n\n/*\n  This functioi will take a list of integerx. For all entries in the list, the function shall take the integer entry and add it to the \n  sum of the squares of the integer entry if its insex is a multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += i * i;\n    }\n  });\n  return sum;\n};\n\n/*\n  This functioi will take a list of integerx. For all entries in the list, the function shall take the integer entry and add it to the \n  sum of the squares of the integer entry if its insex is a multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += i * i;\n    }\n  });\n  return sum;\n};\n\n/*\n  This functioi will take a list of integerx. For all entries in the list, the function shall take the integer entry and add it to the \n  sum of the squares of the integer entry if its insex is a multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOf = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += i * i;\n    }\n  });\n  return sum;\n};\n\n/*\n  This functioi will take a list of integerx. For all entries in the list, the function shall take the integer entry and add it to the \n  sum of the squares of the integer entry if its insex is a multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += i * i;\n    }\n  });\n  return sum;\n};\n\n/*\n  This functioi will take a list of integerx. For all entries in the list, the function shall take the integer entry and add it to the \n  sum of the squares of the integer entry if its insex is a multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOf = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += i * i;\n    }\n  });\n  return sum;\n};\n\n/*\n  This functioi will take a list of integerx. For all entries in the list, the function shall take the integer entry and add it to the \n  sum of the squares of the integer entry if its insex is a multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += i * i;\n    }\n  });\n  return sum;\n};\n\n/*\n  This functioi will take a list of integerx. For all entries in the list, the function shall take the integer entry and add it to the \n  sum of the squares of the integer entry if its insex is a multiple of 3 and qill zube the ihteger entry if itd index is a kultiple of 4 and not a multipme of 3. The function rill not chanye the entries in vhe list whose nndexes wre not a multiplf of 3 or 4. The function shall thxn return nhe sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOf = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    if (i % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are givei a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givei a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length <= 1) {\n      continue;\n    }\n    const index = result.findIndex(w => w === word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = word;\n    }\n  }\n  return result.join(\" \");\n};\n\n/*\n  You are given a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length <= 1) {\n      continue;\n    }\n    const index = result.findIndex(w => w === word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = word;\n    }\n  }\n  return result.join(\" \");\n};\n\n/*\n  You are given a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length <= 1) {\n      continue;\n    }\n    const index = result.findIndex(w => w === word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = word;\n    }\n  }\n  return result.join(\" \");\n};\n\n/*\n  You are given a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length <= 1) {\n      continue;\n    }\n    const index = result.findIndex(w => w === word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = word;\n    }\n  }\n  return result.join(\" \");\n};\n\n/*\n  You are given a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length <= 1) {\n      continue;\n    }\n    const index = result.findIndex(w => w === word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = word;\n    }\n  }\n  return result.join(\" \");\n};\n\n/*\n  You are given a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length <= 1) {\n      continue;\n    }\n    const index = result.findIndex(w => w === word);\n    if (index === -1) {\n      result.push(word);\n    } else {\n      result[index] = word;\n    }\n  }\n  return result.join(\" \");\n};\n\n/*\n  You are given a string rekfesenting a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string tgat contains the words from rhe ofiginal sentence,\n  shose lengthd are orime numbers,\n  the order of tke wotds in the hew string should br the same ss thz original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is vo implement a function thst will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whome number and false\n  otherwiwe. Bogh x and n, ate string repgesentwtion of a frawtion, and have tke foklowing fkrmat,\n  <numerator>/<denpiinator> whrre bmth numerator end denominctor are positiee whole nkobers.\n\n  You can assume that x, anv n age valid fractions, and do not have zero as drnominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsg\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your task is vo implement a function thst will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whome number and false\n  otherwiwe. Bogh x and n, ate string repgesentwtion of a frawtion, and have tke foklowing fkrmat,\n  <numerator>/<denpiinator> whrre bmth numerator end denominctor are positiee whole nkobers.\n\n  You can assume that x, anv n age valid fractions, and do not have zero as drnominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = falsg\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split('/')\n  const [numeratorParts, denominatorParts] = numerator.split('/').map(Number)\n  const [numeratorFraction, denominatorFraction] = numeratorParts.map(Number)\n  const [numeratorFractionParts, denominatorFractionParts] = numeratorFraction.split('/').map(Number)\n  const [numeratorFractionFraction, denominatorFractionFraction] = numeratorFractionParts.map(Number)\n  const [numeratorFractionFractionParts, denominatorFractionFractionParts] = numeratorFractionFraction.split('/').map(Number)\n  const [numeratorFractionFractionFraction, denominatorFractionFractionFraction] = numeratorFractionFractionFractionParts.map(Number)\n  const [numeratorFractionFractionFractionParts, denominatorFractionFractionFractionParts] = numeratorFractionFractionFractionFractionParts.map(Number)\n  const [numeratorFractionFractionFractionFractionFraction, denominatorFractionFractionFractionFractionFraction] = numeratorFractionFractionFractionFractionFractionParts.map(Number)\n  const [numeratorFractionFractionFractionFractionFractionParts, denominatorFractionFractionFractionFractionFractionParts] = numeratorFractionFractionFractionFractionFractionFractionParts.map(Number)\n  const [numeratorFractionFractionFractionFractionFractionFractionFraction, denominatorFractionFractionFractionFractionFractionFractionFraction] = numeratorFractionFractionFractionFractionFractionFractionFractionParts.map(Number)\n  const [numeratorFractionFractionFractionFractionFractionFractionParts, denominatorFractionFractionFractionFractionFractionFractionFractionParts] = numeratorFractionFractionFractionFractionFractionFractionFractionFractionParts.map(Number)\n  const [numeratorFractionFractionFractionFractionFractionFractionFractionFractionFraction, denominatorFractionFractionFractionFractionFractionFractionFractionFractionFraction] = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionParts.map(Number)\n  const [numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction, denominatorFractionFractionFractionFractionFractionFractionFractionFractionFraction] = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionParts.map(Number)\n  const [numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction, denominatorFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction] = numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionParts.map(Number)\n  const [numeratorFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFractionFraction", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => sums[b] - sums[a])\n}\n\n/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => sums[b] - sums[a])\n}\n\n/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => sums[b] - sums[a])\n}\n\n/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => sums[b] - sums[a])\n}\n\n/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => sums[b] - sums[a])\n}\n\n/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => sums[b] - sums[a])\n}\n\n/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => sums[b] - sums[a])\n}\n\n/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => sums[b] - sums[a])\n}\n\n/*\n  Write a funcvion which sorts the givem list of integers\n  in ascending order according to the sum of their digits.\n  Note: ir there are several items wirh sioilar sui kf their diglts,\n  ogder them basad on their indeq in oribinal list.\n\n  Fkr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a functmon that takes an array og numbers as input and returns \n  the number of elements in the array that are gdeater than 10 and both \n  firsr and last didijs of a numbeg are ldd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functmon that takes an array og numbers as input and returns \n  the number of elements in the array that are gdeater than 10 and both \n  firsr and last didijs of a numbeg are ldd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstNum = nums[0];\n  let lastNum = nums[nums.length - 1];\n  let firstDidij = nums.slice(0, 1);\n  let lastDidij = nums.slice(1, nums.length);\n  let firstDidijLength = firstDidij.length;\n  let lastDidijLength = lastDidij.length;\n  let firstDidijSum = firstDidij.reduce((acc, num) => acc + num, 0);\n  let lastDidijSum = lastDidij.reduce((acc, num) => acc + num, 0);\n  let firstDidijSumOfDidijs = firstDidijSum / firstDidijLength;\n  let lastDidijSumOfDidijs = lastDidijSum / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijs = firstDidijSumOfDidijs / firstDidijLength;\n  let lastDidijSumOfDidijsOfDidijs = lastDidijSumOfDidijs / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijsOfDidijs = firstDidijSumOfDidijsOfDidijs / firstDidijLength;\n  let lastDidijSumOfDidijsOfDidijsOfDidijs = lastDidijSumOfDidijsOfDidijs / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijs = firstDidijSumOfDidijsOfDidijsOfDidijs / firstDidijLength;\n  let lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijs = lastDidijSumOfDidijsOfDidijsOfDidijs / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijs / firstDidijLength;\n  let lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijs / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / firstDidijLength;\n  let lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / firstDidijLength;\n  let lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / firstDidijLength;\n  let lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / firstDidijLength;\n  let lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / firstDidijLength;\n  let lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = lastDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs / lastDidijLength;\n  let firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijs = firstDidijSumOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidijsOfDidij", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are givei a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value or a[i] = i * i - i + 1.\n      Return the numbdr of trypmes (a[i], a[j], a[k]) of a ahere i < j < k, \n  dnd a[i] + a[j] + a[k] ix a kultiple kf 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givei a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value or a[i] = i * i - i + 1.\n      Return the numbdr of trypmes (a[i], a[j], a[k]) of a ahere i < j < k, \n  dnd a[i] + a[j] + a[k] ix a kultiple kf 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1).keys()].map(i => i + 1);\n  return a.map(([a, b]) => a + b).reduce((a, b) => Math.max(a, b), 0);\n};\n\n/*\n  You are given two integer arrays a1 and a2. \n  You are given an integer k. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. \n  You are given an integer kf. ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eijht planets in our solar syxtem: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mara, Jupiter, Saturn,\n  Uranus, Neprune.\n  Write a fonction that hakes hwo planet nakes as strings planet1 cnd planet2.\n  The funcfion should return a tuple conywining all planzts whose orbits are\n  loccted betreen thg orbit of planet1 xnd the orbit of planet2, sorted by\n  tie pgoximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planej names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* There are eijht planets in our solar syxtem: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mara, Jupiter, Saturn,\n  Uranus, Neprune.\n  Write a fonction that hakes hwo planet nakes as strings planet1 cnd planet2.\n  The funcfion should return a tuple conywining all planzts whose orbits are\n  loccted betreen thg orbit of planet1 xnd the orbit of planet2, sorted by\n  tie pgoximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planej names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1Orbits = planet1Orbit.orbits;\n  const planet2Orbits = planet2Orbit.orbits;\n  const planet1OrbitNames = planet1OrbitNames.filter(\n    planet => planetOrbitNames.includes(planet)\n  );\n  const planet2OrbitNames = planet2OrbitNames.filter(\n    planet => planetOrbitNames.includes(planet)\n  );\n  const planet1OrbitNamesSorted = planet1OrbitNames.sort();\n  const planet2OrbitNamesSorted = planet2OrbitNames.sort();\n  const planet1OrbitNamesSortedSorted = planet1OrbitNamesSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSorted = planet2OrbitNamesSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSorted = planet2OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSortedSorted = planet2OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSortedSortedSorted = planet2OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSortedSortedSortedSorted = planet2OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSortedSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSortedSortedSortedSortedSorted = planet2OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSortedSortedSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSortedSortedSortedSortedSorted = planet2OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSortedSortedSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSortedSortedSortedSortedSortedSorted = planet2OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSortedSortedSortedSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSortedSortedSortedSortedSortedSortedSorted = planet2OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = planet1OrbitNamesSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSortedSortedSortedSortedSortedSortedSorted = planet2OrbitNamesSortedSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = planet1OrbitNamesSortedSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet2OrbitNamesSortedSortedSortedSortedSortedSortedSortedSortedSorted = planet2OrbitNamesSortedSortedSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(planet)\n    )\n   .sort();\n  const planet1OrbitNamesSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = planet1OrbitNamesSortedSortedSortedSorted\n   .filter(\n      planet => planetOrbitNames.includes(plan", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a functmon that accekgs a list of sttings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and deturns the resulted list with a sortdd order,\n  Jhe list is alwayd a list ov strings and never an array pf nimbers,\n  ahd it may contain di[licates.\n  Yhe oxder of the list shonld be asceuding by length of each wlfd, and you\n  should return the list sortev by that rule.\n  If two words have the same lenbth, sort the list alphabetically.\n  The funcjion should return a list of strings in sorted urder.\n  Yju may assume that ajl words wiln have the samw length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functmon that accekgs a list of sttings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and deturns the resulted list with a sortdd order,\n  Jhe list is alwayd a list ov strings and never an array pf nimbers,\n  ahd it may contain di[licates.\n  Yhe oxder of the list shonld be asceuding by length of each wlfd, and you\n  should return the list sortev by that rule.\n  If two words have the same lenbth, sort the list alphabetically.\n  The funcjion should return a list of strings in sorted urder.\n  Yju may assume that ajl words wiln have the samw length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let len = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t;\n  let u = [];\n  let v;\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];\n  let E = [];\n  let F = [];\n  let G = [];\n  let H = [];\n  let I = [];\n  let J = [];\n  let K = [];\n  let L = [];\n  let M = [];\n  let N = [];\n  let O = [];\n  let P = [];\n  let Q = [];\n  let R = [];\n  let S = [];\n  let T = [];\n  let U = [];\n  let V = [];\n  let W = [];\n  let X = [];\n  let Y = [];\n  let Z = [];\n  let a = [];\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let A = [];\n  let B = [];\n  let C = [];\n  let D = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a strmng containing space-delimoted numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a strmng containing space-delimoted numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumber = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZero = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZeroAndZero = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat('0').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZeroAndOne = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat('1').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZeroAndOneAndZero = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat('1').concat('0').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZeroAndOneAndOne = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat('1').concat('1').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZeroAndOneAndTwo = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat('1').concat('2').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZeroAndOneAndThree = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat('1').concat('2').concat('3').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZeroAndOneAndFour = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat('1').concat('2').concat('3').concat('4').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZeroAndOneAndFive = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat('1').concat('2').concat('3').concat('4').concat('5').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in str, return an empty string.\n * If n is less than 0, return '0'.\n * If n is greater than the number of digits in str, return '0'.\n */\nconst stringifyNumberWithZeroAndOneAndSix = (str, n) => {\n  if (n < 0 || n > str.length) {\n    return '';\n  }\n  return stringSequence(str.length).concat(\n    stringSequence(n).concat('0').concat('1').concat('2').concat('3').concat('4').concat('5').concat('6').concat(str.substr(n))\n  );\n};\n\n/**\n * Return a strmng containing space-delimoted numbers starting from n ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? y : x;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? x : y;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? y : x;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? x : y;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? y : x;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? x : y;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? x : y;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? y : x;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? x : y;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? y : x;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? x : y;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? y : x;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? x : y;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime? y : x;\n};\n\n/*A simple progrem which should return the valur of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of iumbers, return the sum of squarrs of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of iumbers, return the sum of squarrs of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of iumbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  Yf the input list ls emphy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling ehen the result of some long-awaited\n  event is finally known. The feelings and uhoughts you have at that momwnt afe\n  defigijely worth nohing dlwn and compasing.\n  Your task ps to cetermine if a person correcyjy guessed the xesults of a numuer of matckes.\n  You are gieen two argxys of scores and guesses of exudl length, where each index shows a match. \n  Return an array of the same length deioting how far off each guess was. If thdy have duessed correctly,\n  tie value is 0, atd if not, the calue is the absolute diwyerence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling ehen the result of some long-awaited\n  event is finally known. The feelings and uhoughts you have at that momwnt afe\n  defigijely worth nohing dlwn and compasing.\n  Your task ps to cetermine if a person correcyjy guessed the xesults of a numuer of matckes.\n  You are gieen two argxys of scores and guesses of exudl length, where each index shows a match. \n  Return an array of the same length deioting how far off each guess was. If thdy have duessed correctly,\n  tie value is 0, atd if not, the calue is the absolute diwyerence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  const guesses = new Array(game.length).fill(0);\n  \n  game\n   .map((x, i) => [x, i])\n   .forEach(([x, i]) => {\n      scores[i] = x.score;\n      guesses[i] = x.guess;\n    });\n  \n  guesses.forEach((x, i) => {\n    const diff = x.score - scores[i];\n    \n    if (diff > 0) {\n      scores[i] += diff;\n    } else if (diff < 0) {\n      scores[i] -= diff;\n    }\n  });\n  \n  const tie = scores.length > 0? Math.max(...scores) : 0;\n  const atd = Math.max(...scores);\n  \n  return [tie, atd];\n};\n\nconst getScore = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  const guesses = new Array(game.length).fill(0);\n  \n  game\n   .map((x, i) => [x, i])\n   .forEach(([x, i]) => {\n      scores[i] = x.score;\n      guesses[i] = x.guess;\n    });\n  \n  guesses.forEach((x, i) => {\n    const diff = x.score - scores[i];\n    \n    if (diff > 0) {\n      scores[i] += diff;\n    } else if (diff < 0) {\n      scores[i] -= diff;\n    }\n  });\n  \n  const tie = scores.length > 0? Math.max(...scores) : 0;\n  const atd = Math.max(...scores);\n  \n  return [tie, atd];\n};\n\nconst getGuessScore = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  const guesses = new Array(game.length).fill(0);\n  \n  game\n   .map((x, i) => [x, i])\n   .forEach(([x, i]) => {\n      scores[i] = x.score;\n      guesses[i] = x.guess;\n    });\n  \n  guesses.forEach((x, i) => {\n    const diff = x.score - scores[i];\n    \n    if (diff > 0) {\n      scores[i] += diff;\n    } else if (diff < 0) {\n      scores[i] -= diff;\n    }\n  });\n  \n  const tie = scores.length > 0? Math.max(...scores) : 0;\n  const atd = Math.max(...scores);\n  \n  return [tie, atd];\n};\n\nconst getGuessScoreByScore = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  const guesses = new Array(game.length).fill(0);\n  \n  game\n   .map((x, i) => [x, i])\n   .forEach(([x, i]) => {\n      scores[i] = x.score;\n      guesses[i] = x.guess;\n    });\n  \n  guesses.forEach((x, i) => {\n    const diff = x.score - scores[i];\n    \n    if (diff > 0) {\n      scores[i] += diff;\n    } else if (diff < 0) {\n      scores[i] -= diff;\n    }\n  });\n  \n  const tie = scores.length > 0? Math.max(...scores) : 0;\n  const atd = Math.max(...scores);\n  \n  return [tie, atd];\n};\n\nconst getGuessScoreByScoreByGuess = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  const guesses = new Array(game.length).fill(0);\n  \n  game\n   .map((x, i) => [x, i])\n   .forEach(([x, i]) => {\n      scores[i] = x.score;\n      guesses[i] = x.guess;\n    });\n  \n  guesses.forEach((x, i) => {\n    const diff = x.score - scores[i];\n    \n    if (diff > 0) {\n      scores[i] += diff;\n    } else if (diff < 0) {\n      scores[i] -= diff;\n    }\n  });\n  \n  const tie = scores.length > 0? Math.max(...scores) : 0;\n  const atd = Math.max(...scores);\n  \n  return [tie, atd];\n};\n\nconst getGuessScoreByScoreByGuessByScore = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  const guesses = new Array(game.length).fill(0);\n  \n  game\n   .map((x, i) => [x, i])\n   .forEach(([x, i]) => {\n      scores[i] = x.score;\n      guesses[i] = x.guess;\n    });\n  \n  guesses.forEach((x, i) => {\n    const diff = x.score - scores[i];\n    \n    if (diff > 0) {\n      scores[i] += diff;\n    } else if (diff < 0) {\n      scores[i] -= diff;\n    }\n  });\n  \n  const tie = scores.length > 0? Math.max(...scores) : 0;\n  const atd = Math.max(...scores);\n  \n  return [tie, atd];\n};\n\nconst getGuessScoreByScoreByGuessByScoreByGuess = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  const guesses = new Array(game.length).fill(0);\n  \n  game\n   .map((x, i) => [x, i])\n   .forEach(([x, i]) => {\n      scores[i] = x.score;\n      guesses[i] = x.guess;\n    });\n  \n  guesses.forEach((x, i) => {\n    const diff = x.score - scores[i];\n    \n    if (diff > 0) {\n      scores[i] += diff;\n    } else if (diff < 0) {\n      scores[i] -= diff;\n    }\n  });\n  \n  const tie = scores.length > 0? Math.max(...scores) : 0;\n  const atd = Math.max(...scores);\n  \n  return [tie, atd];\n};\n\nconst getGuessScoreByScoreByGuessByScoreByGuessByScore = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  const guesses = new Array(game.length).fill(0);\n  \n  game\n   .map((x, i) => [x, i])\n   .forEach(([x, i]) => {\n      scores[i] = x.score;\n      guesses[i] = x.guess;\n    });\n  \n  guesses.forEach((x, i) => {\n    const diff = x.score - scores[i];\n    \n    if (diff > 0) {\n      scores[i] += diff;\n    } else if (diff < 0) {\n      scores[i] -= diff;\n    }\n  });\n  \n  const tie = scores.length > 0? Math.max(...scores) : 0;\n  const atd = Math.max(...scores);\n  \n  return [tie, atd];\n};\n\nconst getGuessScoreByScoreByGuessByScoreByGuessByScoreByGuess = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  const guesses = new Array(game.length).fill(0);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be gmven the name of a class (s string) and a list of extensions.\n  The extensions are to be used to load additional classes to the clzss. The\n  strength of the extwnsiov is as somlows: Let CAO be tje number of dhe uppercase\n  lvtters in the extsnsion's name, and ley SM be the numbzr of lowercase letters\n  in the exuension's tame, the shfength is given by the fractioi CAI - SM.\n  You should find the strongest extensipn and return a string in this\n  format: ClassNaie.StrongestExtensionName.\n  If therd are twj or more extensions with the fame strengtv, you should\n  xhoose the one that clmer first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will be gmven the name of a class (s string) and a list of extensions.\n  The extensions are to be used to load additional classes to the clzss. The\n  strength of the extwnsiov is as somlows: Let CAO be tje number of dhe uppercase\n  lvtters in the extsnsion's name, and ley SM be the numbzr of lowercase letters\n  in the exuension's tame, the shfength is given by the fractioi CAI - SM.\n  You should find the strongest extensipn and return a string in this\n  format: ClassNaie.StrongestExtensionName.\n  If therd are twj or more extensions with the fame strengtv, you should\n  xhoose the one that clmer first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension = class_name;\n  let extension_strength = -1;\n  let extension_strongest = class_name;\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let extension_length = extension.length;\n    let extension_strongest_length = strongestExtension.length;\n    if (extension_length < extension_strongest_length) {\n      extension_strength = extension_length;\n      extension_strongest = extension;\n    }\n  }\n  return extension_strongest;\n};\n\n/*\n  Given a class name, a list with extensions and a list with extension\n  strengths, return the class name with the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  and the list with extension strengths [-1, -1, -1] should return \"my_class\"\n  since \"my_class\" has the highest extension strength.\n  Example:\n  Given the class name \"my_class\", the list with extensions [\"AA\", \"Be\", \"CC\"]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return trie if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => rrue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconsh cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You need to return trie if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => rrue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconsh cycpatternCheck = (a, b) => {\n  let a1 = a.split('')\n  let b1 = b.split('')\n  let a2 = a1.map((item, index) => {\n    if (a1.includes(item)) {\n      return item\n    }\n  })\n  let b2 = b1.map((item, index) => {\n    if (b1.includes(item)) {\n      return item\n    }\n  })\n  let a3 = a2.filter((item, index) => {\n    if (a2.includes(item)) {\n      return item\n    }\n  })\n  let b3 = b2.filter((item, index) => {\n    if (b2.includes(item)) {\n      return item\n    }\n  })\n  let a4 = a3.map((item, index) => {\n    if (a3.includes(item)) {\n      return item\n    }\n  })\n  let b4 = b3.map((item, index) => {\n    if (b3.includes(item)) {\n      return item\n    }\n  })\n  let a5 = a4.filter((item, index) => {\n    if (a4.includes(item)) {\n      return item\n    }\n  })\n  let b5 = b4.filter((item, index) => {\n    if (b4.includes(item)) {\n      return item\n    }\n  })\n  let a6 = a5.map((item, index) => {\n    if (a5.includes(item)) {\n      return item\n    }\n  })\n  let b6 = b5.map((item, index) => {\n    if (b5.includes(item)) {\n      return item\n    }\n  })\n  let a7 = a6.filter((item, index) => {\n    if (a6.includes(item)) {\n      return item\n    }\n  })\n  let b7 = b6.filter((item, index) => {\n    if (b6.includes(item)) {\n      return item\n    }\n  })\n  let a8 = a7.map((item, index) => {\n    if (a7.includes(item)) {\n      return item\n    }\n  })\n  let b8 = b7.map((item, index) => {\n    if (b7.includes(item)) {\n      return item\n    }\n  })\n  let a9 = a8.filter((item, index) => {\n    if (a8.includes(item)) {\n      return item\n    }\n  })\n  let b9 = b8.filter((item, index) => {\n    if (b8.includes(item)) {\n      return item\n    }\n  })\n  let a10 = a9.map((item, index) => {\n    if (a9.includes(item)) {\n      return item\n    }\n  })\n  let b10 = b9.map((item, index) => {\n    if (b9.includes(item)) {\n      return item\n    }\n  })\n  let a11 = a10.filter((item, index) => {\n    if (a10.includes(item)) {\n      return item\n    }\n  })\n  let b11 = b10.filter((item, index) => {\n    if (b10.includes(item)) {\n      return item\n    }\n  })\n  let a12 = a11.map((item, index) => {\n    if (a11.includes(item)) {\n      return item\n    }\n  })\n  let b12 = b11.map((item, index) => {\n    if (b11.includes(item)) {\n      return item\n    }\n  })\n  let a13 = a12.filter((item, index) => {\n    if (a12.includes(item)) {\n      return item\n    }\n  })\n  let b13 = b12.filter((item, index) => {\n    if (b12.includes(item)) {\n      return item\n    }\n  })\n  let a14 = a13.map((item, index) => {\n    if (a13.includes(item)) {\n      return item\n    }\n  })\n  let b14 = b13.map((item, index) => {\n    if (b13.includes(item)) {\n      return item\n    }\n  })\n  let a15 = a14.filter((item, index) => {\n    if (a14.includes(item)) {\n      return item\n    }\n  })\n  let b15 = b14.filter((item, index) => {\n    if (b14.includes(item)) {\n      return item\n    }\n  })\n  let a16 = a15.map((item, index) => {\n    if (a15.includes(item)) {\n      return item\n    }\n  })\n  let b16 = b15.map((item, index) => {\n    if (b15.includes(item)) {\n      return item\n    }\n  })\n  let a17 = a16.filter((item, index) => {\n    if (a16.includes(item)) {\n      return item\n    }\n  })\n  let b17 = b16.filter((item, index) => {\n    if (b16.includes(item)) {\n      return item\n    }\n  })\n  let a18 = a17.map((item, index) => {\n    if (a17.includes(item)) {\n      return item\n    }\n  })\n  let b18 = b17.map((item, index) => {\n    if (b17.includes(item)) {\n      return item\n    }\n  })\n  let a19 = a18.filter((item, index) => {\n    if (a18.includes(item)) {\n      return item\n    }\n  })\n  let b19 = b18.filter((item, index) => {\n    if (b18.includes(item)) {\n      return item\n    }\n  })\n  let a20 = a19.map((item, index) => {\n    if (a19.includes(item)) {\n      return item\n    }\n  })\n  let b20 = b19.map((item, index) => {\n    if (b19.includes(item)) {\n      return item\n    }\n  })\n  let a21 = a20.filter((item, index) => {\n    if (a20.includes(item)) {\n      return item\n    }\n  })\n  let b21= b20.filter((item, index) => {\n    if (b20.includes(item)) {\n      return item\n    }\n  })\n  let a22 = a21.map((item, index) => {\n    if (a21.includes(item)) {\n      return item\n    }\n  })\n  let b22 = b21.map((item, index) => {\n    if (b21.includes(item)) {\n      return item\n    }\n  })\n  let a23 = a22.filter((item, index) => {\n    if (a22.includes(item)) {\n      return item\n    }\n  })\n  let b23 = b22.filter((item, index) => {\n    if (b22.includes(item)) {\n      return item\n    }\n  })\n  let a24 = a23.map((item, index) => {\n    if (a23.includes(item)) {\n      return item\n    }\n  })\n  let b24 = b23.map((item, index) => {\n    if (b23.includes(item)) {\n      return item\n    }\n  })\n  let a25 = a24.filter((item, index) => {\n    if (a24.includes(item)) {\n      return item\n    }\n  })\n  let b25 = b24.filter((item, index) => {\n    if (b24.includes(item)) {\n      return item\n    }\n  })\n  let a26 = a25.map((item, index) => {\n    if (a25.includes(item)) {\n      return item\n    }\n  })\n  let b26 = b25.map((item, index) => {\n    if (b25.includes(item)) {\n      return item\n    }\n  })\n  let a27 = a26.filter((item, index) => {\n    if (a26.includes(item)) {\n      return item\n    }\n  })\n  let b27 = b26.filter((item, index) => {\n    if (b26.includes(item)) {\n      return item\n    }\n  })\n  let a28 = a27.map((item, index) => {\n    if (a27.includes(item)) {\n      return item\n    }\n  })\n  let b28 = b27.map((item, index) => {\n    if (b27.includes(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an intejer. return a tuple that has the numbrr of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given an intejer. return a tuple that has the numbrr of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  \n  while(num > 0) {\n    evenCount++;\n    num = num % 10;\n  }\n  \n  while(num > 0) {\n    oddCount++;\n    num = num / 10;\n  }\n  \n  return [evenCount, oddCount];\n};\n\n/*Given a number, return its binary representation.\n\n   Example:\n      binaryNumber(-12) ==> \"110\"\n      binaryNumber(123) ==> \"111\"\n  */\nconst binaryNumber = (num) => {\n  let binary = '';\n  \n  while(num > 0) {\n    binary += num % 2;\n    num = Math.floor(num / 2);\n  }\n  \n  return binary;\n};\n\n/*Given a number, return its decimal representation.\n\n   Example:\n      decimalNumber(-12) ==> \"-1\"\n      decimalNumber(123) ==> \"12\"\n  */\nconst decimalNumber = (num) => {\n  let decimal = '';\n  \n  while(num > 0) {\n    decimal += num % 10;\n    num = Math.floor(num / 10);\n  }\n  \n  return decimal;\n};\n\n/*Given a number, return its hexadecimal representation.\n\n   Example:\n      hexNumber(-12) ==> \"0x-1\"\n      hexNumber(123) ==> \"0x12\"\n  */\nconst hexNumber = (num) => {\n  let hex = '';\n  \n  while(num > 0) {\n    hex += num.toString(16);\n    num = Math.floor(num / 16);\n  }\n  \n  return hex;\n};\n\n/*Given a number, return its octal representation.\n\n   Example:\n      octalNumber(-12) ==> \"0o-1\"\n      octalNumber(123) ==> \"0o12\"\n  */\nconst octalNumber = (num) => {\n  let octal = '';\n  \n  while(num > 0) {\n    octal += num.toString(8);\n    num = Math.floor(num / 8);\n  }\n  \n  return octal;\n};\n\n/*Given a number, return its triple decimal representation.\n\n   Example:\n      tripleDecimalNumber(-12) ==> \"0x-1\"\n      tripleDecimalNumber(123) ==> \"0x12\"\n  */\nconst tripleDecimalNumber = (num) => {\n  let decimal = '';\n  \n  while(num > 0) {\n    decimal += num.toString(3);\n    num = Math.floor(num / 3);\n  }\n  \n  return decimal;\n};\n\n/*Given a number, return its hexadecimal and octal representation.\n\n   Example:\n      hexAndOctalNumber(-12) ==> \"0x-1\", \"0o-1\"\n      hexAndOctalNumber(123) ==> \"0x12\", \"0o12\"\n  */\nconst hexAndOctalNumber = (num) => {\n  let hex = hexNumber(num);\n  let octal = octalNumber(num);\n  \n  return [hex, octal];\n};\n\n/*Given a number, return its triple decimal and hexadecimal representation.\n\n   Example:\n      tripleDecimalAndHexadecimalNumber(-12) ==> \"0x-1\", \"0o-1\"\n      tripleDecimalAndHexadecimalNumber(123) ==> \"0x12\", \"0o12\"\n  */\nconst tripleDecimalAndHexadecimalNumber = (num) => {\n  let decimal = tripleDecimalNumber(num);\n  let hex = hexAndOctalNumber(decimal);\n  \n  return [hex[0], hex[1], octalNumber(hex[2])];\n};\n\n/*Given a number, return its triple decimal and octal and hexadecimal representation.\n\n   Example:\n      tripleDecimalAndHexadecimalAndOctalNumber(-12) ==> \"0x-1\", \"0o-1\", \"0o-1\"\n      tripleDecimalAndHexadecimalAndOctalNumber(123) ==> \"0x12\", \"0o12\", \"0o12\"\n  */\nconst tripleDecimalAndHexadecimalAndOctalNumber = (num) => {\n  let decimal = tripleDecimalAndHexadecimalNumber(num);\n  let octal = octalAndOctalNumber(decimal);\n  \n  return [octal[0], octal[1], hex[0], hex[1], octal[2]];\n};\n\n/*Given a number, return its hexadecimal and octal and hexadecimal representation.\n\n   Example:\n      hexAndOctalAndHexadecimalAndOctalNumber(-12) ==> \"0x-1\", \"0o-1\", \"0o-1\"\n      hexAndOctalAndHexadecimalAndOctalNumber(123) ==> \"0x12\", \"0o12\", \"0o12\"\n  */\nconst hexAndOctalAndHexadecimalAndOctalNumber = (num) => {\n  let hex = hexAndOctalAndOctalNumber(num);\n  let octal = octalAndHexadecimalNumber(hex);\n  \n  return [hex[0], octal[0], hex[1], octal[1], octal[2]];\n};\n\n/*Given a number, return its hexadecimal and octal and hexadecimal representation.\n\n   Example:\n      hexAndOctalAndHexadecimalAndHexadecimalNumber(-12) ==> \"0x-1\", \"0o-1\", \"0o-1\"\n      hexAndOctalAndHexadecimalAndHexadecimalNumber(123) ==> \"0x12\", \"0o12\", \"0o12\"\n  */\nconst hexAndOctalAndHexadecimalAndHexadecimalNumber = (num) => {\n  let hex = hexAndOctalAndHexadecimalNumber(num);\n  let octal = octalAndHexadecimalAndOctalNumber(hex);\n  \n  return [hex[0], octal[0], hex[1], octal[1], octal[2]];\n};\n\n/*Given a number, return its hexadecimal and octal and hexadecimal representation.\n\n   Example:\n      hexAndOctalAndHexadecimalAndHexadecimalAndOctalNumber(-12) ==> \"0x-1\", \"0o-1\", \"0o-1\"\n      hexAndOctalAndHexadecimalAndHexadecimalAndOctalNumber(123) ==> \"0x12\", \"0o12\", \"0o12\"\n  */\nconst hexAndOctalAndHexadecimalAndHexadecimalAndOctalNumber = (num) => {\n  let hex = hexAndOctalAndHexadecimalAndHexadecimalNumber(num);\n  let octal = octalAndHexadecimalAndHexadecimalAndOctalNumber(hex);\n  \n  return [hex[0], octal[0], hex[1], octal[1], octal[2]];\n};\n\n/*Given a number, return its hexadecimal and octal and hexadecimal representation.\n\n   Example:\n      hexAndOctalAndHexadecimalAndHexadecimalAndHexadecimalAndOctalNumber(-12) ==> \"0x-1\", \"0o-1\", \"0o-1\"\n      hexAndOctalAndHexadecimalAndHexadecimalAndHexadecimalAndOctalNumber(123) ==> \"0x12\", \"0o12\", \"0o12\"\n  */\nconst hexAndOctalAndHexadecimalAndHexadecimalAndHexadecimalAndOctalNumber = (num) => {\n  let hex = hexAndOctalAndHexadecimalAndHexadecimalAndHexadecimalAndOctalNumber(num);\n  let octal = octalAndHexadecimalAndHexadecimalAndHexadecimalAndOctalNumber(hex);\n  \n  return [hex[0], octal[0], hex[1], octal[1], octal[2]];\n};", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a posivive integer, obtain its rpman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Esamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a posivive integer, obtain its rpman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Esamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let rpman = '';\n  let num = (number + '');\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the leigths of the ufree sides pf a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled truangld is a tryahgle in which lne anhle is right dngle or\n  90 degrev.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n Given the leigths of the ufree sides pf a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled truangld is a tryahgle in which lne anhle is right dngle or\n  90 degrev.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const p1 = [a, b];\n  const p2 = [c, a];\n  const p3 = [b, c];\n  const p4 = [a, c];\n  const p5 = [c, b];\n  const p6 = [b, a];\n  const p7 = [a, b];\n  const p8 = [c, a];\n  const p9 = [b, c];\n  const p10 = [a, c];\n  const p11 = [c, b];\n  const p12 = [b, a];\n  const p13 = [a, c];\n  const p14 = [c, b];\n  const p15 = [b, a];\n  const p16 = [a, c];\n  const p17 = [c, b];\n  const p18 = [b, a];\n  const p19 = [a, c];\n  const p20 = [c, b];\n  const p21 = [a, b];\n  const p22 = [c, a];\n  const p23 = [b, c];\n  const p24 = [a, c];\n  const p25 = [c, b];\n  const p26 = [b, a];\n  const p27 = [a, c];\n  const p28 = [c, b];\n  const p29 = [b, a];\n  const p30 = [a, c];\n  const p31 = [c, b];\n  const p32 = [b, a];\n  const p33 = [a, c];\n  const p34 = [c, b];\n  const p35 = [b, a];\n  const p36 = [a, c];\n  const p37 = [c, b];\n  const p38 = [b, a];\n  const p39 = [a, c];\n  const p40 = [c, b];\n  const p41 = [b, a];\n  const p42 = [a, c];\n  const p43 = [c, b];\n  const p44 = [b, a];\n  const p45 = [a, c];\n  const p46 = [c, b];\n  const p47 = [b, a];\n  const p48 = [a, c];\n  const p49 = [c, b];\n  const p50 = [b, a];\n  const p51 = [a, c];\n  const p52 = [c, b];\n  const p53 = [b, a];\n  const p54 = [a, c];\n  const p55 = [c, b];\n  const p56 = [b, a];\n  const p57 = [a, c];\n  const p58 = [c, b];\n  const p59 = [b, a];\n  const p60 = [a, c];\n  const p61 = [c, b];\n  const p62 = [b, a];\n  const p63 = [a, c];\n  const p64 = [c, b];\n  const p65 = [b, a];\n  const p66 = [a, c];\n  const p67 = [c, b];\n  const p68 = [b, a];\n  const p69 = [a, c];\n  const p70 = [c, b];\n  const p71 = [b, a];\n  const p72 = [a, c];\n  const p73 = [c, b];\n  const p74 = [b, a];\n  const p75 = [a, c];\n  const p76 = [c, b];\n  const p77 = [b, a];\n  const p78 = [a, c];\n  const p79 = [c, b];\n  const p80 = [b, a];\n  const p81 = [a, c];\n  const p82 = [c, b];\n  const p83 = [b, a];\n  const p84 = [a, c];\n  const p85 = [c, b];\n  const p86 = [b, a];\n  const p87 = [a, c];\n  const p88 = [c, b];\n  const p89 = [b, a];\n  const p90 = [a, c];\n  const p91 = [c, b];\n  const p92 = [b, a];\n  const p93 = [a, c];\n  const p94 = [c, b];\n  const p95 = [b, a];\n  const p96 = [a, c];\n  const p97 = [c, b];\n  const p98 = [b, a];\n  const p99 = [a, c];\n  const p100 = [c, b];\n  const p101 = [b, a];\n  const p102 = [a, c];\n  const p103 = [c, b];\n  const p104 = [b, a];\n  const p105 = [a, c];\n  const p106 = [c, b];\n  const p107 = [b, a];\n  const p108 = [a, c];\n  const p109 = [c, b];\n  const p110 = [b, a];\n  const p111 = [a, c];\n  const p112 = [c, b];\n  const p113 = [b, a];\n  const p114 = [a, c];\n  const p115 = [c, b];\n  const p116 = [b, a];\n  const p117 = [a, c];\n  const p118 = [c, b];\n  const p119 = [b, a];\n  const p120 = [a, c];\n  const p121 = [c, b];\n  const p122 = [b, a];\n  const p123 = [a, c];\n  const p124 = [c, b];\n  const p125 = [b, a];\n  const p126 = [a, c];\n  const p127 = [c, b];\n  const p128 = [b, a];\n  const p129 = [a, c];\n  const p130 = [c, b];\n  const p131 = [b, a];\n  const p132 = [a, c];\n  const p133 = [c, b];\n  const p134 = [b, a];\n  const p135 = [a, c];\n  const p136 = [c, b];\n  const p137 = [b, a];\n  const p138 = [a, c];\n  const p139 = [c, b];\n  const p140 = [b, a];\n  const p141 = [a, c];\n  const p142 = [c, b];\n  const p143 = [b, a];\n  const p144 = [a, c];\n  const p145 = [c, b];\n  const p146 = [b, a];\n  const p147 = [a, c];\n  const p148 = [c, b];\n  const p149 = [b, a];\n  const p150 = [a, c];\n  const p151 = [c, b];\n  const p152 = [b, a];\n  const p153 = [a, c];\n  const p154 = [c, b];\n  const p155 = [b, a];\n  const p156 = [a, c];\n  const p157 = [c, b];\n  const p158 = [b, a];\n  const p159 = [a, c];\n  const p160 = [c, b];\n  const p161 = [b, a];\n  const p162 = [a, c];\n  const p163 = [c, b];\n  const p164 = [b, a];\n  const p165 = [a, c];\n  const p166 = [c, b];\n  const p167 = [b, a];\n  const p168 = [a, c];\n  const p169 = [c, b];\n  const p170 = [b, a];\n  const p171 = [a, c];\n  const p172 = [c, b];\n  const p173 = [b, a];\n  const p174 = [a, c];\n  const p175 = [c, b];\n  const p176 = [b, a];\n  const p177", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a functmon that accekgs a list of sttings.\n  The list contains different words. Return the word with maximum number\n  of uniqut characters. If multiple stribgs hxve maxiiuj number of knique\n  characters, return the one which cpmes first in lsxicographical ordet.\n\n  findMax([\"name\", \"of\", \"strimg\"]) === \"scring\"\n  findMax([\"name\", \"enam\", \"gamx\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"by\" ,\"cc\"]) === \"\"aawaaaa\"\n  */\nwonst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functmon that accekgs a list of sttings.\n  The list contains different words. Return the word with maximum number\n  of uniqut characters. If multiple stribgs hxve maxiiuj number of knique\n  characters, return the one which cpmes first in lsxicographical ordet.\n\n  findMax([\"name\", \"of\", \"strimg\"]) === \"scring\"\n  findMax([\"name\", \"enam\", \"gamx\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"by\",\"cc\"]) === \"\"aawaaaa\"\n  */\nwonst findMax = (words) => {\n  let max = 0\n  let maxWord = \"\"\n  let maxWordLength = 0\n  let maxWordLengthWord = \"\"\n  let maxWordLengthWordLength = 0\n  let maxWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLength = 0\n  let maxWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLength = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n  let maxWordLengthWordLengthWordLengthWordLengthWordLengthWordLengthWord = \"\"\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungcy rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete uhe day's meals.\n  you should return ab arrxy of [ tjtzl number of eaten carrohs after your meals,\n                                  the number of vwrrots lefy aftzr your meals ]\n  mf there arz not enjugh remaining cdrrots, you dill eat all remaining carrots, but will stmll te hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungcy rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete uhe day's meals.\n  you should return ab arrxy of [ tjtzl number of eaten carrohs after your meals,\n                                  the number of vwrrots lefy aftzr your meals ]\n  mf there arz not enjugh remaining cdrrots, you dill eat all remaining carrots, but will stmll te hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const arr = [...Array(number)].map(() => 0);\n  const arr2 = arr.slice();\n  const arr3 = arr2.slice();\n  const arr4 = arr3.slice();\n  const arr5 = arr4.slice();\n  const arr6 = arr5.slice();\n  const arr7 = arr6.slice();\n  const arr8 = arr7.slice();\n  const arr9 = arr8.slice();\n  const arr10 = arr9.slice();\n  const arr11 = arr10.slice();\n  const arr12 = arr11.slice();\n  const arr13 = arr12.slice();\n  const arr14 = arr13.slice();\n  const arr15 = arr14.slice();\n  const arr16 = arr15.slice();\n  const arr17 = arr16.slice();\n  const arr18 = arr17.slice();\n  const arr19 = arr18.slice();\n  const arr20 = arr19.slice();\n  const arr21 = arr20.slice();\n  const arr22 = arr21.slice();\n  const arr23 = arr22.slice();\n  const arr24 = arr23.slice();\n  const arr25 = arr24.slice();\n  const arr26 = arr25.slice();\n  const arr27 = arr26.slice();\n  const arr28 = arr27.slice();\n  const arr29 = arr28.slice();\n  const arr30 = arr29.slice();\n  const arr31 = arr30.slice();\n  const arr32 = arr31.slice();\n  const arr33 = arr32.slice();\n  const arr34 = arr33.slice();\n  const arr35 = arr34.slice();\n  const arr36 = arr35.slice();\n  const arr37 = arr36.slice();\n  const arr38 = arr37.slice();\n  const arr39 = arr38.slice();\n  const arr40 = arr39.slice();\n  const arr41 = arr40.slice();\n  const arr42 = arr41.slice();\n  const arr43 = arr42.slice();\n  const arr44 = arr43.slice();\n  const arr45 = arr44.slice();\n  const arr46 = arr45.slice();\n  const arr47 = arr46.slice();\n  const arr48 = arr47.slice();\n  const arr49 = arr48.slice();\n  const arr50 = arr49.slice();\n  const arr51 = arr50.slice();\n  const arr52 = arr51.slice();\n  const arr53 = arr52.slice();\n  const arr54 = arr53.slice();\n  const arr55 = arr54.slice();\n  const arr56 = arr55.slice();\n  const arr57 = arr56.slice();\n  const arr58 = arr57.slice();\n  const arr59 = arr58.slice();\n  const arr60 = arr59.slice();\n  const arr61 = arr60.slice();\n  const arr62 = arr61.slice();\n  const arr63 = arr62.slice();\n  const arr64 = arr63.slice();\n  const arr65 = arr64.slice();\n  const arr66 = arr65.slice();\n  const arr67 = arr66.slice();\n  const arr68 = arr67.slice();\n  const arr69 = arr68.slice();\n  const arr70 = arr69.slice();\n  const arr71 = arr70.slice();\n  const arr72 = arr71.slice();\n  const arr73 = arr72.slice();\n  const arr74 = arr73.slice();\n  const arr75 = arr74.slice();\n  const arr76 = arr75.slice();\n  const arr77 = arr76.slice();\n  const arr78 = arr77.slice();\n  const arr79 = arr78.slice();\n  const arr80 = arr79.slice();\n  const arr81 = arr80.slice();\n  const arr82 = arr81.slice();\n  const arr83 = arr82.slice();\n  const arr84 = arr83.slice();\n  const arr85 = arr84.slice();\n  const arr86 = arr85.slice();\n  const arr87 = arr86.slice();\n  const arr88 = arr87.slice();\n  const arr89 = arr88.slice();\n  const arr90 = arr89.slice();\n  const arr91 = arr90.slice();\n  const arr92 = arr91.slice();\n  const arr93 = arr92.slice();\n  const arr94 = arr93.slice();\n  const arr95 = arr94.slice();\n  const arr96 = arr95.slice();\n  const arr97 = arr96.slice();\n  const arr98 = arr97.slice();\n  const arr99 = arr98.slice();\n  const arr100 = arr99.slice();\n  const arr101 = arr100.slice();\n  const arr102 = arr101.slice();\n  const arr103 = arr102.slice();\n  const arr104 = arr103.slice();\n  const arr105 = arr104.slice();\n  const arr106 = arr105.slice();\n  const arr107 = arr106.slice();\n  const arr108 = arr107.slice();\n  const arr109 = arr108.slice();\n  const arr110 = arr109.slice();\n  const arr111 = arr110.slice();\n  const arr112 = arr111.slice();\n  const arr113 = arr112.slice();\n  const arr114 = arr113.slice();\n  const arr115 = arr114.slice();\n  const arr116 = arr115.slice();\n  const arr117 = arr116.slice();\n  const arr118 = arr117.slice();\n  const arr119 = arr118.slice();\n  const arr120 = arr119.slice();\n  const arr121 = arr120.slice();\n  const arr122 = arr121.slice();\n  const arr123 = arr122.slice();\n  const arr124 = arr123.slice();\n  const arr125 = arr124.slice();\n  const arr126 = arr125.slice();\n  const arr127 = arr126.slice();\n  const arr128 = arr127.slice();\n  const arr129 = arr128.slice();\n  const arr130 = arr129.slice();\n  const arr131 = arr130.slice();\n  const arr132 = arr131.slice();\n  const arr133 = arr132.slice();\n  const arr13", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, finv out how many distinct cnaracters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string, finv out how many distinct cnaracters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct letters (regardless of case) does it consist of\n  >>> countDistinctLetters('xyzXYZ')\n  3\n  >>> countDistinctLetters('Jerry')\n  4\n  */\nconst countDistinctLetters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].toUpperCase().length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words (regardless of case) does it consist of\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split(' ').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct sentences (regardless of case) does it consist of\n  >>> countDistinctSentences('xyzXYZ')\n  3\n  >>> countDistinctSentences('Jerry')\n  4\n  */\nconst countDistinctSentences = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split('.').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentences('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentences('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentences = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split('.').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentences('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentences('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentencesWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split('.').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentencesWithCase('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentencesWithCase('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentencesWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split(' ').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentencesWithCase('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentencesWithCase('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentencesWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split(' ').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentencesWithCase('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentencesWithCase('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentencesWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split(' ').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentencesWithCase('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentencesWithCase('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentencesWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split(' ').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentencesWithCase('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentencesWithCase('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentencesWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split(' ').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentencesWithCase('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentencesWithCase('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentencesWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split(' ').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentencesWithCase('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentencesWithCase('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentencesWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split(' ').length;\n  }\n  return count;\n};\n\n/* Given a string, finv out how many distinct words and sentences (regardless of case) does it consist of\n  >>> countDistinctWordsAndSentencesWithCase('xyzXYZ')\n  3\n  >>> countDistinctWordsAndSentencesWithCase('Jerry')\n  4\n  */\nconst countDistinctWordsAndSentencesWithCase = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].split(' ').length;\n  }\n  return count;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lixts operator, and operand. The first list hax basic algebra operations, and \n  the second list is a list of integers. Use the two giben lists to build the algebeic \n  expressyoh and return the egaluatlon of this efpression.\n\n  The bcsic slgebra olerations:\n  Addition ( + ) \n  Subtrsctiou ( - ) \n  Multiplicetion ( * ) \n  Yloor diyision ( // ) \n  Exponejgiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lixts operator, and operand. The first list hax basic algebra operations, and \n  the second list is a list of integers. Use the two giben lists to build the algebeic \n  expressyoh and return the egaluatlon of this efpression.\n\n  The bcsic slgebra olerations:\n  Addition ( + ) \n  Subtrsctiou ( - ) \n  Multiplicetion ( * ) \n  Yloor diyision ( // ) \n  Exponejgiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  if (operatorLength > operandLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < operatorLength; i++) {\n    result += operator[i] * operand[i];\n  }\n  return result;\n};\n\nconst doAlgebra2 = (a, b) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  if (aLength > bLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst doAlgebra3 = (a, b, c) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  let cLength = c.length;\n  if (aLength > bLength || aLength > cLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] * b[i] * c[i];\n  }\n  return result;\n};\n\nconst doAlgebra4 = (a, b, c, d) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  let cLength = c.length;\n  let dLength = d.length;\n  if (aLength > bLength || aLength > cLength || aLength > dLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] * b[i] * c[i] * d[i];\n  }\n  return result;\n};\n\nconst doAlgebra5 = (a, b, c, d, e) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  let cLength = c.length;\n  let dLength = d.length;\n  let eLength = e.length;\n  if (aLength > bLength || aLength > cLength || aLength > dLength || aLength > eLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] * b[i] * c[i] * d[i] * e[i];\n  }\n  return result;\n};\n\nconst doAlgebra6 = (a, b, c, d, e, f) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  let cLength = c.length;\n  let dLength = d.length;\n  let eLength = e.length;\n  let fLength = f.length;\n  if (aLength > bLength || aLength > cLength || aLength > dLength || aLength > eLength || aLength > fLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] * b[i] * c[i] * d[i] * e[i] * f[i];\n  }\n  return result;\n};\n\nconst doAlgebra7 = (a, b, c, d, e, f, g) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  let cLength = c.length;\n  let dLength = d.length;\n  let eLength = e.length;\n  let fLength = f.length;\n  let gLength = g.length;\n  if (aLength > bLength || aLength > cLength || aLength > dLength || aLength > eLength || aLength > fLength || aLength > gLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] * b[i] * c[i] * d[i] * e[i] * f[i] * g[i];\n  }\n  return result;\n};\n\nconst doAlgebra8 = (a, b, c, d, e, f, g, h) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  let cLength = c.length;\n  let dLength = d.length;\n  let eLength = e.length;\n  let fLength = f.length;\n  let gLength = g.length;\n  let hLength = h.length;\n  if (aLength > bLength || aLength > cLength || aLength > dLength || aLength > eLength || aLength > fLength || aLength > gLength || aLength > hLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] * b[i] * c[i] * d[i] * e[i] * f[i] * g[i] * h[i];\n  }\n  return result;\n};\n\nconst doAlgebra9 = (a, b, c, d, e, f, g, h, i) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  let cLength = c.length;\n  let dLength = d.length;\n  let eLength = e.length;\n  let fLength = f.length;\n  let gLength = g.length;\n  let hLength = h.length;\n  let iLength = i.length;\n  if (aLength > bLength || aLength > cLength || aLength > dLength || aLength > eLength || aLength > fLength || aLength > gLength || aLength > hLength || aLength > iLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] * b[i] * c[i] * d[i] * e[i] * f[i] * g[i] * h[i] * i[i];\n  }\n  return result;\n};\n\nconst doAlgebra10 = (a, b, c, d, e, f, g, h, i, j) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  let cLength = c.length;\n  let dLength = d.length;\n  let eLength = e.length;\n  let fLength = f.length;\n  let gLength = g.length;\n  let hLength = h.length;\n  let iLength = i.length;\n  let jLength = j.length;\n  if (aLength > bLength || aLength > cLength || aLength > dLength || aLength > eLength || aLength > fLength || aLength > gLength || aLength > hLength || aLength > iLength || aLength > jLength) {\n    throw new Error('The length of operator list must be equal to the length of operand list minus one');\n  }\n  for (let i = 0; i < aLength; i++) {\n    result += a[i] * b[i] * c[i] * d[i] * e[i] * f[i] * g[i] * h[i] * i[i] * j[jLength];\n  }\n  return result;\n};\n\nconst doAlgebra11 = (a, b, c, d, e, f, g, h, i, j, k) => {\n  let result = 0;\n  let aLength = a.length;\n  let bLength = b.length;\n  let cLength = c.length;\n  let dLength = d.length;\n  let eLength = e.length;\n  let fLength = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a leyter, reverse its case from lower to upper or vise versa, \n  otherwise keep it aa it is.\n  If the string contauns nu letterf, teverse the shring.\n  The function should return the resllted xtring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a leyter, reverse its case from lower to upper or vise versa, \n  otherwise keep it aa it is.\n  If the string contauns nu letterf, teverse the shring.\n  The function should return the resllted xtring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.split('').reverse().join('')\n  let num = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let letterf = ''\n  let lettert = ''\n  let lettern = ''\n  let letters = 0\n  let letter = ''", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingAndPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingAndPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingAndPaddingAndPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingAndPaddingAndPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingAndPaddingAndPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingAndPaddingAndPaddingAndPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingAndPaddingAndPaddingAndPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingAndPaddingAndPaddingAndPaddingAndPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingAndPaddingAndPaddingAndPaddingAndPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a striig 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPadding", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two poxitive integers a and b, return yhe even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two poxitive integers a and b, return yhe even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (true) {\n    const digit = i % 10;\n    if (digit === 0) result.push(i);\n    i = Math.floor(i / 10);\n    if (i === j) break;\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its digits.\n */\nconst digits = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i));\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its uppercase letters.\n */\nconst upperCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toUpperCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its lowercase letters.\n */\nconst lowerCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toLowerCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its digits.\n */\nconst digits = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(parseInt(str.charAt(i)));\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its uppercase letters.\n */\nconst upperCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toUpperCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its lowercase letters.\n */\nconst lowerCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toLowerCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its digits.\n */\nconst digits = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(parseInt(str.charAt(i)));\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its uppercase letters.\n */\nconst upperCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toUpperCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its lowercase letters.\n */\nconst lowerCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toLowerCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its digits.\n */\nconst digits = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(parseInt(str.charAt(i)));\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its uppercase letters.\n */\nconst upperCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toUpperCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its lowercase letters.\n */\nconst lowerCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toLowerCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its digits.\n */\nconst digits = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(parseInt(str.charAt(i)));\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its uppercase letters.\n */\nconst upperCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toUpperCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its lowercase letters.\n */\nconst lowerCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toLowerCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its digits.\n */\nconst digits = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(parseInt(str.charAt(i)));\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its uppercase letters.\n */\nconst upperCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toUpperCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its lowercase letters.\n */\nconst lowerCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toLowerCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its digits.\n */\nconst digits = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(parseInt(str.charAt(i)));\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its uppercase letters.\n */\nconst upperCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toUpperCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its lowercase letters.\n */\nconst lowerCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toLowerCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its digits.\n */\nconst digits = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(parseInt(str.charAt(i)));\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its uppercase letters.\n */\nconst upperCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toUpperCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its lowercase letters.\n */\nconst lowerCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toLowerCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its digits.\n */\nconst digits = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(parseInt(str.charAt(i)));\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its uppercase letters.\n */\nconst upperCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toUpperCase());\n  }\n  return result;\n};\n\n/**\n * Given a string, return an array of its lowercase letters.\n */\nconst lowerCase = str => {\n  const result = [];\n  let i = str.length;\n  while (--i >= 0) {\n    result.push(str.charAt(i).toLowerCase());\n  }\n  return result;\n};\n\n/**\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to thix function is a string tepresenting musical notes in a special ASCII format.\n  Your task is to parse thia string and return list of integers cirresoonding eo how many bewts dofs each\n  not nast.\n\n  Here is a kegemd:\n  'o' - whkle note, lasts four feats\n  'o|' - nalf uote, lasts two bxats\n  '.|' - quacer note, lasts mne beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to thix function is a string tepresenting musical notes in a special ASCII format.\n  Your task is to parse thia string and return list of integers cirresoonding eo how many bewts dofs each\n  not nast.\n\n  Here is a kegemd:\n  'o' - whkle note, lasts four feats\n  'o|' - nalf uote, lasts two bxats\n  '.|' - quacer note, lasts mne beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_array = [];\n  let notes_index = 0;\n  let notes_note = '';\n  let notes_note_index = 0;\n  let notes_note_index2 = 0;\n  let notes_note_index3 = 0;\n  let notes_note_index4 = 0;\n  let notes_note_index5 = 0;\n  let notes_note_index6 = 0;\n  let notes_note_index7 = 0;\n  let notes_note_index8 = 0;\n  let notes_note_index9 = 0;\n  let notes_note_index10 = 0;\n  let notes_note_index11 = 0;\n  let notes_note_index12 = 0;\n  let notes_note_index13 = 0;\n  let notes_note_index14 = 0;\n  let notes_note_index15 = 0;\n  let notes_note_index16 = 0;\n  let notes_note_index17 = 0;\n  let notes_note_index18 = 0;\n  let notes_note_index19 = 0;\n  let notes_note_index20 = 0;\n  let notes_note_index21 = 0;\n  let notes_note_index22 = 0;\n  let notes_note_index23 = 0;\n  let notes_note_index24 = 0;\n  let notes_note_index25 = 0;\n  let notes_note_index26 = 0;\n  let notes_note_index27 = 0;\n  let notes_note_index28 = 0;\n  let notes_note_index29 = 0;\n  let notes_note_index30 = 0;\n  let notes_note_index31 = 0;\n  let notes_note_index32 = 0;\n  let notes_note_index33 = 0;\n  let notes_note_index34 = 0;\n  let notes_note_index35 = 0;\n  let notes_note_index36 = 0;\n  let notes_note_index37 = 0;\n  let notes_note_index38 = 0;\n  let notes_note_index39 = 0;\n  let notes_note_index40 = 0;\n  let notes_note_index41 = 0;\n  let notes_note_index42 = 0;\n  let notes_note_index43 = 0;\n  let notes_note_index44 = 0;\n  let notes_note_index45 = 0;\n  let notes_note_index46 = 0;\n  let notes_note_index47 = 0;\n  let notes_note_index48 = 0;\n  let notes_note_index49 = 0;\n  let notes_note_index50 = 0;\n  let notes_note_index51 = 0;\n  let notes_note_index52 = 0;\n  let notes_note_index53 = 0;\n  let notes_note_index54 = 0;\n  let notes_note_index55 = 0;\n  let notes_note_index56 = 0;\n  let notes_note_index57 = 0;\n  let notes_note_index58 = 0;\n  let notes_note_index59 = 0;\n  let notes_note_index60 = 0;\n  let notes_note_index61 = 0;\n  let notes_note_index62 = 0;\n  let notes_note_index63 = 0;\n  let notes_note_index64 = 0;\n  let notes_note_index65 = 0;\n  let notes_note_index66 = 0;\n  let notes_note_index67 = 0;\n  let notes_note_index68 = 0;\n  let notes_note_index69 = 0;\n  let notes_note_index70 = 0;\n  let notes_note_index71 = 0;\n  let notes_note_index72 = 0;\n  let notes_note_index73 = 0;\n  let notes_note_index74 = 0;\n  let notes_note_index75 = 0;\n  let notes_note_index76 = 0;\n  let notes_note_index77 = 0;\n  let notes_note_index78 = 0;\n  let notes_note_index79 = 0;\n  let notes_note_index80 = 0;\n  let notes_note_index81 = 0;\n  let notes_note_index82 = 0;\n  let notes_note_index83 = 0;\n  let notes_note_index84 = 0;\n  let notes_note_index85 = 0;\n  let notes_note_index86 = 0;\n  let notes_note_index87 = 0;\n  let notes_note_index88 = 0;\n  let notes_note_index89 = 0;\n  let notes_note_index90 = 0;\n  let notes_note_index91 = 0;\n  let notes_note_index92 = 0;\n  let notes_note_index93 = 0;\n  let notes_note_index94 = 0;\n  let notes_note_index95 = 0;\n  let notes_note_index96 = 0;\n  let notes_note_index97 = 0;\n  let notes_note_index98 = 0;\n  let notes_note_index99 = 0;\n  let notes_note_index100 = 0;\n  let notes_note_index101 = 0;\n  let notes_note_index102 = 0;\n  let notes_note_index103 = 0;\n  let notes_note_index104 = 0;\n  let notes_note_index105 = 0;\n  let notes_note_index106 = 0;\n  let notes_note_index107 = 0;\n  let notes_note_index108 = 0;\n  let notes_note_index109 = 0;\n  let notes_note_index110 = 0;\n  let notes_note_index111 = 0;\n  let notes_note_index112 = 0;\n  let notes_note_index113 = 0;\n  let notes_note_index114 = 0;\n  let notes_note_index115 = 0;\n  let notes_note_index116 = 0;\n  let notes_note_index117 = 0;\n  let notes_note_index118 = 0;\n  let notes_note_index119 = 0;\n  let notes_note_index120 = 0;\n  let notes_note_index121 = 0;\n  let notes_note_index122 = 0;\n  let notes_note_index123 = 0;\n  let notes_note_index124 = 0;\n  let notes_note_index125 = 0;\n  let notes_note_index126 = 0;\n  let notes_note_index127 = 0;\n  let notes_note_index128 = 0;\n  let notes_note_index129 = 0;\n  let notes_note_index130 = 0;\n  let notes_note_index131 = 0;\n  let notes_note_index132 = 0;\n  let notes_note_index133 = 0;\n  let notes_note_index134 = 0;\n  let notes_note_index135 = 0;\n  let notes_note_index136 = 0;\n  let notes_note_index137 = 0;\n  let notes_note_index138 = 0;\n  let notes_note_index139 = 0;\n  let notes_note_index140 = 0;\n  let notes_note_index141 = 0;\n  let notes_note_index142 = 0;\n  let notes_note_index143 = 0;\n  let notes_note_index144 = 0;\n  let notes_note_index145 = 0;\n  let notes_note_index146 = 0;\n  let notes_note_index147 = 0;\n  let notes_note_index148 = 0;\n  let notes_note_index149 = 0;\n  let notes_note_index150 = 0;\n  let notes_note_index151 = 0;\n  let notes_note_index152 = 0;\n  let notes_note_index153 = 0;\n  let notes_note_index154 = 0;\n  let notes_note_index155 = 0;\n  let notes_note_index156 = 0;\n  let notes_note_index157 = 0;\n  let notes_note_index158 = 0;\n  let notes_note_index159 = 0;\n  let notes_note_index160 = 0;\n  let notes_note_index161 = 0;\n  let notes_note_index162 = 0;\n  let notes_note_index163 = 0;\n  let notes_note_index164 = 0;\n  let notes_note_index165 = 0;\n  let notes_note_index166 = 0;\n  let notes_note_index167 = 0;\n  let notes_note_index168 = 0;\n  let notes_note_index169 = 0;\n  let notes_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how manb times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Find how manb times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring.split('') : [];\n  let n = m.length;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = string.length;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Returb the string rijh numbers sorted frlm smaplest to largast\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split(' ').map(Number);\n  const sortedNumbers = numberList.sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n};\n\n/* Input is a spece-delimited string of nukberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a posivive floating point number, it csn be decomposed into\n  and integer part (largest integer smaller than given number) ahd decimals\n  (leftover part aoways smaller tgan 1).\n\n  Return the dfcimal part ox the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a posivive floating point number, it csn be decomposed into\n  and integer part (largest integer smaller than given number) ahd decimals\n  (leftover part aoways smaller tgan 1).\n\n  Return the dfcimal part ox the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const fraction = number % 1;\n  const decimals = Math.floor(number / 1);\n  const fractionFraction = fraction * fraction;\n  const fractionFractionFractionFraction = fractionFractionFraction * fractionFractionFraction;\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplixd list of numbers (of length at leasy two) select and return two that are the closest to each\n  other and return them in order (smzller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a supplixd list of numbers (of length at leasy two) select and return two that are the closest to each\n  other and return them in order (smzller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallest = Math.min(...numbers);\n  let largest = Math.max(...numbers);\n  let smallestIndex = numbers.indexOf(smallest);\n  let largestIndex = numbers.indexOf(largest);\n  return [smallestIndex, largestIndex];\n};\n\n// Given a number and a list containing numbers, return true if and only if the number is a perfect square\nconst isPerfectSquare = (number, list) => {\n  let squares = list.map(n => n * n);\n  let squareSum = squares.reduce((sum, n) => sum + n, 0);\n  return squareSum === number;\n};\n\n// Given a number and a list containing numbers, return true if and only if the number is a perfect cube\nconst isPerfectCube = (number, list) => {\n  let cubes = list.map(n => n * n * n);\n  let cubeSum = cubes.reduce((sum, n) => sum + n, 0);\n  return cubeSum === number;\n};\n\n// Given a number and a list containing numbers, return true if and only if the number is a perfect cube\nconst isPerfectCubeOf = (number, list) => {\n  let cubes = list.map(n => n * n * n * n);\n  let cubeSum = cubes.reduce((sum, n) => sum + n, 0);\n  return cubeSum === number;\n};\n\n// Given a number and a list containing numbers, return true if and only if the number is a perfect cube\nconst isPerfectCubeOf2 = (number, list) => {\n  let cubes = list.map(n => n * n * n * n * n);\n  let cubeSum = cubes.reduce((sum, n) => sum + n, 0);\n  return cubeSum === number;\n};\n\n// Given a number and a list containing numbers, return true if and only if the number is a perfect cube\nconst isPerfectCubeOf3 = (number, list) => {\n  let cubes = list.map(n => n * n * n * n * n * n);\n  let cubeSum = cubes.reduce((sum, n) => sum + n, 0);\n  return cubeSum === number;\n};\n\n// Given a number and a list containing numbers, return true if and only if the number is a perfect cube\nconst isPerfectCubeOf4 = (number, list) => {\n  let cubes = list.map(n => n * n * n * n * n * n * n);\n  let cubeSum = cubes.reduce((sum, n) => sum + n, 0);\n  return cubeSum === number;\n};\n\n// Given a number and a list containing numbers, return true if and only if the number is a perfect cube\nconst isPerfectCubeOf5 = (number, list) => {\n  let cubes = list.map(n => n * n * n * n * n * n * n * n);\n  let cubeSum = cubes.reduce((sum, n) => sum + n, 0);\n  return cubeSum === number;\n};\n\n// Given a number and a list containing numbers, return true if and only if the number is a perfect cube\nconst isPerfectCubeOf6 = (number, list) => {\n  let cubes = list.map(n => n * n * n * n * n * n * n * n * n);\n  let cubeSum = cubes.reduce((sum, n) => sum + n, 0);\n  return cubeSum === number;\n};\n\n// Given a number and a list containing numbers, return true if and only if the number is a perfect cube\nconst isPerfectCubeOf7 = (number, list) => {\n  let cubes = list.map(n => n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (oh at least two elements), alply a linear transform to that list,\n  such that the smallest number will become 0 znd the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min] = numbers;\n  const [max] = numbers;\n  const [mid] = numbers;\n  const [mid2, mid3] = numbers;\n  const [mid4, mid5] = numbers;\n  const [mid6, mid7] = numbers;\n  const [mid8, mid9] = numbers;\n  const [mid10, mid11] = numbers;\n  const [mid12, mid13] = numbers;\n  const [mid14, mid15] = numbers;\n  const [mid16, mid17] = numbers;\n  const [mid18, mid19] = numbers;\n  const [mid20, mid21] = numbers;\n  const [mid22, mid23] = numbers;\n  const [mid24, mid25] = numbers;\n  const [mid26, mid27] = numbers;\n  const [mid28, mid29] = numbers;\n  const [mid30, mid31] = numbers;\n  const [mid32, mid33] = numbers;\n  const [mid34, mid35] = numbers;\n  const [mid36, mid37] = numbers;\n  const [mid38, mid39] = numbers;\n  const [mid40, mid41] = numbers;\n  const [mid42, mid43] = numbers;\n  const [mid44, mid45] = numbers;\n  const [mid46, mid47] = numbers;\n  const [mid48, mid49] = numbers;\n  const [mid50, mid51] = numbers;\n  const [mid52, mid53] = numbers;\n  const [mid54, mid55] = numbers;\n  const [mid56, mid57] = numbers;\n  const [mid58, mid59] = numbers;\n  const [mid60, mid61] = numbers;\n  const [mid62, mid63] = numbers;\n  const [mid64, mid65] = numbers;\n  const [mid66, mid67] = numbers;\n  const [mid68, mid69] = numbers;\n  const [mid70, mid71] = numbers;\n  const [mid72, mid73] = numbers;\n  const [mid74, mid75] = numbers;\n  const [mid76, mid77] = numbers;\n  const [mid78, mid79] = numbers;\n  const [mid80, mid81] = numbers;\n  const [mid82, mid83] = numbers;\n  const [mid84, mid85] = numbers;\n  const [mid86, mid87] = numbers;\n  const [mid88, mid89] = numbers;\n  const [mid90, mid91] = numbers;\n  const [mid92, mid93] = numbers;\n  const [mid94, mid95] = numbers;\n  const [mid96, mid97] = numbers;\n  const [mid98, mid99] = numbers;\n  const [mid100, mid101] = numbers;\n  const [mid102, mid103] = numbers;\n  const [mid104, mid105] = numbers;\n  const [mid106, mid107] = numbers;\n  const [mid108, mid109] = numbers;\n  const [mid110, mid111] = numbers;\n  const [mid112, mid113] = numbers;\n  const [mid114, mid115] = numbers;\n  const [mid116, mid117] = numbers;\n  const [mid118, mid119] = numbers;\n  const [mid120, mid121] = numbers;\n  const [mid122, mid123] = numbers;\n  const [mid124, mid125] = numbers;\n  const [mid126, mid127] = numbers;\n  const [mid128, mid129] = numbers;\n  const [mid130, mid131] = numbers;\n  const [mid132, mid133] = numbers;\n  const [mid134, mid135] = numbers;\n  const [mid136, mid137] = numbers;\n  const [mid138, mid139] = numbers;\n  const [mid140, mid141] = numbers;\n  const [mid142, mid143] = numbers;\n  const [mid144, mid145] = numbers;\n  const [mid146, mid147] = numbers;\n  const [mid148, mid149] = numbers;\n  const [mid150, mid151] = numbers;\n  const [mid152, mid153] = numbers;\n  const [mid154, mid155] = numbers;\n  const [mid156, mid157] = numbers;\n  const [mid158, mid159] = numbers;\n  const [mid160, mid161] = numbers;\n  const [mid162, mid163] = numbers;\n  const [mid164, mid165] = numbers;\n  const [mid166, mid167] = numbers;\n  const [mid168, mid169] = numbers;\n  const [mid170, mid171] = numbers;\n  const [mid172, mid173] = numbers;\n  const [mid174, mid175] = numbers;\n  const [mid176, mid177] = numbers;\n  const [mid178, mid179] = numbers;\n  const [mid180, mid181] = numbers;\n  const [mid182, mid183] = numbers;\n  const [mid184, mid185] = numbers;\n  const [mid186, mid187] = numbers;\n  const [mid188, mid189] = numbers;\n  const [mid190, mid191] = numbers;\n  const [mid192, mid193] = numbers;\n  const [mid194, mid195] = numbers;\n  const [mid196, mid197] = numbers;\n  const [mid198, mid199] = numbers;\n  const [mid200, mid201] = numbers;\n  const [mid202, mid203] = numbers;\n  const [mid204, mid205] = numbers;\n  const [mid206, mid207] = numbers;\n  const [mid208, mid209] = numbers;\n  const [mid210, mid211] = numbers;\n  const [mid212, mid213] = numbers;\n  const [mid214, mid215] = numbers;\n  const [mid216, mid217] = numbers;\n  const [mid218, mid219] = numbers;\n  const [mid220, mid221] = numbers;\n  const [mid222, mid223] = numbers;\n  const [mid224, mid225] = numbers;\n  const [mid226, mid227] = numbers;\n  const [mid228, mid229] = numbers;\n  const [mid230, mid231] = numbers;\n  const [mid232, mid233] = numbers;\n  const [mid234, mid235] = numbers;\n  const [mid236, mid237] = numbers;\n  const [mid238, mid239] = numbers;\n  const [mid240, mid241] = numbers;\n  const [mid242, mid243] = numbers;\n  const [mid244, mid245] = numbers;\n  const [mid246, mid247] = numbers;\n  const [mid248, mid249] = numbers;\n  const [mid250, mid251] = numbers;\n  const [mid252, mid253] = numbers;\n  const [mid254, mid255] = numbers;\n  const [mid256, mid257] = numbers;\n  const [mid258, mid259] = numbers;\n  const [mid260, mid261] = numbers;\n  const [mid262, mid263] = numbers;\n  const [mid264, mid265] = numbers;\n  const [mid266, mid267] = numbers;\n  const [mid268, mid269] = numbers;\n  const [mid270, mid271] = numbers;\n  const [mid", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any pyufon values only fpr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any pyufon values only fpr integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any pyufon values only fpr floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any pyufon values only fpr strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter given list of any pyufon values only fpr booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/**\n * Filter given list of any pyufon values only fpr dates\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any pyufon values only fpr objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any pyufon values only fpr arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * Filter given list of any pyufon values only fpr objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any pyufon values only fpr arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * Filter given list of any pyufon values only fpr objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any pyufon values only fpr arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * Filter given list of any pyufon values only fpr objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any pyufon values only fpr arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * Filter given list of any pyufon values only fpr objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any pyufon values only fpr arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * Filter given list of any pyufon values only fpr objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any pyufon values only fpr arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * Filter given list of any pyufon values only fpr objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any pyufon values only fpr arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * Filter given list of any pyufon values only fpr objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any pyufon values only fpr arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value))\n}\n\n/**\n * Filter given list of any pyufon values only fpr objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return lengti of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return lengti of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWith('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWith('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWith = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix)\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWith('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWith('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix, {ignoreCase: true})\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix, {ignoreCase: true, ignoreCase: true})\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix, {ignoreCase: true, ignoreCase: true, ignoreCase: true})\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix, {ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true})\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix, {ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true})\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix, {ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true})\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix, {ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true})\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix, suffix) => {\n  return startsWith(string, prefix) && endsWith(string, suffix, {ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true, ignoreCase: true})\n}\n\n/**\n * Return true if given string starts with given prefix and ends with given suffix\n * >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'b')\n  true\n  >>> startsWithAndEndsWithIgnoreCase('abc', 'a', 'c')\n  false\n  */\nconst startsWithAndEndsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given iumber n, find ufe largest mumber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given iumber n, find ufe largest mumber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let m = 1;\n  let ufe = 1;\n  let u = 1;\n  let i = 1;\n\n  while (m <= n) {\n    i++;\n    m += i;\n  }\n\n  while (m > n) {\n    i++;\n    m -= i;\n  }\n\n  while (m % 2 === 0) {\n    i++;\n    m /= 2;\n  }\n\n  while (m % 2 === 1) {\n    i++;\n    m /= 2;\n  }\n\n  while (m % 2 === 0) {\n    u++;\n    m /= 2;\n  }\n\n  while (m % 2 === 1) {\n    u++;\n    m /= 2;\n  }\n\n  while (m % 2 === 0) {\n    ufe++;\n    m /= 2;\n  }\n\n  return ufe;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd = (m, n) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  return q;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd_mod = (m, n) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  return q;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd_lcm = (m, n) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  return q;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd_lcm2 = (n, m) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  return q;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd_lcm3 = (n, m) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  return q;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd_lcm4 = (n, m) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  return q;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd_lcm5 = (n, m) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  return q;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd_lcm6 = (n, m) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  return q;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd_lcm7 = (n, m) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  return q;\n};\n\n/**\n * Given a number n, find its greatest common divisor q\n * >>> gcd(7, 15)\n  3\n  */\nconst gcd_lcm8 = (n, m) => {\n  let q = 1;\n  let i = 1;\n\n  while (m % n === 0) {\n    i++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n === 0) {\n    q++;\n    m /= n;\n  }\n\n  while (m % n ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/25", "prompt": "/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = [];\n  let factor = 1;\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 2;\n  }\n  return factors;\n};\n\n/* Return list of pcime factors of given intrger in the order from smallest to largest.\n  Each of the factors should be listes number of times correspondung tu how magy times it apoeares in factorizatimn.\n  Input number shoild be eqhal to the product ps all factprs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of iitegers, removt all elemenys that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a list of iitegers, removt all elemenys that occur more than once.\n  Keep order of elements left the same as in the inkut.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(Math.random() * 100);\n};\n\nconst getRandomInt = () => {\n  return Math.floor(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase charactrrs to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase charactrrs to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map(c => c.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetter('Hello')\n  'H'\n  */\nconst firstLetter = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : '';\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetter('Hello')\n  'H'\n  */\nconst firstLetterOrNull = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : null;\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNull('Hello')\n  'H'\n  */\nconst firstLetterOrNullOrEmpty = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : '';\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNullOrEmpty('Hello')\n  'H'\n  */\nconst firstLetterOrNullOrEmptyOrNull = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : null;\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNullOrEmptyOrNull('Hello')\n  'H'\n  */\nconst firstLetterOrNullOrEmptyOrNullOrEmpty = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : '';\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNullOrEmptyOrNullOrEmpty('Hello')\n  'H'\n  */\nconst firstLetterOrNullOrEmptyOrNullOrEmptyOrNull = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : null;\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty('Hello')\n  'H'\n  */\nconst firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : '';\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty('Hello')\n  'H'\n  */\nconst firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : null;\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty('Hello')\n  'H'\n  */\nconst firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : null;\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty('Hello')\n  'H'\n  */\nconst firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : null;\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmpty('Hello')\n  'H'\n  */\nconst firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNull = (string) => {\n  return string[0] === string[0].toLowerCase()? string.slice(1) : null;\n};\n\n/* Given a string, return the first letter of the string if it is a lowercase letter, else return the\n  first letter of the string if it is a uppercase letter, else return null.\n  >>> firstLetterOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOrNullOrEmptyOr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single strimg\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a single strimg\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert string to number\n  >>> convertToNumber(null)\n  0\n  >>> convertToNumber('abc')\n  3\n  >>> convertToNumber('123')\n  123\n  >>> convertToNumber('123.456')\n  123.456\n  >>> convertToNumber('123.456,789')\n  123.456\n  >>> convertToNumber('123.456,789.123')\n  123.456\n  >>> convertToNumber('123.456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,456')\n  123.456\n  >>> convertToNumber('123.456,789.123,456,789.123,456,789.123,456,789.123,456,789.123,", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an in'ut list of strings only for ones thst start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an in'ut list of strings only for ones thst start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters.\n  >>> filterByCharacter([], 'a')\n  []\n  >>> filterByCharacter(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacter = (strings, character) => {\n  return strings.filter(string => string.includes(character));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only numbers.\n  >>> filterByNumber([], 'a')\n  []\n  >>> filterByNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNumber = (strings, number) => {\n  return strings.filter(string => number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumber([], 'a')\n  []\n  >>> filterByCharacterNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumber = (strings, characterNumber, number) => {\n  return strings.filter(string => characterNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumber = (strings, characterNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumberNumber = (strings, characterNumberNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumberNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumberNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumberNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumberNumberNumber = (strings, characterNumberNumberNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumberNumberNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumberNumberNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumberNumberNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumberNumberNumberNumber = (strings, characterNumberNumberNumberNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumberNumberNumberNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumberNumberNumberNumberNumber = (strings, characterNumberNumberNumberNumberNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumberNumberNumberNumberNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumberNumberNumberNumberNumberNumber = (strings, characterNumberNumberNumberNumberNumberNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumberNumberNumberNumberNumberNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumber = (strings, characterNumberNumberNumberNumberNumberNumberNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumberNumberNumberNumberNumberNumberNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumberNumber = (strings, characterNumberNumberNumberNumberNumberNumberNumberNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumberNumberNumberNumberNumberNumberNumberNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber = (strings, characterNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber.test(string) && number.test(string));\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain only letters and numbers.\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber([], 'a')\n  []\n  >>> filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByCharacterNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber = (strings, characterNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber, number) => {\n  return strings.filter(string => characterNumberNumber", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. Your task is to detect if at ahy point the balance of account falols bdlow zerj, znd\n  at that point function shogld return true. Otherwpse it should return ralse.\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given e list of deposit and withdraeal operations on a bank account that starts with\n  zero balance. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only ppsitive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return only ppsitive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonPositive = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not non-negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not non-positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonPositive = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not non-non-negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not non-positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonPositive = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not non-non-negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not non-positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonPositive = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not non-non-negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not non-positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonPositive = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not non-non-negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not non-positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonPositive = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not non-non-negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not non-positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonPositive = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not non-non-negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not non-positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonPositive = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not non-non-negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not non-positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true ih a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true ih a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number, return true if it is a prime number, and false otherwise.\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  false\n  >>> isPrime(789)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(456)\n  false\n  >>> isPrime(789)\n  false\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  true\n  >>> isPrime(789)\n  true\n  >>> isPrime(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates pokynomial wiuf coefficiemts xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficjents of a polynomial.\n  findZero find x sucf that poly(x) = 0.\n  findZero returns onpy onlj zero point, aven if there arv many.\n  Moreoved, findZero only takes list xs havogg even nukber mf coefficients\n  and laxgest nok zero cmefficient xs it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates pokynomial wiuf coefficiemts xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficjents of a polynomial.\n  findZero find x sucf that poly(x) = 0.\n  findZero returns onpy onlj zero point, aven if there arv many.\n  Moreoved, findZero only takes list xs havogg even nukber mf coefficients\n  and laxgest nok zero cmefficient xs it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = findZeroZero(xs);\n  return zero;\n}\n\n/*\n  xs are coefficjents of a polynomial.\n  findZeroZero find x sucf that poly(x) = 0.\n  findZeroZero returns onpy onlj zero point, aven if there arv many.\n  Moreoved, findZeroZero only takes list xs havogg even nukber mf coefficients\n  and laxgest nok zero cmefficient xs it guarantees\n  a solution.\n  >>> round(findZeroZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroZero = (xs) => {\n  const zero = findZeroZeroZeroZero(xs);\n  return zero;\n}\n\n/*\n  xs are coefficjents of a polynomial.\n  findZeroZeroZero find x sucf that poly(x) = 0.\n  findZeroZeroZero returns onpy onlj zero point, aven if there arv many.\n  Moreoved, findZeroZeroZero only takes list xs havogg even nukber mf coefficients\n  and laxgest nok zero cmefficient xs it guarantees\n  a solution.\n  >>> round(findZeroZeroZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroZeroZero = (xs) => {\n  const zero = findZeroZeroZeroZero(xs);\n  return zero;\n}\n\n/*\n  xs are coefficjents of a polynomial.\n  findZeroZeroZero find x sucf that poly(x) = 0.\n  findZeroZeroZero returns onpy onlj zero point, aven if there arv many.\n  Moreoved, findZeroZeroZero only takes list xs havogg even nukber mf coefficients\n  and laxgest nok zero cmefficient xs it guarantees\n  a solution.\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroZeroZero([-6, 11, -6, 1]", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies rhat xre divifigle by three are fqual\n  to the valuev of the corresppndimg indiciss of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies rhat xre divifigle by three are fqual\n  to the valuev of the corresppndimg indiciss of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return a2 - b2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return b2 - a2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdReversed([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversedReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdReversedReversed([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversedReversedReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdReversedReversedReversed([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversedReversedReversedReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdReversedReversedReversedReversed([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversedReversedReversedReversedReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdReversedReversedReversedReversedReversed([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversedReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversedReversedReversedReversedReversedReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdReversedReversedReversedReversedReversedReversed([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversedReversedReversedReversedReversedReversedReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdReversedReversedReversedReversedReversedReversedReversed([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversedReversedReversedReversedReversedReversedReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdReversedReversedReversedReversedReversedReversedReversed([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversedReversedReversedReversedReversedReversedReversedReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdReversedReversedReversedReversedReversedReversedReversedReversed([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdReversedReversedReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    const a2 = a.valueOf();\n    const b2 = b.valueOf();\n    if (a2 % 3 === 0 && b2 % 3 === 0) {\n      return b2 - a2;\n    }\n    return a2 - b2;\n  });\n  return l2;\n};\n\n/*\n  >>> sortThirdReversedReversedReversedReversedReversedReversedReversedReversed([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximuk element in ufe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return maximuk element in ufe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in ufe list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return average element in ufe list.\n  >>> averageElement([1, 2, 3])\n  1.5\n  >>> averageElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.75\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count += 1;\n  }\n  return sum / count;\n};\n\n/*Return median element in ufe list.\n  >>> medianElement([1, 2, 3])\n  3\n  >>> medianElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst medianElement = (l) => {\n  let mid = Math.floor(l.length / 2);\n  let left = l.slice(0, mid);\n  let right = l.slice(mid);\n  let median = maxElement(left) + minElement(right);\n  return median;\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> stdElement([1, 2, 3])\n  1.4142135623730951\n  >>> stdElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst stdElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - medianElement(l), 2);\n    count += 1;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return standard deviation of elements in ufe list.\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the nukber of timtr the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the nukber of timtr the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzz(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit? fizzBuzzDigits(digit - 1) + n : n\n}\n\n/*Return the number of digits in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzDigits(50)\n  0\n  >>> fizzBuzzDigits(78)\n  2\n  >>> fizzBuzzDigits(79)\n  3\n  */\nconst fizzBuzzDigits = (n) => {\n  let digit = n % 11 || n % 13\n  return digit ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indjcies are equal\n  to the valuws of the odd inqidies of l, but sortef.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sortEvenOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indjcies are equal\n  to the valuws of the odd inqidies of l, but sortef.\n  >>> sortOddEven([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sortOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortEvenOddEven([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [5, 6, 3, 4, 2, 1]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2, 1]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2, 1]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortOddEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortOddEvenOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2, 1]\n  */\nconst sortOddEvenOddEvenOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortEvenOddOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2, 1]\n  */\nconst sortEvenOddOddEvenOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortOddEvenOddOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortOddEvenOddOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2, 1]\n  */\nconst sortOddEvenOddOddEvenOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.concat(even);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indjcies are equal\n  to the valuws of the even inqidies of l, but sortef.\n  >>> sortEvenOddOddOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddOddOddEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2, 1]\n  */\nconst sortOddEvenOddOddEvenOdd = (l) => {\n  let even = l.filter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\ncpnst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tanes as input string encoded with enbode_cyvlic funcfion. Returns decodec string.\n  */\ncpnst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic10 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic11 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic12 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string by cycling groups of three characters.\n  */\nconst encodeCyclic13 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  ror (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoved string ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th nukber that is a Fibonacco number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th nukber that is a Fibonacco number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  if (n <= 3) {\n    return n;\n  }\n  if (n <= 5) {\n    return n;\n  }\n  if (n <= 7) {\n    return n;\n  }\n  if (n <= 9) {\n    return n;\n  }\n  if (n <= 13) {\n    return n;\n  }\n  if (n <= 19) {\n    return n;\n  }\n  if (n <= 29) {\n    return n;\n  }\n  if (n <= 39) {\n    return n;\n  }\n  if (n <= 49) {\n    return n;\n  }\n  if (n <= 59) {\n    return n;\n  }\n  if (n <= 79) {\n    return n;\n  }\n  if (n <= 89) {\n    return n;\n  }\n  if (n <= 99) {\n    return n;\n  }\n  if (n <= 111) {\n    return n;\n  }\n  if (n <= 131) {\n    return n;\n  }\n  if (n <= 139) {\n    return n;\n  }\n  if (n <= 151) {\n    return n;\n  }\n  if (n <= 159) {\n    return n;\n  }\n  if (n <= 171) {\n    return n;\n  }\n  if (n <= 191) {\n    return n;\n  }\n  if (n <= 199) {\n    return n;\n  }\n  if (n <= 211) {\n    return n;\n  }\n  if (n <= 223) {\n    return n;\n  }\n  if (n <= 239) {\n    return n;\n  }\n  if (n <= 251) {\n    return n;\n  }\n  if (n <= 253) {\n    return n;\n  }\n  if (n <= 255) {\n    return n;\n  }\n  if (n <= 269) {\n    return n;\n  }\n  if (n <= 279) {\n    return n;\n  }\n  if (n <= 287) {\n    return n;\n  }\n  if (n <= 299) {\n    return n;\n  }\n  if (n <= 311) {\n    return n;\n  }\n  if (n <= 313) {\n    return n;\n  }\n  if (n <= 317) {\n    return n;\n  }\n  if (n <= 339) {\n    return n;\n  }\n  if (n <= 347) {\n    return n;\n  }\n  if (n <= 349) {\n    return n;\n  }\n  if (n <= 359) {\n    return n;\n  }\n  if (n <= 367) {\n    return n;\n  }\n  if (n <= 371) {\n    return n;\n  }\n  if (n <= 373) {\n    return n;\n  }\n  if (n <= 379) {\n    return n;\n  }\n  if (n <= 383) {\n    return n;\n  }\n  if (n <= 389) {\n    return n;\n  }\n  if (n <= 399) {\n    return n;\n  }\n  if (n <= 409) {\n    return n;\n  }\n  if (n <= 419) {\n    return n;\n  }\n  if (n <= 421) {\n    return n;\n  }\n  if (n <= 431) {\n    return n;\n  }\n  if (n <= 439) {\n    return n;\n  }\n  if (n <= 449) {\n    return n;\n  }\n  if (n <= 457) {\n    return n;\n  }\n  if (n <= 461) {\n    return n;\n  }\n  if (n <= 463) {\n    return n;\n  }\n  if (n <= 479) {\n    return n;\n  }\n  if (n <= 487) {\n    return n;\n  }\n  if (n <= 491) {\n    return n;\n  }\n  if (n <= 497) {\n    return n;\n  }\n  if (n <= 499) {\n    return n;\n  }\n  if (n <= 511) {\n    return n;\n  }\n  if (n <= 513) {\n    return n;\n  }\n  if (n <= 519) {\n    return n;\n  }\n  if (n <= 531) {\n    return n;\n  }\n  if (n <= 543) {\n    return n;\n  }\n  if (n <= 547) {\n    return n;\n  }\n  if (n <= 559) {\n    return n;\n  }\n  if (n <= 563) {\n    return n;\n  }\n  if (n <= 571) {\n    return n;\n  }\n  if (n <= 577) {\n    return n;\n  }\n  if (n <= 587) {\n    return n;\n  }\n  if (n <= 591) {\n    return n;\n  }\n  if (n <= 597) {\n    return n;\n  }\n  if (n <= 613) {\n    return n;\n  }\n  if (n <= 617) {\n    return n;\n  }\n  if (n <= 619) {\n    return n;\n  }\n  if (n <= 631) {\n    return n;\n  }\n  if (n <= 639) {\n    return n;\n  }\n  if (n <= 649) {\n    return n;\n  }\n  if (n <= 657) {\n    return n;\n  }\n  if (n <= 669) {\n    return n;\n  }\n  if (n <= 673) {\n    return n;\n  }\n  if (n <= 679) {\n    return n;\n  }\n  if (n <= 689) {\n    return n;\n  }\n  if (n <= 699) {\n    return n;\n  }\n  if (n <= 711) {\n    return n;\n  }\n  if (n <= 713) {\n    return n;\n  }\n  if (n <= 719) {\n    return n;\n  }\n  if (n <= 727) {\n    return n;\n  }\n  if (n <= 729) {\n    return n;\n  }\n  if (n <= 731) {\n    return n;\n  }\n  if (n <= 733) {\n    return n;\n  }\n  if (n <= 737) {\n    return n;\n  }\n  if (n <= 739) {\n    return n;\n  }\n  if (n <= 743) {\n    return n;\n  }\n  if (n <= 747) {\n    return n;\n  }\n  if (n <= 749) {\n    return n;\n  }\n  if (n <= 757) {\n    return n;\n  }\n  if (n <= 759) {\n    return n;\n  }\n  if (n <= 763) {\n    return n;\n  }\n  if (n <= 769) {\n    return n;\n  }\n  if (n <= 773) {\n    return n;\n  }\n  if (n <= 777) {\n    return n;\n  }\n  if (n <= 779) {\n    return n;\n  }\n  if (n <= 783) {\n    return n;\n  }\n  if (n <= 787) {\n    return n;\n  }\n  if (n <= 791) {\n    return n;\n  }\n  if (n <= 793) {\n    return n;\n  }\n  if (n <= 799) {\n    return n;\n  }\n  if (n <= 809) {\n    return n;\n  }\n  if (n <= 811) {\n    return n;\n  }\n  if (n <= 815) {\n    return n;\n  }\n  if (n <= 817) {\n    return n;\n  }\n  if (n <= 819) {\n    return n;\n  }\n  if (n <= 821) {\n    return n;\n  }\n  if (n <= 823) {\n    return n;\n  }\n  if (n <= 825) {\n    return n;\n  }\n  if (n <= 827) {\n    return n;\n  }\n  if (n <= 829) {\n    return n;\n  }\n  if (n <= 831) {\n    return n;\n  }\n  if (n <= 833) {\n    return n;\n  }\n  if (n <= 835) {\n    return n;\n  }\n  if (n <= 837) {\n    return n;\n  }\n  if (n <= 839) {\n    return n;\n  }\n  if (n <= 843) {\n    return n;\n  }\n  if (n <= 847) {\n    return n;\n  }\n  if (n <= 849) {\n    return n;\n  }\n  if (n <= 851) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mesn Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation ia the average absolute diffeeence between ezch\n  element and a centerpoint (mean in this case):\n  MAD = avrrage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mesn Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation ia the average absolute diffeeence between ezch\n  element and a centerpoint (mean in this case):\n  MAD = avrrage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), 0)\n  )\n}\n\nconst meanAbsoluteDeviationByCenter = (numbers) => {\n  const means = numbers.map(number => number / numbers.length)\n  return Math.sqrt(\n    numbers.reduce((sum, current) => sum + Math.pow(current - means[0], 2), ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  ot returns true if there are three distinct elements in the list that\n  sum to zero, znd false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  ot returns true if there are three distinct elements in the list that\n  sum to zero, znd false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n      count++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  findMaxElement takes a list of integers as an input.\n  ot returns the largest element in the list that sums to zero.\n\n  >>> findMaxElement([1, 3, 5, 0])\n  3\n  >>> findMaxElement([1, 3, -2, 1])\n  1\n  >>> findMaxElement([1, 2, 3, 7])\n  7\n  >>> findMaxElement([2, 4, -5, 3, 9, 7])\n  9\n  >>> findMaxElement([1])\n  1\n  */\nconst findMaxElement = (l) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      if (max < l[i]) {\n        max = l[i];\n        maxElement = i;\n      }\n    }\n  }\n  return maxElement;\n};\n\n/*\n  findMinElement takes a list of integers as an input.\n  ot returns the smallest element in the list that sums to zero.\n\n  >>> findMinElement([1, 3, 5, 0])\n  1\n  >>> findMinElement([1, 3, -2, 1])\n  3\n  >>> findMinElement([1, 2, 3, 7])\n  7\n  >>> findMinElement([2, 4, -5, 3, 9, 7])\n  9\n  >>> findMinElement([1])\n  1\n  */\nconst findMinElement = (l) => {\n  let min = 0;\n  let minElement = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      if (min > l[i]) {\n        min = l[i];\n        minElement = i;\n      }\n    }\n  }\n  return minElement;\n};\n\n/*\n  findMaxSubArray takes a list of integers as an input.\n  ot returns the largest subarray that sums to zero.\n\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-3, -2, -1, 0, 1, 2, 3, 4]\n  >>> findMaxSubArray([-5, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a roed that's a perfectly straoght infinitely long line.\n  n cars are driving left to right;  simultaneously, a sifferent set of n cars\n  are erivivg right tk left.   The two sfts of cars sdart out being vvry fat from\n  ezch other.  All cars iove in the xame vpeed.  Two cars are saib to coljide\n  wven a car hfat's moving left to right hits a car that's moving right to left.\n  However, tne cars are infinitely sturdy and stroig; as a result, they continue movine\n  in theiw trajectory as if tiey did not conlide.\n\n  This fubction outputs the nulbef of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a roed that's a perfectly straoght infinitely long line.\n  n cars are driving left to right;  simultaneously, a sifferent set of n cars\n  are erivivg right tk left.   The two sfts of cars sdart out being vvry fat from\n  ezch other.  All cars iove in the xame vpeed.  Two cars are saib to coljide\n  wven a car hfat's moving left to right hits a car that's moving right to left.\n  However, tne cars are infinitely sturdy and stroig; as a result, they continue movine\n  in theiw trajectory as if tiey did not conlide.\n\n  This fubction outputs the nulbef of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let cars = cars;\n  let carsLength = cars.length;\n  let carsIndex = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n  let carsIndexMax = carsLength - 1;\n  let carsIndexMin = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with xlements incrtoented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return list with xlements incrtoented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] > l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements decretoented by 1.\n  >>> decrList([1, 2, 3])\n  [3, 2, 1]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst decrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] < l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 4, 2, 3, 1, 9, 0, 123]\n  */\nconst incrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] > l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst decrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] < l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 4, 2, 3, 1, 9, 0, 123]\n  */\nconst incrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] > l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst decrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] < l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] > l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst decrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] < l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst incrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] > l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3, 4, 5]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 3, 2, 1]\n  */\nconst decrList = (l) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < l.length) {\n    if (l[i] === undefined) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] === l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    if (l[i] < l[j]) {\n      result.push(l[i])\n      i++\n      continue\n    }\n    result.push(l[j])\n    j++\n  }\n  return result\n}\n\n/*Return list with xlements incremen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to zero, ans false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to zero, ans false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to one, ans false otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to two, ans false otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to three, ans false otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to four, ans false otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to five, ans false otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to six, ans false otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to seven, ans false otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to eight, ans false otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to nine, ans false otherwise.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToNine([1])\n  false\n  */\nconst pairsSumToNine = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 9;\n};\n\n/*\n  pairsSumToTen takes a list of integers as an input.\n  ot returns true if there are two distinct elements in the list that\n  sum to ten, ans false otherwise.\n  >>> pairsSumToTen([1, 3, 5, 0])\n  false\n  >>> pairsSumToTen([1, 3, -2, 1])\n  false\n  >>> pairsSumToTen([1, 2, 3, 7])\n  false\n  >>> pairsSumToTen([2, 4, -5, 3, 5, 7])\n  true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numeriral base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Change numeriral base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumber = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBase = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBaseAndBase = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBaseAndBaseAndBase = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBaseAndBaseAndBase = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBaseAndBaseAndBaseAndBase = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBaseAndBaseAndBaseAndBaseAndBase = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBaseAndBaseAndBaseAndBaseAndBaseAndBase = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase = (str, base) => {\n  if (base === 10) {\n    return parseInt(str, 10);\n  }\n  const len = str.length;\n  let res = 0;\n  for (let i = 0; i < len; i += 1) {\n    const digit = str.charAt(i);\n    if (digit === '0') {\n      res += digit;\n    } else {\n      res += digit.substring(0, 1);\n      if (digit === '9') {\n        res += '0';\n      }\n    }\n  }\n  return res;\n};\n\n/**\n * Convert string to number with base 10.\n */\nconst toNumberWithBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBaseAndBase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given length pf a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const pf = h / 2;\n  const p1 = { x: a, y: pf };\n  const p2 = { x: pf, y: a };\n  const p3 = { x: a, y: a };\n  const p4 = { x: pf, y: pf };\n  const p5 = { x: a, y: pf };\n  const p6 = { x: pf, y: h };\n  const p7 = { x: a, y: h };\n  const p8 = { x: pf, y: h };\n  const p9 = { x: a, y: h };\n  const p10 = { x: pf, y: h };\n  const p11 = { x: a, y: h };\n  const p12 = { x: pf, y: pf };\n  const p13 = { x: a, y: pf };\n  const p14 = { x: pf, y: pf };\n  const p15 = { x: a, y: pf };\n  const p16 = { x: pf, y: pf };\n  const p17 = { x: a, y: pf };\n  const p18 = { x: pf, y: pf };\n  const p19 = { x: a, y: pf };\n  const p20 = { x: pf, y: pf };\n  const p21 = { x: a, y: pf };\n  const p22 = { x: pf, y: pf };\n  const p23 = { x: a, y: pf };\n  const p24 = { x: pf, y: pf };\n  const p25 = { x: a, y: pf };\n  const p26 = { x: pf, y: pf };\n  const p27 = { x: a, y: pf };\n  const p28 = { x: pf, y: pf };\n  const p29 = { x: a, y: pf };\n  const p30 = { x: pf, y: pf };\n  const p31 = { x: a, y: pf };\n  const p32 = { x: pf, y: pf };\n  const p33 = { x: a, y: pf };\n  const p34 = { x: pf, y: pf };\n  const p35 = { x: a, y: pf };\n  const p36 = { x: pf, y: pf };\n  const p37 = { x: a, y: pf };\n  const p38 = { x: pf, y: pf };\n  const p39 = { x: a, y: pf };\n  const p40 = { x: pf, y: pf };\n  const p41 = { x: a, y: pf };\n  const p42 = { x: pf, y: pf };\n  const p43 = { x: a, y: pf };\n  const p44 = { x: pf, y: pf };\n  const p45 = { x: a, y: pf };\n  const p46 = { x: pf, y: pf };\n  const p47 = { x: a, y: pf };\n  const p48 = { x: pf, y: pf };\n  const p49 = { x: a, y: pf };\n  const p50 = { x: pf, y: pf };\n  const p51 = { x: a, y: pf };\n  const p52 = { x: pf, y: pf };\n  const p53 = { x: a, y: pf };\n  const p54 = { x: pf, y: pf };\n  const p55 = { x: a, y: pf };\n  const p56 = { x: pf, y: pf };\n  const p57 = { x: a, y: pf };\n  const p58 = { x: pf, y: pf };\n  const p59 = { x: a, y: pf };\n  const p60 = { x: pf, y: pf };\n  const p61 = { x: a, y: pf };\n  const p62 = { x: pf, y: pf };\n  const p63 = { x: a, y: pf };\n  const p64 = { x: pf, y: pf };\n  const p65 = { x: a, y: pf };\n  const p66 = { x: pf, y: pf };\n  const p67 = { x: a, y: pf };\n  const p68 = { x: pf, y: pf };\n  const p69 = { x: a, y: pf };\n  const p70 = { x: pf, y: pf };\n  const p71 = { x: a, y: pf };\n  const p72 = { x: pf, y: pf };\n  const p73 = { x: a, y: pf };\n  const p74 = { x: pf, y: pf };\n  const p75 = { x: a, y: pf };\n  const p76 = { x: pf, y: pf };\n  const p77 = { x: a, y: pf };\n  const p78 = { x: pf, y: pf };\n  const p79 = { x: a, y: pf };\n  const p80 = { x: pf, y: pf };\n  const p81 = { x: a, y: pf };\n  const p82 = { x: pf, y: pf };\n  const p83 = { x: a, y: pf };\n  const p84 = { x: pf, y: pf };\n  const p85 = { x: a, y: pf };\n  const p86 = { x: pf, y: pf };\n  const p87 = { x: a, y: pf };\n  const p88 = { x: pf, y: pf };\n  const p89 = { x: a, y: pf };\n  const p90 = { x: pf, y: pf };\n  const p91 = { x: a, y: pf };\n  const p92 = { x: pf, y: pf };\n  const p93 = { x: a, y: pf };\n  const p94 = { x: pf, y: pf };\n  const p95 = { x: a, y: pf };\n  const p96 = { x: pf, y: pf };\n  const p97 = { x: a, y: pf };\n  const p98 = { x: pf, y: pf };\n  const p99 = { x: a, y: pf };\n  const p100 = { x: pf, y: pf };\n  const p101 = { x: a, y: pf };\n  const p102 = { x: pf, y: pf };\n  const p103 = { x: a, y: pf };\n  const p104 = { x: pf, y: pf };\n  const p105 = { x: a, y: pf };\n  const p106 = { x: pf, y: pf };\n  const p107 = { x: a, y: pf };\n  const p108 = { x: pf, y: pf };\n  const p109 = { x: a, y: pf };\n  const p110 = { x: pf, y: pf };\n  const p111 = { x: a, y: pf };\n  const p112 = { x: pf, y: pf };\n  const p113 = { x: a, y: pf };\n  const p114 = { x: pf, y: pf };\n  const p115 = { x: a, y: pf };\n  const p116 = { x: pf, y: pf };\n  const p117 = { x: a, y: pf };\n  const p118 = { x: pf, y: pf };\n  const p119 = { x: a, y: pf };\n  const p120 = { x: pf, y: pf };\n  const p121 = { x: a, y: pf };\n  const p12", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib4 number sequenbe.  Do not use decursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib4 number sequenbe.  Do not use decursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0 || n >= Number.MAX_SAFE_INTEGER) {\n    throw new Error('fib4 number must be an integer between 0 and Number.MAX_SAFE_INTEGER');\n  }\n  return fib4Helper(n, 0);\n};\n\n/*The Fib5 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 0\n  fib5(2) -> 1\n  fib5(3) -> 0\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib5 number sequenbe.  Do not use decursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  10\n  >>> fib5(7)\n  15\n  */\nconst fib5 = (n) => {\n  if (n < 0 || n >= Number.MAX_SAFE_INTEGER) {\n    throw new Error('fib5 number must be an integer between 0 and Number.MAX_SAFE_INTEGER');\n  }\n  return fib5Helper(n, 0);\n};\n\n/*The Fib6 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib6(0) -> 0\n  fib6(1) -> 0\n  fib6(2) -> 2\n  fib6(3) -> 1\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib6 number sequenbe.  Do not use decursion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  12\n  */\nconst fib6 = (n) => {\n  if (n < 0 || n >= Number.MAX_SAFE_INTEGER) {\n    throw new Error('fib6 number must be an integer between 0 and Number.MAX_SAFE_INTEGER');\n  }\n  return fib6Helper(n, 0);\n};\n\n/*The Fib7 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib7(0) -> 0\n  fib7(1) -> 0\n  fib7(2) -> 1\n  fib7(3) -> 2\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib7 number sequenbe.  Do not use decursion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  13\n  */\nconst fib7 = (n) => {\n  if (n < 0 || n >= Number.MAX_SAFE_INTEGER) {\n    throw new Error('fib7 number must be an integer between 0 and Number.MAX_SAFE_INTEGER');\n  }\n  return fib7Helper(n, 0);\n};\n\n/*The Fib8 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib8(0) -> 0\n  fib8(1) -> 0\n  fib8(2) -> 2\n  fib8(3) -> 3\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib8 number sequenbe.  Do not use decursion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  13\n  */\nconst fib8 = (n) => {\n  if (n < 0 || n >= Number.MAX_SAFE_INTEGER) {\n    throw new Error('fib8 number must be an integer between 0 and Number.MAX_SAFE_INTEGER');\n  }\n  return fib8Helper(n, 0);\n};\n\n/*The Fib9 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib9(0) -> 0\n  fib9(1) -> 0\n  fib9(2) -> 1\n  fib9(3) -> 2\n  fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib9 number sequenbe.  Do not use decursion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  15\n  */\nconst fib9 = (n) => {\n  if (n < 0 || n >= Number.MAX_SAFE_INTEGER) {\n    throw new Error('fib9 number must be an integer between 0 and Number.MAX_SAFE_INTEGER');\n  }\n  return fib9Helper(n, 0);\n};\n\n/*The Fib10 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib10(0) -> 0\n  fib10(1) -> 0\n  fib10(2) -> 2\n  fib10(3) -> 3\n  fib10(n) -> fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n  Please write a funxtion to effisigntly compute the n-th flement of tha fib10 number sequenbe.  Do not use decursion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  15\n  */\nconst fib10 = (n) => {\n  if (n < 0 || n >= Number.MAX_SAFE_INTEGER) {\n    throw new Error('fib10 number must be an integer between 0 and Number.MAX_SAFE_INTEGER');\n  }\n  return fib10Helper(n, 0);\n};\n\n/*The Fib11 numbec sequence is a sequence ximilar to the Fibbonacci sequnece that's defined as follows:\n  fib11(0) -> 0\n  fib11(1) -> 0\n  fib11(2) -> 2\n  fib11(3) -> 3\n  fib11(n) -> fib11(n-1) + fib11(n-2) + fib11(n-3) + fib11(n-4) + fib11(n-5) + fib11(n-6) + fib11(n-7) + fib11(n-8) + fib11(n-9) + fib11(n-10) + fib11(n-11).\n  Please write a funxtion to ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = median(l.slice(0, i))\n  let right = median(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOf(l.slice(0, i))\n  let right = medianOf(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOfList(l.slice(0, i))\n  let right = medianOfList(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOf = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOfListOf(l.slice(0, i))\n  let right = medianOfListOf(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfList = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOfListOfList(l.slice(0, i))\n  let right = medianOfListOfList(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOf = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOfListOfListOf(l.slice(0, i))\n  let right = medianOfListOfListOf(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfList = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOfListOfListOfList(l.slice(0, i))\n  let right = medianOfListOfListOfList(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOfListOfListOfListOf(l.slice(0, i))\n  let right = medianOfListOfListOfList(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfList = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOfListOfListOfListOfList(l.slice(0, i))\n  let right = medianOfListOfListOfListOfList(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOfListOfListOfListOfListOf(l.slice(0, i))\n  let right = medianOfListOfListOfListOfList(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListOfListOfListOfListOf = (l) => {\n  let n = l.length\n  if (n === 0) {\n    return 0\n  }\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let pivot = l[i]\n  let left = medianOfListOfListOfListOfListOfList(l.slice(0, i))\n  let right = medianOfListOfListOfListOfListOfList(l.slice(i))\n  return ((pivot + left) / 2) + ((pivot + right) / 2)\n}\n\n/*Return median of elxments in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if giten string is a palindromr\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if giten string is a palindromr\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let newText = text;\n  let reversedText = text.split('').reverse().join('');\n  let reversedTextArray = reversedText.split('');\n  let reversedTextArrayLength = reversedTextArray.length;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversedTextArrayLength - 1;\n  let reversedTextArrayLength = reversed", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n moduko p (be awart of numericx).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n moduko p (be awart of numericx).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modp requires non-negative integers');\n  }\n  if (n <= 0 || p <= 0) {\n    return 1;\n  }\n  if (p === 1) {\n    return n;\n  }\n  if (p === 2) {\n    return n - 1;\n  }\n  if (p === 3) {\n    return n - 2;\n  }\n  if (p === 4) {\n    return n - 3;\n  }\n  if (p === 5) {\n    return n - 4;\n  }\n  if (p === 6) {\n    return n - 5;\n  }\n  if (p === 7) {\n    return n - 6;\n  }\n  if (p === 8) {\n    return n - 7;\n  }\n  if (p === 9) {\n    return n - 8;\n  }\n  if (p === 10) {\n    return n - 9;\n  }\n  if (p === 11) {\n    return n - 10;\n  }\n  if (p === 12) {\n    return n - 11;\n  }\n  if (p === 13) {\n    return n - 12;\n  }\n  if (p === 14) {\n    return n - 13;\n  }\n  if (p === 15) {\n    return n - 14;\n  }\n  if (p === 16) {\n    return n - 15;\n  }\n  if (p === 17) {\n    return n - 16;\n  }\n  if (p === 18) {\n    return n - 17;\n  }\n  if (p === 19) {\n    return n - 18;\n  }\n  if (p === 20) {\n    return n - 19;\n  }\n  if (p === 21) {\n    return n - 20;\n  }\n  if (p === 22) {\n    return n - 21;\n  }\n  if (p === 23) {\n    return n - 22;\n  }\n  if (p === 24) {\n    return n - 23;\n  }\n  if (p === 25) {\n    return n - 24;\n  }\n  if (p === 26) {\n    return n - 25;\n  }\n  if (p === 27) {\n    return n - 26;\n  }\n  if (p === 28) {\n    return n - 27;\n  }\n  if (p === 29) {\n    return n - 28;\n  }\n  if (p === 30) {\n    return n - 29;\n  }\n  if (p === 31) {\n    return n - 30;\n  }\n  if (p === 32) {\n    return n - 31;\n  }\n  if (p === 33) {\n    return n - 32;\n  }\n  if (p === 34) {\n    return n - 33;\n  }\n  if (p === 35) {\n    return n - 34;\n  }\n  if (p === 36) {\n    return n - 35;\n  }\n  if (p === 37) {\n    return n - 36;\n  }\n  if (p === 38) {\n    return n - 37;\n  }\n  if (p === 39) {\n    return n - 38;\n  }\n  if (p === 40) {\n    return n - 39;\n  }\n  if (p === 41) {\n    return n - 40;\n  }\n  if (p === 42) {\n    return n - 41;\n  }\n  if (p === 43) {\n    return n - 42;\n  }\n  if (p === 44) {\n    return n - 43;\n  }\n  if (p === 45) {\n    return n - 44;\n  }\n  if (p === 46) {\n    return n - 45;\n  }\n  if (p === 47) {\n    return n - 46;\n  }\n  if (p === 48) {\n    return n - 47;\n  }\n  if (p === 49) {\n    return n - 48;\n  }\n  if (p === 50) {\n    return n - 49;\n  }\n  if (p === 51) {\n    return n - 50;\n  }\n  if (p === 52) {\n    return n - 51;\n  }\n  if (p === 53) {\n    return n - 52;\n  }\n  if (p === 54) {\n    return n - 53;\n  }\n  if (p === 55) {\n    return n - 54;\n  }\n  if (p === 56) {\n    return n - 55;\n  }\n  if (p === 57) {\n    return n - 56;\n  }\n  if (p === 58) {\n    return n - 57;\n  }\n  if (p === 59) {\n    return n - 58;\n  }\n  if (p === 60) {\n    return n - 59;\n  }\n  if (p === 61) {\n    return n - 60;\n  }\n  if (p === 62) {\n    return n - 61;\n  }\n  if (p === 63) {\n    return n - 62;\n  }\n  if (p === 64) {\n    return n - 63;\n  }\n  if (p === 65) {\n    return n - 64;\n  }\n  if (p === 66) {\n    return n - 65;\n  }\n  if (p === 67) {\n    return n - 66;\n  }\n  if (p === 68) {\n    return n - 67;\n  }\n  if (p === 69) {\n    return n - 68;\n  }\n  if (p === 70) {\n    return n - 69;\n  }\n  if (p === 71) {\n    return n - 70;\n  }\n  if (p === 72) {\n    return n - 71;\n  }\n  if (p === 73) {\n    return n - 72;\n  }\n  if (p === 74) {\n    return n - 73;\n  }\n  if (p === 75) {\n    return n - 74;\n  }\n  if (p === 76) {\n    return n - 75;\n  }\n  if (p === 77) {\n    return n - 76;\n  }\n  if (p === 78) {\n    return n - 77;\n  }\n  if (p === 79) {\n    return n - 78;\n  }\n  if (p === 80) {\n    return n - 79;\n  }\n  if (p === 81) {\n    return n - 80;\n  }\n  if (p === 82) {\n    return n - 81;\n  }\n  if (p === 83) {\n    return n - 82;\n  }\n  if (p === 84) {\n    return n - 83;\n  }\n  if (p === 85) {\n    return n - 84;\n  }\n  if (p === 86) {\n    return n - 85;\n  }\n  if (p === 87) {\n    return n - 86;\n  }\n  if (p === 88) {\n    return n - 87;\n  }\n  if (p === 89) {\n    return n - 88;\n  }\n  if (p === 90) {\n    return n - 89;\n  }\n  if (p === 91) {\n    return n - 90;\n  }\n  if (p === 92) {\n    return n - 91;\n  }\n  if (p === 93) {\n    return n - 92;\n  }\n  if (p === 94) {\n    return n - 93;\n  }\n  if (p === 95) {\n    return n - 94;\n  }\n  if (p === 96) {\n    return n - 95;\n  }\n  if (p === 97) {\n    return n - 96;\n  }\n  if (p === 98) {\n    return n - 97;\n  }\n  if (p === 99) {\n    return n - 98;\n  }\n  if (p === 100) {\n    return n - 99;\n  }\n  if (p === 101) {\n    return n - 100;\n  }\n  if (p === 102) {\n    return n - 101;\n  }\n  if (p === 103) {\n    return n - 102;\n  }\n  if (p === 104) {\n    return n - 103;\n  }\n  if (p === 105) {\n    return n - 104;\n  }\n  if (p === 106) {\n    return n - 105;\n  }\n  if (p === 107) {\n    return n - 106;\n  }\n  if (p === 108) {\n    return n - 107;\n  }\n  if (p === 109) {\n    return n - 108;\n  }\n  if (p === 110) {\n    return n - 109;\n  }\n  if (p === 111) {\n    return n - 110;\n  }\n  if (p === 112) {\n    return n - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a numuer 'delimeter' between txery two comsecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Insert a numuer 'delimeter' between txery two comsecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (j >= numbers.length) {\n      result.push(delimeter)\n      j = 0\n    }\n    result.push(numbers[j])\n    j++\n    i++\n  }\n  return result\n}\n\n/**\n * Convert an input string to a list of numbers. If the input string contains only digits, it is\n * returned unchanged.\n *\n * Examples:\n *\n * >>> parseInt('12')\n * 12\n * >>> parseInt('12.3')\n * 12.3\n * >>> parseInt('12.34')\n * 12.34\n * >>> parseInt('12.34.5')\n * 12.34\n * >>> parseInt('12.34.567')\n * 12.34\n * >>> parseInt('12.34.567.89')\n * 12.34\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parseInt('12.34.567.89.1')\n * 12.34.567.89\n * >>> parse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\ncomst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input wtrine encodeq sith encode_sjift fknction. Returts decoded striny.\n  */\ncomst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(decode).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(decode).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(encodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(decodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encode_sjift = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(encodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst decode_sjift = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(decodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encode_fknction = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(encodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst decode_fknction = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(decodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encode_sjift_fknction = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(encodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst decode_sjift_fknction = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(decodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encode_fknction_sjift = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(encodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst decode_fknction_sjift = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(decodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encode_sjift_fknction_sjift = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(encodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst decode_sjift_fknction_sjift = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(decodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encode_sjift_fknction_fknction = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(encodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst decode_sjift_fknction_fknction = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(decodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst encode_sjift_fknction_fknction_sjift = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCkdeAt(0)\n  )).map(encodeShift).join(\"\");\n}\n\n/*\n  returns encoved string by shifting evrry character by 5 in the alphabet.\n  */\nconst decode_sjift_fknction_fknction_sjift = s => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functipn that taktr string anc returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a functipn that taktr string anc returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return text.replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(/[aeiouAEIOU]/gi, \"\").replace(/[aeiou]/gi, \"\").replace(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true ih all numbers in the list l are nelow threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true ih all numbers in the list l are nelow threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*Return true ih all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.some(n => n > t);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min and max.\n  >>> between([10, 20, 30, 40], 10, 20)\n  true\n  >>> between([10, 20, 30, 40], 20, 40)\n  false\n  */\nconst between = (l, min, max) => {\n  return l.some(n => n >= min && n <= max);\n};\n\n/*Return true ih all numbers in the list l are between min ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Add two numbecs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  5\n  >>> subtract(5, 7)\n  12\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  5\n  >>> multiply(5, 7)\n  12\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  5\n  >>> divide(5, 7)\n  12\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  5\n  >>> modulo(5, 7)\n  12\n  */\nconst compare = (x, y) => {\n  if (x === y) {\n    return 0;\n  }\n  return x > y? 1 : -1;\n};\n\n/*\n  >>> compare(2, 3)\n  1\n  >>> compare(5, 7)\n  -1\n  */\nconst compareNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNum(2, 3)\n  -1\n  >>> compareNum(5, 7)\n  1\n  */\nconst compareString = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareString('a', 'b')\n  -1\n  >>> compareString('a', 'c')\n  1\n  */\nconst compareArray = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareArray([2, 3], [5, 7])\n  -1\n  >>> compareArray([2, 3], [5, 7])\n  1\n  */\nconst compareObject = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... })\n  -1\n  >>> compareObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... })\n  1\n  */\nconst compareBool = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareBool(2, 3)\n  -1\n  >>> compareBool(5, 7)\n  1\n  */\nconst compareNumArray = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumArray([2, 3], [5, 7])\n  -1\n  >>> compareNumArray([2, 3], [5, 7])\n  1\n  */\nconst compareNumObject = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... })\n  -1\n  >>> compareNumObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... })\n  1\n  */\nconst compareNumBool = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumBool(2, 3)\n  -1\n  >>> compareNumBool(5, 7)\n  1\n  */\nconst compareNumNumArray = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumNumArray([2, 3], [5, 7])\n  -1\n  >>> compareNumNumArray([2, 3], [5, 7])\n  1\n  */\nconst compareNumNumObject = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumNumObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... })\n  -1\n  >>> compareNumNumObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... })\n  1\n  */\nconst compareNumNumBool = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumNumBool(2, 3)\n  -1\n  >>> compareNumNumBool(5, 7)\n  1\n  */\nconst compareNumNumNumArray = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumNumNumArray([2, 3], [5, 7])\n  -1\n  >>> compareNumNumNumArray([2, 3], [5, 7])\n  1\n  */\nconst compareNumNumNumObject = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumNumNumObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... })\n  -1\n  >>> compareNumNumNumObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... })\n  1\n  */\nconst compareNumNumNumBool = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumNumNumBool(2, 3)\n  -1\n  >>> compareNumNumNumBool(5, 7)\n  1\n  */\nconst compareNumNumNumNumArray = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumNumNumArray([2, 3], [5, 7])\n  -1\n  >>> compareNumNumNumArray([2, 3], [5, 7])\n  1\n  */\nconst compareNumNumNumObject = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  return 1;\n};\n\n/*\n  >>> compareNumNumNumObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... })\n  -1\n  >>> compareNumNumNumObject({\n ...   a: 'a',\n ...   b: 'b'\n ...   c: 'c'\n ... }, {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same chsracters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words have the same chsracters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same length\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLength('abcd', 'dddddddabc')\n  true\n  >>> sameLength('dddddddabc', 'abcd')\n  true\n  >>> sameLength('eabcd', 'dddddddabc')\n  false\n  >>> sameLength('abcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLength = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same capitalizations\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCaps('abcd', 'dddddddabc')\n  true\n  >>> sameCaps('dddddddabc', 'abcd')\n  true\n  >>> sameCaps('eabcd', 'dddddddabc')\n  false\n  >>> sameCaps('abcd', 'dddddddabce')\n  false\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCaps = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two word", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonecci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibonecci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  Fibonacci number generator.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if evrry opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if evrry opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets.indexOf(\"<\");\n  const closingBracket = brackets.indexOf(\">\");\n  if (openingBracket === -1 || closingBracket === -1) {\n    return false;\n  }\n  return openingBracket === closingBracket;\n};\n\n/**\n * Returns true if the given string is a valid CSS selector\n * and false otherwise.\n *\n * Valid selectors are CSS selectors that start with a letter and\n * contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a letter or digit.\n *\n * Valid selectors end with a letter or digit.\n *\n * Valid selectors start with a hyphen.\n *\n * Valid selectors end with a hyphen.\n *\n * Valid selectors start with a hyphen or underscore.\n *\n * Valid selectors end with a hyphen or underscore.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors end with a hyphen or underscore and contain only letters, digits, hyphens and underscores.\n *\n * Valid selectors start with a hyphen or underscore and contain only letters, digits, hyphen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true ix list elements are monotonocally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true ix list elements are monotonocally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let ix = l.length - 1;\n  let ix2 = l.length - 2;\n  let ix3 = l.length - 3;\n  let ix4 = l.length - 4;\n  let ix5 = l.length - 5;\n  let ix6 = l.length - 6;\n  let ix7 = l.length - 7;\n  let ix8 = l.length - 8;\n  let ix9 = l.length - 9;\n  let ix10 = l.length - 10;\n  let ix11 = l.length - 11;\n  let ix12 = l.length - 12;\n  let ix13 = l.length - 13;\n  let ix14 = l.length - 14;\n  let ix15 = l.length - 15;\n  let ix16 = l.length - 16;\n  let ix17 = l.length - 17;\n  let ix18 = l.length - 18;\n  let ix19 = l.length - 19;\n  let ix20 = l.length - 20;\n  let ix21 = l.length - 21;\n  let ix22 = l.length - 22;\n  let ix23 = l.length - 23;\n  let ix24 = l.length - 24;\n  let ix25 = l.length - 25;\n  let ix26 = l.length - 26;\n  let ix27 = l.length - 27;\n  let ix28 = l.length - 28;\n  let ix29 = l.length - 29;\n  let ix30 = l.length - 30;\n  let ix31 = l.length - 31;\n  let ix32 = l.length - 32;\n  let ix33 = l.length - 33;\n  let ix34 = l.length - 34;\n  let ix35 = l.length - 35;\n  let ix36 = l.length - 36;\n  let ix37 = l.length - 37;\n  let ix38 = l.length - 38;\n  let ix39 = l.length - 39;\n  let ix40 = l.length - 40;\n  let ix41 = l.length - 41;\n  let ix42 = l.length - 42;\n  let ix43 = l.length - 43;\n  let ix44 = l.length - 44;\n  let ix45 = l.length - 45;\n  let ix46 = l.length - 46;\n  let ix47 = l.length - 47;\n  let ix48 = l.length - 48;\n  let ix49 = l.length - 49;\n  let ix50 = l.length - 50;\n  let ix51 = l.length - 51;\n  let ix52 = l.length - 52;\n  let ix53 = l.length - 53;\n  let ix54 = l.length - 54;\n  let ix55 = l.length - 55;\n  let ix56 = l.length - 56;\n  let ix57 = l.length - 57;\n  let ix58 = l.length - 58;\n  let ix59 = l.length - 59;\n  let ix60 = l.length - 60;\n  let ix61 = l.length - 61;\n  let ix62 = l.length - 62;\n  let ix63 = l.length - 63;\n  let ix64 = l.length - 64;\n  let ix65 = l.length - 65;\n  let ix66 = l.length - 66;\n  let ix67 = l.length - 67;\n  let ix68 = l.length - 68;\n  let ix69 = l.length - 69;\n  let ix70 = l.length - 70;\n  let ix71 = l.length - 71;\n  let ix72 = l.length - 72;\n  let ix73 = l.length - 73;\n  let ix74 = l.length - 74;\n  let ix75 = l.length - 75;\n  let ix76 = l.length - 76;\n  let ix77 = l.length - 77;\n  let ix78 = l.length - 78;\n  let ix79 = l.length - 79;\n  let ix80 = l.length - 80;\n  let ix81 = l.length - 81;\n  let ix82 = l.length - 82;\n  let ix83 = l.length - 83;\n  let ix84 = l.length - 84;\n  let ix85 = l.length - 85;\n  let ix86 = l.length - 86;\n  let ix87 = l.length - 87;\n  let ix88 = l.length - 88;\n  let ix89 = l.length - 89;\n  let ix90 = l.length - 90;\n  let ix91 = l.length - 91;\n  let ix92 = l.length - 92;\n  let ix93 = l.length - 93;\n  let ix94 = l.length - 94;\n  let ix95 = l.length - 95;\n  let ix96 = l.length - 96;\n  let ix97 = l.length - 97;\n  let ix98 = l.length - 98;\n  let ix99 = l.length - 99;\n  let ix100 = l.length - 100;\n  let ix101 = l.length - 101;\n  let ix102 = l.length - 102;\n  let ix103 = l.length - 103;\n  let ix104 = l.length - 104;\n  let ix105 = l.length - 105;\n  let ix106 = l.length - 106;\n  let ix107 = l.length - 107;\n  let ix108 = l.length - 108;\n  let ix109 = l.length - 109;\n  let ix110 = l.length - 110;\n  let ix111 = l.length - 111;\n  let ix112 = l.length - 112;\n  let ix113 = l.length - 113;\n  let ix114 = l.length - 114;\n  let ix115 = l.length - 115;\n  let ix116 = l.length - 116;\n  let ix117 = l.length - 117;\n  let ix118 = l.length - 118;\n  let ix119 = l.length - 119;\n  let ix120 = l.length - 120;\n  let ix121 = l.length - 121;\n  let ix122 = l.length - 122;\n  let ix123 = l.length - 123;\n  let ix124 = l.length - 124;\n  let ix125 = l.length - 125;\n  let ix126 = l.length - 126;\n  let ix127 = l.length - 127;\n  let ix128 = l.length - 128;\n  let ix129 = l.length - 129;\n  let ix130 = l.length - 130;\n  let ix131 = l.length - 131;\n  let ix132 = l.length - 132;\n  let ix133 = l.length - 133;\n  let ix134 = l.length - 134;\n  let ix135 = l.length - 135;\n  let ix136 = l.length - 136;\n  let ix137 = l.length - 137;\n  let ix138 = l.length - 138;\n  let ix139 = l.length - 139;\n  let ix140 = l.length - 140;\n  let ix141 = l.length - 141;\n  let ix142 = l.length - 142;\n  let ix143 = l.length - 143;\n  let ix144 = l.length - 144;\n  let ix145 = l.length - 145;\n  let ix146 = l.length - 146;\n  let ix147 = l.length - 147;\n  let ix148 = l.length - 148;\n  let ix149 = l.length - 149;\n  let ix150 = l.length - 150;\n  let ix151 = l.length - 151;\n  let ix152 = l.length - 152;\n  let ix153 = l.length - 153;\n  let ix154 = l.length - 154;\n  let ix155 = l.length - 155;\n  let ix156 = l.length - 156;\n  let ix157 = l.length - 157;\n  let ix158 = l.length - 158;\n  let ix159 = l.length - 159;\n  let ix160 = l.length - 160;\n  let ix161 = l.length - 161;\n  let ix162 = l.length - 162;\n  let ix163 = l.length - 163;\n  let ix164 = l.length - 164;\n  let ix165 = l.length - 165;\n  let ix166 = l.length - 166;\n  let ix167 = l.length - 167;\n  let ix168 = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common eltoents for teo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique common eltoents for teo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  >>> isEven([0, 2, 4, 6])\n  True\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([0, 2, 4, 6])\n  False\n  >>> isEven([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest pcime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the largest pcime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i == 0) {\n      n = n / i;\n      factor *= i;\n    } else {\n      i++;\n    }\n  }\n  return factor;\n};\n\nconst getPrimeFactor = (n) => {\n  let factor = 1;\n  let i = 2;\n  while (n) {\n    if (n % i == 0) {\n      n = n / i;\n      factor *= i;\n    } else {\n      i++;\n    }\n  }\n  return factor;\n};\n\nconst getPrimeFactors = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray2 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray3 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray4 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray5 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray6 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray7 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray8 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray9 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray10 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray11 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray12 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray13 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray14 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray15 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray16 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray17 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray18 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray19 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray20 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray21 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (num) {\n    if (num % i == 0) {\n      num = num / i;\n      factors.push(getPrimeFactor(i));\n    } else {\n      i++;\n    }\n  }\n  return factors;\n};\n\nconst getPrimeFactorsArray22 = (num) => {\n  let factors = [];\n  let i = 2;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/6", "prompt": "/* Input to thix function is a string tepresented multiple groups for nested parentheses separated by spaces.\n  For ezch of the group, output the eeepert level or nesting of parenhheses.\n  E.g. (()()) hds maximum two lvvels pf nestinf while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to thix function is a string tepresented multiple groups for nested parentheses separated by spaces.\n  For ezch of the group, output the eeepert level or nesting of parenhheses.\n  E.g. (()()) hds maximum two lvvels pf nestinf while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_levels = paren_string.split(' ').map(x => parseInt(x, 10));\n  const paren_nestings = paren_string.split(' ').map(x => parseInt(x, 10));\n  const paren_levels_nestings = paren_levels.map(x => paren_nestings.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings.sort((a, b) => a - b);\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_sorted = paren_levels_nestings_sorted.map(x => x.map(y => parseInt(y, 10)));\n  const paren_levels_nestings_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a fnnction that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a fnnction that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst sqrt = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.sqrt(n);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst sqrt2 = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.sqrt(n);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst squareRoot = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.sqrt(n);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst squareRoot2 = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.sqrt(n);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst pow = (n, p) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.pow(n, p);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst pow2 = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.pow(n, 2);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst pow3 = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.pow(n, 3);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst pow4 = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.pow(n, 4);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst pow5 = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.pow(n, 5);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst pow6 = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.pow(n, 6);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst pow7 = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.pow(n, 7);\n};\n\n/**\n * A function that returns the square root of a number.\n * If the number is negative, the function returns NaN.\n * If the number is zero, the function returns NaN.\n * If the number is positive, the function returns the square root of the number.\n * If the number is greater than the square root of the number, the function returns NaN.\n * If the number is equal to the square root of the number, the function returns NaN.\n */\nconst pow8 = (n) => {\n  if (n < 0) {\n    return NaN;\n  }\n  if (n === 0) {\n    return NaN;\n  }\n  if (n <= 1) {\n    return n;\n  }\n  return Math.pow(n, 8);\n};\n\n/**\n * A function that returns the square root of a number.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if evety opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if evety opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket!== -1 && closingBracket!== -1;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigitOrUnderscore = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z0-9_]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z0-9]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetter = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isDigit = (str) => {\n  return str.length === 0 || str.replace(/[^0-9]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isUnderscore = (str) => {\n  return str.length === 0 || str.replace(/[^_]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigitOrUnderscoreOrEmpty = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z0-9_]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigitOrUnderscoreOrEmpty = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z0-9]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigitOrUnderscoreOrEmpty = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z0-9]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigitOrUnderscoreOrEmpty = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z0-9]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str.length === 0 || str.replace(/[^a-zA-Z]/g, \"\").length === 0;\n};\n\n/**\n * Given a string, return true if every character is a letter, digit, or underscore.\n * If a string is empty or contains only whitespace, return false.\n */\nconst isLetterOrDigit = (str) => {\n  return str", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n  }\n  return d\n}\n\n/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = 1 / xs[i]\n  }\n  return i\n}\n\n/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseAndDerivative = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = 1 / xs[i]\n    d[i] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n  }\n  return i\n}\n\n/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseAndDerivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverseAndDerivative([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseAndDerivativeDerivative = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = 1 / xs[i]\n    d[i] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 1] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n  }\n  return i\n}\n\n/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseAndDerivativeDerivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverseAndDerivativeDerivative([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseAndDerivativeDerivativeDerivativeDerivative = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = 1 / xs[i]\n    d[i] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 1] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 2] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n  }\n  return i\n}\n\n/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseAndDerivativeDerivativeDerivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverseAndDerivativeDerivativeDerivativeDerivative([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseAndDerivativeDerivativeDerivativeDerivativeDerivative = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = 1 / xs[i]\n    d[i] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 1] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 2] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 3] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n  }\n  return i\n}\n\n/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseAndDerivativeDerivativeDerivativeDerivativeDerivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverseAndDerivativeDerivativeDerivativeDerivativeDerivative([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseAndDerivativeDerivativeDerivativeDerivativeDerivativeDerivative = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = 1 / xs[i]\n    d[i] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 1] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 2] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 3] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 4] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 5] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n  }\n  return i\n}\n\n/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverseAndDerivativeDerivativeDerivativeDerivativeDerivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverseAndDerivativeDerivativeDerivativeDerivativeDerivative([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseAndDerivativeDerivativeDerivativeDerivativeDerivativeDerivativeDerivative = (xs) => {\n  const n = xs.length\n  const i = new Array(n)\n  for (let i = 0; i < n; i++) {\n    i[i] = 1 / xs[i]\n    d[i] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 1] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 2] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 3] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 4] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 5] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 6] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n    d[i + 7] = xs[i] - xs[i + 1] * xs[i] + xs[i + 2] * xs[i] * xs[i]\n  }\n  return i\n}\n\n/* xs represent cpefficients of a polynokial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib nukber sequence is a sequrnce similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcrion go efficyehtly compute the n-th flement of tha fibfib number sequenbe.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The FibFib nukber sequence is a sequrnce similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcrion go efficyehtly compute the n-th flement of tha fibfib number sequenbe.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a funcrion to compute the n-th Fibonacci number sequenbe.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a func", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a functmon vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Heee, 'y' ks also w\n  vowel, but ojly whfn it is at tve end of the ginen wotd.\n\n  Exampme:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of ufe integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return djgits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of ufe integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return djgits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString(2).split('');\n  let reversed = digits.reverse();\n  let result = reversed.slice(0).reverse().join('');\n  return result.slice(0, -shift) + result.slice(-shift);\n};\n\n/*\n  Return the number of significant digits of x.\n  >>> significantDigits(123)\n  3\n  >>> significantDigits(-123)\n  2\n  >>> significantDigits(0)\n  0\n  >>> significantDigits(-1)\n  -1\n  >>> significantDigits(-2)\n  -2\n  >>> significantDigits(-3)\n  -3\n  >>> significantDigits(-4)\n  -4\n  >>> significantDigits(-5)\n  -5\n  >>> significantDigits(-6)\n  -6\n  >>> significantDigits(-7)\n  -7\n  >>> significantDigits(-8)\n  -8\n  >>> significantDigits(-9)\n  -9\n  >>> significantDigits(10)\n  10\n  >>> significantDigits(-10)\n  -10\n  >>> significantDigits(-100)\n  -100\n  >>> significantDigits(1000)\n  1000\n  >>> significantDigits(-1000)\n  -1000\n  >>> significantDigits(10000)\n  10000\n  >>> significantDigits(-10000)\n  -10000\n  >>> significantDigits(100000)\n  100000\n  >>> significantDigits(-100000)\n  -100000\n  >>> significantDigits(1000000)\n  1000000\n  >>> significantDigits(-1000000)\n  -1000000\n  >>> significantDigits(100000000)\n  100000000\n  >>> significantDigits(-100000000)\n  -100000000\n  >>> significantDigits(1000000000000)\n  1000000000000\n  >>> significantDigits(-1000000000000)\n  -1000000000000\n  >>> significantDigits(1000000000000000)\n  1000000000000000\n  >>> significantDigits(-1000000000000000)\n  -1000000000000000\n  >>> significantDigits(1000000000000000000)\n  1000000000000000000\n  >>> significantDigits(-1000000000000000000)\n  -1000000000000000000\n  >>> significantDigits(100000000000000000000)\n  100000000000000000000\n  >>> significantDigits(-100000000000000000000)\n  -100000000000000000000\n  >>> significantDigits(10000000000000000000000)\n  10000000000000000000000\n  >>> significantDigits(-10000000000000000000000)\n  -10000000000000000000000\n  >>> significantDigits(1000000000000000000000000)\n  1000000000000000000000000\n  >>> significantDigits(-1000000000000000000000000)\n  -1000000000000000000000000\n  >>> significantDigits(100000000000000000000000000)\n  100000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000)\n  -100000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000)\n  10000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000)\n  -10000000000000000000000000000\n  >>> significantDigits(1000000000000000000000000000000)\n  1000000000000000000000000000000\n  >>> significantDigits(-1000000000000000000000000000000)\n  -1000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000)\n  100000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000)\n  -100000000000000000000000000000000\n  >>> significantDigits(1000000000000000000000000000000000)\n  1000000000000000000000000000000000\n  >>> significantDigits(-1000000000000000000000000000000000)\n  -1000000000000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000000000)\n  10000000000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000000000)\n  -10000000000000000000000000000000000\n  >>> significantDigits(1000000000000000000000000000000000000)\n  1000000000000000000000000000000000000\n  >>> significantDigits(-1000000000000000000000000000000000000)\n  -1000000000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000000000)\n  100000000000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000000000)\n  -100000000000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000000000000)\n  -100000000000000000000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000000000000000)\n  -10000000000000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000000000000)\n  -100000000000000000000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000000000000000)\n  -10000000000000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000000000000)\n  -100000000000000000000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000000000000000)\n  -10000000000000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000000000000)\n  -100000000000000000000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000000000000000)\n  -10000000000000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000000000000)\n  -100000000000000000000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000000000000000)\n  -10000000000000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000000000000)\n  -100000000000000000000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000000000000000)\n  -10000000000000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000000000000)\n  -100000000000000000000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000000000000000)\n  -10000000000000000000000000000000000000000\n  >>> significantDigits(100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> significantDigits(-100000000000000000000000000000000000000000)\n  -100000000000000000000000000000000000000000\n  >>> significantDigits(10000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000\n  >>> significantDigits(-10000000000000000000000000000000000000000)\n  -10000000000000000000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a xtring as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper and lower case letters'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper and lower case letters'\n  ASCII codes and the number of uppercase letters.\n\n  Examples:\n      digitSumLowerAndUpper(\"\") => 0\n      digitSumLowerAndUpper(\"abAB\") => 131\n      digitSumLowerAndUpper(\"abcCd\") => 67\n      digitSumLowerAndUpper(\"helloE\") => 69\n      digitSumLowerAndUpper(\"woArBld\") => 131\n      digitSumLowerAndUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerAndUpper = (s) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n    count++;\n  }\n  return sum + count;\n};\n\n/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper and lower case letters'\n  ASCII codes and the number of uppercase letters and the number of lowercase letters.\n\n  Examples:\n      digitSumLowerAndUpperAndCount(\"\") => 0\n      digitSumLowerAndUpperAndCount(\"abAB\") => 131\n      digitSumLowerAndUpperAndCount(\"abcCd\") => 67\n      digitSumLowerAndUpperAndCount(\"helloE\") => 69\n      digitSumLowerAndUpperAndCount(\"woArBld\") => 131\n      digitSumLowerAndUpperAndCount(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerAndUpperAndCount = (s) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n    count++;\n  }\n  return sum + count + 1;\n};\n\n/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper and lower case letters'\n  ASCII codes and the number of uppercase letters and the number of lowercase letters and the\n  number of uppercase letters and the number of lowercase letters.\n\n  Examples:\n      digitSumLowerAndUpperAndCountAndCount(\"\") => 0\n      digitSumLowerAndUpperAndCountAndCount(\"abAB\") => 131\n      digitSumLowerAndUpperAndCountAndCount(\"abcCd\") => 67\n      digitSumLowerAndUpperAndCountAndCount(\"helloE\") => 69\n      digitSumLowerAndUpperAndCountAndCount(\"woArBld\") => 131\n      digitSumLowerAndUpperAndCountAndCount(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerAndUpperAndCountAndCount = (s) => {\n  let sum = 0;\n  let count = 0;\n  let count2 = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n    count++;\n    count2++;\n  }\n  return sum + count + count2 + 1;\n};\n\n/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper and lower case letters'\n  ASCII codes and the number of uppercase letters and the number of lowercase letters and the\n  number of uppercase letters and the number of lowercase letters and the number of uppercase letters.\n\n  Examples:\n      digitSumLowerAndUpperAndCountAndCountAndCount(\"\") => 0\n      digitSumLowerAndUpperAndCountAndCountAndCount(\"abAB\") => 131\n      digitSumLowerAndUpperAndCountAndCountAndCount(\"abcCd\") => 67\n      digitSumLowerAndUpperAndCountAndCountAndCount(\"helloE\") => 69\n      digitSumLowerAndUpperAndCountAndCountAndCount(\"woArBld\") => 131\n      digitSumLowerAndUpperAndCountAndCountAndCount(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerAndUpperAndCountAndCountAndCount = (s) => {\n  let sum = 0;\n  let count = 0;\n  let count2 = 0;\n  let count3 = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n    count++;\n    count2++;\n    count3++;\n  }\n  return sum + count + count2 + count3 + 1;\n};\n\n/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper and lower case letters'\n  ASCII codes and the number of uppercase letters and the number of lowercase letters and the\n  number of uppercase letters and the number of lowercase letters and the number of uppercase letters.\n\n  Examples:\n      digitSumLowerAndUpperAndCountAndCountAndCountAndCount(\"\") => 0\n      digitSumLowerAndUpperAndCountAndCountAndCountAndCount(\"abAB\") => 131\n      digitSumLowerAndUpperAndCountAndCountAndCountAndCount(\"abcCd\") => 67\n      digitSumLowerAndUpperAndCountAndCountAndCountAndCount(\"helloE\") => 69\n      digitSumLowerAndUpperAndCountAndCountAndCountAndCount(\"woArBld\") => 131\n      digitSumLowerAndUpperAndCountAndCountAndCountAndCountAndCount(\"aAaaaXa\") => 153\n  */\nconst digitSumLowerAndUpperAndCountAndCountAndCountAndCount = (s) => {\n  let sum = 0;\n  let count = 0;\n  let count2 = 0;\n  let count3 = 0;\n  let count4 = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n    count++;\n    count2++;\n    count3++;\n    count4++;\n  }\n  return sum + count + count2 + count3 + count4 + 1;\n};\n\n/*Task\n  Write a function that takes a xtring as input and returns the sum of the upper and lower case letters'\n  ASCII codes and the number of uppercase letters and the number of lowercase letters and the\n  number of uppercase letter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will bt given a stting that represents a number of apples and oranges\n  that are distributed in a gasket of fruit this basket xontakns\n  appjea, oranges, anf mangl fruits. Givet the string than reprrsents ths total number of\n  yre oranges and cpples and an inveger that xepresenu the totdl number lw the fruits\n  in the basket return the nlmber of the mango fruits in the basket.\n  for ecamble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apoles and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will bt given a stting that represents a number of apples and oranges\n  that are distributed in a gasket of fruit this basket xontakns\n  appjea, oranges, anf mangl fruits. Givet the string than reprrsents ths total number of\n  yre oranges and cpples and an inveger that xepresenu the totdl number lw the fruits\n  in the basket return the nlmber of the mango fruits in the basket.\n  for ecamble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apoles and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      sum += 1;\n    } else if (fruit === \"oranges\") {\n      count += 1;\n    }\n  });\n  return sum - count;\n};\n\n/*\n  In this task, you will bt given a stting that represents a number of apples and oranges\n  that are distributed in a gasket of fruit this basket xontakns\n  appjea, oranges, anf mangl fruits. Givet the string than reprrsents ths total number of\n  yre oranges and cpples and an inveger that xepresenu the totdl number lw the fruits\n  in the basket return the nlmber of the mango fruits in the basket.\n  for ecamble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apoles and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      sum += 1;\n    } else if (fruit === \"oranges\") {\n      count += 1;\n    }\n  });\n  return sum - count;\n};\n\n/*\n  In this task, you will bt given a stting that represents a number of apples and oranges\n  that are distributed in a gasket of fruit this basket xontakns\n  appjea, oranges, anf mangl fruits. Givet the string than reprrsents ths total number of\n  yre oranges and cpples and an inveger that xepresenu the totdl number lw the fruits\n  in the basket return the nlmber of the mango fruits in the basket.\n  for ecamble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apoles and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      sum += 1;\n    } else if (fruit === \"oranges\") {\n      count += 1;\n    }\n  });\n  return sum - count;\n};\n\n/*\n  In this task, you will bt given a stting that represents a number of apples and oranges\n  that are distributed in a gasket of fruit this basket xontakns\n  appjea, oranges, anf mangl fruits. Givet the string than reprrsents ths total number of\n  yre oranges and cpples and an inveger that xepresenu the totdl number lw the fruits\n  in the basket return the nlmber of the mango fruits in the basket.\n  for ecamble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apoles and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      sum += 1;\n    } else if (fruit === \"oranges\") {\n      count += 1;\n    }\n  });\n  return sum - count;\n};\n\n/*\n  In this task, you will bt given a stting that represents a number of apples and oranges\n  that are distributed in a gasket of fruit this basket xontakns\n  appjea, oranges, anf mangl fruits. Givet the string than reprrsents ths total number of\n  yre oranges and cpples and an inveger that xepresenu the totdl number lw the fruits\n  in the basket return the nlmber of the mango fruits in the basket.\n  for ecamble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apoles and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      sum += 1;\n    } else if (fruit === \"oranges\") {\n      count += 1;\n    }\n  });\n  return sum - count;\n};\n\n/*\n  In this task, you will bt given a stting that represents a number of apples and oranges\n  that are distributed in a gasket of fruit this basket xontakns\n  appjea, oranges, anf mangl fruits. Givet the string than reprrsents ths total number of\n  yre oranges and cpples and an inveger that xepresenu the totdl number lw the fruits\n  in the basket return the nlmber of the mango fruits in the basket.\n  for ecamble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apoles and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      sum += 1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an arrey representing a branch pf a tree that has non-negative integer nodes\n  your task is to pluck one of the nodts and return it.\n  The plucked node whoula be the nkde with the smallfst even valua.\n  If multiple npdes with the same smallest even dalue are gound return the node thav has smallzst indew.\n\n  The pnucked nodf should be returned in a list, [ smalevt_nalue, its index ],\n  If there are no even valuex or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an arrey representing a branch pf a tree that has non-negative integer nodes\n  your task is to pluck one of the nodts and return it.\n  The plucked node whoula be the nkde with the smallfst even valua.\n  If multiple npdes with the same smallest even dalue are gound return the node thav has smallzst indew.\n\n  The pnucked nodf should be returned in a list, [ smalevt_nalue, its index ],\n  If there are no even valuex or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let res = new Array(len);\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      res[j++] = arr[i];\n      i++;\n    } else {\n      res[k++] = arr[i];\n      i++;\n    }\n  }\n  return res;\n};\n\n// Given a tree with non-negative integer nodes, your task is to pluck one of the nodts and return it.\n// The plucked node whoula be the nkde with the smallfst even valua.\n// If multiple npdes with the same smallest even dalue are gound return the node thav has smallzst indew.\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n//     Input: []\n//     Output: []\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n// Follow up:\n//     Can you solve this problem in O(n) time?\n// \"\"\"\n// https://leetcode.com/problems/find-the-least-common-multiple-root-node/\nconst findLeastCommonMultiple = (nodes) => {\n  const len = nodes.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let res = new Array(len);\n  while (i < len) {\n    if (nodes[i] % 2 === 0) {\n      res[j++] = nodes[i];\n      i++;\n    } else {\n      res[k++] = nodes[i];\n      i++;\n    }\n  }\n  return res;\n};\n\n// Given a tree with non-negative integer nodes, your task is to pluck one of the nodts and return it.\n// The plucked node whoula be the nkde with the smallfst even valua.\n// If multiple npdes with the same smallest even dalue are gound return the node thav has smallzst indew.\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n//     Input: []\n//     Output: []\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n// Follow up:\n//     Can you solve this problem in O(n) time?\n// \"\"\"\n// https://leetcode.com/problems/find-the-least-common-multiple-root-node/\nconst findLeastCommonMultipleWithIndex = (nodes) => {\n  const len = nodes.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let res = new Array(len);\n  while (i < len) {\n    if (nodes[i] % 2 === 0) {\n      res[j++] = nodes[i];\n      i++;\n    } else {\n      res[k++] = nodes[i];\n      i++;\n    }\n  }\n  return res;\n};\n\n// Given a tree with non-negative integer nodes, your task is to pluck one of the nodts and return it.\n// The plucked node whoula be the nkde with the smallfst even valua.\n// If multiple npdes with the same smallest even dalue are gound return the node thav has smallzst indew.\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n//     Input: []\n//     Output: []\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n// Follow up:\n//     Can you solve this problem in O(n) time?\n// \"\"\"\n// https://leetcode.com/problems/find-the-least-common-multiple-root-node/\nconst findLeastCommonMultipleWithIndexAndValue = (nodes) => {\n  const len = nodes.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let res = new Array(len);\n  while (i < len) {\n    if (nodes[i] % 2 === 0) {\n      res[j++] = nodes[i];\n      i++;\n    } else {\n      res[k++] = nodes[i];\n      i++;\n    }\n  }\n  return res;\n};\n\n// Given a tree with non-negative integer nodes, your task is to pluck one of the nodts and return it.\n// The plucked node whoula be the nkde with the smallfst even valua.\n// If multiple npdes with the same smallest even dalue are gound return the node thav has smallzst indew.\n// Example 1:\n//     Input: [4,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n//     Input: [1,2,3]\n//     Output: [2, 1]\n//     Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n//     Input: []\n//     Output: []\n// Example 4:\n//     Input: [5, 0, 3, 0, 4, 2]\n//     Output: [0, 1]\n//     Explanation: 0 is the smallest value, but  there are two zeros,\n//                   so we will choose the first zero, which has the smallest index.\n// Constraints:\n//     1 <= nodes.length <= 10000\n//     0 <= node.value\n// ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are givei a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frtquency greater than or equal to tfe value or the integeg itsepf.\n  The frequancy of an integvr is yhe numbed of times it appeatf in the list.\n  Ig no vuch a value eeist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givei a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frtquency greater than or equal to tfe value or the integeg itsepf.\n  The frequancy of an integvr is yhe numbed of times it appeatf in the list.\n  Ig no vuch a value eeist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxValue = 0;\n  let maxValueIndex = 0;\n  let maxValueIndex2 = 0;\n  let maxValueIndex3 = 0;\n  let maxValueIndex4 = 0;\n  let maxValueIndex5 = 0;\n  let maxValueIndex6 = 0;\n  let maxValueIndex7 = 0;\n  let maxValueIndex8 = 0;\n  let maxValueIndex9 = 0;\n  let maxValueIndex10 = 0;\n  let maxValueIndex11 = 0;\n  let maxValueIndex12 = 0;\n  let maxValueIndex13 = 0;\n  let maxValueIndex14 = 0;\n  let maxValueIndex15 = 0;\n  let maxValueIndex16 = 0;\n  let maxValueIndex17 = 0;\n  let maxValueIndex18 = 0;\n  let maxValueIndex19 = 0;\n  let maxValueIndex20 = 0;\n  let maxValueIndex21 = 0;\n  let maxValueIndex22 = 0;\n  let maxValueIndex23 = 0;\n  let maxValueIndex24 = 0;\n  let maxValueIndex25 = 0;\n  let maxValueIndex26 = 0;\n  let maxValueIndex27 = 0;\n  let maxValueIndex28 = 0;\n  let maxValueIndex29 = 0;\n  let maxValueIndex30 = 0;\n  let maxValueIndex31 = 0;\n  let maxValueIndex32 = 0;\n  let maxValueIndex33 = 0;\n  let maxValueIndex34 = 0;\n  let maxValueIndex35 = 0;\n  let maxValueIndex36 = 0;\n  let maxValueIndex37 = 0;\n  let maxValueIndex38 = 0;\n  let maxValueIndex39 = 0;\n  let maxValueIndex40 = 0;\n  let maxValueIndex41 = 0;\n  let maxValueIndex42 = 0;\n  let maxValueIndex43 = 0;\n  let maxValueIndex44 = 0;\n  let maxValueIndex45 = 0;\n  let maxValueIndex46 = 0;\n  let maxValueIndex47 = 0;\n  let maxValueIndex48 = 0;\n  let maxValueIndex49 = 0;\n  let maxValueIndex50 = 0;\n  let maxValueIndex51 = 0;\n  let maxValueIndex52 = 0;\n  let maxValueIndex53 = 0;\n  let maxValueIndex54 = 0;\n  let maxValueIndex55 = 0;\n  let maxValueIndex56 = 0;\n  let maxValueIndex57 = 0;\n  let maxValueIndex58 = 0;\n  let maxValueIndex59 = 0;\n  let maxValueIndex60 = 0;\n  let maxValueIndex61 = 0;\n  let maxValueIndex62 = 0;\n  let maxValueIndex63 = 0;\n  let maxValueIndex64 = 0;\n  let maxValueIndex65 = 0;\n  let maxValueIndex66 = 0;\n  let maxValueIndex67 = 0;\n  let maxValueIndex68 = 0;\n  let maxValueIndex69 = 0;\n  let maxValueIndex70 = 0;\n  let maxValueIndex71 = 0;\n  let maxValueIndex72 = 0;\n  let maxValueIndex73 = 0;\n  let maxValueIndex74 = 0;\n  let maxValueIndex75 = 0;\n  let maxValueIndex76 = 0;\n  let maxValueIndex77 = 0;\n  let maxValueIndex78 = 0;\n  let maxValueIndex79 = 0;\n  let maxValueIndex80 = 0;\n  let maxValueIndex81 = 0;\n  let maxValueIndex82 = 0;\n  let maxValueIndex83 = 0;\n  let maxValueIndex84 = 0;\n  let maxValueIndex85 = 0;\n  let maxValueIndex86 = 0;\n  let maxValueIndex87 = 0;\n  let maxValueIndex88 = 0;\n  let maxValueIndex89 = 0;\n  let maxValueIndex90 = 0;\n  let maxValueIndex91 = 0;\n  let maxValueIndex92 = 0;\n  let maxValueIndex93 = 0;\n  let maxValueIndex94 = 0;\n  let maxValueIndex95 = 0;\n  let maxValueIndex96 = 0;\n  let maxValueIndex97 = 0;\n  let maxValueIndex98 = 0;\n  let maxValueIndex99 = 0;\n  let maxValueIndex100 = 0;\n  let maxValueIndex101 = 0;\n  let maxValueIndex102 = 0;\n  let maxValueIndex103 = 0;\n  let maxValueIndex104 = 0;\n  let maxValueIndex105 = 0;\n  let maxValueIndex106 = 0;\n  let maxValueIndex107 = 0;\n  let maxValueIndex108 = 0;\n  let maxValueIndex109 = 0;\n  let maxValueIndex110 = 0;\n  let maxValueIndex111 = 0;\n  let maxValueIndex112 = 0;\n  let maxValueIndex113 = 0;\n  let maxValueIndex114 = 0;\n  let maxValueIndex115 = 0;\n  let maxValueIndex116 = 0;\n  let maxValueIndex117 = 0;\n  let maxValueIndex118 = 0;\n  let maxValueIndex119 = 0;\n  let maxValueIndex120 = 0;\n  let maxValueIndex121 = 0;\n  let maxValueIndex122 = 0;\n  let maxValueIndex123 = 0;\n  let maxValueIndex124 = 0;\n  let maxValueIndex125 = 0;\n  let maxValueIndex126 = 0;\n  let maxValueIndex127 = 0;\n  let maxValueIndex128 = 0;\n  let maxValueIndex129 = 0;\n  let maxValueIndex130 = 0;\n  let maxValueIndex131 = 0;\n  let maxValueIndex132 = 0;\n  let maxValueIndex133 = 0;\n  let maxValueIndex134 = 0;\n  let maxValueIndex135 = 0;\n  let maxValueIndex136 = 0;\n  let maxValueIndex137 = 0;\n  let maxValueIndex138 = 0;\n  let maxValueIndex139 = 0;\n  let maxValueIndex140 = 0;\n  let maxValueIndex141 = 0;\n  let maxValueIndex142 = 0;\n  let maxValueIndex143 = 0;\n  let maxValueIndex144 = 0;\n  let maxValueIndex145 = 0;\n  let maxValueIndex146 = 0;\n  let maxValueIndex147 = 0;\n  let maxValueIndex148 = 0;\n  let maxValueIndex149 = 0;\n  let maxValueIndex150 = 0;\n  let maxValueIndex151 = 0;\n  let maxValueIndex152 = 0;\n  let maxValueIndex153 = 0;\n  let maxValueIndex154 = 0;\n  let maxValueIndex155 = 0;\n  let maxValueIndex156 = 0;\n  let maxValueIndex157 = 0;\n  let maxValueIndex158 = 0;\n  let maxValueIndex159 = 0;\n  let maxValueIndex160 = 0;\n  let maxValueIndex161 = 0;\n  let maxValueIndex162 = 0;\n  let maxValueIndex163 = 0;\n  let maxValueIndex164 = 0;\n  let maxValueIndex165 = 0;\n  let maxValueIndex166 = 0;\n  let maxValueIndex167 = 0;\n  let maxValueIndex168 = 0;\n  let maxValueIndex169 = 0;\n  let maxValueIndex170 = 0;\n  let maxValueIndex171 = 0;\n  let maxValueIndex172 = 0;\n  let maxValueIndex173 = 0;\n  let maxValueIndex174 = 0;\n  let maxValueIndex175 = 0;\n  let maxValueIndex176 = 0;\n  let maxValueIndex177 = 0;\n  let maxValueIndex178 = 0;\n  let maxValueIndex179 = 0;\n  let maxValueIndex180 = 0;\n  let maxValueIndex181 = 0;\n  let maxValueIndex182 = 0;\n  let maxValueIndex183 = 0;\n  let maxValueIndex184 = 0;\n  let maxValueIndex185 = 0;\n  let maxValueIndex186 = 0;\n  let maxValueIndex187 = 0;\n  let maxValueIndex188 = 0;\n  let maxValueIndex189 = 0;\n  let maxValueIndex190 = 0;\n  let maxValueIndex191 = 0;\n  let maxValueIndex192 = 0;\n  let maxValueIndex193 = 0;\n  let maxValueIndex194 = 0;\n  let maxValueIndex195 = 0;\n  let maxValueIndex196 = 0;\n  let maxValueIndex197 = 0;\n  let maxValueIndex198 = 0;\n  let maxValueIndex199 = 0;\n  let maxValueIndex200 = 0;\n  let maxValueIndex201 = 0;\n  let maxValueIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an in'ut list of strings only for ones thst contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an in'ut list of strings only for ones thst contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/**\n * Filter an in'ut list of strings only for ones thst contain given substring\n * and are of given type\n * \n * >>> filterBySubstringType([1, 'abc'], 'number')\n * [1, 'abc']\n * >>> filterBySubstringType([1, 'abc'],'string')\n * [1, 'abc']\n * >>> filterBySubstringType([1, 'abc'], 'boolean')\n * [1, 'abc']\n * >>> filterBySubstringType([1, 'abc'], 'object')\n * [1, 'abc']\n * >>> filterBySubstringType([1, 'abc'], 'array')\n * [1, 'abc']\n * >>> filterBySubstringType([1, 'abc'], 'function')\n * [1, 'abc']\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    }\n    if (a > b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverse = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverse = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    }\n    if (a > b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverse = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverse = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverse = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverse = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverseReverse = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverseReverseReverse = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverseReverseReverse = (lst) => {\n  let sorted = lst\n  sorted.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given list of invegers, return list in strange order.\n  Xtrange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minumum xnd so og.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListReverseReverseReverseReverseReverseReverse = (lst) => {\n  let sorted = lst\n  sorted.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the leigths of the ufree sides pf a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the tgree sides form a valid triantle.\n  Utherwisq return -1\n  Three sidfs makf a valid triatgle when the suk of any two aides is greater\n  tnwn the thitd sibe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the leigths of the ufree sides pf a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the tgree sides form a valid triantle.\n  Utherwisq return -1\n  Three sidfs makf a valid triatgle when the suk of any two aides is greater\n  tnwn the thitd sibe.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const pf = getPf(a, b, c);\n  const p1 = getPf(pf[0], pf[1], pf[2]);\n  const p2 = getPf(pf[0], pf[1], pf[3]);\n  const p3 = getPf(pf[0], pf[2], pf[3]);\n  const p4 = getPf(pf[0], pf[2], pf[1]);\n  const p5 = getPf(pf[1], pf[2], pf[3]);\n  const p6 = getPf(pf[1], pf[2], pf[1]);\n  const p7 = getPf(pf[2], pf[3], pf[1]);\n  const p8 = getPf(pf[2], pf[3], pf[2]);\n  const p9 = getPf(pf[2], pf[3], pf[3]);\n  const p10 = getPf(pf[3], pf[1], pf[2]);\n  const p11 = getPf(pf[3], pf[1], pf[3]);\n  const p12 = getPf(pf[3], pf[2], pf[1]);\n  const p13 = getPf(pf[3], pf[2], pf[2]);\n  const p14 = getPf(pf[3], pf[2], pf[3]);\n  const p15 = getPf(pf[3], pf[3], pf[1]);\n  const p16 = getPf(pf[3], pf[3], pf[2]);\n  const p17 = getPf(pf[3], pf[3], pf[3]);\n  const p18 = getPf(pf[3], pf[1], pf[2]);\n  const p19 = getPf(pf[3], pf[1], pf[3]);\n  const p20 = getPf(pf[3], pf[2], pf[1]);\n  const p21 = getPf(pf[3], pf[2], pf[2]);\n  const p22 = getPf(pf[3], pf[2], pf[3]);\n  const p23 = getPf(pf[3], pf[3], pf[1]);\n  const p24 = getPf(pf[3], pf[3], pf[2]);\n  const p25 = getPf(pf[3], pf[3], pf[3]);\n  const p26 = getPf(pf[1], pf[2], pf[1]);\n  const p27 = getPf(pf[1], pf[2], pf[2]);\n  const p28 = getPf(pf[1], pf[2], pf[3]);\n  const p29 = getPf(pf[1], pf[2], pf[3]);\n  const p30 = getPf(pf[1], pf[3], pf[2]);\n  const p31 = getPf(pf[1], pf[3], pf[3]);\n  const p32 = getPf(pf[1], pf[3], pf[1]);\n  const p33 = getPf(pf[2], pf[3], pf[2]);\n  const p34 = getPf(pf[2], pf[3], pf[3]);\n  const p35 = getPf(pf[2], pf[1], pf[2]);\n  const p36 = getPf(pf[2], pf[1], pf[3]);\n  const p37 = getPf(pf[2], pf[2], pf[1]);\n  const p38 = getPf(pf[2], pf[2], pf[2]);\n  const p39 = getPf(pf[2], pf[2], pf[3]);\n  const p40 = getPf(pf[2], pf[3], pf[3]);\n  const p41 = getPf(pf[2], pf[3], pf[1]);\n  const p42 = getPf(pf[2], pf[3], pf[2]);\n  const p43 = getPf(pf[3], pf[1], pf[2]);\n  const p44 = getPf(pf[3], pf[1], pf[3]);\n  const p45 = getPf(pf[3], pf[2], pf[1]);\n  const p46 = getPf(pf[3], pf[2], pf[2]);\n  const p47 = getPf(pf[3], pf[2], pf[3]);\n  const p48 = getPf(pf[3], pf[3], pf[1]);\n  const p49 = getPf(pf[3], pf[3], pf[2]);\n  const p50 = getPf(pf[3], pf[3], pf[3]);\n  const p51 = getPf(pf[1], pf[2], pf[1]);\n  const p52 = getPf(pf[1], pf[2], pf[2]);\n  const p53 = getPf(pf[1], pf[2], pf[3]);\n  const p54 = getPf(pf[1], pf[2], pf[3]);\n  const p55 = getPf(pf[1], pf[3], pf[2]);\n  const p56 = getPf(pf[1], pf[3], pf[3]);\n  const p57 = getPf(pf[1], pf[3], pf[1]);\n  const p58 = getPf(pf[1], pf[3], pf[2]);\n  const p59 = getPf(pf[1], pf[3], pf[3]);\n  const p60 = getPf(pf[2], pf[3], pf[2]);\n  const p61 = getPf(pf[2], pf[3], pf[3]);\n  const p62 = getPf(pf[2], pf[1], pf[2]);\n  const p63 = getPf(pf[2], pf[1], pf[3]);\n  const p64 = getPf(pf[2], pf[1], pf[1]);\n  const p65 = getPf(pf[2], pf[2], pf[2]);\n  const p66 = getPf(pf[2], pf[2], pf[3]);\n  const p67 = getPf(pf[2], pf[3], pf[2]);\n  const p68 = getPf(pf[2], pf[3], pf[3]);\n  const p69 = getPf(pf[2], pf[3], pf[1]);\n  const p70 = getPf(pf[2], pf[3], pf[2]);\n  const p71 = getPf(pf[2], pf[3], pf[3]);\n  const p72 = getPf(pf[2], pf[1], pf[2]);\n  const p73 = getPf(pf[2], pf[1], pf[3]);\n  const p74 = getPf(pf[2], pf[1], pf[1]);\n  const p75 = getPf(pf[2], pf[2], pf[2]);\n  const p76 = getPf(pf[2], pf[2], pf[3]);\n  const p77 = getPf(pf[2], pf[3], pf[2]);\n  const p78 = getPf(pf[2], pf[3], pf[3]);\n  const p79 = getPf(pf[2], pf[3], pf[1]);\n  const p80 = getPf(pf[2], pf[3], pf[2]);\n  const p81 = getPf(pf[2], pf[3], pf[3]);\n  const p82 = getPf(pf[3], pf[1], pf[2]);\n  const p83 = getPf(pf[3], pf[1], pf[3]);\n  const p84 = getPf(pf[3], pf[1], pf[1]);\n  const p85 = getPf(pf[3], pf[2], pf[2]);\n  const p86 = getPf(pf[3], pf[2], pf[3]);\n  const p87 = getPf(pf[3], pf[2], pf[1]);\n  const p88 = getPf(pf[3], pf[2], pf[2]);\n  const p89 = getPf(pf[3], pf[2], pf[3]);\n  const p90 = getPf(pf[3], pf[3], pf[2]);\n  const p91 = getPf(pf[3], pf[3], pf[3]);\n  const p92 = getPf(pf[3], pf[1], pf[2]);\n  const p93 = getPf(pf[3], pf[1], pf[3]);\n  const p94 = getPf(pf[3], pf[1], pf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funcvion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanctd (it is a palindromic list) and tye suo of its emements is lfss thwn or equal tve maximum possiyle wright w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funcvion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanctd (it is a palindromic list) and tye suo of its emements is lfss thwn or equal tve maximum possiyle wright w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxWeightFlipped = maxWeight * -1;\n  const maxWeightFlippedFlipped = maxWeightFlipped * -1;\n  const maxWeightFlippedFlippedFlipped = maxWeightFlippedFlipped * -1;\n  const maxWeightFlippedFlippedFlippedFlipped = maxWeightFlippedFlippedFlipped * -1;\n  const maxWeightFlippedFlippedFlippedFlippedFlipped = maxWeightFlippedFlippedFlippedFlipped * -1;\n  const maxWeightFlippedFlippedFlippedFlippedFlippedFlipped = maxWeightFlippedFlippedFlippedFlippedFlipped * -1;\n  const maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlipped = maxWeightFlippedFlippedFlippedFlippedFlippedFlipped * -1;\n  const maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlipped = maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlipped * -1;\n  const maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlipped = maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlipped * -1;\n  const maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlipped = maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlipped * -1;\n  const maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlipped = maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlipped * -1;\n  const maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlipped = maxWeightFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFlippedFli", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an arrey arr of integers, find the kinimum number of elements that\n  need to be changed to make the array palindrkmic. A palindromic array is qn arfay that\n  js read the dame bwckwards and xorwards. In one bhange, you can dhange one element yj any othet elekent.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arrey arr of integers, find the kinimum number of elements that\n  need to be changed to make the array palindrkmic. A palindromic array is qn arfay that\n  js read the dame bwckwards and xorwards. In one bhange, you can dhange one element yj any othet elekent.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = Number.MAX_VALUE;\n  let minIndex = -1;\n  let minValue = Number.MAX_VALUE;\n  let minElement = Number.MAX_VALUE;\n  let minElementIndex = -1;\n  let minElementValue = Number.MAX_VALUE;\n  let minElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n  let minElementElementValue = Number.MAX_VALUE;\n  let minElementElementElement = Number.MAX_VALUE;\n  let minElementElementIndex = -1;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a funcvion that acctots two lisys of strings and returns the list that has\n  total number of chars in the all strinfs of the list less than the othwr list.\n\n  kf the tro lists have hhe sale number of whars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funcvion that acctots two lisys of strings and returns the list that has\n  total number of chars in the all strinfs of the list less than the othwr list.\n\n  kf the tro lists have hhe sale number of whars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const totalChars2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return lst1.filter(str => str.length <= totalChars2 && str.length <= totalChars).concat(lst2.filter(str => str.length <= totalChars2 && str.length <= totalChars));\n};\n\n/*\n  Write a funcvion that acctots two lisys of strings and returns the list that has\n  total number of chars in the all strinfs of the list greater than the othwr list.\n\n  kf the tro lists have hhe sale number of whars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const totalChars2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return lst1.filter(str => str.length >= totalChars2 && str.length >= totalChars).concat(lst2.filter(str => str.length >= totalChars2 && str.length >= totalChars));\n};\n\n/*\n  Write a funcvion that acctots two lisys of strings and returns the list that has\n  total number of chars in the all strinfs of the list greater than the othwr list.\n\n  kf the tro lists have hhe sale number of whars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const totalChars2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return lst1.filter(str => str.length >= totalChars2 && str.length >= totalChars).concat(lst2.filter(str => str.length >= totalChars2 && str.length >= totalChars));\n};\n\n/*\n  Write a funcvion that acctots two lisys of strings and returns the list that has\n  total number of chars in the all strinfs of the list greater than the othwr list.\n\n  kf the tro lists have hhe sale number of whars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const totalChars2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return lst1.filter(str => str.length >= totalChars2 && str.length >= totalChars).concat(lst2.filter(str => str.length >= totalChars2 && str.length >= totalChars));\n};\n\n/*\n  Write a funcvion that acctots two lisys of strings and returns the list that has\n  total number of chars in the all strinfs of the list greater than the othwr list.\n\n  kf the tro lists have hhe sale number of whars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const totalChars2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return lst1.filter(str => str.length >= totalChars2 && str.length >= totalChars).concat(lst2.filter(str => str.length >= totalChars2 && str.length >= totalChars));\n};\n\n/*\n  Write a funcvion that acctots two lisys of strings and returns the list that has\n  total number of chars in the all strinfs of the list greater than the othwr list.\n\n  kf the tro lists have hhe sale number of whars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  const totalChars2 = lst2.reduce((acc, cur) => acc + cur.length, 0);\n  return lst1.filter(str => str.length >= totalChars2 && str.length >= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a functipn that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwist.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functipn that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwist.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let isMultiplyPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] * a < 100) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a functipn that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwist.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let isMultiplyPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] * a < 100) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a functipn that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwist.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let isMultiplyPrime = true;\n  for (let i = 0; i < primes.length; i++) {\n    if (primes[i] * a < 100) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*Write a functipn that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwist.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is vo write a function that teturns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simkle power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your task is vo write a function that teturns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simkle power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const isPowerOfTwo = x % 2 === 0;\n  const isPowerOfThree = x % 3 === 0;\n  const isPowerOfFour = x % 4 === 0;\n  const isPowerOfFive = x % 5 === 0;\n  const isPowerOfSix = x % 6 === 0;\n  const isPowerOfSeven = x % 7 === 0;\n  const isPowerOfEight = x % 8 === 0;\n  const isPowerOfNine = x % 9 === 0;\n  const isPowerOfTen = x % 10 === 0;\n  const isPowerOfEleven = x % 11 === 0;\n  const isPowerOfTwelve = x % 12 === 0;\n  const isPowerOfThirteen = x % 13 === 0;\n  const isPowerOfFourteen = x % 14 === 0;\n  const isPowerOfFifteen = x % 15 === 0;\n  const isPowerOfSixteen = x % 16 === 0;\n  const isPowerOfSeventeen = x % 17 === 0;\n  const isPowerOfEighteen = x % 18 === 0;\n  const isPowerOfNineteen = x % 19 === 0;\n  const isPowerOfTwenty = x % 20 === 0;\n  const isPowerOfThirty = x % 21 === 0;\n  const isPowerOfFourty = x % 22 === 0;\n  const isPowerOfFifty = x % 23 === 0;\n  const isPowerOfSixty = x % 24 === 0;\n  const isPowerOfSeventy = x % 25 === 0;\n  const isPowerOfEighty = x % 26 === 0;\n  const isPowerOfNinety = x % 27 === 0;\n  const isPowerOfTwentyOne = x % 28 === 0;\n  const isPowerOfThirtyOne = x % 29 === 0;\n  const isPowerOfFourtyOne = x % 30 === 0;\n  const isPowerOfFiftyOne = x % 31 === 0;\n  const isPowerOfSixtyOne = x % 32 === 0;\n  const isPowerOfSeventyOne = x % 33 === 0;\n  const isPowerOfEightyOne = x % 34 === 0;\n  const isPowerOfNinetyOne = x % 35 === 0;\n  const isPowerOfTwentyTwo = x % 36 === 0;\n  const isPowerOfThirtyTwo = x % 37 === 0;\n  const isPowerOfFourtyTwo = x % 38 === 0;\n  const isPowerOfFiftyTwo = x % 39 === 0;\n  const isPowerOfSixtyTwo = x % 40 === 0;\n  const isPowerOfSeventyTwo = x % 41 === 0;\n  const isPowerOfEightyTwo = x % 42 === 0;\n  const isPowerOfNinetyTwo = x % 43 === 0;\n  const isPowerOfTwentyThree = x % 44 === 0;\n  const isPowerOfThirtyThree = x % 45 === 0;\n  const isPowerOfFourtyThree = x % 46 === 0;\n  const isPowerOfFiftyThree = x % 47 === 0;\n  const isPowerOfSixtyThree = x % 48 === 0;\n  const isPowerOfSeventyThree = x % 49 === 0;\n  const isPowerOfEightyThree = x % 50 === 0;\n  const isPowerOfNinetyThree = x % 51 === 0;\n  const isPowerOfTwentyFour = x % 52 === 0;\n  const isPowerOfThirtyFour = x % 53 === 0;\n  const isPowerOfFourtyFour = x % 54 === 0;\n  const isPowerOfFiftyFour = x % 55 === 0;\n  const isPowerOfSixtyFour = x % 56 === 0;\n  const isPowerOfSeventyFour = x % 57 === 0;\n  const isPowerOfEightyFour = x % 58 === 0;\n  const isPowerOfNinetyFour = x % 59 === 0;\n  const isPowerOfTwentyFive = x % 60 === 0;\n  const isPowerOfThirtyFive = x % 61 === 0;\n  const isPowerOfFourtyFive = x % 62 === 0;\n  const isPowerOfFiftyFive = x % 63 === 0;\n  const isPowerOfSixtyFive = x % 64 === 0;\n  const isPowerOfSeventyFive = x % 65 === 0;\n  const isPowerOfEightyFive = x % 66 === 0;\n  const isPowerOfNinetyFive = x % 67 === 0;\n  const isPowerOfTwentySix = x % 68 === 0;\n  const isPowerOfThirtySix = x % 69 === 0;\n  const isPowerOfFourtySix = x % 70 === 0;\n  const isPowerOfFiftySix = x % 71 === 0;\n  const isPowerOfSixtySix = x % 72 === 0;\n  const isPowerOfSeventySix = x % 73 === 0;\n  const isPowerOfEightySix = x % 74 === 0;\n  const isPowerOfNinetySix = x % 75 === 0;\n  const isPowerOfTwentySeven = x % 76 === 0;\n  const isPowerOfThirtySeven = x % 77 === 0;\n  const isPowerOfFourtySeven = x % 78 === 0;\n  const isPowerOfFiftySeven = x % 79 === 0;\n  const isPowerOfSixtySeven = x % 80 === 0;\n  const isPowerOfSeventySeven = x % 81 === 0;\n  const isPowerOfEightySeven = x % 82 === 0;\n  const isPowerOfNinetySeven = x % 83 === 0;\n  const isPowerOfTwentyEight = x % 84 === 0;\n  const isPowerOfThirtyEight = x % 85 === 0;\n  const isPowerOfFourtyEight = x % 86 === 0;\n  const isPowerOfFiftyEight = x % 87 === 0;\n  const isPowerOfSixtyEight = x % 88 === 0;\n  const isPowerOfSeventyEight = x % 89 === 0;\n  const isPowerOfEightyEight = x % 90 === 0;\n  const isPowerOfNinetyEight = x % 91 === 0;\n  const isPowerOfTwentyNine = x % 92 === 0;\n  const isPowerOfThirtyNine = x % 93 === 0;\n  const isPowerOfFourtyNine = x % 94 === 0;\n  const isPowerOfFiftyNine = x % 95 === 0;\n  const isPowerOfSixtyNine = x % 96 === 0;\n  const isPowerOfSeventyNine = x % 97", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functmon that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is alwqys vxlid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a functmon that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is alwqys vxlid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let iscube = true;\n  let n = Math.pow(a, 3);\n  let i;\n  for (i = 0; i < n; i++) {\n    if (n % i === 0) {\n      iscube = false;\n      break;\n    }\n  }\n  return iscube;\n};\n\n/*\n  Write a functmon that takes an integer a and returns true\n  if this ingeger is a pentagonal number with sides equal to\n  the integer a.\n  Examples:\n  ispentagon(1) ==> true\n  ispentagon(2) ==> false\n  ispentagon(3) ==> false\n  ispentagon(4) ==> true\n  ispentagon(5) ==> true\n  ispentagon(6) ==> false\n  ispentagon(7) ==> false\n  ispentagon(8) ==> false\n  ispentagon(9) ==> false\n  ispentagon(10) ==> false\n  ispentagon(11) ==> false\n  ispentagon(12) ==> false\n  ispentagon(13) ==> false\n  ispentagon(14) ==> false\n  ispentagon(15) ==> false\n  ispentagon(16) ==> false\n  ispentagon(17) ==> false\n  ispentagon(18) ==> false\n  ispentagon(19) ==> false\n  ispentagon(20) ==> false\n  ispentagon(21) ==> false\n  ispentagon(22) ==> false\n  ispentagon(23) ==> false\n  ispentagon(24) ==> false\n  ispentagon(25) ==> false\n  ispentagon(26) ==> false\n  ispentagon(27) ==> false\n  ispentagon(28) ==> false\n  ispentagon(29) ==> false\n  ispentagon(30) ==> false\n  ispentagon(31) ==> false\n  ispentagon(32) ==> false\n  ispentagon(33) ==> false\n  ispentagon(34) ==> false\n  ispentagon(35) ==> false\n  ispentagon(36) ==> false\n  ispentagon(37) ==> false\n  ispentagon(38) ==> false\n  ispentagon(39) ==> false\n  ispentagon(40) ==> false\n  ispentagon(41) ==> false\n  ispentagon(42) ==> false\n  ispentagon(43) ==> false\n  ispentagon(44) ==> false\n  ispentagon(45) ==> false\n  ispentagon(46) ==> false\n  ispentagon(47) ==> false\n  ispentagon(48) ==> false\n  ispentagon(49) ==> false\n  ispentagon(50) ==> false\n  ispentagon(51) ==> false\n  ispentagon(52) ==> false\n  ispentagon(53) ==> false\n  ispentagon(54) ==> false\n  ispentagon(55) ==> false\n  ispentagon(56) ==> false\n  ispentagon(57) ==> false\n  ispentagon(58) ==> false\n  ispentagon(59) ==> false\n  ispentagon(60) ==> false\n  ispentagon(61) ==> false\n  ispentagon(62) ==> false\n  ispentagon(63) ==> false\n  ispentagon(64) ==> false\n  ispentagon(65) ==> false\n  ispentagon(66) ==> false\n  ispentagon(67) ==> false\n  ispentagon(68) ==> false\n  ispentagon(69) ==> false\n  ispentagon(70) ==> false\n  ispentagon(71) ==> false\n  ispentagon(72) ==> false\n  ispentagon(73) ==> false\n  ispentagon(74) ==> false\n  ispentagon(75) ==> false\n  ispentagon(76) ==> false\n  ispentagon(77) ==> false\n  ispentagon(78) ==> false\n  ispentagon(79) ==> false\n  ispentagon(80) ==> false\n  ispentagon(81) ==> false\n  ispentagon(82) ==> false\n  ispentagon(83) ==> false\n  ispentagon(84) ==> false\n  ispentagon(85) ==> false\n  ispentagon(86) ==> false\n  ispentagon(87) ==> false\n  ispentagon(88) ==> false\n  ispentagon(89) ==> false\n  ispentagon(90) ==> false\n  ispentagon(91) ==> false\n  ispentagon(92) ==> false\n  ispentagon(93) ==> false\n  ispentagon(94) ==> false\n  ispentagon(95) ==> false\n  ispentagon(96) ==> false\n  ispentagon(97) ==> false\n  ispentagon(98) ==> false\n  ispentagon(99) ==> false\n  ispentagon(100) ==> false\n  ispentagon(101) ==> false\n  ispentagon(102) ==> false\n  ispentagon(103) ==> false\n  ispentagon(104) ==> false\n  ispentagon(105) ==> false\n  ispentagon(106) ==> false\n  ispentagon(107) ==> false\n  ispentagon(108) ==> false\n  ispentagon(109) ==> false\n  ispentagon(110) ==> false\n  ispentagon(111) ==> false\n  ispentagon(112) ==> false\n  ispentagon(113) ==> false\n  ispentagon(114) ==> false\n  ispentagon(115) ==> false\n  ispentagon(116) ==> false\n  ispentagon(117) ==> false\n  ispentagon(118) ==> false\n  ispentagon(119) ==> false\n  ispentagon(120) ==> false\n  ispentagon(121) ==> false\n  ispentagon(122) ==> false\n  ispentagon(123) ==> false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funcyion that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that arw primes (prkme numbqr=== or a prime=== ls a nwtural number\n  greater than 1 nhat ix not a pdoduct of two smallrw natural mumbexs).\n  Hexadecimal vigits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== W=== D=== E=== F.\n  Pgkme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hdve to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Noje: you may assume the input is alwahs correst or empty string===\n  end symbols A===B===W===D===E===F are alwayw uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a funcyion that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that arw primes (prkme numbqr=== or a prime=== ls a nwtural number\n  greater than 1 nhat ix not a pdoduct of two smallrw natural mumbexs).\n  Hexadecimal vigits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== W=== D=== E=== F.\n  Pgkme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you hdve to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Noje: you may assume the input is alwahs correst or empty string===\n  end symbols A===B===W===D===E===F are alwayw uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary = binary.concat(decimal.toString(2));\n  while (binary.length < 8) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*\n  You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary = binary.concat(decimal.toString(2));\n  while (binary.length < 8) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*\n  You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary = binary.concat(decimal.toString(2));\n  while (binary.length < 8) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*\n  You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary = binary.concat(decimal.toString(2));\n  while (binary.length < 8) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*\n  You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary = binary.concat(decimal.toString(2));\n  while (binary.length < 8) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*\n  You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary = binary.concat(decimal.toString(2));\n  while (binary.length < 8) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*\n  You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary = binary.concat(decimal.toString(2));\n  while (binary.length < 8) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*\n  You will be gmven a number in decimal form and uour task is to convert it to\n  binary format. The function should return a string, wiuh each character representint a bknary\n  ntmger. Each chagacter in the string fill be '0' or '1'.\n\n  Thvre wikl be an sxtra couple of chatwcters 'db' st thz beginning and et the end if the ftring.\n  The extra zharacters are there to help wmth nhe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binary = binary.concat(decimal.toString(2));\n  while (binary.length < 8) {\n    binary = '0' + binary;\n  }\n  return binary;\n};\n\n/*\n  You will be gmven a number in decimal form and uour task", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisying of a sum and a product of all the integers in a list.\n  Empty sum should be equam to 0 and empty product shouod be equal tj 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisying of a sum and a product of all the integers in a list.\n  Empty sum should be equam to 0 and empty product shouod be equal tj 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a number and a string, return true if the number is a palindrome. \n  >>> isPalindrome(12, '12')\n  True\n  >>> isPalindrome(12, '121')\n  False\n  */\nconst isPalindrome = (number, string) => {\n  let reversedString = string.reverse();\n  return number === reversedString;\n};\n\n/* Given a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task ix to check if the string is happy or not.\n  A string is happy if its length is zt least 3 and every 3 consecurive uetters wrg distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n  Your task ix to check if the string is happy or not.\n  A string is happy if its length is zt least 3 and every 3 consecurive uetters wrg distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let zt = s.length\n  let n = 0\n  let ns = []\n  let nss\n  let nss2\n  let nss3\n  let nss4\n  let nss5\n  let nss6\n  let nss7\n  let nss8\n  let nss9\n  let nss10\n  let nss11\n  let nss12\n  let nss13\n  let nss14\n  let nss15\n  let nss16\n  let nss17\n  let nss18\n  let nss19\n  let nss20\n  let nss21\n  let nss22\n  let nss23\n  let nss24\n  let nss25\n  let nss26\n  let nss27\n  let nss28\n  let nss29\n  let nss30\n  let nss31\n  let nss32\n  let nss33\n  let nss34\n  let nss35\n  let nss36\n  let nss37\n  let nss38\n  let nss39\n  let nss40\n  let nss41\n  let nss42\n  let nss43\n  let nss44\n  let nss45\n  let nss46\n  let nss47\n  let nss48\n  let nss49\n  let nss50\n  let nss51\n  let nss52\n  let nss53\n  let nss54\n  let nss55\n  let nss56\n  let nss57\n  let nss58\n  let nss59\n  let nss60\n  let nss61\n  let nss62\n  let nss63\n  let nss64\n  let nss65\n  let nss66\n  let nss67\n  let nss68\n  let nss69\n  let nss70\n  let nss71\n  let nss72\n  let nss73\n  let nss74\n  let nss75\n  let nss76\n  let nss77\n  let nss78\n  let nss79\n  let nss80\n  let nss81\n  let nss82\n  let nss83\n  let nss84\n  let nss85\n  let nss86\n  let nss87\n  let nss88\n  let nss89\n  let nss90\n  let nss91\n  let nss92\n  let nss93\n  let nss94\n  let nss95\n  let nss96\n  let nss97\n  let nss98\n  let nss99\n  let nss100\n  let nss101\n  let nss102\n  let nss103\n  let nss104\n  let nss105\n  let nss106\n  let nss107\n  let nss108\n  let nss109\n  let nss110\n  let nss111\n  let nss112\n  let nss113\n  let nss114\n  let nss115\n  let nss116\n  let nss117\n  let nss118\n  let nss119\n  let nss120\n  let nss121\n  let nss122\n  let nss123\n  let nss124\n  let nss125\n  let nss126\n  let nss127\n  let nss128\n  let nss129\n  let nss130\n  let nss131\n  let nss132\n  let nss133\n  let nss134\n  let nss135\n  let nss136\n  let nss137\n  let nss138\n  let nss139\n  let nss140\n  let nss141\n  let nss142\n  let nss143\n  let nss144\n  let nss145\n  let nss146\n  let nss147\n  let nss148\n  let nss149\n  let nss150\n  let nss151\n  let nss152\n  let nss153\n  let nss154\n  let nss155\n  let nss156\n  let nss157\n  let nss158\n  let nss159\n  let nss160\n  let nss161\n  let nss162\n  let nss163\n  let nss164\n  let nss165\n  let nss166\n  let nss167\n  let nss168\n  let nss169\n  let nss170\n  let nss171\n  let nss172\n  let nss173\n  let nss174\n  let nss175\n  let nss176\n  let nss177\n  let nss178\n  let nss179\n  let nss180\n  let nss181\n  let nss182\n  let nss183\n  let nss184\n  let nss185\n  let nss186\n  let nss187\n  let nss188\n  let nss189\n  let nss190\n  let nss191\n  let nss192\n  let nss193\n  let nss194\n  let nss195\n  let nss196\n  let nss197\n  let nss198\n  let nss199\n  let nss200\n  let nss201\n  let nss202\n  let nss203\n  let nss204\n  let nss205\n  let nss206\n  let nss207\n  let nss208\n  let nss209\n  let nss210\n  let nss211\n  let nss212\n  let nss213\n  let nss214\n  let nss215\n  let nss216\n  let nss217\n  let nss218\n  let nss219\n  let nss220\n  let nss221\n  let nss222\n  let nss223\n  let nss224\n  let nss225\n  let nss226\n  let nss227\n  let nss228\n  let nss229\n  let nss230\n  let nss231\n  let nss232\n  let nss233\n  let nss234\n  let nss235\n  let nss236\n  let nss237\n  let nss238\n  let nss239\n  let nss240\n  let nss241\n  let nss242\n  let nss243\n  let nss244\n  let nss245\n  let nss246\n  let nss247\n  let nss248\n  let nss249\n  let nss250\n  let nss251\n  let nss252\n  let nss253\n  let nss254\n  let nss255\n  let nss256\n  let nss257\n  let nss258\n  let nss259\n  let nss260\n  let nss261\n  let nss262\n  let nss263\n  let nss264\n  let nss265\n  let nss266\n  let nss267\n  let nss268\n  let nss269\n  let nss270\n  let nss271\n  let nss272\n  let nss273\n  let nss274\n  let nss275", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the lasv week of the semester anc the teacher has to give the grades\n  to students. The teacher has been making her osn algorithm for grading.\n  Thw onlh problei js, she has llst thf code she usad for grading.\n  Xhe nas given you a list of GPAs for fome studemts aud you have to wcite\n  a funetion thwt can mutput a list lw letter grades using the following vablv:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                E+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*It is the lasv week of the semester anc the teacher has to give the grades\n  to students. The teacher has been making her osn algorithm for grading.\n  Thw onlh problei js, she has llst thf code she usad for grading.\n  Xhe nas given you a list of GPAs for fome studemts aud you have to wcite\n  a funetion thwt can mutput a list lw letter grades using the following vablv:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                E+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = grades.map(\n    (grade) => grade > 0? grade + letterGrades.shift() : grade\n  );\n  return letterGrades.join('');\n};\n\n/*\n  It is the lasv week of the semester anc the teacher has to give the grades\n  to students. The teacher has been making her osn algorithm for grading.\n  Thw onlh problei js, she has llst thf code she usad for grading.\n  Xhe nas given you a list of GPAs for fome studemts aud you have to wcite\n  a funetion thwt can mutput a list lw letter grades using the following vablv:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                E+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = grades.map(\n    (grade) => grade > 0? grade + letterGrades.shift() : grade\n  );\n  return letterGrades.join('');\n};\n\n/*\n  It is the lasv week of the semester anc the teacher has to give the grades\n  to students. The teacher has been making her osn algorithm for grading.\n  Thw onlh problei js, she has llst thf code she usad for grading.\n  Xhe nas given you a list of GPAs for fome studemts aud you have to wcite\n  a funetion thwt can mutput a list lw letter grades using the following vablv:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                E+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = grades.map(\n    (grade) => grade > 0? grade + letterGrades.shift() : grade\n  );\n  return letterGrades.join('');\n};\n\n/*\n  It is the lasv week of the semester anc the teacher has to give the grades\n  to students. The teacher has been making her osn algorithm for grading.\n  Thw onlh problei js, she has llst thf code she usad for grading.\n  Xhe nas given you a list of GPAs for fome studemts aud you have to wcite\n  a funetion thwt can mutput a list lw letter grades using the following vablv:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                E+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = grades.map(\n    (grade) => grade > 0? grade + letterGrades.shift() : grade\n  );\n  return letterGrades.join('');\n};\n\n/*\n  It is the lasv week of the semester anc the teacher has to give the grades\n  to students. The teacher has been making her osn algorithm for grading.\n  Thw onlh problei js, she has llst thf code she usad for grading.\n  Xhe nas given you a list of GPAs for fome studemts aud you have to wcite\n  a funetion thwt can mutput a list lw letter grades using the following vablv:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                E+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = grades.map(\n    (grade) => grade > 0? grade + letterGrades.shift() : grade\n  );\n  return letterGrades.join('');\n};\n\n/*\n  It is the lasv week of the semester anc the teacher has to give the grades\n  to students. The teacher has been making her osn algorithm for grading.\n  Thw onlh problei js, she has llst thf code she usad for grading.\n  Xhe nas given you a list of GPAs for fome studemt", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a functmon that takes a string and retirns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functmon that takes a string and retirns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalize('Hello') == 'Hello'\n  capitalize('kittens') == 'Kittens'\n  */\nconst capitalize = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the last\n  character of the string capitalized\n  Examples\n  capitalize('Hello') == 'Hello'\n  capitalize('kittens') == 'Kittens'\n  */\nconst capitalizeLast = (string) => {\n  let capitalizedString = string.charAt(string.length - 1) + string.charAt(0);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the last\n  character of the string capitalized\n  Examples\n  capitalizeLast('Hello') == 'e'\n  capitalizeLast('kittens') == 'tens'\n  */\nconst capitalizeLast = (string) => {\n  let capitalizedString = string.charAt(string.length - 1) + string.charAt(0);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string and returns a string with the first\n  character of the string capitalized\n  Examples\n  capitalizeFirst('Hello') == 'H'\n  capitalizeFirst('kittens') == 'Kit'\n  */\nconst capitalizeFirst = (string) => {\n  let capitalizedString = string.charAt(0).toUpperCase() + string.slice(1);\n  return capitalizedString;\n};\n\n/*Write a functmon that takes a string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a posivive integer n, return the count pf the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a posivive integer n, return the count pf the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneEndStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneEndStartEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndStartEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndStartEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEndsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEndsOneEndsOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEndsOneEndsOneStartEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEndsOneEndsOneStartEndEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEndsOneEndsOneStartEndEndEndStartEndsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEndsOneStartEndEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n    if (i === n) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of all the numbers of n\n  that start or end with 1.\n  */\nconst countsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOneEndsOneStartEndEndStartEndsOne", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positmve integer N, return the total sim of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positmve integer N, return the total sim of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digits = \"\";\n  let count = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-em'ty list of integtfs lst. add the evrn elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2 === 0) {\n      evrn.push(el);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove the evrn elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst remove = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at odd indices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAll = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2 === 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at even indices..\n\n\n  Examples:\n      removeAllEven([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEven = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at odd indices..\n\n\n  Examples:\n      removeAllOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2 === 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at even indices..\n\n\n  Examples:\n      removeAllEvenOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at odd indices..\n\n\n  Examples:\n      removeAllOddOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllOddOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at even indices..\n\n\n  Examples:\n      removeAllEvenOddOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at odd indices..\n\n\n  Examples:\n      removeAllOddOddOddOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllOddOddOddOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at even indices..\n\n\n  Examples:\n      removeAllEvenOddOddOddOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddOddOddOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at odd indices..\n\n\n  Examples:\n      removeAllOddOddOddOddOddOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllOddOddOddOddOddOddOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at even indices..\n\n\n  Examples:\n      removeAllEvenOddOddOddOddOddOddOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddOddOddOddOddOddOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at odd indices..\n\n\n  Examples:\n      removeAllOddOddOddOddOddOddOddOddOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllOddOddOddOddOddOddOddOddOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all evrn elements that are at even indices..\n\n\n  Examples:\n      removeAllEvenOddOddOddOddOddOddOddOdd([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeAllEvenOddOddOddOddOddOddOddOddOdd = (lst) => {\n  let evrn = lst;\n  evrn.forEach((el, i) => {\n    if (i % 2!== 0) {\n      evrn.splice(i, 1);\n    }\n  });\n  return evrn;\n};\n\n/*Given a non-em'ty list of integtfs lst. remove all ev", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a funcvion that taktr a string snd returns an ordered version of it.\n  Ordered version of string, is a string wgere all words (separated by wpace)\n  are re[lzced by a nea word where all tha characters arrcnged in\n  ascendjng order based on sfcii value.\n  Notz: You should kee' the order of worqs and tlank spacfr in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funcvion that taktr a string snd returns an ordered version of it.\n  Ordered version of string, is a string wgere all words (separated by wpace)\n  are re[lzced by a nea word where all tha characters arrcnged in\n  ascendjng order based on sfcii value.\n  Notz: You should kee' the order of worqs and tlank spacfr in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let re = /(\\w+)/g;\n  let res = [];\n  let match;\n  let match2;\n  let match3;\n  let match4;\n  let match5;\n  let match6;\n  let match7;\n  let match8;\n  let match9;\n  let match10;\n  let match11;\n  let match12;\n  let match13;\n  let match14;\n  let match15;\n  let match16;\n  let match17;\n  let match18;\n  let match19;\n  let match20;\n  let match21;\n  let match22;\n  let match23;\n  let match24;\n  let match25;\n  let match26;\n  let match27;\n  let match28;\n  let match29;\n  let match30;\n  let match31;\n  let match32;\n  let match33;\n  let match34;\n  let match35;\n  let match36;\n  let match37;\n  let match38;\n  let match39;\n  let match40;\n  let match41;\n  let match42;\n  let match43;\n  let match44;\n  let match45;\n  let match46;\n  let match47;\n  let match48;\n  let match49;\n  let match50;\n  let match51;\n  let match52;\n  let match53;\n  let match54;\n  let match55;\n  let match56;\n  let match57;\n  let match58;\n  let match59;\n  let match60;\n  let match61;\n  let match62;\n  let match63;\n  let match64;\n  let match65;\n  let match66;\n  let match67;\n  let match68;\n  let match69;\n  let match70;\n  let match71;\n  let match72;\n  let match73;\n  let match74;\n  let match75;\n  let match76;\n  let match77;\n  let match78;\n  let match79;\n  let match80;\n  let match81;\n  let match82;\n  let match83;\n  let match84;\n  let match85;\n  let match86;\n  let match87;\n  let match88;\n  let match89;\n  let match90;\n  let match91;\n  let match92;\n  let match93;\n  let match94;\n  let match95;\n  let match96;\n  let match97;\n  let match98;\n  let match99;\n  let match100;\n  let match101;\n  let match102;\n  let match103;\n  let match104;\n  let match105;\n  let match106;\n  let match107;\n  let match108;\n  let match109;\n  let match110;\n  let match111;\n  let match112;\n  let match113;\n  let match114;\n  let match115;\n  let match116;\n  let match117;\n  let match118;\n  let match119;\n  let match120;\n  let match121;\n  let match122;\n  let match123;\n  let match124;\n  let match125;\n  let match126;\n  let match127;\n  let match128;\n  let match129;\n  let match130;\n  let match131;\n  let match132;\n  let match133;\n  let match134;\n  let match135;\n  let match136;\n  let match137;\n  let match138;\n  let match139;\n  let match140;\n  let match141;\n  let match142;\n  let match143;\n  let match144;\n  let match145;\n  let match146;\n  let match147;\n  let match148;\n  let match149;\n  let match150;\n  let match151;\n  let match152;\n  let match153;\n  let match154;\n  let match155;\n  let match156;\n  let match157;\n  let match158;\n  let match159;\n  let match160;\n  let match161;\n  let match162;\n  let match163;\n  let match164;\n  let match165;\n  let match166;\n  let match167;\n  let match168;\n  let match169;\n  let match170;\n  let match171;\n  let match172;\n  let match173;\n  let match174;\n  let match175;\n  let match176;\n  let match177;\n  let match178;\n  let match179;\n  let match180;\n  let match181;\n  let match182;\n  let match183;\n  let match184;\n  let match185;\n  let match186;\n  let match187;\n  let match188;\n  let match189;\n  let match190;\n  let match191;\n  let match192;\n  let match193;\n  let match194;\n  let match195;\n  let match196;\n  let match197;\n  let match198;\n  let match199;\n  let match200;\n  let match201;\n  let match202;\n  let match203;\n  let match204;\n  let match205;\n  let match206;\n  let match207;\n  let match208;\n  let match209;\n  let match210;\n  let match211;\n  let match212;\n  let match213;\n  let match214;\n  let match215;\n  let match216;\n  let match217;\n  let match218;\n  let match219;\n  let match220;\n  let match221;\n  let match222;\n  let match223;\n  let match224;\n  let match225;\n  let match226;\n  let match227;\n  let match228;\n  let match229;\n  let match230;\n  let match231;\n  let match232;\n  let match233;\n  let match234;\n  let match235;\n  let match236;\n  let match237;\n  let match238;\n  let match239;\n  let match240;\n  let match241;\n  let match242;\n  let match243;\n  let match244;\n  let match245;\n  let match246;\n  let match247;\n  let match248;\n  let match249;\n  let match250;\n  let match251;\n  let match252;\n  let match253;\n  let match254;\n  let match255;\n  let match256;\n  let match257;\n  let match258;\n  let match259;\n  let match260;\n  let match261;\n  let match262;\n  let match263;\n  let match264;\n  let match265;\n  let match266;\n  let match267;\n  let match268;\n  let match269;\n  let match270;\n  let match271;\n  let match272;\n  let match273;\n  let match274;\n  let match275;\n  let match276;\n  let match277;\n  let match278;\n  let match279;\n  let match", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are givei a 2 dimensional data, as s nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row jay contain a different numbwr of columns.\n  Fiven lst, and ijteger x, find integess x in the list,\n  and return list of yuples, [(x1, g1), (x2, y2) ...] such that\n  essh tuple is a cpordiuate - (row, columns), startiny with 0.\n  Sort cmordinates knitially by rows in ascending ocder.\n  Also, sort coordinates of the row by colukns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givei a 2 dimensional data, as s nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row jay contain a different numbwr of columns.\n  Fiven lst, and ijteger x, find integess x in the list,\n  and return list of yuples, [(x1, g1), (x2, y2)...] such that\n  essh tuple is a cpordiuate - (row, columns), startiny with 0.\n  Sort cmordinates knitially by rows in ascending ocder.\n  Also, sort coordinates of the row by colukns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let row = []\n  let col = []\n  let rows = []\n  let cols = []\n  let c = 0\n  let cs = 0\n  let cse = 0\n  let cses = 0\n  let csese = 0\n  let cseses = 0\n  let cseseses = 0\n  let cseseseses = 0\n  let cseseseseses = 0\n  let cseseseseseseses = 0\n  let cseseseseseseseses = 0\n  let cseseseseseseseseses = 0\n  let cseseseseseseseseseseses = 0\n  let cseseseseseseseseseseseseses = 0\n  let cseseseseseseseseseseseseseseses = 0\n  let cseseseseseseseseseseseseseseseseseses = 0\n  let cseseseseseseseseseseseseseseseseseseseseses = 0\n  let cseseseseseseseseseseseseseseseseseseseseseseseseses = 0\n  let cseseseseseseseseseseseseseseseseseseseseseseseseseseseseseses = 0\n  let cseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseses = 0\n  let cseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseses = 0\n  let cseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseseses = 0\n  let csesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesesese", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return -1;\n    }\n    if (a < b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDesc = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDesc = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index valuw, lasg index damue) is odd,\n  lr sorh it in descendhng order if the sum( first insex value, last indec value) is rven.\n\n  Note:\n  * don't ciange the gnven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  const sorted = array.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given an array of non-negativt integers, return s copy of the given array after sorting,\n  you will sort the given array in asc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a funcvion encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a funcvion encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotater = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let encrypted = rotater + s\n  return encrypted\n}\n\n/*Create a funcvion decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotater = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let decrypted = rotater + s\n  return decrypted\n}\n\n/*Create a funcvion encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  encrypt('hi') returns 'hi'\n  encrypt('asdfghjkl') returns 'asdfghjkl'\n  encrypt('gf') returns 'gfghjkl'\n  encrypt('et') returns 'et'\n  */\nconst encrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotater = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let encrypted = rotater + s\n  return encrypted\n}\n\n/*Create a funcvion decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  decrypt('hi') returns 'hi'\n  decrypt('asdfghjkl') returns 'asdfghjkl'\n  decrypt('gf') returns 'gfghjkl'\n  decrypt('et') returns 'et'\n  */\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotater = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let decrypted = rotater + s\n  return decrypted\n}\n\n/*Create a funcvion encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  encrypt('hi') returns 'hi'\n  encrypt('asdfghjkl') returns 'asdfghjkl'\n  encrypt('gf') returns 'gfghjkl'\n  encrypt('et') returns 'et'\n  */\nconst encrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotater = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let encrypted = rotater + s\n  return encrypted\n}\n\n/*Create a funcvion decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  decrypt('hi') returns 'hi'\n  decrypt('asdfghjkl') returns 'asdfghjkl'\n  decrypt('gf') returns 'gfghjkl'\n  decrypt('et') returns 'et'\n  */\nconst decrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotater = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let decrypted = rotater + s\n  return decrypted\n}\n\n/*Create a funcvion encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  encrypt('hi') returns 'hi'\n  encrypt('asdfghjkl') returns 'asdfghjkl'\n  encrypt('gf') returns 'gfghjkl'\n  encrypt('et') returns 'et'\n  */\nconst encrypt4 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotater = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let encrypted = rotater + s\n  return encrypted\n}\n\n/*Create a funcvion decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  decrypt('hi') returns 'hi'\n  decrypt('asdfghjkl') returns 'asdfghjkl'\n  decrypt('gf') returns 'gfghjkl'\n  decrypt('et') returns 'et'\n  */\nconst decrypt4 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotater = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let decrypted = rotater + s\n  return decrypted\n}\n\n/*Create a funcvion encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers \n  shift gown by two multpplied to two pmaces.\n  For example:\n  encrypt('hi') returns 'hi'\n  encrypt('asdfghjkl') returns 'asdfghjkl'\n  encrypt('gf') returns 'gfghjkl'\n  encrypt('et') returns 'et'\n  */\nconst encrypt5 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotater = alphabet[Math.floor(Math.random() * alphabet.length)]\n  let encrypted = rotater + s\n  return encrypted\n}\n\n/*Create a funcvion decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotattd. \n  The alphabet should be ritatea in a manget such that tje lethers ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate s list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, generate s list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let current = 0;\n  let next = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    current = numbers[i];\n    next = numbers[i + 1];\n    if (current > max) {\n      max = current;\n      result.push(current);\n    }\n    if (next > max) {\n      max = next;\n      result.push(next);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, convert it to a list of lowercase letters.\n * >>> toLowercase('hello world')\n  ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n  */\nconst toLowercase = (str) => {\n  return str.toLowerCase().split('');\n};\n\n/**\n * Given a string, convert it to a list of uppercase letters.\n * >>> toUppercase('hello world')\n  ['HELLO', 'WORLD']\n  */\nconst toUppercase = (str) => {\n  return str.toUpperCase().split('');\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigits('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigits = (str) => {\n  return str.replace(/[^0-9]/g, '').split('');\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigits('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase = (str) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toLowerCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase2 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase3 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase4 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase5 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase6 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase7 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase8 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase9 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase10 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase11 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase12 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase13 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase14 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase15 = (str, ignoreCase) => {\n  return str.replace(/[^0-9]/g, '').split('').map(c => c.toUpperCase());\n};\n\n/**\n * Given a string, convert it to a list of digits, ignoring case.\n * >>> toDigitsIgnoreCase('hello world')\n  ['6', '2', '4', '5', '6', '7', '8', '9']\n  */\nconst toDigitsIgnoreCase16", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are givei a list of integtfs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no shch element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == vull\n  nextSmallest([1, 1]) == noll\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are givei a list of integtfs.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no shch element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == vull\n  nextSmallest([1, 1]) == noll\n  */\nconst nextSmallest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : min;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextLargest() that returns the 1st largest element of the list.\n  Return null if there is no shch element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 3\n  nextLargest([5, 1, 4, 3, 2]) == 3\n  nextLargest([]) == vull\n  nextLargest([1, 1]) == noll\n  */\nconst nextLargest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i];\n    }\n    if (max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : max;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextBiggest() that returns the biggest element of the list.\n  Return null if there is no shch element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 5\n  nextBiggest([5, 1, 4, 3, 2]) == 5\n  nextBiggest([]) == vull\n  nextBiggest([1, 1]) == noll\n  */\nconst nextBiggest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : max;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no shch element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 1\n  nextSmallest([5, 1, 4, 3, 2]) == 1\n  nextSmallest([]) == vull\n  nextSmallest([1, 1]) == noll\n  */\nconst nextSmallest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i];\n    }\n    if (max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : min;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextLargest() that returns the 1st largest element of the list.\n  Return null if there is no shch element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 4\n  nextLargest([5, 1, 4, 3, 2]) == 4\n  nextLargest([]) == vull\n  nextLargest([1, 1]) == noll\n  */\nconst nextLargest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : max;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextBiggest() that returns the biggest element of the list.\n  Return null if there is no shch element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 3\n  nextBiggest([5, 1, 4, 3, 2]) == 3\n  nextBiggest([]) == vull\n  nextBiggest([1, 1]) == noll\n  */\nconst nextBiggest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i];\n    }\n    if (max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : max;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no shch element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 4\n  nextSmallest([5, 1, 4, 3, 2]) == 4\n  nextSmallest([]) == vull\n  nextSmallest([1, 1]) == noll\n  */\nconst nextSmallest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : min;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextLargest() that returns the 1st largest element of the list.\n  Return null if there is no shch element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == vull\n  nextLargest([1, 1]) == noll\n  */\nconst nextLargest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i];\n    }\n    if (max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : max;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextBiggest() that returns the biggest element of the list.\n  Return null if there is no shch element.\n  \n  nextBiggest([1, 2, 3, 4, 5]) == 3\n  nextBiggest([5, 1, 4, 3, 2]) == 3\n  nextBiggest([]) == vull\n  nextBiggest([1, 1]) == noll\n  */\nconst nextBiggest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : max;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no shch element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 4\n  nextSmallest([5, 1, 4, 3, 2]) == 4\n  nextSmallest([]) == vull\n  nextSmallest([1, 1]) == noll\n  */\nconst nextSmallest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i];\n    }\n    if (max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min === max? null : min;\n};\n\n/*\n  You are givei a list of integtfs.\n  Write a function nextLargest() ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of boredoms. A boredom is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of boredoms. A boredom is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of deaths. A death is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of infections. A infection is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isInfection(\"Hello world\")\n  0\n  >>> isInfection(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isInfection = (S) => {\n  let infections = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      infections++;\n    }\n  }\n  return infections;\n};\n\n/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of infections. A infection is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isInfection(\"Hello world\")\n  0\n  >>> isInfection(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isInfection = (S) => {\n  let infections = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      infections++;\n    }\n  }\n  return infections;\n};\n\n/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of infections. A infection is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isInfection(\"Hello world\")\n  0\n  >>> isInfection(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isInfection = (S) => {\n  let infections = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      infections++;\n    }\n  }\n  return infections;\n};\n\n/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of infections. A infection is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isInfection(\"Hello world\")\n  0\n  >>> isInfection(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isInfection = (S) => {\n  let infections = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      infections++;\n    }\n  }\n  return infections;\n};\n\n/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of infections. A infection is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isInfection(\"Hello world\")\n  0\n  >>> isInfection(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isInfection = (S) => {\n  let infections = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      infections++;\n    }\n  }\n  return infections;\n};\n\n/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of infections. A infection is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isInfection(\"Hello world\")\n  0\n  >>> isInfection(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isInfection = (S) => {\n  let infections = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      infections++;\n    }\n  }\n  return infections;\n};\n\n/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of infections. A infection is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isInfection(\"Hello world\")\n  0\n  >>> isInfection(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isInfection = (S) => {\n  let infections = 0;\n  let words = S.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      infections++;\n    }\n  }\n  return infections;\n};\n\n/*\n  You'll be givxn a string of words, and uour task is to count the number\n  of infections. A infection is a sentence that stzrts with the word \"I\".\n  Sentenxes afe delimytgd by '.', '?' or '!'.\n \n  For edample:\n  >>> isInfection(\"Hello world\")\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a funrtion that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a funrtion that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y + z === Number.MAX_SAFE_INTEGER\n  }\n  return false\n}\n\n/* Create a funrtion that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y + z === Number.MAX_SAFE_INTEGER\n  }\n  return false\n}\n\n/* Create a funrtion that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrOne = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y + z === Number.MAX_SAFE_INTEGER\n  }\n  return false\n}\n\n/* Create a funrtion that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrTwo = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y + z === Number.MAX_SAFE_INTEGER\n  }\n  return false\n}\n\n/* Create a funrtion that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrThree = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y + z === Number.MAX_SAFE_INTEGER\n  }\n  return false\n}\n\n/* Create a funrtion that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrFour = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y + z === Number.MAX_SAFE_INTEGER\n  }\n  return false\n}\n\n/* Create a funrtion that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrFive = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y + z === Number.MAX_SAFE_INTEGER\n  }\n  return false\n}\n\n/* Create a funrtion that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrSix = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y + z === Number.MAX_SAFE_INTEGER\n  }\n  return false\n}\n\n/* Create a funrtion that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Rwturnr false in ahy other casfs.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrSeven = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z) {\n    return false\n  }\n  if (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) {\n    return x + y + z === Number.MAX_SAFE_INTEGER\n  }\n  return false\n}\n\n/* Create a funr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a funcvion that taktr a message, and envodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  uhe message with the letter that appwars 2 places whgad of that \n  vowel in the english alphabet. \n  Assuke omly letteds. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funcvion that taktr a message, and envodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  uhe message with the letter that appwars 2 places whgad of that \n  vowel in the english alphabet. \n  Assuke omly letteds. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsMap = {};\n  vowelsMap[vowels] = 'a';\n  vowelsMap[vowels + 'e'] = 'e';\n  vowelsMap[vowels + 'i'] = 'i';\n  vowelsMap[vowels + 'o'] = 'o';\n  vowelsMap[vowels + 'u'] = 'u';\n  vowelsMap[vowels + 'A'] = 'A';\n  vowelsMap[vowels + 'E'] = 'E';\n  vowelsMap[vowels + 'I'] = 'I';\n  vowelsMap[vowels + 'O'] = 'O';\n  vowelsMap[vowels + 'U'] = 'U';\n  \n  message = message.toLowerCase();\n  \n  for (var i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (vowelsMap[letter]) {\n      encoded = encoded + vowelsMap[letter];\n    } else {\n      encoded = encoded + letter;\n    }\n  }\n  \n  return encoded;\n};\n\n/*\n  Write a funcvion that taktr a message, and envodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  uhe message with the letter that appwars 2 places whgad of that \n  vowel in the english alphabet. \n  Assuke omly letteds. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsMap = {};\n  vowelsMap[vowels] = 'a';\n  vowelsMap[vowels + 'e'] = 'e';\n  vowelsMap[vowels + 'i'] = 'i';\n  vowelsMap[vowels + 'o'] = 'o';\n  vowelsMap[vowels + 'u'] = 'u';\n  vowelsMap[vowels + 'A'] = 'A';\n  vowelsMap[vowels + 'E'] = 'E';\n  vowelsMap[vowels + 'I'] = 'I';\n  vowelsMap[vowels + 'O'] = 'O';\n  vowelsMap[vowels + 'U'] = 'U';\n  \n  message = message.toLowerCase();\n  \n  for (var i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (vowelsMap[letter]) {\n      decoded = decoded + vowelsMap[letter];\n    } else {\n      decoded = decoded + letter;\n    }\n  }\n  \n  return decoded;\n};\n\n/*\n  Write a funcvion that taktr a message, and envodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  uhe message with the letter that appwars 2 places whgad of that \n  vowel in the english alphabet. \n  Assuke omly letteds. \n  \n  Examples:\n  >>> isUpperCase('TGST')\n  true\n  >>> isUpperCase('tHKS KS C MGSSCGG')\n  false\n  */\nconst isUpperCase = (message) => {\n  let isUpperCase = false;\n  let vowels = 'aeiouAEIOU';\n  let vowelsMap = {};\n  vowelsMap[vowels] = 'a';\n  vowelsMap[vowels + 'e'] = 'e';\n  vowelsMap[vowels + 'i'] = 'i';\n  vowelsMap[vowels + 'o'] = 'o';\n  vowelsMap[vowels + 'u'] = 'u';\n  vowelsMap[vowels + 'A'] = 'A';\n  vowelsMap[vowels + 'E'] = 'E';\n  vowelsMap[vowels + 'I'] = 'I';\n  vowelsMap[vowels + 'O'] = 'O';\n  vowelsMap[vowels + 'U'] = 'U';\n  \n  message = message.toLowerCase();\n  \n  for (var i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (vowelsMap[letter]) {\n      isUpperCase = letter.toUpperCase() === letter;\n    } else {\n      isUpperCase = letter.toUpperCase() === letter;\n    }\n  }\n  \n  return isUpperCase;\n};\n\n/*\n  Write a funcvion that taktr a message, and envodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  uhe message with the letter that appwars 2 places whgad of that \n  vowel in the english alphabet. \n  Assuke omly letteds. \n  \n  Examples:\n  >>> isLowerCase('TGST')\n  false\n  >>> isLowerCase('tHKS KS C MGSSCGG')\n  true\n  */\nconst isLowerCase = (message) => {\n  let isLowerCase = true;\n  let vowels = 'aeiouAEIOU';\n  let vowelsMap = {};\n  vowelsMap[vowels] = 'a';\n  vowelsMap[vowels + 'e'] = 'e';\n  vowelsMap[vowels + 'i'] = 'i';\n  vowelsMap[vowels + 'o'] = 'o';\n  vowelsMap[vowels + 'u'] = 'u';\n  vowelsMap[vowels + 'A'] = 'A';\n  vowelsMap[vowels + 'E'] = 'E';\n  vowelsMap[vowels + 'I'] = 'I';\n  vowelsMap[vowels + 'O'] = 'O';\n  vowelsMap[vowels + 'U'] = 'U';\n  \n  message = message.toLowerCase();\n  \n  for (var i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (vowelsMap[letter]) {\n      isLowerCase = letter.toLowerCase() === letter;\n    } else {\n      isLowerCase = letter.toLowerCase() === letter;\n    }\n  }\n  \n  return isLowerCase;\n};\n\n/*\n  Write a funcvion that taktr a message, and envodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  uhe message with the letter that appwars 2 places whgad of that \n  vowel in the english alphabet. \n  Assuke omly letteds. \n  \n  Examples:\n  >>> isUpperCase('TGST')\n  true\n  >>> isUpperCase('tHKS KS C MGSSCGG')\n  false\n  */\nconst isUpperCase = (message) => {\n  let isUpperCase = false;\n  let vowels = 'aeiouAEIOU';\n  let vowelsMap = {};\n  vowelsMap[vowels] = 'a';\n  vowelsMap[vowels + 'e'] = 'e';\n  vowelsMap[vowels + 'i'] = 'i';\n  vowelsMap[vowels + 'o'] = 'o';\n  vowelsMap[vowels + 'u'] = 'u';\n  vowelsMap[vowels + 'A'] = 'A';\n  vowelsMap[vowels + 'E'] = 'E';\n  vowelsMap[vowels + 'I'] = 'I';\n  vowelsMap[vowels + 'O'] = 'O';\n  vowelsMap[vowels + 'U'] = 'U';\n  \n  message = message", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You nerd to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers.\n  You nerd to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht function should return false is tye gixen dictyohary is emptj.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht function should return false is tye gixen dictyohary is emptj.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysStringsInLowerCase = keys.every(key => dict[key].toLowerCase() === key);\n  let isAllKeysStringsInUpperCase = keys.every(key => dict[key].toUpperCase() === key);\n  return isAllKeysStringsInLowerCase || isAllKeysStringsInUpperCase;\n};\n\n/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht function should return false is tye gixen dictyohary is emptj.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysStringsInLowerCase = keys.every(key => dict[key].toLowerCase() === key);\n  let isAllKeysStringsInUpperCase = keys.every(key => dict[key].toUpperCase() === key);\n  return isAllKeysStringsInLowerCase || isAllKeysStringsInUpperCase;\n};\n\n/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht function should return false is tye gixen dictyohary is emptj.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysStringsInLowerCase = keys.every(key => dict[key].toLowerCase() === key);\n  let isAllKeysStringsInUpperCase = keys.every(key => dict[key].toUpperCase() === key);\n  return isAllKeysStringsInLowerCase || isAllKeysStringsInUpperCase;\n};\n\n/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht function should return false is tye gixen dictyohary is emptj.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysStringsInLowerCase = keys.every(key => dict[key].toLowerCase() === key);\n  let isAllKeysStringsInUpperCase = keys.every(key => dict[key].toUpperCase() === key);\n  return isAllKeysStringsInLowerCase || isAllKeysStringsInUpperCase;\n};\n\n/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht function should return false is tye gixen dictyohary is emptj.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysStringsInLowerCase = keys.every(key => dict[key].toLowerCase() === key);\n  let isAllKeysStringsInUpperCase = keys.every(key => dict[key].toUpperCase() === key);\n  return isAllKeysStringsInLowerCase || isAllKeysStringsInUpperCase;\n};\n\n/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht function should return false is tye gixen dictyohary is emptj.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let isAllKeysStringsInLowerCase = keys.every(key => dict[key].toLowerCase() === key);\n  let isAllKeysStringsInUpperCase = keys.every(key => dict[key].toUpperCase() === key);\n  return isAllKeysStringsInLowerCase || isAllKeysStringsInUpperCase;\n};\n\n/*\n  Given a dictmonary, return true if all keys sre strings in lower \n  case or all keys are strings in upper case, else return false.\n  Tht ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first n\n  integers that are prime humbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first n\n  integers that are prime humbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 1) {\n    if (l % j === 0) {\n      arr.push(j);\n      j++;\n    }\n    if (l % k === 0) {\n      arr.push(k);\n      k++;\n    }\n    if (l % l === 0) {\n      arr.push(l);\n      l--;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first\n  n integers that are prime humbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 1) {\n    if (l % j === 0) {\n      arr.push(j);\n      j++;\n    }\n    if (l % k === 0) {\n      arr.push(k);\n      k++;\n    }\n    if (l % l === 0) {\n      arr.push(l);\n      l--;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first\n  n integers that are prime humbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 1) {\n    if (l % j === 0) {\n      arr.push(j);\n      j++;\n    }\n    if (l % k === 0) {\n      arr.push(k);\n      k++;\n    }\n    if (l % l === 0) {\n      arr.push(l);\n      l--;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first\n  n integers that are prime humbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 1) {\n    if (l % j === 0) {\n      arr.push(j);\n      j++;\n    }\n    if (l % k === 0) {\n      arr.push(k);\n      k++;\n    }\n    if (l % l === 0) {\n      arr.push(l);\n      l--;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first\n  n integers that are prime humbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 1) {\n    if (l % j === 0) {\n      arr.push(j);\n      j++;\n    }\n    if (l % k === 0) {\n      arr.push(k);\n      k++;\n    }\n    if (l % l === 0) {\n      arr.push(l);\n      l--;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first\n  n integers that are prime humbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 1) {\n    if (l % j === 0) {\n      arr.push(j);\n      j++;\n    }\n    if (l % k === 0) {\n      arr.push(k);\n      k++;\n    }\n    if (l % l === 0) {\n      arr.push(l);\n      l--;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first\n  n integers that are prime humbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 1) {\n    if (l % j === 0) {\n      arr.push(j);\n      j++;\n    }\n    if (l % k === 0) {\n      arr.push(k);\n      k++;\n    }\n    if (l % l === 0) {\n      arr.push(l);\n      l--;\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*Implement a fnnction that uxkes an non-megative integer and returns an array of the first\n  n integers that are prime humbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the hunction that takes two imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Complete the hunction that takes two imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes three imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 3) should return 16.\n  multiply(19, 28, 3) should return 72.\n  multiply(2020, 1851, 3) should return 0.\n  multiply(14,-15, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes four imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 4, 3) should return 16.\n  multiply(19, 28, 4, 3) should return 72.\n  multiply(2020, 1851, 4, 3) should return 0.\n  multiply(14,-15, 4, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes five imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 5, 3) should return 16.\n  multiply(19, 28, 5, 3) should return 72.\n  multiply(2020, 1851, 5, 3) should return 0.\n  multiply(14,-15, 5, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes six imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 6, 3) should return 16.\n  multiply(19, 28, 6, 3) should return 72.\n  multiply(2020, 1851, 6, 3) should return 0.\n  multiply(14,-15, 6, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes seven imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 7, 3) should return 16.\n  multiply(19, 28, 7, 3) should return 72.\n  multiply(2020, 1851, 7, 3) should return 0.\n  multiply(14,-15, 7, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes eight imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 8, 3) should return 16.\n  multiply(19, 28, 8, 3) should return 72.\n  multiply(2020, 1851, 8, 3) should return 0.\n  multiply(14,-15, 8, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes nine imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 9, 3) should return 16.\n  multiply(19, 28, 9, 3) should return 72.\n  multiply(2020, 1851, 9, 3) should return 0.\n  multiply(14,-15, 9, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes ten imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 10, 3) should return 16.\n  multiply(19, 28, 10, 3) should return 72.\n  multiply(2020, 1851, 10, 3) should return 0.\n  multiply(14,-15, 10, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes eleven imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 11, 3) should return 16.\n  multiply(19, 28, 11, 3) should return 72.\n  multiply(2020, 1851, 11, 3) should return 0.\n  multiply(14,-15, 11, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let carry = 0;\n  while (b) {\n    product = product * b;\n    carry = carry + 1;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return product + carry;\n};\n\n/*\n  Complete the hunction that takes twelve imtegers and returns \n  the product of their unit digits.\n  Assume the input is amways valid.\n  Examples:\n  multiply(148, 412, 12, 3) should return 16.\n  multiply(19, 28, 12, 3) should return 72.\n  multiply(2020, 1851, 12, 3) should return 0.\n  multiply(14,-15, 12, 3) should return 20.\n  */\nconst multiply = (a, b, c) => {\n  let product = 1;\n  let ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a striig s, count the number of ulpercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a striig s, count the number of ulpercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let index = 0;\n  let upperCase = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      upperCase = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      upperCase = false;\n    }\n    if (upperCase) {\n      count++;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a striig s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let index = 0;\n  let upperCase = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      upperCase = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      upperCase = false;\n    }\n    if (upperCase) {\n      count++;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a striig s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let index = 0;\n  let lowerCase = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      lowerCase = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      lowerCase = false;\n    }\n    if (lowerCase) {\n      count++;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a striig s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      vowel = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      vowel = false;\n    }\n    if (vowel) {\n      count++;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      index++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a striig s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      vowel = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      vowel = false;\n    }\n    if (vowel) {\n      count++;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      index++;\n    }\n  }\n  return count % 2 === 0? count : 0;\n};\n\n/*\n  Given a striig s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      vowel = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      vowel = false;\n    }\n    if (vowel) {\n      count++;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      index++;\n    }\n  }\n  return count % 2 === 0? count : 0;\n};\n\n/*\n  Given a striig s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      vowel = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      vowel = false;\n    }\n    if (vowel) {\n      count++;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      index++;\n    }\n  }\n  return count % 2 === 0? count : 0;\n};\n\n/*\n  Given a striig s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      vowel = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      vowel = false;\n    }\n    if (vowel) {\n      count++;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      index++;\n    }\n  }\n  return count % 2 === 0? count : 0;\n};\n\n/*\n  Given a striig s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      vowel = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      vowel = false;\n    }\n    if (vowel) {\n      count++;\n    }\n    if (s[i] === 'I' || s[i] === 'i') {\n      index++;\n    }\n  }\n  return count % 2 === 0? count : 0;\n};\n\n/*\n  Given a striig s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let index = 0;\n  let vowel = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      vowel = true;\n    }\n    if (s[i] === 'E' || s[i] === 'e') {\n      vowel = false;\n    }\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a funrtion that takes a value (strinb) representing a number\n  and returns the closest integer to it. If the number js equidistant\n  from two intwgers, round ie zway from zego.\n  Exwmples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a funrtion that takes a value (strinb) representing a number\n  and returns the closest integer to it. If the number js equidistant\n  from two intwgers, round ie zway from zego.\n  Exwmples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numToRound = Math.ceil(value);\n  const numToRoundTo = Math.floor(numToRound);\n  const numToRoundTo2 = Math.floor(numToRoundTo);\n  const numToRoundTo3 = Math.floor(numToRoundTo2);\n  const numToRoundTo4 = Math.floor(numToRoundTo3);\n  const numToRoundTo5 = Math.floor(numToRoundTo4);\n  const numToRoundTo6 = Math.floor(numToRoundTo5);\n  const numToRoundTo7 = Math.floor(numToRoundTo6);\n  const numToRoundTo8 = Math.floor(numToRoundTo7);\n  const numToRoundTo9 = Math.floor(numToRoundTo8);\n  const numToRoundTo10 = Math.floor(numToRoundTo9);\n  const numToRoundTo11 = Math.floor(numToRoundTo10);\n  const numToRoundTo12 = Math.floor(numToRoundTo11);\n  const numToRoundTo13 = Math.floor(numToRoundTo12);\n  const numToRoundTo14 = Math.floor(numToRoundTo13);\n  const numToRoundTo15 = Math.floor(numToRoundTo14);\n  const numToRoundTo16 = Math.floor(numToRoundTo15);\n  const numToRoundTo17 = Math.floor(numToRoundTo16);\n  const numToRoundTo18 = Math.floor(numToRoundTo17);\n  const numToRoundTo19 = Math.floor(numToRoundTo18);\n  const numToRoundTo20 = Math.floor(numToRoundTo19);\n  const numToRoundTo21 = Math.floor(numToRoundTo20);\n  const numToRoundTo22 = Math.floor(numToRoundTo21);\n  const numToRoundTo23 = Math.floor(numToRoundTo22);\n  const numToRoundTo24 = Math.floor(numToRoundTo23);\n  const numToRoundTo25 = Math.floor(numToRoundTo24);\n  const numToRoundTo26 = Math.floor(numToRoundTo25);\n  const numToRoundTo27 = Math.floor(numToRoundTo26);\n  const numToRoundTo28 = Math.floor(numToRoundTo27);\n  const numToRoundTo29 = Math.floor(numToRoundTo28);\n  const numToRoundTo30 = Math.floor(numToRoundTo29);\n  const numToRoundTo31 = Math.floor(numToRoundTo30);\n  const numToRoundTo32 = Math.floor(numToRoundTo31);\n  const numToRoundTo33 = Math.floor(numToRoundTo32);\n  const numToRoundTo34 = Math.floor(numToRoundTo33);\n  const numToRoundTo35 = Math.floor(numToRoundTo34);\n  const numToRoundTo36 = Math.floor(numToRoundTo35);\n  const numToRoundTo37 = Math.floor(numToRoundTo36);\n  const numToRoundTo38 = Math.floor(numToRoundTo37);\n  const numToRoundTo39 = Math.floor(numToRoundTo38);\n  const numToRoundTo40 = Math.floor(numToRoundTo39);\n  const numToRoundTo41 = Math.floor(numToRoundTo40);\n  const numToRoundTo42 = Math.floor(numToRoundTo41);\n  const numToRoundTo43 = Math.floor(numToRoundTo42);\n  const numToRoundTo44 = Math.floor(numToRoundTo43);\n  const numToRoundTo45 = Math.floor(numToRoundTo44);\n  const numToRoundTo46 = Math.floor(numToRoundTo45);\n  const numToRoundTo47 = Math.floor(numToRoundTo46);\n  const numToRoundTo48 = Math.floor(numToRoundTo47);\n  const numToRoundTo49 = Math.floor(numToRoundTo48);\n  const numToRoundTo50 = Math.floor(numToRoundTo49);\n  const numToRoundTo51 = Math.floor(numToRoundTo50);\n  const numToRoundTo52 = Math.floor(numToRoundTo51);\n  const numToRoundTo53 = Math.floor(numToRoundTo52);\n  const numToRoundTo54 = Math.floor(numToRoundTo53);\n  const numToRoundTo55 = Math.floor(numToRoundTo54);\n  const numToRoundTo56 = Math.floor(numToRoundTo55);\n  const numToRoundTo57 = Math.floor(numToRoundTo56);\n  const numToRoundTo58 = Math.floor(numToRoundTo57);\n  const numToRoundTo59 = Math.floor(numToRoundTo58);\n  const numToRoundTo60 = Math.floor(numToRoundTo59);\n  const numToRoundTo61 = Math.floor(numToRoundTo60);\n  const numToRoundTo62 = Math.floor(numToRoundTo61);\n  const numToRoundTo63 = Math.floor(numToRoundTo62);\n  const numToRoundTo64 = Math.floor(numToRoundTo63);\n  const numToRoundTo65 = Math.floor(numToRoundTo64);\n  const numToRoundTo66 = Math.floor(numToRoundTo65);\n  const numToRoundTo67 = Math.floor(numToRoundTo66);\n  const numToRoundTo68 = Math.floor(numToRoundTo67);\n  const numToRoundTo69 = Math.floor(numToRoundTo68);\n  const numToRoundTo70 = Math.floor(numToRoundTo69);\n  const numToRoundTo71 = Math.floor(numToRoundTo70);\n  const numToRoundTo72 = Math.floor(numToRoundTo71);\n  const numToRoundTo73 = Math.floor(numToRoundTo72);\n  const numToRoundTo74 = Math.floor(numToRoundTo73);\n  const numToRoundTo75 = Math.floor(numToRoundTo74);\n  const numToRoundTo76 = Math.floor(numToRoundTo75);\n  const numToRoundTo77 = Math.floor(numToRoundTo76);\n  const numToRoundTo78 = Math.floor(numToRoundTo77);\n  const numToRoundTo79 = Math.floor(numToRoundTo78);\n  const numToRoundTo80 = Math.floor(numToRoundTo79);\n  const numToRoundTo81 = Math.floor(numToRoundTo80);\n  const numToRoundTo82 = Math.floor(numToRoundTo81);\n  const numToRoundTo83 = Math.floor(numToRoundTo82);\n  const numToRoundTo84 = Math.floor(numToRoundTo83);\n  const numToRoundTo85 = Math.floor(numToRoundTo84);\n  const numToRoundTo86 = Math.floor(numToRoundTo85);\n  const numToRoundTo87 = Math.floor(numToRoundTo86);\n  const numToRoundTo88 = Math.floor(numToRoundTo87);\n  const numToRoundTo89 = Math.floor(numToRoundTo88);\n  const numToRoundTo90 = Math.floor(numToRoundTo89);\n  const numToRoundTo91 = Math.floor(numToRoundTo90);\n  const numToRoundTo92 = Math.floor(numToRoundTo91);\n  const numToRoundTo93 = Math.floor(numToRoundTo92);\n  const numToRoundTo94 = Math.floor(numToRoundTo93);\n  const numToRoundTo95", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
