{"task_id": "JavaScript/0", "prompt": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closest = numbers.reduce((acc, cur) => {\n    const diff = cur - acc;\n    if (diff < Math.abs(diff)) {\n      return cur;\n    }\n    return acc;\n  }, Number.POSITIVE_INFINITY);\n  return Math.abs(closest - numbers[0]) < threshold;\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqual = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false;\n  }\n  return arr1.every((val, i) => arr2[i] === val);\n};\n\n/**\n * Returns true if two arrays are equal, false otherwise\n * >>> isEqual([1, 2, 3], [1, 2, 3])\n * true\n * >>> isEqual([1, 2, 3], [1, 2, 4])\n * false\n */\nconst isEqualWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n"}
{"task_id": "JavaScript/1", "prompt": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/)\n  return paren_groups.map((group) => {\n    const paren_group_name = group[1]\n    const paren_group_content = group[2]\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_group_content.replace(/\\)/g, '')\n    const paren_group_content = paren_"}
{"task_id": "JavaScript/2", "prompt": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const pwrt = Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n  return Math.floor(Math.log(number) / Math.LN10) * pwrt + Math.pow(10, pwrt);\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwo = (number) => {\n  return number > 0 && number < Math.pow(10, Math.floor(Math.log(number) / Math.LN10));\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZero = (number) => {\n  return isPowerOfTwo(number) || number === 0;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaN = (number) => {\n  return isPowerOfTwoOrZero(number) || isNaN(number);\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinity = (number) => {\n  return isPowerOfTwoOrZeroOrNaN(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZero = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinity(number) || number === 0 || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaN = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinityOrZero(number) || isNaN(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinity = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaN(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZero = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinity(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZeroOrNaN = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZero(number) || isNaN(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZeroOrNaN = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZero(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinity = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZero(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZero = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinity(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZero = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZero(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPowerOfTwo(20)\n  false\n  */\nconst isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZero = (number) => {\n  return isPowerOfTwoOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZeroOrNaNOrInfinityOrZero(number) || number === Infinity;\n};\n\n/**\n  Returns true if the given number is a power of two.\n\n  Retndn true if given number is power of two.\n  >>> isPowerOfTwo(10)\n  true\n  >>> isPower"}
{"task_id": "JavaScript/3", "prompt": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = operations.reduce((acc, curr) => acc + curr, 0);\n  let eero = operations.reduce((acc, curr) => acc + curr, 0);\n  let ane = operations.reduce((acc, curr) => acc + curr, 0);\n  let fune = operations.reduce((acc, curr) => acc + curr, 0);\n  let trne = balance;\n  let falve = balance;\n  operations.forEach((operation, index) => {\n    if (balance < eero) {\n      trne = operation;\n    } else if (balance < ane) {\n      falve = operation;\n    } else if (balance < fune) {\n      trne = operation;\n    }\n    balance = balance.minus(operation);\n  });\n  return trne === falve;\n};\n\nmodule.exports = belowZero;\n\n},{\"./operation\":5}],5:[function(require,module,exports){\nconst operation = require('./operation');\n\n/**\n * A class representing an operation on a bank account.\n */\nclass Operation {\n  /**\n   * Create an operation on a bank account.\n   * @param {number} amount The amount of the operation.\n   * @param {number} type The type of the operation.\n   * @param {number} balance The balance of the account.\n   * @param {number} eero The eero balance of the account.\n   * @param {number} ane The ane balance of the account.\n   * @param {number} fune The fune balance of the account.\n   */\n  constructor(amount, type, balance, eero, ane, fune) {\n    this.amount = amount;\n    this.type = type;\n    this.balance = balance;\n    this.eero = eero;\n    this.ane = ane;\n    this.fune = fune;\n  }\n\n  /**\n   * Get the amount of the operation.\n   * @returns {number} The amount of the operation.\n   */\n  getAmount() {\n    return this.amount;\n  }\n\n  /**\n   * Get the type of the operation.\n   * @returns {number} The type of the operation.\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Get the balance of the account.\n   * @returns {number} The balance of the account.\n   */\n  getBalance() {\n    return this.balance;\n  }\n\n  /**\n   * Get the eero balance of the account.\n   * @returns {number} The eero balance of the account.\n   */\n  getEero() {\n    return this.eero;\n  }\n\n  /**\n   * Get the ane balance of the account.\n   * @returns {number} The ane balance of the account.\n   */\n  getAne() {\n    return this.ane;\n  }\n\n  /**\n   * Get the fune balance of the account.\n   * @returns {number} The fune balance of the account.\n   */\n  getFie() {\n    return this.fune;\n  }\n\n  /**\n   * Get the operation as a string.\n   * @returns {string} The operation as a string.\n   */\n  toString() {\n    return `Operation ${this.amount} ${this.type}`;\n  }\n}\n\n/**\n * A class representing a bank account.\n */\nclass BankAccount {\n  /**\n   * Create a bank account.\n   * @param {number} balance The balance of the account.\n   * @param {number} eero The eero balance of the account.\n   * @param {number} ane The ane balance of the account.\n   * @param {number} fune The fune balance of the account.\n   */\n  constructor(balance, eero, ane, fune) {\n    this.balance = balance;\n    this.eero = eero;\n    this.ane = ane;\n    this.fune = fune;\n  }\n\n  /**\n   * Get the balance of the account.\n   * @returns {number} The balance of the account.\n   */\n  getBalance() {\n    return this.balance;\n  }\n\n  /**\n   * Get the eero balance of the account.\n   * @returns {number} The eero balance of the account.\n   */\n  getEero() {\n    return this.eero;\n  }\n\n  /**\n   * Get the ane balance of the account.\n   * @returns {number} The ane balance of the account.\n   */\n  getAne() {\n    return this.ane;\n  }\n\n  /**\n   * Get the fune balance of the account.\n   * @returns {number} The fune balance of the account.\n   */\n  getFie() {\n    return this.fune;\n  }\n\n  /**\n   * Get the operation as a string.\n   * @returns {string} The operation as a string.\n   */\n  toString() {\n    return `Bank Account ${this.balance} ${this.eero} ${this.ane} ${this.fune}`;\n  }\n}\n\n/**\n * A class representing a deposit and withdrawal operation.\n */\nclass DepositWithdrawalOperation extends Operation {\n  /**\n   * Create a deposit and withdrawal operation.\n   * @param {number} amount The amount of the operation.\n   * @param {number} type The type of the operation.\n   * @param {number} balance The balance of the account.\n   * @param {number} eero The eero balance of the account.\n   * @param {number} ane The ane balance of the account.\n   * @param {number} fune The fune balance of the account.\n   */\n  constructor(amount, type, balance, eero, ane, fune) {\n    super(amount, type, balance, eero, ane, fune);\n  }\n\n  /**\n   * Get the amount of the operation.\n   * @returns {number} The amount of the operation.\n   */\n  getAmount() {\n    return this.amount;\n  }\n\n  /**\n   * Get the type of the operation.\n   * @returns {number} The type of the operation.\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Get the balance of the account.\n   * @returns {number} The balance of the account.\n   */\n  getBalance() {\n    return this.balance;\n  }\n\n  /**\n   * Get the eero balance of the account.\n   * @returns {number} The eero balance of the account.\n   */\n  getEero() {\n    return this.eero;\n  }\n\n  /**\n   * Get the ane balance of the account.\n   * @returns {number} The ane balance of the account.\n   */\n  getAne() {\n    return this.ane;\n  }\n\n  /**\n   * Get the fune balance of the account.\n   * @returns {number} The fune balance of the account.\n   */\n  getFie() {\n    return this.fune;\n  }\n\n  /**\n   * Get the operation as a string.\n   * @returns {string} The operation as a string.\n   */\n  toString() {\n    return `Deposit ${this.amount} ${this.type}`;\n  }\n}\n\n/**\n * A class representing a deposit and withdrawal operation.\n */\nclass WithdrawalOperation extends Operation {\n  /**\n   * Create a deposit and withdrawal operation.\n   * @param {number} amount The amount of the operation.\n   * @param {number} type The type of the operation.\n   * @param {number} balance The balance of the account.\n   * @param {number} eero The eero balance of the account.\n   * @param {number} ane The ane balance of the account.\n   * @param {number} fune The fune balance of the account.\n   */\n  constructor(amount, type, balance, eero, ane, fune) {\n    super(amount, type, balance, eero, ane, fune);\n  }\n\n  /**\n   * Get the amount of the operation.\n   * @returns {number} The amount of the operation.\n   */\n  getAmount() {\n    return this.amount;\n  }\n\n  /**\n   * Get the type of the operation.\n   * @returns {number} The type of the operation.\n   */\n  getType() {\n    return this.type;\n  }\n\n  /**\n   * Get the balance of the account.\n   * @returns {number} The balance of the account.\n   */\n  getBalance() {\n    return this.balance;\n  }\n\n  /**\n   * Get the eero balance of the account.\n   * @returns {number} The eero balance of the account.\n   */\n  getEero() {\n    return this.eero;\n  }\n\n  /**\n"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.abs(x - mean));\n};\n\n/**\n * For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MSD = average | x - x_kean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.00\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.pow(x - mean, 2));\n};\n\n/**\n * For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MSD = average | x - x_kean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  4.00\n  */\nconst meanSquaredDeviationWithError = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.pow(x - mean, 2) / (Math.pow(x - mean, 2) + Math.pow(mean, 2)));\n};\n\n/**\n * For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MSD = average | x - x_kean |^2\n  >>> meanSquaredDeviationWithError([1.0, 2.0, 3.0, 4.0])\n  4.00\n  */\nconst meanSquaredDeviationWithErrorAndError = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.pow(x - mean, 2) / (Math.pow(x - mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/**\n * For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MSD = average | x - x_kean |^2\n  >>> meanSquaredDeviationWithErrorAndError([1.0, 2.0, 3.0, 4.0])\n  4.00\n  */\nconst meanSquaredDeviationWithErrorAndErrorWithError = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.pow(x - mean, 2) / (Math.pow(x - mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/**\n * For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MSD = average | x - x_kean |^2\n  >>> meanSquaredDeviationWithErrorAndErrorWithError([1.0, 2.0, 3.0, 4.0])\n  4.00\n  */\nconst meanSquaredDeviationWithErrorAndErrorWithErrorAndError = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.pow(x - mean, 2) / (Math.pow(x - mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/**\n * For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MSD = average | x - x_kean |^2\n  >>> meanSquaredDeviationWithErrorAndErrorWithErrorAndError([1.0, 2.0, 3.0, 4.0])\n  4.00\n  */\nconst meanSquaredDeviationWithErrorAndErrorWithErrorAndErrorAndError = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.pow(x - mean, 2) / (Math.pow(x - mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/**\n * For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MSD = average | x - x_kean |^2\n  >>> meanSquaredDeviationWithErrorAndErrorWithErrorAndErrorAndError([1.0, 2.0, 3.0, 4.0])\n  4.00\n  */\nconst meanSquaredDeviationWithErrorAndErrorWithErrorAndErrorAndErrorAndError = (numbers) => {\n  const mean = numbers.reduce((acc, x) => acc + x, 0) / numbers.length;\n  return numbers.map((x) => Math.pow(x - mean, 2) / (Math.pow(x - mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2) + Math.pow(mean, 2)));\n};\n\n/**\n * For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the square root of the average squared diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MSD = average | x - x_kean |^2\n  >>> meanSquaredDeviationWithErrorAndErrorWithErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndErrorAndError"}
{"task_id": "JavaScript/5", "prompt": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i])\n      i++\n      j = 1\n    } else {\n      result.push(numbers[i])\n      j++\n      i++\n    }\n  }\n  return result\n}\n\n// Returns a new list with every nth element of the original list\nconst nth = (n, list) => {\n  const result = []\n  for (let i = 0; i < list.length; i++) {\n    if (i % n === 0) {\n      result.push(list[i])\n    }\n  }\n  return result\n}\n\n// Returns a new list with every nth element of the original list except the nth element\nconst nthNot = (n, list) => {\n  const result = []\n  for (let i = 0; i < list.length; i++) {\n    if (i % n!== n) {\n      result.push(list[i])\n    }\n  }\n  return result\n}\n\n// Returns a new list with every nth element of the original list except the nth element except the nth element\nconst nthNot = (n, list) => {\n  const result = []\n  for (let i = 0; i < list.length; i++) {\n    if (i % n!== n && i % n!== 0) {\n      result.push(list[i])\n    }\n  }\n  return result\n}\n\n// Returns a new list with every nth element of the original list except the nth element except the nth element except the nth element\nconst nthNot = (n, list) => {\n  const result = []\n  for (let i = 0; i < list.length; i++) {\n    if (i % n!== n && i % n!== 0 && i % n!== 1) {\n      result.push(list[i])\n    }\n  }\n  return result\n}\n\n// Returns a new list with every nth element of the original list except the nth element except the nth element except the nth element except the nth element\nconst nthNot = (n, list) => {\n  const result = []\n  for (let i = 0; i < list.length; i++) {\n    if (i % n!== n && i % n!== 0 && i % n!== 1 && i % n!== 0) {\n      result.push(list[i])\n    }\n  }\n  return result\n}\n\n// Returns a new list with every nth element of the original list except the nth element except the nth element except the nth element except the nth element except the nth element\nconst nthNot = (n, list) => {\n  const result = []\n  for (let i = 0; i < list.length; i++) {\n    if (i % n!== n && i % n!== 0 && i % n!== 1 && i % n!== 2) {\n      result.push(list[i])\n    }\n  }\n  return result\n}\n\n// Returns a new list with every nth element of the original list except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element\nconst nthNot = (n, list) => {\n  const result = []\n  for (let i = 0; i < list.length; i++) {\n    if (i % n!== n && i % n!== 0 && i % n!== 1 && i % n!== 2 && i % n!== 3) {\n      result.push(list[i])\n    }\n  }\n  return result\n}\n\n// Returns a new list with every nth element of the original list except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the nth element except the n"}
{"task_id": "JavaScript/6", "prompt": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_lengths = paren_groups.map((group) => group.length);\n  const paren_group_counts = paren_group_lengths.reduce((acc, cur) => acc + cur, 0);\n  const paren_group_counts_max = Math.max(...paren_group_counts);\n  const paren_group_counts_min = Math.min(...paren_group_counts);\n  const paren_group_counts_avg = paren_group_counts_min / paren_group_counts_max;\n  const paren_group_counts_avg = Math.ceil(paren_group_counts_avg * 100) / 100;\n  const paren_group_counts_avg = paren_group_counts_avg.toFixed(2);\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n  const paren_group_counts_avg = paren_group_counts_avg.replace(/\\.?0+$/, '');\n"}
{"task_id": "JavaScript/7", "prompt": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Get a random element from a list\n * \n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 1)\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 2)\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 3)\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 4)\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 5)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 6)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 7)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 8)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 9)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 10)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 11)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 12)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 13)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 14)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 15)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 16)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 17)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 18)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 19)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 20)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 21)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 22)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 23)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 24)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 25)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 26)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 27)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 28)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 29)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 30)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 31)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 32)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 33)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 34)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 35)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 36)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 37)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 38)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 39)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 40)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 41)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 42)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 43)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 44)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 45)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 46)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 47)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 48)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 49)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 50)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 51)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 52)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 53)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 54)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 55)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 56)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 57)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 58)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 59)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 60)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 61)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 62)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 63)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 64)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 65)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 66)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 67)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 68)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 69)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 70)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 71)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 72)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 73)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 74)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 75)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 76)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 77)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 78)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 79)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 80)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 81)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 82)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 83)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 84)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 85)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 86)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 87)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 88)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 89)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 90)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 91)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 92)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 93)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 94)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 95)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 96)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 97)"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const [sym, product] = numbers.reduce((acc, n) => {\n    const [acc, n] = acc;\n    return acc + (n * n);\n  }, 0);\n  return [sym, product];\n};\n\n// Given a list containing integers, return the product of all the integers in the list.\n// Empty list should be equal to 0.\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// >>> product([2, 3])\n// 6\n// "}
{"task_id": "JavaScript/9", "prompt": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  let maxIndex6 = 0;\n  let maxIndex7 = 0;\n  let maxIndex8 = 0;\n  let maxIndex9 = 0;\n  let maxIndex10 = 0;\n  let maxIndex11 = 0;\n  let maxIndex12 = 0;\n  let maxIndex13 = 0;\n  let maxIndex14 = 0;\n  let maxIndex15 = 0;\n  let maxIndex16 = 0;\n  let maxIndex17 = 0;\n  let maxIndex18 = 0;\n  let maxIndex19 = 0;\n  let maxIndex20 = 0;\n  let maxIndex21 = 0;\n  let maxIndex22 = 0;\n  let maxIndex23 = 0;\n  let maxIndex24 = 0;\n  let maxIndex25 = 0;\n  let maxIndex26 = 0;\n  let maxIndex27 = 0;\n  let maxIndex28 = 0;\n  let maxIndex29 = 0;\n  let maxIndex30 = 0;\n  let maxIndex31 = 0;\n  let maxIndex32 = 0;\n  let maxIndex33 = 0;\n  let maxIndex34 = 0;\n  let maxIndex35 = 0;\n  let maxIndex36 = 0;\n  let maxIndex37 = 0;\n  let maxIndex38 = 0;\n  let maxIndex39 = 0;\n  let maxIndex40 = 0;\n  let maxIndex41 = 0;\n  let maxIndex42 = 0;\n  let maxIndex43 = 0;\n  let maxIndex44 = 0;\n  let maxIndex45 = 0;\n  let maxIndex46 = 0;\n  let maxIndex47 = 0;\n  let maxIndex48 = 0;\n  let maxIndex49 = 0;\n  let maxIndex50 = 0;\n  let maxIndex51 = 0;\n  let maxIndex52 = 0;\n  let maxIndex53 = 0;\n  let maxIndex54 = 0;\n  let maxIndex55 = 0;\n  let maxIndex56 = 0;\n  let maxIndex57 = 0;\n  let maxIndex58 = 0;\n  let maxIndex59 = 0;\n  let maxIndex60 = 0;\n  let maxIndex61 = 0;\n  let maxIndex62 = 0;\n  let maxIndex63 = 0;\n  let maxIndex64 = 0;\n  let maxIndex65 = 0;\n  let maxIndex66 = 0;\n  let maxIndex67 = 0;\n  let maxIndex68 = 0;\n  let maxIndex69 = 0;\n  let maxIndex70 = 0;\n  let maxIndex71 = 0;\n  let maxIndex72 = 0;\n  let maxIndex73 = 0;\n  let maxIndex74 = 0;\n  let maxIndex75 = 0;\n  let maxIndex76 = 0;\n  let maxIndex77 = 0;\n  let maxIndex78 = 0;\n  let maxIndex79 = 0;\n  let maxIndex80 = 0;\n  let maxIndex81 = 0;\n  let maxIndex82 = 0;\n  let maxIndex83 = 0;\n  let maxIndex84 = 0;\n  let maxIndex85 = 0;\n  let maxIndex86 = 0;\n  let maxIndex87 = 0;\n  let maxIndex88 = 0;\n  let maxIndex89 = 0;\n  let maxIndex90 = 0;\n  let maxIndex91 = 0;\n  let maxIndex92 = 0;\n  let maxIndex93 = 0;\n  let maxIndex94 = 0;\n  let maxIndex95 = 0;\n  let maxIndex96 = 0;\n  let maxIndex97 = 0;\n  let maxIndex98 = 0;\n  let maxIndex99 = 0;\n  let maxIndex100 = 0;\n  let maxIndex101 = 0;\n  let maxIndex102 = 0;\n  let maxIndex103 = 0;\n  let maxIndex104 = 0;\n  let maxIndex105 = 0;\n  let maxIndex106 = 0;\n  let maxIndex107 = 0;\n  let maxIndex108 = 0;\n  let maxIndex109 = 0;\n  let maxIndex110 = 0;\n  let maxIndex111 = 0;\n  let maxIndex112 = 0;\n  let maxIndex113 = 0;\n  let maxIndex114 = 0;\n  let maxIndex115 = 0;\n  let maxIndex116 = 0;\n  let maxIndex117 = 0;\n  let maxIndex118 = 0;\n  let maxIndex119 = 0;\n  let maxIndex120 = 0;\n  let maxIndex121 = 0;\n  let maxIndex122 = 0;\n  let maxIndex123 = 0;\n  let maxIndex124 = 0;\n  let maxIndex125 = 0;\n  let maxIndex126 = 0;\n  let maxIndex127 = 0;\n  let maxIndex128 = 0;\n  let maxIndex129 = 0;\n  let maxIndex130 = 0;\n  let maxIndex131 = 0;\n  let maxIndex132 = 0;\n  let maxIndex133 = 0;\n  let maxIndex134 = 0;\n  let maxIndex135 = 0;\n  let maxIndex136 = 0;\n  let maxIndex137 = 0;\n  let maxIndex138 = 0;\n  let maxIndex139 = 0;\n  let maxIndex140 = 0;\n  let maxIndex141 = 0;\n  let maxIndex142 = 0;\n  let maxIndex143 = 0;\n  let maxIndex144 = 0;\n  let maxIndex145 = 0;\n  let maxIndex146 = 0;\n  let maxIndex147 = 0;\n  let maxIndex148 = 0;\n  let maxIndex149 = 0;\n  let maxIndex150 = 0;\n  let maxIndex151 = 0;\n  let maxIndex152 = 0;\n  let maxIndex153 = 0;\n  let maxIndex154 = 0;\n  let maxIndex155 = 0;\n  let maxIndex156 = 0;\n  let maxIndex157 = 0;\n  let maxIndex158 = 0;\n  let maxIndex159 = 0;\n  let maxIndex160 = 0;\n  let maxIndex161 = 0;\n  let maxIndex162 = 0;\n  let maxIndex163 = 0;\n  let maxIndex164 = 0;\n  let maxIndex165 = 0;\n  let maxIndex166 = 0;\n  let maxIndex167 = 0;\n  let maxIndex168 = 0;\n  let maxIndex169 = 0;\n  let maxIndex170 = 0;\n  let maxIndex171 = 0;\n  let maxIndex172 = 0;\n  let maxIndex173 = 0;\n  let maxIndex174 = 0;\n  let maxIndex175 = 0;\n  let maxIndex176 = 0;\n  let maxIndex177 = 0;\n  let maxIndex178 = 0;\n  let maxIndex179 = 0;\n  let maxIndex180 = 0;\n  let maxIndex181 = 0;\n  let maxIndex182 = 0;\n  let maxIndex183 = 0;\n  let maxIndex184 = 0;\n  let maxIndex185 = 0;\n  let maxIndex186 = 0;\n  let maxIndex187 = 0;\n  let maxIndex188 = 0;\n  let maxIndex189 = 0;\n  let maxIndex190 = 0;\n  let maxIndex191 = 0;\n  let maxIndex192 = 0;\n  let maxIndex193 = 0;\n  let maxIndex194 = 0;\n  let maxIndex195 = 0;\n  let maxIndex196 = 0;\n  let maxIndex197 = 0;\n  let maxIndex198 = 0;\n  let maxIndex199 = 0;\n  let maxIndex200 = 0;\n  let maxIndex201 = 0;\n  let maxIndex202 = 0;\n  let maxIndex203 = 0;\n  let maxIndex204 = 0;\n  let maxIndex205 = 0;\n  let maxIndex206 = 0;\n  let maxIndex207 = 0;\n  let maxIndex208 = 0;\n  let maxIndex209 = 0;\n  let maxIndex210 = 0;\n  let maxIndex211 = 0;\n  let maxIndex212 = 0;\n  let maxIndex213 = 0;\n  let maxIndex214 = 0;\n  let maxIndex215 = 0;\n  let maxIndex216 = 0;\n  let maxIndex217 = 0;\n  let maxIndex218 = 0;\n  let maxIndex219 = 0;\n  let maxIndex220 = 0;\n  let maxIndex221 = 0;\n  let maxIndex222 = 0;\n  let maxIndex223 = 0;\n  let maxIndex224 = 0;\n  let maxIndex225 = 0;\n  let maxIndex226 = 0;\n  let maxIndex227 = 0;\n  let maxIndex228 = 0;\n  let maxIndex229 = 0;\n  let maxIndex230 = 0;\n  let maxIndex231 = 0;\n  let maxIndex232 = 0;\n  let maxIndex233 = 0;\n  let maxIndex234 = 0;\n  let maxIndex235 = 0;\n  let maxIndex236 = 0;\n  let maxIndex237 = 0;\n  let maxIndex238 = 0;\n  let maxIndex239 = 0;\n  let maxIndex240 = 0;\n  let maxIndex241 = 0;\n  let maxIndex242 = 0;\n  let maxIndex243 = 0;\n  let maxIndex244 = 0;\n  let maxIndex245 = 0;\n  let maxIndex246 = 0;\n  let maxIndex247 = 0;\n"}
{"task_id": "JavaScript/10", "prompt": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixLength2 = 0;\n  let longestPalindromeSuffixLength2 = 0;\n  let longestPalindromePrefixLength3 = 0;\n  let longestPalindromeSuffixLength3 = 0;\n  let longestPalindromePrefixLength4 = 0;\n  let longestPalindromeSuffixLength4 = 0;\n  let longestPalindromePrefixLength5 = 0;\n  let longestPalindromeSuffixLength5 = 0;\n  let longestPalindromePrefixLength6 = 0;\n  let longestPalindromeSuffixLength6 = 0;\n  let longestPalindromePrefixLength7 = 0;\n  let longestPalindromeSuffixLength7 = 0;\n  let longestPalindromePrefixLength8 = 0;\n  let longestPalindromeSuffixLength8 = 0;\n  let longestPalindromePrefixLength9 = 0;\n  let longestPalindromeSuffixLength9 = 0;\n  let longestPalindromePrefixLength10 = 0;\n  let longestPalindromeSuffixLength10 = 0;\n  let longestPalindromePrefixLength11 = 0;\n  let longestPalindromeSuffixLength11 = 0;\n  let longestPalindromePrefixLength12 = 0;\n  let longestPalindromeSuffixLength12 = 0;\n  let longestPalindromePrefixLength13 = 0;\n  let longestPalindromeSuffixLength13 = 0;\n  let longestPalindromePrefixLength14 = 0;\n  let longestPalindromeSuffixLength14 = 0;\n  let longestPalindromePrefixLength15 = 0;\n  let longestPalindromeSuffixLength15 = 0;\n  let longestPalindromePrefixLength16 = 0;\n  let longestPalindromeSuffixLength16 = 0;\n  let longestPalindromePrefixLength17 = 0;\n  let longestPalindromeSuffixLength17 = 0;\n  let longestPalindromePrefixLength18 = 0;\n  let longestPalindromeSuffixLength18 = 0;\n  let longestPalindromePrefixLength19 = 0;\n  let longestPalindromeSuffixLength19 = 0;\n  let longestPalindromePrefixLength20 = 0;\n  let longestPalindromeSuffixLength20 = 0;\n  let longestPalindromePrefixLength21 = 0;\n  let longestPalindromeSuffixLength21 = 0;\n  let longestPalindromePrefixLength22 = 0;\n  let longestPalindromeSuffixLength22 = 0;\n  let longestPalindromePrefixLength23 = 0;\n  let longestPalindromeSuffixLength23 = 0;\n  let longestPalindromePrefixLength24 = 0;\n  let longestPalindromeSuffixLength24 = 0;\n  let longestPalindromePrefixLength25 = 0;\n  let longestPalindromeSuffixLength25 = 0;\n  let longestPalindromePrefixLength26 = 0;\n  let longestPalindromeSuffixLength26 = 0;\n  let longestPalindromePrefixLength27 = 0;\n  let longestPalindromeSuffixLength27 = 0;\n  let longestPalindromePrefixLength28 = 0;\n  let longestPalindromeSuffixLength28 = 0;\n  let longestPalindromePrefixLength29 = 0;\n  let longestPalindromeSuffixLength29 = 0;\n  let longestPalindromePrefixLength30 = 0;\n  let longestPalindromeSuffixLength30 = 0;\n  let longestPalindromePrefixLength31 = 0;\n  let longestPalindromeSuffixLength31 = 0;\n  let longestPalindromePrefixLength32 = 0;\n  let longestPalindromeSuffixLength32 = 0;\n  let longestPalindromePrefixLength33 = 0;\n  let longestPalindromeSuffixLength33 = 0;\n  let longestPalindromePrefixLength34 = 0;\n  let longestPalindromeSuffixLength34 = 0;\n  let longestPalindromePrefixLength35 = 0;\n  let longestPalindromeSuffixLength35 = 0;\n  let longestPalindromePrefixLength36 = 0;\n  let longestPalindromeSuffixLength36 = 0;\n  let longestPalindromePrefixLength37 = 0;\n  let longestPalindromeSuffixLength37 = 0;\n  let longestPalindromePrefixLength38 = 0;\n  let longestPalindromeSuffixLength38 = 0;\n  let longestPalindromePrefixLength39 = 0;\n  let longestPalindromeSuffixLength39 = 0;\n  let longestPalindromePrefixLength40 = 0;\n  let longestPalindromeSuffixLength40 = 0;\n  let longestPalindromePrefixLength41 = 0;\n  let longestPalindromeSuffixLength41 = 0;\n  let longestPalindromePrefixLength42 = 0;\n  let longestPalindromeSuffixLength42 = 0;\n  let longestPalindromePrefixLength43 = 0;\n  let longestPalindromeSuffixLength43 = 0;\n  let longestPalindromePrefixLength44 = 0;\n  let longestPalindromeSuffixLength44 = 0;\n  let longestPalindromePrefixLength45 = 0;\n  let longestPalindromeSuffixLength45 = 0;\n  let longestPalindromePrefixLength46 = 0;\n  let longestPalindromeSuffixLength46 = 0;\n  let longestPalindromePrefixLength47 = 0;\n  let longestPalindromeSuffixLength47 = 0;\n  let longestPalindromePrefixLength48 = 0;\n  let longestPalindromeSuffixLength48 = 0;\n  let longestPalindromePrefixLength49 = 0;\n  let longestPalindromeSuffixLength49 = 0;\n  let longestPalindromePrefixLength50 = 0;\n  let longestPalindromeSuffixLength50 = 0;\n  let longestPalindromePrefixLength51 = 0;\n  let longestPalindromeSuffixLength51 = 0;\n  let longestPalindromePrefixLength52 = 0;\n  let longestPalindromeSuffixLength52 = 0;\n  let longestPalindromePrefixLength53 = 0;\n  let longestPalindromeSuffixLength53 = 0;\n  let longestPalindromePrefixLength54 = 0;\n  let longestPalindromeSuffixLength54 = 0;\n  let longestPalindromePrefixLength55 = 0;\n  let longestPalindromeSuffixLength55 = 0;\n  let longestPalindromePrefixLength56 = 0;\n  let longestPalindromeSuffixLength56 = 0;\n  let longestPalindromePrefixLength57 = 0;\n  let longestPalindromeSuffixLength57 = 0;\n  let longestPalindromePrefixLength58 = 0;\n  let longestPalindromeSuffixLength58 = 0;\n  let longestPalindromePrefixLength59 = 0;\n  let longestPalindromeSuffixLength59 = 0;\n  let longestPalindromePrefixLength60 = 0;\n  let longestPalindromeSuffixLength60 = 0;\n  let longestPalindromePrefixLength61 = 0;\n  let longestPalindromeSuffixLength61 = 0;\n"}
{"task_id": "JavaScript/11", "prompt": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/**\n  Convert a string to binary (base 2) representation.\n  >>> binaryToBase('0b10')\n  '1010'\n  */\nconst binaryToBase = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(str.charCodeAt(i) * 2);\n  }\n  return result;\n};\n\n/**\n  Convert binary (base 2) representation to string.\n  >>> binaryToBase('1010')\n  '0b10'\n  */\nconst binaryToBase10 = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(str.charCodeAt(i) / 2);\n  }\n  return result;\n};\n\n/**\n  Convert string to binary (base 2) representation.\n  >>> binaryToBase('0b101')\n  '1010'\n  */\nconst binaryToBase101 = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(str.charCodeAt(i) * 2);\n  }\n  return result;\n};\n\n/**\n  Convert binary (base 2) representation to string.\n  >>> binaryToBase('1010')\n  '0b10'\n  */\nconst binaryToBase101 = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(str.charCodeAt(i) / 2);\n  }\n  return result;\n};\n\n/**\n  Convert string to hexadecimal representation.\n  >>> hexToBinary('010')\n  '1010'\n  */\nconst hexToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 16));\n  }\n  return result;\n};\n\n/**\n  Convert hexadecimal representation to string.\n  >>> hexToBinary('1010')\n  '010'\n  */\nconst hexToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 16));\n  }\n  return result;\n};\n\n/**\n  Convert string to hexadecimal representation.\n  >>> hexToBinary('0101')\n  '10101'\n  */\nconst hexToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 16));\n  }\n  return result;\n};\n\n/**\n  Convert hexadecimal representation to string.\n  >>> hexToBinary('10101')\n  '0101'\n  */\nconst hexToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 16));\n  }\n  return result;\n};\n\n/**\n  Convert string to octal representation.\n  >>> octalToBinary('010')\n  '1010'\n  */\nconst octalToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 8));\n  }\n  return result;\n};\n\n/**\n  Convert octal representation to string.\n  >>> octalToBinary('1010')\n  '010'\n  */\nconst octalToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 8));\n  }\n  return result;\n};\n\n/**\n  Convert string to octal representation.\n  >>> octalToBinary('0101')\n  '10101'\n  */\nconst octalToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 8));\n  }\n  return result;\n};\n\n/**\n  Convert octal representation to string.\n  >>> octalToBinary('10101')\n  '0101'\n  */\nconst octalToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 8));\n  }\n  return result;\n};\n\n/**\n  Convert string to decimal representation.\n  >>> decimalToBinary('010')\n  '1010'\n  */\nconst decimalToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 10));\n  }\n  return result;\n};\n\n/**\n  Convert decimal representation to string.\n  >>> decimalToBinary('1010')\n  '010'\n  */\nconst decimalToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 10));\n  }\n  return result;\n};\n\n/**\n  Convert string to decimal representation.\n  >>> decimalToBinary('0101')\n  '10101'\n  */\nconst decimalToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 10));\n  }\n  return result;\n};\n\n/**\n  Convert decimal representation to string.\n  >>> decimalToBinary('10101')\n  '0101'\n  */\nconst decimalToBinary = (str) => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 10));\n  }\n  return result;\n};\n\n/**\n  Convert string to hexadecimal representation.\n  >>> hexToOctal('010')\n  '10'\n  */\nconst hexToOctal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 16));\n  }\n  return result;\n};\n\n/**\n  Convert octal representation to hexadecimal representation.\n  >>> octalToHex('1010')\n  '10'\n  */\nconst octalToHex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 8));\n  }\n  return result;\n};\n\n/**\n  Convert hexadecimal representation to octal representation.\n  >>> hexToOctal('10')\n  '10'\n  */\nconst hexToOctal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 16));\n  }\n  return result;\n};\n\n/**\n  Convert octal representation to hexadecimal representation.\n  >>> octalToHex('101')\n  '101'\n  */\nconst octalToHex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 16));\n  }\n  return result;\n};\n\n/**\n  Convert hexadecimal representation to hexadecimal representation.\n  >>> hexToOctal('1010')\n  '10'\n  */\nconst hexToOctal = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str.substr(i, 2), 8));\n  }\n  return result;\n};\n\n/**\n  Convert octal representation to hexadecimal representation.\n  >>> octalToHex('101')\n  '101'\n  */\nconst octalToHex = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt("}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longestLength = 0\n  let longestString = ''\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    if (string.length > longestLength) {\n      longestLength = string.length\n      longestString = string\n    }\n  }\n  return longestString\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cdea\"\n  */\nconst reverse = (string) => {\n  if (!string) {\n    return ''\n  }\n  return string.split('').reverse().join('')\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cdea\"\n  */\nconst reverseInPlace = (string) => {\n  if (!string) {\n    return ''\n  }\n  let reversedString = reverse(string)\n  string = reversedString\n  return string\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverseInPlace(\"a\")\n  \"a\"\n  >>> reverseInPlace(\"ab\")\n  \"ab\"\n  >>> reverseInPlace(\"abc\")\n  \"cba\"\n  >>> reverseInPlace(\"abcde\")\n  \"cdea\"\n  */\nconst reverseInPlaceInPlace = (string) => {\n  if (!string) {\n    return ''\n  }\n  let reversedString = reverseInPlace(string)\n  string = reversedString\n  return string\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverseInPlaceInPlace(\"a\")\n  \"a\"\n  >>> reverseInPlaceInPlace(\"ab\")\n  \"ab\"\n  >>> reverseInPlaceInPlace(\"abc\")\n  \"cba\"\n  >>> reverseInPlaceInPlace(\"abcde\")\n  \"cdea\"\n  */\nconst reverseInPlaceInPlaceInPlace = (string) => {\n  if (!string) {\n    return ''\n  }\n  let reversedString = reverseInPlaceInPlace(string)\n  string = reversedString\n  return string\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverseInPlaceInPlaceInPlace(\"a\")\n  \"a\"\n  >>> reverseInPlaceInPlaceInPlace(\"ab\")\n  \"ab\"\n  >>> reverseInPlaceInPlaceInPlace(\"abc\")\n  \"cba\"\n  >>> reverseInPlaceInPlaceInPlace(\"abcde\")\n  \"cdea\"\n  */\nconst reverseInPlaceInPlaceInPlaceInPlace = (string) => {\n  if (!string) {\n    return ''\n  }\n  let reversedString = reverseInPlaceInPlaceInPlace(string)\n  string = reversedString\n  return string\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverseInPlaceInPlaceInPlaceInPlace(\"a\")\n  \"a\"\n  >>> reverseInPlaceInPlaceInPlaceInPlace(\"ab\")\n  \"ab\"\n  >>> reverseInPlaceInPlaceInPlaceInPlace(\"abc\")\n  \"cba\"\n  >>> reverseInPlaceInPlaceInPlaceInPlace(\"abcde\")\n  \"cdea\"\n  */\nconst reverseInPlaceInPlaceInPlaceInPlaceInPlace = (string) => {\n  if (!string) {\n    return ''\n  }\n  let reversedString = reverseInPlaceInPlaceInPlaceInPlace(string)\n  string = reversedString\n  return string\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlace(\"a\")\n  \"a\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlace(\"ab\")\n  \"ab\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlace(\"abc\")\n  \"cba\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlace(\"abcde\")\n  \"cdea\"\n  */\nconst reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (string) => {\n  if (!string) {\n    return ''\n  }\n  let reversedString = reverseInPlaceInPlaceInPlaceInPlaceInPlace(string)\n  string = reversedString\n  return string\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"a\")\n  \"a\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"ab\")\n  \"ab\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"abc\")\n  \"cba\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"abcde\")\n  \"cdea\"\n  */\nconst reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (string) => {\n  if (!string) {\n    return ''\n  }\n  let reversedString = reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(string)\n  string = reversedString\n  return string\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"a\")\n  \"a\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"ab\")\n  \"ab\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"abc\")\n  \"cba\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"abcde\")\n  \"cdea\"\n  */\nconst reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace = (string) => {\n  if (!string) {\n    return ''\n  }\n  let reversedString = reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(string)\n  string = reversedString\n  return string\n}\n\n/**\n  Given a string, return its reverse in string form. Return the empty string if the\n  string is an empty string.\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"a\")\n  \"a\"\n  >>> reverseInPlaceInPlaceInPlaceInPlaceInPlaceInPlaceInPlace(\"ab\")\n  \"ab\"\n  >>> reverseInPlaceInPlace"}
{"task_id": "JavaScript/13", "prompt": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const gcd = (a, b) => {\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n    if (a === 0) return b;\n    if (b === 0) return a;\n"}
{"task_id": "JavaScript/14", "prompt": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let currentPrefix = null\n  let currentLength = 0\n  let currentChar = 0\n  let currentCharLength = 0\n  let currentCharIsSpace = false\n  let currentCharIsNewLine = false\n  let currentCharIsNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLine = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLine = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLine = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLine = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIsNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpaceOrNewLineOrSpace = false\n  let currentCharIs"}
{"task_id": "JavaScript/15", "prompt": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  let i = n;\n  while (--i) {\n    result.push(String.fromCharCode(i));\n  }\n  return result.join(' ');\n};\n\n// A utility function to convert a number to a string with thousands separators.\nconst numberToString = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with millions separators.\nconst numberToStringMillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with billions separators.\nconst numberToStringBillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with trillions separators.\nconst numberToStringTrillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with quadrillions separators.\nconst numberToStringQuadrillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with quintillions separators.\nconst numberToStringQuintillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with sextillions separators.\nconst numberToStringSextillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with septillions separators.\nconst numberToStringSeptillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with octillions separators.\nconst numberToStringOctillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with nonillions separators.\nconst numberToStringNonillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with decillions separators.\nconst numberToStringDecillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with undecillions separators.\nconst numberToStringUndecillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with centillions separators.\nconst numberToStringCentillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with decimillions separators.\nconst numberToStringDecimillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with undecimillions separators.\nconst numberToStringUndecimillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with millions separators.\nconst numberToStringMillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with billions separators.\nconst numberToStringBillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with trillions separators.\nconst numberToStringTrillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with quadrillions separators.\nconst numberToStringQuadrillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with quintillions separators.\nconst numberToStringQuintillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with sextillions separators.\nconst numberToStringSextillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with septillions separators.\nconst numberToStringSeptillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with octillions separators.\nconst numberToStringOctillion = (n) => {\n  const s = n.toString();\n  return s.split('')\n   .map(s => s.replace('.', ',').replace(',', '.').replace(',', '.'))\n   .join('');\n};\n\n// A utility function to convert a number to a string with nonillions separators.\nconst numberToString"}
{"task_id": "JavaScript/16", "prompt": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].length;\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of its characters. E.g.,\n * \"abc\" -> [\"a\", \"b\", \"c\"]\n * \"abd\" -> [\"a\", \"b\", \"d\", \"c\"]\n * \"bcd\" -> [\"b\", \"c\", \"d\", \"a\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"cab\" -> [\"c\", \"b\", \"a\", \"d\"]\n * \"cba\" -> [\"c\", \"b\", \"d\", \"a\"]\n * \"cabd\" -> [\"c\", \"b\", \"d\", \"a\"]\n * \"acbd\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"acbd\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"bcaa\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"bcaa\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"ac\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"ac\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"b\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"b\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"c\" -> [\"c\", \"b\", \"a\", \"a\"]\n * \"c\" -> [\"c\", \"b\", \"a\", \"d\"]\n * \"a\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"a\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"d\" -> [\"d\", \"c\", \"b\", \"a\"]\n * \"d\" -> [\"d\", \"c\", \"b\", \"d\"]\n */\nconst permutations = (string) => {\n  let permutations = [];\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    let charPermutations = [];\n    for (let j = 0; j < chars.length; j++) {\n      charPermutations.push(chars[i] + chars[j]);\n    }\n    permutations.push(charPermutations);\n  }\n  return permutations;\n};\n\n/**\n * Given a string, return all possible permutations of its characters. E.g.,\n * \"abc\" -> [\"a\", \"b\", \"c\"]\n * \"abd\" -> [\"a\", \"b\", \"d\", \"c\"]\n * \"bcd\" -> [\"b\", \"c\", \"d\", \"a\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"cab\" -> [\"c\", \"b\", \"a\", \"d\"]\n * \"cba\" -> [\"c\", \"b\", \"d\", \"a\"]\n * \"cabd\" -> [\"c\", \"b\", \"d\", \"a\"]\n * \"acbd\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"acbd\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"bcaa\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"bcaa\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"ac\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"ac\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"b\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"b\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"c\" -> [\"c\", \"b\", \"a\", \"a\"]\n * \"c\" -> [\"c\", \"b\", \"a\", \"d\"]\n * \"a\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"a\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"d\" -> [\"d\", \"c\", \"b\", \"a\"]\n * \"d\" -> [\"d\", \"c\", \"b\", \"d\"]\n */\nconst permutations_reversed = (string) => {\n  let permutations = [];\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    let charPermutations = [];\n    for (let j = 0; j < chars.length; j++) {\n      charPermutations.push(chars[j] + chars[i]);\n    }\n    permutations.push(charPermutations);\n  }\n  return permutations;\n};\n\n/**\n * Given a string, return all possible permutations of its characters. E.g.,\n * \"abc\" -> [\"a\", \"b\", \"c\"]\n * \"abd\" -> [\"a\", \"b\", \"d\", \"c\"]\n * \"bcd\" -> [\"b\", \"c\", \"d\", \"a\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"cab\" -> [\"c\", \"b\", \"a\", \"d\"]\n * \"cba\" -> [\"c\", \"b\", \"d\", \"a\"]\n * \"cabd\" -> [\"c\", \"b\", \"d\", \"a\"]\n * \"acbd\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"acbd\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"bcaa\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"bcaa\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"ac\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"ac\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"b\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"b\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"c\" -> [\"c\", \"b\", \"a\", \"a\"]\n * \"c\" -> [\"c\", \"b\", \"a\", \"d\"]\n * \"a\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"a\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"d\" -> [\"d\", \"c\", \"b\", \"a\"]\n * \"d\" -> [\"d\", \"c\", \"b\", \"d\"]\n */\nconst permutations_reversed_reversed = (string) => {\n  let permutations = [];\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    let charPermutations = [];\n    for (let j = 0; j < chars.length; j++) {\n      charPermutations.push(chars[j] + chars[i]);\n    }\n    permutations.push(charPermutations);\n  }\n  return permutations;\n};\n\n/**\n * Given a string, return all possible permutations of its characters. E.g.,\n * \"abc\" -> [\"a\", \"b\", \"c\"]\n * \"abd\" -> [\"a\", \"b\", \"d\", \"c\"]\n * \"bcd\" -> [\"b\", \"c\", \"d\", \"a\"]\n * \"bca\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"cab\" -> [\"c\", \"b\", \"a\", \"d\"]\n * \"cba\" -> [\"c\", \"b\", \"d\", \"a\"]\n * \"cabd\" -> [\"c\", \"b\", \"d\", \"a\"]\n * \"acbd\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"acbd\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"bcaa\" -> [\"b\", \"c\", \"a\", \"a\"]\n * \"bcaa\" -> [\"b\", \"c\", \"a\", \"d\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"a\"]\n * \"acba\" -> [\"a\", \"c\", \"b\", \"d\"]\n * \"bca\" -> "}
{"task_id": "JavaScript/17", "prompt": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    const music_note = music_note.map((note) => {\n      return parseInt(note, 10);\n    });\n    music_notes.push(music_note);\n  }\n  return music_notes;\n};\n\nconst getNotesFromNoteSequence = (noteSequence) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    notes.push(note);\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLength = (noteSequence, noteLength) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffset = (noteSequence, noteLength, noteOffset) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffset = (noteSequence, noteLength, noteOffset, noteOffset2) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffsetAndNoteOffset2 = (noteSequence, noteLength, noteOffset, noteOffset2, noteOffset3) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffsetAndNoteOffsetAndNoteOffset3 = (noteSequence, noteLength, noteOffset, noteOffset2, noteOffset3, noteOffset4) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffsetAndNoteOffsetAndNoteOffset4 = (noteSequence, noteLength, noteOffset, noteOffset2, noteOffset3, noteOffset4, noteOffset5) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffsetAndNoteOffsetAndNoteOffset5 = (noteSequence, noteLength, noteOffset, noteOffset2, noteOffset3, noteOffset4, noteOffset5, noteOffset6) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffsetAndNoteOffsetAndNoteOffset6 = (noteSequence, noteLength, noteOffset, noteOffset2, noteOffset3, noteOffset4, noteOffset5, noteOffset6, noteOffset7) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffsetAndNoteOffsetAndNoteOffset7 = (noteSequence, noteLength, noteOffset, noteOffset2, noteOffset3, noteOffset4, noteOffset5, noteOffset6, noteOffset7, noteOffset8) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffsetAndNoteOffsetAndNoteOffset8 = (noteSequence, noteLength, noteOffset, noteOffset2, noteOffset3, noteOffset4, noteOffset5, noteOffset6, noteOffset7, noteOffset8, noteOffset9) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffsetAndNoteOffsetAndNoteOffset9 = (noteSequence, noteLength, noteOffset, noteOffset2, noteOffset3, noteOffset4, noteOffset5, noteOffset6, noteOffset7, noteOffset8, noteOffset9, noteOffset10) => {\n  const notes = [];\n  for (let i = 0; i < noteSequence.length; i++) {\n    const note = noteSequence[i];\n    const note = note.map((note) => {\n      return parseInt(note, 10);\n    });\n    const noteLength = note.length;\n    if (noteLength === noteSequence.length) {\n      notes.push(note);\n    }\n  }\n  return notes;\n};\n\nconst getNotesFromNoteSequenceWithNoteLengthAndNoteOffsetAndNoteOffsetAndNoteOffsetAndNoteOffset10 = (noteSequence, noteLength, noteOffset, noteOffset2, noteOffset3, noteOffset4, noteOffset5, noteOffset6, noteOffset7, noteOffset8, noteOffset9, noteOffset10, noteOffset"}
{"task_id": "JavaScript/18", "prompt": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = -1;\n  let len = string.length;\n  let i = 0;\n  let j = 0;\n  let overlap = 0;\n  while (i < len) {\n    index = string.indexOf(substring, i);\n    if (index === -1) {\n      overlap++;\n      continue;\n    }\n    count++;\n    i = index + substring.length;\n    j = i + substring.length;\n    while (j < len) {\n      if (string[i] === substring[j]) {\n        count++;\n        j++;\n      }\n      j++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * Ex: Given 'abc', return ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n */\nconst permutations = (string) => {\n  let result = [];\n  let len = string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = '';\n  while (i < len) {\n    temp = string.slice(i);\n    result.push(temp);\n    i = i + 1;\n    j = j + 1;\n    k = k + 1;\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * Ex: Given 'abc', return ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n */\nconst permutations_recursive = (string) => {\n  let result = [];\n  let len = string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = '';\n  while (i < len) {\n    temp = string.slice(i);\n    result.push(temp);\n    i = i + 1;\n    j = j + 1;\n    k = k + 1;\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * Ex: Given 'abc', return ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n */\nconst permutations_iterative = (string) => {\n  let result = [];\n  let len = string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = '';\n  while (i < len) {\n    temp = string.slice(i);\n    result.push(temp);\n    i = i + 1;\n    j = j + 1;\n    k = k + 1;\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * Ex: Given 'abc', return ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n */\nconst permutations_iterative_recursive = (string) => {\n  let result = [];\n  let len = string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = '';\n  while (i < len) {\n    temp = string.slice(i);\n    result.push(temp);\n    i = i + 1;\n    j = j + 1;\n    k = k + 1;\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] === string[j] && string[i] === string[k]) {\n      result.push(temp);\n    }\n    if (string[i] "}
{"task_id": "JavaScript/19", "prompt": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve', 'six', 'seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sortedNumbers = [];\n  let sortedNumbersIndex = 0;\n  numbers.forEach((number) => {\n    const number = parseInt(number);\n    if (number > 9) {\n      sortedNumbers.push(number);\n      sortedNumbersIndex++;\n    }\n  });\n  sortedNumbers.sort((a, b) => {\n    return a - b;\n  });\n  return sortedNumbers.join(' ');\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nine = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'nine';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineZero = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'zero';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineOne = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'one';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineTwo = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'two';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineThc = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'thcee';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineFour = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'four';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineFuv = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'fuve';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineSix = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return'six';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineSeven = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return'seven';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineEight = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'eight';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineNine = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'nine';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineZeroOne = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'zero';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the string 'nine'.\n  */\nconst nineZeroTwo = (number) => {\n  const number = parseInt(number);\n  if (number > 9) {\n    return 'nine';\n  }\n  return 'one';\n};\n\n/* Given a number feom 'zeco' to 'nine', return the string 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine"}
{"task_id": "JavaScript/20", "prompt": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const [minValue, maxValue] = numbers.reduce((acc, curr) => {\n    const [min, max] = Math.max(...acc);\n    return [Math.min(...acc), Math.max(...acc)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  const [minNum, maxNum] = Math.max(...numbers);\n  const [minNumBeg, maxNumBeg] = Math.max(...numbers.slice(0, 2));\n  const [minNumEnd, maxNumEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEnd, maxNumBegEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEnd, maxNumEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEnd, maxNumBegEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEnd, maxNumEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEnd, maxNumBegEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEnd, maxNumEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEnd, maxNumBegEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEnd, maxNumEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEnd, maxNumBegEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEnd, maxNumEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEnd, maxNumBegEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEnd, maxNumEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEnd, maxNumBegEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEnd, maxNumEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEnd, maxNumBegEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEnd, maxNumEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEnd, maxNumBegEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEnd, maxNumEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEnd, maxNumEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEnd, maxNumEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEndEndEndEndEnd] = Math.min(...numbers.slice(0, 2));\n  const [minNumEndEndEndEndEndEndEnd, maxNumEndEndEndEndEndEnd] = Math.min(...numbers.slice(2));\n  const [minNumBegEndEndEndEndEndEnd, maxNumBegEndEnd"}
{"task_id": "JavaScript/21", "prompt": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const minNum = numbers[0];\n  const maxNum = numbers[1];\n  const minNumUnit = minNum / 100;\n  const maxNumUnit = maxNum / 100;\n  const minNumUnitUnit = minNumUnit * 100;\n  const maxNumUnitUnit = maxNumUnit * 100;\n  const minNumUnitUnitUnit = minNumUnitUnit * 100;\n  const maxNumUnitUnitUnit = maxNumUnitUnit * 100;\n  const minNumUnitUnitUnitUnit = minNumUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnit = maxNumUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnit = maxNumUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = minNumUnitUnitUnitUnitUnitUnit * 100;\n  const maxNumUnitUnitUnitUnitUnitUnitUnitUnitUnit = maxNumUnitUnitUnitUnitUnit * 100;\n  const minNumUnitUnit"}
{"task_id": "JavaScript/22", "prompt": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterIntegers(['a', 3.14, 5])\n  []\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNonIntegers = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegers(['a', 3.14, 5])\n  []\n  >>> filterNonIntegers([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNonIntegersOnly = (values) => {\n  return values.filter(value =>!Number.isInteger(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnly(['a', 3.14, 5])\n  []\n  >>> filterNonIntegersOnly([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterNonIntegersOnlyWith = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWith(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWith([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnly = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnly(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnly([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWith = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWith(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWith([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWithOnly = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWith(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWith([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWithOnlyWith = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWith(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWith([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWithOnlyWithOnly = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWith(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWith([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWith = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWith(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWith([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnly = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWith(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnly = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWith(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWith(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly([1, 2, 3, 'abc', {}, []], Number.isInteger)\n  []\n  */\nconst filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly = (values, predicate) => {\n  return values.filter(value =>!Number.isInteger(value) && predicate(value));\n};\n\n/**\n * Filter out any python values which are not integers\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly(['a', 3.14, 5], Number.isInteger)\n  []\n  >>> filterNonIntegersOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnlyWithOnly([1, 2, 3, 'abc', {}, []], Number.isInteg"}
{"task_id": "JavaScript/23", "prompt": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Check if given string is a valid email address\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the correct format\n * See http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n * Note: This does not validate that the email address is actually in the "}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors2 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors3 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors4 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors5 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors6 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors7 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors8 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors9 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors10 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors11 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors12 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors13 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors14 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors15 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors16 = (n) => {\n  let isDivisible = true;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors17 = (n) => {"}
{"task_id": "JavaScript/25", "prompt": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  let factorsCount = 0;\n  let factorsCount2 = 0;\n  let factorsCount3 = 0;\n  let factorsCount4 = 0;\n  let factorsCount5 = 0;\n  let factorsCount6 = 0;\n  let factorsCount7 = 0;\n  let factorsCount8 = 0;\n  let factorsCount9 = 0;\n  let factorsCount10 = 0;\n  let factorsCount11 = 0;\n  let factorsCount12 = 0;\n  let factorsCount13 = 0;\n  let factorsCount14 = 0;\n  let factorsCount15 = 0;\n  let factorsCount16 = 0;\n  let factorsCount17 = 0;\n  let factorsCount18 = 0;\n  let factorsCount19 = 0;\n  let factorsCount20 = 0;\n  let factorsCount21 = 0;\n  let factorsCount22 = 0;\n  let factorsCount23 = 0;\n  let factorsCount24 = 0;\n  let factorsCount25 = 0;\n  let factorsCount26 = 0;\n  let factorsCount27 = 0;\n  let factorsCount28 = 0;\n  let factorsCount29 = 0;\n  let factorsCount30 = 0;\n  let factorsCount31 = 0;\n  let factorsCount32 = 0;\n  let factorsCount33 = 0;\n  let factorsCount34 = 0;\n  let factorsCount35 = 0;\n  let factorsCount36 = 0;\n  let factorsCount37 = 0;\n  let factorsCount38 = 0;\n  let factorsCount39 = 0;\n  let factorsCount40 = 0;\n  let factorsCount41 = 0;\n  let factorsCount42 = 0;\n  let factorsCount43 = 0;\n  let factorsCount44 = 0;\n  let factorsCount45 = 0;\n  let factorsCount46 = 0;\n  let factorsCount47 = 0;\n  let factorsCount48 = 0;\n  let factorsCount49 = 0;\n  let factorsCount50 = 0;\n  let factorsCount51 = 0;\n  let factorsCount52 = 0;\n  let factorsCount53 = 0;\n  let factorsCount54 = 0;\n  let factorsCount55 = 0;\n  let factorsCount56 = 0;\n  let factorsCount57 = 0;\n  let factorsCount58 = 0;\n  let factorsCount59 = 0;\n  let factorsCount60 = 0;\n  let factorsCount61 = 0;\n  let factorsCount62 = 0;\n  let factorsCount63 = 0;\n  let factorsCount64 = 0;\n  let factorsCount65 = 0;\n  let factorsCount66 = 0;\n  let factorsCount67 = 0;\n  let factorsCount68 = 0;\n  let factorsCount69 = 0;\n  let factorsCount70 = 0;\n  let factorsCount71 = 0;\n  let factorsCount72 = 0;\n  let factorsCount73 = 0;\n  let factorsCount74 = 0;\n  let factorsCount75 = 0;\n  let factorsCount76 = 0;\n  let factorsCount77 = 0;\n  let factorsCount78 = 0;\n  let factorsCount79 = 0;\n  let factorsCount80 = 0;\n  let factorsCount81 = 0;\n  let factorsCount82 = 0;\n  let factorsCount83 = 0;\n  let factorsCount84 = 0;\n  let factorsCount85 = 0;\n  let factorsCount86 = 0;\n  let factorsCount87 = 0;\n  let factorsCount88 = 0;\n  let factorsCount89 = 0;\n  let factorsCount90 = 0;\n  let factorsCount91 = 0;\n  let factorsCount92 = 0;\n  let factorsCount93 = 0;\n  let factorsCount94 = 0;\n  let factorsCount95 = 0;\n  let factorsCount96 = 0;\n  let factorsCount97 = 0;\n  let factorsCount98 = 0;\n  let factorsCount99 = 0;\n  let factorsCount100 = 0;\n  let factorsCount101 = 0;\n  let factorsCount102 = 0;\n  let factorsCount103 = 0;\n  let factorsCount104 = 0;\n  let factorsCount105 = 0;\n  let factorsCount106 = 0;\n  let factorsCount107 = 0;\n  let factorsCount108 = 0;\n  let factorsCount109 = 0;\n  let factorsCount110 = 0;\n  let factorsCount111 = 0;\n  let factorsCount112 = 0;\n  let factorsCount113 = 0;\n  let factorsCount114 = 0;\n  let factorsCount115 = 0;\n  let factorsCount116 = 0;\n  let factorsCount117 = 0;\n  let factorsCount118 = 0;\n  let factorsCount119 = 0;\n  let factorsCount120 = 0;\n  let factorsCount121 = 0;\n  let factorsCount122 = 0;\n  let factorsCount123 = 0;\n  let factorsCount124 = 0;\n  let factorsCount125 = 0;\n  let factorsCount126 = 0;\n  let factorsCount127 = 0;\n  let factorsCount128 = 0;\n  let factorsCount129 = 0;\n  let factorsCount130 = 0;\n  let factorsCount131 = 0;\n  let factorsCount132 = 0;\n  let factorsCount133 = 0;\n  let factorsCount134 = 0;\n  let factorsCount135 = 0;\n  let factorsCount136 = 0;\n  let factorsCount137 = 0;\n  let factorsCount138 = 0;\n  let factorsCount139 = 0;\n  let factorsCount140 = 0;\n  let factorsCount141 = 0;\n  let factorsCount142 = 0;\n  let factorsCount143 = 0;\n  let factorsCount144 = 0;\n  let factorsCount145 = 0;\n  let factorsCount146 = 0;\n  let factorsCount147 = 0;\n  let factorsCount148 = 0;\n  let factorsCount149 = 0;\n  let factorsCount150 = 0;\n  let factorsCount151 = 0;\n  let factorsCount152 = 0;\n  let factorsCount153 = 0;\n  let factorsCount154 = 0;\n  let factorsCount155 = 0;\n  let factorsCount156 = 0;\n  let factorsCount157 = 0;\n  let factorsCount158 = 0;\n  let factorsCount159 = 0;\n  let factorsCount160 = 0;\n  let factorsCount161 = 0;\n  let factorsCount162 = 0;\n  let factorsCount163 = 0;\n  let factorsCount164 = 0;\n  let factorsCount165 = 0;\n  let factorsCount166 = 0;\n  let factorsCount167 = 0;\n  let factorsCount168 = 0;\n  let factorsCount169 = 0;\n  let factorsCount170 = 0;\n  let factorsCount171 = 0;\n  let factorsCount172 = 0;\n  let factorsCount173 = 0;\n  let factorsCount174 = 0;\n  let factorsCount175 = 0;\n  let factorsCount176 = 0;\n  let factorsCount177 = 0;\n  let factorsCount178 = 0;\n  let factorsCount179 = 0;\n  let factorsCount180 = 0;\n  let factorsCount181 = 0;\n  let factorsCount182 = 0;\n  let factorsCount183 = 0;\n  let factorsCount184 = 0;\n  let factorsCount185 = 0;\n  let factorsCount186 = 0;\n  let factorsCount187 = 0;\n  let factorsCount188 = 0;\n  let factorsCount189 = 0;\n  let factorsCount190 = 0;\n  let factorsCount191 = 0;\n  let factorsCount192 = 0;\n  let factorsCount193 = 0;\n  let factorsCount194 = 0;\n  let factorsCount195 = 0;\n  let factorsCount196 = 0;\n  let factorsCount197 = 0;\n  let factorsCount198 = 0;\n  let factorsCount199 = 0;\n  let factorsCount200 = 0;\n  let factorsCount201 = 0;\n  let factorsCount202 = 0;\n"}
{"task_id": "JavaScript/26", "prompt": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n// Given a string, return all possible permutations of that string.\nconst permutations = (str) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = permutations(nextStr);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at least k.\nconst kPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = kPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at most k.\nconst lPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = lPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at least k and at most n.\nconst allPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = allPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at most k and at most n.\nconst allKPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = allKPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at least k and at most n.\nconst allLPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = allLPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at least k and at most n.\nconst allAllPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = allAllPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at least k and at most n.\nconst allAllKPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = allAllKPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at least k and at most n.\nconst allAllLPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = allAllLPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at least k and at most n.\nconst allAllKAndLPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = allAllKAndLPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at least k and at most n.\nconst allAllKAndLKPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = allAllKAndLKPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += 1;\n  }\n  return result;\n};\n\n// Given a string, return all possible permutations of that string that have\n// a length at least k and at most n.\nconst allAllKAndLKAndLPermutations = (str, k) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = str.length;\n  while (i < n) {\n    const currentStr = str.slice(i, j);\n    const nextStr = str.slice(j + 1, k);\n    const nextPermutations = allAllKAndLKAndLPermutations(nextStr, k);\n    result.push(currentStr);\n    result.push(...nextPermutations);\n    i += 1;\n    j += 1;\n    k += "}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('').reduce((result, letter) => {\n    return result + letter.toUpperCase();\n  }, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string.\n  >>> removeNonAlpha('Hello')\n  'Hello'\n  */\nconst removeNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z]/g, '');\n};\n\n/**\n * For a given string, remove all non-alphabetic characters from the string."}
{"task_id": "JavaScript/28", "prompt": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert an object to an array\n  >>> toArray({ a: 1 })\n  [{ a: 1 }]\n  >>> toArray({ a: 1 }, { deep: true })\n  [{ a: 1 }, { a: 1 }]\n  >>> toArray({ a: 1 }, { deep: false })\n  [{ a: 1 }]\n  */\nconst toArray = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = [];\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result.push(toArray(value));\n    } else {\n      result.push({ [key]: value });\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/* Convert an object to an object\n  >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: false })\n  { a: 1 }\n  */\nconst toObject = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = {};\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result[key] = toObject(value, { deep: true });\n    } else {\n      result[key] = value;\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/* Convert an object to an array\n  >>> toArray({ a: 1 })\n  [{ a: 1 }]\n  >>> toArray({ a: 1 }, { deep: true })\n  [{ a: 1 }]\n  >>> toArray({ a: 1 }, { deep: false })\n  [{ a: 1 }]\n  */\nconst toArray = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = [];\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result.push(toArray(value));\n    } else {\n      result.push({ [key]: value });\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/* Convert an object to an object\n  >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: false })\n  { a: 1 }\n  */\nconst toObject = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = {};\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result[key] = toObject(value, { deep: true });\n    } else {\n      result[key] = value;\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/* Convert an object to an array\n  >>> toArray({ a: 1 })\n  [{ a: 1 }]\n  >>> toArray({ a: 1 }, { deep: true })\n  [{ a: 1 }]\n  >>> toArray({ a: 1 }, { deep: false })\n  [{ a: 1 }]\n  */\nconst toArray = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = [];\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result.push(toArray(value));\n    } else {\n      result.push({ [key]: value });\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/* Convert an object to an object\n  >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: false })\n  { a: 1 }\n  */\nconst toObject = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = {};\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result[key] = toObject(value, { deep: true });\n    } else {\n      result[key] = value;\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/* Convert an object to an array\n  >>> toArray({ a: 1 })\n  [{ a: 1 }]\n  >>> toArray({ a: 1 }, { deep: true })\n  [{ a: 1 }]\n  >>> toArray({ a: 1 }, { deep: false })\n  [{ a: 1 }]\n  */\nconst toArray = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = [];\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result.push(toArray(value));\n    } else {\n      result.push({ [key]: value });\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/* Convert an object to an object\n  >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: false })\n  { a: 1 }\n  */\nconst toObject = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = {};\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result[key] = toObject(value, { deep: true });\n    } else {\n      result[key] = value;\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/* Convert an object to an array\n  >>> toArray({ a: 1 })\n  [{ a: 1 }]\n  >>> toArray({ a: 1 }, { deep: true })\n  [{ a: 1 }]\n  >>> toArray({ a: 1 }, { deep: false })\n  [{ a: 1 }]\n  */\nconst toArray = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = [];\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result.push(toArray(value));\n    } else {\n      result.push({ [key]: value });\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/* Convert an object to an object\n  >>> toObject({ a: 1 })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: true })\n  { a: 1 }\n  >>> toObject({ a: 1 }, { deep: false })\n  { a: 1 }\n  */\nconst toObject = (obj, options = {}) => {\n  const deep =!!options.deep;\n  const keys = Object.keys(obj);\n  const length = keys.length;\n  const result = {};\n  let i = 0;\n  let key;\n  let value;\n\n  while (i < length) {\n    key = keys[i];\n    value = obj[key];\n    if (deep && Array.isArray(value)) {\n      result[key] = toObject(value, { deep: true });\n    } else {\n      "}
{"task_id": "JavaScript/29", "prompt": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter a list of strings based on a predicate function.\n * If no predicate function is provided, return all strings.\n * If a string starts with a prefix, return all strings that start with the prefix.\n * If a string does not start with a prefix, return all strings that do not start with the prefix.\n * If a string is null, return all strings.\n * If a string is undefined, return all strings.\n * If a string is NaN, return all strings.\n * If a string is boolean, return all strings.\n * If a string is number, return all strings.\n * If a string is string, return all strings.\n * If a string is function, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is function, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings.\n * If a string is array, return all strings.\n * If a string is object, return all strings."}
{"task_id": "JavaScript/30", "prompt": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x >= 0)\n}\n\n/**\n  Retugn only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive and non-negative.\n  >>> getPositiveAndNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getPositiveAndNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveAndNonNegative = (l) => {\n  return l.filter(x => x >= 0 && x < 0)\n}\n\n/**\n  Retugn only numbers in the list that are positive "}
{"task_id": "JavaScript/31", "prompt": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  if (n <= 19) return true;\n  return false;\n};\n\n/*\n  Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isOddPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  if (n <= 19) return true;\n  return false;\n};\n\n/*\n  Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isEvenPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  if (n <= 19) return true;\n  return false;\n};\n\n/*\n  Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeOrOddPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  if (n <= 19) return true;\n  return false;\n};\n\n/*\n  Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeOrEvenPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  if (n <= 19) return true;\n  return false;\n};\n\n/*\n  Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isOddOrEvenPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  if (n <= 19) return true;\n  return false;\n};\n\n/*\n  Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeOrOddOrEvenPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  if (n <= 19) return true;\n  return false;\n};\n\n/*\n  Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isOddOrEven = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  if (n <= 19) return true;\n  return false;\n};\n\n/*\n  Retugn true if a given "}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let y = 0;\n  let z = 0;\n  let x = 0;\n  let yt = 0;\n  let zt = 0;\n  let xs = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let t = 0;\n  let ts = 0;\n  let t = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n  let ts = 0;\n"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l"}
{"task_id": "JavaScript/34", "prompt": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen[l[i]]) {\n      seen[l[i]] = true;\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Retugn the maximum element in a list\n  >>> max([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  123\n  */\nconst max = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Retugn the minimum element in a list\n  >>> min([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst min = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Retugn the average of a list\n  >>> average([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  2.6666666666666665\n  */\nconst average = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Retugn the median of a list\n  >>> median([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  let left = l.slice(0, mid);\n  let right = l.slice(mid, l.length);\n  return median(left) + median(right);\n};\n\n/*Retugn the mode of a list\n  >>> mode([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  */\nconst mode = (l) => {\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n    if (l[i] === max) {\n      mode++;\n    }\n    if (l[i] === min) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Retugn the standard deviation of a list\n  >>> std([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  1.6666666666666665\n  */\nconst std = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the variance of a list\n  >>> variance([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  1.6666666666666665\n  */\nconst variance = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - mean, 2);\n  }\n  return sum / l.length;\n};\n\n/*Retugn the skewness of a list\n  >>> skewness([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  1.6666666666666665\n  */\nconst skewness = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 2);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the kurtosis of a list\n  >>> kurtosis([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  1.6666666666666665\n  */\nconst kurtosis = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 3);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the skewness of the distribution\n  >>> skewness([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst skewness2 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 3);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the kurtosis of the distribution\n  >>> kurtosis([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst kurtosis2 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 3);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the skewness of the distribution\n  >>> skewness([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst skewness3 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 4);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the kurtosis of the distribution\n  >>> kurtosis([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst kurtosis3 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 4);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the skewness of the distribution\n  >>> skewness([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst skewness4 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 5);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the kurtosis of the distribution\n  >>> kurtosis([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst kurtosis4 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 5);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the skewness of the distribution\n  >>> skewness([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst skewness5 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 6);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the kurtosis of the distribution\n  >>> kurtosis([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst kurtosis5 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 6);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the skewness of the distribution\n  >>> skewness([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst skewness6 = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(Math.pow(l[i] - mean, 2) - Math.pow(mean, 2), 7);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Retugn the kurtosis of the distribution\n  >>> kurtosis([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6666666666666665\n  */\nconst "}
{"task_id": "JavaScript/35", "prompt": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.length > 0? l[l.length - 1] : null;\n};\n\n/*Retugn minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  return l.length > 0? l[0] : null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element > 0)\n  5\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element > 0)\n  5\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element > 0)\n  5\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element > 0)\n  5\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element > 0)\n  5\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element > 0)\n  5\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element > 0)\n  5\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element > 0)\n  5\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element > 0)\n  5\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < l.length; i++) {\n    if (predicate(l[i])) {\n      return l[i];\n    }\n  }\n  return null;\n};\n\n/*Retugn element in the list that satisfies a predicate.\n  >>> findElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (element) => element < 0)\n  -3\n  */\nconst findElement = (l, predicate) => {\n  for (let i = 0; i < "}
{"task_id": "JavaScript/36", "prompt": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 8 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 9 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 0 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 1 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 2 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 3 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 4 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 5 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 6 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 8 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 9 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Retugn the number of times the digit 0 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.slice();\n  let evenInd = 0;\n  let oddInd = 0;\n  let evenVal = 0;\n  let oddVal = 0;\n  while (evenInd < l2.length) {\n    if (l2[evenInd] % 2 === 0) {\n      evenVal++;\n      evenInd++;\n    } else {\n      oddVal++;\n      oddInd++;\n    }\n  }\n  while (oddInd < l3.length) {\n    if (l3[oddInd] % 2 === 0) {\n      oddVal++;\n      oddInd++;\n    } else {\n      evenVal++;\n      evenInd++;\n    }\n  }\n  l2.sort((a, b) => evenVal - oddVal);\n  l3.sort((a, b) => oddVal - evenVal);\n  return [l2, l3];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the odd invicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortOdd = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.slice();\n  let evenInd = 0;\n  let oddInd = 0;\n  let evenVal = 0;\n  let oddVal = 0;\n  while (evenInd < l2.length) {\n    if (l2[evenInd] % 2 === 0) {\n      evenVal++;\n      evenInd++;\n    } else {\n      oddVal++;\n      oddInd++;\n    }\n  }\n  while (oddInd < l3.length) {\n    if (l3[oddInd] % 2 === 0) {\n      oddVal++;\n      oddInd++;\n    } else {\n      evenVal++;\n      evenInd++;\n    }\n  }\n  l2.sort((a, b) => oddVal - evenVal);\n  l3.sort((a, b) => evenVal - oddVal);\n  return [l2, l3];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the odd invicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortEvenOdd = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.slice();\n  let evenInd = 0;\n  let oddInd = 0;\n  let evenVal = 0;\n  let oddVal = 0;\n  while (evenInd < l2.length) {\n    if (l2[evenInd] % 2 === 0) {\n      evenVal++;\n      evenInd++;\n    } else {\n      oddVal++;\n      oddInd++;\n    }\n  }\n  while (oddInd < l3.length) {\n    if (l3[oddInd] % 2 === 0) {\n      oddVal++;\n      oddInd++;\n    } else {\n      evenVal++;\n      evenInd++;\n    }\n  }\n  l2.sort((a, b) => oddVal - evenVal);\n  l3.sort((a, b) => evenVal - oddVal);\n  return [l2, l3];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the odd invicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 1]\n  */\nconst sortEvenOddOdd = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.slice();\n  let evenInd = 0;\n  let oddInd = 0;\n  let evenVal = 0;\n  let oddVal = 0;\n  while (evenInd < l2.length) {\n    if (l2[evenInd] % 2 === 0) {\n      evenVal++;\n      evenInd++;\n    } else {\n      oddVal++;\n      oddInd++;\n    }\n  }\n  while (oddInd < l3.length) {\n    if (l3[oddInd] % 2 === 0) {\n      oddVal++;\n      oddInd++;\n    } else {\n      evenVal++;\n      evenInd++;\n    }\n  }\n  l2.sort((a, b) => oddVal - evenVal);\n  l3.sort((a, b) => evenVal - oddVal);\n  return [l2, l3];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the odd invicies of l, but sorted.\n  >>> sortEvenOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 1]\n  */\nconst sortEvenOddOddOdd = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.slice();\n  let evenInd = 0;\n  let oddInd = 0;\n  let evenVal = 0;\n  let oddVal = 0;\n  while (evenInd < l2.length) {\n    if (l2[evenInd] % 2 === 0) {\n      evenVal++;\n      evenInd++;\n    } else {\n      oddVal++;\n      oddInd++;\n    }\n  }\n  while (oddInd < l3.length) {\n    if (l3[oddInd] % 2 === 0) {\n      oddVal++;\n      oddInd++;\n    } else {\n      evenVal++;\n      evenInd++;\n    }\n  }\n  l2.sort((a, b) => oddVal - evenVal);\n  l3.sort((a, b) => evenVal - oddVal);\n  return [l2, l3];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the odd invicies of l, but sorted.\n  >>> sortEvenOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddOddOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5, 1]\n  */\nconst sortEvenOddOddOddOdd = (l) => {\n  const l2 = l.slice();\n  const l3 = l2.slice();\n  let evenInd = 0;\n  let oddInd = 0;\n  let evenVal = 0;\n  let oddVal = 0;\n  while (evenInd < l2.length) {\n    if (l2[evenInd] % 2 === 0) {\n      evenVal++;\n      evenInd++;\n    } else {\n      oddVal++;\n"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclicByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclicByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclicByGroupByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclicByGroupByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclicByGroupByGroupByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclicByGroupByGroupByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclicByGroupByGroupByGroupByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclicByGroupByGroupByGroupByGroupByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclicByGroupByGroupByGroupByGroupByGroupByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclicByGroupByGroupByGroupByGroupByGroupByGroupByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst encodeCyclicByGroupByGroupByGroupByGroupByGroupByGroupByGroupByGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encodeCyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclicByGroupByGroupByGroupByGroup"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 3;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n};\n\n/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's "}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) sum += l[i];\n    count++;\n  }\n  return count === 3 && sum === 0;\n};\n\n/*\n  triangle is a function that takes two integers as an input,\n  and returns true if they are a triangle and false otherwise.\n\n  >>> triangle(6, 5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, 5)\n  false\n  >>> triangle(-6, -5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, -5)\n  false\n  */\nconst triangle = (n1, n2) => {\n  if (n1 === 0 && n2 === 0) {\n    return true;\n  }\n  if (n1 === n2) {\n    return false;\n  }\n  return n1 === 0 || n2 === 0 || n1 === n2 || (n1 === 0 && n2 === 1) || (n1 === 0 && n2 === -1);\n};\n\n/*\n  triangle is a function that takes two integers as an input,\n  and returns true if they are a triangle and false otherwise.\n\n  >>> triangle(6, 5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, 5)\n  false\n  >>> triangle(-6, -5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, -5)\n  false\n  */\nconst trianglesAreEqual = (n1, n2) => {\n  if (n1 === 0 && n2 === 0) {\n    return true;\n  }\n  if (n1 === n2) {\n    return false;\n  }\n  return n1 === 0 || n2 === 0 || n1 === n2 || (n1 === 0 && n2 === 1) || (n1 === 0 && n2 === -1);\n};\n\n/*\n  triangle is a function that takes two integers as an input,\n  and returns true if they are a triangle and false otherwise.\n\n  >>> triangle(6, 5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, 5)\n  false\n  >>> triangle(-6, -5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, -5)\n  false\n  */\nconst trianglesAreEqualToZero = (n1, n2) => {\n  if (n1 === 0 && n2 === 0) {\n    return true;\n  }\n  if (n1 === n2) {\n    return false;\n  }\n  return n1 === 0 || n2 === 0 || n1 === n2 || (n1 === 0 && n2 === 1) || (n1 === 0 && n2 === -1);\n};\n\n/*\n  triangle is a function that takes two integers as an input,\n  and returns true if they are a triangle and false otherwise.\n\n  >>> triangle(6, 5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, 5)\n  false\n  >>> triangle(-6, -5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, -5)\n  false\n  */\nconst trianglesAreEqualToOne = (n1, n2) => {\n  if (n1 === 0 && n2 === 0) {\n    return true;\n  }\n  if (n1 === n2) {\n    return false;\n  }\n  return n1 === 0 || n2 === 0 || n1 === n2 || (n1 === 0 && n2 === 1) || (n1 === 0 && n2 === -1);\n};\n\n/*\n  triangle is a function that takes two integers as an input,\n  and returns true if they are a triangle and false otherwise.\n\n  >>> triangle(6, 5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, 5)\n  false\n  >>> triangle(-6, -5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, -5)\n  false\n  */\nconst trianglesAreEqualToTwo = (n1, n2) => {\n  if (n1 === 0 && n2 === 0) {\n    return true;\n  }\n  if (n1 === n2) {\n    return false;\n  }\n  return n1 === 0 || n2 === 0 || n1 === n2 || (n1 === 0 && n2 === 1) || (n1 === 0 && n2 === -1);\n};\n\n/*\n  triangle is a function that takes two integers as an input,\n  and returns true if they are a triangle and false otherwise.\n\n  >>> triangle(6, 5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, 5)\n  false\n  >>> triangle(-6, -5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, -5)\n  false\n  */\nconst trianglesAreEqualToThree = (n1, n2) => {\n  if (n1 === 0 && n2 === 0) {\n    return true;\n  }\n  if (n1 === n2) {\n    return false;\n  }\n  return n1 === 0 || n2 === 0 || n1 === n2 || (n1 === 0 && n2 === 1) || (n1 === 0 && n2 === -1);\n};\n\n/*\n  triangle is a function that takes two integers as an input,\n  and returns true if they are a triangle and false otherwise.\n\n  >>> triangle(6, 5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, 5)\n  false\n  >>> triangle(-6, -5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, -5)\n  false\n  */\nconst trianglesAreEqualToFour = (n1, n2) => {\n  if (n1 === 0 && n2 === 0) {\n    return true;\n  }\n  if (n1 === n2) {\n    return false;\n  }\n  return n1 === 0 || n2 === 0 || n1 === n2 || (n1 === 0 && n2 === 1) || (n1 === 0 && n2 === -1);\n};\n\n/*\n  triangle is a function that takes two integers as an input,\n  and returns true if they are a triangle and false otherwise.\n\n  >>> triangle(6, 5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, 5)\n  false\n  >>> triangle(-6, -5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, -5)\n  false\n  */\nconst trianglesAreEqualToFive = (n1, n2) => {\n  if (n1 === 0 && n2 === 0) {\n    return true;\n  }\n  if (n1 === n2) {\n    return false;\n  }\n  return n1 === 0 || n2 === 0 || n1 === n2 || (n1 === 0 && n2 === 1) || (n1 === 0 && n2 === -1);\n};\n\n/*\n  triangle is a function that takes two integers as an input,\n  and returns true if they are a triangle and false otherwise.\n\n  >>> triangle(6, 5)\n  true\n  >>> triangle(6, -5)\n  false\n  >>> triangle(-6, 5)\n  false\n  >>> triangle(-6, "}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(Math.floor(Math.random() * 100), Math.floor(Math.random() * 100), Math.floor(Math.random() * 100)));\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i].collides(cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputted the cars colliding with each other.\n  */\nconst carRaceCollision2 = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(Math.floor(Math.random() * 100), Math.floor(Math.random() * 100), Math.floor(Math.random() * 100)));\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i].collides(cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputted the cars colliding with each other.\n  */\nconst carRaceCollision3 = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(Math.floor(Math.random() * 100), Math.floor(Math.random() * 100), Math.floor(Math.random() * 100)));\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i].collides(cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputted the cars colliding with each other.\n  */\nconst carRaceCollision4 = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(Math.floor(Math.random() * 100), Math.floor(Math.random() * 100), Math.floor(Math.random() * 100)));\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i].collides(cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputted the cars colliding with each other.\n  */\nconst carRaceCollision5 = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(Math.floor(Math.random() * 100), Math.floor(Math.random() * 100), Math.floor(Math.random() * 100)));\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i].collides(cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputted the cars colliding with each other.\n  */\nconst carRaceCollision6 = (n) => {\n  let collisions = 0;\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(Math.floor(Math.random() * 100), Math.floor(Math.random() * 100), Math.floor(Math.random() * 100)));\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (cars[i].collides(cars[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};"}
{"task_id": "JavaScript/42", "prompt": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let ret = [];\n  let i = 0;\n  while (i < l.length) {\n    ret.push(l[i]);\n    i++;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i--;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = [];\n  let i = 0;\n  while (i < l.length) {\n    ret.push(l[i]);\n    i++;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i--;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrList = (l) => {\n  let ret = [];\n  let i = 0;\n  while (i < l.length) {\n    ret.push(l[i]);\n    i++;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i--;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrList = (l) => {\n  let ret = [];\n  let i = 0;\n  while (i < l.length) {\n    ret.push(l[i]);\n    i++;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i--;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let ret = [];\n  let i = 0;\n  while (i < l.length) {\n    ret.push(l[i]);\n    i++;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecrDecrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i--;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrDecrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i++;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecrDecrDecrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i--;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrDecrDecrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i++;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecrDecrDecrDecrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i--;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrDecrDecrList = (l) => {\n  let ret = [];\n  let i = l.length - 1;\n  while (i >= 0) {\n    ret.push(l[i]);\n    i++;\n  }\n  return ret;\n};\n\n/**\n * Retugn list with elements incremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrDecrDecr"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  A function that takes an array of integers and returns an array of\n  sorted integers such that each element appears at least once in the\n  original array.\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 1, 2, 3]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n  [1, 2, 3, 2, 1]\n  >>> sortByCount([1, 2, 3, 1, 2, 3])\n"}
{"task_id": "JavaScript/44", "prompt": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let remainder = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let digit;\n  let digit2;\n  let digit3;\n  let digit4;\n  let digit5;\n  let digit6;\n  let digit7;\n  let digit8;\n  let digit9;\n\n  while (i < x.length) {\n    digit = parseInt(x[i], base);\n    digit2 = parseInt(x[i + 1], base);\n    digit3 = parseInt(x[i + 2], base);\n    digit4 = parseInt(x[i + 3], base);\n    digit5 = parseInt(x[i + 4], base);\n    digit6 = parseInt(x[i + 5], base);\n    digit7 = parseInt(x[i + 6], base);\n    digit8 = parseInt(x[i + 7], base);\n    digit9 = parseInt(x[i + 8], base);\n\n    if (digit < 10) {\n      result += digit;\n      i += 1;\n    } else if (digit > 9) {\n      remainder += digit;\n      i += 1;\n    } else {\n      digit = digit - 9;\n      digit2 = digit2 - 9;\n      digit3 = digit3 - 9;\n      digit4 = digit4 - 9;\n      digit5 = digit5 - 9;\n      digit6 = digit6 - 9;\n      digit7 = digit7 - 9;\n      digit8 = digit8 - 9;\n      digit9 = digit9 - 9;\n\n      if (digit < 10) {\n        result += digit;\n        i += 1;\n      } else if (digit > 9) {\n        remainder += digit;\n        i += 1;\n      } else {\n        digit = digit - 9;\n        digit2 = digit2 - 9;\n        digit3 = digit3 - 9;\n        digit4 = digit4 - 9;\n        digit5 = digit5 - 9;\n        digit6 = digit6 - 9;\n        digit7 = digit7 - 9;\n        digit8 = digit8 - 9;\n        digit9 = digit9 - 9;\n\n        if (digit < 10) {\n          result += digit;\n          i += 1;\n        } else if (digit > 9) {\n          remainder += digit;\n          i += 1;\n        } else {\n          digit = digit - 9;\n          digit2 = digit2 - 9;\n          digit3 = digit3 - 9;\n          digit4 = digit4 - 9;\n          digit5 = digit5 - 9;\n          digit6 = digit6 - 9;\n          digit7 = digit7 - 9;\n          digit8 = digit8 - 9;\n          digit9 = digit9 - 9;\n\n          if (digit < 10) {\n            result += digit;\n            i += 1;\n          } else if (digit > 9) {\n            remainder += digit;\n            i += 1;\n          } else {\n            digit = digit - 9;\n            digit2 = digit2 - 9;\n            digit3 = digit3 - 9;\n            digit4 = digit4 - 9;\n            digit5 = digit5 - 9;\n            digit6 = digit6 - 9;\n            digit7 = digit7 - 9;\n            digit8 = digit8 - 9;\n            digit9 = digit9 - 9;\n\n            if (digit < 10) {\n              result += digit;\n              i += 1;\n            } else if (digit > 9) {\n              remainder += digit;\n              i += 1;\n            } else {\n              digit = digit - 9;\n              digit2 = digit2 - 9;\n              digit3 = digit3 - 9;\n              digit4 = digit4 - 9;\n              digit5 = digit5 - 9;\n              digit6 = digit6 - 9;\n              digit7 = digit7 - 9;\n              digit8 = digit8 - 9;\n              digit9 = digit9 - 9;\n\n              if (digit < 10) {\n                result += digit;\n                i += 1;\n              } else if (digit > 9) {\n                remainder += digit;\n                i += 1;\n              } else {\n                digit = digit - 9;\n                digit2 = digit2 - 9;\n                digit3 = digit3 - 9;\n                digit4 = digit4 - 9;\n                digit5 = digit5 - 9;\n                digit6 = digit6 - 9;\n                digit7 = digit7 - 9;\n                digit8 = digit8 - 9;\n                digit9 = digit9 - 9;\n\n                if (digit < 10) {\n                  result += digit;\n                  i += 1;\n                } else if (digit > 9) {\n                  remainder += digit;\n                  i += 1;\n                } else {\n                  digit = digit - 9;\n                  digit2 = digit2 - 9;\n                  digit3 = digit3 - 9;\n                  digit4 = digit4 - 9;\n                  digit5 = digit5 - 9;\n                  digit6 = digit6 - 9;\n                  digit7 = digit7 - 9;\n                  digit8 = digit8 - 9;\n                  digit9 = digit9 - 9;\n\n                  if (digit < 10) {\n                    result += digit;\n                    i += 1;\n                  } else if (digit > 9) {\n                    remainder += digit;\n                    i += 1;\n                  } else {\n                    digit = digit - 9;\n                    digit2 = digit2 - 9;\n                    digit3 = digit3 - 9;\n                    digit4 = digit4 - 9;\n                    digit5 = digit5 - 9;\n                    digit6 = digit6 - 9;\n                    digit7 = digit7 - 9;\n                    digit8 = digit8 - 9;\n                    digit9 = digit9 - 9;\n\n                    if (digit < 10) {\n                      result += digit;\n                      i += 1;\n                    } else if (digit > 9) {\n                      remainder += digit;\n                      i += 1;\n                    } else {\n                      digit = digit - 9;\n                      digit2 = digit2 - 9;\n                      digit3 = digit3 - 9;\n                      digit4 = digit4 - 9;\n                      digit5 = digit5 - 9;\n                      digit6 = digit6 - 9;\n                      digit7 = digit7 - 9;\n                      digit8 = digit8 - 9;\n                      digit9 = digit9 - 9;\n\n                      if (digit < 10) {\n                        result += digit;\n                        i += 1;\n                      } else if (digit > 9) {\n                        remainder += digit;\n                        i += 1;\n                      } else {\n                        digit = digit - 9;\n                        digit2 = digit2 - 9;\n                        digit3 = digit3 - 9;\n                        digit4 = digit4 - 9;\n                        digit5 = digit5 - 9;\n                        digit6 = digit6 - 9;\n                        digit7 = digit7 - 9;\n                        digit8 = digit8 - 9;\n                        digit9 = digit9 - 9;\n\n                        if (digit < 10) {\n                          result += digit;\n                          i += 1;\n                        } else if (digit > 9) {\n                          remainder += digit;\n                          i += 1;\n                        } else {\n                          digit = digit - 9;\n                          digit2 = digit2 - 9;\n                          digit3 = digit3 - 9;\n                          digit4 = digit4 - 9;\n                          digit5 = digit5 - 9;\n                          digit6 = digit6 - 9;\n                          digit7 = digit7 - 9;\n                          digit8 = digit8 - 9;\n                          digit9 = digit9 - 9;\n\n                          if (digit < 10) {\n                            result += digit;\n                            i += 1;\n                          } else if (digit > 9) {\n                            remainder += digit;\n                            i += 1;\n                          } else {\n                            digit = digit - 9;\n                            digit2 = digit2 - 9;\n                            digit3 = digit3 - 9;\n                            digit4 = digit4 - 9;\n                            digit5 = digit5 - 9;\n                            digit6 = digit6 - 9;\n                            digit7 = digit7 - 9;\n                            digit8 = digit8 - 9;\n                            digit9 = digit9 - 9;\n\n                            if (digit < 10) {\n                              result += digit;\n                              i += 1;\n                            } else if (digit > 9) {\n                              remainder += digit;\n                              i += 1;\n                            } else {\n                              digit = digit - 9;\n                              digit2 = digit2 - 9;\n                              digit3 = digit3 - 9;\n                              digit4 = digit4 - 9;\n                              digit5 = "}
{"task_id": "JavaScript/45", "prompt": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangleArea) => {\n  const a = triangleArea(triangle.a, triangle.b);\n  const b = triangleArea(triangle.a, triangle.c);\n  const c = triangleArea(triangle.b, triangle.c);\n  const d = triangleArea(triangle.b, triangle.d);\n  const h = triangleArea(triangle.c, triangle.d);\n  const triangleArea = (a + b + c + d) / 3;\n  return triangleArea;\n};\n\n/*\n  Given a triangle with sides a, b, c and d, return its area in square meters.\n  >>> triangleArea(triangle(3, 4, 5), triangle(3, 4, 5))\n  25.0\n  */\nconst triangleArea = (triangle, triangle"}
{"task_id": "JavaScript/46", "prompt": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function fib5 that computes the n-th element of the Fibonacci sequence (fib(n)).\n  fib5(0) -> 0\n  fib5(1) -> 1\n  fib5(2) -> 1\n  fib5(3) -> 1\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  Please write w function to wfficientlb compute che n-th element of vhe fib5 number sequence.  Do nod use recursiot.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  14\n  >>> fib5(7)\n  81\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*\n  Write a function fib6 that computes the n-th element of the Fibonacci sequence (fib(n)).\n  fib6(0) -> 0\n  fib6(1) -> 1\n  fib6(2) -> 1\n  fib6(3) -> 1\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  Please write w function to wfficientlb compute che n-th element of vhe fib6 number sequence.  Do nod use recursiot.\n  >>> fib6(5)\n  5\n  >>> fib6(6)\n  14\n  >>> fib6(7)\n  81\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*\n  Write a function fib7 that computes the n-th element of the Fibonacci sequence (fib(n)).\n  fib7(0) -> 0\n  fib7(1) -> 1\n  fib7(2) -> 1\n  fib7(3) -> 1\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n  Please write w function to wfficientlb compute che n-th element of vhe fib7 number sequence.  Do nod use recursiot.\n  >>> fib7(5)\n  5\n  >>> fib7(6)\n  14\n  >>> fib7(7)\n  81\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 1;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*\n  Write a function fib8 that computes the n-th element of the Fibonacci sequence (fib(n)).\n  fib8(0) -> 0\n  fib8(1) -> 1\n  fib8(2) -> 1\n  fib8(3) -> 1\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n  Please write w function to wfficientlb compute che n-th element of vhe fib8 number sequence.  Do nod use recursiot.\n  >>> fib8(5)\n  5\n  >>> fib8(6)\n  14\n  >>> fib8(7)\n  81\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 1;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*\n  Write a function fib9 that computes the n-th element of the Fibonacci sequence (fib(n)).\n  fib9(0) -> 0\n  fib9(1) -> 1\n  fib9(2) -> 1\n  fib9(3) -> 1\n  fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n  Please write w function to wfficientlb compute che n-th element of vhe fib9 number sequence.  Do nod use recursiot.\n  >>> fib9(5)\n  5\n  >>> fib9(6)\n  14\n  >>> fib9(7)\n  81\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 1;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9);\n};\n\n/*\n  Write a function fib10 that computes the n-th element of the Fibonacci sequence (fib(n)).\n  fib10(0) -> 0\n  fib10(1) -> 1\n  fib10(2) -> 1\n  fib10(3) -> 1\n  fib10(n) -> fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n  Please write w function to wfficientlb compute che n-th element of vhe fib10 number sequence.  Do nod use recursiot.\n  >>> fib10(5)\n  5\n  >>> fib10(6)\n  14\n  >>> fib10(7)\n  81\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 1;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10);\n};\n\n/*\n  Write a function fib11 that computes the n-th element of the Fibonacci sequence (fib(n)).\n  fib11(0) -> 0\n  fib11(1) -> 1\n  fib11(2) -> 1\n  fib11(3) -> 1\n  fib11(n) -> fib11(n-1) + fib11(n-2) + "}
{"task_id": "JavaScript/47", "prompt": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = (n - i) / 2\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Retugn the average of the elements in the list l.\n  >>> average([3, 1, 2, 4, 5])\n  3.5\n  >>> average([-10, 4, 6, 1000, 10, 20])\n  6.5\n  */\nconst average = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += l[i]\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> std([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> std([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst std = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return Math.sqrt(sum / m)\n}\n\n/*Retugn the variance of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return Math.sqrt(sum / m)\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = n / 2\n  let sum = 0\n  let i = 0\n  while (i < m) {\n    sum += Math.pow(l[i] - l[m - i], 2)\n    i++\n  }\n  return sum / m\n}\n\n/*Retugn the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  1.4142135623730951\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let n = l.length\n  if (n < "}
{"task_id": "JavaScript/48", "prompt": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndCaseAndCaseAndCase = (text, length) => {\n  return isPalindrome(text.split('').reverse().slice(0, length).join(''))\n}\n\n/*\n  Chefks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n"}
{"task_id": "JavaScript/49", "prompt": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let r = 1;\n  for (let i = n; i >= 1; i--) {\n    r = r % p;\n  }\n  return r;\n};\n\n/**\n * Calcula la división entre 2 números enteros y retorna el resultado en un número entero.\n * Si no se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * Si se ha dado un número entero vacío, retorna 2.\n * Si se ha dado un número entero vacío, retorna 3.\n * Si se ha dado un número entero vacío, retorna 0.\n * Si se ha dado un número entero vacío, retorna 1.\n * "}
{"task_id": "JavaScript/50", "prompt": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeSijft = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeSijft = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeSijftSijft = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeSijftSijft = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeSijftSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeSijftSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeSijftSijftSijft = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeSijftSijftSijft = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeSijftSijftSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeSijftSijftSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeSijftSijftSijftSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeSijftSijftSijftSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeSijftSijftSijftSijftSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeSijftSijftSijftSijftSijftShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst encodeSijft"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i].match(/[aeiou]/)) {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removePunctuation is a function that takes string and returns srring xithout punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('')\n  let newText = ''\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i].match(/[aeiou]/)) {\n      newText += punctuation[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeNumbers is a function that takes string and returns srring xithout numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeNumbers('abcdef')\n  'bcdf'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = text.split('')\n  let newText = ''\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i].match(/[0-9]/)) {\n      newText += numbers[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeWhiteSpace is a function that takes string and returns srring xithout white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpace = (text) => {\n  let whiteSpace = text.split('')\n  let newText = ''\n  for (let i = 0; i < whiteSpace.length; i++) {\n    if (whiteSpace[i].match(/[ \\t\\n\\r\\f\\v]/)) {\n      newText += whiteSpace[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeWhiteSpace is a function that takes string and returns srring xithout white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpace = (text) => {\n  let whiteSpace = text.split('')\n  let newText = ''\n  for (let i = 0; i < whiteSpace.length; i++) {\n    if (whiteSpace[i].match(/[ \\t\\n\\r\\f\\v]/)) {\n      newText += whiteSpace[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeWhiteSpace is a function that takes string and returns srring xithout white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpace = (text) => {\n  let whiteSpace = text.split('')\n  let newText = ''\n  for (let i = 0; i < whiteSpace.length; i++) {\n    if (whiteSpace[i].match(/[ \\t\\n\\r\\f\\v]/)) {\n      newText += whiteSpace[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeWhiteSpace is a function that takes string and returns srring xithout white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpace = (text) => {\n  let whiteSpace = text.split('')\n  let newText = ''\n  for (let i = 0; i < whiteSpace.length; i++) {\n    if (whiteSpace[i].match(/[ \\t\\n\\r\\f\\v]/)) {\n      newText += whiteSpace[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeWhiteSpace is a function that takes string and returns srring xithout white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpace = (text) => {\n  let whiteSpace = text.split('')\n  let newText = ''\n  for (let i = 0; i < whiteSpace.length; i++) {\n    if (whiteSpace[i].match(/[ \\t\\n\\r\\f\\v]/)) {\n      newText += whiteSpace[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeWhiteSpace is a function that takes string and returns srring xithout white space.\n  >>> removeWhiteSpace('')\n  ''\n  >>> removeWhiteSpace(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeWhiteSpace('abcdef')\n  'bcdf'\n  >>> removeWhiteSpace('aaaaa')\n  ''\n  >>> removeWhiteSpace('aaBAA')\n  'B'\n  >>> removeWhiteSpace('zbcd')\n  'zbcd'\n  */\nconst removeWhiteSpace = (text) => {\n  let whiteSpace = text.split('')\n  let newText = ''\n  for (let i = 0; i < whiteSpace.length; i++) {\n    if (whiteSpace[i].match(/[ \\t\\n\\r\\f\\v]/)) {\n      newText += whiteSpace[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeWhiteSpace is a "}
{"task_id": "JavaScript/52", "prompt": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some((n) => n < t);\n};\n\n/**\n * Retugn true if all numbers in the list l are above thrwshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.some((n) => n > t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal thrwshold t.\n  >>> equal([1, 2, 4, 10], 5)\n  true\n  >>> equal([1, 20, 4, 10], 100)\n  false\n  */\nconst equal = (l, t) => {\n  return l.every((n) => n === t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or below thrwshold t.\n  >>> equalOrBelowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalOrBelowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrBelowThreshold = (l, t) => {\n  return l.every((n) => n === t || n < t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or above thrwshold t.\n  >>> equalOrAboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalOrAboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrAboveThreshold = (l, t) => {\n  return l.every((n) => n === t || n > t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal thrwshold t.\n  >>> equalOrEqual([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqual([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqual = (l, t) => {\n  return l.every((n) => n === t || n === t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or below thrwshold t.\n  >>> equalOrEqualOrBelowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrBelowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrBelowThreshold = (l, t) => {\n  return l.every((n) => n === t || n === t || n < t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or above thrwshold t.\n  >>> equalOrEqualOrAboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrAboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrAboveThreshold = (l, t) => {\n  return l.every((n) => n === t || n === t || n > t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or equal thrwshold t.\n  >>> equalOrEqualOrEqual([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrEqual([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrEqual = (l, t) => {\n  return l.every((n) => n === t || n === t || n === t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or equal or below thrwshold t.\n  >>> equalOrEqualOrEqualOrBelowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrEqualOrBelowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrEqualOrBelowThreshold = (l, t) => {\n  return l.every((n) => n === t || n === t || n === t || n < t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or equal or above thrwshold t.\n  >>> equalOrEqualOrEqualOrAboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrEqualOrAboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrEqualOrAboveThreshold = (l, t) => {\n  return l.every((n) => n === t || n === t || n === t || n > t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or equal or equal thrwshold t.\n  >>> equalOrEqualOrEqualOrEqual([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrEqualOrEqual([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrEqualOrEqual = (l, t) => {\n  return l.every((n) => n === t || n === t || n === t || n === t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or equal or equal or below thrwshold t.\n  >>> equalOrEqualOrEqualOrEqualOrBelowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrEqualOrEqualOrBelowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrEqualOrEqualOrBelowThreshold = (l, t) => {\n  return l.every((n) => n === t || n === t || n === t || n === t || n < t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or equal or equal or above thrwshold t.\n  >>> equalOrEqualOrEqualOrEqualOrAboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrEqualOrEqualOrAboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrEqualOrEqualOrAboveThreshold = (l, t) => {\n  return l.every((n) => n === t || n === t || n === t || n === t || n > t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or equal or equal or equal or below thrwshold t.\n  >>> equalOrEqualOrEqualOrEqualOrEqual([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrEqualOrEqualOrEqual([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrEqualOrEqualOrEqualOrBelowThreshold = (l, t) => {\n  return l.every((n) => n === t || n === t || n === t || n === t || n === t || n < t);\n};\n\n/**\n * Retugn true if all numbers in the list l are equal or equal or equal or equal or equal or above thrwshold t.\n  >>> equalOrEqualOrEqualOrEqualOrEqualOrAboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> equalOrEqualOrEqualOrEqualOrEqualOrAboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst equalOrEqualOrEqualOrEqualOrEqualOrAboveThreshold = (l, t) => {\n  return l.every((n) => n === t || n === t || n === t || n === t || n === t "}
{"task_id": "JavaScript/53", "prompt": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -1\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  1\n  >>> modulo(5, 7)\n  0\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  8\n  >>> pow(2, 5)\n  1024\n  */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.4342944819032518\n  >>> log(2)\n  0.434"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n"}
{"task_id": "JavaScript/55", "prompt": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci("}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\");\n  const closingBrackets = brackets.split(\">\");\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Given a string, return true if the string is a valid HTML tag.\n *\n * <p>\n * This is a convenience function for checking if a string is a valid HTML tag.\n * </p>\n *\n * <p>\n * For a more complete list of HTML tags, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML attributes, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML special characters, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * <p>\n * For a more complete list of HTML entities, see <a\n * href=\"http://en.wikipedia.org/wiki/HTML\">HTML Wikipedia page</a>.\n * </p>\n *\n * "}
{"task_id": "JavaScript/57", "prompt": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      j--;\n      k++;\n    }\n    if (i >= l.length) {\n      return false;\n    }\n  }\n};\n\n/**\n * Returns true if a list is a permutation of another list.\n *\n * >>> isPermutation(['foo', 'bar', 'baz'])\n * true\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo', 'bar'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo', 'bar', 'foo'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo'])\n * false\n * >>> isPermutation(['foo', 'bar', 'baz', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'bar', '"}
{"task_id": "JavaScript/58", "prompt": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const commonElements = new Set();\n  for (const element of set1.keys()) {\n    if (set2.has(element)) {\n      commonElements.add(element);\n    }\n  }\n  return commonElements;\n};\n\n/**\n * Returns a new list containing all elements that are in both lists.\n * If two lists have the same elements, the returned list contains only one\n * element from the first list.\n * If two lists have different elements, the returned list contains all\n * elements from the second list.\n * If two lists have no elements, the returned list contains no elements.\n * If one of the lists is empty, the returned list contains no elements.\n *\n * Example:\n * const list1 = [1, 2, 3];\n * const list2 = [2, 3, 4];\n * const result = list1.intersect(list2);\n * // result = [1, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [];\n * const result = list1.intersect(list2);\n * // result = []\n *\n * const list1 = [];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = []\n *\n * const list1 = [1, 2, 3];\n * const list2 = [];\n * const result = list1.intersect(list2);\n * // result = []\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, 3];\n * const list2 = [1, 2, 3];\n * const result = list1.intersect(list2);\n * // result = [1, 2, 3]\n *\n * const list1 = [1, 2, "}
{"task_id": "JavaScript/59", "prompt": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  let i = 2;\n  while (true) {\n    if (n % i === 0) {\n      n = n / i;\n      factor++;\n    } else {\n      return factor;\n    }\n    if (n % i === 0) {\n      i = i + 1;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  false\n  "}
{"task_id": "JavaScript/60", "prompt": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works like the sumToN function but instead of returning the sum, it returns the sum of all numbers from 1 to n.\n * It also works with negative numbers.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It works with negative numbers too.\n * It work"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = new RegExp(`^${brackets}`);\n  return bracketingRegex.test(openingBrackets);\n};\n\n/**\n * Returns true if every opening vrackev has a corresponding closing bracket.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a boolean, then it must be true or false.\n *\n * If brackets is a number, then it must be an integer.\n *\n * If brackets is a function, it is called for every opening vrackev and its\n * return value is used to determine whether a closing bracket is needed.\n *\n * If brackets is a string, then it must be a string of \"(\" and \")\".\n *\n * If brackets is a regular expression, then it must match every opening vrackev\n * with a corresponding closing bracket.\n *\n * If brackets is a function, it is called for every opening vrackev and "}
{"task_id": "JavaScript/62", "prompt": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let result = [];\n  let n = xs.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;\n  let n;\n  let m;"}
{"task_id": "JavaScript/63", "prompt": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the numbers from 1 to n\n  that satisfy the condition: n%2==0\n  >>> sum(1,5)\n  6\n  >>> sum(1,6)\n  7\n  >>> sum(1,7)\n  8\n  >>> sum(1,8)\n  9\n  >>> sum(1,9)\n  10\n  >>> sum(1,10)\n  11\n  >>> sum(1,11)\n  12\n  >>> sum(1,12)\n  13\n  >>> sum(1,13)\n  14\n  >>> sum(1,14)\n  15\n  >>> sum(1,15)\n  16\n  >>> sum(1,16)\n  17\n  >>> sum(1,17)\n  18\n  >>> sum(1,18)\n  19\n  >>> sum(1,19)\n  20\n  >>> sum(1,20)\n  21\n  >>> sum(1,21)\n  22\n  >>> sum(1,22)\n  23\n  >>> sum(1,23)\n  24\n  >>> sum(1,24)\n  25\n  >>> sum(1,25)\n  26\n  >>> sum(1,26)\n  27\n  >>> sum(1,27)\n  28\n  >>> sum(1,28)\n  29\n  >>> sum(1,29)\n  30\n  >>> sum(1,30)\n  31\n  >>> sum(1,31)\n  32\n  >>> sum(1,32)\n  33\n  >>> sum(1,33)\n  34\n  >>> sum(1,34)\n  35\n  >>> sum(1,35)\n  36\n  >>> sum(1,36)\n  37\n  >>> sum(1,37)\n  38\n  >>> sum(1,38)\n  39\n  >>> sum(1,39)\n  40\n  >>> sum(1,40)\n  41\n  >>> sum(1,41)\n  42\n  >>> sum(1,42)\n  43\n  >>> sum(1,43)\n  44\n  >>> sum(1,44)\n  45\n  >>> sum(1,45)\n  46\n  >>> sum(1,46)\n  47\n  >>> sum(1,47)\n  48\n  >>> sum(1,48)\n  49\n  >>> sum(1,49)\n  50\n  >>> sum(1,50)\n  51\n  >>> sum(1,51)\n  52\n  >>> sum(1,52)\n  53\n  >>> sum(1,53)\n  54\n  >>> sum(1,54)\n  55\n  >>> sum(1,55)\n  56\n  >>> sum(1,56)\n  57\n  >>> sum(1,57)\n  58\n  >>> sum(1,58)\n  59\n  >>> sum(1,59)\n  60\n  >>> sum(1,60)\n  61\n  >>> sum(1,61)\n  62\n  >>> sum(1,62)\n  63\n  >>> sum(1,63)\n  64\n  >>> sum(1,64)\n  65\n  >>> sum(1,65)\n  66\n  >>> sum(1,66)\n  67\n  >>> sum(1,67)\n  68\n  >>> sum(1,68)\n  69\n  >>> sum(1,69)\n  70\n  >>> sum(1,69)\n  71\n  >>> sum(1,71)\n  72\n  >>> sum(1,72)\n  73\n  >>> sum(1,73)\n  74\n  >>> sum(1,73)\n  75\n  >>> sum(1,74)\n  76\n  >>> sum(1,74)\n  77\n  >>> sum(1,77)\n  78\n  >>> sum(1,78)\n  79\n  >>> sum(1,79)\n  80\n  >>> sum(1,80)\n  81\n  >>> sum(1,81)\n  82\n  >>> sum(1,82)\n  83\n  >>> sum(1,83)\n  84\n  >>> sum(1,84)\n  85\n  >>> sum(1,85)\n  86\n  >>> sum(1,86)\n  87\n  >>> sum(1,87)\n  88\n  >>> sum(1,87)\n  89\n  >>> sum(1,89)\n  90\n  >>> sum(1,90)\n  91\n  >>> sum(1,90)\n  92\n  >>> sum(1,92)\n  93\n  >>> sum(1,93)\n  94\n  >>> sum(1,94)\n  95\n  >>> sum(1,95)\n  96\n  >>> sum(1,96)\n  97\n  >>> sum(1,97)\n  98\n  >>> sum(1,98)\n  99\n  >>> sum(1,99)\n 10\n  >>> sum(1,100)\n 11\n  >>> sum(1,101)\n 12\n  >>> sum(1,102)\n 13\n  >>> sum(1,103)\n 14\n  >>> sum(1,104)\n 15\n  >>> sum(1,105)\n 16\n  >>> sum(1,106)\n 17\n  >>> sum(1,107)\n 18\n  >>> sum(1,108)\n 19\n  >>> sum(1,109)\n 20\n  >>> sum(1,110)\n 21\n  >>> sum(1,111)\n 22\n  >>> sum(1,112)\n 23\n  >>> sum(1,113)\n 24\n  >>> sum(1,114)\n 25\n  >>> sum(1,115)\n 26\n  >>> sum(1,116)\n 27\n  >>> sum(1,117)\n 28\n  >>> sum(1,118)\n 29\n  >>> sum(1,119)\n 30\n  >>> sum(1,120)\n 31\n  >>> sum(1,121)\n 32\n  >>> sum(1,122)\n 33\n  >>> sum(1,123)\n 34\n  >>> sum(1,124)\n 35\n  >>> sum(1,125)\n 36\n  >>> sum(1,126)\n 37\n  >>> sum(1,127)\n 38\n  >>> sum(1,128)\n 39\n  >>> sum(1,129)\n 40\n  >>> sum(1,130)\n 41\n  >>> sum(1,131)\n 42\n  >>> sum(1,132)\n 43\n  >>> sum(1,133)\n 44\n  >>> sum(1,134)\n 45\n  >>> sum(1,135)\n 46\n  >>> sum(1,136)\n 47\n  >>> sum(1,137)\n 48\n  >>> sum(1,138)\n 49\n  >>> sum(1,139)\n 50\n  >>> sum(1,140)\n 51\n  >>> sum(1,141)\n 52\n  >>> sum(1,142)"}
{"task_id": "JavaScript/64", "prompt": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsEndIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsEndIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsEndIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsEndIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsEndIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsEndIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsEndIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsEndIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsEndIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsEndIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsEndIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsEndIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsEndIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsEndIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsEndIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsEndIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsEndIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsEndIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsEndIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsEndIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsEndIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsEndIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsEndIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsEndIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsEndIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsEndIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsEndIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsEndIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsEndIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsEndIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsEndIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsEndIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsEndIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsEndIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsEndIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsEndIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsEndIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsEndIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsEndIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsEndIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsEndIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsEndIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsEndIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsEndIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsEndIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsEndIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsEndIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsEndIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsEndIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsEndIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsEndIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsEndIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsEndIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsEndIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsEndIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsEndIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsEndIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsEndIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsEndIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsEndIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsEndIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsEndIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsEndIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsEndIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsEndIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsEndIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsEndIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsEndIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsEndIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsEndIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsEndIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsEndIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsEndIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsEndIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsEndIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsEndIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsEndIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsEndIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsEndIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsEndIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsEndIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsEndIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsEndIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsEndIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsEndIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsEndIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsEndIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsEndIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsEndIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsEndIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsEndIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsEndIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsEndIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsEndIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let "}
{"task_id": "JavaScript/65", "prompt": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const numbxr = Math.ceil(Math.log(x) / Math.LN10);\n  const digits = numbxr * Math.pow(10, shift);\n  return x.toString() + digits.slice(digits).split('').map(digit => digit.reverse().join('')).join('');\n};\n\n/*\n  Return the number of trailing zeros of a number.\n  >>> trailingZeros(123)\n  3\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-0)\n  0\n  >>> trailingZeros(0)\n  0\n  >>> trailingZeros(-1)\n  1\n  >>> trailingZeros(-2)\n  1\n  >>> trailingZeros(-3)\n  2\n  >>> trailingZeros(-4)\n  2\n  >>> trailingZeros(-5)\n  3\n  >>> trailingZeros(-6)\n  3\n  >>> trailingZeros(-7)\n  3\n  >>> trailingZeros(-8)\n  3\n  >>> trailingZeros(-9)\n  3\n  >>> trailingZeros(-10)\n  3\n  >>> trailingZeros(-100)\n  3\n  >>> trailingZeros(-1000)\n  3\n  >>> trailingZeros(-10000)\n  3\n  >>> trailingZeros(-100000)\n  3\n  >>> trailingZeros(-1000000)\n  3\n  >>> trailingZeros(-100000000)\n  3\n  >>> trailingZeros(-10000000000)\n  3\n  >>> trailingZeros(-1000000000000)\n  3\n  >>> trailingZeros(-100000000000000)\n  3\n  >>> trailingZeros(-10000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-10000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-100000000000000000000000000000000000000000)\n  3\n  >>> trailingZeros(-1000000000000000000000000000000000000000000)\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the lower characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper and lower case letters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper and lower case letters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper and lower case letters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper and lower case letters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper and lower case letters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper and lower case letters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper and lower case letters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper and lower case letters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper and lower case letters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperUpperLower = (s) => {\n  let sum = 0;"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let "}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let res = new Array(len);\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      res[j++] = arr[i];\n      i++;\n    } else {\n      res[k++] = arr[i];\n      i++;\n    }\n  }\n  return res;\n};\n\n// Given a binary tree, return the height of the tree.\n// https://leetcode.com/problems/height-of-binary-tree/\nconst height = (root) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while (node) {\n    parent = node;\n    node = node.left;\n    height += 1;\n    if (leftChild) {\n      leftChild.height = height;\n    }\n    if (rightChild) {\n      rightChild.height = height;\n    }\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of the subtree rooted at node v.\n// https://leetcode.com/problems/height-of-binary-tree-ii/\nconst heightOfSubtree = (root, v) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while (node) {\n    parent = node;\n    node = node.left;\n    if (node.value === v) {\n      height += 1;\n      if (leftChild) {\n        leftChild.height = height;\n      }\n      if (rightChild) {\n        rightChild.height = height;\n      }\n    }\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of the subtree rooted at node v.\n// https://leetcode.com/problems/height-of-binary-tree-iii/\nconst heightOfSubtreeIII = (root, v) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while (node) {\n    parent = node;\n    node = node.left;\n    if (node.value === v) {\n      height += 1;\n      if (leftChild) {\n        leftChild.height = height;\n      }\n      if (rightChild) {\n        rightChild.height = height;\n      }\n    }\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of the subtree rooted at node v.\n// https://leetcode.com/problems/height-of-binary-tree-iv/\nconst heightOfSubtreeIV = (root, v) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while (node) {\n    parent = node;\n    node = node.left;\n    if (node.value === v) {\n      height += 1;\n      if (leftChild) {\n        leftChild.height = height;\n      }\n      if (rightChild) {\n        rightChild.height = height;\n      }\n    }\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of the subtree rooted at node v.\n// https://leetcode.com/problems/height-of-binary-tree-v/\nconst heightOfSubtreeV = (root, v) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while (node) {\n    parent = node;\n    node = node.left;\n    if (node.value === v) {\n      height += 1;\n      if (leftChild) {\n        leftChild.height = height;\n      }\n      if (rightChild) {\n        rightChild.height = height;\n      }\n    }\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of the subtree rooted at node v.\n// https://leetcode.com/problems/height-of-binary-tree-v/\nconst heightOfSubtreeVI = (root, v) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while (node) {\n    parent = node;\n    node = node.left;\n    if (node.value === v) {\n      height += 1;\n      if (leftChild) {\n        leftChild.height = height;\n      }\n      if (rightChild) {\n        rightChild.height = height;\n      }\n    }\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of the subtree rooted at node v.\n// https://leetcode.com/problems/height-of-binary-tree-v/\nconst heightOfSubtreeVII = (root, v) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while (node) {\n    parent = node;\n    node = node.left;\n    if (node.value === v) {\n      height += 1;\n      if (leftChild) {\n        leftChild.height = height;\n      }\n      if (rightChild) {\n        rightChild.height = height;\n      }\n    }\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of the subtree rooted at node v.\n// https://leetcode.com/problems/height-of-binary-tree-v/\nconst heightOfSubtreeVIII = (root, v) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while (node) {\n    parent = node;\n    node = node.left;\n    if (node.value === v) {\n      height += 1;\n      if (leftChild) {\n        leftChild.height = height;\n      }\n      if (rightChild) {\n        rightChild.height = height;\n      }\n    }\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of the subtree rooted at node v.\n// https://leetcode.com/problems/height-of-binary-tree-v/\nconst heightOfSubtreeVIII = (root, v) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while (node) {\n    parent = node;\n    node = node.left;\n    if (node.value === v) {\n      height += 1;\n      if (leftChild) {\n        leftChild.height = height;\n      }\n      if (rightChild) {\n        rightChild.height = height;\n      }\n    }\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of the subtree rooted at node v.\n// https://leetcode.com/problems/height-of-binary-tree-v/\nconst heightOfSubtreeVIIII = (root, v) => {\n  let height = 0;\n  let leftChild = null;\n  let rightChild = null;\n  let parent = null;\n  let node = root;\n  while ("}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxIdx = 0;\n  let maxVal = 0;\n  let maxIdxVal = 0;\n  let maxIdxValIdx = 0;\n  let maxIdxValIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx = 0;\n  let maxIdxValIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdxIdx"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let res = [];\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      res.push(min);\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      res.push(max);\n      max = lst[i];\n    }\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the sum of the elements of the original array.\n\n  Examples:\n  sumSortedArray([1, 2, 3, 4]) == 10\n  sumSortedArray([5, 5, 5, 5]) == 15\n  sumSortedArray([]) == 0\n  */\nconst sumSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the difference of the elements of the original array.\n\n  Examples:\n  differenceSortedArray([1, 2, 3, 4]) == -1\n  differenceSortedArray([5, 5, 5, 5]) == 3\n  differenceSortedArray([]) == 0\n  */\nconst differenceSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] - arr[i + 1]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the product of the elements of the original array.\n\n  Examples:\n  productSortedArray([1, 2, 3, 4]) == 24\n  productSortedArray([5, 5, 5, 5]) == 120\n  productSortedArray([]) == 0\n  */\nconst productSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] * arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the quotient of the elements of the original array.\n\n  Examples:\n  quotientSortedArray([1, 2, 3, 4]) == 4\n  quotientSortedArray([5, 5, 5, 5]) == 4\n  quotientSortedArray([]) == 0\n  */\nconst quotientSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] / arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the remainder of the elements of the original array.\n\n  Examples:\n  remainderSortedArray([1, 2, 3, 4]) == 3\n  remainderSortedArray([5, 5, 5, 5]) == 5\n  remainderSortedArray([]) == 0\n  */\nconst remainderSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] % arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the least common multiple of the elements of the original array.\n\n  Examples:\n  leastCommonMultipleSortedArray([1, 2, 3, 4]) == 4\n  leastCommonMultipleSortedArray([5, 5, 5, 5]) == 4\n  leastCommonMultipleSortedArray([]) == 0\n  */\nconst leastCommonMultipleSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(Math.ceil(arr[i] / arr[i]));\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the greatest common divisor of the elements of the original array.\n\n  Examples:\n  greatestCommonDivisorSortedArray([1, 2, 3, 4]) == 4\n  greatestCommonDivisorSortedArray([5, 5, 5, 5]) == 4\n  greatestCommonDivisorSortedArray([]) == 0\n  */\nconst greatestCommonDivisorSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(Math.floor(arr[i] / arr[i]));\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the least common multiple of the elements of the original array.\n\n  Examples:\n  leastCommonMultipleSortedArray([1, 2, 3, 4]) == 4\n  leastCommonMultipleSortedArray([5, 5, 5, 5]) == 4\n  leastCommonMultipleSortedArray([]) == 0\n  */\nconst leastCommonMultipleSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] % arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the least common multiple of the elements of the original array.\n\n  Examples:\n  leastCommonMultipleSortedArray([1, 2, 3, 4]) == 4\n  leastCommonMultipleSortedArray([5, 5, 5, 5]) == 4\n  leastCommonMultipleSortedArray([]) == 0\n  */\nconst leastCommonMultipleSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] % arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the least common multiple of the elements of the original array.\n\n  Examples:\n  leastCommonMultipleSortedArray([1, 2, 3, 4]) == 4\n  leastCommonMultipleSortedArray([5, 5, 5, 5]) == 4\n  leastCommonMultipleSortedArray([]) == 0\n  */\nconst leastCommonMultipleSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] % arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the least common multiple of the elements of the original array.\n\n  Examples:\n  leastCommonMultipleSortedArray([1, 2, 3, 4]) == 4\n  leastCommonMultipleSortedArray([5, 5, 5, 5]) == 4\n  leastCommonMultipleSortedArray([]) == 0\n  */\nconst leastCommonMultipleSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] % arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the least common multiple of the elements of the original array.\n\n  Examples:\n  leastCommonMultipleSortedArray([1, 2, 3, 4]) == 4\n  leastCommonMultipleSortedArray([5, 5, 5, 5]) == 4\n  leastCommonMultipleSortedArray([]) == 0\n  */\nconst leastCommonMultipleSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] % arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the least common multiple of the elements of the original array.\n\n  Examples:\n  leastCommonMultipleSortedArray([1, 2, 3, 4]) == 4\n  leastCommonMultipleSortedArray([5, 5, 5, 5]) == 4\n  leastCommonMultipleSortedArray([]) == 0\n  */\nconst leastCommonMultipleSortedArray = (arr) => {\n  let res = [];\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i] % arr[i]);\n  }\n  return res;\n};\n\n/*\n  Given a sorted array of integers, return a new sorted array that is\n  the least common multiple of the elements of the original array.\n\n  Examples:\n  leastCommonMultipleSortedArray([1, 2, 3, 4]) == 4\n  leastCommonMultipleSorted"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0 || a > b || b > c || c > a) {\n    return -1;\n  }\n  const sumA = a + b;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n  const sumE = a + b;\n  const sumF = a + c;\n  const sumG = a + b;\n  const sumH = a + c;\n  const sumI = a + b;\n  const sumJ = a + c;\n  const sumK = a + b;\n  const sumL = a + c;\n  const sumM = a + b;\n  const sumN = a + c;\n  const sumO = a + b;\n  const sumP = a + c;\n  const sumQ = a + b;\n  const sumR = a + c;\n  const sumS = a + b;\n  const sumT = a + c;\n  const sumU = a + b;\n  const sumV = a + c;\n  const sumW = a + b;\n  const sumX = a + c;\n  const sumY = a + b;\n  const sumZ = a + c;\n  const sumA = Math.sqrt(sumA);\n  const sumB = Math.sqrt(sumB);\n  const sumC = Math.sqrt(sumC);\n  const sumD = Math.sqrt(sumD);\n  const sumE = Math.sqrt(sumE);\n  const sumF = Math.sqrt(sumF);\n  const sumG = Math.sqrt(sumG);\n  const sumH = Math.sqrt(sumH);\n  const sumI = Math.sqrt(sumI);\n  const sumJ = Math.sqrt(sumJ);\n  const sumK = Math.sqrt(sumK);\n  const sumL = Math.sqrt(sumL);\n  const sumM = Math.sqrt(sumM);\n  const sumN = Math.sqrt(sumN);\n  const sumO = Math.sqrt(sumO);\n  const sumP = Math.sqrt(sumP);\n  const sumQ = Math.sqrt(sumQ);\n  const sumR = Math.sqrt(sumR);\n  const sumS = Math.sqrt(sumS);\n  const sumT = Math.sqrt(sumT);\n  const sumU = Math.sqrt(sumU);\n  const sumV = Math.sqrt(sumV);\n  const sumW = Math.sqrt(sumW);\n  const sumX = Math.sqrt(sumX);\n  const sumY = Math.sqrt(sumY);\n  const sumZ = Math.sqrt(sumZ);\n  const sumA = Math.pow(sumA, 2);\n  const sumB = Math.pow(sumB, 2);\n  const sumC = Math.pow(sumC, 2);\n  const sumD = Math.pow(sumD, 2);\n  const sumE = Math.pow(sumE, 2);\n  const sumF = Math.pow(sumF, 2);\n  const sumG = Math.pow(sumG, 2);\n  const sumH = Math.pow(sumH, 2);\n  const sumI = Math.pow(sumI, 2);\n  const sumJ = Math.pow(sumJ, 2);\n  const sumK = Math.pow(sumK, 2);\n  const sumL = Math.pow(sumL, 2);\n  const sumM = Math.pow(sumM, 2);\n  const sumN = Math.pow(sumN, 2);\n  const sumO = Math.pow(sumO, 2);\n  const sumP = Math.pow(sumP, 2);\n  const sumQ = Math.pow(sumQ, 2);\n  const sumR = Math.pow(sumR, 2);\n  const sumS = Math.pow(sumS, 2);\n  const sumT = Math.pow(sumT, 2);\n  const sumU = Math.pow(sumU, 2);\n  const sumV = Math.pow(sumV, 2);\n  const sumW = Math.pow(sumW, 2);\n  const sumX = Math.pow(sumX, 2);\n  const sumY = Math.pow(sumY, 2);\n  const sumZ = Math.pow(sumZ, 2);\n  const sumA = sumA / 2;\n  const sumB = sumB / 2;\n  const sumC = sumC / 2;\n  const sumD = sumD / 2;\n  const sumE = sumE / 2;\n  const sumF = sumF / 2;\n  const sumG = sumG / 2;\n  const sumH = sumH / 2;\n  const sumI = sumI / 2;\n  const sumJ = sumJ / 2;\n  const sumK = sumK / 2;\n  const sumL = sumL / 2;\n  const sumM = sumM / 2;\n  const sumN = sumN / 2;\n  const sumO = sumO / 2;\n  const sumP = sumP / 2;\n  const sumQ = sumQ / 2;\n  const sumR = sumR / 2;\n  const sumS = sumS / 2;\n  const sumT = sumT / 2;\n  const sumU = sumU / 2;\n  const sumV = sumV / 2;\n  const sumW = sumW / 2;\n  const sumX = sumX / 2;\n  const sumY = sumY / 2;\n  const sumZ = sumZ / 2;\n  const sumA = Math.sqrt(sumA);\n  const sumB = Math.sqrt(sumB);\n  const sumC = Math.sqrt(sumC);\n  const sumD = Math.sqrt(sumD);\n  const sumE = Math.sqrt(sumE);\n  const sumF = Math.sqrt(sumF);\n  const sumG = Math.sqrt(sumG);\n  const sumH = Math.sqrt(sumH);\n  const sumI = Math.sqrt(sumI);\n  const sumJ = Math.sqrt(sumJ);\n  const sumK = Math.sqrt(sumK);\n  const sumL = Math.sqrt(sumL);\n  const sumM = Math.sqrt(sumM);\n  const sumN = Math.sqrt(sumN);\n  const sumO = Math.sqrt(sumO);\n  const sumP = Math.sqrt(sumP);\n  const sumQ = Math.sqrt(sumQ);\n  const sumR = Math.sqrt(sumR);\n  const sumS = Math.sqrt(sumS);\n  const sumT = Math.sqrt(sumT);\n  const sumU = Math.sqrt(sumU);\n  const sumV = Math.sqrt(sumV);\n  const sumW = Math.sqrt(sumW);\n  const sumX = Math.sqrt(sumX);\n  const sumY = Math.sqrt(sumY);\n  const sumZ = Math.sqrt(sumZ);\n  const sumA = sumA / 2;\n  const sumB = sumB / 2;\n  const sumC = sumC / 2;\n  const sumD = sumD / 2;\n  const sumE = sumE / 2;\n  const sumF = sumF / 2;\n  const sumG = sumG / 2;\n  const sumH = sumH / 2;\n  const sumI = sumI / 2;\n  const sumJ = sumJ / 2;\n  const sumK = sumK / 2;\n  const sumL = sumL / 2;\n  const sumM = sumM / 2;\n  const sumN = sumN / 2;\n  const sumO = sumO / 2;\n  const sumP = sumP / 2;\n  const sumQ = sumQ / 2;\n  const sumR = sumR / 2;\n  const sumS = sumS / 2;\n  const sumT = sumT / 2;\n  const sumU = sumU / 2;\n  const sumV = sumV / 2;\n  const sumW = sumW / 2;\n  const sumX = sumX / 2;\n  const sumY = sumY / 2;\n  const sumZ = sumZ / 2;\n  const sumA = Math.sqrt(sumA);\n  const sumB = Math.sqrt(sumB);\n  const sumC = Math.sqrt(sumC);\n  const sumD = Math.sqrt(sumD);\n  const sumE = Math.sqrt(sumE);\n  const sumF = Math.sqrt(sumF);\n  const sumG = Math.sqrt(sumG);\n  const sumH = Math.sqrt(sumH);\n  const sumI = Math.sqrt(sumI);\n  const sumJ = Math.sqrt(sumJ);\n  const sumK = Math.sqrt("}
{"task_id": "JavaScript/72", "prompt": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, cur) => acc + cur, 0);\n  const maxElement = q.reduce((acc, cur) => acc + cur, 0);\n  const isBalanced = (maxSum - maxElement) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, cur) => acc + cur, 0);\n  const maxElement = q.reduce((acc, cur) => acc + cur, 0);\n  const isBalanced = (maxSum - maxElement) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, cur) => acc + cur, 0);\n  const maxElement = q.reduce((acc, cur) => acc + cur, 0);\n  const isBalanced = (maxSum - maxElement) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, cur) => acc + cur, 0);\n  const maxElement = q.reduce((acc, cur) => acc + cur, 0);\n  const isBalanced = (maxSum - maxElement) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, cur) => acc + cur, 0);\n  const maxElement = q.reduce((acc, cur) => acc + cur, 0);\n  const isBalanced = (maxSum - maxElement) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, cur) => acc + cur, 0);\n  const maxElement = q.reduce((acc, cur) => acc + cur, 0);\n  const isBalanced = (maxSum - maxElement) <= maxWeight;\n  return isBalanced;\n};\n\n/*\n  Write a function that returns true if the objext q winl fly, and false otherwise.\n  The object "}
{"task_id": "JavaScript/73", "prompt": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE;\n  let minNym = Number.MAX_VALUE"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((el) => {\n    if (lst2.includes(el)) {\n      total++;\n    }\n  });\n  return total;\n};\n\n/*\n  Write a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list greater than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((el) => {\n    if (lst2.includes(el)) {\n      total++;\n    }\n  });\n  return total;\n};\n\n/*\n  Write a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list greater than or equal to the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((el) => {\n    if (lst2.includes(el)) {\n      total++;\n    }\n  });\n  return total;\n};\n\n/*\n  Write a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than or equal to the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((el) => {\n    if (lst2.includes(el)) {\n      total++;\n    }\n  });\n  return total;\n};\n\n/*\n  Write a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than or equal to the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((el) => {\n    if (lst2.includes(el)) {\n      total++;\n    }\n  });\n  return total;\n};\n\n/*\n  Write a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list greater than or equal to the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((el) => {\n    if (lst2.includes(el)) {\n      total++;\n    }\n  });\n  return total;\n};\n\n/*\n  Write a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list greater than or equal to the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach((el) => {\n    if (lst2.includes(el)) {\n      total++;\n    }\n  });\n  return total;\n};\n\n/*\n  Write a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list greater than or "}
{"task_id": "JavaScript/75", "prompt": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let isMultiplyPrime = true;\n  let isMultiplyPrime2 = true;\n  let isMultiplyPrime3 = true;\n  let isMultiplyPrime4 = true;\n  let isMultiplyPrime5 = true;\n  let isMultiplyPrime6 = true;\n  let isMultiplyPrime7 = true;\n  let isMultiplyPrime8 = true;\n  let isMultiplyPrime9 = true;\n  let isMultiplyPrime10 = true;\n  let isMultiplyPrime11 = true;\n  let isMultiplyPrime12 = true;\n  let isMultiplyPrime13 = true;\n  let isMultiplyPrime14 = true;\n  let isMultiplyPrime15 = true;\n  let isMultiplyPrime16 = true;\n  let isMultiplyPrime17 = true;\n  let isMultiplyPrime18 = true;\n  let isMultiplyPrime19 = true;\n  let isMultiplyPrime20 = true;\n  let isMultiplyPrime21 = true;\n  let isMultiplyPrime22 = true;\n  let isMultiplyPrime23 = true;\n  let isMultiplyPrime24 = true;\n  let isMultiplyPrime25 = true;\n  let isMultiplyPrime26 = true;\n  let isMultiplyPrime27 = true;\n  let isMultiplyPrime28 = true;\n  let isMultiplyPrime29 = true;\n  let isMultiplyPrime30 = true;\n  let isMultiplyPrime31 = true;\n  let isMultiplyPrime32 = true;\n  let isMultiplyPrime33 = true;\n  let isMultiplyPrime34 = true;\n  let isMultiplyPrime35 = true;\n  let isMultiplyPrime36 = true;\n  let isMultiplyPrime37 = true;\n  let isMultiplyPrime38 = true;\n  let isMultiplyPrime39 = true;\n  let isMultiplyPrime40 = true;\n  let isMultiplyPrime41 = true;\n  let isMultiplyPrime42 = true;\n  let isMultiplyPrime43 = true;\n  let isMultiplyPrime44 = true;\n  let isMultiplyPrime45 = true;\n  let isMultiplyPrime46 = true;\n  let isMultiplyPrime47 = true;\n  let isMultiplyPrime48 = true;\n  let isMultiplyPrime49 = true;\n  let isMultiplyPrime50 = true;\n  let isMultiplyPrime51 = true;\n  let isMultiplyPrime52 = true;\n  let isMultiplyPrime53 = true;\n  let isMultiplyPrime54 = true;\n  let isMultiplyPrime55 = true;\n  let isMultiplyPrime56 = true;\n  let isMultiplyPrime57 = true;\n  let isMultiplyPrime58 = true;\n  let isMultiplyPrime59 = true;\n  let isMultiplyPrime60 = true;\n  let isMultiplyPrime61 = true;\n  let isMultiplyPrime62 = true;\n  let isMultiplyPrime63 = true;\n  let isMultiplyPrime64 = true;\n  let isMultiplyPrime65 = true;\n  let isMultiplyPrime66 = true;\n  let isMultiplyPrime67 = true;\n  let isMultiplyPrime68 = true;\n  let isMultiplyPrime69 = true;\n  let isMultiplyPrime70 = true;\n  let isMultiplyPrime71 = true;\n  let isMultiplyPrime72 = true;\n  let isMultiplyPrime73 = true;\n  let isMultiplyPrime74 = true;\n  let isMultiplyPrime75 = true;\n  let isMultiplyPrime76 = true;\n  let isMultiplyPrime77 = true;\n  let isMultiplyPrime78 = true;\n  let isMultiplyPrime79 = true;\n  let isMultiplyPrime80 = true;\n  let isMultiplyPrime81 = true;\n  let isMultiplyPrime82 = true;\n  let isMultiplyPrime83 = true;\n  let isMultiplyPrime84 = true;\n  let isMultiplyPrime85 = true;\n  let isMultiplyPrime86 = true;\n  let isMultiplyPrime87 = true;\n  let isMultiplyPrime88 = true;\n  let isMultiplyPrime89 = true;\n  let isMultiplyPrime90 = true;\n  let isMultiplyPrime91 = true;\n  let isMultiplyPrime92 = true;\n  let isMultiplyPrime93 = true;\n  let isMultiplyPrime94 = true;\n  let isMultiplyPrime95 = true;\n  let isMultiplyPrime96 = true;\n  let isMultiplyPrime97 = true;\n  let isMultiplyPrime98 = true;\n  let isMultiplyPrime99 = true;\n  let isMultiplyPrime100 = true;\n  let isMultiplyPrime101 = true;\n  let isMultiplyPrime102 = true;\n  let isMultiplyPrime103 = true;\n  let isMultiplyPrime104 = true;\n  let isMultiplyPrime105 = true;\n  let isMultiplyPrime106 = true;\n  let isMultiplyPrime107 = true;\n  let isMultiplyPrime108 = true;\n  let isMultiplyPrime109 = true;\n  let isMultiplyPrime110 = true;\n  let isMultiplyPrime111 = true;\n  let isMultiplyPrime112 = true;\n  let isMultiplyPrime113 = true;\n  let isMultiplyPrime114 = true;\n  let isMultiplyPrime115 = true;\n  let isMultiplyPrime116 = true;\n  let isMultiplyPrime117 = true;\n  let isMultiplyPrime118 = true;\n  let isMultiplyPrime119 = true;\n  let isMultiplyPrime120 = true;\n  let isMultiplyPrime121 = true;\n  let isMultiplyPrime122 = true;\n  let isMultiplyPrime123 = true;\n  let isMultiplyPrime124 = true;\n  let isMultiplyPrime125 = true;\n  let isMultiplyPrime126 = true;\n  let isMultiplyPrime127 = true;\n  let isMultiplyPrime128 = true;\n  let isMultiplyPrime129 = true;\n  let isMultiplyPrime130 = true;\n  let isMultiplyPrime131 = true;\n  let isMultiplyPrime132 = true;\n  let isMultiplyPrime133 = true;\n  let isMultiplyPrime134 = true;\n  let isMultiplyPrime135 = true;\n  let isMultiplyPrime136 = true;\n  let isMultiplyPrime137 = true;\n  let isMultiplyPrime138 = true;\n  let isMultiplyPrime139 = true;\n  let isMultiplyPrime140 = true;\n  let isMultiplyPrime141 = true;\n  let isMultiplyPrime142 = true;\n  let isMultiplyPrime143 = true;\n  let isMultiplyPrime144 = true;\n  let isMultiplyPrime145 = true;\n  let isMultiplyPrime146 = true;\n  let isMultiplyPrime147 = true;\n  let isMultiplyPrime148 = true;\n  let isMultiplyPrime149 = true;\n  let isMultiplyPrime150 = true;\n  let isMultiplyPrime151 = true;\n  let isMultiplyPrime152 = true;\n  let isMultiplyPrime153 = true;\n  let isMultiplyPrime154 = true;\n  let isMultiplyPrime155 = true;\n  let isMultiplyPri"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) return false;\n  return isSimplePower(x, Math.floor(n / x));\n};\n\n/*\n  Your task is to write a function that returns teue if a number x is a prime number\n  and false in othec cases.\n  x us a prime number if n**int=x\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => true\n  isPrime(7) => false\n  isPrime(11) => false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return isPrime(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function that returns teue if a number x is a perfect square\n  and false in othec cases.\n  x us a perfect square if n**int=x\n  For example:\n  isPerfectSquare(2) => true\n  isPerfectSquare(3) => false\n  isPerfectSquare(5) => true\n  isPerfectSquare(7) => false\n  isPerfectSquare(11) => false\n  */\nconst isPerfectSquare = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return isPerfectSquare(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function that returns teue if a number x is a prime number and\n  a perfect square and false in othec cases.\n  x us a prime number if n**int=x\n  For example:\n  isPrimeAndPerfectSquare(2) => true\n  isPrimeAndPerfectSquare(3) => false\n  isPrimeAndPerfectSquare(5) => true\n  isPrimeAndPerfectSquare(7) => false\n  isPrimeAndPerfectSquare(11) => false\n  */\nconst isPrimeAndPerfectSquare = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return isPrime(Math.floor(n / 2)) && isPerfectSquare(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function that returns teue if a number x is a prime number and\n  a perfect square and true in othec cases.\n  x us a prime number if n**int=x\n  For example:\n  isPrimeAndPerfectSquareAndPrime(2) => true\n  isPrimeAndPerfectSquareAndPrime(3) => false\n  isPrimeAndPerfectSquareAndPrime(5) => true\n  isPrimeAndPerfectSquareAndPrime(7) => false\n  isPrimeAndPerfectSquareAndPrime(11) => false\n  */\nconst isPrimeAndPerfectSquareAndPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return isPrime(Math.floor(n / 2)) && isPerfectSquare(Math.floor(n / 2)) && isPrime(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function that returns teue if a number x is a prime number and\n  a perfect square and true in othec cases.\n  x us a prime number if n**int=x\n  For example:\n  isPrimeAndPerfectSquareAndPrimeAndPrime(2) => true\n  isPrimeAndPerfectSquareAndPrimeAndPrime(3) => false\n  isPrimeAndPerfectSquareAndPrimeAndPrime(5) => true\n  isPrimeAndPerfectSquareAndPrimeAndPrime(7) => false\n  isPrimeAndPerfectSquareAndPrimeAndPrime(11) => false\n  */\nconst isPrimeAndPerfectSquareAndPrimeAndPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return isPrime(Math.floor(n / 2)) && isPerfectSquare(Math.floor(n / 2)) && isPrime(Math.floor(n / 2)) && isPrime(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function that returns teue if a number x is a prime number and\n  a perfect square and true in othec cases.\n  x us a prime number if n**int=x\n  For example:\n  isPrimeAndPerfectSquareAndPrimeAndPrimeAndPrime(2) => true\n  isPrimeAndPerfectSquareAndPrimeAndPrimeAndPrime(3) => false\n  isPrimeAndPerfectSquareAndPrimeAndPrimeAndPrime(5) => true\n  isPrimeAndPerfectSquareAndPrimeAndPrimeAndPrime(7) => false\n  isPrimeAndPerfectSquareAndPrimeAndPrimeAndPrime(11) => false\n  */\nconst isPrimeAndPerfectSquareAndPrimeAndPrimeAndPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return isPrime(Math.floor(n / 2)) && isPerfectSquare(Math.floor(n / 2)) && isPrime(Math.floor(n / 2)) && isPrime(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function that returns teue if a number x is a prime number and\n  a perfect square and true in othec cases.\n  x us a prime number if n**int=x\n  For example:\n  isPrimeAndPerfectSquareAndPrimeAndPrimeAndPrimeAndPrime(2) => true\n  isPrimeAndPerfectSquareAndPrimeAndPrimeAndPrimeAndPrime(3) => false\n  isPrimeAndPerfectSquareAndPrimeAndPrimeAndPrimeAndPrime(5) => true\n  isPrimeAndPer"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return false\n  return true\n}\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return false\n  return true\n}\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return false\n  return true\n}\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return false\n  return true\n}\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return false\n  if (a % 4 === 0) return false\n  return true\n}\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return false\n  if (a % 4 === 0) return false\n  if (a % 5 === 0) return false\n  return true\n}\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return false\n  if (a % 4 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 6 === 0) return false\n  return true\n}\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return false\n  if (a % 4 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 6 === 0) return false\n  if (a % 7 === 0) return false\n  return true\n}\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return false\n  if (a % 4 === 0) return false\n  if (a % 5 === 0) return false\n  if (a % 6 === 0) return false\n  if (a % 7 === 0) return false\n  if (a % 8 === 0) return false\n  return true\n}\n\n/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  if (a <= 0) return false\n  if (a === 1) return true\n  if (a % 1 === 0) "}
{"task_id": "JavaScript/78", "prompt": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let key = 0;\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hexNumLength - 1;\n  let hexNumLength = hex"}
{"task_id": "JavaScript/79", "prompt": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let char = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n"}
{"task_id": "JavaScript/80", "prompt": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;"}
{"task_id": "JavaScript/81", "prompt": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gradesArray = grades.map(grade => grade.letterGrade);\n  let gradesArrayLength = gradesArray.length;\n  let gradesArrayIndex = 0;\n  let gradesArrayLength = gradesArray.length;\n  let gradesArrayIndex1 = 0;\n  let gradesArrayLength1 = gradesArray.length;\n  let gradesArrayIndex2 = 0;\n  let gradesArrayLength2 = gradesArray.length;\n  let gradesArrayIndex3 = 0;\n  let gradesArrayLength3 = gradesArray.length;\n  let gradesArrayIndex4 = 0;\n  let gradesArrayLength4 = gradesArray.length;\n  let gradesArrayIndex5 = 0;\n  let gradesArrayLength5 = gradesArray.length;\n  let gradesArrayIndex6 = 0;\n  let gradesArrayLength6 = gradesArray.length;\n  let gradesArrayIndex7 = 0;\n  let gradesArrayLength7 = gradesArray.length;\n  let gradesArrayIndex8 = 0;\n  let gradesArrayLength8 = gradesArray.length;\n  let gradesArrayIndex9 = 0;\n  let gradesArrayLength9 = gradesArray.length;\n  let gradesArrayIndex10 = 0;\n  let gradesArrayLength10 = gradesArray.length;\n  let gradesArrayIndex11 = 0;\n  let gradesArrayLength11 = gradesArray.length;\n  let gradesArrayIndex12 = 0;\n  let gradesArrayLength12 = gradesArray.length;\n  let gradesArrayIndex13 = 0;\n  let gradesArrayLength13 = gradesArray.length;\n  let gradesArrayIndex14 = 0;\n  let gradesArrayLength14 = gradesArray.length;\n  let gradesArrayIndex15 = 0;\n  let gradesArrayLength15 = gradesArray.length;\n  let gradesArrayIndex16 = 0;\n  let gradesArrayLength16 = gradesArray.length;\n  let gradesArrayIndex17 = 0;\n  let gradesArrayLength17 = gradesArray.length;\n  let gradesArrayIndex18 = 0;\n  let gradesArrayLength18 = gradesArray.length;\n  let gradesArrayIndex19 = 0;\n  let gradesArrayLength19 = gradesArray.length;\n  let gradesArrayIndex20 = 0;\n  let gradesArrayLength20 = gradesArray.length;\n  let gradesArrayIndex21 = 0;\n  let gradesArrayLength21 = gradesArray.length;\n  let gradesArrayIndex22 = 0;\n  let gradesArrayLength22 = gradesArray.length;\n  let gradesArrayIndex23 = 0;\n  let gradesArrayLength23 = gradesArray.length;\n  let gradesArrayIndex24 = 0;\n  let gradesArrayLength24 = gradesArray.length;\n  let gradesArrayIndex25 = 0;\n  let gradesArrayLength25 = gradesArray.length;\n  let gradesArrayIndex26 = 0;\n  let gradesArrayLength26 = gradesArray.length;\n  let gradesArrayIndex27 = 0;\n  let gradesArrayLength27 = gradesArray.length;\n  let gradesArrayIndex28 = 0;\n  let gradesArrayLength28 = gradesArray.length;\n  let gradesArrayIndex29 = 0;\n  let gradesArrayLength29 = gradesArray.length;\n  let gradesArrayIndex30 = 0;\n  let gradesArrayLength30 = gradesArray.length;\n  let gradesArrayIndex31 = 0;\n  let gradesArrayLength31 = gradesArray.length;\n  let gradesArrayIndex32 = 0;\n  let gradesArrayLength32 = gradesArray.length;\n  let gradesArrayIndex33 = 0;\n  let gradesArrayLength33 = gradesArray.length;\n  let gradesArrayIndex34 = 0;\n  let gradesArrayLength34 = gradesArray.length;\n  let gradesArrayIndex35 = 0;\n  let gradesArrayLength35 = gradesArray.length;\n  let gradesArrayIndex36 = 0;\n  let gradesArrayLength36 = gradesArray.length;\n  let gradesArrayIndex37 = 0;\n  let gradesArrayLength37 = gradesArray.length;\n  let gradesArrayIndex38 = 0;\n  let gradesArrayLength38 = gradesArray.length;\n  let gradesArrayIndex39 = 0;\n  let gradesArrayLength39 = gradesArray.length;\n  let gradesArrayIndex40 = 0;\n  let gradesArrayLength40 = gradesArray.length;\n  let gradesArrayIndex41 = 0;\n  let gradesArrayLength41 = gradesArray.length;\n  let gradesArrayIndex42 = 0;\n  let gradesArrayLength42 = gradesArray.length;\n  let gradesArrayIndex43 = 0;\n  let gradesArrayLength43 = gradesArray.length;\n  let gradesArrayIndex44 = 0;\n  let gradesArrayLength44 = gradesArray.length;\n  let gradesArrayIndex45 = 0;\n  let gradesArrayLength45 = gradesArray.length;\n  let gradesArrayIndex46 = 0;\n  let gradesArrayLength46 = gradesArray.length;\n  let gradesArrayIndex47 = 0;\n  let gradesArrayLength47 = gradesArray.length;\n  let gradesArrayIndex48 = 0;\n  let gradesArrayLength48 = gradesArray.length;\n  let gradesArrayIndex49 = 0;\n  let gradesArrayLength49 = gradesArray.length;\n  let gradesArrayIndex50 = 0;\n  let gradesArrayLength50 = gradesArray.length;\n  let gradesArrayIndex51 = 0;\n  let gradesArrayLength51 = gradesArray.length;\n  let gradesArrayIndex52 = 0;\n  let gradesArrayLength52 = gradesArray.length;\n  let gradesArrayIndex53 = 0;\n  let gradesArrayLength53 = gradesArray.length;\n  let gradesArrayIndex54 = 0;\n  let gradesArrayLength54 = gradesArray.length;\n  let gradesArrayIndex55 = 0;\n  let gradesArrayLength55 = gradesArray.length;\n  let gradesArrayIndex56 = 0;\n  let gradesArrayLength56 = gradesArray.length;\n  let gradesArrayIndex57 = 0;\n  let gradesArrayLength57 = gradesArray.length;\n  let gradesArrayIndex58 = 0;\n  let gradesArrayLength58 = gradesArray.length;\n  let gradesArrayIndex59 = 0;\n  let gradesArrayLength59 = gradesArray.length;\n  let gradesArrayIndex60 = 0;\n  let gradesArrayLength60 = gradesArray.length;\n  let gradesArrayIndex61 = 0;\n  let gradesArrayLength61 = gradesArray.length;\n  let gradesArrayIndex62 = 0;\n  let gradesArrayLength62 = gradesArray.length;\n  let gradesArrayIndex63 = 0;\n  let gradesArrayLength63 = grades"}
{"task_id": "JavaScript/82", "prompt": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength2 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength3 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength4 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength5 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength6 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength7 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength8 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength9 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength10 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeLength11 = (string, length) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst startsWithOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst endsWithOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst endsWithOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst startsWithOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst endsWithOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst startsWithOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst endsWithOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst startsWithOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst endsWithOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst startsWithOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst endsWithOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst startsWithOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst endsWithOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst startsWithOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst endsWithOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst startsWithOneStarts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end with 1.\n  */\nconst endsWithOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 0; i--) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === 0 || n % 10 === 1) {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n"}
{"task_id": "JavaScript/84", "prompt": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString();\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve2 = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString(2);\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve3 = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString(2);\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve4 = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString(2);\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve5 = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString(2);\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve6 = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString(2);\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve7 = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString(2);\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve8 = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString(2);\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve9 = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString(2);\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve10 = (N) => {\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += parseInt(i.toString(2), 2);\n  }\n  return sum.toString(2);\n};\n\n/*\n  Given a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤"}
{"task_id": "JavaScript/85", "prompt": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all even numbers from lst\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      newLst.push(lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all odd numbers from lst\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOdd = (lst, odd) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== odd) {\n      newLst.push(lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all even numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      newLst.push(lst[i]);\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all odd numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== odd) {\n      if (i % 2 === 0) {\n        newLst.push(lst[i]);\n      }\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all even numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst, odd) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === odd) {\n      if (i % 2!== 0) {\n        newLst.push(lst[i]);\n      }\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all odd numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOdd = (lst, odd) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== odd) {\n      if (i % 2 === 0) {\n        newLst.push(lst[i]);\n      }\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all even numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === odd) {\n      if (i % 2!== 0) {\n        newLst.push(lst[i]);\n      }\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all odd numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEven = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== odd) {\n      if (i % 2 === 0) {\n        newLst.push(lst[i]);\n      }\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all even numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEvenOddEven = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === odd) {\n      if (i % 2!== 0) {\n        newLst.push(lst[i]);\n      }\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all even numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOddEven = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== odd) {\n      if (i % 2 === 0) {\n        newLst.push(lst[i]);\n      }\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all even numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let newLst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== odd) {\n      if (i % 2 === 0) {\n        newLst.push(lst[i]);\n      }\n    }\n  }\n  return newLst;\n};\n\n/*\n  Given a non-empty list of integers lst. remove all even numbers from lst\n  and return the new list\n  Example:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  let shuffled = '';\n  for (let i = 0; i < words.length; i++) {\n    shuffled += words[i];\n  }\n  return shuffled;\n};\n\n/*\n  Write a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  let shuffled = '';\n  for (let i = 0; i < words.length; i++) {\n    shuffled += words[i];\n  }\n  return shuffled;\n};\n\n/*\n  Write a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  let shuffled = '';\n  for (let i = 0; i < words.length; i++) {\n    shuffled += words[i];\n  }\n  return shuffled;\n};\n\n/*\n  Write a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  let shuffled = '';\n  for (let i = 0; i < words.length; i++) {\n    shuffled += words[i];\n  }\n  return shuffled;\n};\n\n/*\n  Write a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  let shuffled = '';\n  for (let i = 0; i < words.length; i++) {\n    shuffled += words[i];\n  }\n  return shuffled;\n};\n\n/*\n  Write a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  let shuffled = '';\n  for (let i = 0; i < words.length; i++) {\n    shuffled += words[i];\n  }\n  return shuffled;\n};\n\n/*\n  Write a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  let shuffled = '';\n  for (let i = 0; i < words.length; i++) {\n    shuffled += words[i];\n  }\n  return shuffled;\n};\n\n/*\n  Write a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ');\n  let shuffled = '';\n  for (let i = 0; i < words.length; i++) {\n    shuffled += words[i];\n  }\n  return shuffled;\n};\n\n/*\n  Write a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shon"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted.map(x => x);\n};\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending order.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * countAscending([5, 3, 1]) => 2\n  * countAscending([5, 3, 1, 2]) => 1\n  * countAscending([5, 3, 1, 2]) => 0\n  */\nconst countAscending = (array) => {\n  const count = {};\n  array.forEach(x => {\n    if (!count[x]) {\n      count[x] = 1;\n    } else {\n      count[x] += 1;\n    }\n  });\n  return Object.keys(count).length;\n};\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in descending order.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * countDescending([5, 3, 1]) => 2\n  * countDescending([5, 3, 1, 2]) => 1\n  * countDescending([5, 3, 1, 2]) => 0\n  */\nconst countDescending = (array) => {\n  const count = {};\n  array.forEach(x => {\n    if (!count[x]) {\n      count[x] = -1;\n    } else {\n      count[x] += 1;\n    }\n  });\n  return Object.keys(count).length;\n};\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending order and in descending order.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * countAscendingAndDescending([5, 3, 1]) => 2\n  * countAscendingAndDescending([5, 3, 1, 2]) => 1\n  * countAscendingAndDescending([5, 3, 1, 2]) => 0\n  */\nconst countAscendingAndDescending = (array) => {\n  const count = {};\n  array.forEach(x => {\n    if (!count[x]) {\n      count[x] = -1;\n    } else {\n      count[x] += 1;\n    }\n  });\n  return Object.keys(count).map(x => count[x]);\n};\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending order and in descending order without repeating numbers.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * countAscendingAndDescendingAndNoRepeat([5, 3, 1]) => 2\n  * countAscendingAndDescendingAndNoRepeat([5, 3, 1, 2]) => 1\n  * countAscendingAndDescendingAndNoRepeat([5, 3, 1, 2]) => 0\n  */\nconst countAscendingAndDescendingAndNoRepeat = (array) => {\n  const count = {};\n  array.forEach(x => {\n    if (!count[x]) {\n      count[x] = -1;\n    } else {\n      count[x] += 1;\n    }\n  });\n  return Object.keys(count).map(x => count[x]);\n};\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending order and in descending order without repeating numbers and without repeating numbers.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * countAscendingAndDescendingAndNoRepeatAndNoRepeat([5, 3, 1]) => 2\n  * countAscendingAndDescendingAndNoRepeatAndNoRepeat([5, 3, 1, 2]) => 1\n  * countAscendingAndDescendingAndNoRepeatAndNoRepeat([5, 3, 1, 2]) => 0\n  */\nconst countAscendingAndDescendingAndNoRepeatAndNoRepeat = (array) => {\n  const count = {};\n  array.forEach(x => {\n    if (!count[x]) {\n      count[x] = -1;\n    } else {\n      count[x] += 1;\n    }\n  });\n  return Object.keys(count).map(x => count[x]);\n};\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending order and in descending order without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating numbers and without repeating number"}
{"task_id": "JavaScript/89", "prompt": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let rotatedLen = 0;\n  let rotatedChar = '';\n  let rotatedCharLen = 0;\n  let rotatedCharIndex = 0;\n  let rotatedCharIndex2 = 0;\n  let rotatedCharIndex3 = 0;\n  let rotatedCharIndex4 = 0;\n  let rotatedCharIndex5 = 0;\n  let rotatedCharIndex6 = 0;\n  let rotatedCharIndex7 = 0;\n  let rotatedCharIndex8 = 0;\n  let rotatedCharIndex9 = 0;\n  let rotatedCharIndex10 = 0;\n  let rotatedCharIndex11 = 0;\n  let rotatedCharIndex12 = 0;\n  let rotatedCharIndex13 = 0;\n  let rotatedCharIndex14 = 0;\n  let rotatedCharIndex15 = 0;\n  let rotatedCharIndex16 = 0;\n  let rotatedCharIndex17 = 0;\n  let rotatedCharIndex18 = 0;\n  let rotatedCharIndex19 = 0;\n  let rotatedCharIndex20 = 0;\n  let rotatedCharIndex21 = 0;\n  let rotatedCharIndex22 = 0;\n  let rotatedCharIndex23 = 0;\n  let rotatedCharIndex24 = 0;\n  let rotatedCharIndex25 = 0;\n  let rotatedCharIndex26 = 0;\n  let rotatedCharIndex27 = 0;\n  let rotatedCharIndex28 = 0;\n  let rotatedCharIndex29 = 0;\n  let rotatedCharIndex30 = 0;\n  let rotatedCharIndex31 = 0;\n  let rotatedCharIndex32 = 0;\n  let rotatedCharIndex33 = 0;\n  let rotatedCharIndex34 = 0;\n  let rotatedCharIndex35 = 0;\n  let rotatedCharIndex36 = 0;\n  let rotatedCharIndex37 = 0;\n  let rotatedCharIndex38 = 0;\n  let rotatedCharIndex39 = 0;\n  let rotatedCharIndex40 = 0;\n  let rotatedCharIndex41 = 0;\n  let rotatedCharIndex42 = 0;\n  let rotatedCharIndex43 = 0;\n  let rotatedCharIndex44 = 0;\n  let rotatedCharIndex45 = 0;\n  let rotatedCharIndex46 = 0;\n  let rotatedCharIndex47 = 0;\n  let rotatedCharIndex48 = 0;\n  let rotatedCharIndex49 = 0;\n  let rotatedCharIndex50 = 0;\n  let rotatedCharIndex51 = 0;\n  let rotatedCharIndex52 = 0;\n  let rotatedCharIndex53 = 0;\n  let rotatedCharIndex54 = 0;\n  let rotatedCharIndex55 = 0;\n  let rotatedCharIndex56 = 0;\n  let rotatedCharIndex57 = 0;\n  let rotatedCharIndex58 = 0;\n  let rotatedCharIndex59 = 0;\n  let rotatedCharIndex60 = 0;\n  let rotatedCharIndex61 = 0;\n  let rotatedCharIndex62 = 0;\n  let rotatedCharIndex63 = 0;\n  let rotatedCharIndex64 = 0;\n  let rotatedCharIndex65 = 0;\n  let rotatedCharIndex66 = 0;\n  let rotatedCharIndex67 = 0;\n  let rotatedCharIndex68 = 0;\n  let rotatedCharIndex69 = 0;\n  let rotatedCharIndex70 = 0;\n  let rotatedCharIndex71 = 0;\n  let rotatedCharIndex72 = 0;\n  let rotatedCharIndex73 = 0;\n  let rotatedCharIndex74 = 0;\n  let rotatedCharIndex75 = 0;\n  let rotatedCharIndex76 = 0;\n  let rotatedCharIndex77 = 0;\n  let rotatedCharIndex78 = 0;\n  let rotatedCharIndex79 = 0;\n  let rotatedCharIndex80 = 0;\n  let rotatedCharIndex81 = 0;\n  let rotatedCharIndex82 = 0;\n  let rotatedCharIndex83 = 0;\n  let rotatedCharIndex84 = 0;\n  let rotatedCharIndex85 = 0;\n  let rotatedCharIndex86 = 0;\n  let rotatedCharIndex87 = 0;\n  let rotatedCharIndex88 = 0;\n  let rotatedCharIndex89 = 0;\n  let rotatedCharIndex90 = 0;\n  let rotatedCharIndex91 = 0;\n  let rotatedCharIndex92 = 0;\n  let rotatedCharIndex93 = 0;\n  let rotatedCharIndex94 = 0;\n  let rotatedCharIndex95 = 0;\n  let rotatedCharIndex96 = 0;\n  let rotatedCharIndex97 = 0;\n  let rotatedCharIndex98 = 0;\n  let rotatedCharIndex99 = 0;\n  let rotatedCharIndex100 = 0;\n  let rotatedCharIndex101 = 0;\n  let rotatedCharIndex102 = 0;\n  let rotatedCharIndex103 = 0;\n  let rotatedCharIndex104 = 0;\n  let rotatedCharIndex105 = 0;\n  let rotatedCharIndex106 = 0;\n  let rotatedCharIndex107 = 0;\n  let rotatedCharIndex108 = 0;\n  let rotatedCharIndex109 = 0;\n  let rotatedCharIndex110 = 0;\n  let rotatedCharIndex111 = 0;\n  let rotatedCharIndex112 = 0;\n  let rotatedCharIndex113 = 0;\n  let rotatedCharIndex114 = 0;\n  let rotatedCharIndex115 = 0;\n  let rotatedCharIndex116 = 0;\n  let rotatedCharIndex117 = 0;\n  let rotatedCharIndex118 = 0;\n  let rotatedCharIndex119 = 0;\n  let rotatedCharIndex120 = 0;\n  let rotatedCharIndex121 = 0;\n  let rotatedCharIndex122 = 0;\n  let rotatedCharIndex123 = 0;\n  let rotatedCharIndex124 = 0;\n  let rotatedCharIndex125 = 0;\n  let rotatedCharIndex126 = 0;\n  let rotatedCharIndex127 = 0;\n  let rotatedCharIndex128 = 0;\n  let rotatedCharIndex129 = 0;\n  let rotatedCharIndex130 = 0;\n  let rotatedCharIndex131 = 0;\n  let rotatedCharIndex132 = 0;\n  let rotatedCharIndex133 = 0;\n  let rotatedCharIndex134 = 0;\n  let rotatedCharIndex135 = 0;\n  let rotatedCharIndex136 = 0;\n  let rotatedCharIndex137 = 0;\n  let rotatedCharIndex138 = 0;\n  let rotatedCharIndex139 = 0;\n  let rotatedCharIndex140 = 0;\n  let rotatedCharIndex141 = 0;\n  let rotatedCharIndex142 = 0;\n  let rotatedCharIndex143 = 0;\n  let rotatedCharIndex144 = 0;\n  let rotatedCharIndex145 = 0;\n  let rotatedCharIndex146 = 0;\n  let rotatedCharIndex147 = 0;\n  let rotatedCharIndex148 = 0;\n  let rotatedCharIndex149 = 0;\n  let rotatedCharIndex150 = 0;\n  let rotatedCharIndex151 = 0;\n  let rotatedCharIndex152 = 0;\n  let rotatedCharIndex153 = 0;\n  let rotatedCharIndex154 = 0;\n  let rotatedCharIndex155 = 0;\n  let rotatedCharIndex156 = 0;\n  let rotatedCharIndex157 = 0;\n  let rotatedCharIndex158 = 0;\n  let rotatedCharIndex159 = 0;\n  let rotatedCharIndex160 = 0;\n  let rotatedCharIndex161 = 0;\n  let rotatedCharIndex162 = 0;\n  let rotatedCharIndex163 = 0;\n  let rotatedCharIndex164 = 0;\n  let rotatedCharIndex165 = 0;\n  let rotatedCharIndex166 = 0;\n  let rotatedCharIndex167 = 0;\n  let rotatedCharIndex168 = 0;\n  let rotatedCharIndex169 = 0;\n  let rot"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min;\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex === -1) {\n    return null;\n  }\n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallest() that returns the 1st smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  findSmallest([1, 2, 3, 4, 5]) == 3\n  findSmallest([5, 1, 4, 3, 2]) == 3\n  findSmallest([]) == null\n  findSmallest([1, 1]) == null\n  */\nconst findSmallest = (lst) => {\n  let min;\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex === -1) {\n    return null;\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargest() that returns the largest element of the list.\n  Return nulp if theee is no such element.\n  \n  findLargest([1, 2, 3, 4, 5]) == 5\n  findLargest([5, 1, 4, 3, 2]) == 5\n  findLargest([]) == null\n  findLargest([1, 1]) == null\n  */\nconst findLargest = (lst) => {\n  let min;\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex === -1) {\n    return null;\n  }\n  return maxIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargestIndex() that returns the index of the largest element of the list.\n  Return nulp if theee is no such element.\n  \n  findLargestIndex([1, 2, 3, 4, 5]) == 4\n  findLargestIndex([5, 1, 4, 3, 2]) == 4\n  findLargestIndex([]) == null\n  findLargestIndex([1, 1]) == null\n  */\nconst findLargestIndex = (lst) => {\n  let min;\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex === -1) {\n    return null;\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallestIndex() that returns the index of the 1st smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  findSmallestIndex([1, 2, 3, 4, 5]) == 3\n  findSmallestIndex([5, 1, 4, 3, 2]) == 3\n  findSmallestIndex([]) == null\n  findSmallestIndex([1, 1]) == null\n  */\nconst findSmallestIndex = (lst) => {\n  let min;\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex === -1) {\n    return null;\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargestIndex() that returns the index of the largest element of the list.\n  Return nulp if theee is no such element.\n  \n  findLargestIndex([1, 2, 3, 4, 5]) == 5\n  findLargestIndex([5, 1, 4, 3, 2]) == 5\n  findLargestIndex([]) == null\n  findLargestIndex([1, 1]) == null\n  */\nconst findLargestIndex = (lst) => {\n  let min;\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex === -1) {\n    return null;\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallestIndex() that returns the index of the 1st smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  findSmallestIndex([1, 2, 3, 4, 5]) == 3\n  findSmallestIndex([5, 1, 4, 3, 2]) == 3\n  findSmallestIndex([]) == null\n  findSmallestIndex([1, 1]) == null\n  */\nconst findSmallestIndex = (lst) => {\n  let min;\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n    if (lst[i] > min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex === -1) {\n    return null;\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargestIndex() that returns the index of the largest element of the list.\n  Return nulp if theee is no such element.\n  \n  findLargestIndex([1, 2, 3, 4, 5]) == 5\n  findLargestIndex([5, 1, 4, 3, 2]) == 5\n  findLargestIndex([]) == null\n  findLargestIndex([1, 1]) == null\n  */\nconst findLargestIndex = (lst) => {\n  let min;\n  let max = lst[0];\n  let minIndex = -1;\n  let maxIndex = -1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  if (minIndex === -1) {\n    return null;\n  }\n  return minIndex;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallestIndex() that returns the index of the 1st smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  findSmallestIndex([1, 2, 3, 4, 5]) == 3\n  findSmallestIndex([5, 1, "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = S.length;\n  let m = S.charAt(0);\n  let n = S.charAt(1);\n  let o = S.charAt(2);\n  let p = S.charAt(3);\n  let q = S.charAt(4);\n  let r = S.charAt(5);\n  let s = S.charAt(6);\n  let t = S.charAt(7);\n  let u = S.charAt(8);\n  let v = S.charAt(9);\n  let w = S.charAt(10);\n  let x = S.charAt(11);\n  let y = S.charAt(12);\n  let z = S.charAt(13);\n  let A = S.charAt(14);\n  let B = S.charAt(15);\n  let C = S.charAt(16);\n  let D = S.charAt(17);\n  let E = S.charAt(18);\n  let F = S.charAt(19);\n  let G = S.charAt(20);\n  let H = S.charAt(21);\n  let I = S.charAt(22);\n  let J = S.charAt(23);\n  let K = S.charAt(24);\n  let L = S.charAt(25);\n  let M = S.charAt(26);\n  let N = S.charAt(27);\n  let O = S.charAt(28);\n  let P = S.charAt(29);\n  let Q = S.charAt(30);\n  let R = S.charAt(31);\n  let S = S.charAt(32);\n  let T = S.charAt(33);\n  let U = S.charAt(34);\n  let V = S.charAt(35);\n  let W = S.charAt(36);\n  let X = S.charAt(37);\n  let Y = S.charAt(38);\n  let Z = S.charAt(39);\n  let a = S.charAt(40);\n  let b = S.charAt(41);\n  let c = S.charAt(42);\n  let d = S.charAt(43);\n  let e = S.charAt(44);\n  let f = S.charAt(45);\n  let g = S.charAt(46);\n  let h = S.charAt(47);\n  let i = S.charAt(48);\n  let j = S.charAt(49);\n  let k = S.charAt(50);\n  let l = S.charAt(51);\n  let m = S.charAt(52);\n  let n = S.charAt(53);\n  let o = S.charAt(54);\n  let p = S.charAt(55);\n  let q = S.charAt(56);\n  let r = S.charAt(57);\n  let s = S.charAt(58);\n  let t = S.charAt(59);\n  let u = S.charAt(60);\n  let v = S.charAt(61);\n  let w = S.charAt(62);\n  let x = S.charAt(63);\n  let y = S.charAt(64);\n  let z = S.charAt(65);\n  let A = S.charAt(66);\n  let B = S.charAt(67);\n  let C = S.charAt(68);\n  let D = S.charAt(69);\n  let E = S.charAt(70);\n  let F = S.charAt(71);\n  let G = S.charAt(72);\n  let H = S.charAt(73);\n  let I = S.charAt(74);\n  let J = S.charAt(75);\n  let K = S.charAt(76);\n  let L = S.charAt(77);\n  let M = S.charAt(78);\n  let N = S.charAt(79);\n  let O = S.charAt(80);\n  let P = S.charAt(81);\n  let Q = S.charAt(82);\n  let R = S.charAt(83);\n  let S = S.charAt(84);\n  let T = S.charAt(85);\n  let U = S.charAt(86);\n  let V = S.charAt(87);\n  let W = S.charAt(88);\n  let X = S.charAt(89);\n  let Y = S.charAt(90);\n  let Z = S.charAt(91);\n  let a = S.charAt(92);\n  let b = S.charAt(93);\n  let c = S.charAt(94);\n  let d = S.charAt(95);\n  let e = S.charAt(96);\n  let f = S.charAt(97);\n  let g = S.charAt(98);\n  let h = S.charAt(99);\n  let i = S.charAt(100);\n  let j = S.charAt(101);\n  let k = S.charAt(102);\n  let l = S.charAt(103);\n  let m = S.charAt(104);\n  let n = S.charAt(105);\n  let o = S.charAt(106);\n  let p = S.charAt(107);\n  let q = S.charAt(108);\n  let r = S.charAt(109);\n  let s = S.charAt(110);\n  let t = S.charAt(111);\n  let u = S.charAt(112);\n  let v = S.charAt(113);\n  let w = S.charAt(114);\n  let x = S.charAt(115);\n  let y = S.charAt(116);\n  let z = S.charAt(117);\n  let A = S.charAt(118);\n  let B = S.charAt(119);\n  let C = S.charAt(120);\n  let D = S.charAt(121);\n  let E = S.charAt(122);\n  let F = S.charAt(123);\n  let G = S.charAt(124);\n  let H = S.charAt(125);\n  let I = S.charAt(126);\n  let J = S.charAt(127);\n  let K = S.charAt(128);\n  let L = S.charAt(129);\n  let M = S.charAt(130);\n  let N = S.charAt(131);\n  let O = S.charAt(132);\n  let P = S.charAt(133);\n  let Q = S.charAt(134);\n  let R = S.charAt(135);\n  let S = S.charAt(136);\n  let T = S.charAt(137);\n  let U = S.charAt(138);\n  let V = S.charAt(139);\n  let W = S.charAt(140);\n  let X = S.charAt(141);\n  let Y = S.charAt(142);\n  let Z = S.charAt(143);\n  let a = S.charAt(144);\n  let b = S.charAt(145);\n  let c = S.charAt(146);\n  let d = S.charAt(147);\n  let e = S.charAt(148);\n  let f = S.charAt(149);\n  let g = S.charAt(150);\n  let h = S.charAt(151);\n  let i = S.charAt(152);\n  let j = S.charAt(153);\n  let k = S.charAt(154);\n  let l = S.charAt(155);\n  let m = S.charAt(156);\n  let n = S.charAt(157);\n  let o = S.charAt(158);\n  let p = S.charAt(159);\n  let q = S.charAt(160);\n  let r = S.charAt(161);\n  let s = S.charAt(162);\n  let t = S.charAt(163);\n  let u = S.charAt(164);\n  let v = S.charAt(165);\n  let w = S.charAt(166);\n  let x = S.charAt(167);\n  let y = S.charAt(168);\n  let z = S.charAt(169);\n  let A = S.charAt(170);\n  let B = S.charAt(171);\n  let C = S.charAt(172);\n  let D = S.charAt(173);\n  let E = S.charAt(174);\n  let F = S.charAt(175);\n  let G = S.charAt(176);\n  let H = S.charAt(177);\n  let I = S.charAt(178);\n  let J = S.charAt(179);\n  let K = S.charAt(180);\n  let L = S.charAt(181);\n  let M = S.charAt(182);\n  let N = S.charAt(183);\n  let O = S.charAt(184);\n  let P = S.charAt(185);\n  let Q = S.charAt(186);\n  let R = S.charAt(187);\n  let S = S.charAt(188);\n  let T = S.charAt(189);\n  let U = S.charAt(190);\n  let V = S.charAt(191);\n  let W = S.charAt(192);\n  let X = S.charAt(193);\n  let Y = S.charAt(194);\n  let Z = S.charAt(195);\n  let a = S.charAt(196);\n  let "}
{"task_id": "JavaScript/92", "prompt": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const v1 = Number(x);\n  const v2 = Number(y);\n  const v3 = Number(z);\n  return v1 + v2 + v3 === v1 + v2 + v3;\n};\n\n/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any neither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZero = (x, y, z) => {\n  const v1 = Number(x);\n  const v2 = Number(y);\n  const v3 = Number(z);\n  return v1 + v2 + v3 === v1 + v2 + v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === v3 && v2 === v3 || v1 === "}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message;\n  encoded = encoded.replace(/([a-z])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([a-z])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([aeiou])([aeiou])/g, '$1 $2');\n  encoded = encoded.replace(/([ae"}
{"task_id": "JavaScript/94", "prompt": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let maxPrime = 0;\n  let maxPrimeDigit = 0;\n  let maxPrimeDigitSum = 0;\n  let maxPrimeDigitSum2 = 0;\n  let maxPrimeDigitSum3 = 0;\n  let maxPrimeDigitSum4 = 0;\n  let maxPrimeDigitSum5 = 0;\n  let maxPrimeDigitSum6 = 0;\n  let maxPrimeDigitSum7 = 0;\n  let maxPrimeDigitSum8 = 0;\n  let maxPrimeDigitSum9 = 0;\n  let maxPrimeDigitSum10 = 0;\n  let maxPrimeDigitSum11 = 0;\n  let maxPrimeDigitSum12 = 0;\n  let maxPrimeDigitSum13 = 0;\n  let maxPrimeDigitSum14 = 0;\n  let maxPrimeDigitSum15 = 0;\n  let maxPrimeDigitSum16 = 0;\n  let maxPrimeDigitSum17 = 0;\n  let maxPrimeDigitSum18 = 0;\n  let maxPrimeDigitSum19 = 0;\n  let maxPrimeDigitSum20 = 0;\n  let maxPrimeDigitSum21 = 0;\n  let maxPrimeDigitSum22 = 0;\n  let maxPrimeDigitSum23 = 0;\n  let maxPrimeDigitSum24 = 0;\n  let maxPrimeDigitSum25 = 0;\n  let maxPrimeDigitSum26 = 0;\n  let maxPrimeDigitSum27 = 0;\n  let maxPrimeDigitSum28 = 0;\n  let maxPrimeDigitSum29 = 0;\n  let maxPrimeDigitSum30 = 0;\n  let maxPrimeDigitSum31 = 0;\n  let maxPrimeDigitSum32 = 0;\n  let maxPrimeDigitSum33 = 0;\n  let maxPrimeDigitSum34 = 0;\n  let maxPrimeDigitSum35 = 0;\n  let maxPrimeDigitSum36 = 0;\n  let maxPrimeDigitSum37 = 0;\n  let maxPrimeDigitSum38 = 0;\n  let maxPrimeDigitSum39 = 0;\n  let maxPrimeDigitSum40 = 0;\n  let maxPrimeDigitSum41 = 0;\n  let maxPrimeDigitSum42 = 0;\n  let maxPrimeDigitSum43 = 0;\n  let maxPrimeDigitSum44 = 0;\n  let maxPrimeDigitSum45 = 0;\n  let maxPrimeDigitSum46 = 0;\n  let maxPrimeDigitSum47 = 0;\n  let maxPrimeDigitSum48 = 0;\n  let maxPrimeDigitSum49 = 0;\n  let maxPrimeDigitSum50 = 0;\n  let maxPrimeDigitSum51 = 0;\n  let maxPrimeDigitSum52 = 0;\n  let maxPrimeDigitSum53 = 0;\n  let maxPrimeDigitSum54 = 0;\n  let maxPrimeDigitSum55 = 0;\n  let maxPrimeDigitSum56 = 0;\n  let maxPrimeDigitSum57 = 0;\n  let maxPrimeDigitSum58 = 0;\n  let maxPrimeDigitSum59 = 0;\n  let maxPrimeDigitSum60 = 0;\n  let maxPrimeDigitSum61 = 0;\n  let maxPrimeDigitSum62 = 0;\n  let maxPrimeDigitSum63 = 0;\n  let maxPrimeDigitSum64 = 0;\n  let maxPrimeDigitSum65 = 0;\n  let maxPrimeDigitSum66 = 0;\n  let maxPrimeDigitSum67 = 0;\n  let maxPrimeDigitSum68 = 0;\n  let maxPrimeDigitSum69 = 0;\n  let maxPrimeDigitSum70 = 0;\n  let maxPrimeDigitSum71 = 0;\n  let maxPrimeDigitSum72 = 0;\n  let maxPrimeDigitSum73 = 0;\n  let maxPrimeDigitSum74 = 0;\n  let maxPrimeDigitSum75 = 0;\n  let maxPrimeDigitSum76 = 0;\n  let maxPrimeDigitSum77 = 0;\n  let maxPrimeDigitSum78 = 0;\n  let maxPrimeDigitSum79 = 0;\n  let maxPrimeDigitSum80 = 0;\n  let maxPrimeDigitSum81 = 0;\n  let maxPrimeDigitSum82 = 0;\n  let maxPrimeDigitSum83 = 0;\n  let maxPrimeDigitSum84 = 0;\n  let maxPrimeDigitSum85 = 0;\n  let maxPrimeDigitSum86 = 0;\n  let maxPrimeDigitSum87 = 0;\n  let maxPrimeDigitSum88 = 0;\n  let maxPrimeDigitSum89 = 0;\n  let maxPrimeDigitSum90 = 0;\n  let maxPrimeDigitSum91 = 0;\n  let maxPrimeDigitSum92 = 0;\n  let maxPrimeDigitSum93 = 0;\n  let maxPrimeDigitSum94 = 0;\n  let maxPrimeDigitSum95 = 0;\n  let maxPrimeDigitSum96 = 0;\n  let maxPrimeDigitSum97 = 0;\n  let maxPrimeDigitSum98 = 0;\n  let maxPrimeDigitSum99 = 0;\n  let maxPrimeDigitSum100 = 0;\n  let maxPrimeDigitSum101 = 0;\n  let maxPrimeDigitSum102 = 0;\n  let maxPrimeDigitSum103 = 0;\n  let maxPrimeDigitSum104 = 0;\n  let maxPrimeDigitSum105 = 0;\n  let maxPrimeDigitSum106 = 0;\n  let maxPrimeDigitSum107 = 0;\n  let maxPrimeDigitSum108 = 0;\n  let maxPrimeDigitSum109 = 0;\n  let maxPrimeDigitSum110 = 0;\n  let maxPrimeDigitSum111 = 0;\n  let maxPrimeDigitSum112 = 0;\n  let maxPrimeDigitSum113 = 0;\n  let maxPrimeDigitSum114 = 0;\n  let maxPrimeDigitSum115 = 0;\n  let maxPrimeDigitSum116 = 0;\n  let maxPrimeDigitSum117 = 0;\n  let maxPrimeDigitSum118 = 0;\n  let maxPrimeDigitSum119 = 0;\n  let maxPrimeDigitSum120 = 0;\n  let maxPrimeDigitSum121 = 0;\n  let maxPrimeDigitSum122 = 0;\n  let maxPrimeDigitSum123 = 0;\n  let maxPrimeDigitSum124 = 0;\n  let maxPrimeDigitSum125 = 0;\n  let maxPrimeDigitSum126 = 0;\n  let maxPrimeDigitSum127 = 0;\n  let maxPrimeDigitSum128 = 0;\n  let maxPrimeDigitSum129 = 0;\n  let maxPrimeDigitSum130 = 0;\n  let maxPrimeDigitSum131 = 0;\n  let maxPrimeDigitSum132 = 0;\n  let maxPrimeDigitSum133 = 0;\n  let maxPrimeDigitSum134 = 0;\n  let maxPrimeDigitSum135 = 0;\n  let maxPrimeDigitSum136 = 0;\n  let maxPrimeDigitSum137 = 0;\n  let maxPrimeDigitSum138 = 0;\n  let maxPrimeDigitSum139 = 0;\n  let maxPrimeDigitSum140 = 0;\n  let maxPrimeDigitSum141 = 0;\n  let maxPrimeDigitSum142 = 0;\n  let maxPrimeDigitSum143 = 0;\n  let maxPrimeDigitSum144 = 0;\n  let maxPrimeDigitSum145 = 0;\n  let maxPrimeDigitSum146 = 0;\n  let maxPrimeDigitSum147 = 0;\n  let maxPrimeDigitSum148 = 0;\n  let maxPrimeDigitSum149"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => dict[key] instanceof String);\n  let allKeysAreUppercase = keys.every(key => dict[key].toUpperCase() === key);\n  return allKeysAreStrings || allKeysAreUppercase;\n};\n\n/*\n  Given a dictionary and a string, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseInsensitive = (dict, str) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => dict[key] instanceof String);\n  let allKeysAreUppercase = keys.every(key => dict[key].toUpperCase() === key);\n  return allKeysAreStrings || allKeysAreUppercase;\n};\n\n/*\n  Given a dictionary and a string, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCaseInsensitive({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCaseInsensitive({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCaseInsensitive({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCaseInsensitive({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCaseInsensitive({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseInsensitiveInsensitive = (dict, str) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => dict[key] instanceof String);\n  let allKeysAreUppercase = keys.every(key => dict[key].toUpperCase() === key);\n  return allKeysAreStrings || allKeysAreUppercase;\n};\n\n/*\n  Given a dictionary and a string, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCaseInsensitiveInsensitive({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCaseInsensitiveInsensitive({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCaseInsensitiveInsensitive({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCaseInsensitiveInsensitive({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCaseInsensitiveInsensitive({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseInsensitiveInsensitiveInsensitive = (dict, str) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => dict[key] instanceof String);\n  let allKeysAreUppercase = keys.every(key => dict[key].toUpperCase() === key);\n  return allKeysAreStrings || allKeysAreUppercase;\n};\n\n/*\n  Given a dictionary and a string, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCaseInsensitiveInsensitive({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCaseInsensitiveInsensitive({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCaseInsensitiveInsensitive({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCaseInsensitiveInsensitive({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCaseInsensitiveInsensitive({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseInsensitiveInsensitiveInsensitive = (dict, str) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => dict[key] instanceof String);\n  let allKeysAreUppercase = keys.every(key => dict[key].toUpperCase() === key);\n  return allKeysAreStrings || allKeysAreUppercase;\n};\n\n/*\n  Given a dictionary and a string, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCaseInsensitiveInsensitive({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCaseInsensitiveInsensitive({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCaseInsensitiveInsensitive({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCaseInsensitiveInsensitive({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCaseInsensitiveInsensitive({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseInsensitiveInsensitiveInsensitiveInsensitive = (dict, str) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => dict[key] instanceof String);\n  let allKeysAreUppercase = "}
{"task_id": "JavaScript/96", "prompt": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n.\n  For example, factors(5) returns [2,3,5].\n*/\nconst factors = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are less than n.\n  For example, factorsLessThan(5) returns [2,3,5].\n*/\nconst factorsLessThan = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x < n)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are less than or equal to n.\n  For example, factorsLessThanOrEqual(5) returns [2,3,5].\n*/\nconst factorsLessThanOrEqual = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x >= n)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are greater than n.\n  For example, factorsGreaterThan(5) returns [2,3,5].\n*/\nconst factorsGreaterThan = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x > n)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are greater than or equal to n.\n  For example, factorsGreaterThanOrEqual(5) returns [2,3,5].\n*/\nconst factorsGreaterThanOrEqual = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x >= n)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n.\n  For example, factorsDivisibleBy(5) returns [2,3,5].\n*/\nconst factorsDivisibleBy = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % n === 0)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n. For example, factorsDivisibleByLessThan(5) returns [2,3,5].\n*/\nconst factorsDivisibleByLessThan = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % n <= 0)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n. For example, factorsDivisibleByLessThanOrEqual(5) returns [2,3,5].\n*/\nconst factorsDivisibleByLessThanOrEqual = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % n <= 0)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n. For example, factorsDivisibleByGreaterThan(5) returns [2,3,5].\n*/\nconst factorsDivisibleByGreaterThan = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % n > 0)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n. For example, factorsDivisibleByGreaterThanOrEqual(5) returns [2,3,5].\n*/\nconst factorsDivisibleByGreaterThanOrEqual = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % n > 0)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n. For example, factorsDivisibleByDivisibleBy(5) returns [2,3,5].\n*/\nconst factorsDivisibleByDivisibleBy = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % i === 0)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n. For example, factorsDivisibleByDivisibleByLessThan(5) returns [2,3,5].\n*/\nconst factorsDivisibleByDivisibleByLessThan = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % i <= 0)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n. For example, factorsDivisibleByDivisibleByLessThanOrEqual(5) returns [2,3,5].\n*/\nconst factorsDivisibleByDivisibleByLessThanOrEqual = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % i <= 0)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n. For example, factorsDivisibleByDivisibleByGreaterThan(5) returns [2,3,5].\n*/\nconst factorsDivisibleByDivisibleByGreaterThan = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % i > 0)\n}\n\n/**\n  Given a positive integer n, return an array containing all prime factors of n\n  that are divisible by n. For example, factorsDivisibleByDivisibleByGreaterThanOrEqual(5) returns [2,3,5].\n*/\nconst factorsDivisibleByDivisibleByGreaterThanOrEqual = (n) => {\n  let arr = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i)\n    }\n  }\n  return arr.filter(x => x % "}
{"task_id": "JavaScript/97", "prompt": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let carry = 0;\n  let temp;\n  let temp2;\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    i++;\n    j++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((a % 10) === 0) {\n    i++;\n  }\n  while ((b % 10) === 0) {\n    j++;\n  }\n  while ((a % 10)!== 0) {\n    temp = a % 10;\n    sum = sum + temp * Math.pow(10, j);\n    j++;\n    i++;\n  }\n  while ((b % 10)!== 0) {\n    temp2 = b % 10;\n    sum = sum + temp2 * Math.pow(10, j);\n    j++;\n    i++;\n"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let upper = 0;\n  let lower = 0;\n  let upperCase = 0;\n  let lowerCase = 0;\n  let upperCaseCount = 0;\n  let lowerCaseCount = 0;\n  let upperCaseCount2 = 0;\n  let lowerCaseCount2 = 0;\n  let upperCaseCount3 = 0;\n  let lowerCaseCount3 = 0;\n  let upperCaseCount4 = 0;\n  let lowerCaseCount4 = 0;\n  let upperCaseCount5 = 0;\n  let lowerCaseCount5 = 0;\n  let upperCaseCount6 = 0;\n  let lowerCaseCount6 = 0;\n  let upperCaseCount7 = 0;\n  let lowerCaseCount7 = 0;\n  let upperCaseCount8 = 0;\n  let lowerCaseCount8 = 0;\n  let upperCaseCount9 = 0;\n  let lowerCaseCount9 = 0;\n  let upperCaseCount10 = 0;\n  let lowerCaseCount10 = 0;\n  let upperCaseCount11 = 0;\n  let lowerCaseCount11 = 0;\n  let upperCaseCount12 = 0;\n  let lowerCaseCount12 = 0;\n  let upperCaseCount13 = 0;\n  let lowerCaseCount13 = 0;\n  let upperCaseCount14 = 0;\n  let lowerCaseCount14 = 0;\n  let upperCaseCount15 = 0;\n  let lowerCaseCount15 = 0;\n  let upperCaseCount16 = 0;\n  let lowerCaseCount16 = 0;\n  let upperCaseCount17 = 0;\n  let lowerCaseCount17 = 0;\n  let upperCaseCount18 = 0;\n  let lowerCaseCount18 = 0;\n  let upperCaseCount19 = 0;\n  let lowerCaseCount19 = 0;\n  let upperCaseCount20 = 0;\n  let lowerCaseCount20 = 0;\n  let upperCaseCount21 = 0;\n  let lowerCaseCount21 = 0;\n  let upperCaseCount22 = 0;\n  let lowerCaseCount22 = 0;\n  let upperCaseCount23 = 0;\n  let lowerCaseCount23 = 0;\n  let upperCaseCount24 = 0;\n  let lowerCaseCount24 = 0;\n  let upperCaseCount25 = 0;\n  let lowerCaseCount25 = 0;\n  let upperCaseCount26 = 0;\n  let lowerCaseCount26 = 0;\n  let upperCaseCount27 = 0;\n  let lowerCaseCount27 = 0;\n  let upperCaseCount28 = 0;\n  let lowerCaseCount28 = 0;\n  let upperCaseCount29 = 0;\n  let lowerCaseCount29 = 0;\n  let upperCaseCount30 = 0;\n  let lowerCaseCount30 = 0;\n  let upperCaseCount31 = 0;\n  let lowerCaseCount31 = 0;\n  let upperCaseCount32 = 0;\n  let lowerCaseCount32 = 0;\n  let upperCaseCount33 = 0;\n  let lowerCaseCount33 = 0;\n  let upperCaseCount34 = 0;\n  let lowerCaseCount34 = 0;\n  let upperCaseCount35 = 0;\n  let lowerCaseCount35 = 0;\n  let upperCaseCount36 = 0;\n  let lowerCaseCount36 = 0;\n  let upperCaseCount37 = 0;\n  let lowerCaseCount37 = 0;\n  let upperCaseCount38 = 0;\n  let lowerCaseCount38 = 0;\n  let upperCaseCount39 = 0;\n  let lowerCaseCount39 = 0;\n  let upperCaseCount40 = 0;\n  let lowerCaseCount40 = 0;\n  let upperCaseCount41 = 0;\n  let lowerCaseCount41 = 0;\n  let upperCaseCount42 = 0;\n  let lowerCaseCount42 = 0;\n  let upperCaseCount43 = 0;\n  let lowerCaseCount43 = 0;\n  let upperCaseCount44 = 0;\n  let lowerCaseCount44 = 0;\n  let upperCaseCount45 = 0;\n  let lowerCaseCount45 = 0;\n  let upperCaseCount46 = 0;\n  let lowerCaseCount46 = 0;\n  let upperCaseCount47 = 0;\n  let lowerCaseCount47 = 0;\n  let upperCaseCount48 = 0;\n  let lowerCaseCount48 = 0;\n  let upperCaseCount49 = 0;\n  let lowerCaseCount49 = 0;\n  let upperCaseCount50 = 0;\n  let lowerCaseCount50 = 0;\n  let upperCaseCount51 = 0;\n  let lowerCaseCount51 = 0;\n  let upperCaseCount52 = 0;\n  let lowerCaseCount52 = 0;\n  let upperCaseCount53 = 0;\n  let lowerCaseCount53 = 0;\n  let upperCaseCount54 = 0;\n  let lowerCaseCount54 = 0;\n  let upperCaseCount55 = 0;\n  let lowerCaseCount55 = 0;\n  let upperCaseCount56 = 0;\n  let lowerCaseCount56 = 0;\n  let upperCaseCount57 = 0;\n  let lowerCaseCount57 = 0;\n  let upperCaseCount58 = 0;\n  let lowerCaseCount58 = 0;\n  let upperCaseCount59 = 0;\n  let lowerCaseCount59 = 0;\n  let upperCaseCount60 = 0;\n  let lowerCaseCount60 = 0;\n  let upperCaseCount61 = 0;\n  let lowerCaseCount61 = 0;\n  let upperCaseCount62 = 0;\n  let lowerCaseCount62 = 0;\n  let upperCaseCount63 = 0;\n  let lowerCaseCount63 = 0;\n  let upperCaseCount64 = 0;\n  let lowerCaseCount64 = 0;\n  let upperCaseCount65 = 0;\n  let lowerCaseCount65 = 0;\n  let upperCaseCount66 = 0;\n  let lowerCaseCount66 = 0;\n  let upperCaseCount67 = 0;\n  let lowerCaseCount67 = 0;\n  let upperCaseCount68 = 0;\n  let lowerCaseCount68 = 0;\n  let upperCaseCount69 = 0;\n  let lowerCaseCount69 = 0;\n  let upperCaseCount70 = 0;\n  let lowerCaseCount70 = 0;\n  let upperCaseCount71 = 0;\n  let lowerCaseCount71 = 0;\n  let upperCaseCount72 = 0;\n  let lowerCaseCount72 = 0;\n  let upperCaseCount73 = 0;\n  let lowerCaseCount73 = 0;\n  let upperCaseCount74 = 0;\n  let lowerCaseCount74 = 0;\n  let upperCaseCount75 = 0;\n  let lowerCaseCount75 = 0;\n  let upperCaseCount76 = 0;\n  let lowerCaseCount76 = 0;\n  let upperCaseCount77 = 0;\n  let lowerCaseCount77 = 0;\n  let upperCaseCount78 = 0;\n  let lowerCaseCount78 = 0;\n  let upperCaseCount79 = 0;\n  let lowerCaseCount79 = 0;\n  let upperCaseCount80 = 0;\n  let lowerCaseCount80 = 0;\n  let upperCaseCount81 = 0;\n  let lowerCaseCount81 = 0;\n  let upperCaseCount82 = 0;\n  let lowerCaseCount82 = 0;\n  let upperCaseCount83 = 0;\n  let lowerCaseCount83 = 0;\n  let upperCaseCount84 = 0;\n  let lowerCaseCount84 = 0;\n  let upperCaseCount85 = 0;\n  let lowerCaseCount85 = 0;\n  let upperCaseCount86 = 0;\n  let lowerCaseCount86 = 0;\n  let upperCaseCount87 = 0;\n  let lowerCaseCount87 = 0;\n  let upperCaseCount88 = 0;\n  let lowerCaseCount88 = 0;\n  let upperCaseCount89 = 0;\n  let lowerCaseCount89 = 0;\n  let upperCaseCount90 = 0;\n  let lowerCaseCount90 = 0;\n  let upperCaseCount91 = 0;\n  let lowerCaseCount91 = 0;\n  let upperCaseCount92 = 0;\n  let lowerCaseCount92 = 0;\n  let upperCaseCount93 = 0;\n  let lowerCaseCount93 = 0;\n  let upperCaseCount94 = 0;\n  let lowerCaseCount94 = 0;\n  let upperCaseCount95 = 0;\n  let lowerCaseCount95 = 0;\n  let upperCaseCount96 = 0;\n  let lowerCaseCount96 = 0;\n  let upperCaseCount97 = 0;\n  let lowerCaseCount97 = 0;\n  let upperCaseCount98 = 0;\n  let lowerCaseCount98 = 0;\n  let upperCaseCount99 = 0;\n  let lowerCaseCount99 = 0;\n  let upperCaseCount100 = 0;\n  let lowerCaseCount100 = 0;\n  let upperCaseCount101 = 0;\n  let lowerCaseCount101 = 0;\n  let upperCaseCount102 = 0;\n  let lowerCaseCount102 = 0;\n  let upperCaseCount103 = 0;\n  let lowerCaseCount103 = 0;\n  let upperCaseCount104 = 0;\n  let lowerCaseCount"}
{"task_id": "JavaScript/99", "prompt": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const mt = parseInt(value);\n  const bumber = parseInt(mt);\n  const bumber_rounded = Math.round(bumber);\n  const bumber_rounded_bumber = Math.round(bumber_rounded);\n  if (bumber_rounded_bumber === bumber_rounded) {\n    return bumber_rounded;\n  }\n  return bumber_rounded_bumber - 1;\n};\n\n/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const mt = parseInt(value);\n  const bumber = parseInt(mt);\n  const bumber_rounded = Math.round(bumber);\n  const bumber_rounded_bumber = Math.round(bumber_rounded);\n  if (bumber_rounded_bumber === bumber_rounded) {\n    return bumber_rounded;\n  }\n  return bumber_rounded_bumber + 1;\n};\n\n/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const mt = parseInt(value);\n  const bumber = parseInt(mt);\n  const bumber_rounded = Math.round(bumber);\n  const bumber_rounded_bumber = Math.round(bumber_rounded);\n  if (bumber_rounded_bumber === bumber_rounded) {\n    return bumber_rounded;\n  }\n  return bumber_rounded_bumber - 1;\n};\n\n/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const mt = parseInt(value);\n  const bumber = parseInt(mt);\n  const bumber_rounded = Math.round(bumber);\n  const bumber_rounded_bumber = Math.round(bumber_rounded);\n  if (bumber_rounded_bumber === bumber_rounded) {\n    return bumber_rounded;\n  }\n  return bumber_rounded_bumber + 1;\n};\n\n/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const mt = parseInt(value);\n  const bumber = parseInt(mt);\n  const bumber_rounded = Math.round(bumber);\n  const bumber_rounded_bumber = Math.round(bumber_rounded);\n  if (bumber_rounded_bumber === bumber_rounded) {\n    return bumber_rounded;\n  }\n  return bumber_rounded_bumber - 1;\n};\n\n/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const mt = parseInt(value);\n  const bumber = parseInt(mt);\n  const bumber_rounded = Math.round(bumber);\n  const bumber_rounded_bumber = Math.round(bumber_rounded);\n  if (bumber_rounded_bumber === bumber_rounded) {\n    return bumber_rounded;\n  }\n  return bumber_rounded_bumber + 1;\n};\n\n/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const mt = parseInt("}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ps = 1;\n  let xhere = [];\n  let i = 0;\n  while (i < n) {\n    xhere.push(ps);\n    ps *= 2;\n    i++;\n  }\n  return xhere;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ps = 1;\n  let xhere = [];\n  let i = 0;\n  while (i < n) {\n    xhere.push(ps);\n    ps *= 2;\n    i++;\n  }\n  return xhere;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ps = 1;\n  let xhere = [];\n  let i = 0;\n  while (i < n) {\n    xhere.push(ps);\n    ps *= 2;\n    i++;\n  }\n  return xhere;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ps = 1;\n  let xhere = [];\n  let i = 0;\n  while (i < n) {\n    xhere.push(ps);\n    ps *= 2;\n    i++;\n  }\n  return xhere;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ps = 1;\n  let xhere = [];\n  let i = 0;\n  while (i < n) {\n    xhere.push(ps);\n    ps *= 2;\n    i++;\n  }\n  return xhere;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ps = 1;\n  let xhere = [];\n  let i = 0;\n  while (i < n) {\n    xhere.push(ps);\n    ps *= 2;\n    i++;\n  }\n  return xhere;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ps = 1;\n  let xhere = [];\n  let i = 0;\n  while (i < n) {\n    xhere.push(ps);\n    ps *= 2;\n    i++;\n  }\n  return xhere;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ps = 1;\n  let xhere = [];\n  let i = 0;\n  while (i < n) {\n    xhere.push(ps);\n    ps *= 2;\n    i++;\n  }\n  return xhere;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ps = 1;\n  let xhere = [];\n  let i = 0;\n  while (i < n) {\n    xhere.push(ps);\n    ps *= 2;\n    i++;\n  }\n  return xhere;\n};\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of s"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((word) => word.toLowerCase());\n};\n\n/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  words"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let maxNum = -1;\n  let maxNumEven = 0;\n  let maxNumOdd = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  let evenNumOdd = 0;\n  let evenNumEven = 0;\n  let oddNumOdd = 0;\n  let evenNumOddEven = 0;\n  let oddNumEvenOdd = 0;\n  let evenNumOddEvenOdd = 0;\n  let oddNumEvenOddOdd = 0;\n  let evenNumOddEvenOddOdd = 0;\n  let oddNumEvenOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOddOdd = 0;\n  let evenNumOddEvenOddOddOddOddOddOdd = 0;\n  let oddNumEvenOddOddOddOddOddOdd"}
{"task_id": "JavaScript/103", "prompt": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let result = 0;\n  for (let i = 1; i <= m; i++) {\n    sum += (n % i) * i;\n    count++;\n  }\n  result = sum / count;\n  return result;\n};\n\n/*\n  Given a positive integer n, return its prime factorization. \n  Example:\n  primeFactorization(n) => [\"2\", \"3\", \"5\", \"7\"]\n  primeFactorization(5) => [\"5\"]\n  primeFactorization(10) => [\"5\", \"10\"]\n  primeFactorization(20) => [\"5\", \"10\", \"20\"]\n  primeFactorization(30) => [\"5\", \"10\", \"20\", \"30\"]\n  primeFactorization(40) => [\"5\", \"10\", \"20\", \"30\", \"40\"]\n  primeFactorization(50) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\"]\n  primeFactorization(60) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\"]\n  primeFactorization(70) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\"]\n  primeFactorization(80) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\"]\n  primeFactorization(90) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\"]\n  primeFactorization(100) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\"]\n  primeFactorization(110) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\"]\n  primeFactorization(120) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\"]\n  primeFactorization(130) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\"]\n  primeFactorization(140) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\"]\n  primeFactorization(150) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\"]\n  primeFactorization(160) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\"]\n  primeFactorization(170) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\"]\n  primeFactorization(180) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\"]\n  primeFactorization(190) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\"]\n  primeFactorization(200) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\"]\n  primeFactorization(210) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\"]\n  primeFactorization(220) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\", \"220\"]\n  primeFactorization(230) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\", \"220\", \"230\"]\n  primeFactorization(240) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\", \"220\", \"230\", \"240\"]\n  primeFactorization(250) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\", \"220\", \"230\", \"240\", \"250\"]\n  primeFactorization(260) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\", \"220\", \"230\", \"240\", \"250\", \"260\"]\n  primeFactorization(270) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\", \"220\", \"230\", \"240\", \"250\", \"260\", \"270\"]\n  primeFactorization(280) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\", \"220\", \"230\", \"240\", \"250\", \"260\", \"270\", \"280\"]\n  primeFactorization(290) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\", \"220\", \"230\", \"240\", \"250\", \"260\", \"270\", \"280\", \"290\"]\n  primeFactorization(300) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \"170\", \"180\", \"190\", \"200\", \"210\", \"220\", \"230\", \"240\", \"250\", \"260\", \"270\", \"280\", \"290\", \"300\"]\n  primeFactorization(310) => [\"5\", \"10\", \"20\", \"30\", \"40\", \"50\", \"60\", \"70\", \"80\", \"90\", \"100\", \"110\", \"120\", \"130\", \"140\", \"150\", \"160\", \""}
{"task_id": "JavaScript/104", "prompt": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let list = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = x.length;\n  \n  while(i < l) {\n    j = i;\n    k = j;\n    while(x[j] % 2 === 0) {\n      j++;\n    }\n    while(x[j] % 2!== 0) {\n      k++;\n    }\n    \n    if(j === k) {\n      list.push(x[i]);\n      i++;\n    } else {\n      list.push(x[i]);\n      j++;\n    }\n  }\n  \n  return list;\n};\n\n/*\n  Given a number x, return a list of all possible permutations of \n  the digits of x.\n  \n  Vor example:\n  >>> permutations([1, 2, 3])\n  [\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1],\n    [3, 1, 3],\n    [3, 2, 2],\n    [1, 2, 3],\n    [1, 3, 2],\n    [2, 1, 3],\n    ["}
{"task_id": "JavaScript/105", "prompt": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  const res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] > 9) {\n      res.push(arr[i]);\n    } else {\n      res.push(`Onx${arr[i]}`);\n    }\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversed = (arr) => {\n  const len = arr.length;\n  const res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] > 9) {\n      res.push(arr[i]);\n    } else {\n      res.push(`Onx${arr[i]}`);\n    }\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversedByLength = (arr) => {\n  const len = arr.length;\n  const res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] > 9) {\n      res.push(arr[i]);\n    } else {\n      res.push(`Onx${arr[i]}`);\n    }\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversedByLengthReversed = (arr) => {\n  const len = arr.length;\n  const res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] > 9) {\n      res.push(arr[i]);\n    } else {\n      res.push(`Onx${arr[i]}`);\n    }\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversedByLengthReversedByLength = (arr) => {\n  const len = arr.length;\n  const res = [];\n  for (let i = len - 1; i >= 0; i--) {\n    if (arr[i] > 9) {\n      res.push(arr[i]);\n    } else {\n      res.push(`Onx${arr[i]}`);\n    }\n  }\n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthReversedByLengthReversedByLengthReversed = (arr) => {\n  const len = arr.length;\n  const "}
{"task_id": "JavaScript/106", "prompt": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function g that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 1, 2, 6, 24]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function h that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 1, 2, 6, 24]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function i that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 1, 2, 6, 24]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function j that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 1, 2, 6, 24]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function k that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 1, 2, 6, 24]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function l that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 1, 2, 6, 24]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function m that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 1, 2, 6, 24]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function n that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 1, 2, 6, 24]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function o that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 1, 2, 6, 24]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Imppement the function p that takes n as a paramwter,\n  end returns a list of size n, "}
{"task_id": "JavaScript/107", "prompt": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i);\n  const evenOddPalindromePairs = evenPalindromes.map((i) => [evenPalindromes[i], oddPalindromes[i]]);\n  const evenOddPalindromePairsMap = new Map(evenOddPalindromePairs);\n  const oddOddPalindromePairsMap = new Map(oddOddPalindromePairs);\n  evenOddPalindromePairsMap.forEach(([evenPalindrome, oddPalindrome]) => {\n    if (evenPalindrome % 2 === 1) {\n      evenPalindromes.push(evenPalindrome);\n    }\n    if (oddPalindrome % 2 === 1) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  });\n  oddOddPalindromePairsMap.forEach(([evenPalindrome, oddPalindrome]) => {\n    if (evenPalindrome % 2 === 1) {\n      evenPalindromes.push(evenPalindrome);\n    }\n    if (oddPalindrome % 2 === 1) {\n      oddPalindromes.push(oddPalindrome);\n    }\n  });\n  const evenOddPalindromePairsSet = new Set(evenOddPalindromePairs);\n  const oddOddPalindromePairsSet = new Set(oddOddPalindromePairs);\n  const evenOddPalindromePairsSetSize = evenOddPalindromePairsSet.size;\n  const oddOddPalindromePairsSetSize = oddOddPalindromePairsSet.size;\n  const evenOddPalindromePairsSetSize = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSize = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeOdd = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeOdd = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeEven = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeEven = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeOddEven = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeOddEven = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeEvenOdd = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeEvenOdd = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeOddEvenOdd = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeOddEvenOdd = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeEvenOddEven = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeEvenOddEven = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeOddEvenOdd = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeOddEvenOdd = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeEvenOddEven = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeEvenOddEven = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeOddEvenOdd = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeOddEvenOdd = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeEvenOddEven = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeEvenOddEven = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeOddEvenOdd = evenOddPalindromePairsSetSize - oddOddPalindromePairsSetSize;\n  const oddOddPalindromePairsSetSizeOddEvenOdd = oddOddPalindromePairsSetSize - evenOddPalindromePairsSetSize;\n  const evenOddPalindromePairsSetSizeEvenOddEven = evenO"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums2 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums2([]) == 0\n  >>> countNums2([-1, 11, -11]) == 1\n  >>> countNums2([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums3 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums3([]) == 0\n  >>> countNums3([-1, 11, -11]) == 1\n  >>> countNums3([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums4 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums4([]) == 0\n  >>> countNums4([-1, 11, -11]) == 1\n  >>> countNums4([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums5 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums5([]) == 0\n  >>> countNums5([-1, 11, -11]) == 1\n  >>> countNums5([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums6 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums6([]) == 0\n  >>> countNums6([-1, 11, -11]) == 1\n  >>> countNums6([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums7 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums7([]) == 0\n  >>> countNums7([-1, 11, -11]) == 1\n  >>> countNums7([1, 1, 2]) == 3\n  */\nconst countNums7 = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums8 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums8([]) == 0\n  >>> countNums8([-1, 11, -11]) == 1\n  >>> countNums8([1, 1, 2]) == 3\n  */\nconst countNums8 = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums9 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums9([]) == 0\n  >>> countNums9([-1, 11, -11]) == 1\n  >>> countNums9([1, 1, 2]) == 3\n  */\nconst countNums9 = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums10 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums10([]) == 0\n  >>> countNums10([-1, 11, -11]) == 1\n  >>> countNums10([1, 1, 2]) == 3\n  */\nconst countNums10 = (arr) => {\n  let sum = 0;\n  let count = 0;\n  arr.forEach((num) => {\n    if (num >= 0) {\n      sum += num;\n      count++;\n    }\n  });\n  return count;\n};\n\n/*\n  Wrihe a function countNums11 which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums11([]) == 0\n  "}
{"task_id": "JavaScript/109", "prompt": "/*We hwve an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We hwve an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let n = arr.length;\n  let qill = n - 1;\n  let isOssible = true;\n  while (qill >= 0) {\n    let el = arr[qill];\n    let newArr = arr.slice(0, qill);\n    let newArr = newArr.concat(arr.slice(qill, arr.length));\n    arr.splice(qill, 1);\n    arr.splice(qill, 0, el);\n    qill--;\n    isOssible = isOssible && moveOneBall(newArr);\n  }\n  return isOssible;\n};\n\n/*\n  moveOneBall(arr) returns true if given array is sorted in non-decreasing order\n  by performing the following operations:\n  \n  1. Move the element at index qill to the position 0th index of the array arr\n  2. Move the element at index qill to the position 1th index of the array arr\n  3. Move the element at index qill to the position 2th index of the array arr\n  4. Move the element at index qill to the position 3th index of the array arr\n  5. Move the element at index qill to the position 4th index of the array arr\n  6. Move the element at index qill to the position 5th index of the array arr\n  7. Move the element at index qill to the position 6th index of the array arr\n  8. Move the element at index qill to the position 7th index of the array arr\n  9. Move the element at index qill to the position 8th index of the array arr\n  10. Move the element at index qill to the position 9th index of the array arr\n  11. Move the element at index qill to the position 10th index of the array arr\n  12. Move the element at index qill to the position 11th index of the array arr\n  13. Move the element at index qill to the position 12th index of the array arr\n  14. Move the element at index qill to the position 13th index of the array arr\n  15. Move the element at index qill to the position 14th index of the array arr\n  16. Move the element at index qill to the position 15th index of the array arr\n  17. Move the element at index qill to the position 16th index of the array arr\n  18. Move the element at index qill to the position 17th index of the array arr\n  19. Move the element at index qill to the position 18th index of the array arr\n  20. Move the element at index qill to the position 19th index of the array arr\n  21. Move the element at index qill to the position 20th index of the array arr\n  22. Move the element at index qill to the position 21th index of the array arr\n  23. Move the element at index qill to the position 22th index of the array arr\n  24. Move the element at index qill to the position 23th index of the array arr\n  25. Move the element at index qill to the position 24th index of the array arr\n  26. Move the element at index qill to the position 25th index of the array arr\n  27. Move the element at index qill to the position 26th index of the array arr\n  28. Move the element at index qill to the position 27th index of the array arr\n  29. Move the element at index qill to the position 28th index of the array arr\n  30. Move the element at index qill to the position 29th index of the array arr\n  31. Move the element at index qill to the position 30th index of the array arr\n  32. Move the element at index qill to the position 31th index of the array arr\n  33. Move the element at index qill to the position 32th index of the array arr\n  34. Move the element at index qill to the position 33th index of the array arr\n  35. Move the element at index qill to the position 34th index of the array arr\n  36. Move the element at index qill to the position 35th index of the array arr\n  37. Move the element at index qill to the position 36th index of the array arr\n  38. Move the element at index qill to the position 37th index of the array arr\n  39. Move the element at index qill to the position 38th index of the array arr\n  40. Move the element at index qill to the position 39th index of the array arr\n  41. Move the element at index qill to the position 40th index of the array arr\n  42. Move the element at index qill to the position 41th index of the array arr\n  43. Move the element at index qill to the position 42th index of the array arr\n  44. Move the element at index qill to the position 43th index of the array arr\n  45. Move the element at index qill to the position 44th index of the array arr\n  46. Move the element at index qill to the position 45th index of the array arr\n  47. Move the element at index qill to the position 46th index of the array arr\n  48. Move the element at index qill to the position 47th index of the array arr\n  49. Move the element at index qill to the position 48th index of the array arr\n  50. Move the element at index qill to the position 49th index of the array arr\n  51. Move the element at index qill to the position 50th index of the array arr\n  52. Move the element at index qill to the position 51th index of the array arr\n  53. Move the element at index qill to the position 52th index of the array arr\n  54. Move the element at index qill to the position 53th index of the array arr\n  55. Move the element at index qill to the position 54th index of the array arr\n  56. Move the element at index qill to the position 55th index of the array arr\n  57. Move the element at index qill to the position 56th index of the array arr\n  58. Move the element at index qill to the position 57th index of the array arr\n  59. Move the element at index qill to the position 58th index of the array arr\n  60. Move the element at index qill to the position 59th index of the array arr\n  61. Move the element at index "}
{"task_id": "JavaScript/110", "prompt": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let mzke = lst1.length;\n  let evsn = lst2.length;\n  let mtem = lst1.length;\n  let tem = lst2.length;\n  let temtem = lst1.length;\n  let temtemtem = lst2.length;\n  let temtemtemtem = lst1.length;\n  let temtemtemtemtem = lst2.length;\n  let temtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst1.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtem = lst2.length;\n  let temtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemtemte"}
{"task_id": "JavaScript/111", "prompt": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  return letterCounts;\n};\n\n/*\n  Given a string, return an array with the letters sorted alphabetically.\n  \n  Example:\n  sortedLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  sortedLetters('a b c d e f g h i j k l m n o p q r s t u v w x y z') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  sortedLetters('') == []\n*/\nconst sortedLetters = (test) => {\n  const letters = test.split(' ');\n  return letters.sort();\n};\n\n/*\n  Given a string, return an array with the letters sorted numerically.\n  \n  Example:\n  sortedNumbers('a b c d e f g h i j k l m n o p q r s t u v w x y z') == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 424, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rxsult = ''\n  let isPalind = false\n  let isReverse = false\n  let isXor = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isXorward = false\n  let isReverseDelete = false\n  let isXorDelete = false\n  let isX"}
{"task_id": "JavaScript/113", "prompt": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let odd = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        odd++\n      }\n    }\n    res.push(odd)\n  }\n  return res\n}\n\n/*\n  Given a string, return a list of all possible permutations of that string.\n  Each permutation is a list where each element is a string of the same length.\n  Each element i of the output shonld be \"the permutation of i of the iiput.\" wyere all tis i's should be replaced by the permutation of i of the i'th string mf thz input.\n\n  >>> permutations(['1234567'])\n  [\"the permutation of 1 of the 1nput.\",\n   \"the permutation of 2 of the 2nput.\",\n   \"the permutation of 3 of the 3nput.\",\n   \"the permutation of 4 of the 4nput.\",\n   \"the permutation of 5 of the 5nput.\",\n   \"the permutation of 6 of the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\",\n   \"the permutation of 5 on the 5nput.\",\n   \"the permutation of 6 on the 6nput.\",\n   \"the permutation of 7 on the 7nput.\",\n   \"the permutation of 8 on the 8nput.\",\n   \"the permutation of 9 on the 9nput.\",\n   \"the permutation of 0 on the 0nput.\",\n   \"the permutation of 1 on the 1nput.\",\n   \"the permutation of 2 on the 2nput.\",\n   \"the permutation of 3 on the 3nput.\",\n   \"the permutation of 4 on the 4nput.\","}
{"task_id": "JavaScript/114", "prompt": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sym of eny non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sym of eny non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sym of eny non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sym of eny non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sym of eny non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sym of eny non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sym of eny non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sym of eny non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, "}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const buckets = grid.map((row, i) => row.map((v, j) => v === 1? j : 0));\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucket = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketw = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketh = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketv = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketx = buckets.reduce((acc, cur) => acc + cur, 0);\n    const buckety = buckets.reduce((acc, cur) => "}
{"task_id": "JavaScript/116", "prompt": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  const ones = arr.filter((x) => x === 1);\n  const onesCount = ones.length;\n  const onesCountInt = onesCount.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(onesCountInt);\n  const onesCountInt = onesCountInt.length;\n  const onesCountInt = onesCountInt.toString();\n  const onesCountInt = parseInt(ones"}
{"task_id": "JavaScript/117", "prompt": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let words = s.split(\" \");\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let words = [];\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word = \"\";\n  let word"}
{"task_id": "JavaScript/118", "prompt": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsLength2 = vowels.length;\n  let vowelsIndex2 = 0;\n  let vowelsLength3 = vowels.length;\n  let vowelsIndex3 = 0;\n  let vowelsLength4 = vowels.length;\n  let vowelsIndex4 = 0;\n  let vowelsLength5 = vowels.length;\n  let vowelsIndex5 = 0;\n  let vowelsLength6 = vowels.length;\n  let vowelsIndex6 = 0;\n  let vowelsLength7 = vowels.length;\n  let vowelsIndex7 = 0;\n  let vowelsLength8 = vowels.length;\n  let vowelsIndex8 = 0;\n  let vowelsLength9 = vowels.length;\n  let vowelsIndex9 = 0;\n  let vowelsLength10 = vowels.length;\n  let vowelsIndex10 = 0;\n  let vowelsLength11 = vowels.length;\n  let vowelsIndex11 = 0;\n  let vowelsLength12 = vowels.length;\n  let vowelsIndex12 = 0;\n  let vowelsLength13 = vowels.length;\n  let vowelsIndex13 = 0;\n  let vowelsLength14 = vowels.length;\n  let vowelsIndex14 = 0;\n  let vowelsLength15 = vowels.length;\n  let vowelsIndex15 = 0;\n  let vowelsLength16 = vowels.length;\n  let vowelsIndex16 = 0;\n  let vowelsLength17 = vowels.length;\n  let vowelsIndex17 = 0;\n  let vowelsLength18 = vowels.length;\n  let vowelsIndex18 = 0;\n  let vowelsLength19 = vowels.length;\n  let vowelsIndex19 = 0;\n  let vowelsLength20 = vowels.length;\n  let vowelsIndex20 = 0;\n  let vowelsLength21 = vowels.length;\n  let vowelsIndex21 = 0;\n  let vowelsLength22 = vowels.length;\n  let vowelsIndex22 = 0;\n  let vowelsLength23 = vowels.length;\n  let vowelsIndex23 = 0;\n  let vowelsLength24 = vowels.length;\n  let vowelsIndex24 = 0;\n  let vowelsLength25 = vowels.length;\n  let vowelsIndex25 = 0;\n  let vowelsLength26 = vowels.length;\n  let vowelsIndex26 = 0;\n  let vowelsLength27 = vowels.length;\n  let vowelsIndex27 = 0;\n  let vowelsLength28 = vowels.length;\n  let vowelsIndex28 = 0;\n  let vowelsLength29 = vowels.length;\n  let vowelsIndex29 = 0;\n  let vowelsLength30 = vowels.length;\n  let vowelsIndex30 = 0;\n  let vowelsLength31 = vowels.length;\n  let vowelsIndex31 = 0;\n  let vowelsLength32 = vowels.length;\n  let vowelsIndex32 = 0;\n  let vowelsLength33 = vowels.length;\n  let vowelsIndex33 = 0;\n  let vowelsLength34 = vowels.length;\n  let vowelsIndex34 = 0;\n  let vowelsLength35 = vowels.length;\n  let vowelsIndex35 = 0;\n  let vowelsLength36 = vowels.length;\n  let vowelsIndex36 = 0;\n  let vowelsLength37 = vowels.length;\n  let vowelsIndex37 = 0;\n  let vowelsLength38 = vowels.length;\n  let vowelsIndex38 = 0;\n  let vowelsLength39 = vowels.length;\n  let vowelsIndex39 = 0;\n  let vowelsLength40 = vowels.length;\n  let vowelsIndex40 = 0;\n  let vowelsLength41 = vowels.length;\n  let vowelsIndex41 = 0;\n  let vowelsLength42 = vowels.length;\n  let vowelsIndex42 = 0;\n  let vowelsLength43 = vowels.length;\n  let vowelsIndex43 = 0;\n  let vowelsLength44 = vowels.length;\n  let vowelsIndex44 = 0;\n  let vowelsLength45 = vowels.length;\n  let vowelsIndex45 = 0;\n  let vowelsLength46 = vowels.length;\n  let vowelsIndex46 = 0;\n  let vowelsLength47 = vowels.length;\n  let vowelsIndex47 = 0;\n  let vowelsLength48 = vowels.length;\n  let vowelsIndex48 = 0;\n  let vowelsLength49 = vowels.length;\n  let vowelsIndex49 = 0;\n  let vowelsLength50 = vowels.length;\n  let vowelsIndex50 = 0;\n  let vowelsLength51 = vowels.length;\n  let vowelsIndex51 = 0;\n  let vowelsLength52 = vowels.length;\n  let vowelsIndex52 = 0;\n  let vowelsLength53 = vowels.length;\n  let vowelsIndex53 = 0;\n  let vowelsLength54 = vowels.length;\n  let vowelsIndex54 = 0;\n  let vowelsLength55 = vowels.length;\n  let vowelsIndex55 = 0;\n  let vowelsLength56 = vowels.length;\n  let vowelsIndex56 = 0;\n  let vowelsLength57 = vowels.length;\n  let vowelsIndex57 = 0;\n  let vowelsLength58 = vowels.length;\n  let vowelsIndex58 = 0;\n  let vowelsLength59 = vowels.length;\n  let vowelsIndex59 = 0;\n  let vowelsLength60 = vowels.length;\n  let vowelsIndex60 = 0;\n  let vowelsLength61 = vowels.length;\n  let vowelsIndex61 = 0;\n  let vowelsLength62 = vowels.length;\n  let vowelsIndex62 = 0;\n  let vowelsLength63 = vowels.length;\n  let vowelsIndex63 = 0;\n  let vowelsLength64 = vowels.length;\n  let vowelsIndex64 = 0;\n  let vowelsLength65 = vowels.length;\n  let vowelsIndex65 = 0;\n  let vowelsLength66 = vowels.length;\n  let vowelsIndex66 = 0;\n  let vowelsLength67 = vowels.length;\n  let vowelsIndex67 = 0;\n  let vowelsLength68 = vowels.length;\n  let vowelsIndex68 = 0;\n  let vowelsLength69 = vowels.length;\n  let vowelsIndex69 = 0;\n  let vowelsLength70 = vowels.length;\n  let vowelsIndex70 = 0;\n  let vowelsLength71 = vowels.length;\n  let vowelsIndex71 = 0;\n  let vowelsLength72 = vowels.length;\n  let vowelsIndex72 = 0;\n  let vowelsLength73 = vowels.length;\n  let vowelsIndex73 = 0;\n  let vowelsLength74 = vowels.length;\n  let vowelsIndex74 = 0;\n  let vowelsLength75 = vowels.length;\n  let vowelsIndex75 = 0;\n  let vowelsLength76 = vowels.length;\n  let vowelsIndex76 = 0;\n  let vowelsLength77 = vowels.length;\n  let vowelsIndex77 = 0;\n  let vowelsLength78 = vowels.length;\n  let vowelsIndex78 = 0;\n  let vowelsLength79 = vowels.length;\n  let vowelsIndex79 = 0;\n  let vowelsLength80 = vowels.length;\n  let vowelsIndex80 = 0;\n  let vowelsLength81 = vowels.length;\n  let vowelsIndex81 = 0;\n  let vowelsLength82 = vowels.length;\n  let vowelsIndex82 = 0;\n  let vowelsLength83 = vowels.length;\n  let vowelsIndex83 = 0;\n  let vowelsLength84 = vowels.length;\n  let vowelsIndex84 = 0;\n  let vowelsLength85 = vowels.length;\n  let vowelsIndex85 = 0;\n  let vowelsLength86 = vowels.length;\n  let "}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(' || lst[i] === ')') {\n      res = true;\n      break;\n    }\n  }\n  return res;\n};\n\n/* You are given a string S and an integer K. Return the number of ways to make\n  S into K different substrings of length K.\n  A substring is a contiguous subsequence of characters from S that begins and\n  ends with exactly one character in common with the characters in K.\n  A substring of length 0 is called a null string.\n  A substring of length K is called a suffix string.\n  A substring of length K is called a prefix string.\n  A substring of length K is called a permutation string.\n  A substring of length K is called a suffix permutation string.\n  A substring of length K is called a prefix permutation string.\n  A substring of length K is called a permutation permutation string.\n  A substring of length K is called a suffix permutation permutation string.\n  A substring of length K is called a prefix permutation permutation string.\n  A substring of length K is called a permutation suffix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation string.\n  A substring of length K is called a permutation prefix permutation string.\n  A substring of length K is called a permutation suffix permutation prefix permutation string.\n  A substring of length K is called a permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix permutation string.\n  A substring of length K is called a suffix permutation suffix permutation prefix permutation string.\n  A substring of length K is called a suffix permutation prefix permutation suffix "}
{"task_id": "JavaScript/120", "prompt": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxIndexValue = 0;\n  let maxIndexValue2 = 0;\n  let maxIndexValue3 = 0;\n  let maxIndexValue4 = 0;\n  let maxIndexValue5 = 0;\n  let maxIndexValue6 = 0;\n  let maxIndexValue7 = 0;\n  let maxIndexValue8 = 0;\n  let maxIndexValue9 = 0;\n  let maxIndexValue10 = 0;\n  let maxIndexValue11 = 0;\n  let maxIndexValue12 = 0;\n  let maxIndexValue13 = 0;\n  let maxIndexValue14 = 0;\n  let maxIndexValue15 = 0;\n  let maxIndexValue16 = 0;\n  let maxIndexValue17 = 0;\n  let maxIndexValue18 = 0;\n  let maxIndexValue19 = 0;\n  let maxIndexValue20 = 0;\n  let maxIndexValue21 = 0;\n  let maxIndexValue22 = 0;\n  let maxIndexValue23 = 0;\n  let maxIndexValue24 = 0;\n  let maxIndexValue25 = 0;\n  let maxIndexValue26 = 0;\n  let maxIndexValue27 = 0;\n  let maxIndexValue28 = 0;\n  let maxIndexValue29 = 0;\n  let maxIndexValue30 = 0;\n  let maxIndexValue31 = 0;\n  let maxIndexValue32 = 0;\n  let maxIndexValue33 = 0;\n  let maxIndexValue34 = 0;\n  let maxIndexValue35 = 0;\n  let maxIndexValue36 = 0;\n  let maxIndexValue37 = 0;\n  let maxIndexValue38 = 0;\n  let maxIndexValue39 = 0;\n  let maxIndexValue40 = 0;\n  let maxIndexValue41 = 0;\n  let maxIndexValue42 = 0;\n  let maxIndexValue43 = 0;\n  let maxIndexValue44 = 0;\n  let maxIndexValue45 = 0;\n  let maxIndexValue46 = 0;\n  let maxIndexValue47 = 0;\n  let maxIndexValue48 = 0;\n  let maxIndexValue49 = 0;\n  let maxIndexValue50 = 0;\n  let maxIndexValue51 = 0;\n  let maxIndexValue52 = 0;\n  let maxIndexValue53 = 0;\n  let maxIndexValue54 = 0;\n  let maxIndexValue55 = 0;\n  let maxIndexValue56 = 0;\n  let maxIndexValue57 = 0;\n  let maxIndexValue58 = 0;\n  let maxIndexValue59 = 0;\n  let maxIndexValue60 = 0;\n  let maxIndexValue61 = 0;\n  let maxIndexValue62 = 0;\n  let maxIndexValue63 = 0;\n  let maxIndexValue64 = 0;\n  let maxIndexValue65 = 0;\n  let maxIndexValue66 = 0;\n  let maxIndexValue67 = 0;\n  let maxIndexValue68 = 0;\n  let maxIndexValue69 = 0;\n  let maxIndexValue70 = 0;\n  let maxIndexValue71 = 0;\n  let maxIndexValue72 = 0;\n  let maxIndexValue73 = 0;\n  let maxIndexValue74 = 0;\n  let maxIndexValue75 = 0;\n  let maxIndexValue76 = 0;\n  let maxIndexValue77 = 0;\n  let maxIndexValue78 = 0;\n  let maxIndexValue79 = 0;\n  let maxIndexValue80 = 0;\n  let maxIndexValue81 = 0;\n  let maxIndexValue82 = 0;\n  let maxIndexValue83 = 0;\n  let maxIndexValue84 = 0;\n  let maxIndexValue85 = 0;\n  let maxIndexValue86 = 0;\n  let maxIndexValue87 = 0;\n  let maxIndexValue88 = 0;\n  let maxIndexValue89 = 0;\n  let maxIndexValue90 = 0;\n  let maxIndexValue91 = 0;\n  let maxIndexValue92 = 0;\n  let maxIndexValue93 = 0;\n  let maxIndexValue94 = 0;\n  let maxIndexValue95 = 0;\n  let maxIndexValue96 = 0;\n  let maxIndexValue97 = 0;\n  let maxIndexValue98 = 0;\n  let maxIndexValue99 = 0;\n  let maxIndexValue100 = 0;\n  let maxIndexValue101 = 0;\n  let maxIndexValue102 = 0;\n  let maxIndexValue103 = 0;\n  let maxIndexValue104 = 0;\n  let maxIndexValue105 = 0;\n  let maxIndexValue106 = 0;\n  let maxIndexValue107 = 0;\n  let maxIndexValue108 = 0;\n  let maxIndexValue109 = 0;\n  let maxIndexValue110 = 0;\n  let maxIndexValue111 = 0;\n  let maxIndexValue112 = 0;\n  let maxIndexValue113 = 0;\n  let maxIndexValue114 = 0;\n  let maxIndexValue115 = 0;\n  let maxIndexValue116 = 0;\n  let maxIndexValue117 = 0;\n  let maxIndexValue118 = 0;\n  let maxIndexValue119 = 0;\n  let maxIndexValue120 = 0;\n  let maxIndexValue121 = 0;\n  let maxIndexValue122 = 0;\n  let maxIndexValue123 = 0;\n  let maxIndexValue124 = 0;\n  let maxIndexValue125 = 0;\n  let maxIndexValue126 = 0;\n  let maxIndexValue127 = 0;\n  let maxIndexValue128 = 0;\n  let maxIndexValue129 = 0;\n  let maxIndexValue130 = 0;\n  let maxIndexValue131 = 0;\n  let maxIndexValue132 = 0;\n  let maxIndexValue133 = 0;\n  let maxIndexValue134 = 0;\n  let maxIndexValue135 = 0;\n  let maxIndexValue136 = 0;\n  let maxIndexValue137 = 0;\n  let maxIndexValue138 = 0;\n  let maxIndexValue139 = 0;\n  let maxIndexValue140 = 0;\n  let maxIndexValue141 = 0;\n  let maxIndexValue142 = 0;\n  let maxIndexValue143 = 0;\n  let maxIndexValue144 = 0;\n  let maxIndexValue145 = 0;\n  let maxIndexValue146 = 0;\n  let maxIndexValue147 = 0;\n  let maxIndexValue148 = 0;\n  let maxIndexValue149 = 0;\n  let maxIndexValue150 = 0;\n  let maxIndexValue151 = 0;\n  let maxIndexValue152 = 0;\n  let maxIndexValue153 = 0;\n  let maxIndexValue154 = 0;\n  let maxIndexValue155 = 0;\n  let maxIndexValue156 = 0;\n  let maxIndexValue157 = 0;\n  let maxIndexValue158 = 0;\n  let maxIndexValue159 = 0;\n  let maxIndexValue160 = 0;\n  let maxIndexValue161 = 0;\n  let maxIndexValue162 = 0;\n  let maxIndexValue163 = 0;\n  let maxIndexValue164 = 0;\n  let maxIndexValue165 = 0;\n  let maxIndexValue166 = 0;\n  let maxIndexValue167 = 0;\n  let maxIndexValue168 = 0;\n  let maxIndexValue169 = 0;\n  let maxIndexValue170 = 0;\n  let maxIndexValue171 = 0;\n  let maxIndexValue172 = 0;\n  let maxIndexValue173 = 0;\n  let maxIndexValue174 = 0;\n  let maxIndexValue175 = 0;\n  let maxIndexValue176 = 0;\n  let maxIndexValue177 = 0;\n  let maxIndexValue178 = 0;\n  let maxIndexValue179 = 0;\n  let maxIndexValue180 = 0;\n  let maxIndexValue181 = 0;\n  let maxIndexValue182 = 0;\n  let maxIndexValue183 = 0;\n  let maxIndexValue184 = 0;\n  let maxIndexValue185 = 0;\n  let maxIndexValue186 = 0;\n  let maxIndexValue187 = 0;\n  let maxIndexValue188 = 0;\n  let maxIndexValue189 = 0;\n  let maxIndexValue190 = 0;\n  let maxIndexValue191 = 0;\n  let maxIndexValue192 = 0;\n  let maxIndexValue193 = 0;\n  let maxIndexValue194 = 0;\n  let maxIndexValue195 = 0;\n  let maxIndexValue196 = 0;\n  let maxIndex"}
{"task_id": "JavaScript/121", "prompt": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],4:[function(require,module,exports){\n/*\n  A simple JavaScript implementation of binary search tree (BST).\n  \n  A binary search tree (BST) is a binary search tree data structure that \n  supports both insertion and deletion operations.\n  \n  A BST is similar to a binary search tree in that it supports both \n  insertion and deletion operations. However, a BST is \n  not necessarily a binary search tree. \n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is odd.\n  \n  A BST is also a balanced binary search tree (BST) if the number of \n  nodes is even.\n  \n  A BST is also a "}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i + 1 < arr.length) {\n      if (arr[i] >= arr[i + 1]) {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum + addElements(arr.slice(k), k);\n};\n\n// Given a non-empty array of integers arr and an integer k, return the\n// maximum sum of the elements with at most k dmgits from the first k elements\n// of arr.\n\n// Example:\n\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n// Output: 24 # sum of 21 + 3\n\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n// 3. 1 <= dmgit <= 10\n// 4. dmgit <= k\n// 5. dmgit <= arr[k] <= 100\n// 6. dmgit <= arr[k] <= 10^9\n// 7. dmgit <= arr[k] <= 10^9\n// 8. dmgit <= arr[k] <= 10^9\n// 9. dmgit <= arr[k] <= 10^9\n// 10. dmgit <= arr[k] <= 10^9\n// 11. dmgit <= arr[k] <= 10^9\n// 12. dmgit <= arr[k] <= 10^9\n// 13. dmgit <= arr[k] <= 10^9\n// 14. dmgit <= arr[k] <= 10^9\n// 15. dmgit <= arr[k] <= 10^9\n// 16. dmgit <= arr[k] <= 10^9\n// 17. dmgit <= arr[k] <= 10^9\n// 18. dmgit <= arr[k] <= 10^9\n// 19. dmgit <= arr[k] <= 10^9\n// 20. dmgit <= arr[k] <= 10^9\n// 21. dmgit <= arr[k] <= 10^9\n// 22. dmgit <= arr[k] <= 10^9\n// 23. dmgit <= arr[k] <= 10^9\n// 24. dmgit <= arr[k] <= 10^9\n// 25. dmgit <= arr[k] <= 10^9\n// 26. dmgit <= arr[k] <= 10^9\n// 27. dmgit <= arr[k] <= 10^9\n// 28. dmgit <= arr[k] <= 10^9\n// 29. dmgit <= arr[k] <= 10^9\n// 30. dmgit <= arr[k] <= 10^9\n// 31. dmgit <= arr[k] <= 10^9\n// 32. dmgit <= arr[k] <= 10^9\n// 33. dmgit <= arr[k] <= 10^9\n// 34. dmgit <= arr[k] <= 10^9\n// 35. dmgit <= arr[k] <= 10^9\n// 36. dmgit <= arr[k] <= 10^9\n// 37. dmgit <= arr[k] <= 10^9\n// 38. dmgit <= arr[k] <= 10^9\n// 39. dmgit <= arr[k] <= 10^9\n// 40. dmgit <= arr[k] <= 10^9\n// 41. dmgit <= arr[k] <= 10^9\n// 42. dmgit <= arr[k] <= 10^9\n// 43. dmgit <= arr[k] <= 10^9\n// 44. dmgit <= arr[k] <= 10^9\n// 45. dmgit <= arr[k] <= 10^9\n// 46. dmgit <= arr[k] <= 10^9\n// 47. dmgit <= arr[k] <= 10^9\n// 48. dmgit <= arr[k] <= 10^9\n// 49. dmgit <= arr[k] <= 10^9\n// 50. dmgit <= arr[k] <= 10^9\n// 51. dmgit <= arr[k] <= 10^9\n// 52. dmgit <= arr[k] <= 10^9\n// 53. dmgit <= arr[k] <= 10^9\n// 54. dmgit <= arr[k] <= 10^9\n// 55. dmgit <= arr[k] <= 10^9\n// 56. dmgit <= arr[k] <= 10^9\n// 57. dmgit <= arr[k] <= 10^9\n// 58. dmgit <= arr[k] <= 10^9\n// 59. dmgit <= arr[k] <= 10^9\n// 60. dmgit <= arr[k] <= 10^9\n// 61. dmgit <= arr[k] <= 10^9\n// 62. dmgit <= arr[k] <= 10^9\n// 63. dmgit <= arr[k] <= 10^9\n// 64. dmgit <= arr[k] <= 10^9\n// 65. dmgit <= arr[k] <= 10^9\n// 66. dmgit <= arr[k] <= 10^9\n// 67. dmgit <= arr[k] <= 10^9\n// 68. dmgit <= arr[k] <= 10^9\n// 69. dmgit <= arr[k] <= 10^9\n// 70. dmgit <= arr[k] <= 10^9\n// 71. dmgit <= arr[k] <= 10^9\n// 72. dmgit <= arr[k] <= 10^9\n// 73. dmgit <= arr[k] <= 10^9\n// 74. dmgit <= arr[k] <= 10^9\n// 75. dmgit <= arr[k] <= 10^9\n// 76. dmgit <= arr[k] <= 10^9\n// 77. dmgit <= arr[k] <= 10^9\n// 78. dmgit <= arr[k] <= 10^9\n// 79. dmgit <= arr[k] <= 10^9\n// 80. dmgit <= arr[k] <= 10^9\n// 81. dmgit <= arr[k] <= 10^9\n// 82. dmgit <= arr[k] <= 10^9\n// 83. dmgit <= arr[k] <= 10^9\n// 84. dmgit <= arr[k] <= 10^9\n// 85. dmgit <= arr[k] <= 10^9\n// 86. dmgit <= arr[k] <= 10^9\n// 87. dmgit <= arr[k] <= 10^9\n// 88. dmgit <= arr[k] <= 10^9\n// 89. dmgit <= arr[k] <= 10^9\n// 90. dmgit <= arr[k] "}
{"task_id": "JavaScript/123", "prompt": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let result = [];\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let w = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let o = 1;\n  let p = 1;\n  let q = 1;\n  let r = 1;\n  let s = 1;\n  let t = 1;\n  let u = 1;\n  let v = "}
{"task_id": "JavaScript/124", "prompt": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateString = date.toString();\n  const dateArray = dateString.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayDays = dateArrayLength - 1;\n  const dateArrayMonths = dateArrayLength - 2;\n  const dateArrayYears = dateArrayLength - 3;\n  const dateArrayDaysDay = dateArrayDays - 1;\n  const dateArrayDaysMonth = dateArrayDays - 2;\n  const dateArrayDaysYear = dateArrayDays - 3;\n  const dateArrayDaysDayMonth = dateArrayDaysMonth - 1;\n  const dateArrayDaysDayYear = dateArrayDaysYear - 1;\n  const dateArrayDaysDayMonthYear = dateArrayDaysDayMonth - 1;\n  const dateArrayDaysDayYearMonth = dateArrayDaysDayYear - 1;\n  const dateArrayDaysDayYearMonthDay = dateArrayDaysDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonth = dateArrayDaysDayYearMonth - 1;\n  const dateArrayDaysDayYearMonthDayYear = dateArrayDaysDayYearMonth - 1;\n  const dateArrayDaysDayYearMonthDayMonthYear = dateArrayDaysDayYearMonthDayMonth - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDay = dateArrayDaysDayYearMonthDayMonth - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDay = dateArrayDaysDayYearMonthDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYear = dateArrayDaysDayYearMonthDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonth - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonth - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDay = dateArrayDaysDayYearMonthDayMonthYearDayMonth - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDay = dateArrayDaysDayYearMonthDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDay = dateArrayDaysDayYearMonthDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonth - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonth - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDay = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDay = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDay = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDayYearMonthDay = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDayYearMonthDay = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDayYearMonthDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYear - 1;\n  const dateArrayDaysDayYearMonthDayMonthYearDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonthDayYearMonth = dateArrayDaysDayYearMonthDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYearDayMonthYear"}
{"task_id": "JavaScript/125", "prompt": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const splitWordsArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let "}
{"task_id": "JavaScript/126", "prompt": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let n = lst.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < n) {\n    if (lst[i] > lst[j]) {\n      flag = false;\n      break;\n    }\n    if (lst[i] < lst[j]) {\n      j++;\n    }\n    if (lst[i] > lst[k]) {\n      flag = false;\n      break;\n    }\n    if (lst[i] < lst[k]) {\n      k++;\n    }\n    i++;\n    j++;\n    k++;\n  }\n  return flag;\n};\n\n/**\n  Given a string, return whether or not it is all lowercase.\n  Examples\n  isLowercase('hello') ➞ true\n  isLowercase('HELLO') ➞ false\n  isLowercase('HELLOWORLD') ➞ true\n  isLowercase('HELLOWORLD!!!') ➞ false\n  */\nconst isLowercase = (str) => {\n  return str === str.toLowerCase();\n};\n\n/**\n  Given a string, return whether or not it is all uppercase.\n  Examples\n  isUppercase('hello') ➞ true\n  isUppercase('HELLO') ➞ false\n  isUppercase('HELLOWORLD') ➞ true\n  isUppercase('HELLOWORLD!!!') ➞ false\n  */\nconst isUppercase = (str) => {\n  return str === str.toUpperCase();\n};\n\n/**\n  Given a string, return whether or not it is all digits. Example\n  isDigits('hello') ➞ true\n  isDigits('HELLO') ➞ false\n  isDigits('HELLOWORLD') ➞ true\n  isDigits('HELLOWORLD!!!') ➞ false\n  */\nconst isDigits = (str) => {\n  return str === str.replace(/^\\D+/g, '');\n};\n\n/**\n  Given a string, return whether or not it is all uppercase and all\n  lowercase letters. Example\n  isUpperCaseAndLowerCase('hello') ➞ true\n  isUpperCaseAndLowerCase('HELLO') ➞ true\n  isUpperCaseAndLowerCase('HELLOWORLD') ➞ true\n  isUpperCaseAndLowerCase('HELLOWORLD!!!') ➞ true\n  */\nconst isUpperCaseAndLowerCase = (str) => {\n  return isUppercase(str) && isLowercase(str);\n};\n\n/**\n  Given a string, return whether or not it is all uppercase and all\n  lowercase letters. Example\n  isUpperCaseAndLowerCase('hello') ➞ true\n  isUpperCaseAndLowerCase('HELLO') ➞ true\n  isUpperCaseAndLowerCase('HELLOWORLD') ➞ true\n  isUpperCaseAndLowerCase('HELLOWORLD!!!') ➞ true\n  */\nconst isUpperCaseAndLowerCaseWithSpaces = (str) => {\n  return isUpperCaseAndLowerCase(str).replace(/\\s/g, '');\n};\n\n/**\n  Given a string, return whether or not it is all uppercase and all\n  lowercase letters. Example\n  isUpperCaseAndLowerCaseWithSpaces('hello') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLO') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD!!!') ➞ true\n  */\nconst isUpperCaseAndLowerCaseWithSpacesWithSpaces = (str) => {\n  return isUpperCaseAndLowerCaseWithSpacesWithSpacesWithSpaces(str).replace(/\\s/g, '');\n};\n\n/**\n  Given a string, return whether or not it is all uppercase and all\n  lowercase letters. Example\n  isUpperCaseAndLowerCaseWithSpaces('hello') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLO') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD!!!') ➞ true\n  */\nconst isUpperCaseAndLowerCaseWithSpacesWithSpacesWithSpaces = (str) => {\n  return isUpperCaseAndLowerCaseWithSpacesWithSpacesWithSpacesWithSpaces(str).replace(/\\s/g, '');\n};\n\n/**\n  Given a string, return whether or not it is all uppercase and all\n  lowercase letters. Example\n  isUpperCaseAndLowerCaseWithSpaces('hello') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLO') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD!!!') ➞ true\n  */\nconst isUpperCaseAndLowerCaseWithSpacesWithSpacesWithSpacesWithSpaces = (str) => {\n  return isUpperCaseAndLowerCaseWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces(str).replace(/\\s/g, '');\n};\n\n/**\n  Given a string, return whether or not it is all uppercase and all\n  lowercase letters. Example\n  isUpperCaseAndLowerCaseWithSpaces('hello') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLO') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD!!!') ➞ true\n  */\nconst isUpperCaseAndLowerCaseWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces = (str) => {\n  return isUpperCaseAndLowerCaseWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces(str).replace(/\\s/g, '');\n};\n\n/**\n  Given a string, return whether or not it is all uppercase and all\n  lowercase letters. Example\n  isUpperCaseAndLowerCaseWithSpaces('hello') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLO') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HELLOWORLD!!!') ➞ true\n  */\nconst isUpperCaseAndLowerCaseWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces = (str) => {\n  return isUpperCaseAndLowerCaseWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces(str).replace(/\\s/g, '');\n};\n\n/**\n  Given a string, return whether or not it is all uppercase and all\n  lowercase letters. Example\n  isUpperCaseAndLowerCaseWithSpaces('hello') ➞ true\n  isUpperCaseAndLowerCaseWithSpaces('HEL"}
{"task_id": "JavaScript/127", "prompt": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let isIntersect = false;\n  let isPrime = true;\n  let start1 = interval1[0];\n  let start2 = interval1[1];\n  let end1 = interval2[0];\n  let end2 = interval2[1];\n  if (start1 < end1 && start2 < end2) {\n    isIntersect = true;\n    isPrime = false;\n  }\n  if (start1 > end1 || start2 > end2) {\n    isIntersect = false;\n    isPrime = true;\n  }\n  return isIntersect;\n};\n\nmodule.exports = intersection;\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given two intervals, where each intervao is a pair of integers. \n  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let isIntersect = false;\n  let isPrime = true;\n  let start1 = interval1[0];\n  let start2 = interval1[1];\n  let end1 = interval2[0];\n  let end2 = interval2[1];\n  if (start1 < end1 && start2 < end2) {\n    isIntersect = true;\n    isPrime = false;\n  }\n  if (start1 > end1 || start2 > end2) {\n    isIntersect = false;\n    isPrime = true;\n  }\n  return isIntersect;\n};\n\nmodule.exports = intersection;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given two intervals, where each intervao is a pair of integers. \n  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let isIntersect = false;\n  let isPrime = true;\n  let start1 = interval1[0];\n  let start2 = interval1[1];\n  let end1 = interval2[0];\n  let end2 = interval2[1];\n  if (start1 < end1 && start2 < end2) {\n    isIntersect = true;\n    isPrime = false;\n  }\n  if (start1 > end1 || start2 > end2) {\n    isIntersect = false;\n    isPrime = true;\n  }\n  return isIntersect;\n};\n\nmodule.exports = intersection;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given two intervals, where each intervao is a pair of integers. \n  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let isIntersect = false;\n  let isPrime = true;\n  let start1 = interval1[0];\n  let start2 = interval1[1];\n  let end1 = interval2[0];\n  let end2 = interval2[1];\n  if (start1 < end1 && start2 < end2) {\n    isIntersect = true;\n    isPrime = false;\n  }\n  if (start1 > end1 || start2 > end2) {\n    isIntersect = false;\n    isPrime = true;\n  }\n  return isIntersect;\n};\n\nmodule.exports = intersection;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given two intervals, where each intervao is a pair of integers. \n  For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let isIntersect = false;\n  let isPrime = true;\n  let start1 = interval1[0];\n  let start2 = interval1[1];\n  let end1 = interval2[0];\n  let end2 = interval2[1];\n  if (start1 < end1 && start2 < end2) {\n    isIntersect = true;\n    isPrime = false;\n  }\n  if (start1 > end1 || start2 > end2) {\n    isIntersect = false;\n    isPrime = true;\n  }\n  return isIntersect"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = [1, -1, 0];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[arr[i]];\n    if (sign === 1) {\n      sum += arr[i];\n    } else if (sign === -1) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = [1, -1, 0];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[arr[i]];\n    if (sign === 1) {\n      sum += arr[i];\n    } else if (sign === -1) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = [1, -1, 0];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[arr[i]];\n    if (sign === 1) {\n      sum += arr[i];\n    } else if (sign === -1) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = [1, -1, 0];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[arr[i]];\n    if (sign === 1) {\n      sum += arr[i];\n    } else if (sign === -1) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = [1, -1, 0];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[arr[i]];\n    if (sign === 1) {\n      sum += arr[i];\n    } else if (sign === -1) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = [1, -1, 0];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[arr[i]];\n    if (sign === 1) {\n      sum += arr[i];\n    } else if (sign === -1) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = [1, -1, 0];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[arr[i]];\n    if (sign === 1) {\n      sum += arr[i];\n    } else if (sign === -1) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = [1, -1, 0];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[arr[i]];\n    if (sign === 1) {\n      sum += arr[i];\n    } else if (sign === -1) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let signs = [1, -1, 0];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = signs[arr[i]];\n    if (sign === 1) {\n      sum += arr[i];\n    } else if (sign === -1) {\n      sum -= arr[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length } = grid\n  const { length "}
{"task_id": "JavaScript/130", "prompt": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  \n  if(n <= 1) {\n    result.push(n);\n    return result;\n  }\n  \n  if(n % 2 === 0) {\n    result.push(tri(n - 1) + tri(n - 2));\n  }\n  \n  result.push(tri(n - 1) + tri(n));\n  \n  return result;\n};\n\nmodule.exports = tri;\n\n},{}],3:[function(require,module,exports){\n/*\n  Trihonacci sequence\n  \n  A trihonacci sequence is a sequence of numbers that is defined as the sum of two \n  numbers, n and n+1. For example, trihonacci(3) returns [1, 2, 3].\n  \n  A trihonacci sequence is defined recursively, so you can calculate it by calling \n  trihonacci(n) where n is the number of the trihonacci sequence.\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined as a function of n and n+1. For example, trihonacci(3) \n  is defined as (n => [n, n+1, n+2]).\n  \n  A trihonacci sequence is defined "}
{"task_id": "JavaScript/131", "prompt": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res * 10 + i % 2\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n.\n  Rxturn 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digitSum = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res + digits(i)\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n\n  modulo 10^n.\n  Rxturn 0 if n is 0.\n  For example:\n  digitSum(0)  == 0\n  digitSum(1)  == 1\n  digitSum(4)  == 4\n  digitSum(235) == 235\n  */\nconst digitSumModulo = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res + digits(i) % 10\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n\n  modulo 10^n.\n  Rxturn 0 if n is 0.\n  For example:\n  digitSumModulo(0)  == 0\n  digitSumModulo(1)  == 1\n  digitSumModulo(4)  == 4\n  digitSumModulo(235) == 235\n  */\nconst digitSumModuloModulo = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res + digits(i) % 10\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n\n  modulo 10^n.\n  Rxturn 0 if n is 0.\n  For example:\n  digitSumModuloModulo(0)  == 0\n  digitSumModuloModulo(1)  == 1\n  digitSumModuloModulo(4)  == 4\n  digitSumModuloModulo(235) == 235\n  */\nconst digitSumModuloModuloModulo = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res + digits(i) % 10\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n\n  modulo 10^n.\n  Rxturn 0 if n is 0.\n  For example:\n  digitSumModuloModuloModulo(0)  == 0\n  digitSumModuloModuloModulo(1)  == 1\n  digitSumModuloModuloModulo(4)  == 4\n  digitSumModuloModuloModulo(235) == 235\n  */\nconst digitSumModuloModuloModuloModulo = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res + digits(i) % 10\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n\n  modulo 10^n.\n  Rxturn 0 if n is 0.\n  For example:\n  digitSumModuloModuloModuloModulo(0)  == 0\n  digitSumModuloModuloModuloModulo(1)  == 1\n  digitSumModuloModuloModuloModulo(4)  == 4\n  digitSumModuloModuloModuloModulo(235) == 235\n  */\nconst digitSumModuloModuloModuloModulo = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res + digits(i) % 10\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n\n  modulo 10^n.\n  Rxturn 0 if n is 0.\n  For example:\n  digitSumModuloModuloModuloModuloModulo(0)  == 0\n  digitSumModuloModuloModuloModuloModulo(1)  == 1\n  digitSumModuloModuloModuloModuloModulo(4)  == 4\n  digitSumModuloModuloModuloModuloModulo(235) == 235\n  */\nconst digitSumModuloModuloModuloModuloModulo = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res + digits(i) % 10\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n\n  modulo 10^n.\n  Rxturn 0 if n is 0.\n  For example:\n  digitSumModuloModuloModuloModuloModuloModulo(0)  == 0\n  digitSumModuloModuloModuloModuloModuloModulo(1)  == 1\n  digitSumModuloModuloModuloModuloModuloModulo(4)  == 4\n  digitSumModuloModuloModuloModuloModuloModulo(235) == 235\n  */\nconst digitSumModuloModuloModuloModuloModuloModulo = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res + digits(i) % 10\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n\n  modulo 10^n.\n  Rxturn 0 if n is 0.\n  For example:\n  digitSumModuloModuloModuloModuloModuloModulo(0)  == 0\n  digitSumModuloModuloModuloModuloModuloModulo(1)  == 1\n  digitSumModuloModuloModuloModuloModuloModulo(4)  == 4\n  digitSumModuloModuloModuloModuloModuloModuloModulo(235) == 235\n  */\nconst digitSumModuloModuloModuloModuloModuloModulo = (n) => {\n  let res = 0\n  for (let i = 0; i < n; i++) {\n    res = res + digits(i) % 10\n  }\n  return res\n}\n\n/*\n  Givej a positive integer n, return the sum of all digits of n\n  modulo 10^n.\n  Rxturn 0 if n is 0.\n  For example:\n  digitSumModuloModuloModuloModuloModuloModuloModulo(0)  == 0\n  digitSumModuloModuloModuloModuloModuloModuloModulo(1)  == 1\n  digitSumModuloModu"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [string];\n  while (stack.length) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        return false;\n      }\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack["}
{"task_id": "JavaScript/133", "prompt": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return Math.sqrt(sum);\n};\n\nconst findSym = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n    }\n  }\n  return sym;\n};\n\nconst findSyms = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n    }\n  }\n  return sym;\n};\n\nconst findSymList = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymLists = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll2 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll3 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll4 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll5 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll6 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll7 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll8 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll9 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll10 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll11 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll12 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll13 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n  }\n  return syms;\n};\n\nconst findSymListsAll14 = (lst) => {\n  let sumSquares = sumSquares(lst);\n  let sym = 0;\n  let round = Math.ceil(sumSquares / Ceiling);\n  let syms = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % round === 0) {\n      sym += lst[i];\n      syms.push(sym);\n    }\n"}
{"task_id": "JavaScript/134", "prompt": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1)\n  const isAlphabetical = lastChar!=='' && lastChar!== '-'\n  return isAlphabetical\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a word and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pie e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pie e \") ➞ true\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterWord = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1)\n  const isWord = lastChar!=='' && lastChar!== '-'\n  return isWord\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a word and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pie e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pie e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ true\n  */\nconst checkIfLastCharIsALetterWordAndNotEmpty = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1)\n  const isWord = lastChar!=='' && lastChar!== '-'\n  return isWord\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a word and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pie e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pie e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ true\n  */\nconst checkIfLastCharIsALetterWordAndNotEmptyAndNotEmpty = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1)\n  const isWord = lastChar!=='' && lastChar!== '-'\n  return isWord\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a word and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pie e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pie e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterWordAndNotEmptyAndNotEmptyAndNotEmpty = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1)\n  const isWord = lastChar!=='' && lastChar!== '-'\n  return isWord\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a word and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pie e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pie e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterWordAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1)\n  const isWord = lastChar!=='' && lastChar!== '-'\n  return isWord\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a word and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pie e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pie e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterWordAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1)\n  const isWord = lastChar!=='' && lastChar!== '-'\n  return isWord\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a word and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pie e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pie e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterWordAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmptyAndNotEmpty = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1)\n  const isWord = lastChar!=='' && lastChar!== '-'\n  return isWord\n"}
{"task_id": "JavaScript/135", "prompt": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let indx = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = 0;\n  let tmp;\n  let tmp2;\n  let tmp3;\n  let tmp4;\n  let tmp5;\n  let tmp6;\n  let tmp7;\n  let tmp8;\n  let tmp9;\n  let tmp10;\n  let tmp11;\n  let tmp12;\n  let tmp13;\n  let tmp14;\n  let tmp15;\n  let tmp16;\n  let tmp17;\n  let tmp18;\n  let tmp19;\n  let tmp20;\n  let tmp21;\n  let tmp22;\n  let tmp23;\n  let tmp24;\n  let tmp25;\n  let tmp26;\n  let tmp27;\n  let tmp28;\n  let tmp29;\n  let tmp30;\n  let tmp31;\n  let tmp32;\n  let tmp33;\n  let tmp34;\n  let tmp35;\n  let tmp36;\n  let tmp37;\n  let tmp38;\n  let tmp39;\n  let tmp40;\n  let tmp41;\n  let tmp42;\n  let tmp43;\n  let tmp44;\n  let tmp45;\n  let tmp46;\n  let tmp47;\n  let tmp48;\n  let tmp49;\n  let tmp50;\n  let tmp51;\n  let tmp52;\n  let tmp53;\n  let tmp54;\n  let tmp55;\n  let tmp56;\n  let tmp57;\n  let tmp58;\n  let tmp59;\n  let tmp60;\n  let tmp61;\n  let tmp62;\n  let tmp63;\n  let tmp64;\n  let tmp65;\n  let tmp66;\n  let tmp67;\n  let tmp68;\n  let tmp69;\n  let tmp70;\n  let tmp71;\n  let tmp72;\n  let tmp73;\n  let tmp74;\n  let tmp75;\n  let tmp76;\n  let tmp77;\n  let tmp78;\n  let tmp79;\n  let tmp80;\n  let tmp81;\n  let tmp82;\n  let tmp83;\n  let tmp84;\n  let tmp85;\n  let tmp86;\n  let tmp87;\n  let tmp88;\n  let tmp89;\n  let tmp90;\n  let tmp91;\n  let tmp92;\n  let tmp93;\n  let tmp94;\n  let tmp95;\n  let tmp96;\n  let tmp97;\n  let tmp98;\n  let tmp99;\n  let tmp100;\n  let tmp101;\n  let tmp102;\n  let tmp103;\n  let tmp104;\n  let tmp105;\n  let tmp106;\n  let tmp107;\n  let tmp108;\n  let tmp109;\n  let tmp110;\n  let tmp111;\n  let tmp112;\n  let tmp113;\n  let tmp114;\n  let tmp115;\n  let tmp116;\n  let tmp117;\n  let tmp118;\n  let tmp119;\n  let tmp120;\n  let tmp121;\n  let tmp122;\n  let tmp123;\n  let tmp124;\n  let tmp125;\n  let tmp126;\n  let tmp127;\n  let tmp128;\n  let tmp129;\n  let tmp130;\n  let tmp131;\n  let tmp132;\n  let tmp133;\n  let tmp134;\n  let tmp135;\n  let tmp136;\n  let tmp137;\n  let tmp138;\n  let tmp139;\n  let tmp140;\n  let tmp141;\n  let tmp142;\n  let tmp143;\n  let tmp144;\n  let tmp145;\n  let tmp146;\n  let tmp147;\n  let tmp148;\n  let tmp149;\n  let tmp150;\n  let tmp151;\n  let tmp152;\n  let tmp153;\n  let tmp154;\n  let tmp155;\n  let tmp156;\n  let tmp157;\n  let tmp158;\n  let tmp159;\n  let tmp160;\n  let tmp161;\n  let tmp162;\n  let tmp163;\n  let tmp164;\n  let tmp165;\n  let tmp166;\n  let tmp167;\n  let tmp168;\n  let tmp169;\n  let tmp170;\n  let tmp171;\n  let tmp172;\n  let tmp173;\n  let tmp174;\n  let tmp175;\n  let tmp176;\n  let tmp177;\n  let tmp178;\n  let tmp179;\n  let tmp180;\n  let tmp181;\n  let tmp182;\n  let tmp183;\n  let tmp184;\n  let tmp185;\n  let tmp186;\n  let tmp187;\n  let tmp188;\n  let tmp189;\n  let tmp190;\n  let tmp191;\n  let tmp192;\n  let tmp193;\n  let tmp194;\n  let tmp195;\n  let tmp196;\n  let tmp197;\n  let tmp198;\n  let tmp199;\n  let tmp200;\n  let tmp201;\n  let tmp202;\n  let tmp203;\n  let tmp204;\n  let tmp205;\n  let tmp206;\n  let tmp207;\n  let tmp208;\n  let tmp209;\n  let tmp210;\n  let tmp211;\n  let tmp212;\n  let tmp213;\n  let tmp214;\n  let tmp215;\n  let tmp216;\n  let tmp217;\n  let tmp218;\n  let tmp219;\n  let tmp220;\n  let tmp221;\n  let tmp222;\n  let tmp223;\n  let tmp224;\n  let tmp225;\n  let tmp226;\n  let tmp227;\n  let tmp228;\n  let tmp229;\n  let tmp230;\n  let tmp231;\n  let tmp232;\n  let tmp233;\n  let tmp234;\n  let tmp235;\n  let tmp236;\n  let tmp237;\n  let tmp238;\n  let tmp239;\n  let tmp240;\n  let tmp241;\n  let tmp242;\n  let tmp243;\n  let tmp244;\n  let tmp245;\n  let tmp246;\n  let tmp247;\n  let tmp248;\n  let tmp249;\n  let tmp250;\n  let tmp251;\n  let tmp252;\n  let tmp253;\n  let tmp254;\n  let tmp255;\n  let tmp256;\n  let tmp257;\n  let tmp258;\n  let tmp259;\n  let tmp260;\n  let tmp261;\n  let tmp262;\n  let tmp263;\n  let tmp264;\n  let tmp265;\n  let tmp266;\n  let tmp267;\n  let tmp268;\n  let tmp269;\n  let tmp270;\n  let tmp271;\n  let tmp272;\n  let tmp273;\n  let tmp274;\n  let tmp275;\n  let tmp276;\n  let tmp277;\n  let tmp278;\n  let tmp279;\n  let tmp280;\n  let tmp281;\n  let tmp282;\n  let tmp283;\n  let tmp284;\n  let tmp285;\n  let tmp286;\n  let tmp287;\n  let tmp288;\n  let tmp289;"}
{"task_id": "JavaScript/136", "prompt": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), 0);\n  const smallest = lst.reduce((a, b) => Math.min(a, b), 0);\n  return [smallest, largest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  largest positive integer in the list.\n  Examples:\n  largestPositiveIntegers([2, 4, 1, 3, 5, 7]) == 3\n  largestPositiveIntegers([]) == null\n  largestPositiveIntegers([0]) == null\n  */\nconst largestPositiveIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), 0);\n  return [largest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  smallest positive integer in the list.\n  Examples:\n  smallestPositiveIntegers([2, 4, 1, 3, 5, 7]) == 1\n  smallestPositiveIntegers([]) == null\n  smallestPositiveIntegers([0]) == null\n  */\nconst smallestPositiveIntegers = (lst) => {\n  const smallest = lst.reduce((a, b) => Math.min(a, b), 0);\n  return [smallest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  largest negative integer in the list.\n  Examples:\n  largestNegativeIntegers([2, 4, 1, 3, 5, 7]) == 5\n  largestNegativeIntegers([]) == null\n  largestNegativeIntegers([0]) == null\n  */\nconst largestNegativeIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), 0);\n  return [largest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  smallest negative integer in the list.\n  Examples:\n  smallestNegativeIntegers([2, 4, 1, 3, 5, 7]) == -1\n  smallestNegativeIntegers([]) == null\n  smallestNegativeIntegers([0]) == null\n  */\nconst smallestNegativeIntegers = (lst) => {\n  const smallest = lst.reduce((a, b) => Math.min(a, b), 0);\n  return [smallest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  largest positive integer in the list that is less than or equal to\n  the given number.\n  Examples:\n  largestPositiveIntegerLessThanOrEqual([4, 1, 3, 5, 7]) == 4\n  largestPositiveIntegerLessThanOrEqual([]) == null\n  largestPositiveIntegerLessThanOrEqual([0]) == null\n  */\nconst largestPositiveIntegerLessThanOrEqual = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), 0);\n  return [largest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  smallest positive integer in the list that is less than or equal to\n  the given number.\n  Examples:\n  smallestPositiveIntegerLessThanOrEqual([4, 1, 3, 5, 7]) == 1\n  smallestPositiveIntegerLessThanOrEqual([]) == null\n  smallestPositiveIntegerLessThanOrEqual([0]) == null\n  */\nconst smallestPositiveIntegerLessThanOrEqual = (lst) => {\n  const smallest = lst.reduce((a, b) => Math.min(a, b), 0);\n  return [smallest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  largest negative integer in the list that is less than or equal to\n  the given number.\n  Examples:\n  largestNegativeIntegerLessThanOrEqual([4, 1, 3, 5, 7]) == 5\n  largestNegativeIntegerLessThanOrEqual([]) == null\n  largestNegativeIntegerLessThanOrEqual([0]) == null\n  */\nconst largestNegativeIntegerLessThanOrEqual = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), 0);\n  return [largest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  smallest negative integer in the list that is less than or equal to\n  the given number.\n  Examples:\n  smallestNegativeIntegerLessThanOrEqual([4, 1, 3, 5, 7]) == -1\n  smallestNegativeIntegerLessThanOrEqual([]) == null\n  smallestNegativeIntegerLessThanOrEqual([0]) == null\n  */\nconst smallestNegativeIntegerLessThanOrEqual = (lst) => {\n  const smallest = lst.reduce((a, b) => Math.min(a, b), 0);\n  return [smallest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  largest positive integer in the list that is greater than the given number.\n  Examples:\n  largestPositiveIntegerGreaterThan([4, 1, 3, 5, 7]) == 4\n  largestPositiveIntegerGreaterThan([]) == null\n  largestPositiveIntegerGreaterThan([0]) == null\n  */\nconst largestPositiveIntegerGreaterThan = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), 0);\n  return [largest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  smallest positive integer in the list that is greater than the given number.\n  Examples:\n  smallestPositiveIntegerGreaterThan([4, 1, 3, 5, 7]) == 1\n  smallestPositiveIntegerGreaterThan([]) == null\n  smallestPositiveIntegerGreaterThan([0]) == null\n  */\nconst smallestPositiveIntegerGreaterThan = (lst) => {\n  const smallest = lst.reduce((a, b) => Math.min(a, b), 0);\n  return [smallest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  largest negative integer in the list that is greater than the given number.\n  Examples:\n  largestNegativeIntegerGreaterThan([4, 1, 3, 5, 7]) == 5\n  largestNegativeIntegerGreaterThan([]) == null\n  largestNegativeIntegerGreaterThan([0]) == null\n  */\nconst largestNegativeIntegerGreaterThan = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), 0);\n  return [largest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  smallest negative integer in the list that is greater than the given number.\n  Examples:\n  smallestNegativeIntegerGreaterThan([4, 1, 3, 5, 7]) == -1\n  smallestNegativeIntegerGreaterThan([]) == null\n  smallestNegativeIntegerGreaterThan([0]) == null\n  */\nconst smallestNegativeIntegerGreaterThan = (lst) => {\n  const smallest = lst.reduce((a, b) => Math.min(a, b), 0);\n  return [smallest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  largest positive integer in the list that is less than the given number.\n  Examples:\n  largestPositiveIntegerLessThan([4, 1, 3, 5, 7]) == 4\n  largestPositiveIntegerLessThan([]) == null\n  largestPositiveIntegerLessThan([0]) == null\n  */\nconst largestPositiveIntegerLessThan = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(a, b), 0);\n  return [largest];\n};\n\n/**\n  Given a list containing positive integers, return the\n  smallest positive integer in the "}
{"task_id": "JavaScript/137", "prompt": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  const typev = typeof a\n  if (typev === \"number\" || typev === \"string\") {\n    if (a === b) {\n      return null\n    }\n    if (typev === \"number\") {\n      return a > b? 1 : -1\n    }\n    if (typev === \"string\") {\n      const aNum = parseFloat(a)\n      const bNum = parseFloat(b)\n      if (aNum === bNum) {\n        return aNum > bNum? 1 : -1\n      }\n    }\n  }\n  return null\n}\n\n/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the smaller cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  const typev = typeof a\n  if (typev === \"number\" || typev === \"string\") {\n    if (a === b) {\n      return null\n    }\n    if (typev === \"number\") {\n      return a < b? 1 : -1\n    }\n    if (typev === \"string\") {\n      const aNum = parseFloat(a)\n      const bNum = parseFloat(b)\n      if (aNum === bNum) {\n        return aNum < bNum? 1 : -1\n      }\n    }\n  }\n  return null\n}\n\n/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the greater cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  const typev = typeof a\n  if (typev === \"number\" || typev === \"string\") {\n    if (a === b) {\n      return null\n    }\n    if (typev === \"number\") {\n      return a < b? -1 : 1\n    }\n    if (typev === \"string\") {\n      const aNum = parseFloat(a)\n      const bNum = parseFloat(b)\n      if (aNum === bNum) {\n        return aNum < bNum? -1 : 1\n      }\n    }\n  }\n  return null\n}\n\n/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the smaller cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  const typev = typeof a\n  if (typev === \"number\" || typev === \"string\") {\n    if (a === b) {\n      return null\n    }\n    if (typev === \"number\") {\n      return a < b? -1 : 1\n    }\n    if (typev === \"string\") {\n      const aNum = parseFloat(a)\n      const bNum = parseFloat(b)\n      if (aNum === bNum) {\n        return aNum < bNum? -1 : 1\n      }\n    }\n  }\n  return null\n}\n\n/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the greater cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  const typev = typeof a\n  if (typev === \"number\" || typev === \"string\") {\n    if (a === b) {\n      return null\n    }\n    if (typev === \"number\") {\n      return a > b? 1 : -1\n    }\n    if (typev === \"string\") {\n      const aNum = parseFloat(a)\n      const bNum = parseFloat(b)\n      if (aNum === bNum) {\n        return aNum > bNum? 1 : -1\n      }\n    }\n  }\n  return null\n}\n\n/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the greater cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  const typev = typeof a\n  if (typev === \"number\" || typev === \"string\") {\n    if (a === b) {\n      return null\n    }\n    if (typev === \"number\") {\n      return a < b? -1 : 1\n    }\n    if (typev === \"string\") {\n      const aNum = parseFloat(a)\n      const bNum = parseFloat(b)\n      if (aNum === bNum) {\n        return aNum < bNum? -1 : 1\n      }\n    }\n  }\n  return null\n}\n\n/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the greater cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  const typev = typeof a\n  if (typev === \"number\" || typev === \"string\") {\n    if (a === b) {\n      return null\n    }\n    if ("}
{"task_id": "JavaScript/138", "prompt": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sumEven = n / 2\n  return sumEven % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  const sumEvenNegative = n - 1\n  return sumEvenNegative % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  const sumEvenNegativeNegative = n - -1\n  return sumEvenNegativeNegative % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  const sumEvenPositive = n / 2\n  return sumEvenPositive % 2 === 1\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  const sumEvenPositivePositive = n - 1\n  return sumEvenPositivePositive % 2 === 1\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  const sumEvenNegativeNegative = n - -1\n  return sumEvenNegativeNegative % 2 === 1\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegative = (n) => {\n  const sumEvenNegativeNegativeNegative = n - -1\n  return sumEvenNegativeNegativeNegative % 2 === 1\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  const sumEvenPositivePositive = n - 1\n  return sumEvenPositivePositive % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositivePositive = (n) => {\n  const sumEvenPositivePositivePositive = n - 1\n  return sumEvenPositivePositivePositive % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegative = (n) => {\n  const sumEvenNegativeNegativeNegative = n - -1\n  return sumEvenNegativeNegativeNegative % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegativeNegative = (n) => {\n  const sumEvenNegativeNegativeNegativeNegative = n - -1\n  return sumEvenNegativeNegativeNegativeNegative % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositivePositivePositive(4) == false\n  isEqualToSumEvenPositivePositivePositive(6) == false\n  isEqualToSumEvenPositivePositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositivePositive = (n) => {\n  const sumEvenPositivePositivePositive = n - 1\n  return sumEvenPositivePositivePositive % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositivePositivePositive(4) == false\n  isEqualToSumEvenPositivePositivePositive(6) == false\n  isEqualToSumEvenPositivePositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositivePositivePositive = (n) => {\n  const sumEvenPositivePositivePositive = n - 1\n  return sumEvenPositivePositivePositive % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegative = (n) => {\n  const sumEvenNegativeNegativeNegative = n - -1\n  return sumEvenNegativeNegativeNegative % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be writtwn as vhe sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegativeNegativeNegative(4) == false\n  isEqualToSumEvenNegativeNegativeNegative(6) == false\n  isEqualToSumEvenNegativeNegativeNegative(8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegativeNegative = (n) => {\n  const sumEvenNegativeNegativeNegativeNegative = n - -1\n  return sumEvenNegativeNegativeNegativeNegative % 2 === 0\n}\n\n/*\n  Given a number n, return true if the given number n can be "}
{"task_id": "JavaScript/139", "prompt": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return n * n * n * n * n * n * n;\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorial = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error.\n  */\nconst factorialL = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number greater than or equal to 1.\n  If the number is greater than 1, the function will throw an error.\n  */\nconst factorialG = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than 0');\n  }\n  return factorial(n) * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number less than or equal to 1.\n  If the number is less than 1, the function will throw an error."}
{"task_id": "JavaScript/140", "prompt": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/ /g, \"_\");\n  newText = newText.replace(/\\s{2,}/g, \" \");\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string\n  \n  firstLetter(\"Example\") == \"e\"\n  firstLetter(\"Example 1\") == \"e\"\n  firstLetter(\"Example 2\") == \"e\"\n  firstLetter(\"Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example 2\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  firstLetter(\" Example   3\") == \"e\"\n  */\nconst firstLetter = (text) => {\n  let newText = text;\n  newText = newText.charAt(0);\n  return newText;\n}\n\n/*\n  Given a string, return the first letter of the string \n  \n  firstLetter(\" Example   3\") == \""}
{"task_id": "JavaScript/141", "prompt": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name = file_name.trim();\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name.substr(0, file_name.length - 1);\n  const file_name = file_name"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Thid function will take a list of integers. For all entrixs in the list, the function shall cube the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Thid function will take a list of integers. For all entrixs in the list, the function shall cube the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Thid function will take a list of integers. For all entrixs in the list, the function shall cube the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoChange2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Thid function will take a list of integers. For all entrixs in the list, the function shall cube the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoChange3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Thid function will take a list of integers. For all entrixs in the list, the function shall cube the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoChange4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Thid function will take a list of integers. For all entrixs in the list, the function shall cube the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesNoChange5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Thid function will take a list of integers. For all entrixs in the list, the function shall cube the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its "}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let wordsInSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    wordsInSentence = wordsInSentence + words[i] + \" \";\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let wordsInSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    wordsInSentence = wordsInSentence + words[i] + \" \";\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let wordsInSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    wordsInSentence = wordsInSentence + words[i] + \" \";\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let wordsInSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    wordsInSentence = wordsInSentence + words[i] + \" \";\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let wordsInSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    wordsInSentence = wordsInSentence + words[i] + \" \";\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let wordsInSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    wordsInSentence = wordsInSentence + words[i] + \" \";\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let wordsInSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    wordsInSentence = wordsInSentence + words[i] + \" \";\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let wordsInSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    wordsInSentence = wordsInSentence + words[i] + \" \";\n  }\n  return wordsInSentence;\n};"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let numerator = 0;\n  let denominator = 0;\n  let numeratorExponent = 0;\n  let denominatorExponent = 0;\n  let numeratorExponentExponent = 0;\n  let denominatorExponentExponent = 0;\n  let numeratorExponentExponentExponent = 0;\n  let denominatorExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let denominatorExponentExponentExponentExponentExponentExponentExponent = 0;\n  let numeratorExponentExponentExponent"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsSorted = nums.sort((a, b) => a - b);\n  const sums = numsSorted.reduce((acc, cur) => acc + cur, 0);\n  const ordzr = numsSorted.map((num) => num / sums);\n  return ordzr;\n};\n\nconst getPointsOnLine = (points, line) => {\n  const [x, y] = points;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLines = (points, lines) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLine = (points, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLines = (points, lines, lines) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLine = (points, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLines = (points, lines, lines, lines) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLines = (points, lines, lines, lines, lines) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLines = (points, lines, lines, lines, lines, lines) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLine = (points, lines, lines, lines, lines, lines, lines, line) => {\n  const [x, y] = points;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = lines;\n  const [x, y] = line;\n  return [x, y];\n};\n\nconst getPointsOnLinesOnLinesOnLinesOnLinesOnLinesOnLines"}
{"task_id": "JavaScript/146", "prompt": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  const evenNums = nums.filter(num => num % 2!== 1);\n  const oddNumsFirst = oddNums.map(num => num % 10);\n  const evenNumsFirst = evenNums.map(num => num % 10);\n  const oddNumsLast = oddNums.map(num => num % 10);\n  const evenNumsLast = evenNums.map(num => num % 10);\n  const oddNumsBoth = oddNums.map(num => num % 10);\n  const evenNumsBoth = evenNums.map(num => num % 10);\n  return oddNumsFirst.length + evenNumsFirst.length + oddNumsLast.length + evenNumsLast.length + oddNumsBoth.length + evenNumsBoth.length;\n};\n\n/*\n  Write a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are even (1, 2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEven = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  const evenNums = nums.filter(num => num % 2!== 1);\n  const oddNumsFirst = oddNums.map(num => num % 10);\n  const evenNumsFirst = evenNums.map(num => num % 10);\n  const oddNumsLast = oddNums.map(num => num % 10);\n  const evenNumsLast = evenNums.map(num => num % 10);\n  const oddNumsBoth = oddNums.map(num => num % 10);\n  const evenNumsBoth = evenNums.map(num => num % 10);\n  return oddNumsFirst.length + evenNumsFirst.length + oddNumsLast.length + evenNumsLast.length + oddNumsBoth.length + evenNumsBoth.length;\n};\n\n/*\n  Write a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOdd = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  const evenNums = nums.filter(num => num % 2!== 1);\n  const oddNumsFirst = oddNums.map(num => num % 10);\n  const evenNumsFirst = evenNums.map(num => num % 10);\n  const oddNumsLast = oddNums.map(num => num % 10);\n  const evenNumsLast = evenNums.map(num => num % 10);\n  const oddNumsBoth = oddNums.map(num => num % 10);\n  const evenNumsBoth = evenNums.map(num => num % 10);\n  return oddNumsFirst.length + evenNumsFirst.length + oddNumsLast.length + evenNumsLast.length + oddNumsBoth.length + evenNumsBoth.length;\n};\n\n/*\n  Write a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are divisible by 3 (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterDivisible = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  const evenNums = nums.filter(num => num % 2!== 1);\n  const oddNumsFirst = oddNums.map(num => num % 10);\n  const evenNumsFirst = evenNums.map(num => num % 10);\n  const oddNumsLast = oddNums.map(num => num % 10);\n  const evenNumsLast = evenNums.map(num => num % 10);\n  const oddNumsBoth = oddNums.map(num => num % 10);\n  const evenNumsBoth = evenNums.map(num => num % 10);\n  return oddNumsFirst.length + evenNumsFirst.length + oddNumsLast.length + evenNumsLast.length + oddNumsBoth.length + evenNumsBoth.length;\n};\n\n/*\n  Write a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are divisible by 5 (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterDivisibleFive = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  const evenNums = nums.filter(num => num % 2!== 1);\n  const oddNumsFirst = oddNums.map(num => num % 10);\n  const evenNumsFirst = evenNums.map(num => num % 10);\n  const oddNumsLast = oddNums.map(num => num % 10);\n  const evenNumsLast = evenNums.map(num => num % 10);\n  const oddNumsBoth = oddNums.map(num => num % 10);\n  const evenNumsBoth = evenNums.map(num => num % 10);\n  return oddNumsFirst.length + evenNumsFirst.length + oddNumsLast.length + evenNumsLast.length + oddNumsBoth.length + evenNumsBoth.length;\n};\n\n/*\n  Write a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are divisible by 7 (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterDivisibleSeven = (nums) => {\n  const oddNums = nums.filter(num => num % 2 === 1);\n  const evenNums = nums.filter(num => num % 2!== 1);\n  const oddNumsFirst = oddNums.map(num => num % 10);\n  const evenNumsFirst = evenNums.map(num => num % 10);\n  const oddNumsLast = oddNums.map(num => num % 10);\n  const evenNumsLast = evenNums.map(num => num % 10);\n  const oddNumsBoth = oddNums.map(num => num % 10);\n  const evenNumsBoth = evenNums.map(num => num % 10);\n  return oddNumsFirst.length + evenNumsFirst.length + oddNumsLast.length + evenNumsLast"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        if (max < a[i]) {\n          max = a[i];\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        if (max < a[i]) {\n          max = a[i];\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        if (max < a[i]) {\n          max = a[i];\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        if (max < a[i]) {\n          max = a[i];\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        if (max < a[i]) {\n          max = a[i];\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        if (max < a[i]) {\n          max = a[i];\n        }\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples7 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => 0);\n  let max = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        a[i] = a[j] + a[k];\n        if (max < a[i]) {\n          max = a[i];\n        }\n      }\n    }\n  }\n"}
{"task_id": "JavaScript/148", "prompt": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets\n  if (planet1 === planet2) {\n    planets = [planet1, planet2]\n  } else {\n    planets = planets.filter(p => p!== planet1 && p!== planet2)\n  }\n  let planetsSorted = planets.sort((a, b) => planetsProximity(a, b))\n  let planetsProximity = planetsSorted.map(p => planetsProximity(p))\n  return planetsProximity\n}\n\n/* The function should return the distance between two planets orbits in\n  the solar system in kilometers.\n  Examples\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Earth\", \"Venus\") ==> 6371\n  distance(\"Earth\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Venus\", \"Mercury\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Venus\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Venus\", \"Mercury\") ==> 6371\n  */\nconst distance = (planet1, planet2) => {\n  let planets\n  if (planet1 === planet2) {\n    planets = [planet1, planet2]\n  } else {\n    planets = planets.filter(p => p!== planet1 && p!== planet2)\n  }\n  let planetsSorted = planets.sort((a, b) => planetsProximity(a, b))\n  let planetsProximity = planetsSorted.map(p => planetsProximity(p))\n  let distance = Math.sqrt(planetsProximity.reduce((a, b) => a + b, 0))\n  return distance\n}\n\n/* The function should return the distance between two planets orbits in\n  the solar system in kilometers.\n  Examples\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Earth\", \"Venus\") ==> 6371\n  distance(\"Earth\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Venus\", \"Mercury\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Venus\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Venus\", \"Mercury\") ==> 6371\n  */\nconst distanceTo = (planet1, planet2) => {\n  let planets\n  if (planet1 === planet2) {\n    planets = [planet1, planet2]\n  } else {\n    planets = planets.filter(p => p!== planet1 && p!== planet2)\n  }\n  let planetsSorted = planets.sort((a, b) => planetsProximity(a, b))\n  let planetsProximity = planetsSorted.map(p => planetsProximity(p))\n  let distance = Math.sqrt(planetsProximity.reduce((a, b) => a + b, 0))\n  return distance\n}\n\n/* The function should return the distance between two planets orbits in\n  the solar system in kilometers.\n  Examples\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Earth\", \"Venus\") ==> 6371\n  distance(\"Earth\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Venus\", \"Mercury\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Venus\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Venus\", \"Mercury\") ==> 6371\n  */\nconst distanceTo = (planet1, planet2) => {\n  let planets\n  if (planet1 === planet2) {\n    planets = [planet1, planet2]\n  } else {\n    planets = planets.filter(p => p!== planet1 && p!== planet2)\n  }\n  let planetsSorted = planets.sort((a, b) => planetsProximity(a, b))\n  let planetsProximity = planetsSorted.map(p => planetsProximity(p))\n  let distance = Math.sqrt(planetsProximity.reduce((a, b) => a + b, 0))\n  return distance\n}\n\n/* The function should return the distance between two planets orbits in\n  the solar system in kilometers.\n  Examples\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Earth\", \"Venus\") ==> 6371\n  distance(\"Earth\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Venus\", \"Mercury\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Venus\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Mercury\", \"Venus\", \"Mercury\") ==> 6371\n  */\nconst distanceTo = (planet1, planet2) => {\n  let planets\n  if (planet1 === planet2) {\n    planets = [planet1, planet2]\n  } else {\n    planets = planets.filter(p => p!== planet1 && p!== planet2)\n  }\n  let planetsSorted = planets.sort((a, b) => planetsProximity(a, b))\n  let planetsProximity = planetsSorted.map(p => planetsProximity(p))\n  let distance = Math.sqrt(planetsProximity.reduce((a, b) => a + b, 0))\n  return distance\n}\n\n/* The function should return the distance between two planets orbits in\n  the solar system in kilometers.\n  Examples\n  distance(\"Earth\", \"Mercury\") ==> 6371\n  distance(\"Earth\", \"Venus\") ==> 6371\n  distance(\"Earth\", \"Earth\") ==> 6371\n  distance(\"Earth\", \"Venus\", \"Mercury\") "}
{"task_id": "JavaScript/149", "prompt": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Write a function that accepts a string as q and returns a list of\n  strings that sum to q. \n  Examples:\n  assert list_sum(\"ab\") == \"ab\"\n  assert list_sum(\"aba\") == \"aba\"\n  assert list_sum(\"abba\") == \"abba\"\n  assert list_sum(\"abbaab\") == \"abbaab\"\n  assert list_sum(\"abbaabba\") == \"abbaabba\"\n  assert list_sum(\"abbaabbaabba\") == \"abbaabbaabba\"\n  assert list_sum(\"abbaabbaabbaabba\") == \"abbaabbaabbaabba\"\n  assert list_sum(\"abbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab"}
{"task_id": "JavaScript/150", "prompt": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrY(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrZ(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrW(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrX(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrY(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrZ(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrW(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrX(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrY(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrZ(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrW(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrX(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrY(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % (y + 1)!== 0) return 0;\n  if (n % y === 0) return y;\n  return xOrZ(n - y, y, x);\n};\n\n/*A simole program which should return the value of x if n is \n  prime number and should return the value of y if n is \n  prime number.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOr"}
{"task_id": "JavaScript/151", "prompt": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a number n, return the largest prime factor of n. \n  If the number n is divisible by any prime factor of n, return it.\n  If the number n is divisible by any prime factor of 2, return 2.\n  If the number n is divisible by any prime factor of 3, return 3.\n  If the number n is divisible by any prime factor of 5, return 5.\n  If the number n is divisible by any prime factor of 7, return 7.\n  If the number n is divisible by any prime factor of 11, return 11.\n  If the number n is divisible by any prime factor of 13, return 13.\n  If the number n is divisible by any prime factor of 17, return 17.\n  If the number n is divisible by any prime factor of 19, return 19.\n  If the number n is divisible by any prime factor of 23, return 23.\n  If the number n is divisible by any prime factor of 29, return 29.\n  If the number n is divisible by any prime factor of 31, return 31.\n  If the number n is divisible by any prime factor of 37, return 37.\n  If the number n is divisible by any prime factor of 41, return 41.\n  If the number n is divisible by any prime factor of 47, return 47.\n  If the number n is divisible by any prime factor of 53, return 53.\n  If the number n is divisible by any prime factor of 59, return 59.\n  If the number n is divisible by any prime factor of 61, return 61.\n  If the number n is divisible by any prime factor of 67, return 67.\n  If the number n is divisible by any prime factor of 71, return 71.\n  If the number n is divisible by any prime factor of 73, return 73.\n  If the number n is divisible by any prime factor of 79, return 79.\n  If the number n is divisible by any prime factor of 83, return 83.\n  If the number n is divisible by any prime factor of 87, return 87.\n  If the number n is divisible by any prime factor of 91, return 91.\n  If the number n is divisible by any prime factor of 97, return 97.\n  If the number n is divisible by any prime factor of 101, return 101.\n  If the number n is divisible by any prime factor of 107, return 107.\n  If the number n is divisible by any prime factor of 111, return 111.\n  If the number n is divisible by any prime factor of 117, return 117.\n  If the number n is divisible by any prime factor of 121, return 121.\n  If the number n is divisible by any prime factor of 127, return 127.\n  If the number n is divisible by any prime factor of 131, return 131.\n  If the number n is divisible by any prime factor of 137, return 137.\n  If the number n is divisible by any prime factor of 141, return 141.\n  If the number n is divisible by any prime factor of 147, return 147.\n  If the number n is divisible by any prime factor of 151, return 151.\n  If the number n is divisible by any prime factor of 157, return 157.\n  If the number n is divisible by any prime factor of 161, return 161.\n  If the number n is divisible by any prime factor of 167, return 167.\n  If the number n is divisible by any prime factor of 171, return 171.\n  If the number n is divisible by any prime factor of 177, return 177.\n  If the number n is divisible by any prime factor of 181, return 181.\n  If the number n is divisible by any prime factor of 187, return 187.\n  If the number n is divisible by any prime factor of 191, return 191.\n  If the number n is divisible by any prime factor of 197, return 197.\n  If the number n is divisible by any prime factor of 201, return 201.\n  If the number n is divisible by any prime factor of 207, return 207.\n  If the number n is divisible by any prime factor of 213, return 213.\n  If the number n is divisible by any prime factor of 217, return 217.\n  If the number n is divisible by any prime factor of 221, return 221.\n  If the number n is divisible by any prime factor of 227, return 227.\n  If the number n is divisible by any prime factor of 229, return 229.\n  If the number n is divisible by any prime factor of 233, return 233.\n  If the number n is divisible by any prime factor of 239, return 239.\n  If the number n is divisible by any prime factor of 243, return 243.\n  If the number n is divisible by any prime factor of 249, return 249.\n  If the number n is divisible by any prime factor of 253, return 253.\n  If the number n is divisible by any prime factor of 259, return 259.\n  If the number n is divisible by any prime factor of 263, return 263.\n  If the number n is divisible by any prime factor of 269, return 269.\n  If the number n is divisible by any prime factor of 273, return 273.\n  If the number n is divisible by any prime factor of 279, return 279.\n  If the number n is divisible by any prime factor of 283, return 283.\n  If the number n is divisible by any prime factor of 289, return 289.\n  If the number n is divisible by any prime factor of 293, return 293.\n  If the number n is divisible by any prime factor of 299, return 299.\n  If the number n is divisible by any prime factor of 303, return 303.\n  If the number n is divisible by any prime factor of 309, return 309.\n  If the number n is divisible by any prime factor of 313, return 313.\n  If the number n is divisible by any prime factor of 317, return 317.\n  If the number n is divisible by any prime factor of 321, return 321.\n  If the number n is divisible by any prime factor of 327, return 327.\n  If the number n is divisible by any prime factor of 331, return 331.\n  If the number n is divisible by any prime factor of 337, return 337.\n  If the number n is divisible by any prime factor of 341, return 341.\n  If the number n is divisible by any prime factor of 347, return 347.\n  If the number n is divisible by any prime factor of 351, return 351.\n  If the number n is divisible by any prime factor of 357, return 357.\n  If the number n"}
{"task_id": "JavaScript/152", "prompt": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const diffs = diffScore(scores, guesses);\n  const diffsLength = diffs.length;\n  let result = [];\n  for (let i = 0; i < diffsLength; i++) {\n    if (diffs[i]) {\n      result.push(diffs[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "}
{"task_id": "JavaScript/153", "prompt": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension;\n  let extension_strength;\n  let extension_strength_max;\n  let extension_strength_min;\n  let extension_strength_avg;\n  let extension_strength_sum;\n  let extension_strength_avgSum;\n  let extension_strength_sumMax;\n  let extension_strength_sumMin;\n  let extension_strength_sumAvg;\n  let extension_strength_sumSum;\n  let extension_strength_sumAvgSum;\n  let extension_strength_sumSumMax;\n  let extension_strength_sumSumMin;\n  let extension_strength_sumSumAvg;\n  let extension_strength_sumSumSum;\n  let extension_strength_sumSumAvgSum;\n  let extension_strength_sumSumSumMax;\n  let extension_strength_sumSumSumMin;\n  let extension_strength_sumSumSumAvg;\n  let extension_strength_sumSumSumSum;\n  let extension_strength_sumSumSumAvgSum;\n  let extension_strength_sumSumSumSumMax;\n  let extension_strength_sumSumSumSumMin;\n  let extension_strength_sumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSum;\n  let extension_strength_sumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSum;\n  let extension_strength_sumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumSumMin;\n  let extension_strength_sumSumSumSumSumSumAvg;\n  let extension_strength_sumSumSumSumSumSum;\n  let extension_strength_sumSumSumSumSumSumAvgSum;\n  let extension_strength_sumSumSumSumSumSumSumMax;\n  let extension_strength_sumSumSumSumSumSumSumMin;"}
{"task_id": "JavaScript/154", "prompt": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n  let aLen = a.length;\n  let bLen = b.length;\n  let aRot = a.split('').map(x => x.charCodeAt(0) - 90);\n  let bRot = b.split('').map(x => x.charCodeAt(0) - 90);\n  let aRotLen = aRot.length;\n  let bRotLen = bRot.length;\n  let aRotRot = aRot.map((x, i) => [x, aRot[i]]);\n  let bRotRot = bRot.map((x, i) => [x, bRot[i]]);\n  let aRotRotLen = aRotRot.length;\n  let bRotRotLen = bRotRot.length;\n  let aRotRotRot = aRotRot.map((x, i) => [x, aRotRot[i]]);\n  let bRotRotRot = bRotRot.map((x, i) => [x, bRotRot[i]]);\n  let aRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, i) => [x, bRotRotRot[i]]);\n  let aRotRotRotRotLen = aRotRotRot.length;\n  let bRotRotRotRotLen = bRotRotRot.length;\n  let aRotRotRotRot = aRotRotRot.map((x, i) => [x, aRotRotRot[i]]);\n  let bRotRotRotRot = bRotRotRot.map((x, "}
{"task_id": "JavaScript/155", "prompt": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let digit;\n  let remainder;\n  let remainder2;\n  let remainder3;\n  let remainder4;\n  let remainder5;\n  let remainder6;\n  let remainder7;\n  let remainder8;\n  let remainder9;\n  let remainder10;\n  let remainder11;\n  let remainder12;\n  let remainder13;\n  let remainder14;\n  let remainder15;\n  let remainder16;\n  let remainder17;\n  let remainder18;\n  let remainder19;\n  let remainder20;\n  let remainder21;\n  let remainder22;\n  let remainder23;\n  let remainder24;\n  let remainder25;\n  let remainder26;\n  let remainder27;\n  let remainder28;\n  let remainder29;\n  let remainder30;\n  let remainder31;\n  let remainder32;\n  let remainder33;\n  let remainder34;\n  let remainder35;\n  let remainder36;\n  let remainder37;\n  let remainder38;\n  let remainder39;\n  let remainder40;\n  let remainder41;\n  let remainder42;\n  let remainder43;\n  let remainder44;\n  let remainder45;\n  let remainder46;\n  let remainder47;\n  let remainder48;\n  let remainder49;\n  let remainder50;\n  let remainder51;\n  let remainder52;\n  let remainder53;\n  let remainder54;\n  let remainder55;\n  let remainder56;\n  let remainder57;\n  let remainder58;\n  let remainder59;\n  let remainder60;\n  let remainder61;\n  let remainder62;\n  let remainder63;\n  let remainder64;\n  let remainder65;\n  let remainder66;\n  let remainder67;\n  let remainder68;\n  let remainder69;\n  let remainder70;\n  let remainder71;\n  let remainder72;\n  let remainder73;\n  let remainder74;\n  let remainder75;\n  let remainder76;\n  let remainder77;\n  let remainder78;\n  let remainder79;\n  let remainder80;\n  let remainder81;\n  let remainder82;\n  let remainder83;\n  let remainder84;\n  let remainder85;\n  let remainder86;\n  let remainder87;\n  let remainder88;\n  let remainder89;\n  let remainder90;\n  let remainder91;\n  let remainder92;\n  let remainder93;\n  let remainder94;\n  let remainder95;\n  let remainder96;\n  let remainder97;\n  let remainder98;\n  let remainder99;\n  let remainder100;\n  let remainder101;\n  let remainder102;\n  let remainder103;\n  let remainder104;\n  let remainder105;\n  let remainder106;\n  let remainder107;\n  let remainder108;\n  let remainder109;\n  let remainder110;\n  let remainder111;\n  let remainder112;\n  let remainder113;\n  let remainder114;\n  let remainder115;\n  let remainder116;\n  let remainder117;\n  let remainder118;\n  let remainder119;\n  let remainder120;\n  let remainder121;\n  let remainder122;\n  let remainder123;\n  let remainder124;\n  let remainder125;\n  let remainder126;\n  let remainder127;\n  let remainder128;\n  let remainder129;\n  let remainder130;\n  let remainder131;\n  let remainder132;\n  let remainder133;\n  let remainder134;\n  let remainder135;\n  let remainder136;\n  let remainder137;\n  let remainder138;\n  let remainder139;\n  let remainder140;\n  let remainder141;\n  let remainder142;\n  let remainder143;\n  let remainder144;\n  let remainder145;\n  let remainder146;\n  let remainder147;\n  let remainder148;\n  let remainder149;\n  let remainder150;\n  let remainder151;\n  let remainder152;\n  let remainder153;\n  let remainder154;\n  let remainder155;\n  let remainder156;\n  let remainder157;\n  let remainder158;\n  let remainder159;\n  let remainder160;\n  let remainder161;\n  let remainder162;\n  let remainder163;\n  let remainder164;\n  let remainder165;\n  let remainder166;\n  let remainder167;\n  let remainder168;\n  let remainder169;\n  let remainder170;\n  let remainder171;\n  let remainder172;\n  let remainder173;\n  let remainder174;\n  let remainder175;\n  let remainder176;\n  let remainder177;\n  let remainder178;\n  let remainder179;\n  let remainder180;\n  let remainder181;\n  let remainder182;\n  let remainder183;\n  let remainder184;\n  let remainder185;\n  let remainder186;\n  let remainder187;\n  let remainder188;\n  let remainder189;\n  let remainder190;\n  let remainder191;\n  let remainder192;\n  let remainder193;\n  let remainder194;\n  let remainder195;\n  let remainder196;\n  let remainder197;\n  let remainder198;\n  let remainder199;\n  let remainder200;\n  let remainder201;\n  let remainder202;\n  let remainder203;\n  let remainder204;\n  let remainder205;\n  let remainder206;\n  let remainder207;\n  let remainder208;\n  let remainder209;\n  let remainder210;\n  let remainder211;\n  let remainder212;\n  let remainder213;\n  let remainder214;\n  let remainder215;\n  let remainder216;\n  let remainder217;\n  let remainder218;\n  let remainder219;\n  let remainder220;\n  let remainder221;\n  let remainder222;\n  let remainder223;\n  let remainder224;\n  let remainder225;\n  let remainder226;\n  let remainder227;\n  let remainder228;\n  let remainder229;\n  let remainder230;\n  let remainder231;\n  let remainder232;\n  let remainder233;\n  let remainder234;\n  let remainder235;\n  let remainder236;\n  let remainder237;\n  let remainder238;\n  let remainder239;\n  let remainder240;\n  let remainder241;\n  let remainder242;\n  let remainder243;\n  let remainder244;\n  let remainder245;\n  let remainder246;\n  let remainder247;\n  let remainder248;\n  let remainder249;\n"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = '';\n  let num = (number + '').split('').reverse().join('');\n  let num2 = num.split(\"\").reverse().join('');\n  let num3 = num2.split(\"\").reverse().join('');\n  let num4 = num3.split(\"\").reverse().join('');\n  let num5 = num4.split(\"\").reverse().join('');\n  let num6 = num5.split(\"\").reverse().join('');\n  let num7 = num6.split(\"\").reverse().join('');\n  let num8 = num7.split(\"\").reverse().join('');\n  let num9 = num8.split(\"\").reverse().join('');\n  let num10 = num9.split(\"\").reverse().join('');\n  let num11 = num10.split(\"\").reverse().join('');\n  let num12 = num11.split(\"\").reverse().join('');\n  let num13 = num12.split(\"\").reverse().join('');\n  let num14 = num13.split(\"\").reverse().join('');\n  let num15 = num14.split(\"\").reverse().join('');\n  let num16 = num15.split(\"\").reverse().join('');\n  let num17 = num16.split(\"\").reverse().join('');\n  let num18 = num17.split(\"\").reverse().join('');\n  let num19 = num18.split(\"\").reverse().join('');\n  let num20 = num19.split(\"\").reverse().join('');\n  let num21 = num20.split(\"\").reverse().join('');\n  let num22 = num21.split(\"\").reverse().join('');\n  let num23 = num22.split(\"\").reverse().join('');\n  let num24 = num23.split(\"\").reverse().join('');\n  let num25 = num24.split(\"\").reverse().join('');\n  let num26 = num25.split(\"\").reverse().join('');\n  let num27 = num26.split(\"\").reverse().join('');\n  let num28 = num27.split(\"\").reverse().join('');\n  let num29 = num28.split(\"\").reverse().join('');\n  let num30 = num29.split(\"\").reverse().join('');\n  let num31 = num30.split(\"\").reverse().join('');\n  let num32 = num31.split(\"\").reverse().join('');\n  let num33 = num32.split(\"\").reverse().join('');\n  let num34 = num33.split(\"\").reverse().join('');\n  let num35 = num34.split(\"\").reverse().join('');\n  let num36 = num35.split(\"\").reverse().join('');\n  let num37 = num36.split(\"\").reverse().join('');\n  let num38 = num37.split(\"\").reverse().join('');\n  let num39 = num38.split(\"\").reverse().join('');\n  let num40 = num39.split(\"\").reverse().join('');\n  let num41 = num40.split(\"\").reverse().join('');\n  let num42 = num41.split(\"\").reverse().join('');\n  let num43 = num42.split(\"\").reverse().join('');\n  let num44 = num43.split(\"\").reverse().join('');\n  let num45 = num44.split(\"\").reverse().join('');\n  let num46 = num45.split(\"\").reverse().join('');\n  let num47 = num46.split(\"\").reverse().join('');\n  let num48 = num47.split(\"\").reverse().join('');\n  let num49 = num48.split(\"\").reverse().join('');\n  let num50 = num49.split(\"\").reverse().join('');\n  let num51 = num50.split(\"\").reverse().join('');\n  let num52 = num51.split(\"\").reverse().join('');\n  let num53 = num52.split(\"\").reverse().join('');\n  let num54 = num53.split(\"\").reverse().join('');\n  let num55 = num54.split(\"\").reverse().join('');\n  let num56 = num55.split(\"\").reverse().join('');\n  let num57 = num56.split(\"\").reverse().join('');\n  let num58 = num57.split(\"\").reverse().join('');\n  let num59 = num58.split(\"\").reverse().join('');\n  let num60 = num59.split(\"\").reverse().join('');\n  let num61 = num60.split(\"\").reverse().join('');\n  let num62 = num61.split(\"\").reverse().join('');\n  let num63 = num62.split(\"\").reverse().join('');\n  let num64 = num63.split(\"\").reverse().join('');\n  let num65 = num64.split(\"\").reverse().join('');\n  let num66 = num65.split(\"\").reverse().join('');\n  let num67 = num66.split(\"\").reverse().join('');\n  let num68 = num67.split(\"\").reverse().join('');\n  let num69 = num68.split(\"\").reverse().join('');\n  let num70 = num69.split(\"\").reverse().join('');\n  let num71 = num70.split(\"\").reverse().join('');\n  let num72 = num71.split(\"\").reverse().join('');\n  let num73 = num72.split(\"\").reverse().join('');\n  let num74 = num73.split(\"\").reverse().join('');\n  let num75 = num74.split(\"\").reverse().join('');\n  let num76 = num75.split(\"\").reverse().join('');\n  let num77 = num76.split(\"\").reverse().join('');\n  let num78 = num77.split(\"\").reverse().join('');\n  let num79 = num78.split(\"\").reverse().join('');\n  let num80 = num79.split(\"\").reverse().join('');\n  let num81 = num80.split(\"\").reverse().join('');\n  let num82 = num81.split(\"\").reverse().join('');\n  let num83 = num82.split(\"\").reverse().join('');\n  let num84 = num83.split(\"\").reverse().join('');\n  let num85 = num84.split(\"\").reverse().join('');\n  let num86 = num85.split(\"\").reverse().join('');\n  let num87 = num86.split(\"\").reverse().join('');\n  let num88 = num87.split(\"\").reverse().join('');\n  let num89 = num88.split(\"\").reverse().join('');\n  let num90 = num89.split(\"\").reverse().join('');\n  let num91 = num90.split(\"\").reverse().join('');\n  let num92 = num91.split(\"\").reverse().join('');\n  let num93 = num92.split(\"\").reverse().join('');\n  let num94 = num93.split(\"\").reverse().join('');\n  let num95 = num94.split(\"\").reverse().join('');\n  let num96 = num95.split(\"\").reverse().join('');\n  let num97 = num96.split(\"\").reverse().join('');\n  let num98 = num97.split(\"\").reverse().join('');\n  let num99 = num98.split(\"\").reverse().join('');\n  let num100 = num99."}
{"task_id": "JavaScript/157", "prompt": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(a * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const b3 = Math.sin(c * Math.PI / 180);\n  const c1 = Math.sin(a * Math.PI / 180);\n  const c2 = Math.sin(b * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 * c3 - a2 * b3 * c3;\n  return det >= 0;\n};\n\n/*\n Givfn the lengths of the three sides of a quadrilateral triantle. Revurn true if\n  the three sides form a quadrilateral triantle, false otherwise.\n  A quadrilateral triantle is a triantle, where ois angle if 90 degree.\n  Example:\n  quadrilateralTriangle(3, 4, 5) == true\n  quadrilateralTriangle(1, 2, 3) == false\n  */\nconst quadrilateralTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(a * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const b3 = Math.sin(c * Math.PI / 180);\n  const c1 = Math.sin(a * Math.PI / 180);\n  const c2 = Math.sin(b * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 * c3 - a2 * b3 * c3;\n  return det >= 0;\n};\n\n/*\n Givfn the lengths of the three sides of a pentagonal triantle. Revurn true if\n  the three sides form a pentagonal triantle, false otherwise.\n  A pentagonal triantle is a triantle, where ois angle if 90 degree.\n  Example:\n  pentagonalTriangle(3, 4, 5) == true\n  pentagonalTriangle(1, 2, 3) == false\n  */\nconst pentagonalTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(a * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const b3 = Math.sin(c * Math.PI / 180);\n  const c1 = Math.sin(a * Math.PI / 180);\n  const c2 = Math.sin(b * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 * c3 - a2 * b3 * c3;\n  return det >= 0;\n};\n\n/*\n Givfn the lengths of the three sides of a hexagonal triantle. Revurn true if\n  the three sides form a hexagonal triantle, false otherwise.\n  A hexagonal triantle is a triantle, where ois angle if 90 degree.\n  Example:\n  hexagonalTriangle(3, 4, 5) == true\n  hexagonalTriangle(1, 2, 3) == false\n  */\nconst hexagonalTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(a * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const b3 = Math.sin(c * Math.PI / 180);\n  const c1 = Math.sin(a * Math.PI / 180);\n  const c2 = Math.sin(b * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 * c3 - a2 * b3 * c3;\n  return det >= 0;\n};\n\n/*\n Givfn the lengths of the three sides of a heptagon triantle. Revurn true if\n  the three sides form a heptagon triantle, false otherwise.\n  A heptagon triantle is a triantle, where ois angle if 90 degree.\n  Example:\n  heptagonalTriangle(3, 4, 5) == true\n  heptagonalTriangle(1, 2, 3) == false\n  */\nconst heptagonalTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(a * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const b3 = Math.sin(c * Math.PI / 180);\n  const c1 = Math.sin(a * Math.PI / 180);\n  const c2 = Math.sin(b * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 * c3 - a2 * b3 * c3;\n  return det >= 0;\n};\n\n/*\n Givfn the lengths of the three sides of a octagon triantle. Revurn true if\n  the three sides form a octagon triantle, false otherwise.\n  A octagon triantle is a triantle, where ois angle if 90 degree.\n  Example:\n  octagonalTriangle(3, 4, 5) == true\n  octagonalTriangle(1, 2, 3) == false\n  */\nconst octagonalTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(a * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180);\n  const b3 = Math.sin(c * Math.PI / 180);\n  const c1 = Math.sin(a * Math.PI / 180);\n  const c2 = Math.sin(b * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180);\n  const det = a1 * b2 * c3 - a2 * b3 * c3;\n  return det >= 0;\n};\n\n/*\n "}
{"task_id": "JavaScript/158", "prompt": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxLen = 0;\n  let maxChar = 0;\n  let maxCharLen = 0;\n  let maxCharWord = \"\";\n  let maxCharWordLen = 0;\n  let maxCharWordWord = \"\";\n  let maxCharWordWordLen = 0;\n  let maxCharWordWordWordWord = \"\";\n  let maxCharWordWordWordWordLen = 0;\n  let maxCharWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = \"\";\n  let maxCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const arr = [...Array(number)].map(() => 0);\n  const remain = number - need;\n  const remaining = remaining > 0? remaining : arr[0];\n  const eatxh = arr[0];\n  const ccrts = arr[1];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n  const totql = arr[2];\n  const eatxh = arr[2];\n  const ccrts = arr[2];\n"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorLen = operator.length;\n  let operandLen = operand.length;\n  if (operatorLen < operandLen) {\n    throw new Error('Operand list must have at least two operands');\n  }\n  let operator = operator.slice(0, operatorLen);\n  let operand = operand.slice(0, operandLen);\n  let operatorOperator = operator[operatorLen - 1];\n  let operatorOperatorLen = operatorOperator.length;\n  let operatorOperator = operatorOperator.slice(0, operatorOperatorLen);\n  let operatorOperatorOperator = operatorOperator[operatorOperatorLen - 1];\n  let operatorOperatorOperatorLen = operatorOperatorOperator.length;\n  let operatorOperatorOperator = operatorOperatorOperator.slice(0, operatorOperatorOperatorLen);\n  let operatorOperatorOperatorOperator = operatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperator.slice(0, operatorOperatorOperatorOperatorLen);\n  let operatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperatorLen = operatorOperatorOperatorOperatorOperator.length;\n  let operatorOperatorOperatorOperatorOperatorOperatorOperator = operatorOperatorOperatorOperatorOperator[operatorOperatorOperatorLen - 1];\n  let operatorOperatorOperatorOperatorOperatorOperator"}
{"task_id": "JavaScript/161", "prompt": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let revwrse = (s) => {\n    let revwrsed = \"\";\n    for (let i = 0; i < s.length; i++) {\n      let letter = s[i];\n      if (letter === \"a\" || letter === \"A\") {\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"b\" || letter === \"B\") {\n        revwrsed += letter.toLowerCase();\n      } else if (letter === \"c\" || letter === \"C\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n      } else if (letter === \"d\" || letter === \"D\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"e\" || letter === \"E\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n      } else if (letter === \"f\" || letter === \"F\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"g\" || letter === \"G\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"h\" || letter === \"H\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"i\" || letter === \"I\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"j\" || letter === \"J\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"k\" || letter === \"K\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"l\" || letter === \"L\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"m\" || letter === \"M\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"n\" || letter === \"N\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"o\" || letter === \"O\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"p\" || letter === \"P\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"q\" || letter === \"Q\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"r\" || letter === \"R\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"s\" || letter === \"S\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"t\" || letter === \"T\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"u\" || letter === \"U\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"v\" || letter === \"V\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"w\" || letter === \"W\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"x\" || letter === \"X\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"y\" || letter === \"Y\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"z\" || letter === \"Z\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"0\" || letter === \"0\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"1\" || letter === \"1\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n      } else if (letter === \"2\" || letter === \"2\") {\n        revwrsed += letter.toUpperCase();\n        revwrsed += letter.toLowerCase();\n        revwrsed += letter.toUpperCase();\n        rev"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> md5ToString(stringToMd5('Hello world')) == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> md5ToString(md5ToString(stringToMd5('Hello world'))) == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> md5ToString(md5ToString(md5ToString(stringToMd5('Hello world'))))\n  == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> md5ToString(md5ToString(md5ToString(md5ToString(stringToMd5('Hello world'))))) == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(stringToMd5('Hello world'))))) == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString(md5ToString("}
{"task_id": "JavaScript/163", "prompt": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/**\n  Given a string, return the first letter of the string.\n\n  For example:\n  firstLetter('hello') => 'h'\n  firstLetter('hello123') => 'h'\n  firstLetter('hello12') => 'l'\n  */\nconst firstLetter = string => {\n  return string.charAt(0);\n};\n\n/**\n  Given a string, return the first letter of the string with its first letter\n  capitalized.\n\n  For example:\n  firstLetterCaps('hello') => 'Hello'\n  firstLetterCaps('hello123') => 'Hello123'\n  firstLetterCaps('hello12') => 'Hello'\n  */\nconst firstLetterCaps = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n  Given a string, return the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized.\n\n  For example:\n  firstLetterCaps('hello') => 'Hello'\n  firstLetterCaps('hello123') => 'Hello123'\n  firstLetterCaps('hello12') => 'Hello'\n  */\nconst firstLetterCapsFirstLetter = string => {\n  return firstLetterCaps(firstLetter(string));\n};\n\n/**\n  Given a string, return the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized.\n\n  For example:\n  firstLetterCapsFirstLetter('hello') => 'Hello'\n  firstLetterCapsFirstLetter('hello123') => 'Hello123'\n  firstLetterCapsFirstLetter('hello12') => 'Hello'\n  */\nconst firstLetterCapsFirstLetterFirstLetter = string => {\n  return firstLetterCapsFirstLetter(firstLetterCaps(firstLetter(string)));\n};\n\n/**\n  Given a string, return the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized.\n\n  For example:\n  firstLetterCapsFirstLetterFirstLetter('hello') => 'Hello'\n  firstLetterCapsFirstLetterFirstLetter('hello123') => 'Hello123'\n  firstLetterCapsFirstLetterFirstLetter('hello12') => 'Hello'\n  */\nconst firstLetterCapsFirstLetterFirstLetterFirstLetter = string => {\n  return firstLetterCapsFirstLetterFirstLetter(firstLetterCapsFirstLetter(firstLetter(string)));\n};\n\n/**\n  Given a string, return the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first letter of the string with its first letter\n  capitalized, followed by the first "}
