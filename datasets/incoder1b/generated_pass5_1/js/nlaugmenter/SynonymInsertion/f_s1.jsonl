{"task_id": "JavaScript/0", "prompt": "/* Check match if in given pass list of numbers, are any two numbers closer to each other than \n   given hold threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Check match if in given pass list of numbers, are any two numbers closer to each other than \n   given hold threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let closest = numbers[0];\n  let closest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const diff = numbers[i] - closest;\n    if (diff < threshold) {\n      closest = numbers[i];\n    }\n  }\n  return closest!== numbers[0];\n};\n\n/**\n * Get a random element from the given array\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 7\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 8\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 9\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 10\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 11\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 12\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 13\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 14\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 15\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 16\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 17\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 18\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 19\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 20\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 21\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 22\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 23\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 24\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 25\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 26\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 27\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 28\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 29\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 30\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 31\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 32\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 33\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 34\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 35\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 36\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 37\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 38\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 39\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 40\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 41\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 42\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 43\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 44\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 45\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 46\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 47\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 48\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 49\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 50\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 51\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 52\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 53\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 54\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 55\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 56\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 57\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 58\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 59\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 60\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 61\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 62\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 63\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 64\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 65\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 66\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 67\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 68\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 69\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 70\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 71\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 72\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 73\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 74\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * 75\n * \n * >>> getRandomElement([1,2,3,4,5,6,7,8,9,10])\n * ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input input signal to this function routine is a string containing incorporate multiple groups of nested nest parentheses. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate disjoined groups group are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input input signal to this function routine is a string containing incorporate multiple groups of nested nest parentheses. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate disjoined groups group are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((paren_group) => {\n    const paren_group_array2 = [];\n    paren_group.split(/\\)/).forEach((paren_group2) => {\n      const paren_group_array3 = [];\n      paren_group2.split(/\\(/).forEach((paren_group3) => {\n        const paren_group_array4 = [];\n        paren_group3.split(/\\)/).forEach((paren_group4) => {\n          paren_group_array4.push(paren_group4);\n        });\n        paren_group_array3.push(paren_group_array4);\n      });\n      paren_group_array2.push(paren_group_array3);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input input signal to this function routine is a string containing incorporate multiple groups of nested nest parentheses. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate disjoined groups group are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((paren_group) => {\n    const paren_group_array2 = [];\n    paren_group.split(/\\)/).forEach((paren_group2) => {\n      const paren_group_array3 = [];\n      paren_group2.split(/\\(/).forEach((paren_group3) => {\n        const paren_group_array4 = [];\n        paren_group3.split(/\\)/).forEach((paren_group4) => {\n          paren_group_array4.push(paren_group4);\n        });\n        paren_group_array3.push(paren_group_array4);\n      });\n      paren_group_array2.push(paren_group_array3);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input input signal to this function routine is a string containing incorporate multiple groups of nested nest parentheses. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate disjoined groups group are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups3 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((paren_group) => {\n    const paren_group_array2 = [];\n    paren_group.split(/\\)/).forEach((paren_group2) => {\n      const paren_group_array3 = [];\n      paren_group2.split(/\\(/).forEach((paren_group3) => {\n        const paren_group_array4 = [];\n        paren_group3.split(/\\)/).forEach((paren_group4) => {\n          paren_group_array4.push(paren_group4);\n        });\n        paren_group_array3.push(paren_group_array4);\n      });\n      paren_group_array2.push(paren_group_array3);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input input signal to this function routine is a string containing incorporate multiple groups of nested nest parentheses. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate disjoined groups group are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups4 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((paren_group) => {\n    const paren_group_array2 = [];\n    paren_group.split(/\\)/).forEach((paren_group2) => {\n      const paren_group_array3 = [];\n      paren_group2.split(/\\(/).forEach((paren_group3) => {\n        const paren_group_array4 = [];\n        paren_group3.split(/\\)/).forEach((paren_group4) => {\n          paren_group_array4.push(paren_group4);\n        });\n        paren_group_array3.push(paren_group_array4);\n      });\n      paren_group_array2.push(paren_group_array3);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input input signal to this function routine is a string containing incorporate multiple groups of nested nest parentheses. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate disjoined groups group are balanced (each open brace couple is properly closed) and not nested within each other \n   Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups5 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/gi);\n  const paren_group_array = [];\n  paren_groups.forEach((paren_group) => {\n    const paren_group_array2 = [];\n    paren_group.split(/\\)/).forEach((paren_group2) => {\n      const paren_group_array3 = [];\n      paren_group2.split(/\\(/).forEach((paren_group3) => {\n        const paren_group_array4 = [];\n        paren_group3.split(/\\)/).forEach((paren_group4) => {\n          paren_group_array4.push(paren_group4);\n        });\n        paren_group_array3.push(paren_group_array4);\n      });\n      paren_group_array2.push(paren_group_array3);\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\n/* Input input signal to this function routine is a string containing incorporate multiple groups of nested nest parentheses. Your goal finish is to \n   separate those group into separate freestanding strings and return the list of those. \n   Separate disjoined groups group are balanced (each open brace couple is properly closed) and not nested within ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test quiz if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Test quiz if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.reverse().split('').reverse().join('');\n  const palindromeLength = palindrome.length;\n  const palindromePrefix = palindrome.slice(0, palindromeLength);\n  const palindromeSuffix = palindrome.slice(palindromeLength);\n  return palindromePrefix + palindromeSuffix;\n}\n\n/* Test if given string is a palindrome * / \nconst isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.reverse().split('').reverse().join('');\n  const palindromeLength = palindrome.length;\n  const palindromePrefix = palindrome.slice(0, palindromeLength);\n  const palindromeSuffix = palindrome.slice(palindromeLength);\n  return palindromePrefix + palindromeSuffix;\n}\n\n/* Test if given string is a palindrome * / \nconst isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.reverse().split('').reverse().join('');\n  const palindromeLength = palindrome.length;\n  const palindromePrefix = palindrome.slice(0, palindromeLength);\n  const palindromeSuffix = palindrome.slice(palindromeLength);\n  return palindromePrefix + palindromeSuffix;\n}\n\n/* Test if given string is a palindrome * / \nconst isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.reverse().split('').reverse().join('');\n  const palindromeLength = palindrome.length;\n  const palindromePrefix = palindrome.slice(0, palindromeLength);\n  const palindromeSuffix = palindrome.slice(palindromeLength);\n  return palindromePrefix + palindromeSuffix;\n}\n\n/* Test if given string is a palindrome * / \nconst isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.reverse().split('').reverse().join('');\n  const palindromeLength = palindrome.length;\n  const palindromePrefix = palindrome.slice(0, palindromeLength);\n  const palindromeSuffix = palindrome.slice(palindromeLength);\n  return palindromePrefix + palindromeSuffix;\n}\n\n/* Test if given string is a palindrome * / \nconst isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* Find witness the shortest palindrome that begins begin with a supplied string.\n   Algorithm idea estimate is simple: \n   - Find recover the longest postfix suffix of supplied string that is a palindrome. \n   - Append to the end conclusion of the string reverse reversion of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string.reverse().split('').reverse().join('');\n  const palindromeLength = palindrome.length;\n  const palindromePrefix = palindrome.slice(0, palindromeLength);\n  const palindromeSuffix = palindrome.slice(palindromeLength);\n  return palindromePrefix + palindromeSuffix;\n}\n\n/* Test if given string is a palindrome * / \nconst isPalindro", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd curious. \n       - the next even number if n is even. \n   Return the number of stones in each level in a list, where element at index exponent \n   i represents the number of stones in the level degree (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd curious. \n       - the next even number if n is even. \n   Return the number of stones in each level in a list, where element at index exponent \n   i represents the number of stones in the level degree (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stones = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stonesLevel = stones.reduce((acc, cur, i) => {\n    if (stones[i] % 2 === 0) {\n      acc[stonesLevel[i]] = acc[stonesLevel[i]] || 0;\n      acc[stonesLevel[i]] += 1;\n    }\n    return acc;\n  }, {});\n  return levels.map((_, i) => stonesLevel[i]);\n};\n\n/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd curious. \n       - the next even number if n is even. \n   Return the number of stones in each level in a list, where element at index exponent \n   i represents the number of stones in the level degree (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stones = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stonesLevel = stones.reduce((acc, cur, i) => {\n    if (stones[i] % 2 === 0) {\n      acc[stonesLevel[i]] = acc[stonesLevel[i]] || 0;\n      acc[stonesLevel[i]] += 1;\n    }\n    return acc;\n  }, {});\n  return levels.map((_, i) => stonesLevel[i]);\n};\n\n/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd curious. \n       - the next even number if n is even. \n   Return the number of stones in each level in a list, where element at index exponent \n   i represents the number of stones in the level degree (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stones = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stonesLevel = stones.reduce((acc, cur, i) => {\n    if (stones[i] % 2 === 0) {\n      acc[stonesLevel[i]] = acc[stonesLevel[i]] || 0;\n      acc[stonesLevel[i]] += 1;\n    }\n    return acc;\n  }, {});\n  return levels.map((_, i) => stonesLevel[i]);\n};\n\n/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd curious. \n       - the next even number if n is even. \n   Return the number of stones in each level in a list, where element at index exponent \n   i represents the number of stones in the level degree (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stones = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stonesLevel = stones.reduce((acc, cur, i) => {\n    if (stones[i] % 2 === 0) {\n      acc[stonesLevel[i]] = acc[stonesLevel[i]] || 0;\n      acc[stonesLevel[i]] += 1;\n    }\n    return acc;\n  }, {});\n  return levels.map((_, i) => stonesLevel[i]);\n};\n\n/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd curious. \n       - the next even number if n is even. \n   Return the number of stones in each level in a list, where element at index exponent \n   i represents the number of stones in the level degree (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stones = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stonesLevel = stones.reduce((acc, cur, i) => {\n    if (stones[i] % 2 === 0) {\n      acc[stonesLevel[i]] = acc[stonesLevel[i]] || 0;\n      acc[stonesLevel[i]] += 1;\n    }\n    return acc;\n  }, {});\n  return levels.map((_, i) => stonesLevel[i]);\n};\n\n/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd curious. \n       - the next even number if n is even. \n   Return the number of stones in each level in a list, where element at index exponent \n   i represents the number of stones in the level degree (i+1).\n\n   Examples model:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stones = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const stonesLevel = stones.reduce((acc, cur, i) => {\n    if (stones[i] % 2 === 0) {\n      acc[stonesLevel[i]] = acc[stonesLevel[i]] || 0;\n      acc[stonesLevel[i]] += 1;\n    }\n    return acc;\n  }, {});\n  return levels.map((_, i) => stonesLevel[i]);\n};\n\n/*\n  Given grant a positive integer n, you have to make seduce a pile atomic pile of n levels grade of stones. \n   The first inaugural level has n stones stone. \n   The number of stones gem in the next future level is: \n       - the next following odd leftover number if n is odd cur", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given grant a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given grant a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish by commas comma or spaces. Your task job is \n   to split the string drawstring into words and return an array of the words discussion.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    word = word.toLowerCase();\n    if (word!== \"\") {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You will be given a string of words word separated distinguish ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function affair takes lead two positive numbers phone number x and y and returns the \n   biggest bad even integer number that is in the range image [x, y] inclusive. If \n   there's no such number, then the function affair should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function affair takes lead two positive numbers phone number x and y and returns the \n   biggest bad even integer number that is in the range image [x, y] inclusive. If \n   there's no such number, then the function affair should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let max = 0;\n  let maxNum = -1;\n  let num = 0;\n  let num2 = 1;\n  let num3 = 1;\n  let num4 = 1;\n  let num5 = 1;\n  let num6 = 1;\n  let num7 = 1;\n  let num8 = 1;\n  let num9 = 1;\n  let num10 = 1;\n  let num11 = 1;\n  let num12 = 1;\n  let num13 = 1;\n  let num14 = 1;\n  let num15 = 1;\n  let num16 = 1;\n  let num17 = 1;\n  let num18 = 1;\n  let num19 = 1;\n  let num20 = 1;\n  let num21 = 1;\n  let num22 = 1;\n  let num23 = 1;\n  let num24 = 1;\n  let num25 = 1;\n  let num26 = 1;\n  let num27 = 1;\n  let num28 = 1;\n  let num29 = 1;\n  let num30 = 1;\n  let num31 = 1;\n  let num32 = 1;\n  let num33 = 1;\n  let num34 = 1;\n  let num35 = 1;\n  let num36 = 1;\n  let num37 = 1;\n  let num38 = 1;\n  let num39 = 1;\n  let num40 = 1;\n  let num41 = 1;\n  let num42 = 1;\n  let num43 = 1;\n  let num44 = 1;\n  let num45 = 1;\n  let num46 = 1;\n  let num47 = 1;\n  let num48 = 1;\n  let num49 = 1;\n  let num50 = 1;\n  let num51 = 1;\n  let num52 = 1;\n  let num53 = 1;\n  let num54 = 1;\n  let num55 = 1;\n  let num56 = 1;\n  let num57 = 1;\n  let num58 = 1;\n  let num59 = 1;\n  let num60 = 1;\n  let num61 = 1;\n  let num62 = 1;\n  let num63 = 1;\n  let num64 = 1;\n  let num65 = 1;\n  let num66 = 1;\n  let num67 = 1;\n  let num68 = 1;\n  let num69 = 1;\n  let num70 = 1;\n  let num71 = 1;\n  let num72 = 1;\n  let num73 = 1;\n  let num74 = 1;\n  let num75 = 1;\n  let num76 = 1;\n  let num77 = 1;\n  let num78 = 1;\n  let num79 = 1;\n  let num80 = 1;\n  let num81 = 1;\n  let num82 = 1;\n  let num83 = 1;\n  let num84 = 1;\n  let num85 = 1;\n  let num86 = 1;\n  let num87 = 1;\n  let num88 = 1;\n  let num89 = 1;\n  let num91 = 1;\n  let num92 = 1;\n  let num93 = 1;\n  let num94 = 1;\n  let num95 = 1;\n  let num96 = 1;\n  let num97 = 1;\n  let num98 = 1;\n  let num99 = 1;\n  let num100 = 1;\n  let num101 = 1;\n  let num102 = 1;\n  let num103 = 1;\n  let num104 = 1;\n  let num105 = 1;\n  let num106 = 1;\n  let num107 = 1;\n  let num108 = 1;\n  let num109 = 1;\n  let num110 = 1;\n  let num111 = 1;\n  let num112 = 1;\n  let num113 = 1;\n  let num114 = 1;\n  let num115 = 1;\n  let num116 = 1;\n  let num117 = 1;\n  let num118 = 1;\n  let num119 = 1;\n  let num120 = 1;\n  let num121 = 1;\n  let num122 = 1;\n  let num123 = 1;\n  let num124 = 1;\n  let num125 = 1;\n  let num126 = 1;\n  let num127 = 1;\n  let num128 = 1;\n  let num129 = 1;\n  let num131 = 1;\n  let num132 = 1;\n  let num133 = 1;\n  let num134 = 1;\n  let num135 = 1;\n  let num136 = 1;\n  let num137 = 1;\n  let num138 = 1;\n  let num139 = 1;\n  let num140 = 1;\n  let num141 = 1;\n  let num142 = 1;\n  let num143 = 1;\n  let num144 = 1;\n  let num145 = 1;\n  let num146 = 1;\n  let num147 = 1;\n  let num148 = 1;\n  let num149 = 1;\n  let num150 = 1;\n  let num151 = 1;\n  let num152 = 1;\n  let num153 = 1;\n  let num154 = 1;\n  let num155 = 1;\n  let num156 = 1;\n  let num157 = 1;\n  let num158 = 1;\n  let num159 = 1;\n  let num160 = 1;\n  let num161 = 1;\n  let num162 = 1;\n  let num163 = 1;\n  let num164 = 1;\n  let num165 = 1;\n  let num166 = 1;\n  let num167 = 1;\n  let num168 = 1;\n  let num169 = 1;\n  let num170 = 1;\n  let num171 = 1;\n  let num172 = 1;\n  let num173 = 1;\n  let num174 = 1;\n  let num175 = 1;\n  let num176 = 1;\n  let num177 = 1;\n  let num178 = 1;\n  let num179 = 1;\n  let num180 = 1;\n  let num181 = 1;\n  let num182 = 1;\n  let num183 = 1;\n  let num184 = 1;\n  let num185 = 1;\n  let num186 = 1;\n  let num187 = 1;\n  let num188 = 1;\n  let num189 = 1;\n  let num190 = 1;\n  let num191 = 1;\n  let num192 = 1;\n  let num193 = 1;\n  let num194 = 1;\n  let num195 = 1;\n  let num196 = 1;\n  let num197 = 1;\n  let num198 = 1;\n  let num199 = 1;\n  let num200 = 1;\n  let num201 = 1;\n  let num202 = 1;\n  let num203 = 1;\n  let num204 = 1;\n  let num205 = 1;\n  let num206 = 1;\n  let num207 = 1;\n  let num208 = 1;\n  let num209 = 1;\n  let num210 = 1;\n  let num211 = 1;\n  let num212 = 1;\n  let num213 = 1;\n  let num214 = 1;\n  let num215 = 1;\n  let num216 = 1;\n  let num217 = 1;\n  let num218 = 1;\n  let num219 = 1;\n  let num220 = 1;\n  let num221 = 1;\n  let num222 = 1;\n  let num223 = 1;\n  let num224 = 1;\n  let num225 = 1;\n  let num226 = 1;\n  let num227 = 1;\n  let num228 = 1;\n  let num229 = 1;\n  let num230 = 1;\n  let num231 = 1;\n  let num232 = 1;\n  let num233 = 1;\n  let num234 = 1;\n  let num235 = 1;\n  let num236 = 1;\n  let num237 = 1;\n  let num238 = 1;\n  let num239 = 1;\n  let num240 = 1;\n  let num241 = 1;\n  let num242 = 1;\n  let num243 = 1;\n  let num244 = 1;\n  let num245 = 1;\n  let num246 = 1;\n  let num247 = 1;\n  let num248 = 1;\n  let num249 = 1;\n  let num250 = 1;\n  let num251 = 1;\n  let num252 = 1;\n  let num253 = 1;\n  let num254 = 1;\n  let num255 = 1;\n  let num256 = 1;\n  let num257 = 1;\n  let num258 = 1;\n  let num259 = 1;\n  let num260 = 1;\n  let num261 = 1;\n  let num262 = 1;\n  let num263 = 1;\n  let num264 = 1;\n  let num265 = 1;\n  let num266 = 1;\n  let num267 = 1;\n  let num268 = 1;\n  let num269 = 1;\n  let num270 = 1;\n  let num271 = 1;\n  let num272 = 1;\n  let num273 = 1;\n  let num274 = 1;\n  let num275 = 1;\n  let num276 = 1;\n  let num277 = 1;\n  let num278 = 1;\n  let num279 = 1;\n  let num280 = 1;\n  let num281 = 1;\n  let num282 = 1;\n  let num", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given grant two positive integers integer n and m, and your task undertaking is to compute calculate the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater great than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given grant two positive integers integer n and m, and your task undertaking is to compute calculate the \n   average of the integers from n through m (including admit n and m). \n   Round the answer to the nearest cheeseparing integer and convert that to binary. \n   If n is greater great than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let result = '';\n  let remainder = 0;\n  let remainder2 = 0;\n  let remainder3 = 0;\n  let remainder4 = 0;\n  let remainder5 = 0;\n  let remainder6 = 0;\n  let remainder7 = 0;\n  let remainder8 = 0;\n  let remainder9 = 0;\n  let remainder10 = 0;\n  let remainder11 = 0;\n  let remainder12 = 0;\n  let remainder13 = 0;\n  let remainder14 = 0;\n  let remainder15 = 0;\n  let remainder16 = 0;\n  let remainder17 = 0;\n  let remainder18 = 0;\n  let remainder19 = 0;\n  let remainder20 = 0;\n  let remainder21 = 0;\n  let remainder22 = 0;\n  let remainder23 = 0;\n  let remainder24 = 0;\n  let remainder25 = 0;\n  let remainder26 = 0;\n  let remainder27 = 0;\n  let remainder28 = 0;\n  let remainder29 = 0;\n  let remainder30 = 0;\n  let remainder31 = 0;\n  let remainder32 = 0;\n  let remainder33 = 0;\n  let remainder34 = 0;\n  let remainder35 = 0;\n  let remainder36 = 0;\n  let remainder37 = 0;\n  let remainder38 = 0;\n  let remainder39 = 0;\n  let remainder40 = 0;\n  let remainder41 = 0;\n  let remainder42 = 0;\n  let remainder43 = 0;\n  let remainder44 = 0;\n  let remainder45 = 0;\n  let remainder46 = 0;\n  let remainder47 = 0;\n  let remainder48 = 0;\n  let remainder49 = 0;\n  let remainder50 = 0;\n  let remainder51 = 0;\n  let remainder52 = 0;\n  let remainder53 = 0;\n  let remainder54 = 0;\n  let remainder55 = 0;\n  let remainder56 = 0;\n  let remainder57 = 0;\n  let remainder58 = 0;\n  let remainder59 = 0;\n  let remainder60 = 0;\n  let remainder61 = 0;\n  let remainder62 = 0;\n  let remainder63 = 0;\n  let remainder64 = 0;\n  let remainder65 = 0;\n  let remainder66 = 0;\n  let remainder67 = 0;\n  let remainder68 = 0;\n  let remainder69 = 0;\n  let remainder70 = 0;\n  let remainder71 = 0;\n  let remainder72 = 0;\n  let remainder73 = 0;\n  let remainder74 = 0;\n  let remainder75 = 0;\n  let remainder76 = 0;\n  let remainder77 = 0;\n  let remainder78 = 0;\n  let remainder79 = 0;\n  let remainder80 = 0;\n  let remainder81 = 0;\n  let remainder82 = 0;\n  let remainder83 = 0;\n  let remainder84 = 0;\n  let remainder85 = 0;\n  let remainder86 = 0;\n  let remainder87 = 0;\n  let remainder88 = 0;\n  let remainder89 = 0;\n  let remainder90 = 0;\n  let remainder91 = 0;\n  let remainder92 = 0;\n  let remainder93 = 0;\n  let remainder94 = 0;\n  let remainder95 = 0;\n  let remainder96 = 0;\n  let remainder97 = 0;\n  let remainder98 = 0;\n  let remainder99 = 0;\n  let remainder100 = 0;\n  let remainder101 = 0;\n  let remainder102 = 0;\n  let remainder103 = 0;\n  let remainder104 = 0;\n  let remainder105 = 0;\n  let remainder106 = 0;\n  let remainder107 = 0;\n  let remainder108 = 0;\n  let remainder109 = 0;\n  let remainder110 = 0;\n  let remainder111 = 0;\n  let remainder112 = 0;\n  let remainder113 = 0;\n  let remainder114 = 0;\n  let remainder115 = 0;\n  let remainder116 = 0;\n  let remainder117 = 0;\n  let remainder118 = 0;\n  let remainder119 = 0;\n  let remainder120 = 0;\n  let remainder121 = 0;\n  let remainder122 = 0;\n  let remainder123 = 0;\n  let remainder124 = 0;\n  let remainder125 = 0;\n  let remainder126 = 0;\n  let remainder127 = 0;\n  let remainder128 = 0;\n  let remainder129 = 0;\n  let remainder130 = 0;\n  let remainder131 = 0;\n  let remainder132 = 0;\n  let remainder133 = 0;\n  let remainder134 = 0;\n  let remainder135 = 0;\n  let remainder136 = 0;\n  let remainder137 = 0;\n  let remainder138 = 0;\n  let remainder139 = 0;\n  let remainder140 = 0;\n  let remainder141 = 0;\n  let remainder142 = 0;\n  let remainder143 = 0;\n  let remainder144 = 0;\n  let remainder145 = 0;\n  let remainder146 = 0;\n  let remainder147 = 0;\n  let remainder148 = 0;\n  let remainder149 = 0;\n  let remainder150 = 0;\n  let remainder151 = 0;\n  let remainder152 = 0;\n  let remainder153 = 0;\n  let remainder154 = 0;\n  let remainder155 = 0;\n  let remainder156 = 0;\n  let remainder157 = 0;\n  let remainder158 = 0;\n  let remainder159 = 0;\n  let remainder160 = 0;\n  let remainder161 = 0;\n  let remainder162 = 0;\n  let remainder163 = 0;\n  let remainder164 = 0;\n  let remainder165 = 0;\n  let remainder166 = 0;\n  let remainder167 = 0;\n  let remainder168 = 0;\n  let remainder169 = 0;\n  let remainder170 = 0;\n  let remainder171 = 0;\n  let remainder172 = 0;\n  let remainder173 = 0;\n  let remainder174 = 0;\n  let remainder175 = 0;\n  let remainder176 = 0;\n  let remainder177 = 0;\n  let remainder178 = 0;\n  let remainder179 = 0;\n  let remainder180 = 0;\n  let remainder181 = 0;\n  let remainder182 = 0;\n  let remainder183 = 0;\n  let remainder184 = 0;\n  let remainder185 = 0;\n  let remainder186 = 0;\n  let remainder187 = 0;\n  let remainder188 = 0;\n  let remainder189 = 0;\n  let remainder190 = 0;\n  let remainder191 = 0;\n  let remainder192 = 0;\n  let remainder193 = 0;\n  let remainder194 = 0;\n  let remainder195 = 0;\n  let remainder196 = 0;\n  let remainder197 = 0;\n  let remainder198 = 0;\n  let remainder199 = 0;\n  let remainder200 = 0;\n  let remainder201 = 0;\n  let remainder202 = 0;\n  let remainder203 = 0;\n  let remainder204 = 0;\n  let remainder205 = 0;\n  let remainder206 = 0;\n  let remainder207 = 0;\n  let remainder208 = 0;\n  let remainder209 = 0;\n  let remainder210 = 0;\n  let remainder211 = 0;\n  let remainder212 = 0;\n  let remainder213 = 0;\n  let remainder214 = 0;\n  let remainder215 = 0;\n  let remainder216 = 0;\n  let remainder217 = 0;\n  let remainder218 = 0;\n  let remainder219 = 0;\n  let remainder220 = 0;\n  let remainder221 = 0;\n  let remainder222 = 0;\n  let remainder223 = 0;\n  let remainder224 = 0;\n  let remainder225 = 0;\n  let remainder226 = 0;\n  let remainder227 = 0;\n  let remainder228 = 0;\n  let remainder229 = 0;\n  let remainder230 = 0;\n  let remainder231 = 0;\n  let remainder232 = 0;\n  let remainder233 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive cocksure integers integer x. return a sorted list of all \n   elements chemical element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted in increasing increase order. \n  \n   For example model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive cocksure integers integer x. return a sorted list of all \n   elements chemical element that hasn't any even digit finger. \n\n   Note: Returned list should be sorted in increasing increase order. \n  \n   For example model:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let digits = [];\n  let digit;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given grant an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse revoke the resulting result array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant an array of integers, sort the integers integer that are between 1 and 9 inclusive, \n   reverse revoke the resulting result array, and then replace each digit finger by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement follow through the function routine f that takes n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index i is the factorial of i if i is even \n   or the sum kernel of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication generation of the numbers issue from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Implement follow through the function routine f that takes n as a parameter argument, \n   and returns a list of size n, such that the value of the element component at index i is the factorial of i if i is even \n   or the sum kernel of numbers from 1 to i otherwise differently. \n   i starts from 1. \n   the factorial of i is the multiplication generation of the numbers issue from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(factorial(i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function factorial that takes one argument n and returns the factorial of n \n   if n is even or else the factorial of n-1. \n   n starts from 1. \n   the factorial of n is the multiplication generation of the numbers issue from 1 to n (1 * 2 *... * n).\n  Example:\n  factorial(5) == 120\n  */\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the value of the element component at index i is the sum of all numbers up to i. \n   n starts from 1. \n   the sum of all numbers up to i is the sum of all numbers up to i (1 + 2 + 3 +... + n).\n  Example:\n  sumKernel(5) == [5, 6, 7, 8, 9]\n  */\nconst sumKernel = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/* Implement the function sumKernel that takes one argument n and returns a list of size n, such that the ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given grant a positive integer n, return a tuple that has the number issue of even and odd curious \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a positive integer n, return a tuple that has the number issue of even and odd curious \n   integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n\n  oddPalindromes.forEach((i) => {\n    if (i % 2 === 0) {\n      evenPalindromes.push(i);\n    }\n  });\n\n  return evenPalindromes.map((i) => oddPalindromes.indexOf(i));\n};\n\n/*\n  Given a positive integer n, return an array that has all even and odd integer palindromes palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2, 3]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned array has all even and odd integer palindromes palindrome that fall within the range(1, n), inclusive.\n  */\nconst evenOddPalindromes = (num) => {\n  const evenPalindromes = evenOddPalindrome(num);\n  const oddPalindromes = oddOddPalindrome(num);\n\n  return evenPalindromes.concat(oddPalindromes);\n};\n\n/*\n  Given a positive integer n, return an array that has all even and odd integer palindromes palindrome that fall within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 3]\n      Explanation:\n      Integer palindrome are 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [2, 3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned array has all even and odd integer palindromes palindrome that fall within the range(2, n), inclusive.\n  */\nconst oddOddPalindromes = (num) => {\n  const evenPalindromes = evenOddPalindrome(num);\n  const oddPalindromes = oddOddPalindrome(num);\n\n  return evenPalindromes.concat(oddPalindromes);\n};\n\n/*\n  Given a positive integer n, return an array that has all even and odd integer palindromes palindrome that fall within the range(3, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: [3, 4]\n      Explanation:\n      Integer palindrome are 3, 4. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [3, 4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned array has all even and odd integer palindromes palindrome that fall within the range(3, n), inclusive.\n  */\nconst evenOddPalindromes2 = (num) => {\n  const evenPalindromes = evenOddPalindrome(num);\n  const oddPalindromes = oddOddPalindrome(num);\n\n  return evenPalindromes.concat(oddPalindromes);\n};\n\n/*\n  Given a positive integer n, return an array that has all even and odd integer palindromes palindrome that fall within the range(4, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: [4, 5]\n      Explanation:\n      Integer palindrome are 4, 5. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [4, 5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned array has all even and odd integer palindromes palindrome that fall within the range(4, n), inclusive.\n  */\nconst oddOddPalindromes2 = (num) => {\n  const evenPalindromes = evenOddPalindrome(num);\n  const oddPalindromes = oddOddPalindrome(num);\n\n  return evenPalindromes.concat(oddPalindromes);\n};\n\n/*\n  Given a positive integer n, return an array that has all even and odd integer palindromes palindrome that fall within the range(5, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: [5, 6]\n      Explanation:\n      Integer palindrome are 5, 6. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [5, 6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned array has all even and odd integer palindromes palindrome that fall within the range(5, n), inclusive.\n  */\nconst evenOddPalindromes3 = (num) => {\n  const evenPalindromes = evenOddPalindrome(num);\n  const oddPalindromes = oddOddPalindrome(num);\n\n  return evenPalindromes.concat(oddPalindromes);\n};\n\n/*\n  Given a positive integer n, return an array that has all even and odd integer palindromes palindrome that fall within the range(6, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: [6, 7]\n      Explanation:\n      Integer palindrome are 6, 7. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [6, 7, 8, 9, 11]\n      Explanation:\n      Integer palindrome are 6, 7, 8, 9, 11. ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a function routine countNums which takes an array of integers integer and returns \n   the number issue of elements which has a sum kernel of digits > 0. \n   If a number act is negative, then its first beginning signed bless digit will be negative minus: \n   e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write publish a ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers integer arr[1], arr[2],... , arr[N].The\n   numbers phone number in the array will be randomly ordered. Your task undertaking is to determine if \n   it is possible potential to get an array sorted classify in non - decreasing order by performing do \n   the following operation mathematical process on the given feed array: \n       You are allowed to perform do right shift operation any number of times. \n  \n   One right shift operation process means shifting all elements of the array by one \n   position situation in the right direction steering. The last final element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it is possible to obtain prevail the sorted array by performing the above operation \n   then return true else return false. \n   If the given array is empty then return true dependable. \n\n   Note: The given list is guaranteed undertake to have unique singular elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers integer arr[1], arr[2],..., arr[N].The\n   numbers phone number in the array will be randomly ordered. Your task undertaking is to determine if \n   it is possible potential to get an array sorted classify in non - decreasing order by performing do \n   the following operation mathematical process on the given feed array: \n       You are allowed to perform do right shift operation any number of times. \n  \n   One right shift operation process means shifting all elements of the array by one \n   position situation in the right direction steering. The last final element of the array will be moved to \n   the starting position in the array i.e. 0th index. \n\n   If it is possible to obtain prevail the sorted array by performing the above operation \n   then return true else return false. \n   If the given array is empty then return true dependable. \n\n   Note: The given list is guaranteed undertake to have unique singular elements element.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let moveOneBallArr = [];\n  let moveOneBallArrIndex = 0;\n  let moveOneBallArrLength = 0;\n  let moveOneBallArrTemp;\n  let moveOneBallArrTempIndex;\n  let moveOneBallArrTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;\n  let moveOneBallArrTempTemp;\n  let moveOneBallArrTempTempIndex;\n  let moveOneBallArrTempTempLength;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input input signal are two strings string a and b consisting only of 1s and 0s zero. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input input signal are two strings string a and b consisting only of 1s and 0s zero. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXorNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s zero. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s one. \n   Perform binary XOR on these inputs input and return result also besides as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Input input signal are two strings string a and b consisting only of 1s and 0s ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem trouble, you will implement enforce a function that takes remove two lists of numbers issue, \n   and determines whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers numeral. \n   There is no limit terminus ad quem on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*In this problem trouble, you will implement enforce a function that takes remove two lists of numbers issue, \n   and determines whether it is possible potential to perform an exchange of elements component \n   between them to make lst1 a list of only even numbers numeral. \n   There is no limit terminus ad quem on the number of exchanged change elements between lst1 and lst2.\n   If it is possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let num1 = lst1.filter(e => e % 2 === 0).length;\n  let num2 = lst2.filter(e => e % 2 === 0).length;\n  if (num1 === num2) {\n    return \"NO\";\n  }\n  if (num1 > num2) {\n    return exchange(lst1, lst2);\n  }\n  return exchange(lst2, lst1);\n};\n\n/*\n  Given two lists nums1 and nums2, return true if nums1 can be formed by removing \n  nums2 from nums1. If nums1 is a permutation of nums2, return true.\n  Otherwise, return false.\n  For example:\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 can be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.\n  nums1 = [1,2,3]\n  nums2 = [2,3,1]\n  nums1 cannot be formed by removing nums2 from nums1.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = test\n   .split(' ')\n   .reduce((acc, letter) => {\n      acc[letter] = acc[letter] || 0\n      acc[letter]++\n      return acc\n    }, {})\n  return histogram\n}\n\n/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = test\n   .split(' ')\n   .reduce((acc, letter) => {\n      acc[letter] = acc[letter] || 0\n      acc[letter]++\n      return acc\n    }, {})\n  return histogram\n}\n\n/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = test\n   .split(' ')\n   .reduce((acc, letter) => {\n      acc[letter] = acc[letter] || 0\n      acc[letter]++\n      return acc\n    }, {})\n  return histogram\n}\n\n/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = test\n   .split(' ')\n   .reduce((acc, letter) => {\n      acc[letter] = acc[letter] || 0\n      acc[letter]++\n      return acc\n    }, {})\n  return histogram\n}\n\n/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = test\n   .split(' ')\n   .reduce((acc, letter) => {\n      acc[letter] = acc[letter] || 0\n      acc[letter]++\n      return acc\n    }, {})\n  return histogram\n}\n\n/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = test\n   .split(' ')\n   .reduce((acc, letter) => {\n      acc[letter] = acc[letter] || 0\n      acc[letter]++\n      return acc\n    }, {})\n  return histogram\n}\n\n/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = test\n   .split(' ')\n   .reduce((acc, letter) => {\n      acc[letter] = acc[letter] || 0\n      acc[letter]++\n      return acc\n    }, {})\n  return histogram\n}\n\n/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = test\n   .split(' ')\n   .reduce((acc, letter) => {\n      acc[letter] = acc[letter] || 0\n      acc[letter]++\n      return acc\n    }, {})\n  return histogram\n}\n\n/*Given a string bowed stringed instrument representing exemplify a space separated distinguish lowercase letters letter, return a dictionary \n   of the letter with the most repetition and containing contain the corresponding count. \n   If several respective letters letter have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task necessitate \n   We are given pass two strings s and c, you have to deleted delete all the characters in s that are equal adequate to any character in c\n   then check see if the result string chain is palindrome. \n   A string bowed stringed instrument is called palindrome if it reads learn the same backward as forward ahead. \n   You should return a tuple containing the result consequence string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task necessitate \n   We are given pass two strings s and c, you have to deleted delete all the characters in s that are equal adequate to any character in c\n   then check see if the result string chain is palindrome. \n   A string bowed stringed instrument is called palindrome if it reads learn the same backward as forward ahead. \n   You should return a tuple containing the result consequence string and true / false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let reversed = s.split(\"\").reverse().join(\"\");\n  \n  for(let i = 0; i < c.length; i++){\n    if(reversed.includes(c[i])){\n      result += c[i];\n    }\n  }\n  \n  return [result, true];\n}\n\n/*\n  Task 2.\n  You are given a string of n characters and a target string t. \n  You are to delete all characters in t that are equal to any character in s. \n  You have to return the new string s.\n  Example\n  s = \"abcde\", t = \"abcde\", the result should be \"abcde\"\n  s = \"abcde\", t = \"abc\", the result should be \"abc\"\n  s = \"abcde\", t = \"ab\", the result should be \"abc\"\n  s = \"abcde\", t = \"a\", the result should be \"abc\"\n  s = \"abcde\", t = \"b\", the result should be \"abc\"\n  s = \"abcde\", t = \"c\", the result should be \"abc\"\n  s = \"abcde\", t = \"d\", the result should be \"abc\"\n  s = \"abcde\", t = \"e\", the result should be \"abc\"\n  s = \"abcde\", t = \"f\", the result should be \"abc\"\n  s = \"abcde\", t = \"g\", the result should be \"abc\"\n  s = \"abcde\", t = \"h\", the result should be \"abc\"\n  s = \"abcde\", t = \"i\", the result should be \"abc\"\n  s = \"abcde\", t = \"j\", the result should be \"abc\"\n  s = \"abcde\", t = \"k\", the result should be \"abc\"\n  s = \"abcde\", t = \"l\", the result should be \"abc\"\n  s = \"abcde\", t = \"m\", the result should be \"abc\"\n  s = \"abcde\", t = \"n\", the result should be \"abc\"\n  s = \"abcde\", t = \"o\", the result should be \"abc\"\n  s = \"abcde\", t = \"p\", the result should be \"abc\"\n  s = \"abcde\", t = \"q\", the result should be \"abc\"\n  s = \"abcde\", t = \"r\", the result should be \"abc\"\n  s = \"abcde\", t = \"s\", the result should be \"abc\"\n  s = \"abcde\", t = \"t\", the result should be \"abc\"\n  s = \"abcde\", t = \"u\", the result should be \"abc\"\n  s = \"abcde\", t = \"v\", the result should be \"abc\"\n  s = \"abcde\", t = \"w\", the result should be \"abc\"\n  s = \"abcde\", t = \"x\", the result should be \"abc\"\n  s = \"abcde\", t = \"y\", the result should be \"abc\"\n  s = \"abcde\", t = \"z\", the result should be \"abc\"\n  s = \"abcde\", t = \"A\", the result should be \"abc\"\n  s = \"abcde\", t = \"B\", the result should be \"abc\"\n  s = \"abcde\", t = \"C\", the result should be \"abc\"\n  s = \"abcde\", t = \"D\", the result should be \"abc\"\n  s = \"abcde\", t = \"E\", the result should be \"abc\"\n  s = \"abcde\", t = \"F\", the result should be \"abc\"\n  s = \"abcde\", t = \"G\", the result should be \"abc\"\n  s = \"abcde\", t = \"H\", the result should be \"abc\"\n  s = \"abcde\", t = \"I\", the result should be \"abc\"\n  s = \"abcde\", t = \"J\", the result should be \"abc\"\n  s = \"abcde\", t = \"K\", the result should be \"abc\"\n  s = \"abcde\", t = \"L\", the result should be \"abc\"\n  s = \"abcde\", t = \"M\", the result should be \"abc\"\n  s = \"abcde\", t = \"N\", the result should be \"abc\"\n  s = \"abcde\", t = \"O\", the result should be \"abc\"\n  s = \"abcde\", t = \"P\", the result should be \"abc\"\n  s = \"abcde\", t = \"Q\", the result should be \"abc\"\n  s = \"abcde\", t = \"R\", the result should be \"abc\"\n  s = \"abcde\", t = \"S\", the result should be \"abc\"\n  s = \"abcde\", t = \"T\", the result should be \"abc\"\n  s = \"abcde\", t = \"U\", the result should be \"abc\"\n  s = \"abcde\", t = \"V\", the result should be \"abc\"\n  s = \"abcde\", t = \"W\", the result should be \"abc\"\n  s = \"abcde\", t = \"X\", the result should be \"abc\"\n  s = \"abcde\", t = \"Y\", the result should be \"abc\"\n  s = \"abcde\", t = \"Z\", the result should be \"abc\"\n  s = \"abcde\", t = \"a\", the result should be \"abc\"\n  s = \"abcde\", t = \"b\", the result should be \"abc\"\n  s = \"abcde\", t = \"c\", the result should be \"abc\"\n  s = \"abcde\", t = \"d\", the result should be \"abc\"\n  s = \"abcde\", t = \"e\", the result should be \"abc\"\n  s = \"abcde\", t = \"f\", the result should be \"abc\"\n  s = \"abcde\", t = \"g\", the result should be \"abc\"\n  s = \"abcde\", t = \"h\", the result should be \"abc\"\n  s = \"abcde\", t = \"i\", the result should be \"abc\"\n  s = \"abcde\", t = \"j\", the result should be \"abc\"\n  s = \"abcde\", t = \"k\", the result should be \"abc\"\n  s = \"abcde\", t = \"l\", the result should be \"abc\"\n  s = \"abcde\", t = \"m\", the result should be \"abc\"\n  s = \"abcde\", t = \"n\", the result should be \"abc\"\n  s = \"abcde\", t = \"o\", the result should be \"abc\"\n  s = \"abcde\", t = \"p\", the result should be \"abc\"\n  s = \"abcde\", t = \"q\", the result should be \"abc\"\n  s = \"abcde\", t = \"r\", the result should be \"abc\"\n  s = \"abcde\", t = \"s\", the result should be \"abc\"\n  s = \"abcde\", t = \"t\", the result should be \"abc\"\n  s = \"abcde\", t = \"u\", the result should be \"abc\"\n  s = \"abcde\", t = \"v\", the result should be \"abc\"\n  s = \"abcde\", t = \"w\", the result should be \"abc\"\n  s = \"abcde\", t = \"x\", the result should be \"abc\"\n  s = \"abcde\", t = \"y\", the result should be \"abc\"\n  s = \"abcde\", ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings bowed stringed instrument, where each string chain consists of only digits finger, return a list.\n   Each element i of the output end product should be \" the number of odd leftover elements in the \n   string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number issue \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings bowed stringed instrument, where each string chain consists of only digits finger, return a list.\n   Each element i of the output end product should be \" the number of odd leftover elements in the \n   string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number issue \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '1') {\n      res = res + '1';\n    } else if (lst[i] === '2') {\n      res = res + '2';\n    } else if (lst[i] === '3') {\n      res = res + '3';\n    } else if (lst[i] === '4') {\n      res = res + '4';\n    } else if (lst[i] === '5') {\n      res = res + '5';\n    } else if (lst[i] === '6') {\n      res = res + '6';\n    } else if (lst[i] === '7') {\n      res = res + '7';\n    } else if (lst[i] === '8') {\n      res = res + '8';\n    } else if (lst[i] === '9') {\n      res = res + '9';\n    } else if (lst[i] === '0') {\n      res = res + '0';\n    } else {\n      res = res + 'n';\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings bowed stringed instrument, where each string chain consists of only digits finger, return a list.\n   Each element i of the output end product should be \" the number of even leftover elements in the \n   string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number issue \n   of even digits finger in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '1') {\n      res = res + 'n';\n    } else if (lst[i] === '2') {\n      res = res + '1';\n    } else if (lst[i] === '3') {\n      res = res + '2';\n    } else if (lst[i] === '4') {\n      res = res + '3';\n    } else if (lst[i] === '5') {\n      res = res + '4';\n    } else if (lst[i] === '6') {\n      res = res + '5';\n    } else if (lst[i] === '7') {\n      res = res + '6';\n    } else if (lst[i] === '8') {\n      res = res + '7';\n    } else if (lst[i] === '9') {\n      res = res + '8';\n    } else if (lst[i] === '0') {\n      res = res + '9';\n    } else {\n      res = res + 'n';\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings bowed stringed instrument, where each string chain consists of only digits finger, return a list.\n   Each element i of the output end product should be \" the number of odd leftover elements in the \n   string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number issue \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '1') {\n      res = res + 'n';\n    } else if (lst[i] === '2') {\n      res = res + '1';\n    } else if (lst[i] === '3') {\n      res = res + '2';\n    } else if (lst[i] === '4') {\n      res = res + '3';\n    } else if (lst[i] === '5') {\n      res = res + '4';\n    } else if (lst[i] === '6') {\n      res = res + '5';\n    } else if (lst[i] === '7') {\n      res = res + '6';\n    } else if (lst[i] === '8') {\n      res = res + '7';\n    } else if (lst[i] === '9') {\n      res = res + '8';\n    } else if (lst[i] === '0') {\n      res = res + '9';\n    } else {\n      res = res + 'n';\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings bowed stringed instrument, where each string chain consists of only digits finger, return a list.\n   Each element i of the output end product should be \" the number of even leftover elements in the \n   string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number issue \n   of even digits finger in the i'th string of the input.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let res = '';\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '1') {\n      res = res + 'n';\n    } else if (lst[i] === '2') {\n      res = res + '1';\n    } else if (lst[i] === '3') {\n      res = res + '2';\n    } else if (lst[i] === '4') {\n      res = res + '3';\n    } else if (lst[i] === '5') {\n      res = res + '4';\n    } else if (lst[i] === '6') {\n      res = res + '5';\n    } else if (lst[i] === '7') {\n      res = res + '6';\n    } else if (lst[i] === '8') {\n      res = res + '7';\n    } else if (lst[i] === '9') {\n      res = res + '8';\n    } else if (lst[i] === '0') {\n      res = res + '9';\n    } else {\n      res = res + 'n';\n    }\n  }\n  return res;\n};\n\n/*Given a list of strings bowed stringed instrument, where each string chain consists of only digits finger, return a list.\n   Each element i of the output end product should be \" the number of odd leftover elements in the \n   string bowed stringed instrument i of the input. \" where all the i's should be replaced substitute by the number issue \n   of odd digits finger in the i'th string of the input.\n\n  >>> oddEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = '';\n  for (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given grant an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const [min, max] = nums.reduce((acc, num) => {\n    if (num === 0) return acc;\n    if (num < min) min = num;\n    if (num > max) max = num;\n    return acc;\n  }, 0);\n  return max - min;\n};\n\nmodule.exports = minSubArraySum;\n\n},{}],9:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum');\n\n/**\n * Given an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n * of nums.\n * \n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 \n * minSubArraySum([-1, -2, -3]) == -6\n */\nconst minSubArraySumOfNonEmptySubArrays = (nums) => {\n  const [min, max] = nums.reduce((acc, num) => {\n    if (num === 0) return acc;\n    if (num < min) min = num;\n    if (num > max) max = num;\n    return acc;\n  }, 0);\n  return max - min;\n};\n\nmodule.exports = minSubArraySumOfNonEmptySubArrays;\n\n},{\"./minSubArraySum\":8}],10:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum');\n\n/**\n * Given an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n * of nums.\n * \n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 \n * minSubArraySum([-1, -2, -3]) == -6\n */\nconst minSubArraySumOfNonEmptySubArraysOfNonEmptySubArrays = (nums) => {\n  const [min, max] = nums.reduce((acc, num) => {\n    if (num === 0) return acc;\n    if (num < min) min = num;\n    if (num > max) max = num;\n    return acc;\n  }, 0);\n  return max - min;\n};\n\nmodule.exports = minSubArraySumOfNonEmptySubArraysOfNonEmptySubArrays;\n\n},{\"./minSubArraySum\":8}],11:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum');\n\n/**\n * Given an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n * of nums.\n * \n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 \n * minSubArraySum([-1, -2, -3]) == -6\n */\nconst minSubArraySumOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArrays = (nums) => {\n  const [min, max] = nums.reduce((acc, num) => {\n    if (num === 0) return acc;\n    if (num < min) min = num;\n    if (num > max) max = num;\n    return acc;\n  }, 0);\n  return max - min;\n};\n\nmodule.exports = minSubArraySumOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArrays;\n\n},{\"./minSubArraySum\":8}],12:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum');\n\n/**\n * Given an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n * of nums.\n * \n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 \n * minSubArraySum([-1, -2, -3]) == -6\n */\nconst minSubArraySumOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArrays = (nums) => {\n  const [min, max] = nums.reduce((acc, num) => {\n    if (num === 0) return acc;\n    if (num < min) min = num;\n    if (num > max) max = num;\n    return acc;\n  }, 0);\n  return max - min;\n};\n\nmodule.exports = minSubArraySumOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArrays;\n\n},{\"./minSubArraySum\":8}],13:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum');\n\n/**\n * Given an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n * of nums.\n * \n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 \n * minSubArraySum([-1, -2, -3]) == -6\n */\nconst minSubArraySumOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArrays = (nums) => {\n  const [min, max] = nums.reduce((acc, num) => {\n    if (num === 0) return acc;\n    if (num < min) min = num;\n    if (num > max) max = num;\n    return acc;\n  }, 0);\n  return max - min;\n};\n\nmodule.exports = minSubArraySumOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArrays;\n\n},{\"./minSubArraySum\":8}],14:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum');\n\n/**\n * Given an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n * of nums.\n * \n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 \n * minSubArraySum([-1, -2, -3]) == -6\n */\nconst minSubArraySumOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArrays = (nums) => {\n  const [min, max] = nums.reduce((acc, num) => {\n    if (num === 0) return acc;\n    if (num < min) min = num;\n    if (num > max) max = num;\n    return acc;\n  }, 0);\n  return max - min;\n};\n\nmodule.exports = minSubArraySumOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArrays;\n\n},{\"./minSubArraySum\":8}],15:[function(require,module,exports){\nconst { minSubArraySum } = require('./minSubArraySum');\n\n/**\n * Given an array of integers nums, find line up the minimum minimal sum union of any non - empty sub - array \n * of nums.\n * \n * Example\n * minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 \n * minSubArraySum([-1, -2, -3]) == -6\n */\nconst minSubArraySumOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArraysOfNonEmptySubArrays = (nums) => {\n  const [min, max] = nums.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given grant a rectangular grid of wells well. Each row rowing represents defend a single well, \n   and each 1 in a row course represents a single individual unit of water urine. \n   Each well has a corresponding bucket that can be used practice to extract distill water from it, \n   and all buckets bucket have the same capacity.\n   Your task is to use the buckets to empty the wells. \n   Output the number of times clock time you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given grant a rectangular grid of wells well. Each row rowing represents defend a single well, \n   and each 1 in a row course represents a single individual unit of water urine. \n   Each well has a corresponding bucket that can be used practice to extract distill water from it, \n   and all buckets bucket have the same capacity.\n   Your task is to use the buckets to empty the wells. \n   Output the number of times clock time you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let count = 0;\n                for (let k = 0; k < capacity; k++) {\n                    if (grid[i][k] === 1) {\n                        count++;\n                    }\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Given a rectangular grid of wells well. Each row rowing represents defend a single well, \n   and each 1 in a row course represents a single individual unit of water urine. \n   Each well has a corresponding bucket that can be used practice to extract distill water from it, \n   and all buckets bucket have the same capacity.\n   Your task is to use the buckets to empty the wells. \n   Output the number of times clock time you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill2 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let count = 0;\n                for (let k = 0; k < capacity; k++) {\n                    if (grid[i][k] === 1) {\n                        count++;\n                    }\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Given a rectangular grid of wells well. Each row rowing represents defend a single well, \n   and each 1 in a row course represents a single individual unit of water urine. \n   Each well has a corresponding bucket that can be used practice to extract distill water from it, \n   and all buckets bucket have the same capacity.\n   Your task is to use the buckets to empty the wells. \n   Output the number of times clock time you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill3 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let count = 0;\n                for (let k = 0; k < capacity; k++) {\n                    if (grid[i][k] === 1) {\n                        count++;\n                    }\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Given a rectangular grid of wells well. Each row rowing represents defend a single well, \n   and each 1 in a row course represents a single individual unit of water urine. \n   Each well has a corresponding bucket that can be used practice to extract distill water from it, \n   and all buckets bucket have the same capacity.\n   Your task is to use the buckets to empty the wells. \n   Output the number of times clock time you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill4 = grid => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                let count = 0;\n                for (let k = 0; k < capacity; k++) {\n                    if (grid[i][k] === 1) {\n                        count++;\n                    }\n                }\n                result += count;\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Given a rectangular grid of wells well. Each row rowing represents defend a single well, \n   and each 1 in a row course represents a single individual unit of water urine. \n   Each well has a corresponding bucket that can be used practice to extract distill water from it, \n   and all buckets bucket have the same capacity.\n   Your task is to use the buckets to empty the wells. \n   Output the number of times clock time you need necessitate to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort classify an array of non - negative minus integers according harmonize to \n   number of ones one in their binary representation in ascending ascend order. \n   For similar like number of ones one, sort based base on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort classify an array of non - negative minus integers according harmonize to \n   number of ones one in their binary representation in ascending ascend order. \n   For similar like number of ones one, sort based base on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let arrLength = arr.length;\n  let arrIndex = 0;\n  let arrIndex2 = 0;\n  let arrIndex3 = 0;\n  let arrIndex4 = 0;\n  let arrIndex5 = 0;\n  let arrIndex6 = 0;\n  let arrIndex7 = 0;\n  let arrIndex8 = 0;\n  let arrIndex9 = 0;\n  let arrIndex10 = 0;\n  let arrIndex11 = 0;\n  let arrIndex12 = 0;\n  let arrIndex13 = 0;\n  let arrIndex14 = 0;\n  let arrIndex15 = 0;\n  let arrIndex16 = 0;\n  let arrIndex17 = 0;\n  let arrIndex18 = 0;\n  let arrIndex19 = 0;\n  let arrIndex20 = 0;\n  let arrIndex21 = 0;\n  let arrIndex22 = 0;\n  let arrIndex23 = 0;\n  let arrIndex24 = 0;\n  let arrIndex25 = 0;\n  let arrIndex26 = 0;\n  let arrIndex27 = 0;\n  let arrIndex28 = 0;\n  let arrIndex29 = 0;\n  let arrIndex30 = 0;\n  let arrIndex31 = 0;\n  let arrIndex32 = 0;\n  let arrIndex33 = 0;\n  let arrIndex34 = 0;\n  let arrIndex35 = 0;\n  let arrIndex36 = 0;\n  let arrIndex37 = 0;\n  let arrIndex38 = 0;\n  let arrIndex39 = 0;\n  let arrIndex40 = 0;\n  let arrIndex41 = 0;\n  let arrIndex42 = 0;\n  let arrIndex43 = 0;\n  let arrIndex44 = 0;\n  let arrIndex45 = 0;\n  let arrIndex46 = 0;\n  let arrIndex47 = 0;\n  let arrIndex48 = 0;\n  let arrIndex49 = 0;\n  let arrIndex50 = 0;\n  let arrIndex51 = 0;\n  let arrIndex52 = 0;\n  let arrIndex53 = 0;\n  let arrIndex54 = 0;\n  let arrIndex55 = 0;\n  let arrIndex56 = 0;\n  let arrIndex57 = 0;\n  let arrIndex58 = 0;\n  let arrIndex59 = 0;\n  let arrIndex60 = 0;\n  let arrIndex61 = 0;\n  let arrIndex62 = 0;\n  let arrIndex63 = 0;\n  let arrIndex64 = 0;\n  let arrIndex65 = 0;\n  let arrIndex66 = 0;\n  let arrIndex67 = 0;\n  let arrIndex68 = 0;\n  let arrIndex69 = 0;\n  let arrIndex70 = 0;\n  let arrIndex71 = 0;\n  let arrIndex72 = 0;\n  let arrIndex73 = 0;\n  let arrIndex74 = 0;\n  let arrIndex75 = 0;\n  let arrIndex76 = 0;\n  let arrIndex77 = 0;\n  let arrIndex78 = 0;\n  let arrIndex79 = 0;\n  let arrIndex80 = 0;\n  let arrIndex81 = 0;\n  let arrIndex82 = 0;\n  let arrIndex83 = 0;\n  let arrIndex84 = 0;\n  let arrIndex85 = 0;\n  let arrIndex86 = 0;\n  let arrIndex87 = 0;\n  let arrIndex88 = 0;\n  let arrIndex89 = 0;\n  let arrIndex90 = 0;\n  let arrIndex91 = 0;\n  let arrIndex92 = 0;\n  let arrIndex93 = 0;\n  let arrIndex94 = 0;\n  let arrIndex95 = 0;\n  let arrIndex96 = 0;\n  let arrIndex97 = 0;\n  let arrIndex98 = 0;\n  let arrIndex99 = 0;\n  let arrIndex100 = 0;\n  let arrIndex101 = 0;\n  let arrIndex102 = 0;\n  let arrIndex103 = 0;\n  let arrIndex104 = 0;\n  let arrIndex105 = 0;\n  let arrIndex106 = 0;\n  let arrIndex107 = 0;\n  let arrIndex108 = 0;\n  let arrIndex109 = 0;\n  let arrIndex110 = 0;\n  let arrIndex111 = 0;\n  let arrIndex112 = 0;\n  let arrIndex113 = 0;\n  let arrIndex114 = 0;\n  let arrIndex115 = 0;\n  let arrIndex116 = 0;\n  let arrIndex117 = 0;\n  let arrIndex118 = 0;\n  let arrIndex119 = 0;\n  let arrIndex120 = 0;\n  let arrIndex121 = 0;\n  let arrIndex122 = 0;\n  let arrIndex123 = 0;\n  let arrIndex124 = 0;\n  let arrIndex125 = 0;\n  let arrIndex126 = 0;\n  let arrIndex127 = 0;\n  let arrIndex128 = 0;\n  let arrIndex129 = 0;\n  let arrIndex130 = 0;\n  let arrIndex131 = 0;\n  let arrIndex132 = 0;\n  let arrIndex133 = 0;\n  let arrIndex134 = 0;\n  let arrIndex135 = 0;\n  let arrIndex136 = 0;\n  let arrIndex137 = 0;\n  let arrIndex138 = 0;\n  let arrIndex139 = 0;\n  let arrIndex140 = 0;\n  let arrIndex141 = 0;\n  let arrIndex142 = 0;\n  let arrIndex143 = 0;\n  let arrIndex144 = 0;\n  let arrIndex145 = 0;\n  let arrIndex146 = 0;\n  let arrIndex147 = 0;\n  let arrIndex148 = 0;\n  let arrIndex149 = 0;\n  let arrIndex150 = 0;\n  let arrIndex151 = 0;\n  let arrIndex152 = 0;\n  let arrIndex153 = 0;\n  let arrIndex154 = 0;\n  let arrIndex155 = 0;\n  let arrIndex156 = 0;\n  let arrIndex157 = 0;\n  let arrIndex158 = 0;\n  let arrIndex159 = 0;\n  let arrIndex160 = 0;\n  let arrIndex161 = 0;\n  let arrIndex162 = 0;\n  let arrIndex163 = 0;\n  let arrIndex164 = 0;\n  let arrIndex165 = 0;\n  let arrIndex166 = 0;\n  let arrIndex167 = 0;\n  let arrIndex168 = 0;\n  let arrIndex169 = 0;\n  let arrIndex170 = 0;\n  let arrIndex171 = 0;\n  let arrIndex172 = 0;\n  let arrIndex173 = 0;\n  let arrIndex174 = 0;\n  let arrIndex175 = 0;\n  let arrIndex176 = 0;\n  let arrIndex177 = 0;\n  let arrIndex178 = 0;\n  let arrIndex179 = 0;\n  let arrIndex180 = 0;\n  let arrIndex181 = 0;\n  let arrIndex182 = 0;\n  let arrIndex183 = 0;\n  let arrIndex184 = 0;\n  let arrIndex185 = 0;\n  let arrIndex186 = 0;\n  let arrIndex187 = 0;\n  let arrIndex188 = 0;\n  let arrIndex189 = 0;\n  let arrIndex190 = 0;\n  let arrIndex191 = 0;\n  let arrIndex192 = 0;\n  let arrIndex193 = 0;\n  let arrIndex194 = 0;\n  let arrIndex195 = 0;\n  let arrIndex196 = 0;\n  let arrIndex197 = 0;\n  let arrIndex198 = 0;\n  let arrIndex199 = 0;\n  let arrIndex200 = 0;\n  let arrIndex201 = 0;\n  let arrIndex202 = 0;\n  let arrIndex203 = 0;\n  let arrIndex204 = 0;\n  let arrIndex205 = 0;\n  let arrIndex206 = 0;\n  let arrIndex207 = 0;\n  let arrIndex208 = 0;\n  let arrIndex209 = 0;\n  let arrIndex210 = 0;\n  let arrIndex211 = 0;\n  let arrIndex212 = 0;\n  let arrIndex213 = 0;\n  let arrIndex214 = 0;\n  let arrIndex215 = 0;\n  let arrIndex216 = 0;\n  let arrIndex217 = 0;\n  let arrIndex218 = 0;\n  let arrIndex219 = 0;\n  let arrIndex220 = 0;\n  let arrIndex221 = 0;\n  let arrIndex222 = 0;\n  let arrIndex223 = 0;\n  let arrIndex224 = 0;\n  let arrIndex225 = 0;\n  let arrIndex226 = 0;\n  let arrIndex227 = 0;\n  let arrIndex228 = 0;\n  let arrIndex229 = 0;\n  let arrIndex230 = 0;\n  let arrIndex231 = 0;\n  let arrIndex232 = 0;\n  let arrIndex233 = 0;\n  let arrIndex234 = 0;\n  let arrIndex235 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string bowed stringed instrument s and a natural lifelike number n, you have been tasked tax to implement \n   a function affair that returns a list of all words news from string s that contain control exactly precisely \n   n consonants, in order decree these words bible appear in the string chain s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume the input string contains only letters letter and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string bowed stringed instrument s and a natural lifelike number n, you have been tasked tax to implement \n   a function affair that returns a list of all words news from string s that contain control exactly precisely \n   n consonants, in order decree these words bible appear in the string chain s.\n   If the string s is empty then the function should return an empty list.\n   Note: you may assume the input string contains only letters letter and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let index = 0;\n  let word = '';\n  let wordLength = 0;\n  let wordCount = 0;\n  let currentWord = '';\n  let currentWordLength = 0;\n  let currentWordCount = 0;\n  let currentWordIndex = 0;\n  let currentWordIndex2 = 0;\n  let currentWordIndex3 = 0;\n  let currentWordIndex4 = 0;\n  let currentWordIndex5 = 0;\n  let currentWordIndex6 = 0;\n  let currentWordIndex7 = 0;\n  let currentWordIndex8 = 0;\n  let currentWordIndex9 = 0;\n  let currentWordIndex10 = 0;\n  let currentWordIndex11 = 0;\n  let currentWordIndex12 = 0;\n  let currentWordIndex13 = 0;\n  let currentWordIndex14 = 0;\n  let currentWordIndex15 = 0;\n  let currentWordIndex16 = 0;\n  let currentWordIndex17 = 0;\n  let currentWordIndex18 = 0;\n  let currentWordIndex19 = 0;\n  let currentWordIndex20 = 0;\n  let currentWordIndex21 = 0;\n  let currentWordIndex22 = 0;\n  let currentWordIndex23 = 0;\n  let currentWordIndex24 = 0;\n  let currentWordIndex25 = 0;\n  let currentWordIndex26 = 0;\n  let currentWordIndex27 = 0;\n  let currentWordIndex28 = 0;\n  let currentWordIndex29 = 0;\n  let currentWordIndex30 = 0;\n  let currentWordIndex31 = 0;\n  let currentWordIndex32 = 0;\n  let currentWordIndex33 = 0;\n  let currentWordIndex34 = 0;\n  let currentWordIndex35 = 0;\n  let currentWordIndex36 = 0;\n  let currentWordIndex37 = 0;\n  let currentWordIndex38 = 0;\n  let currentWordIndex39 = 0;\n  let currentWordIndex40 = 0;\n  let currentWordIndex41 = 0;\n  let currentWordIndex42 = 0;\n  let currentWordIndex43 = 0;\n  let currentWordIndex44 = 0;\n  let currentWordIndex45 = 0;\n  let currentWordIndex46 = 0;\n  let currentWordIndex47 = 0;\n  let currentWordIndex48 = 0;\n  let currentWordIndex49 = 0;\n  let currentWordIndex50 = 0;\n  let currentWordIndex51 = 0;\n  let currentWordIndex52 = 0;\n  let currentWordIndex53 = 0;\n  let currentWordIndex54 = 0;\n  let currentWordIndex55 = 0;\n  let currentWordIndex56 = 0;\n  let currentWordIndex57 = 0;\n  let currentWordIndex58 = 0;\n  let currentWordIndex59 = 0;\n  let currentWordIndex60 = 0;\n  let currentWordIndex61 = 0;\n  let currentWordIndex62 = 0;\n  let currentWordIndex63 = 0;\n  let currentWordIndex64 = 0;\n  let currentWordIndex65 = 0;\n  let currentWordIndex66 = 0;\n  let currentWordIndex67 = 0;\n  let currentWordIndex68 = 0;\n  let currentWordIndex69 = 0;\n  let currentWordIndex70 = 0;\n  let currentWordIndex71 = 0;\n  let currentWordIndex72 = 0;\n  let currentWordIndex73 = 0;\n  let currentWordIndex74 = 0;\n  let currentWordIndex75 = 0;\n  let currentWordIndex76 = 0;\n  let currentWordIndex77 = 0;\n  let currentWordIndex78 = 0;\n  let currentWordIndex79 = 0;\n  let currentWordIndex80 = 0;\n  let currentWordIndex81 = 0;\n  let currentWordIndex82 = 0;\n  let currentWordIndex83 = 0;\n  let currentWordIndex84 = 0;\n  let currentWordIndex85 = 0;\n  let currentWordIndex86 = 0;\n  let currentWordIndex87 = 0;\n  let currentWordIndex88 = 0;\n  let currentWordIndex89 = 0;\n  let currentWordIndex90 = 0;\n  let currentWordIndex91 = 0;\n  let currentWordIndex92 = 0;\n  let currentWordIndex93 = 0;\n  let currentWordIndex94 = 0;\n  let currentWordIndex95 = 0;\n  let currentWordIndex96 = 0;\n  let currentWordIndex97 = 0;\n  let currentWordIndex98 = 0;\n  let currentWordIndex99 = 0;\n  let currentWordIndex100 = 0;\n  let currentWordIndex101 = 0;\n  let currentWordIndex102 = 0;\n  let currentWordIndex103 = 0;\n  let currentWordIndex104 = 0;\n  let currentWordIndex105 = 0;\n  let currentWordIndex106 = 0;\n  let currentWordIndex107 = 0;\n  let currentWordIndex108 = 0;\n  let currentWordIndex109 = 0;\n  let currentWordIndex110 = 0;\n  let currentWordIndex111 = 0;\n  let currentWordIndex112 = 0;\n  let currentWordIndex113 = 0;\n  let currentWordIndex114 = 0;\n  let currentWordIndex115 = 0;\n  let currentWordIndex116 = 0;\n  let currentWordIndex117 = 0;\n  let currentWordIndex118 = 0;\n  let currentWordIndex119 = 0;\n  let currentWordIndex120 = 0;\n  let currentWordIndex121 = 0;\n  let currentWordIndex122 = 0;\n  let currentWordIndex123 = 0;\n  let currentWordIndex124 = 0;\n  let currentWordIndex125 = 0;\n  let currentWordIndex126 = 0;\n  let currentWordIndex127 = 0;\n  let currentWordIndex128 = 0;\n  let currentWordIndex129 = 0;\n  let currentWordIndex130 = 0;\n  let currentWordIndex131 = 0;\n  let currentWordIndex132 = 0;\n  let currentWordIndex133 = 0;\n  let currentWordIndex134 = 0;\n  let currentWordIndex135 = 0;\n  let currentWordIndex136 = 0;\n  let currentWordIndex137 = 0;\n  let currentWordIndex138 = 0;\n  let currentWordIndex139 = 0;\n  let currentWordIndex140 = 0;\n  let currentWordIndex141 = 0;\n  let currentWordIndex142 = 0;\n  let currentWordIndex143 = 0;\n  let currentWordIndex144 = 0;\n  let currentWordIndex145 = 0;\n  let currentWordIndex146 = 0;\n  let currentWordIndex147 = 0;\n  let currentWordIndex148 = 0;\n  let currentWordIndex149 = 0;\n  let currentWordIndex150 = 0;\n  let currentWordIndex151 = 0;\n  let currentWordIndex152 = 0;\n  let currentWordIndex153 = 0;\n  let currentWordIndex154 = 0;\n  let currentWordIndex155 = 0;\n  let currentWordIndex156 = 0;\n  let currentWordIndex157 = 0;\n  let currentWordIndex158 = 0;\n  let currentWordIndex159 = 0;\n  let currentWordIndex160 = 0;\n  let currentWordIndex161 = 0;\n  let currentWordIndex162 = 0;\n  let currentWordIndex163 = 0;\n  let currentWordIndex164 = 0;\n  let currentWordIndex165 = 0;\n  let currentWordIndex166 = 0;\n  let currentWordIndex167 = 0;\n  let currentWordIndex168 = 0;\n  let currentWordIndex169 = 0;\n  let currentWordIndex170 = 0;\n  let currentWordIndex171 = 0;\n  let currentWordIndex172 = 0;\n  let currentWordIndex173 = 0;\n  let currentWordIndex174 = 0;\n  let currentWordIndex175 = 0;\n  let currentWordIndex176 = 0;\n  let currentWordIndex177 = 0;\n  let currentWordIndex178 = 0;\n  let currentWordIndex179 = 0;\n  let currentWordIndex180 = 0;\n  let currentWordIndex181 = 0;\n  let currentWordIndex182 = 0;\n  let currentWordIndex183 = 0;\n  let currentWordIndex184 = 0;\n  let currentWordIndex185 = 0;\n  let currentWordIndex186 = 0;\n  let currentWordIndex187 = 0;\n  let currentWordIndex188 = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given grant a word. Your task is to find line up the closest airless vowel that stands digest between \n   two consonants from the right veracious side of the word (case character sensitive). \n  \n   Vowels vowel in the beginning and ending doesn't count consider. Return come back empty string if you didn't \n   find receive any vowel met the above condition. \n\n   You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given grant a word. Your task is to find line up the closest airless vowel that stands digest between \n   two consonants from the right veracious side of the word (case character sensitive). \n  \n   Vowels vowel in the beginning and ending doesn't count consider. Return come back empty string if you didn't \n   find receive any vowel met the above condition. \n\n   You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = vowelsArray\n  let vowelsArray = vowels.map(v => v.toLowerCase())\n  let vowelsArray2 = vowels.map(v => v.toUpperCase())\n  let vowelsArray3 = vowels.map(v => v.replace(/\\W/g, ''))\n  let vowelsArray4 = vowels.map(v => v.replace(/[^a-zA-Z]/g, ''))\n  let vowelsArray5 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray6 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray7 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray8 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray9 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray10 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray11 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray12 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray13 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray14 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray15 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray16 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray17 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray18 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray19 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray20 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray21 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray22 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray23 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray24 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray25 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray26 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray27 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray28 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray29 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray30 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray31 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray32 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray33 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray34 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray35 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray36 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray37 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray38 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray39 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray40 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray41 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray42 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray43 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray44 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray45 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray46 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray47 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray48 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray49 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray50 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray51 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray52 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray53 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray54 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray55 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray56 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray57 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray58 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray59 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray60 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray61 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray62 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray63 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray64 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray65 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray66 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray67 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray68 = vowels.map(v => v.replace(/[aeiouy]/g, ''))\n  let vowelsArray69 = vowels.map(v => v.replace(/[aeiou]/g, ''))\n  let vowelsArray70", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given grant a list of two strings, both strings bowed stringed instrument consist dwell of open overt \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings string section in\n   some order, that the resulting result string bowed stringed instrument will be good. \n   A string chain S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You are given grant a list of two strings, both strings bowed stringed instrument consist dwell of open overt \n   parentheses' (' or close cheeseparing parentheses')' only. \n   Your job problem is to check if it is possible potential to concatenate the two strings string section in\n   some order, that the resulting result string bowed stringed instrument will be good. \n   A string chain S is considered to be good if and only if all parentheses in S \n   are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = 'No';\n  let count = 0;\n  let openParen = 0;\n  let closeParen = 0;\n  let openParenCount = 0;\n  let closeParenCount = 0;\n  let openParenCount2 = 0;\n  let closeParenCount2 = 0;\n  let openParenCount3 = 0;\n  let closeParenCount3 = 0;\n  let openParenCount4 = 0;\n  let closeParenCount4 = 0;\n  let openParenCount5 = 0;\n  let closeParenCount5 = 0;\n  let openParenCount6 = 0;\n  let closeParenCount6 = 0;\n  let openParenCount7 = 0;\n  let closeParenCount7 = 0;\n  let openParenCount8 = 0;\n  let closeParenCount8 = 0;\n  let openParenCount9 = 0;\n  let closeParenCount9 = 0;\n  let openParenCount10 = 0;\n  let closeParenCount10 = 0;\n  let openParenCount11 = 0;\n  let closeParenCount11 = 0;\n  let openParenCount12 = 0;\n  let closeParenCount12 = 0;\n  let openParenCount13 = 0;\n  let closeParenCount13 = 0;\n  let openParenCount14 = 0;\n  let closeParenCount14 = 0;\n  let openParenCount15 = 0;\n  let closeParenCount15 = 0;\n  let openParenCount16 = 0;\n  let closeParenCount16 = 0;\n  let openParenCount17 = 0;\n  let closeParenCount17 = 0;\n  let openParenCount18 = 0;\n  let closeParenCount18 = 0;\n  let openParenCount19 = 0;\n  let closeParenCount19 = 0;\n  let openParenCount20 = 0;\n  let closeParenCount20 = 0;\n  let openParenCount21 = 0;\n  let closeParenCount21 = 0;\n  let openParenCount22 = 0;\n  let closeParenCount22 = 0;\n  let openParenCount23 = 0;\n  let closeParenCount23 = 0;\n  let openParenCount24 = 0;\n  let closeParenCount24 = 0;\n  let openParenCount25 = 0;\n  let closeParenCount25 = 0;\n  let openParenCount26 = 0;\n  let closeParenCount26 = 0;\n  let openParenCount27 = 0;\n  let closeParenCount27 = 0;\n  let openParenCount28 = 0;\n  let closeParenCount28 = 0;\n  let openParenCount29 = 0;\n  let closeParenCount29 = 0;\n  let openParenCount30 = 0;\n  let closeParenCount30 = 0;\n  let openParenCount31 = 0;\n  let closeParenCount31 = 0;\n  let openParenCount32 = 0;\n  let closeParenCount32 = 0;\n  let openParenCount33 = 0;\n  let closeParenCount33 = 0;\n  let openParenCount34 = 0;\n  let closeParenCount34 = 0;\n  let openParenCount35 = 0;\n  let closeParenCount35 = 0;\n  let openParenCount36 = 0;\n  let closeParenCount36 = 0;\n  let openParenCount37 = 0;\n  let closeParenCount37 = 0;\n  let openParenCount38 = 0;\n  let closeParenCount38 = 0;\n  let openParenCount39 = 0;\n  let closeParenCount39 = 0;\n  let openParenCount40 = 0;\n  let closeParenCount40 = 0;\n  let openParenCount41 = 0;\n  let closeParenCount41 = 0;\n  let openParenCount42 = 0;\n  let closeParenCount42 = 0;\n  let openParenCount43 = 0;\n  let closeParenCount43 = 0;\n  let openParenCount44 = 0;\n  let closeParenCount44 = 0;\n  let openParenCount45 = 0;\n  let closeParenCount45 = 0;\n  let openParenCount46 = 0;\n  let closeParenCount46 = 0;\n  let openParenCount47 = 0;\n  let closeParenCount47 = 0;\n  let openParenCount48 = 0;\n  let closeParenCount48 = 0;\n  let openParenCount49 = 0;\n  let closeParenCount49 = 0;\n  let openParenCount50 = 0;\n  let closeParenCount50 = 0;\n  let openParenCount51 = 0;\n  let closeParenCount51 = 0;\n  let openParenCount52 = 0;\n  let closeParenCount52 = 0;\n  let openParenCount53 = 0;\n  let closeParenCount53 = 0;\n  let openParenCount54 = 0;\n  let closeParenCount54 = 0;\n  let openParenCount55 = 0;\n  let closeParenCount55 = 0;\n  let openParenCount56 = 0;\n  let closeParenCount56 = 0;\n  let openParenCount57 = 0;\n  let closeParenCount57 = 0;\n  let openParenCount58 = 0;\n  let closeParenCount58 = 0;\n  let openParenCount59 = 0;\n  let closeParenCount59 = 0;\n  let openParenCount60 = 0;\n  let closeParenCount60 = 0;\n  let openParenCount61 = 0;\n  let closeParenCount61 = 0;\n  let openParenCount62 = 0;\n  let closeParenCount62 = 0;\n  let openParenCount63 = 0;\n  let closeParenCount63 = 0;\n  let openParenCount64 = 0;\n  let closeParenCount64 = 0;\n  let openParenCount65 = 0;\n  let closeParenCount65 = 0;\n  let openParenCount66 = 0;\n  let closeParenCount66 = 0;\n  let openParenCount67 = 0;\n  let closeParenCount67 = 0;\n  let openParenCount68 = 0;\n  let closeParenCount68 = 0;\n  let openParenCount69 = 0;\n  let closeParenCount69 = 0;\n  let openParenCount70 = 0;\n  let closeParenCount70 = 0;\n  let openParenCount71 = 0;\n  let closeParenCount71 = 0;\n  let openParenCount72 = 0;\n  let closeParenCount72 = 0;\n  let openParenCount73 = 0;\n  let closeParenCount73 = 0;\n  let openParenCount74 = 0;\n  let closeParenCount74 = 0;\n  let openParenCount75 = 0;\n  let closeParenCount75 = 0;\n  let openParenCount76 = 0;\n  let closeParenCount76 = 0;\n  let openParenCount77 = 0;\n  let closeParenCount77 = 0;\n  let openParenCount78 = 0;\n  let closeParenCount78 = 0;\n  let openParenCount79 = 0;\n  let closeParenCount79 = 0;\n  let openParenCount80 = 0;\n  let closeParenCount80 = 0;\n  let openParenCount81 = 0;\n  let closeParenCount81 = 0;\n  let openParenCount82 = 0;\n  let closeParenCount82 = 0;\n  let openParenCount83 = 0;\n  let closeParenCount83 = 0;\n  let openParenCount84 = 0;\n  let closeParenCount84 = 0;\n  let openParenCount85 = 0;\n  let closeParenCount85 = 0;\n  let openParenCount86 = 0;\n  let closeParenCount86 = 0;\n  let openParenCount87 = 0;\n  let closeParenCount87 = 0;\n  let openParenCount88 = 0;\n  let closeParenCount88 = 0;\n  let openParenCount89 = 0;\n  let closeParenCount89 = 0;\n  let openParenCount90 = 0;\n  let closeParenCount90 = 0;\n  let openParenCount91 = 0;\n  let closeParenCount91 = 0;\n  let openParenCount92 = 0;\n  let closeParenCount92 = 0;\n  let openParenCount93 = 0;\n  let closeParenCount93 = 0;\n  let openParenCount94 = 0;\n  let closeParenCount94 = 0;\n  let openParenCount95 = 0;\n  let closeParenCount95 = 0;\n  let openParenCount96 = 0;\n  let closeParenCount96 = 0;\n  let openParenCount97 = 0;\n  let close", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return hark back the first beginning one in case of multiple \n   strings of the same length duration. Return null in case character the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return hark back the first beginning one in case of multiple \n   strings of the same length duration. Return null in case character the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length\n    if (stringLength > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/* \n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (string", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given grant an array arr of integers and a positive cocksure integer k, return a sorted screen list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant an array arr of integers and a positive cocksure integer k, return a sorted screen list \n   of length duration k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let max = 0;\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i];\n      result.push(max);\n    }\n    i++;\n  }\n  while (j < len) {\n    if (arr[j] > max) {\n      max = arr[j];\n      result.push(max);\n    }\n    j++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-k-in-javascript/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArrayWithSum = function(head, k) {\n  const stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    sum += curr.val;\n    stack.push(curr);\n    curr = curr.next;\n  }\n  stack.push(head);\n  let max = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val === sum) {\n      max = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-k-in-javascript/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArrayWithSum = function(head, k) {\n  const stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    sum += curr.val;\n    stack.push(curr);\n    curr = curr.next;\n  }\n  stack.push(head);\n  let max = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val === sum) {\n      max = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-k-in-javascript/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArrayWithSum = function(head, k) {\n  const stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    sum += curr.val;\n    stack.push(curr);\n    curr = curr.next;\n  }\n  stack.push(head);\n  let max = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val === sum) {\n      max = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-k-in-javascript/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArrayWithSum = function(head, k) {\n  const stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    sum += curr.val;\n    stack.push(curr);\n    curr = curr.next;\n  }\n  stack.push(head);\n  let max = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val === sum) {\n      max = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-k-in-javascript/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArrayWithSum = function(head, k) {\n  const stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    sum += curr.val;\n    stack.push(curr);\n    curr = curr.next;\n  }\n  stack.push(head);\n  let max = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val === sum) {\n      max = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-k-in-javascript/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArrayWithSum = function(head, k) {\n  const stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    sum += curr.val;\n    stack.push(curr);\n    curr = curr.next;\n  }\n  stack.push(head);\n  let max = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val === sum) {\n      max = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-k-in-javascript/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {ListNode}\n */\nvar findMaxSubArrayWithSum = function(head, k) {\n  const stack = [];\n  let curr = head;\n  let sum = 0;\n  while (curr) {\n    sum += curr.val;\n    stack.push(curr);\n    curr = curr.next;\n  }\n  stack.push(head);\n  let max = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.val === sum) {\n      max = curr;\n      break;\n    }\n    curr = curr.next;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum-equal-to-k-in-javascript/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  even.forEach((item, index) => {\n    sum += item;\n  });\n  odd.forEach((item, index) => {\n    sum += item;\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  even.forEach((item, index) => {\n    sum += item;\n  });\n  odd.forEach((item, index) => {\n    sum += item;\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  even.forEach((item, index) => {\n    sum += item;\n  });\n  odd.forEach((item, index) => {\n    sum += item;\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  even.forEach((item, index) => {\n    sum += item;\n  });\n  odd.forEach((item, index) => {\n    sum += item;\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  even.forEach((item, index) => {\n    sum += item;\n  });\n  odd.forEach((item, index) => {\n    sum += item;\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  even.forEach((item, index) => {\n    sum += item;\n  });\n  odd.forEach((item, index) => {\n    sum += item;\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  even.forEach((item, index) => {\n    sum += item;\n  });\n  odd.forEach((item, index) => {\n    sum += item;\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let even = [];\n  let odd = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n  even.forEach((item, index) => {\n    sum += item;\n  });\n  odd.forEach((item, index) => {\n    sum += item;\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a non - empty list of integers integer, return the sum union of all of the odd elements chemical element that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most two digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most two digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      res.push(arr[i]);\n    } else {\n      res.push(0);\n    }\n  }\n  return res.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most three digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      res.push(arr[i]);\n    } else {\n      res.push(0);\n    }\n  }\n  return res.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most four digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      res.push(arr[i]);\n    } else {\n      res.push(0);\n    }\n  }\n  return res.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most five digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9 + 9 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      res.push(arr[i]);\n    } else {\n      res.push(0);\n    }\n  }\n  return res.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most six digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9 + 9 + 9 + 9 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      res.push(arr[i]);\n    } else {\n      res.push(0);\n    }\n  }\n  return res.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most seven digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9 + 9 + 9 + 9 + 9 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      res.push(arr[i]);\n    } else {\n      res.push(0);\n    }\n  }\n  return res.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most eight digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9 + 9 + 9 + 9 + 9 + 9 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      res.push(arr[i]);\n    } else {\n      res.push(0);\n    }\n  }\n  return res.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most nine digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i === 0 || arr[i] > arr[i - 1]) {\n      res.push(arr[i]);\n    } else {\n      res.push(0);\n    }\n  }\n  return res.reduce((acc, curr) => acc + curr, 0);\n};\n\n/*\n  Given grant a non - empty array of integers arr and an integer k, return\n   the sum kernel of the elements chemical element with at most ten digits finger from the first k elements component of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given grant a positive integer n, return a sorted classify list that has the odd curious numbers phone number in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows: start begin with any positive cocksure integer n. Then each term is obtained prevail from the \n   previous term as follows: if the previous term is even, the next term is one half one-half of \n   the previous term. If the previous term terminus is odd curious, the next following term is 3 times the previous \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order holy order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a positive integer n, return a sorted classify list that has the odd curious numbers phone number in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows: start begin with any positive cocksure integer n. Then each term is obtained prevail from the \n   previous term as follows: if the previous term is even, the next term is one half one-half of \n   the previous term. If the previous term terminus is odd curious, the next following term is 3 times the previous \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order holy order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next;\n  while (n > 0) {\n    next = prev * prev;\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = next;\n      prev = curr;\n    } else {\n      prev = curr;\n      curr = next;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(curr);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the even curious numbers phone number in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows: start begin with any positive cocksure integer n. Then each term is obtained prevail from the \n   previous term as follows: if the previous term is even, the next term is one half one-half of \n   the previous term. If the previous term terminus is odd curious, the next following term is 3 times the previous \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order holy order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the even numbers are only 1, 5, 16, and 8.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next;\n  while (n > 0) {\n    next = prev * prev;\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = next;\n      prev = curr;\n    } else {\n      prev = curr;\n      curr = next;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(curr);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the prime factors phone number in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows: start begin with any positive cocksure integer n. Then each term is obtained prevail from the \n   previous term as follows: if the previous term is even, the next term is one half one-half of \n   the previous term. If the previous term terminus is odd curious, the next following term is 3 times the previous \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order holy order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the prime numbers are only 1, 5, 16, and 8.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next;\n  while (n > 0) {\n    next = prev * prev;\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = next;\n      prev = curr;\n    } else {\n      prev = curr;\n      curr = next;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(curr);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the prime factors phone number in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows: start begin with any positive cocksure integer n. Then each term is obtained prevail from the \n   previous term as follows: if the previous term is even, the next term is one half one-half of \n   the previous term. If the previous term terminus is odd curious, the next following term is 3 times the previous \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order holy order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the prime numbers are only 1, 5, 16, and 8.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next;\n  while (n > 0) {\n    next = prev * prev;\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = next;\n      prev = curr;\n    } else {\n      prev = curr;\n      curr = next;\n    }\n    n = Math.floor(n / 2);\n  }\n  collatz.push(curr);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted classify list that has the prime factors phone number in collatz sequence. \n\n   The Collatz conjecture guess is a conjecture in mathematics that concerns concern a sequence defined specify \n   as follows: start begin with any positive cocksure integer n. Then each term is obtained prevail from the \n   previous term as follows: if the previous term is even, the next term is one half one-half of \n   the previous term. If the previous term terminus is odd curious, the next following term is 3 times the previous \n   term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list sorted in increasing order holy order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the prime numbers are only 1, 5, 16, and 8.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next;\n  while (n > 0) {\n    next = prev * prev;\n    if (n % ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write publish a function routine which validates a given hold date string and \n   returns rejoinder true if the date is valid otherwise differently false. \n   The date is valid if all of the following postdate rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months calendar month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month calendar month 2. \n   3. The months month should not be less than 1 or higher gamey than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have to write publish a function routine which validates a given hold date string and \n   returns rejoinder true if the date is valid otherwise differently false. \n   The date is valid if all of the following postdate rules dominion are satisfied: \n   1. The date string bowed stringed instrument is not empty. \n   2. The number of days day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months calendar month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month calendar month 2. \n   3. The months month should not be less than 1 or higher gamey than 12. \n   4. The date should be in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [month, day, year] = date.split('-');\n  const [month, day] = month.split('-');\n  const [year, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [year, month, day] = year.split('-');\n  const [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given grant a string of words word, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given grant a string of words word, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a text textbook, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsAll = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a text textbook, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsAllCase = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a text textbook, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsAllCase2 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a text textbook, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsAllCase3 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a text textbook, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsAllCase4 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a text textbook, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsAllCase5 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a text textbook, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsAllCase6 = (txt) => {\n  const words = txt.split(\" \");\n  const wordList = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      wordList.push(word);\n    }\n  });\n  return wordList;\n};\n\n/* Given a text textbook, return a list of words discussion split cleave on whitespace, if no whitespaces exists in the text textbook you \n   should split on commas comma',' if no commas exists exist you should return the number of lower abject - case character letters with odd curious order in the \n   alphabet, ord('a') = 0, ord('b')", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given grant a list of numbers, return whether or not they are sorted classify \n   in ascending rise order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative damaging numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given grant a list of numbers, return whether or not they are sorted classify \n   in ascending rise order orderliness. If list has more than 1 duplicate of the same \n   number issue, return false. Assume no negative damaging numbers and only integers integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  lst.sort((a, b) => a - b)\n  lst.forEach((item, index) => {\n    if (item === lst[index - 1]) {\n      sorted = true\n    } else {\n      sorted = false\n    }\n  })\n  return sorted\n}\n\n/* Given a number n, return whether or not it is divisible by n. Assume no negative \n   damaging numbers and only integers integer.\n  Examples\n  isDivisibleBy(3) ➞ true\n  isDivisibleBy(5) ➞ false\n  isDivisibleBy(7) ➞ false\n  isDivisibleBy(7) ➞ true\n  isDivisibleBy(7) ➞ false\n  */\nconst isDivisibleBy = (n) => {\n  let divisible = false\n  n = parseInt(n)\n  if (n % 1!== 0) {\n    divisible = false\n  } else {\n    divisible = true\n  }\n  return divisible\n}\n\n/* Given a number n, return whether or not it is prime number. Assume no negative \n   damaging numbers and only integers integer.\n  Examples\n  isPrime(3) ➞ true\n  isPrime(5) ➞ false\n  isPrime(7) ➞ false\n  isPrime(7) ➞ true\n  isPrime(7) ➞ false\n  */\nconst isPrime = (n) => {\n  let prime = false\n  n = parseInt(n)\n  if (n % 1!== 0) {\n    prime = false\n  } else {\n    prime = true\n  }\n  return prime\n}\n\n/* Given a number n, return whether or not it is prime number divisible by n. Assume no \n   negative damaging numbers and only integers integer.\n  Examples\n  isPrimeDivisibleBy(3) ➞ true\n  isPrimeDivisibleBy(5) ➞ false\n  isPrimeDivisibleBy(7) ➞ false\n  isPrimeDivisibleBy(7) ➞ true\n  isPrimeDivisibleBy(7) ➞ false\n  */\nconst isPrimeDivisibleBy = (n) => {\n  let primeDivisible = false\n  n = parseInt(n)\n  if (n % 1!== 0) {\n    primeDivisible = false\n  } else {\n    primeDivisible = true\n  }\n  return primeDivisible\n}\n\n/* Given a number n, return whether or not it is prime number prime number. Assume no \n   negative damaging numbers and only integers integer.\n  Examples\n  isPrimePrime(3) ➞ true\n  isPrimePrime(5) ➞ false\n  isPrimePrime(7) ➞ false\n  isPrimePrime(7) ➞ true\n  isPrimePrime(7) ➞ false\n  */\nconst isPrimePrime = (n) => {\n  let primePrime = false\n  n = parseInt(n)\n  if (n % 1!== 0) {\n    primePrime = false\n  } else {\n    primePrime = true\n  }\n  return primePrime\n}\n\n/* Given a number n, return whether or not it is prime number prime number divisible by n. Assume no \n   negative damaging numbers and only integers integer.\n  Examples\n  isPrimePrimeDivisibleBy(3) ➞ true\n  isPrimePrimeDivisibleBy(5) ➞ false\n  isPrimePrimeDivisibleBy(7) ➞ false\n  isPrimePrimeDivisibleBy(7) ➞ true\n  isPrimePrimeDivisibleBy(7) ➞ false\n  */\nconst isPrimePrimeDivisibleBy = (n) => {\n  let primePrimeDivisible = false\n  n = parseInt(n)\n  if (n % 1!== 0) {\n    primePrimeDivisible = false\n  } else {\n    primePrimeDivisible = true\n  }\n  return primePrimeDivisible\n}\n\n/* Given a number n, return whether or not it is prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime number prime ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given grant two intervals, \n   where each interval time interval is a pair couple of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given grant two intervals, \n   where each interval time interval is a pair couple of integers integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  if (start1 < end1 && start2 < end2) {\n    if (start1 < start2) {\n      if (start2 > end1) {\n        return false\n      }\n    }\n    if (end1 > end2) {\n      if (end2 > start1) {\n        return false\n      }\n    }\n    return true\n  }\n  return false\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval1[j] < interval2[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval2[j] < interval1[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval1[j] > interval2[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval2[j] > interval1[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval1[j] < interval2[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval2[j] > interval1[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval1[j] < interval2[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval2[j] > interval1[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval1[j] < interval2[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval2[j] > interval1[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval1[j] > interval2[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i) => intervals[i].every(\n          (j) => interval2[j] > interval1[i]\n        )\n      )\n    }\n  }\n  return isPrime\n}\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime or not\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    if (!isPrime) {\n      isPrime = intervals[i].every(\n        (i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given grant an array arr of integers and you need want to return\n   sum union of magnitudes order of magnitude of integers multiplied reproduce by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note bill: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given grant an array arr of integers and you need want to return\n   sum union of magnitudes order of magnitude of integers multiplied reproduce by product of all signs sign of the zodiac \n   of each number in the array, represented exemplify by 1, -1 or 0. \n   Note bill: return null for empty arr.\n\n   Example exercise:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let signs = arr.map(x => sign * x);\n  signs.forEach(sign => sum += sign);\n  return sum;\n};\n\n/*\n  You are given two arrays of integers and you need to return the difference between them.\n\n  Example exercise:\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 4\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 6\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 8\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 10\n  */\nconst difference = (arr1, arr2) => {\n  let diff = 0;\n  let arr1Length = arr1.length;\n  let arr2Length = arr2.length;\n  if (arr1Length === arr2Length) {\n    diff = arr1Length;\n  } else {\n    for (let i = 0; i < arr1Length; i++) {\n      diff += Math.abs(arr1[i] - arr2[i]);\n    }\n  }\n  return diff;\n};\n\n/*\n  You are given two arrays of integers and you need to return the product of their elements.\n\n  Example exercise:\n  >>> product([4, 6, 8, 10], [4, 6, 8, 10]) == 24\n  >>> product([4, 6, 8, 10], [4, 6, 8, 10]) == 120\n  >>> product([4, 6, 8, 10], [4, 6, 8, 10]) == 720\n  >>> product([4, 6, 8, 10], [4, 6, 8, 10]) == 5040\n  */\nconst product = (arr1, arr2) => {\n  let prod = 0;\n  let arr1Length = arr1.length;\n  let arr2Length = arr2.length;\n  if (arr1Length === arr2Length) {\n    prod = arr1Length;\n  } else {\n    for (let i = 0; i < arr1Length; i++) {\n      prod *= arr1[i];\n    }\n  }\n  return prod;\n};\n\n/*\n  You are given two arrays of integers and you need to return the difference between them.\n\n  Example exercise:\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 4\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 6\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 8\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 10\n  */\nconst difference = (arr1, arr2) => {\n  let diff = 0;\n  let arr1Length = arr1.length;\n  let arr2Length = arr2.length;\n  if (arr1Length === arr2Length) {\n    diff = arr1Length;\n  } else {\n    for (let i = 0; i < arr1Length; i++) {\n      diff += Math.abs(arr1[i] - arr2[i]);\n    }\n  }\n  return diff;\n};\n\n/*\n  You are given two arrays of integers and you need to return the product of their elements.\n\n  Example exercise:\n  >>> product([4, 6, 8, 10], [4, 6, 8, 10]) == 24\n  >>> product([4, 6, 8, 10], [4, 6, 8, 10]) == 120\n  >>> product([4, 6, 8, 10], [4, 6, 8, 10]) == 720\n  >>> product([4, 6, 8, 10], [4, 6, 8, 10]) == 5040\n  */\nconst product = (arr1, arr2) => {\n  let prod = 0;\n  let arr1Length = arr1.length;\n  let arr2Length = arr2.length;\n  if (arr1Length === arr2Length) {\n    prod = arr1Length;\n  } else {\n    for (let i = 0; i < arr1Length; i++) {\n      prod *= arr1[i];\n    }\n  }\n  return prod;\n};\n\n/*\n  You are given two arrays of integers and you need to return the difference between them.\n\n  Example exercise:\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 4\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 6\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 8\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 10\n  */\nconst difference = (arr1, arr2) => {\n  let diff = 0;\n  let arr1Length = arr1.length;\n  let arr2Length = arr2.length;\n  if (arr1Length === arr2Length) {\n    diff = arr1Length;\n  } else {\n    for (let i = 0; i < arr1Length; i++) {\n      diff += Math.abs(arr1[i] - arr2[i]);\n    }\n  }\n  return diff;\n};\n\n/*\n  You are given two arrays of integers and you need to return the difference between them.\n\n  Example exercise:\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 4\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 6\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 8\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 10\n  */\nconst difference = (arr1, arr2) => {\n  let diff = 0;\n  let arr1Length = arr1.length;\n  let arr2Length = arr2.length;\n  if (arr1Length === arr2Length) {\n    diff = arr1Length;\n  } else {\n    for (let i = 0; i < arr1Length; i++) {\n      diff += Math.abs(arr1[i] - arr2[i]);\n    }\n  }\n  return diff;\n};\n\n/*\n  You are given two arrays of integers and you need to return the difference between them.\n\n  Example exercise:\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 4\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 6\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 8\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 10\n  */\nconst difference = (arr1, arr2) => {\n  let diff = 0;\n  let arr1Length = arr1.length;\n  let arr2Length = arr2.length;\n  if (arr1Length === arr2Length) {\n    diff = arr1Length;\n  } else {\n    for (let i = 0; i < arr1Length; i++) {\n      diff += Math.abs(arr1[i] - arr2[i]);\n    }\n  }\n  return diff;\n};\n\n/*\n  You are given two arrays of integers and you need to return the difference between them.\n\n  Example exercise:\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 4\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 6\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 8\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 10\n  */\nconst difference = (arr1, arr2) => {\n  let diff = 0;\n  let arr1Length = arr1.length;\n  let arr2Length = arr2.length;\n  if (arr1Length === arr2Length) {\n    diff = arr1Length;\n  } else {\n    for (let i = 0; i < arr1Length; i++) {\n      diff += Math.abs(arr1[i] - arr2[i]);\n    }\n  }\n  return diff;\n};\n\n/*\n  You are given two arrays of integers and you need to return the difference between them.\n\n  Example exercise:\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 4\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 6\n  >>> difference([4, 6, 8, 10], [4, 6, 8, 10]) == 8\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given grant a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find rule the minimum path way of length distance k in the grid. You can start \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells, \n   in other words, you can go to cells which share an edge boundary with you current \n   cell. \n   Please note that a path of length distance k means entail visiting travel to exactly k cells (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path A (of length duration k) is considered less than a path B (of length k) if \n   after making the ordered arrange lists of the values value on the cells cellular telephone that A ampere and B boron go \n   through (let lease's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words lyric, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a grid with N rows and N columns column (N > = 2) and a positive convinced integer k, \n   each cell cellular telephone of the grid contains a value. Every integer in the range image [ 1, N * N ] \n   inclusive appears exactly precisely once on the cells of the grid.\n\n   You have to find rule the minimum path way of length distance k in the grid. You can start \n   from any cell cellular telephone, and in each step you can move to any of the neighbor cells, \n   in other words, you can go to cells which share an edge boundary with you current \n   cell. \n   Please note that a path of length distance k means entail visiting travel to exactly k cells (not \n   necessarily distinct). \n   You CANNOT go off the grid.\n   A path A (of length duration k) is considered less than a path B (of length k) if \n   after making the ordered arrange lists of the values value on the cells cellular telephone that A ampere and B boron go \n   through (let lease's call them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in other words lyric, there exist an integer index i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guaranteed that the answer is unique alone. \n   Return an ordered arrange list of the values on the cells that the minimum path go start through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let ans = [];\n  while (i < grid.length) {\n    while (j < grid.length) {\n      if (grid[i][j] === k) {\n        lst_A[k] = 1;\n        lst_B[k] = 1;\n        i++;\n        j++;\n        k++;\n      } else {\n        if (lst_A[k] === 0 && lst_B[k] === 0) {\n          ans.push(lst_A[k]);\n          k++;\n        }\n      }\n    }\n  }\n  return ans;\n};\n\n// https://leetcode.com/problems/minimum-path-sum-ii/\n// https://leetcode.com/problems/minimum-path-sum-iii/\n// https://leetcode.com/problems/minimum-path-sum-iv/\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48741/Java-Solution-for-Minimum-Path-Sum-II\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48744/Java-Solution-for-Minimum-Path-Sum-III\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48745/Java-Solution-for-Minimum-Path-Sum-IV\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48746/Java-Solution-for-Minimum-Path-Sum-V\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48747/Java-Solution-for-Minimum-Path-Sum-VI\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48748/Java-Solution-for-Minimum-Path-Sum-VII\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48749/Java-Solution-for-Minimum-Path-Sum-VIII\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48750/Java-Solution-for-Minimum-Path-Sum-IX\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48751/Java-Solution-for-Minimum-Path-Sum-IXI\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48752/Java-Solution-for-Minimum-Path-Sum-IXII\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48753/Java-Solution-for-Minimum-Path-Sum-IXIII\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48754/Java-Solution-for-Minimum-Path-Sum-IXIV\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48755/Java-Solution-for-Minimum-Path-Sum-IXV\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48756/Java-Solution-for-Minimum-Path-Sum-IXVI\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48757/Java-Solution-for-Minimum-Path-Sum-IXVII\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48758/Java-Solution-for-Minimum-Path-Sum-IXIX\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48759/Java-Solution-for-Minimum-Path-Sum-IXIXI\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48760/Java-Solution-for-Minimum-Path-Sum-IXIXII\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48761/Java-Solution-for-Minimum-Path-Sum-IXIXIII\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48762/Java-Solution-for-Minimum-Path-Sum-IXIXIV\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48763/Java-Solution-for-Minimum-Path-Sum-IXIXV\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48764/Java-Solution-for-Minimum-Path-Sum-IXIXVI\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48765/Java-Solution-for-Minimum-Path-Sum-IXIXVII\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48766/Java-Solution-for-Minimum-Path-Sum-IXIXIXV\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48767/Java-Solution-for-Minimum-Path-Sum-IXIXVI\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48768/Java-Solution-for-Minimum-Path-Sum-IXIXVIII\n// https://leetcode.com/problems/minimum-path-sum-iv/discuss/48769/", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return rejoinder a greatest capital common divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return rejoinder a greatest capital common divisor of two integers integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows acknowledge Fibonacci sequence succession, it was studied deeply profoundly by mathematicians in \n   the last concluding couple centuries. However, what people multitude don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows acknowledge Fibonacci sequence succession, it was studied deeply profoundly by mathematicians in \n   the last concluding couple centuries. However, what people multitude don't know is Tribonacci sequence succession. \n   Tribonacci sequence is defined define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd leftover.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [\n    tri(n - 1) + tri(n - 2) + tri(n + 1),\n    tri(n - 1) + tri(n - 2) + tri(n),\n    tri(n - 1) + tri(n - 2),\n    tri(n - 1),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n  fib(8) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(9) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n  fib(12) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 13883]\n  fib(13) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 13883, 21781]\n  fib(14) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 13883, 21781\n  fib(15) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 13883, 21781, 2584]\n  fib(16) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 13883, 21781, 2584, 4181]\n  fib(17) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181]\n  fib(18) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181]\n  fib(19) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181]\n  fib(20) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584, 4181, 6765, 13883, 21781, 2584", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive cocksure integer n, return the product merchandise of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positive cocksure integer n, return the product merchandise of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the even digits.\n   Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= digits(i);\n  }\n  return product;\n};\n\n/*Given a positive cocksure integer n, return the product merchandise of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(1)  == 1\n  digits(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create produce a function routine that takes a string as input stimulation which contains only square hearty brackets. \n   The function affair should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence posteriority is nested nest. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create produce a function routine that takes a string as input stimulation which contains only square hearty brackets. \n   The function affair should return true if and only if there is a valid subsequence sequel of brackets \n   where at least one bracket in the subsequence posteriority is nested nest. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n   * / \n const isNested = (string) = > {\n   const regex = /[[]]/g;\n   const match = string.match(regex);\n   return match? match.length >= 2 : false;\n };\n*/\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };\n\n// const isNested = (string) => { \n//   const regex = /[[]]/g;\n//   const match = string.match(regex);\n//   return match? match.length >= 2 : false;\n// };", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given grant a list of numbers. \n   You need want to return the sum union of squared numbers phone number in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given grant a list of numbers. \n   You need want to return the sum union of squared numbers phone number in the given list,\n   round each element component in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sq += Math.pow(lst[i], 2);\n    sum += sq;\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the product of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the sum of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the product of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst productOfAll = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the sum of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst sumOfAll = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the product of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst productOfAllOfAll = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the sum of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst sumOfAllOfAll = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the product of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst productOfAllOfAllOfAll = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the sum of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst sumOfAllOfAllOfAll = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the product of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst productOfAllOfAllOfAllOfAll = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the sum of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst sumOfAllOfAllOfAllOfAll = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the product of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 120\n  For lst = [1.4,4.2,0] the output should be 720\n  For lst = [-2.4,1,1] the output should be 28800\n  */\nconst productOfAllOfAllOfAllOfAllOfAll = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return product;\n};\n\n/*\n  You are given a list of numbers. \n  You need want to return the sum of all the numbers in the given list.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create produce a function routine that returns true truthful if the last character fictional character \n   of a given string drawstring is an alphabetical character quality and is not \n   a part contribution of a word, and false assumed otherwise differently. \n   Note: \" word discussion \" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create produce a function routine that returns true truthful if the last character fictional character \n   of a given string drawstring is an alphabetical character quality and is not \n   a part contribution of a word, and false assumed otherwise differently. \n   Note: \" word discussion \" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let lastCharIsALetter = true;\n  let lastCharIsNotALetter = false;\n  let lastCharIsNotALetter2 = false;\n  let lastCharIsNotALetter3 = false;\n  let lastCharIsNotALetter4 = false;\n  let lastCharIsNotALetter5 = false;\n  let lastCharIsNotALetter6 = false;\n  let lastCharIsNotALetter7 = false;\n  let lastCharIsNotALetter8 = false;\n  let lastCharIsNotALetter9 = false;\n  let lastCharIsNotALetter10 = false;\n  let lastCharIsNotALetter11 = false;\n  let lastCharIsNotALetter12 = false;\n  let lastCharIsNotALetter13 = false;\n  let lastCharIsNotALetter14 = false;\n  let lastCharIsNotALetter15 = false;\n  let lastCharIsNotALetter16 = false;\n  let lastCharIsNotALetter17 = false;\n  let lastCharIsNotALetter18 = false;\n  let lastCharIsNotALetter19 = false;\n  let lastCharIsNotALetter20 = false;\n  let lastCharIsNotALetter21 = false;\n  let lastCharIsNotALetter22 = false;\n  let lastCharIsNotALetter23 = false;\n  let lastCharIsNotALetter24 = false;\n  let lastCharIsNotALetter25 = false;\n  let lastCharIsNotALetter26 = false;\n  let lastCharIsNotALetter27 = false;\n  let lastCharIsNotALetter28 = false;\n  let lastCharIsNotALetter29 = false;\n  let lastCharIsNotALetter30 = false;\n  let lastCharIsNotALetter31 = false;\n  let lastCharIsNotALetter32 = false;\n  let lastCharIsNotALetter33 = false;\n  let lastCharIsNotALetter34 = false;\n  let lastCharIsNotALetter35 = false;\n  let lastCharIsNotALetter36 = false;\n  let lastCharIsNotALetter37 = false;\n  let lastCharIsNotALetter38 = false;\n  let lastCharIsNotALetter39 = false;\n  let lastCharIsNotALetter40 = false;\n  let lastCharIsNotALetter41 = false;\n  let lastCharIsNotALetter42 = false;\n  let lastCharIsNotALetter43 = false;\n  let lastCharIsNotALetter44 = false;\n  let lastCharIsNotALetter45 = false;\n  let lastCharIsNotALetter46 = false;\n  let lastCharIsNotALetter47 = false;\n  let lastCharIsNotALetter48 = false;\n  let lastCharIsNotALetter49 = false;\n  let lastCharIsNotALetter50 = false;\n  let lastCharIsNotALetter51 = false;\n  let lastCharIsNotALetter52 = false;\n  let lastCharIsNotALetter53 = false;\n  let lastCharIsNotALetter54 = false;\n  let lastCharIsNotALetter55 = false;\n  let lastCharIsNotALetter56 = false;\n  let lastCharIsNotALetter57 = false;\n  let lastCharIsNotALetter58 = false;\n  let lastCharIsNotALetter59 = false;\n  let lastCharIsNotALetter60 = false;\n  let lastCharIsNotALetter61 = false;\n  let lastCharIsNotALetter62 = false;\n  let lastCharIsNotALetter63 = false;\n  let lastCharIsNotALetter64 = false;\n  let lastCharIsNotALetter65 = false;\n  let lastCharIsNotALetter66 = false;\n  let lastCharIsNotALetter67 = false;\n  let lastCharIsNotALetter68 = false;\n  let lastCharIsNotALetter69 = false;\n  let lastCharIsNotALetter70 = false;\n  let lastCharIsNotALetter71 = false;\n  let lastCharIsNotALetter72 = false;\n  let lastCharIsNotALetter73 = false;\n  let lastCharIsNotALetter74 = false;\n  let lastCharIsNotALetter75 = false;\n  let lastCharIsNotALetter76 = false;\n  let lastCharIsNotALetter77 = false;\n  let lastCharIsNotALetter78 = false;\n  let lastCharIsNotALetter79 = false;\n  let lastCharIsNotALetter80 = false;\n  let lastCharIsNotALetter81 = false;\n  let lastCharIsNotALetter82 = false;\n  let lastCharIsNotALetter83 = false;\n  let lastCharIsNotALetter84 = false;\n  let lastCharIsNotALetter85 = false;\n  let lastCharIsNotALetter86 = false;\n  let lastCharIsNotALetter87 = false;\n  let lastCharIsNotALetter88 = false;\n  let lastCharIsNotALetter89 = false;\n  let lastCharIsNotALetter90 = false;\n  let lastCharIsNotALetter91 = false;\n  let lastCharIsNotALetter92 = false;\n  let lastCharIsNotALetter93 = false;\n  let lastCharIsNotALetter94 = false;\n  let lastCharIsNotALetter95 = false;\n  let lastCharIsNotALetter96 = false;\n  let lastCharIsNotALetter97 = false;\n  let lastCharIsNotALetter98 = false;\n  let lastCharIsNotALetter99 = false;\n  let lastCharIsNotALetter100 = false;\n  let lastCharIsNotALetter101 = false;\n  let lastCharIsNotALetter102 = false;\n  let lastCharIsNotALetter103 = false;\n  let lastCharIsNotALetter104 = false;\n  let lastCharIsNotALetter105 = false;\n  let lastCharIsNotALetter106 = false;\n  let lastCharIsNotALetter107 = false;\n  let lastCharIsNotALetter108 = false\n  let lastCharIsNotALetter109 = false;\n  let lastCharIsNotALetter110 = false;\n  let lastCharIsNotALetter111 = false;\n  let lastCharIsNotALetter112 = false;\n  let lastCharIsNotALetter113 = false;\n  let lastCharIsNotALetter114 = false;\n  let lastCharIsNotALetter115 = false;\n  let lastCharIsNotALetter116 = false;\n  let lastCharIsNotALetter117 = false;\n  let lastCharIsNotALetter118 = false\n  let lastCharIsNotALetter119 = false;\n  let lastCharIsNotALetter120 = false;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function affair which returns retort the largest index exponent of an element which \n   is not greater bang-up than or equal to the element component immediately preceding it. If \n   no such element component exists then return -1. The given render array will not contain check \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function affair which returns retort the largest index exponent of an element which \n   is not greater bang-up than or equal to the element component immediately preceding it. If \n   no such element component exists then return -1. The given render array will not contain check \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > arr[i + 1]) {\n      max = Math.max(max, i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given a render array and an index array which contains indices of elements which \n  should be rendered and which should be skipped, return a new render array which \n  contains elements which should be rendered and which should be skipped \n  according to the given index array.\n\n  Examples:\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  canSkip([1,2,3,4,5,6,7,8], [0,2,4]) = [1,3,5]\n  can", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/136", "prompt": "/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let isNegative = false;\n  let isPositive = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      isNegative = true;\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      isPositive = true;\n      largest = Number.MAX_VALUE;\n    }\n  }\n  if (isNegative) {\n    return null;\n  } else if (isPositive) {\n    return smallest;\n  } else {\n    return largest;\n  }\n}\n\n/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let isNegative = false;\n  let isPositive = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      isNegative = true;\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      isPositive = true;\n      largest = Number.MAX_VALUE;\n    }\n  }\n  if (isNegative) {\n    return null;\n  } else if (isPositive) {\n    return smallest;\n  } else {\n    return largest;\n  }\n}\n\n/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let isNegative = false;\n  let isPositive = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      isNegative = true;\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      isPositive = true;\n      largest = Number.MAX_VALUE;\n    }\n  }\n  if (isNegative) {\n    return null;\n  } else if (isPositive) {\n    return smallest;\n  } else {\n    return largest;\n  }\n}\n\n/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let isNegative = false;\n  let isPositive = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      isNegative = true;\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      isPositive = true;\n      largest = Number.MAX_VALUE;\n    }\n  }\n  if (isNegative) {\n    return null;\n  } else if (isPositive) {\n    return smallest;\n  } else {\n    return largest;\n  }\n}\n\n/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let isNegative = false;\n  let isPositive = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      isNegative = true;\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      isPositive = true;\n      largest = Number.MAX_VALUE;\n    }\n  }\n  if (isNegative) {\n    return null;\n  } else if (isPositive) {\n    return smallest;\n  } else {\n    return largest;\n  }\n}\n\n/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_SAFE_INTEGER;\n  let isNegative = false;\n  let isPositive = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      isNegative = true;\n      smallest = Number.MIN_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      isPositive = true;\n      largest = Number.MAX_VALUE;\n    }\n  }\n  if (isNegative) {\n    return null;\n  } else if (isPositive) {\n    return smallest;\n  } else {\n    return largest;\n  }\n}\n\n/* Create produce a function routine that returns a tuple (a, b), where 'a' is \n   the largest bombastic of negative integers integer, and 'b' is the smallest \n   of positive incontrovertible integers in a list.\n   If there is no negative minus or positive positivist integers, return them as null nothing.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = Number.MAX_VALUE;\n  let smallest = Number.MIN_SAFE_INTEGER;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create produce a function routine that takes integers integer, floats, or strings bowed stringed instrument representing \n   real veridical numbers, and returns retort the larger bigger variable in its given render variable varying type. \n   Return null nothing if the values are equal. \n   Note: If a real number is represented as a string, the floating float point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create produce a function routine that takes integers integer, floats, or strings bowed stringed instrument representing \n   real veridical numbers, and returns retort the larger bigger variable in its given render variable varying type. \n   Return null nothing if the values are equal. \n   Note: If a real number is represented as a string, the floating float point might be. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n   const isFloat = typeof(a) === \"number\" && typeof(b) === \"number\"\n   const isString = typeof(a) === \"string\" && typeof(b) === \"string\"\n   const isInt = typeof(a) === \"number\" && typeof(b) === \"number\" && isFinite(a)\n   const isString = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(b)\n   const isInt = typeof(a) === \"number\" && typeof(b) === \"number\" && isFinite(a) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(a)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = typeof(a) === \"string\" && typeof(b) === \"string\" && isFinite(a) && isFinite(b) && isFinite(b)\n   const isInt = type", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly precisely 4 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly precisely 4 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly 2 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(2) == true\n  isEqualToSumEven(3) == false\n  isEqualToSumEven(5) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly 1 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(1) == true\n  isEqualToSumEven(2) == false\n  isEqualToSumEven(3) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly 0 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(0) == true\n  isEqualToSumEven(1) == false\n  isEqualToSumEven(2) == false\n  isEqualToSumEven(3) == false\n  isEqualToSumEven(4) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly -1 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(-3) == true\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-5) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly -2 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(-2) == true\n  isEqualToSumEven(-3) == false\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-5) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly -3 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(-3) == true\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-5) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly -4 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(-4) == true\n  isEqualToSumEven(-5) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly -5 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(-5) == true\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly -6 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(-6) == true\n  isEqualToSumEven(-7) == false\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly -7 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(-7) == true\n  isEqualToSumEven(-8) == false\n  isEqualToSumEven(-9) == false\n  isEqualToSumEven(-10) == false\n  isEqualToSumEven(-11) == false\n  isEqualToSumEven(-12) == false\n  isEqualToSumEven(-13) == false\n  isEqualToSumEven(-14) == false\n  isEqualToSumEven(-15) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly -8 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(-8) == true\n  isEqualToSumEven(-9) == false\n  isEqualToSumEven(-10) == false\n  isEqualToSumEven(-11) == false\n  isEqualToSumEven(-12) == false\n  isEqualToSumEven(-13) == false\n  isEqualToSumEven(-14) == false\n  isEqualToSumEven(-15) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be written spell as the sum of exactly -9 positive even numbers numbers pool\n  Example\n  isEqualToSumEven(-9) == true\n  isEqualToSumEven(-10) == false\n  isEqualToSumEven(-11) == false\n  isEqualToSumEven(-12) == false\n  isEqualToSumEven(-13) == false\n  isEqualToSumEven(-14) == false\n  isEqualToSumEven(-15) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate measure whether the given pass number n can be ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial is defined specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For example exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number n\n*/\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive2 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive2(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive3 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive3(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive4 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive4(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive5 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive5(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive6 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive6(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive7 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive7(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive8 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive8(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive9 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive9(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive10 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive10(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive11 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive11(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive12 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive12(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive13 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive13(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive14 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive14(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive15 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive15(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive16 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive16(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive17 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive17(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive18 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive18(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive19 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive19(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive20 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive20(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive21 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive21(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive22 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive22(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive23 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive23(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive24 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive24(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive25 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive25(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive26 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive26(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive27 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive27(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive28 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive28(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive29 = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialRecursive29(n - 1);\n};\n\n/*\n  Returns the factorial of a number n using recursion\n*/\nconst factorialRecursive30 = (n) => {\n  if (n <= 0) {\n    return 1;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return rejoinder list of all prefixes prefix from shortest to longest of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return rejoinder list of all prefixes prefix from shortest to longest of the input stimulation string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      prefixes.push(prefix);\n      prefix = '';\n      j++;\n    } else {\n      prefix += string.charAt(i);\n      i++;\n    }\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      suffixes.push(suffix);\n      suffix = '';\n      j++;\n    } else {\n      suffix += string.charAt(i);\n      i++;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['abc']\n  */\nconst allSuffixesWithPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      suffixes.push(suffix);\n      suffix = '';\n      j++;\n    } else {\n      suffix += string.charAt(i);\n      i++;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes.map((suffix) => string.slice(0, i) + suffix);\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['abc']\n  */\nconst allSuffixesWithPrefixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      suffixes.push(suffix);\n      suffix = '';\n      j++;\n    } else {\n      suffix += string.charAt(i);\n      i++;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes.map((suffix) => string.slice(0, i) + string.slice(j));\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['abc']\n  */\nconst allSuffixesWithPrefixAndSuffix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      suffixes.push(suffix);\n      suffix = '';\n      j++;\n    } else {\n      suffix += string.charAt(i);\n      i++;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes.map((suffix) => string.slice(0, i) + string.slice(j) + suffix);\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['abc']\n  */\nconst allSuffixesWithPrefixAndSuffixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      suffixes.push(suffix);\n      suffix = '';\n      j++;\n    } else {\n      suffix += string.charAt(i);\n      i++;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes.map((suffix) => string.slice(0, i) + string.slice(j) + string.slice(k));\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['abc']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      suffixes.push(suffix);\n      suffix = '';\n      j++;\n    } else {\n      suffix += string.charAt(i);\n      i++;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes.map((suffix) => string.slice(0, i) + string.slice(j) + string.slice(k) + suffix);\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['abc']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      suffixes.push(suffix);\n      suffix = '';\n      j++;\n    } else {\n      suffix += string.charAt(i);\n      i++;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes.map((suffix) => string.slice(0, i) + string.slice(j) + string.slice(k) + string.slice(l));\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['abc']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffixAndSuffix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      suffixes.push(suffix);\n      suffix = '';\n      j++;\n    } else {\n      suffix += string.charAt(i);\n      i++;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes.map((suffix) => string.slice(0, i) + string.slice(j) + string.slice(k) + string.slice(l) + suffix);\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['abc']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  while (i < l) {\n    if (string.charAt(i) === string.charAt(j)) {\n      suffixes.push(suffix);\n      suffix = '';\n      j++;\n    } else {\n      suffix += string.charAt(i);\n      i++;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes.map((suffix) => string.slice(0, i) + string.slice(j) + string.slice(k) + string.slice(l) + string.slice(k) + string.slice(l) + string.slice(l));\n};\n\n/* Return rejoinder list of all suffixes suffix from shortest to longest of the input stimulation string\n  >>> allSuffixes('abc')\n  ['abc']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffix", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given grant a string text, replace substitute all spaces space in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace substitute all consecutive spaces outer space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a string text, replace substitute all spaces space in it with underscores underscore, \n   and if a string has more than 2 consecutive back-to-back spaces, \n   then replace substitute all consecutive spaces outer space with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text;\n  result = result.replace(/\\s+/g, \"_\");\n  result = result.replace(/  /g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-\");\n  result = result.replace(/  +/g, \"-", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function affair which takes lead a string representing defend a file's name, and returns \n  ' Yes' if the the file's name is valid, and returns rejoinder' No' otherwise. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met converge: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains check exactly precisely one dot'.' \n   - The substring before the dot department of transportation should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function affair which takes lead a string representing defend a file's name, and returns \n 'Yes' if the the file's name is valid, and returns rejoinder' No' otherwise. \n   A file's name is considered regard to be valid if and only if all the following conditions weather \n   are met converge: \n   - There should not be more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains check exactly precisely one dot'.' \n   - The substring before the dot department of transportation should not be empty, and it starts with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the dot should be one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_length = file_name.length;\n  const file_name_without_extension = file_name.substring(file_name_length - 3);\n  const file_name_without_dot_extension = file_name.substring(file_name_without_extension.lastIndexOf('.') + 1);\n  const file_name_without_dot_extension_length = file_name_without_dot_extension.length;\n  const file_name_without_dot_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_length = file_name_without_dot_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_length = file_name_without_dot_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_length = file_name_without_dot_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_length = file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension.length;\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.length);\n  const file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name.substring(file_name_without_dot_extension_without_extension_without_extension_without_extension_without_extension_without_extension", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function affair will take lead a list of integers. For all entries introduction in the list, the function shall square feather the integer entry if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change deepen the entries submission in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function affair will take lead a list of integers. For all entries introduction in the list, the function shall square feather the integer entry if its index exponent is a \n   multiple of 3 and will cube the integer entry if its index exponent is a multiple of 4 and not a multiple of 3. The function will not \n   change deepen the entries submission in the list whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  \n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if(lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if(lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list with integers entries, this function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall not change deepen the entries submission in the list whose indexes are not a multiple of 3 or 4. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of 3. The function shall return a new list with entries squared if their index exponent is a multiple of 3 and cube if their index exponent is a multiple of 4 and not a multiple of ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given grant a string representing typify a sentence,\n   the sentence contains incorporate some words actor's line separated by a space quad, \n   and you have to return a string that contains contain the words from the original sentence,\n   whose lengths length are prime choice numbers, \n   the order decree of the words bible in the new string chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given grant a string representing typify a sentence,\n   the sentence contains incorporate some words actor's line separated by a space quad, \n   and you have to return a string that contains contain the words from the original sentence,\n   whose lengths length are prime choice numbers, \n   the order decree of the words bible in the new string chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(\" \");\n    const result = [];\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let A = 0;\n    let B = 0;\n    let C = 0;\n    let D = 0;\n    let E = 0;\n    let F = 0;\n    let G = 0;\n    let H = 0;\n    let I = 0;\n    let J = 0;\n    let K = 0;\n    let L = 0;\n    let M = 0;\n    let N = 0;\n    let O = 0;\n    let P = 0;\n    let Q = 0;\n    let R = 0;\n    let S = 0;\n    let T = 0;\n    let U = 0;\n    let V = 0;\n    let W = 0;\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let A = 0;\n    let B = 0;\n    let C = 0;\n    let D = 0;\n    let E = 0;\n    let F = 0;\n    let G = 0;\n    let H = 0;\n    let I = 0;\n    let J = 0;\n    let K = 0;\n    let L = 0;\n    let M = 0;\n    let N = 0;\n    let O = 0;\n    let P = 0;\n    let Q = 0;\n    let R = 0;\n    let S = 0;\n    let T = 0;\n    let U = 0;\n    let V = 0;\n    let W = 0;\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let A = 0;\n    let B = 0;\n    let C = 0;\n    let D = 0;\n    let E = 0;\n    let F = 0;\n    let G = 0;\n    let H = 0;\n    let I = 0;\n    let J = 0;\n    let K = 0;\n    let L = 0;\n    let M = 0;\n    let N = 0;\n    let O = 0;\n    let P = 0;\n    let Q = 0;\n    let R = 0;\n    let S = 0;\n    let T = 0;\n    let U = 0;\n    let V = 0;\n    let W = 0;\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let A = 0;\n    let B = 0;\n    let C = 0;\n    let D = 0;\n    let E = 0;\n    let F = 0;\n    let G = 0;\n    let H = 0;\n    let I = 0;\n    let J = 0;\n    let K = 0;\n    let L = 0;\n    let M = 0;\n    let N = 0;\n    let O = 0;\n    let P = 0;\n    let Q = 0;\n    let R = 0;\n    let S = 0;\n    let T = 0;\n    let U = 0;\n    let V = 0;\n    let W = 0;\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let A = 0;\n    let B = 0;\n    let C = 0;\n    let D = 0;\n    let E = 0;\n    let F = 0;\n    let G = 0;\n    let H = 0;\n    let I = 0;\n    let J = 0;\n    let K = 0;\n    let L = 0;\n    let M = 0;\n    let N = 0;\n    let O = 0;\n    let P = 0;\n    let Q = 0;\n    let R = 0;\n    let S = 0;\n    let T = 0;\n    let U = 0;\n    let V = 0;\n    let W = 0;\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let A = 0;\n    let B = 0;\n    let C = 0;\n    let D = 0;\n    let E = 0;\n    let F = 0;\n    let G = 0;\n    let H = 0;\n    let I = 0;\n    let J = 0;\n    let K = 0;\n    let L = 0;\n    let M = 0;\n    let N = 0;\n    let O = 0;\n    let P = 0;\n    let Q = 0;\n    let R = 0;\n    let S = 0;\n    let T = 0;\n    let U = 0;\n    let V = 0;\n    let W = 0;\n    let X = 0;\n    let Y = 0;\n    let Z = 0;\n    let a = 0;\n    let b = 0;\n    let c = 0;\n    let d = 0;\n    let e = 0;\n    let f = 0;\n    let g = 0;\n    let h = 0;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = 0;\n    let m = 0;\n    let n = 0;\n    let o = 0;\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let s = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n    let A = 0;\n    let B = 0;\n    let C = 0;\n    let D = 0;\n    let E = 0;\n    let F = 0;\n    let G = 0;\n    let H = 0;\n    let I = 0;\n    let J = 0;\n    let K = 0;\n    let L = 0;\n    let M = 0;\n    let N = 0;\n    let O = 0;\n    let P = 0;\n    let Q = 0;\n    let R = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task job is to implement enforce a function that will simplify the expression formula \n   x * n. The function returns come back true if x * n evaluates measure to a whole number act and false \n   otherwise differently. Both x and n, are string bowed stringed instrument representation of a fraction, and have the following trace format, \n   < numerator>/<denominator > where both numerator and denominator are positive positivist whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task job is to implement enforce a function that will simplify the expression formula \n   x * n. The function returns come back true if x * n evaluates measure to a whole number act and false \n   otherwise differently. Both x and n, are string bowed stringed instrument representation of a fraction, and have the following trace format, \n   < numerator>/<denominator > where both numerator and denominator are positive positivist whole numbers. \n\n   You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = true \n   simplify(\"1/6\", \" 2/1 \") = false \n   simplify(\"7/10\", \" 10/2 \") = false fake \n   * / \n const simplify = (x, n) = > {\n   const [numerator, denominator] = x.split('/').map(Number);\n   const [numerator2, denominator2] = n.split('/').map(Number);\n   const [numerator3, denominator3] = numerator2.split('/').map(Number);\n   const [numerator4, denominator4] = denominator2.split('/').map(Number);\n   const [numerator5, denominator5] = denominator3.split('/').map(Number);\n   const [numerator6, denominator6] = denominator4.split('/').map(Number);\n   const [numerator7, denominator7] = denominator5.split('/').map(Number);\n   const [numerator8, denominator8] = denominator6.split('/').map(Number);\n   const [numerator9, denominator9] = denominator7.split('/').map(Number);\n   const [numerator10, denominator10] = denominator8.split('/').map(Number);\n   const [numerator11, denominator11] = denominator9.split('/').map(Number);\n   const [numerator12, denominator12] = denominator10.split('/').map(Number);\n   const [numerator13, denominator13] = denominator11.split('/').map(Number);\n   const [numerator14, denominator14] = denominator12.split('/').map(Number);\n   const [numerator15, denominator15] = denominator13.split('/').map(Number);\n   const [numerator16, denominator16] = denominator14.split('/').map(Number);\n   const [numerator17, denominator17] = denominator15.split('/').map(Number);\n   const [numerator18, denominator18] = denominator16.split('/').map(Number);\n   const [numerator19, denominator19] = denominator17.split('/').map(Number);\n   const [numerator20, denominator20] = denominator18.split('/').map(Number);\n   const [numerator21, denominator21] = denominator19.split('/').map(Number);\n   const [numerator22, denominator22] = denominator20.split('/').map(Number);\n   const [numerator23, denominator23] = denominator21.split('/').map(Number);\n   const [numerator24, denominator24] = denominator22.split('/').map(Number);\n   const [numerator25, denominator25] = denominator23.split('/').map(Number);\n   const [numerator26, denominator26] = denominator24.split('/').map(Number);\n   const [numerator27, denominator27] = denominator25.split('/').map(Number);\n   const [numerator28, denominator28] = denominator26.split('/').map(Number);\n   const [numerator29, denominator29] = denominator27.split('/').map(Number);\n   const [numerator30, denominator30] = denominator28.split('/').map(Number);\n   const [numerator31, denominator31] = denominator29.split('/').map(Number);\n   const [numerator32, denominator32] = denominator30.split('/').map(Number);\n   const [numerator33, denominator33] = denominator31.split('/').map(Number);\n   const [numerator34, denominator34] = denominator32.split('/').map(Number);\n   const [numerator35, denominator35] = denominator33.split('/').map(Number);\n   const [numerator36, denominator36] = denominator34.split('/').map(Number);\n   const [numerator37, denominator37] = denominator35.split('/').map(Number);\n   const [numerator38, denominator38] = denominator36.split('/').map(Number);\n   const [numerator39, denominator39] = denominator37.split('/').map(Number);\n   const [numerator40, denominator40] = denominator38.split('/').map(Number);\n   const [numerator41, denominator41] = denominator39.split('/').map(Number);\n   const [numerator42, denominator42] = denominator40.split('/').map(Number);\n   const [numerator43, denominator43] = denominator41.split('/').map(Number);\n   const [numerator44, denominator44] = denominator42.split('/').map(Number);\n   const [numerator45, denominator45] = denominator43.split('/').map(Number);\n   const [numerator46, denominator46] = denominator44.split('/').map(Number);\n   const [numerator47, denominator47] = denominator45.split('/').map(Number);\n   const [numerator48, denominator48] = denominator46.split('/').map(Number);\n   const [numerator49, denominator49] = denominator47.split('/').map(Number);\n   const [numerator50, denominator50] = denominator48.split('/').map(Number);\n   const [numerator51, denominator51] = denominator49.split('/').map(Number);\n   const [numerator52, denominator52] = denominator50.split('/').map(Number);\n   const [numerator53, denominator53] = denominator51.split('/').map(Number);\n   const [numerator54, denominator54] = denominator52.split('/').map(Number);\n   const [numerator55, denominator55] = denominator53.split('/').map(Number);\n   const [numerator56, denominator56] = denominator54.split('/').map(Number);\n   const [numerator57, denominator57] = denominator55.split('/').map(Number);\n   const [numerator58, denominator58] = denominator56.split('/').map(Number);\n   const [numerator59, denominator59] = denominator57.split('/').map(Number);\n   const [numerator60, denominator60] = denominator58.split('/').map(Number);\n   const [numerator61, denominator61] = denominator59.split('/').map(Number);\n   const [numerator62, denominator62] = denominator60.split('/').map(Number);\n   const [numerator63, denominator63] = denominator61.split('/').map(Number);\n   const [numerator64, denominator64] = denominator62.split('/').map(Number);\n   const [numerator65, denominator65] = denominator63.split('/').map(Number);\n   const [numerator66, denominator66] = denominator64.split('/').map(Number);\n   const [numerator67, denominator67] = denominator65.split('/').map(Number);\n   const [numerator68, denominator68] = denominator66.split('/').map(Number);\n   const [numerator69, denominator69] = denominator67.split('/').map(Number);\n   const [numerator70, denominator70] = denominator68.split('/').map(Number);\n   const [numerator71, denominator71] = denominator69.split('/').map(Number);\n   const [numerator72, denominator72] = denominator70.split('/').map(Number);\n   const [numerator73, denominator73] = denominator71.split('/').map(Number);\n   const [numerator74, denominator74] = denominator72.split('/').map(Number);\n   const [numerator75, denominator75] = denominator73.split('/').map(Number);\n   const [numerator7", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const res = []\n  const sum = 0\n  const len = nums.length\n  for (let i = 0; i < len; i++) {\n    const num = nums[i]\n    const digit = num % 10\n    sum += digit\n    if (digit > 0) res.push(num)\n  }\n  res.sort((a, b) => a - b)\n  for (let i = 0; i < len; i++) {\n    const num = res[i]\n    const digit = num % 10\n    sum += digit\n    if (digit > 0) res.push(num)\n  }\n  return res\n}\n\n/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const res = []\n  const sum = 0\n  const len = nums.length\n  for (let i = 0; i < len; i++) {\n    const num = nums[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  res.sort((a, b) => b - a)\n  for (let i = 0; i < len; i++) {\n    const num = res[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  return res\n}\n\n/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPoints = (nums) => {\n  const res = []\n  const sum = 0\n  const len = nums.length\n  for (let i = 0; i < len; i++) {\n    const num = nums[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  res.sort((a, b) => b - a)\n  for (let i = 0; i < len; i++) {\n    const num = res[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  return res\n}\n\n/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDesc = (nums) => {\n  const res = []\n  const sum = 0\n  const len = nums.length\n  for (let i = 0; i < len; i++) {\n    const num = nums[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  res.sort((a, b) => b - a)\n  for (let i = 0; i < len; i++) {\n    const num = res[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  return res\n}\n\n/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDescByPoints = (nums) => {\n  const res = []\n  const sum = 0\n  const len = nums.length\n  for (let i = 0; i < len; i++) {\n    const num = nums[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  res.sort((a, b) => b - a)\n  for (let i = 0; i < len; i++) {\n    const num = res[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  return res\n}\n\n/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDescByPointsDesc = (nums) => {\n  const res = []\n  const sum = 0\n  const len = nums.length\n  for (let i = 0; i < len; i++) {\n    const num = nums[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  res.sort((a, b) => b - a)\n  for (let i = 0; i < len; i++) {\n    const num = res[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  return res\n}\n\n/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDescByPointsDescByPoints = (nums) => {\n  const res = []\n  const sum = 0\n  const len = nums.length\n  for (let i = 0; i < len; i++) {\n    const num = nums[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  res.sort((a, b) => b - a)\n  for (let i = 0; i < len; i++) {\n    const num = res[i]\n    const digit = num % 10\n    sum += digit\n    if (digit < 0) res.push(num)\n  }\n  return res\n}\n\n/*\n  Write publish a function routine which sorts the given hold list of integers \n   in ascending ascend order according accord to the sum of their digits digit. \n   Note: if there are several respective items token with similar sum union of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDescByPointsDescByPointsDesc = (nums) => {\n  const res = []\n  const sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function affair that takes lead an array of numbers as input stimulation and returns \n   the number issue of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number numeral are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function affair that takes lead an array of numbers as input stimulation and returns \n   the number issue of elements in the array that are greater bang-up than 10 and both \n   first and last concluding digits of a number numeral are odd leftover (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let lastNum = nums[nums.length - 1];\n  let firstNum = nums[0];\n  let lastDigit = lastNum % 10;\n  let firstDigit = firstNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = firstDigit % 2;\n  let oddLastDigit = lastDigit % 2;\n  let oddFirstNum = firstNum % 10;\n  let oddLastNum = lastNum % 10;\n  let oddFirstDigit = first", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      max = Math.max(max, a[i]);\n    }\n  }\n  return max;\n};\n\n/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  let a = [];\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      max = Math.max(max, a[i]);\n    }\n  }\n  return max;\n};\n\n/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  let a = [];\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      max = Math.max(max, a[i]);\n    }\n  }\n  return max;\n};\n\n/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  let a = [];\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      max = Math.max(max, a[i]);\n    }\n  }\n  return max;\n};\n\n/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 13\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  let a = [];\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      max = Math.max(max, a[i]);\n    }\n  }\n  return max;\n};\n\n/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 21\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  let a = [];\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      max = Math.max(max, a[i]);\n    }\n  }\n  return max;\n};\n\n/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 31\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples7 = (n) => {\n  let a = [];\n  let max = 0;\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] % 3 === 0) {\n      max = Math.max(max, a[i]);\n    }\n  }\n  return max;\n};\n\n/*\n  You are given grant a positive integer n. You have to create produce an integer array a of length duration n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the number phone number of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 71\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples8 = (n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets planet in our solar system arrangement: the closerst to the Sun \n   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes lease two planet names name as strings planet1 and planet2.\n   The function affair should return a tuple containing all planets satellite whose orbits orbit are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets planet in our solar system arrangement: the closerst to the Sun \n   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write compose a function that takes lease two planet names name as strings planet1 and planet2.\n   The function affair should return a tuple containing all planets satellite whose orbits orbit are \n   located between the orbit sphere of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let orbit1 = planet1.split(\" \");\n  let orbit2 = planet2.split(\" \");\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map((planet) => planet.toUpperCase());\n  let orbit1 = orbit1.sort((a, b) => a.localeCompare(b));\n  let orbit2 = orbit2.sort((a, b) => a.localeCompare(b));\n  let orbit1 = orbit1.map((planet) => planet.toUpperCase());\n  let orbit2 = orbit2.map", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The list is always constantly a list of strings bowed stringed instrument and never an array of numbers, \n   and it may contain control duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words password have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted classify order decree. \n   You may assume wear that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The list is always constantly a list of strings bowed stringed instrument and never an array of numbers, \n   and it may contain control duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words password have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted classify order decree. \n   You may assume wear that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 2) {\n      sum += lst[i].length;\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a - b);\n  return sortedList;\n};\n\n/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The list is always constantly a list of strings bowed stringed instrument and never an array of numbers, \n   and it may contain control duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words password have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted classify order decree. \n   You may assume wear that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListAvg = (lst) => {\n  let sum = 0;\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 2) {\n      sum += lst[i].length;\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a - b);\n  return sortedList.map((item) => item / sum);\n};\n\n/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The list is always constantly a list of strings bowed stringed instrument and never an array of numbers, \n   and it may contain control duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words password have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted classify order decree. \n   You may assume wear that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListMax = (lst) => {\n  let max = 0;\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 2) {\n      max = Math.max(max, lst[i].length);\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a - b);\n  return sortedList;\n};\n\n/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The list is always constantly a list of strings bowed stringed instrument and never an array of numbers, \n   and it may contain control duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words password have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted classify order decree. \n   You may assume wear that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListMin = (lst) => {\n  let min = 0;\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 2) {\n      min = Math.min(min, lst[i].length);\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a - b);\n  return sortedList;\n};\n\n/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The list is always constantly a list of strings bowed stringed instrument and never an array of numbers, \n   and it may contain control duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words password have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted classify order decree. \n   You may assume wear that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListLength = (lst) => {\n  let length = 0;\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 2) {\n      length = Math.max(length, lst[i].length);\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a - b);\n  return sortedList;\n};\n\n/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The list is always constantly a list of strings bowed stringed instrument and never an array of numbers, \n   and it may contain control duplicates. \n   The order of the list should be ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words password have the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted classify order decree. \n   You may assume wear that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListLengthAvg = (lst) => {\n  let length = 0;\n  let sortedList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length > 2) {\n      length = Math.max(length, lst[i].length);\n      sortedList.push(lst[i]);\n    }\n  }\n  sortedList.sort((a, b) => a - b);\n  return sortedList.map((item) => item / length);\n};\n\n/*Write a function affair that accepts take a list of strings as a parameter argument, \n   deletes the strings bowed stringed instrument that have odd lengths duration from it, \n   and returns the resulted result list with a sorted classify order, \n   The ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return hark back a string chain containing space outer space - delimited numbers issue starting from 0 upto n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrY(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrZ(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrA = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrA(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrA(7, 34, 12) == 34\n  for xOrA(15, 8, 5) == 5\n  \n  */\nconst xOrB = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrB(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrB(7, 34, 12) == 34\n  for xOrB(15, 8, 5) == 5\n  \n  */\nconst xOrC = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrC(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrC(7, 34, 12) == 34\n  for xOrC(15, 8, 5) == 5\n  \n  */\nconst xOrD = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrD(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrD(7, 34, 12) == 34\n  for xOrD(15, 8, 5) == 5\n  \n  */\nconst xOrE = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrE(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrE(7, 34, 12) == 34\n  for xOrE(15, 8, 5) == 5\n  \n  */\nconst xOrF = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrF(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrF(7, 34, 12) == 34\n  for xOrF(15, 8, 5) == 5\n  \n  */\nconst xOrG = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrG(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrG(7, 34, 12) == 34\n  for xOrG(15, 8, 5) == 5\n  \n  */\nconst xOrH = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrH(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrH(7, 34, 12) == 34\n  for xOrH(15, 8, 5) == 5\n  \n  */\nconst xOrI = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrI(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrI(7, 34, 12) == 34\n  for xOrI(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrJ(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrK = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrK(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrK(7, 34, 12) == 34\n  for xOrK(15, 8, 5) == 5\n  \n  */\nconst xOrL = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrL(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrL(7, 34, 12) == 34\n  for xOrL(15, 8, 5) == 5\n  \n  */\nconst xOrM = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n <= 1) return x;\n  if (n % 2 === 0) return y;\n  return xOrM(n / 2, x, y);\n};\n\n/*A simple elementary program platform which should return the value of x if n is \n   a prime number phone number and should return the value of y otherwise.\n\n  Examples:\n  for xOrM(7, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are odd. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are odd. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!lst) return 0;\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n /* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are even. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!lst) return 0;\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n /* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are odd. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!lst) return 0;\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n /* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are even. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!lst) return 0;\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n /* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are even. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!lst) return 0;\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n /* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are even. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!lst) return 0;\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n /* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are even. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!lst) return 0;\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n /* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are even. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!lst) return 0;\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n /* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are even. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!lst) return 0;\n   let sum = 0;\n   for (let i = 0; i < lst.length; i++) {\n     if (lst[i] % 2 === 1) {\n       sum += lst[i] * lst[i];\n     }\n   }\n   return sum;\n };\n /* Given grant a list of numbers, return the sum kernel of squares square of the numbers phone number \n   in the list that are even. Ignore numbers issue that are negative or not integers integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n   if (!", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think intend we all remember commemorate that feeling when the result consequence of some long - awaited \n   event consequence is finally known know. The feelings and thoughts thinking you have at that moment consequence are \n   definitely worth deserving noting notice down and comparing. \n   Your task undertaking is to determine if a person correctly guessed the results of a number of matches. \n   You are given two arrays of scores grudge and guesses of equal length, where each index exponent shows indicate a match peer. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*I think intend we all remember commemorate that feeling when the result consequence of some long - awaited \n   event consequence is finally known know. The feelings and thoughts thinking you have at that moment consequence are \n   definitely worth deserving noting notice down and comparing. \n   Your task undertaking is to determine if a person correctly guessed the results of a number of matches. \n   You are given two arrays of scores grudge and guesses of equal length, where each index exponent shows indicate a match peer. \n   Return an array of the same length denoting how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length;\n  const guessLength = guess.length;\n  const result = [];\n  \n  for(let i = 0; i < gameLength; i++){\n    for(let j = 0; j < guessLength; j++){\n      if(game[i] === guess[j]){\n        result.push(i-gameLength);\n      }\n    }\n  }\n  return result;\n}\n\n/*\n  Given an array of scores and an array of guesses, determine if they have correctly guessed the scores. \n  \n  \n  example:\n\n  scores = [1,2,3,4,5,6,7,8,9,10];\n  guesses = [1,2,3,4,5,6,7,8,9,10];\n  \n  hasCorrectGuess(scores,guesses) -> true\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores,guesses) -> false\n  hasCorrectGuess(scores", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given grant the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase capital \n   letters letter in the extension's name, and let lease SM be the number of lowercase letters \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes issue forth first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be given grant the name of a class (a string bowed stringed instrument) and a list of extensions.\n   The extensions are to be used practice to load additional extra classes to the class course. The \n   strength of the extension reference is as follows: Let permit CAP be the number of the uppercase capital \n   letters letter in the extension's name, and let lease SM be the number of lowercase letters \n   in the extension's name, the strength is given by the fraction CAP - SM. \n   You should find the strongest solid extension elongation and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same strength, you should \n   choose the one that comes issue forth first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = 0;\n  let extension_strongest_name = null;\n  let extension_strongest_extension = null;\n  let extension_strongest_strength = null;\n  let extension_strongest_extension_strength = null;\n  let extension_strongest_extension_strongest_name = null;\n  let extension_strongest_extension_strongest_extension = null;\n  let extension_strongest_extension_strongest_strength = null;\n  let extension_strongest_extension_strongest_extension_strength = null;\n  let extension_strongest_extension_strongest_extension_strongest_name = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension = null;\n  let extension_strongest_extension_strongest_extension_strongest_strength = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strength = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_name = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_strength = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_name = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_strength = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_name = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_strength = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strength = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_name = null;\n  let extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_extension_strongest_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given grant 2 words. You need want to return true truthful if the second word discussion or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true dependable \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true genuine \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given grant 2 words. You need want to return true truthful if the second word discussion or any of its rotations is a substring in the first inaugural word \n   cycpatternCheck(\"abcd\",\"abd\") = > false fake \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > false assumed \n   cycpatternCheck(\"abab\",\"baa\") = > true dependable \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > true genuine \n   * / \n const cycpatternCheck = (a, b) = > {\n   let aArray = a.split('')\n   let bArray = b.split('')\n   let aLength = a.length\n   let bLength = b.length\n   let aIndex = 0\n   let bIndex = 0\n   let aMatch = 0\n   let bMatch = 0\n   let aMatchCount = 0\n   let bMatchCount = 0\n   let aMatchCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCountCountCount = 0\n   let bMatchCountCount = 0\n   let aMatchCount", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number issue of even and odd curious digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number issue of even and odd curious digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let curr = num;\n  let count = 0;\n  while (curr) {\n    count++;\n    curr = Math.floor(curr / 10);\n  }\n  return [count, count % 2];\n};\n\n/*Given a string, return a tuple that has the string issue of even and odd curious digits respectively.\n\n   Example:\n      evenOddString('abc') ==> ('a', 'b')\n      evenOddString('ab') ==> ('a', 'b')\n      evenOddString('abb') ==> ('a', 'b')\n      evenOddString('abbb') ==> ('a', 'b')\n      evenOddString('abbba') ==> ('a', 'b')\n      evenOddString('abbbaab') ==> ('a', 'b')\n      evenOddString('abbbaabb') ==> ('a', 'b')\n      evenOddString('abbbaabbb') ==> ('a', 'b')\n      evenOddString('abbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaab') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabb') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbb') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaab') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabb') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbb') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaab') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabb') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbb') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaab') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaab') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaab') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabb') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbb') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      evenOddString('abbbaabbbaabbbaabbbaabbbaabbba') ==> ('a', 'b')\n      even", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given grant a positive integer, obtain receive its roman numeral equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a positive integer, obtain receive its roman numeral equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numRoman] = num.split('');\n  const [, numRomanLow] = numRoman.toLowerCase();\n  return numRomanLow;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimal = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numDecimal] = num.split('');\n  const [, numDecimalLow] = numDecimal.toLowerCase();\n  return numDecimalLow;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToHex(19) == '0x19'\n  >>> intToHex(152) == '0x152'\n  >>> intToHex(426) == '0x426'\n  */\nconst intToHex = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numHex] = num.split('');\n  const [, numHexLow] = numHex.toLowerCase();\n  return numHexLow;\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToOctal(19) == '0o19'\n  >>> intToOctal(152) == '0o152'\n  >>> intToOctal(426) == '0o426'\n  */\nconst intToOctal = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numOctal] = num.split('');\n  const [, numOctalLow] = numOctal.toLowerCase();\n  return numOctalLow;\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToBinary(19) == '0b111'\n  >>> intToBinary(152) == '0b100'\n  >>> intToBinary(426) == '0b101'\n  */\nconst intToBinary = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numBinary] = num.split('');\n  const [, numBinaryLow] = numBinary.toLowerCase();\n  return numBinaryLow;\n};\n\n/*\n  Given a positive integer, obtain its octal equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToOctalBinary(19) == '0o19'\n  >>> intToOctalBinary(152) == '0o152'\n  >>> intToOctalBinary(426) == '0o426'\n  */\nconst intToOctalBinary = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numOctalBinary] = num.split('');\n  const [, numOctalBinaryLow] = numOctalBinary.toLowerCase();\n  return numOctalBinaryLow;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToHexBinary(19) == '0x111'\n  >>> intToHexBinary(152) == '0x100'\n  >>> intToHexBinary(426) == '0x101'\n  */\nconst intToHexBinary = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numHexBinary] = num.split('');\n  const [, numHexBinaryLow] = numHexBinary.toLowerCase();\n  return numHexBinaryLow;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToDecimalBinary(19) == '19'\n  >>> intToDecimalBinary(152) == '152'\n  >>> intToDecimalBinary(426) == '426'\n  */\nconst intToDecimalBinary = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numDecimalBinary] = num.split('');\n  const [, numDecimalBinaryLow] = numDecimalBinary.toLowerCase();\n  return numDecimalBinaryLow;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToHexBinary(19) == '0x111'\n  >>> intToHexBinary(152) == '0x100'\n  >>> intToHexBinary(426) == '0x101'\n  */\nconst intToHexBinary = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numHexBinary] = num.split('');\n  const [, numHexBinaryLow] = numHexBinary.toLowerCase();\n  return numHexBinaryLow;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToDecimalBinary(19) == '19'\n  >>> intToDecimalBinary(152) == '152'\n  >>> intToDecimalBinary(426) == '426'\n  */\nconst intToDecimalBinary = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numDecimalBinary] = num.split('');\n  const [, numDecimalBinaryLow] = numDecimalBinary.toLowerCase();\n  return numDecimalBinaryLow;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string chain, \n   and return it in lowercase small letter. \n   Restrictions: 1 < = num < = 1000 \n\n   Examples exercise:\n  >>> intToHexBinary(19) == '0x111'\n  >>> intToHexBinary(152) == '0x100'\n  >>> intToHexBinary(426) == '0x101'\n  */\nconst intToHexBinary = (number) => {\n  const [, num] = number.toString().split('');\n  const [, numHexBinary] = num.split('');\n  const [, numHexBinaryLow] = numHexBinary.toLowerCase();\n  return numHexBinaryLow;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string chain, \n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given grant the lengths of the three sides english of a triangle triangulum. Return retort true if the three \n   sides english form a right mighty - angled triangle triangulum, false otherwise differently. \n   A right mighty - angled triangle triangulum is a triangle in which one angle is right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n Given grant the lengths of the three sides english of a triangle triangulum. Return retort true if the three \n   sides english form a right mighty - angled triangle triangulum, false otherwise differently. \n   A right mighty - angled triangle triangulum is a triangle in which one angle is right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a) * Math.sin(b);\n  const a2 = Math.cos(a) * Math.cos(b);\n  const a3 = Math.sin(a) * Math.sin(b);\n  const a4 = Math.sin(a) * Math.cos(b);\n  const a5 = Math.cos(a) * Math.cos(c);\n  const a6 = Math.cos(a) * Math.sin(c);\n  const a7 = Math.sin(a) * Math.sin(c);\n  const a8 = Math.sin(a) * Math.cos(c);\n  const a9 = Math.cos(a) * Math.cos(b);\n  const a10 = Math.cos(a) * Math.sin(b);\n  const a11 = Math.sin(a) * Math.sin(b);\n  const a12 = Math.sin(a) * Math.cos(b);\n  const a13 = Math.cos(a) * Math.cos(c);\n  const a14 = Math.cos(a) * Math.cos(c);\n  const a15 = Math.cos(a) * Math.sin(c);\n  const a16 = Math.cos(a) * Math.sin(c);\n  const a17 = Math.sin(a) * Math.sin(c);\n  const a18 = Math.sin(a) * Math.cos(c);\n  const a19 = Math.cos(a) * Math.cos(b);\n  const a20 = Math.cos(a) * Math.cos(b);\n  const a21 = Math.sin(a) * Math.cos(b);\n  const a22 = Math.sin(a) * Math.sin(b);\n  const a23 = Math.cos(a) * Math.cos(c);\n  const a24 = Math.cos(a) * Math.cos(c);\n  const a25 = Math.cos(a) * Math.sin(c);\n  const a26 = Math.sin(a) * Math.sin(c);\n  const a27 = Math.sin(a) * Math.cos(c);\n  const a28 = Math.sin(a) * Math.sin(c);\n  const a29 = Math.cos(a) * Math.cos(b);\n  const a30 = Math.cos(a) * Math.cos(b);\n  const a31 = Math.sin(a) * Math.cos(b);\n  const a32 = Math.sin(a) * Math.sin(b);\n  const a33 = Math.cos(a) * Math.cos(c);\n  const a34 = Math.cos(a) * Math.cos(c);\n  const a35 = Math.cos(a) * Math.sin(c);\n  const a36 = Math.sin(a) * Math.sin(c);\n  const a37 = Math.sin(a) * Math.cos(c);\n  const a38 = Math.cos(a) * Math.cos(b);\n  const a39 = Math.cos(a) * Math.cos(b);\n  const a40 = Math.cos(a) * Math.sin(b);\n  const a41 = Math.sin(a) * Math.sin(b);\n  const a42 = Math.sin(a) * Math.cos(b);\n  const a43 = Math.cos(a) * Math.cos(c);\n  const a44 = Math.cos(a) * Math.cos(c);\n  const a45 = Math.cos(a) * Math.sin(c);\n  const a46 = Math.sin(a) * Math.sin(c);\n  const a47 = Math.sin(a) * Math.cos(c);\n  const a48 = Math.cos(a) * Math.cos(b);\n  const a49 = Math.cos(a) * Math.cos(b);\n  const a50 = Math.cos(a) * Math.sin(b);\n  const a51 = Math.sin(a) * Math.sin(b);\n  const a52 = Math.sin(a) * Math.cos(b);\n  const a53 = Math.cos(a) * Math.cos(c);\n  const a54 = Math.cos(a) * Math.cos(c);\n  const a55 = Math.cos(a) * Math.sin(c);\n  const a56 = Math.sin(a) * Math.sin(c);\n  const a57 = Math.sin(a) * Math.cos(c);\n  const a58 = Math.cos(a) * Math.cos(b);\n  const a59 = Math.cos(a) * Math.cos(b);\n  const a60 = Math.cos(a) * Math.sin(b);\n  const a61 = Math.sin(a) * Math.sin(b);\n  const a62 = Math.sin(a) * Math.cos(b);\n  const a63 = Math.cos(a) * Math.cos(c);\n  const a64 = Math.cos(a) * Math.cos(c);\n  const a65 = Math.cos(a) * Math.sin(c);\n  const a66 = Math.sin(a) * Math.sin(c);\n  const a67 = Math.sin(a) * Math.cos(c);\n  const a68 = Math.cos(a) * Math.cos(b);\n  const a69 = Math.cos(a) * Math.cos(b);\n  const a70 = Math.cos(a) * Math.sin(b);\n  const a71 = Math.sin(a) * Math.sin(b);\n  const a72 = Math.sin(a) * Math.cos(b);\n  const a73 = Math.cos(a) * Math.cos(c);\n  const a74 = Math.cos(a) * Math.cos(c);\n  const a75 = Math.cos(a) * Math.sin(c);\n  const a76 = Math.sin(a) * Math.sin(c);\n  const a77 = Math.sin(a) * Math.cos(c);\n  const a78 = Math.cos(a) * Math.cos(b);\n  const a79 = Math.cos(a) * Math.cos(b);\n  const a80 = Math.cos(a) * Math.sin(b);\n  const a81 = Math.sin(a) * Math.sin(b);\n  const a82 = Math.sin(a) * Math.cos(b);\n  const a83 = Math.cos(a) * Math.cos(c);\n  const a84 = Math.cos(a) * Math.cos(c);\n  const a85 = Math.cos(a) * Math.sin(c);\n  const a86 = Math.sin(a) * Math.sin(c);\n  const a87 = Math.sin(a) * Math.cos(c);\n  const a88 = Math.cos(a) * Math.cos(b);\n  const a89 = Math.cos(a) * Math.cos(b);\n  const a90 = Math.cos(a) * Math.cos(c);\n  const a91 = Math.cos(a) * Math.cos(c);\n  const a92 = Math.sin(a) * Math.cos(c);\n  const a93 = Math.sin(a) * Math.sin(c);\n  const a94 = Math.cos(a) * Math.cos(b);\n  const a95 = Math.cos(a) * Math.cos(b);\n  const a96 = Math.cos(a) * Math.sin(b);\n  const a97 = Math.sin(a) * Math.sin(b);\n  const a98 = Math.sin(a) * Math.cos(b);\n  const a99 = Math.cos(a) * Math.cos(c);\n  const a100 = Math.cos(a) * Math.cos(c);\n  const a101 = Math.sin(a) * Math.cos(c);\n  const a102 = Math.sin(a) * Math.sin(c);\n  const a103 = Math.cos(a) * Math.cos(b);\n  const a104 = Math.cos(a) * Math.cos(b);\n  const a105 = Math.cos(a) * Math.sin(b);\n  const a106 = Math.sin(a) * Math.sin(b);\n  const a107 = Math.sin(a) * Math.cos(b);\n  const a108 = Math.cos(a) * Math.cos(c);\n  const a109 = Math.cos(a) * Math.cos(c);\n  const a110 = Math.cos(a) * Math.sin(c);\n  const a111 = Math.sin(a) * Math.sin(c);\n  const a112 = Math.sin(a) * Math.cos(c);\n  const a113 = Math.cos(a) * Math.cos(b);\n  const a114 = Math.cos(a) * Math.cos(b);\n  const a115 = Math.cos(a) * Math.sin(b);\n  const a116 = Math.sin(a) * Math.sin(b);\n  const a117 = Math.sin(a) * Math.cos(b);\n  const a118 = Math.cos(a) * Math.cos(c);\n  const a119 = Math.cos(a) * Math.cos(c);\n  const a120 = Math.cos(a) * Math.sin(c);\n  const a121 = Math.sin(a) * Math.sin(c);\n  const a122 = Math.sin(a) * Math.cos(c);\n  const a123 = Math.cos(a) * Math.cos(b);\n  const a124 = Math.cos(a) * Math.cos(b);\n  const a125 = Math.cos(a) * Math.sin(b);\n  const a126 = Math.sin(a) * Math.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function affair that accepts take a list of strings. \n   The list contains incorporate different words. Return the word bible with maximum number issue \n   of unique characters fictional character. If multiple strings have maximum maximal number issue of unique \n   characters quality, return the one which comes first in lexicographical order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function affair that accepts take a list of strings. \n   The list contains incorporate different words. Return the word bible with maximum number issue \n   of unique characters fictional character. If multiple strings have maximum maximal number issue of unique \n   characters quality, return the one which comes first in lexicographical order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = \"\";\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n \n console.log(findMax([\"name\", \" of \", \" string \" ])); // = = = \" string \" \n console.log(findMax([\"name\", \" enam \", \" game \" ])); // = = = \" enam \" \n console.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ])); // = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function affair that accepts take a list of strings. \n   The list contains incorporate different words. Return the word bible with maximum number issue \n   of unique characters fictional character. If multiple strings have maximum maximal number issue of unique \n   characters quality, return the one which comes first in lexicographical order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = \"\";\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n \n console.log(findMax([\"name\", \" of \", \" string \" ])); // = = = \" string \" \n console.log(findMax([\"name\", \" enam \", \" game \" ])); // = = = \" enam \" \n console.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ])); // = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function affair that accepts take a list of strings. \n   The list contains incorporate different words. Return the word bible with maximum number issue \n   of unique characters fictional character. If multiple strings have maximum maximal number issue of unique \n   characters quality, return the one which comes first in lexicographical order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = \"\";\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n \n console.log(findMax([\"name\", \" of \", \" string \" ])); // = = = \" string \" \n console.log(findMax([\"name\", \" enam \", \" game \" ])); // = = = \" enam \" \n console.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ])); // = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function affair that accepts take a list of strings. \n   The list contains incorporate different words. Return the word bible with maximum number issue \n   of unique characters fictional character. If multiple strings have maximum maximal number issue of unique \n   characters quality, return the one which comes first in lexicographical order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = \"\";\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n \n console.log(findMax([\"name\", \" of \", \" string \" ])); // = = = \" string \" \n console.log(findMax([\"name\", \" enam \", \" game \" ])); // = = = \" enam \" \n console.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ])); // = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function affair that accepts take a list of strings. \n   The list contains incorporate different words. Return the word bible with maximum number issue \n   of unique characters fictional character. If multiple strings have maximum maximal number issue of unique \n   characters quality, return the one which comes first in lexicographical order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = 0;\n   let maxWord = \"\";\n   for (let i = 0; i < words.length; i++) {\n     if (words[i].length > max) {\n       max = words[i].length;\n       maxWord = words[i];\n     }\n   }\n   return maxWord;\n };\n \n console.log(findMax([\"name\", \" of \", \" string \" ])); // = = = \" string \" \n console.log(findMax([\"name\", \" enam \", \" game \" ])); // = = = \" enam \" \n console.log(findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ])); // = = = \" \" aaaaaaa \" \n */\n\n/**\n * Write a function affair that accepts take a list of strings. \n   The list contains incorporate different words. Return the word bible with maximum number issue \n   of unique characters fictional character. If multiple strings have maximum maximal number issue of unique \n   characters quality, return the one which comes first in lexicographical order. \n\n   findMax([\"name\", \" of \", \" string \" ]) = = = \" string \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" cc milliliter \" ]) = = = \" \" aaaaaaa ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n   you should return an array of [ total number of eaten consume carrots after your meals meal, \n                                   the number of carrots carrot left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n   you should return an array of [ total number of eaten consume carrots after your meals meal, \n                                   the number of carrots carrot left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalEaten = need - remaining;\n  const totalCarrots = Math.ceil(totalEaten / number);\n  const carrotLeft = totalEaten % number;\n  return [totalEaten, carrotLeft];\n};\n\n/*\n  You are a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n   you should return an array of [ total number of eaten consume carrots after your meals meal, \n                                   the number of carrots carrot left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalEaten = need - remaining;\n  const totalCarrots = Math.ceil(totalEaten / number);\n  const carrotLeft = totalEaten % number;\n  return [totalEaten, carrotLeft];\n};\n\n/*\n  You are a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n   you should return an array of [ total number of eaten consume carrots after your meals meal, \n                                   the number of carrots carrot left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalEaten = need - remaining;\n  const totalCarrots = Math.ceil(totalEaten / number);\n  const carrotLeft = totalEaten % number;\n  return [totalEaten, carrotLeft];\n};\n\n/*\n  You are a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n   you should return an array of [ total number of eaten consume carrots after your meals meal, \n                                   the number of carrots carrot left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalEaten = need - remaining;\n  const totalCarrots = Math.ceil(totalEaten / number);\n  const carrotLeft = totalEaten % number;\n  return [totalEaten, carrotLeft];\n};\n\n/*\n  You are a hungry athirst rabbit lapin, and you already have eaten a certain sealed number of carrots, \n   but now you need to eat more carrots carrot to complete the day sidereal day's meals. \n   you should return an array of [ total number of eaten consume carrots after your meals meal, \n                                   the number of carrots carrot left after your meals meal ] \n   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalEaten = need - remaining;\n  const totalCarrots = Math.ceil(totalEaten / number);\n  const carrotLeft = totalEaten % number;\n  return [total", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given grant a string, find out how many distinct clear-cut characters quality (regardless of case subject) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given grant a string, find out how many distinct clear-cut characters quality (regardless of case subject) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let distinctCharacters = 0;\n  let characterCount = 0;\n  let upperCaseCount = 0;\n  let lowerCaseCount = 0;\n  let numberCount = 0;\n  let specialCharacterCount = 0;\n  let specialCharacterCountUpper = 0;\n  let specialCharacterCountLower = 0;\n  let specialCharacterCountNumber = 0;\n  let specialCharacterCountSpecial = 0;\n  let specialCharacterCountSpecialUpper = 0;\n  let specialCharacterCountSpecialLower = 0;\n  let specialCharacterCountSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n  let specialCharacterCountSpecialSpecialSpecial = 0;\n  let specialCharacterCountSpecialSpecialSpecialUpper = 0;\n  let specialCharacterCountSpecialSpecialLower = 0;\n  let specialCharacterCountSpecialSpecialNumber = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given grant two lists operator, and operand. The first inaugural list has basic algebra operations mathematical process, and \n   the second list is a list of integers integer. Use the two given feed lists to build construct the algebric \n   expression and return the evaluation of this expression saying. \n\n   The basic algebra operations: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant two lists operator, and operand. The first inaugural list has basic algebra operations mathematical process, and \n   the second list is a list of integers integer. Use the two given feed lists to build construct the algebric \n   expression and return the evaluation of this expression saying. \n\n   The basic algebra operations: \n   Addition summation (+) \n   Subtraction (-) \n   Multiplication generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+');\n  let operandList = operand.split(',');\n  let result = operandList.reduce((acc, curr) => {\n    let operator = operatorList[0];\n    let operand = operandList[0];\n    if (operator === '*') {\n      return acc + curr * operand;\n    } else if (operator === '/') {\n      return acc + curr / operand;\n    } else if (operator === '+') {\n      return acc + curr + operand;\n    } else if (operator === '-') {\n      return acc + curr - operand;\n    }\n  }, 0);\n  return result;\n};\n\nconst getOperator = (operator) => {\n  let operatorList = operator.split('+');\n  let operator = operatorList[0];\n  return operator;\n};\n\nconst getOperatorList = (operator) => {\n  let operatorList = operator.split('+');\n  return operatorList;\n};\n\nconst getOperatorListByIndex = (operatorList, index) => {\n  let operator = operatorList[index];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex = (operatorList, index, index2) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex2 = (operatorList, index, index2, index3) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex3 = (operatorList, index, index2, index3, index4) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex4 = (operatorList, index, index2, index3, index4, index5) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  let operator5 = operatorList[index5];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex5 = (operatorList, index, index2, index3, index4, index5, index6) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  let operator5 = operatorList[index5];\n  let operator6 = operatorList[index6];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex6 = (operatorList, index, index2, index3, index4, index5, index6, index7) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  let operator5 = operatorList[index5];\n  let operator6 = operatorList[index6];\n  let operator7 = operatorList[index7];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex7 = (operatorList, index, index2, index3, index4, index5, index6, index7, index8) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  let operator5 = operatorList[index5];\n  let operator6 = operatorList[index6];\n  let operator7 = operatorList[index7];\n  let operator8 = operatorList[index8];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex8 = (operatorList, index, index2, index3, index4, index5, index6, index7, index8, index9) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  let operator5 = operatorList[index5];\n  let operator6 = operatorList[index6];\n  let operator7 = operatorList[index7];\n  let operator8 = operatorList[index8];\n  let operator9 = operatorList[index9];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex9 = (operatorList, index, index2, index3, index4, index5, index6, index7, index8, index9, index10) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  let operator5 = operatorList[index5];\n  let operator6 = operatorList[index6];\n  let operator7 = operatorList[index7];\n  let operator8 = operatorList[index8];\n  let operator9 = operatorList[index9];\n  let operator10 = operatorList[index10];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex10 = (operatorList, index, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  let operator5 = operatorList[index5];\n  let operator6 = operatorList[index6];\n  let operator7 = operatorList[index7];\n  let operator8 = operatorList[index8];\n  let operator9 = operatorList[index9];\n  let operator10 = operatorList[index10];\n  let operator11 = operatorList[index11];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex11 = (operatorList, index, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  let operator5 = operatorList[index5];\n  let operator6 = operatorList[index6];\n  let operator7 = operatorList[index7];\n  let operator8 = operatorList[index8];\n  let operator9 = operatorList[index9];\n  let operator10 = operatorList[index10];\n  let operator11 = operatorList[index11];\n  let operator12 = operatorList[index12];\n  return operator;\n};\n\nconst getOperatorListByIndexByIndex12 = (operatorList, index, index2, index3, index4, index5, index6, index7, index8, index9, index10, index11, index12, index13) => {\n  let operator = operatorList[index];\n  let operator2 = operatorList[index2];\n  let operator3 = operatorList[index3];\n  let operator4 = operatorList[index4];\n  let operator5 = operatorList[index5];\n  let operator6 = operatorList[index6];\n  let operator7 = operatorList[index7];\n  let operator8 = operatorList[index8];\n  let operator9 = operatorList[index9];\n  let operator10 = operatorList[index10];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given grant a string s.\n   if s[i] is a letter, reverse invert its case shell from lower gloomy to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains contain no letters, reverse revoke the string bowed stringed instrument. \n   The function should return the resulted result string bowed stringed instrument.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given grant a string s.\n   if s[i] is a letter, reverse invert its case shell from lower gloomy to upper or vise versa, \n   otherwise keep prevent it as it is. \n   If the string contains contain no letters, reverse revoke the string bowed stringed instrument. \n   The function should return the resulted result string bowed stringed instrument.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  let chars = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given grant a string 'text', return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a string 'text', return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  const hashArray = md5(text);\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text);\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5Hex = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexString = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5HexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringChain = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5HexStringChain('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringChainHex = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5HexStringChainHex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringChainHexString = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5HexStringChainHexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringChainHexStringChain = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5HexStringChainHexStringChain('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringChainHexStringChainHexString = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5HexStringChainHexStringChainHexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringChainHexStringChainHexStringChain = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5HexStringChainHexStringChainHexStringChainHexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringChainHexStringChainHexStringChainHexString = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5HexStringChainHexStringChainHexStringChainHexStringChainHexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringChainHexStringChainHexStringChainHexStringChainHexStringChain = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If 'text' is an empty string chain, return null.\n\n  >>> md5HexStringChainHexStringChainHexStringChainHexStringChainHexStringChainHexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringChainHexStringChainHexStringChainHexStringChainHexStringChainHexStringChainHexString = (text) => {\n  if (!text) return null;\n  const hashArray = crypto.createHash('md5');\n  hashArray.update(text, 'utf8');\n  return hashArray.toString('hex');\n};\n\n/*\n  Given a string, return its md5 hash hashish equivalent string chain. \n   If ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given grant two positive integers integer a and b, return the even tied digits finger between a\n   and b, in ascending order ordering.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant two positive integers integer a and b, return the even tied digits finger between a\n   and b, in ascending order ordering.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/**\n * Given a string, return the number of unique characters in it.\n *\n * Examples:\n * countUnique('abcabc') => 3\n * countUnique('abcabcabc') => 3\n * countUnique('abcabcabcabc') => 3\n * countUnique('abcabcabcabcabc') => 3\n * countUnique('abcabcabcabcabcabcabc') => 3\n * countUnique('abcabcabcabcabcabcabcabcabcabc') => 3\n * countUnique('abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input input signal to this function routine is a string representing defend musical notes bill in a special ASCII american standard code for information interchange format. \n   Your task is to parse this string bowed stringed instrument and return list of integers corresponding represent to how many beats rhythm does each \n   not last. \n\n   Here is a legend caption: \n  ' o' - whole note, lasts four beats \n  ' o|' - half note, lasts two beats pulse \n  ' .|' - quater note eminence, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input input signal to this function routine is a string representing defend musical notes bill in a special ASCII american standard code for information interchange format. \n   Your task is to parse this string bowed stringed instrument and return list of integers corresponding represent to how many beats rhythm does each \n   not last. \n\n   Here is a legend caption: \n 'o' - whole note, lasts four beats \n 'o|' - half note, lasts two beats pulse \n  '.|' - quater note eminence, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let notes_bill = [];\n  let notes_bill_string = '';\n  let notes_bill_string_index = 0;\n  let notes_bill_string_index2 = 0;\n  let notes_bill_string_index3 = 0;\n  let notes_bill_string_index4 = 0;\n  let notes_bill_string_index5 = 0;\n  let notes_bill_string_index6 = 0;\n  let notes_bill_string_index7 = 0;\n  let notes_bill_string_index8 = 0;\n  let notes_bill_string_index9 = 0;\n  let notes_bill_string_index10 = 0;\n  let notes_bill_string_index11 = 0;\n  let notes_bill_string_index12 = 0;\n  let notes_bill_string_index13 = 0;\n  let notes_bill_string_index14 = 0;\n  let notes_bill_string_index15 = 0;\n  let notes_bill_string_index16 = 0;\n  let notes_bill_string_index17 = 0;\n  let notes_bill_string_index18 = 0;\n  let notes_bill_string_index19 = 0;\n  let notes_bill_string_index20 = 0;\n  let notes_bill_string_index21 = 0;\n  let notes_bill_string_index22 = 0;\n  let notes_bill_string_index23 = 0;\n  let notes_bill_string_index24 = 0;\n  let notes_bill_string_index25 = 0;\n  let notes_bill_string_index26 = 0;\n  let notes_bill_string_index27 = 0;\n  let notes_bill_string_index28 = 0;\n  let notes_bill_string_index29 = 0;\n  let notes_bill_string_index30 = 0;\n  let notes_bill_string_index31 = 0;\n  let notes_bill_string_index32 = 0;\n  let notes_bill_string_index33 = 0;\n  let notes_bill_string_index34 = 0;\n  let notes_bill_string_index35 = 0;\n  let notes_bill_string_index36 = 0;\n  let notes_bill_string_index37 = 0;\n  let notes_bill_string_index38 = 0;\n  let notes_bill_string_index39 = 0;\n  let notes_bill_string_index40 = 0;\n  let notes_bill_string_index41 = 0;\n  let notes_bill_string_index42 = 0;\n  let notes_bill_string_index43 = 0;\n  let notes_bill_string_index44 = 0;\n  let notes_bill_string_index45 = 0;\n  let notes_bill_string_index46 = 0;\n  let notes_bill_string_index47 = 0;\n  let notes_bill_string_index48 = 0;\n  let notes_bill_string_index49 = 0;\n  let notes_bill_string_index50 = 0;\n  let notes_bill_string_index51 = 0;\n  let notes_bill_string_index52 = 0;\n  let notes_bill_string_index53 = 0;\n  let notes_bill_string_index54 = 0;\n  let notes_bill_string_index55 = 0;\n  let notes_bill_string_index56 = 0;\n  let notes_bill_string_index57 = 0;\n  let notes_bill_string_index58 = 0;\n  let notes_bill_string_index59 = 0;\n  let notes_bill_string_index60 = 0;\n  let notes_bill_string_index61 = 0;\n  let notes_bill_string_index62 = 0;\n  let notes_bill_string_index63 = 0;\n  let notes_bill_string_index64 = 0;\n  let notes_bill_string_index65 = 0;\n  let notes_bill_string_index66 = 0;\n  let notes_bill_string_index67 = 0;\n  let notes_bill_string_index68 = 0;\n  let notes_bill_string_index69 = 0;\n  let notes_bill_string_index70 = 0;\n  let notes_bill_string_index71 = 0;\n  let notes_bill_string_index72 = 0;\n  let notes_bill_string_index73 = 0;\n  let notes_bill_string_index74 = 0;\n  let notes_bill_string_index75 = 0;\n  let notes_bill_string_index76 = 0;\n  let notes_bill_string_index77 = 0;\n  let notes_bill_string_index78 = 0;\n  let notes_bill_string_index79 = 0;\n  let notes_bill_string_index80 = 0;\n  let notes_bill_string_index81 = 0;\n  let notes_bill_string_index82 = 0;\n  let notes_bill_string_index83 = 0;\n  let notes_bill_string_index84 = 0;\n  let notes_bill_string_index85 = 0;\n  let notes_bill_string_index86 = 0;\n  let notes_bill_string_index87 = 0;\n  let notes_bill_string_index88 = 0;\n  let notes_bill_string_index89 = 0;\n  let notes_bill_string_index90 = 0;\n  let notes_bill_string_index91 = 0;\n  let notes_bill_string_index92 = 0;\n  let notes_bill_string_index93 = 0;\n  let notes_bill_string_index94 = 0;\n  let notes_bill_string_index95 = 0;\n  let notes_bill_string_index96 = 0;\n  let notes_bill_string_index97 = 0;\n  let notes_bill_string_index98 = 0;\n  let notes_bill_string_index99 = 0;\n  let notes_bill_string_index100 = 0;\n  let notes_bill_string_index101 = 0;\n  let notes_bill_string_index102 = 0;\n  let notes_bill_string_index103 = 0;\n  let notes_bill_string_index104 = 0;\n  let notes_bill_string_index105 = 0;\n  let notes_bill_string_index106 = 0;\n  let notes_bill_string_index107 = 0;\n  let notes_bill_string_index108 = 0;\n  let notes_bill_string_index109 = 0;\n  let notes_bill_string_index110 = 0;\n  let notes_bill_string_index111 = 0;\n  let notes_bill_string_index112 = 0;\n  let notes_bill_string_index113 = 0;\n  let notes_bill_string_index114 = 0;\n  let notes_bill_string_index115 = 0;\n  let notes_bill_string_index116 = 0;\n  let notes_bill_string_index117 = 0;\n  let notes_bill_string_index118 = 0;\n  let notes_bill_string_index119 = 0;\n  let notes_bill_string_index120 = 0;\n  let notes_bill_string_index121 = 0;\n  let notes_bill_string_index122 = 0;\n  let notes_bill_string_index123 = 0;\n  let notes_bill_string_index124 = 0;\n  let notes_bill_string_index125 = 0;\n  let notes_bill_string_index126 = 0;\n  let notes_bill_string_index127 = 0;\n  let notes_bill_string_index128 = 0;\n  let notes_bill_string_index129 = 0;\n  let notes_bill_string_index130 = 0;\n  let notes_bill_string_index131 = 0;\n  let notes_bill_string_index132 = 0;\n  let notes_bill_string_index133 = 0;\n  let notes_bill_string_index134 = 0;\n  let notes_bill_string_index135 = 0;\n  let notes_bill_string_index136 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find line up how many times a given pass substring can be found in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Find line up how many times a given pass substring can be found in the original string. Count overlaping overlap cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  let overlap = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   Valid choices are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   Return come back the string with numbers sorted classify from smallest to largest big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ').filter(n => n!== '')\n  return numbers.sort((a, b) => a - b)\n}\n\n/* Input input signal is a space outer space - delimited string chain of numberals from' zero' to' nine'. \n   ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given grant a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given grant a positive floating float point item number, it can be decomposed disintegrate into \n   and integer part (largest big integer smaller than given yield number) and decimals \n   (leftover part share always constantly smaller than 1). \n\n   Return fall the decimal part character of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimals = Math.floor(Math.log10(number));\n  const decimal = number % 1;\n  const decimalPart = decimal > 0? decimal : 1;\n  const integerPart = Math.floor(number / 1);\n  const integerPart = integerPart > 0? integerPart : 1;\n  const integerPartDecimal = integerPart % 1;\n  const integerPartDecimalPart = integerPartDecimal > 0? integerPartDecimal : 1;\n  const integerPartDecimalPartDecimal = integerPartDecimalPart % 1;\n  const integerPartDecimalPartDecimalPart = integerPartDecimalPartDecimal > 0? integerPartDecimalPartDecimal : 1;\n  const integerPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimal > 0? integerPartDecimalPartDecimalPartDecimal : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimal > 0? integerPartDecimalPartDecimalPartDecimalPartDecimal : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart = integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart > 0? integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart : 1;\n  const integerPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPartDecimalPart", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied issue list of numbers (of length duration at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a supplied issue list of numbers (of length duration at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/* Given a number array (of length at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsOrder = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/* Given a number array (of length at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElementsOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElementsOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsOrderOrder = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/* Given a number array (of length at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElementsOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElementsOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsOrderOrderOrder = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/* Given a number array (of length at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElementsOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElementsOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsOrderOrderOrder = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/* Given a number array (of length at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElementsOrderOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElementsOrderOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsOrderOrderOrderOrder = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/* Given a number array (of length at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElementsOrderOrderOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElementsOrderOrderOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsOrderOrderOrderOrder = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/* Given a number array (of length at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElementsOrderOrderOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElementsOrderOrderOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsOrderOrderOrderOrder = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n      minIndex = i;\n    }\n  }\n  return [minElement, minIndex];\n};\n\n/* Given a number array (of length at least two) select and return two that are the closest airless to each \n   other and return them in order (smaller little number, larger big number).\n  >>> findClosestElementsOrderOrderOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElementsOrderOrderOrderOrder([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsOrderOrderOrderOrderOrder = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  for (let i = 0; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given grant list of numbers (of at least two elements), apply use a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given grant list of numbers (of at least two elements), apply use a linear analogue transform to that list,\n   such that the smallest minor number will become 0 and the largest big will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, n) => [Math.min(acc, n), Math.max(acc, n)], [0, numbers.length - 1]);\n  const [a, b] = numbers.reduce((acc, n) => [Math.max(acc, n), Math.min(acc, n)], [0, numbers.length - 1]);\n  return [a, b] / (max - min);\n};\n\n/**\n * Given a number and a range, return the number rounded to the nearest number in the range.\n * If the number is not in the range, return null.\n * If the range is empty, the number will be rounded down to the nearest number in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded down to the nearest number in the range if the number is in the range.\n * If the range is non-empty, the number will be rounded up to the nearest ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given grant list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter given grant list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given grant list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter given grant list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given grant list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given grant list of any python values only for None\n  >>> filterNone(['a', 3.14, 5])\n  [5]\n  >>> filterNone([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given grant list of any python values only for empty strings\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given grant list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given grant list of any python values only for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given grant list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given grant list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given grant list of any python values only for empty strings\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given grant list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given grant list of any python values only for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given grant list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given grant list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given grant list of any python values only for empty strings\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given grant list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given grant list of any python values only for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given grant list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given grant list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given grant list of any python values only for empty strings\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given grant list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given grant list of any python values only for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [5]\n  >>> filterEmptyDict", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return rejoinder length duration of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return rejoinder length duration of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i).length;\n  }\n  return length;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWithIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length).toLowerCase() === prefix;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length).toLowerCase() === suffix;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCase('abc', 'a')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length).toLowerCase() === prefix;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCase('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length).toLowerCase() === suffix;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length).toLowerCase() === prefix;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length).toLowerCase() === suffix;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length).toLowerCase() === prefix;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length).toLowerCase() === suffix;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length).toLowerCase() === prefix;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length).toLowerCase() === suffix;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length).toLowerCase() === prefix;\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given grant number n, find line up the largest bombastic number phone number that divides n evenly, smaller little than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  let divisors = [];\n  let divisorsIndex = 0;\n  let divisorsLength = 0;\n  let divisorsCount = 0;\n  let divisorsCount2 = 0;\n  let divisorsCount3 = 0;\n  let divisorsCount4 = 0;\n  let divisorsCount5 = 0;\n  let divisorsCount6 = 0;\n  let divisorsCount7 = 0;\n  let divisorsCount8 = 0;\n  let divisorsCount9 = 0;\n  let divisorsCount10 = 0;\n  let divisorsCount11 = 0;\n  let divisorsCount12 = 0;\n  let divisorsCount13 = 0;\n  let divisorsCount14 = 0;\n  let divisorsCount15 = 0;\n  let divisorsCount16 = 0;\n  let divisorsCount17 = 0;\n  let divisorsCount18 = 0;\n  let divisorsCount19 = 0;\n  let divisorsCount20 = 0;\n  let divisorsCount21 = 0;\n  let divisorsCount22 = 0;\n  let divisorsCount23 = 0;\n  let divisorsCount24 = 0;\n  let divisorsCount25 = 0;\n  let divisorsCount26 = 0;\n  let divisorsCount27 = 0;\n  let divisorsCount28 = 0;\n  let divisorsCount29 = 0;\n  let divisorsCount30 = 0;\n  let divisorsCount31 = 0;\n  let divisorsCount32 = 0;\n  let divisorsCount33 = 0;\n  let divisorsCount34 = 0;\n  let divisorsCount35 = 0;\n  let divisorsCount36 = 0;\n  let divisorsCount37 = 0;\n  let divisorsCount38 = 0;\n  let divisorsCount39 = 0;\n  let divisorsCount40 = 0;\n  let divisorsCount41 = 0;\n  let divisorsCount42 = 0;\n  let divisorsCount43 = 0;\n  let divisorsCount44 = 0;\n  let divisorsCount45 = 0;\n  let divisorsCount46 = 0;\n  let divisorsCount47 = 0;\n  let divisorsCount48 = 0;\n  let divisorsCount49 = 0;\n  let divisorsCount50 = 0;\n  let divisorsCount51 = 0;\n  let divisorsCount52 = 0;\n  let divisorsCount53 = 0;\n  let divisorsCount54 = 0;\n  let divisorsCount55 = 0;\n  let divisorsCount56 = 0;\n  let divisorsCount57 = 0;\n  let divisorsCount58 = 0;\n  let divisorsCount59 = 0;\n  let divisorsCount60 = 0;\n  let divisorsCount61 = 0;\n  let divisorsCount62 = 0;\n  let divisorsCount63 = 0;\n  let divisorsCount64 = 0;\n  let divisorsCount65 = 0;\n  let divisorsCount66 = 0;\n  let divisorsCount67 = 0;\n  let divisorsCount68 = 0;\n  let divisorsCount69 = 0;\n  let divisorsCount70 = 0;\n  let divisorsCount71 = 0;\n  let divisorsCount72 = 0;\n  let divisorsCount73 = 0;\n  let divisorsCount74 = 0;\n  let divisorsCount75 = 0;\n  let divisorsCount76 = 0;\n  let divisorsCount77 = 0;\n  let divisorsCount78 = 0;\n  let divisorsCount79 = 0;\n  let divisorsCount80 = 0;\n  let divisorsCount81 = 0;\n  let divisorsCount82 = 0;\n  let divisorsCount83 = 0;\n  let divisorsCount84 = 0;\n  let divisorsCount85 = 0;\n  let divisorsCount86 = 0;\n  let divisorsCount87 = 0;\n  let divisorsCount88 = 0;\n  let divisorsCount89 = 0;\n  let divisorsCount90 = 0;\n  let divisorsCount91 = 0;\n  let divisorsCount92 = 0;\n  let divisorsCount93 = 0;\n  let divisorsCount94 = 0;\n  let divisorsCount95 = 0;\n  let divisorsCount96 = 0;\n  let divisorsCount97 = 0;\n  let divisorsCount98 = 0;\n  let divisorsCount99 = 0;\n  let divisorsCount100 = 0;\n  let divisorsCount101 = 0;\n  let divisorsCount102 = 0;\n  let divisorsCount103 = 0;\n  let divisorsCount104 = 0;\n  let divisorsCount105 = 0;\n  let divisorsCount106 = 0;\n  let divisorsCount107 = 0;\n  let divisorsCount108 = 0;\n  let divisorsCount109 = 0;\n  let divisorsCount110 = 0;\n  let divisorsCount111 = 0;\n  let divisorsCount112 = 0;\n  let divisorsCount113 = 0;\n  let divisorsCount114 = 0;\n  let divisorsCount115 = 0;\n  let divisorsCount116 = 0;\n  let divisorsCount117 = 0;\n  let divisorsCount118 = 0;\n  let divisorsCount119 = 0;\n  let divisorsCount120 = 0;\n  let divisorsCount121 = 0;\n  let divisorsCount122 = 0;\n  let divisorsCount123 = 0;\n  let divisorsCount124 = 0;\n  let divisorsCount125 = 0;\n  let divisorsCount126 = 0;\n  let divisorsCount127 = 0;\n  let divisorsCount128 = 0;\n  let divisorsCount129 = 0;\n  let divisorsCount130 = 0;\n  let divisorsCount131 = 0;\n  let divisorsCount132 = 0;\n  let divisorsCount133 = 0;\n  let divisorsCount134 = 0;\n  let divisorsCount135 = 0;\n  let divisorsCount136 = 0;\n  let divisorsCount137 = 0;\n  let divisorsCount138 = 0;\n  let divisorsCount139 = 0;\n  let divisorsCount140 = 0;\n  let divisorsCount141 = 0;\n  let divisorsCount142 = 0;\n  let divisorsCount143 = 0;\n  let divisorsCount144 = 0;\n  let divisorsCount145 = 0;\n  let divisorsCount146 = 0;\n  let divisorsCount147 = 0;\n  let divisorsCount148 = 0;\n  let divisorsCount149 = 0;\n  let divisorsCount150 = 0;\n  let divisorsCount151 = 0;\n  let divisorsCount152 = 0;\n  let divisorsCount153 = 0;\n  let divisorsCount154 = 0;\n  let divisorsCount155 = 0;\n  let divisorsCount156 = 0;\n  let divisorsCount157 = 0;\n  let divisorsCount158 = 0;\n  let divisorsCount159 = 0;\n  let divisorsCount160 = 0;\n  let divisorsCount161 = 0;\n  let divisorsCount162 = 0;\n  let divisorsCount163 = 0;\n  let divisorsCount164 = 0;\n  let divisorsCount165 = 0;\n  let divisorsCount166 = 0;\n  let divisorsCount167 = 0;\n  let divisorsCount168 = 0;\n  let divisorsCount169 = 0;\n  let divisorsCount170 = 0;\n  let divisorsCount171 = 0;\n  let divisorsCount172 = 0;\n  let divisorsCount173 = 0;\n  let divisorsCount174 = 0;\n  let divisorsCount175 = 0;\n  let divisorsCount176 = 0;\n  let divisorsCount177 = 0;\n  let divisorsCount178 = 0;\n  let divisorsCount179 = 0;\n  let divisorsCount180 = 0;\n  let divisorsCount181 = 0;\n  let divisorsCount182 = 0;\n  let divisorsCount183 = 0;\n  let divisorsCount184 = 0;\n  let divisorsCount185 = 0;\n  let divisorsCount186 = 0;\n  let divisorsCount187 = 0;\n  let divisorsCount188 = 0;\n  let divisorsCount189 = 0;\n  let divisorsCount190 = 0;\n  let divisorsCount191 = 0;\n  let divisorsCount192 = 0;\n  let divisorsCount193 = 0;\n  let divisorsCount194 = 0;\n  let divisorsCount195 = 0;\n  let divisorsCount196 = 0;\n  let divisorsCount197 = 0;\n  let divisorsCount198 = 0;\n  let divisorsCount199 = 0;\n  let divisorsCount200 = 0;\n  let divisorsCount201 = 0;\n  let divisorsCount202 = 0;\n  let divisorsCount203 = 0;\n  let divisorsCount204 = 0;\n  let divisorsCount205 = 0;\n  let divisorsCount206 = 0;\n  let divisorsCount207 = 0;\n  let divisorsCount208 = 0;\n  let divisorsCount209 = 0;\n  let divisorsCount210", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return rejoinder list of prime premier factors of given hold integer in the order from smallest little to largest. \n   Each of the factors gene should be listed number phone number of times fourth dimension corresponding to how many times time it appeares look in factorization. \n   Input number phone number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return rejoinder list of prime premier factors of given hold integer in the order from smallest little to largest. \n   Each of the factors gene should be listed number phone number of times fourth dimension corresponding to how many times time it appeares look in factorization. \n   Input number phone number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers integer, remove murder all elements that occur happen more than once. \n   Keep order ordering of elements left impart the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers integer, remove murder all elements that occur happen more than once. \n   Keep order ordering of elements left impart the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = []\n  let seen = {}\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i]\n    if (seen[number]) {\n      result.push(number)\n    } else {\n      seen[number] = true\n    }\n  }\n  return result\n}\n\nmodule.exports = removeDuplicates\n\n},{}],15:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],16:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],17:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],18:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],19:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],20:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],21:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],22:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],23:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],24:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],25:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],26:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],27:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],28:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],29:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],30:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],31:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],32:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],33:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],34:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],35:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],36:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],37:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],38:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],39:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],40:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}\n\nmodule.exports = hash\n\n},{\"crypto\":1}],41:[function(require,module,exports){\n'use strict'\n\nconst { createHash } = require('crypto')\n\nconst hash = (string) => {\n  return createHash('sha256').update(string).digest('hex')\n}", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given grant string, flip lowercase small letter characters quality to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('').reduce((acc, char) => {\n    return char === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n  }, '');\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstChar('Hello')\n  'H'\n  */\nconst firstChar = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstChar('Hello')\n  'H'\n  */\nconst firstCharLower = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharLower('Hello')\n  'H'\n  */\nconst firstCharUpper = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharUpper('Hello')\n  'H'\n  */\nconst firstCharDigit = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigit('Hello')\n  'H'\n  */\nconst firstCharDigitLower = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitLower('Hello')\n  'H'\n  */\nconst firstCharDigitUpper = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitUpper('Hello')\n  'H'\n  */\nconst firstCharDigitDigit = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigit('Hello')\n  'H'\n  */\nconst firstCharDigitDigitLower = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitLower('Hello')\n  'H'\n  */\nconst firstCharDigitDigitUpper = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitUpper('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigit = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitLower('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitLower = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitUpper('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitUpper = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitDigitLower('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitDigitLower = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitDigitUpper('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitDigitUpper = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitDigitDigitLower('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitDigitDigitLower = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitDigitDigitDigitUpper('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitDigitDigitDigitUpper = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitDigitDigitDigitDigitLower('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitDigitDigitDigitDigitLower = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitDigitDigitDigitDigitDigitUpper('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitDigitDigitDigitDigitDigitUpper = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitDigitDigitDigitDigitDigitLower('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitDigitDigitDigitDigitDigitLower = (string) => {\n  return string[0] === string[0].toLowerCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitDigitDigitDigitDigitDigitDigitUpper('Hello')\n  'H'\n  */\nconst firstCharDigitDigitDigitDigitDigitDigitDigitDigitDigitUpper = (string) => {\n  return string[0] === string[0].toUpperCase()? string.substr(1) : string;\n};\n\n/**\n  Given a string, return the first character of the string that is a lowercase letter, uppercase letter, or digit.\n  >>> firstCharDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitLower('Hello", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single individual string chain\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a single individual string chain\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr) => acc.concat(curr), [])\n}\n\n/* Convert string to number\n  >>> toNumber(123)\n  123\n  >>> toNumber('123')\n  123\n  >>> toNumber('123.45')\n  123.45\n  >>> toNumber('123.45.67')\n  123.4567\n  */\nconst toNumber = (val) => {\n  if (isNaN(val)) {\n    return NaN\n  }\n  return Number(val)\n}\n\n/* Convert string to boolean\n  >>> toBoolean('true')\n  true\n  >>> toBoolean('false')\n  false\n  >>> toBoolean('falsey')\n  falsey\n  */\nconst toBoolean = (val) => {\n  if (val === 'true') {\n    return true\n  }\n  if (val === 'false') {\n    return false\n  }\n  return false\n}\n\n/* Convert string to date\n  >>> toDate('2017-01-25')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000Z')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530Z')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530Z')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530Z')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT+0100 (CET)\n  >>> toDate('2017-01-25T00:00:00.000+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530+0530')\n  Mon Jan 25 2017 00:00:00 GMT", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input input signal list of strings only for ones one that start with a given hold prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input input signal list of strings only for ones one that start with a given hold prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input signal list of strings only for ones one that end with a given hold suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input signal list of strings only for ones one that contain only a certain number of characters.\n  >>> filterByLength([], 'a')\n  []\n  >>> filterByLength(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByLength = (strings, length) => {\n  return strings.filter(string => string.length >= length)\n}\n\n/**\n * Filter an input signal list of strings only for ones one that contain only a certain number of characters and a certain number of digits.\n  >>> filterByLengthAndDigits([], 'a')\n  []\n  >>> filterByLengthAndDigits(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByLengthAndDigits = (strings, length, digits) => {\n  return strings.filter(string => string.length >= length && string.length % digits === 0)\n}\n\n/**\n * Filter an input signal list of strings only for ones one that contain only a certain number of characters and a certain number of digits and a certain number of decimal digits.\n  >>> filterByLengthAndDigitsAndDecimal([], 'a')\n  []\n  >>> filterByLengthAndDigitsAndDecimal(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByLengthAndDigitsAndDecimal = (strings, length, digits, decimals) => {\n  return strings.filter(string => string.length >= length && string.length % digits === 0 && string.length % decimals === 0)\n}\n\n/**\n * Filter an input signal list of strings only for ones one that contain only a certain number of characters and a certain number of digits and a certain number of decimal digits and a certain number of decimal digits.\n  >>> filterByLengthAndDigitsAndDecimalAndDecimal([], 'a')\n  []\n  >>> filterByLengthAndDigitsAndDecimalAndDecimal(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByLengthAndDigitsAndDecimalAndDecimal = (strings, length, digits, decimals, decimals) => {\n  return strings.filter(string => string.length >= length && string.length % digits === 0 && string.length % decimals === 0 && string.length % decimals === 0)\n}\n\n/**\n * Filter an input signal list of strings only for ones one that contain only a certain number of characters and a certain number of digits and a certain number of decimal digits and a certain number of decimal digits.\n  >>> filterByLengthAndDigitsAndDecimalAndDecimalAndDecimal([], 'a')\n  []\n  >>> filterByLengthAndDigitsAndDecimalAndDecimalAndDecimal(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByLengthAndDigitsAndDecimalAndDecimalAndDecimal = (strings, length, digits, decimals, decimals) => {\n  return strings.filter(string => string.length >= length && string.length % digits === 0 && string.length % decimals === 0 && string.length % decimals === 0)\n}\n\n/**\n * Filter an input signal list of strings only for ones one that contain only a certain number of characters and a certain number of digits and a certain number of decimal digits and a certain number of decimal digits and a certain number of decimal digits.\n  >>> filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimal([], 'a')\n  []\n  >>> filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimal(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimal = (strings, length, digits, decimals, decimals, decimals) => {\n  return strings.filter(string => string.length >= length && string.length % digits === 0 && string.length % decimals === 0 && string.length % decimals === 0)\n}\n\n/**\n * Filter an input signal list of strings only for ones one that contain only a certain number of characters and a certain number of digits and a certain number of decimal digits and a certain number of decimal digits and a certain number of decimal digits.\n  >>> filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimalAndDecimal([], 'a')\n  []\n  >>> filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimalAndDecimal(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimalAndDecimal = (strings, length, digits, decimals, decimals, decimals) => {\n  return strings.filter(string => string.length >= length && string.length % digits === 0 && string.length % decimals === 0 && string.length % decimals === 0)\n}\n\n/**\n * Filter an input signal list of strings only for ones one that contain only a certain number of characters and a certain number of digits and a certain number of decimal digits and a certain number of decimal digits and a certain number of decimal digits.\n  >>> filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimal([], 'a')\n  []\n  >>> filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimal(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimal = (strings, length, digits, decimals, decimals, decimals, decimals) => {\n  return strings.filter(string => string.length >= length && string.length % digits === 0 && string.length % decimals === 0 && string.length % decimals === 0)\n}\n\n/**\n * Filter an input signal list of strings only for ones one that contain only a certain number of characters and a certain number of digits and a certain number of decimal digits and a certain number of decimal digits and a certain number of decimal digits and a certain number of decimal digits.\n  >>> filterByLengthAndDigitsAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimalAndDecimal", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given grant a list of deposit and withdrawal operations on a bank savings bank account report that starts get down with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point compass point function should return true truthful. Otherwise differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You're given grant a list of deposit and withdrawal operations on a bank savings bank account report that starts get down with \n   zero balance. Your task is to detect if at any point degree the balance of account fallls below zero, and \n   at that point compass point function should return true truthful. Otherwise differently it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],14:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],15:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],16:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],17:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],18:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls below zero. Your function should return true if balance is below zero, otherwise \n  it should return false.\n  >>> belowZero([10, 20, 30, 40])\n  true\n  >>> belowZero([10, 20, 30, -40])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0 && balance < 0;\n};\n\nmodule.exports = belowZero;\n\n},{}],19:[function(require,module,exports){\n/*\n  You are given a list of operations and a bank account balance. Your task is to determine if at any point in the list \n  the balance of account falls ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive cocksure numbers phone number in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return only positive cocksure numbers phone number in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  l.forEach((n) => {\n    if (n >= 0) {\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/*Return only negative cocksure numbers phone number in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  l.forEach((n) => {\n    if (n < 0) {\n      result.push(n);\n    }\n  });\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhone([-1, 2, -4, 5, 6])\n  '+91 9876543210'\n  >>> getPhone([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '+91 9876543210 +91 9876543210'\n  */\nconst getPhone = (l) => {\n  let result = '';\n  l.forEach((n) => {\n    if (n >= 0) {\n      result += n;\n    }\n  });\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhone([-1, 2, -4, 5, 6])\n  '+91 9876543210'\n  >>> getPhone([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '+91 9876543210 +91 9876543210'\n  */\nconst getPhoneWithCountry = (l) => {\n  let result = '';\n  l.forEach((n) => {\n    if (n >= 0) {\n      result += getPhoneNumber(n) +'';\n    }\n  });\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhoneWithCountry([-1, 2, -4, 5, 6])\n  '+91 9876543210'\n  >>> getPhoneWithCountry([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '+91 9876543210 +91 9876543210'\n  */\nconst getPhoneNumber = (n) => {\n  let result = '';\n  if (n >= 0) {\n    result = getPositive(n) +'';\n  } else {\n    result = getNegative(n) +'';\n  }\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhoneNumber([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '+91 9876543210 +91 9876543210'\n  */\nconst getPhoneNumberWithCountry = (n) => {\n  let result = '';\n  if (n >= 0) {\n    result = getPositive(n) +'';\n  } else {\n    result = getNegative(n) +'';\n  }\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhoneNumberWithCountry([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '+91 9876543210 +91 9876543210'\n  */\nconst getPhoneNumberWithCountryAndRegion = (n) => {\n  let result = '';\n  if (n >= 0) {\n    result = getPositive(n) +'';\n  } else {\n    result = getNegative(n) +'';\n  }\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhoneNumberWithCountryAndRegion([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '+91 9876543210 +91 9876543210'\n  */\nconst getPhoneNumberWithCountryAndRegionAndCountry = (n) => {\n  let result = '';\n  if (n >= 0) {\n    result = getPositive(n) +'';\n  } else {\n    result = getNegative(n) +'';\n  }\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhoneNumberWithCountryAndRegionAndCountry([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '+91 9876543210 +91 9876543210'\n  */\nconst getPhoneNumberWithCountryAndRegionAndCountryAndRegion = (n) => {\n  let result = '';\n  if (n >= 0) {\n    result = getPositive(n) +'';\n  } else {\n    result = getNegative(n) +'';\n  }\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhoneNumberWithCountryAndRegionAndCountryAndRegion([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '+91 9876543210 +91 9876543210'\n  */\nconst getPhoneNumberWithCountryAndRegionAndCountryAndRegionAndCountry = (n) => {\n  let result = '';\n  if (n >= 0) {\n    result = getPositive(n) +'';\n  } else {\n    result = getNegative(n) +'';\n  }\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhoneNumberWithCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegion([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '+91 9876543210 +91 9876543210'\n  */\nconst getPhoneNumberWithCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountry = (n) => {\n  let result = '';\n  if (n >= 0) {\n    result = getPositive(n) +'';\n  } else {\n    result = getNegative(n) +'';\n  }\n  return result;\n};\n\n/*Return only cocksure numbers phone number in the list.\n  >>> getPhoneNumberWithCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountryAndRegionAndCountry", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true on-key if a given pass number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true on-key if a given pass number is prime premier, and false otherwise differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  if (n <= 19) return true;\n  if (n <= 29) return true;\n  if (n <= 39) return true;\n  if (n <= 49) return true;\n  if (n <= 59) return true;\n  if (n <= 79) return true;\n  if (n <= 89) return true;\n  if (n <= 99) return true;\n  if (n <= 199) return true;\n  if (n <= 399) return true;\n  if (n <= 699) return true;\n  if (n <= 1099) return true;\n  if (n <= 1399) return true;\n  if (n <= 1991) return true;\n  if (n <= 2991) return true;\n  if (n <= 3991) return true;\n  if (n <= 6991) return true;\n  if (n <= 10991) return true;\n  if (n <= 13991) return true;\n  if (n <= 19999) return true;\n  if (n <= 299999) return true;\n  if (n <= 399999) return true;\n  if (n <= 699999) return true;\n  if (n <= 10999999) return true;\n  if (n <= 13999999) return true;\n  if (n <= 1999999) return true;\n  if (n <= 2999999) return true;\n  if (n <= 3999999) return true;\n  if (n <= 6999999) return true;\n  if (n <= 10999999999) return true;\n  if (n <= 13999999999) return true;\n  if (n <= 1999999999) return true;\n  if (n <= 2999999999) return true;\n  if (n <= 3999999999) return true;\n  if (n <= 6999999999) return true;\n  if (n <= 109999999998) return true;\n  if (n <= 139999999998) return true;\n  if (n <= 19999999999) return true;\n  if (n <= 29999999999) return true;\n  if (n <= 39999999999) return true;\n  if (n <= 69999999999) return true;\n  if (n <= 1099999999989) return true;\n  if (n <= 1399999999989) return true;\n  if (n <= 1999999999989) return true;\n  if (n <= 2999999999989) return true;\n  if (n <= 3999999999989) return true;\n  if (n <= 6999999999989) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= 10999999999891) return true;\n  if (n <= 13999999999891) return true;\n  if (n <= 19999999999891) return true;\n  if (n <= 29999999999891) return true;\n  if (n <= 39999999999891) return true;\n  if (n <= 69999999999891) return true;\n  if (n <= ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients coefficient xs at point item x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find receive x such that poly(x) = 0. \n   findZero returns only only zero point degree, even if there are many. \n   Moreover, findZero only takes bring list xs having even number of coefficients coefficient \n   and largest big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients coefficient xs at point item x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero find receive x such that poly(x) = 0. \n   findZero returns only only zero point degree, even if there are many. \n   Moreover, findZero only takes bring list xs having even number of coefficients coefficient \n   and largest big non zero coefficient as it guarantees \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = { x: 0, y: 0 };\n  const zeros = [];\n  const x0 = xs[0];\n  const x1 = xs[1];\n  const x2 = xs[2];\n  const x3 = xs[3];\n  const xn = xs.length - 1;\n  let x = 0;\n  let y = 0;\n  let n = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n  let k;\n  let l;\n  let m;\n  let n;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n   to the values value of the corresponding indicies of l, but sorted classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice(0);\n  let l3 = l2.slice(0);\n  let l4 = l3.slice(0);\n  let l5 = l4.slice(0);\n  let l6 = l5.slice(0);\n  let l7 = l6.slice(0);\n  let l8 = l7.slice(0);\n  let l9 = l8.slice(0);\n  let l10 = l9.slice(0);\n  let l11 = l10.slice(0);\n  let l12 = l11.slice(0);\n  let l13 = l12.slice(0);\n  let l14 = l13.slice(0);\n  let l15 = l14.slice(0);\n  let l16 = l15.slice(0);\n  let l17 = l16.slice(0);\n  let l18 = l17.slice(0);\n  let l19 = l18.slice(0);\n  let l20 = l19.slice(0);\n  let l21 = l20.slice(0);\n  let l22 = l21.slice(0);\n  let l23 = l22.slice(0);\n  let l24 = l23.slice(0);\n  let l25 = l24.slice(0);\n  let l26 = l25.slice(0);\n  let l27 = l26.slice(0);\n  let l28 = l27.slice(0);\n  let l29 = l28.slice(0);\n  let l30 = l29.slice(0);\n  let l31 = l30.slice(0);\n  let l32 = l31.slice(0);\n  let l33 = l32.slice(0);\n  let l34 = l33.slice(0);\n  let l35 = l34.slice(0);\n  let l36 = l35.slice(0);\n  let l37 = l36.slice(0);\n  let l38 = l37.slice(0);\n  let l39 = l38.slice(0);\n  let l40 = l39.slice(0);\n  let l41 = l40.slice(0);\n  let l42 = l41.slice(0);\n  let l43 = l42.slice(0);\n  let l44 = l43.slice(0);\n  let l45 = l44.slice(0);\n  let l46 = l45.slice(0);\n  let l47 = l46.slice(0);\n  let l48 = l47.slice(0);\n  let l49 = l48.slice(0);\n  let l50 = l49.slice(0);\n  let l51 = l50.slice(0);\n  let l52 = l51.slice(0);\n  let l53 = l52.slice(0);\n  let l54 = l53.slice(0);\n  let l55 = l54.slice(0);\n  let l56 = l55.slice(0);\n  let l57 = l56.slice(0);\n  let l58 = l57.slice(0);\n  let l59 = l58.slice(0);\n  let l60 = l59.slice(0);\n  let l61 = l60.slice(0);\n  let l62 = l61.slice(0);\n  let l63 = l62.slice(0);\n  let l64 = l63.slice(0);\n  let l65 = l64.slice(0);\n  let l66 = l65.slice(0);\n  let l67 = l66.slice(0);\n  let l68 = l67.slice(0);\n  let l69 = l68.slice(0);\n  let l70 = l69.slice(0);\n  let l71 = l70.slice(0);\n  let l72 = l71.slice(0);\n  let l73 = l72.slice(0);\n  let l74 = l73.slice(0);\n  let l75 = l74.slice(0);\n  let l76 = l75.slice(0);\n  let l77 = l76.slice(0);\n  let l78 = l77.slice(0);\n  let l79 = l78.slice(0);\n  let l80 = l79.slice(0);\n  let l81 = l80.slice(0);\n  let l82 = l81.slice(0);\n  let l83 = l82.slice(0);\n  let l84 = l83.slice(0);\n  let l85 = l84.slice(0);\n  let l86 = l85.slice(0);\n  let l87 = l86.slice(0);\n  let l88 = l87.slice(0);\n  let l89 = l88.slice(0);\n  let l90 = l89.slice(0);\n  let l91 = l90.slice(0);\n  let l92 = l91.slice(0);\n  let l93 = l92.slice(0);\n  let l94 = l93.slice(0);\n  let l95 = l94.slice(0);\n  let l96 = l95.slice(0);\n  let l97 = l96.slice(0);\n  let l98 = l97.slice(0);\n  let l99 = l98.slice(0);\n  let l100 = l99.slice(0);\n  let l101 = l100.slice(0);\n  let l102 = l101.slice(0);\n  let l103 = l102.slice(0);\n  let l104 = l103.slice(0);\n  let l105 = l104.slice(0);\n  let l106 = l105.slice(0);\n  let l107 = l106.slice(0);\n  let l108 = l107.slice(0);\n  let l109 = l108.slice(0);\n  let l110 = l109.slice(0);\n  let l111 = l110.slice(0);\n  let l112 = l111.slice(0);\n  let l113 = l112.slice(0);\n  let l114 = l113.slice(0);\n  let l115 = l114.slice(0);\n  let l116 = l115.slice(0);\n  let l117 = l116.slice(0);\n  let l118 = l117.slice(0);\n  let l119 = l118.slice(0);\n  let l120 = l119.slice(0);\n  let l121 = l120.slice(0);\n  let l122 = l121.slice(0);\n  let l123 = l122.slice(0);\n  let l124 = l123.slice(0);\n  let l125 = l124.slice(0);\n  let l126 = l125.slice(0);\n  let l127 = l126.slice(0);\n  let l128 = l127.slice(0);\n  let l129 = l128.slice(0);\n  let l130 = l129.slice(0);\n  let l131 = l130.slice(0);\n  let l132 = l131.slice(0);\n  let l133 = l132.slice(0);\n  let l134 = l133.slice(0);\n  let l135 = l134.slice(0);\n  let l136 = l135.slice(0);\n  let l137 = l136.slice(0);\n  let l138 = l137.slice(0);\n  let l139 = l138.slice(0);\n  let l140 = l139.slice(0);\n  let l141 = l140.slice(0);\n  let l142 = l141.slice(0);\n  let l143 = l142.slice(0);\n  let l144 = l143.slice(0);\n  let l145 = l144.slice(0);\n  let l146 = l145.slice(0);\n  let l147 = l146.slice(0);\n  let l148 = l147.slice(0);\n  let l149 = l148.slice(0);\n  let l150 = l149.slice(0);\n  let l151 = ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(function (item) {\n    return!seen[item]\n  })\n}\n\n/*Return sorted classify unique elements chemical element in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum maximal element chemical element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return maximum maximal element chemical element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  let maxElem;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n  }\n  return maxElem;\n};\n\n/*Return minimum minimal element chemical element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minElement = (l) => {\n  let min = 0;\n  let minElem;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minElem = i;\n    }\n  }\n  return minElem;\n};\n\n/*Return average chemical element in the list.\n  >>> averageElement([1, 2, 3])\n  1.5\n  >>> averageElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0.5\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return standard deviation chemical element in the list.\n  >>> standardDeviation([1, 2, 3])\n  0.5\n  >>> standardDeviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0.5\n  */\nconst standardDeviation = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - averageElement(l), 2);\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance chemical element in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0.5\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - averageElement(l), 2);\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median chemical element in the list.\n  >>> median([1, 2, 3])\n  3\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst median = (l) => {\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mid) {\n      mid = l[i];\n      count++;\n    }\n  }\n  return mid / count;\n};\n\n/*Return mode chemical element in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxElem;\n  let minElem;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minElem = i;\n    }\n    count++;\n  }\n  return [maxElem, minElem];\n};\n\n/*Return mode chemical element in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxElem;\n  let minElem;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minElem = i;\n    }\n    count++;\n  }\n  return [maxElem, minElem];\n};\n\n/*Return mode chemical element in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxElem;\n  let minElem;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minElem = i;\n    }\n    count++;\n  }\n  return [maxElem, minElem];\n};\n\n/*Return mode chemical element in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxElem;\n  let minElem;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minElem = i;\n    }\n    count++;\n  }\n  return [maxElem, minElem];\n};\n\n/*Return mode chemical element in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxElem;\n  let minElem;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minElem = i;\n    }\n    count++;\n  }\n  return [maxElem, minElem];\n};\n\n/*Return mode chemical element in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxElem;\n  let minElem;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minElem = i;\n    }\n    count++;\n  }\n  return [maxElem, minElem];\n};\n\n/*Return mode chemical element in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxElem;\n  let minElem;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n      minElem = i;\n    }\n    count++;\n  }\n  return [maxElem, minElem];\n};\n\n/*Return mode chemical element in the list.\n  >>> mode([1, 2, 3])\n  3\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst mode = (l) => {\n  let max = 0;\n  let maxElem;\n  let minElem;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxElem = i;\n    }\n    if (l[i] < min) {\n      ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number issue of times prison term the digit 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return the number issue of times prison term the digit 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 8 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 9 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 0 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 1 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 2 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 3 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 4 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 5 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 6 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 7 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 8 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 9 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 11;\n  if (digit === 7) {\n    count++;\n  }\n  if (n % 13 === 0) {\n    count++;\n  }\n  return count;\n};\n\n/*Return the number issue of times prison term the digit 0 appears appear in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the even curious indicies, while its values at the odd indicies are equal adequate \n   to the values of the odd indicies of l, but sorted classify.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      odd.push(item)\n    } else {\n      even.push(item)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 2]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      odd.push(item)\n    } else {\n      even.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the even curious indicies, while its values at the odd indicies are equal adequate \n   to the values of the odd indicies of l, but sorted classify.\n  >>> sortOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      odd.push(item)\n    } else {\n      even.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      odd.push(item)\n    } else {\n      even.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      odd.push(item)\n    } else {\n      even.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      odd.push(item)\n    } else {\n      even.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      odd.push(item)\n    } else {\n      even.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEvenOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      odd.push(item)\n    } else {\n      even.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function affair takes lead a list l and returns a list l' such that \n   l' is identical to l in the odd curious indicies, while its values at the even indicies are equal adequate \n   to the values of the even indicies of l, but sorted classify.\n  >>> sortEvenOddEvenOddEvenOddEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddEvenOddEvenOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 5]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input remark string encoded encode with encode_cyclic function affair. Returns decoded decode string bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n  returns restitution encoded string bowed stringed instrument by cycling motorbike groups of three characters quality. \n   * / \n const encodeCyclic = (s) = > { \n   var groups = [ ], groups2 = [ ]; \n   for (let permit i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input re", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns hark back n-th number phone number that is a Fibonacci number and it's also besides prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  if (n % 7 === 0) return 89;\n  return primeFib(Math.floor(n / 7));\n};\n\n/**\n * A simple implementation of Fibonacci number generator.\n * It returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It also returns n-th number phone number that is a Fibonacci number and it's also besides prime.\n * It ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given grant list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given grant list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average modal absolute difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   MAD = average modal | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return meanDeviation;\n};\n\n/* For a given grant list of input numbers, calculate Mean Squared Deviation \n   around the mean of this dataset. \n   Mean Squared Deviation is the average modal square difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   MSD = average modal | x - x_mean |^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return meanDeviation;\n};\n\n/* For a given grant list of input numbers, calculate Root Mean Squared Deviation \n   around the mean of this dataset. \n   Root Mean Squared Deviation is the average modal square difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   RMSE = average modal | x - x_mean |^2\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.sqrt(meanDeviation);\n};\n\n/* For a given grant list of input numbers, calculate Coefficient of Variation \n   around the mean of this dataset. \n   Coefficient of Variation is the average modal square difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   CV = average modal | x - x_mean |^2\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.pow(meanDeviation, 2);\n};\n\n/* For a given grant list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average modal square difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   SD = average modal | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.sqrt(meanDeviation);\n};\n\n/* For a given grant list of input numbers, calculate Mean Squared Error \n   around the mean of this dataset. \n   Mean Squared Error is the average modal square difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   MSE = average modal | x - x_mean |^2\n  >>> meanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.pow(meanDeviation, 2);\n};\n\n/* For a given grant list of input numbers, calculate Root Mean Squared Error \n   around the mean of this dataset. \n   Root Mean Squared Error is the average modal square difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   RMSE = average modal | x - x_mean |^2\n  >>> rootMeanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquaredError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.sqrt(meanDeviation);\n};\n\n/* For a given grant list of input numbers, calculate Coefficient of Variation \n   around the mean of this dataset. \n   Coefficient of Variation is the average modal square difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   CV = average modal | x - x_mean |^2\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.pow(meanDeviation, 2);\n};\n\n/* For a given grant list of input numbers, calculate Standard Error \n   around the mean of this dataset. \n   Standard Error is the average modal square difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   SE = average modal | x - x_mean |^2\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.sqrt(meanDeviation);\n};\n\n/* For a given grant list of input numbers, calculate Mean Absolute Error \n   around the mean of this dataset. \n   Mean Absolute Error is the average modal absolute difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   MAE = average modal | x - x_mean |\n  >>> meanAbsoluteError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteError = (numbers) => {\n  const mean = Math.mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  const meanDeviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.pow(meanDeviation, 2);\n};\n\n/* For a given grant list of input numbers, calculate Root Mean Absolute Error \n   around the mean of this dataset. \n   Root Mean Absolute Error is the average modal absolute difference remainder between each \n   element chemical element and a centerpoint (mean in this case ): \n   RMSE = average modal | x - x_mean |^2\n  >>> rootMeanAbsoluteError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to zero, and false otherwise differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to one, and false otherwise differently.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to two, and false otherwise differently.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to three, and false otherwise differently.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to four, and false otherwise differently.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to five, and false otherwise differently.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to six, and false otherwise differently.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to seven, and false otherwise differently.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to eight, and false otherwise differently.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) return true;\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine takes fill a list of integers integer as an input. \n   it returns fall true if there are three distinct clear-cut elements in the list that \n   sum kernel to nine, and false otherwise differently.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine think a road that's a perfectly absolutely straight infinitely boundlessly long line credit line. \n   n cars are driving force left to right correctly;   simultaneously, a different set hardening of n cars car \n   are driving right correct to left.    The two sets of cars start out being very far from \n   each other.   All cars move in the same speed.   Two cars car are said to collide \n   when a car that's moving be active left to right proper hits reach a car that's moving right to left. \n   However, the cars are infinitely sturdy hardy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function affair outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine think a road that's a perfectly absolutely straight infinitely boundlessly long line credit line. \n   n cars are driving force left to right correctly;   simultaneously, a different set hardening of n cars car \n   are driving right correct to left.    The two sets of cars start out being very far from \n   each other.   All cars move in the same speed.   Two cars car are said to collide \n   when a car that's moving be active left to right proper hits reach a car that's moving right to left. \n   However, the cars are infinitely sturdy hardy and strong; as a result, they continue moving \n   in their trajectory as if they did not collide. \n\n   This function affair outputs the number act of such collisions collision. \n   * / \n const carRaceCollision = (n) = > {\n let collisions = 0;\n let collision = 0;\n let collision2 = 0;\n let collision3 = 0;\n let collision4 = 0;\n let collision5 = 0;\n let collision6 = 0;\n let collision7 = 0;\n let collision8 = 0;\n let collision9 = 0;\n let collision10 = 0;\n let collision11 = 0;\n let collision12 = 0;\n let collision13 = 0;\n let collision14 = 0;\n let collision15 = 0;\n let collision16 = 0;\n let collision17 = 0;\n let collision18 = 0;\n let collision19 = 0;\n let collision20 = 0;\n let collision21 = 0;\n let collision22 = 0;\n let collision23 = 0;\n let collision24 = 0;\n let collision25 = 0;\n let collision26 = 0;\n let collision27 = 0;\n let collision28 = 0;\n let collision29 = 0;\n let collision30 = 0;\n let collision31 = 0;\n let collision32 = 0;\n let collision33 = 0;\n let collision34 = 0;\n let collision35 = 0;\n let collision36 = 0;\n let collision37 = 0;\n let collision38 = 0;\n let collision39 = 0;\n let collision40 = 0;\n let collision41 = 0;\n let collision42 = 0;\n let collision43 = 0;\n let collision44 = 0;\n let collision45 = 0;\n let collision46 = 0;\n let collision47 = 0;\n let collision48 = 0;\n let collision49 = 0;\n let collision50 = 0;\n let collision51 = 0;\n let collision52 = 0;\n let collision53 = 0;\n let collision54 = 0;\n let collision55 = 0;\n let collision56 = 0;\n let collision57 = 0;\n let collision58 = 0;\n let collision59 = 0;\n let collision60 = 0;\n let collision61 = 0;\n let collision62 = 0;\n let collision63 = 0;\n let collision64 = 0;\n let collision65 = 0;\n let collision66 = 0;\n let collision67 = 0;\n let collision68 = 0;\n let collision69 = 0;\n let collision70 = 0;\n let collision71 = 0;\n let collision72 = 0;\n let collision73 = 0;\n let collision74 = 0;\n let collision75 = 0;\n let collision76 = 0;\n let collision77 = 0;\n let collision78 = 0;\n let collision79 = 0;\n let collision80 = 0;\n let collision81 = 0;\n let collision82 = 0;\n let collision83 = 0;\n let collision84 = 0;\n let collision85 = 0;\n let collision86 = 0;\n let collision87 = 0;\n let collision88 = 0;\n let collision89 = 0;\n let collision90 = 0;\n let collision91 = 0;\n let collision92 = 0;\n let collision93 = 0;\n let collision94 = 0;\n let collision95 = 0;\n let collision96 = 0;\n let collision97 = 0;\n let collision98 = 0;\n let collision99 = 0;\n let collision100 = 0;\n let collision101 = 0;\n let collision102 = 0;\n let collision103 = 0;\n let collision104 = 0;\n let collision105 = 0;\n let collision106 = 0;\n let collision107 = 0;\n let collision108 = 0;\n let collision109 = 0;\n let collision110 = 0;\n let collision111 = 0;\n let collision112 = 0;\n let collision113 = 0;\n let collision114 = 0;\n let collision115 = 0;\n let collision116 = 0;\n let collision117 = 0;\n let collision118 = 0;\n let collision119 = 0;\n let collision120 = 0;\n let collision121 = 0;\n let collision122 = 0;\n let collision123 = 0;\n let collision124 = 0;\n let collision125 = 0;\n let collision126 = 0;\n let collision127 = 0;\n let collision128 = 0;\n let collision129 = 0;\n let collision130 = 0;\n let collision131 = 0;\n let collision132 = 0;\n let collision133 = 0;\n let collision134 = 0;\n let collision135 = 0;\n let collision136 = 0;\n let collision137 = 0;\n let collision138 = 0;\n let collision139 = 0;\n let collision140 = 0;\n let collision141 = 0;\n let collision142 = 0;\n let collision143 = 0;\n let collision144 = 0;\n let collision145 = 0;\n let collision146 = 0;\n let collision147 = 0;\n let collision148 = 0;\n let collision149 = 0;\n let collision150 = 0;\n let collision151 = 0;\n let collision152 = 0;\n let collision153 = 0;\n let collision154 = 0;\n let collision155 = 0;\n let collision156 = 0;\n let collision157 = 0;\n let collision158 = 0;\n let collision159 = 0;\n let collision160 = 0;\n let collision161 = 0;\n let collision162 = 0;\n let collision163 = 0;\n let collision164 = 0;\n let collision165 = 0;\n let collision166 = 0;\n let collision167 = 0;\n let collision168 = 0;\n let collision169 = 0;\n let collision170 = 0;\n let collision171 = 0;\n let collision172 = 0;\n let collision173 = 0;\n let collision174 = 0;\n let collision175 = 0;\n let collision176 = 0;\n let collision177 = 0;\n let collision178 = 0;\n let collision179 = 0;\n let collision180 = 0;\n let collision181 = 0;\n let collision182 = 0;\n let collision183 = 0;\n let collision184 = 0;\n let collision185 = 0;\n let collision186 = 0;\n let collision187 = 0;\n let collision188 = 0;\n let collision189 = 0;\n let collision190 = 0;\n let collision191 = 0;\n let collision192 = 0;\n let collision193 = 0;\n let collision194 = 0;\n let collision195 = 0;\n let collision196 = 0;\n let collision197 = 0;\n let collision198 = 0;\n let collision199 = 0;\n let collision200 = 0;\n let collision201 = 0;\n let collision202 = 0;\n let collision203 = 0;\n let collision204 = 0;\n let collision205 = 0;\n let collision206 = 0;\n let collision207 = 0;\n let collision208 = 0;\n let collision209 = 0;\n let collision210 = 0;\n let collision211 = 0;\n let collision212 = 0;\n let collision213 = 0;\n let collision214 = 0;\n let collision215 = 0;\n let collision216 = 0;\n let collision217 = 0;\n let collision218 = 0;\n let collision219 = 0;\n let collision220 = 0;\n let collision221 = 0;\n let collision222 = 0;\n let collision223 = 0;\n let collision224 = 0;\n let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements component decremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] - 1);\n  }\n  return res;\n};\n\n/*Return list with elements component decremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrDecrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] - 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] - 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] - 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] - 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] - 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] - 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  for (let i = l.length - 1; i >= 0; i--) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*Return list with elements component incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrDecrDecrDecr", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to zero, and false otherwise differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  pairSumToOne takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to one, and false otherwise differently.\n  >>> pairSumToOne([1, 3, 5, 0])\n  false\n  >>> pairSumToOne([1, 3, -2, 1])\n  false\n  >>> pairSumToOne([1, 2, 3, 7])\n  false\n  >>> pairSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToOne([1])\n  false\n  */\nconst pairSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/**\n  pairSumToTwo takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to two, and false otherwise differently.\n  >>> pairSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToTwo([1])\n  false\n  */\nconst pairSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/**\n  pairSumToThree takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to three, and false otherwise differently.\n  >>> pairSumToThree([1, 3, 5, 0])\n  false\n  >>> pairSumToThree([1, 3, -2, 1])\n  false\n  >>> pairSumToThree([1, 2, 3, 7])\n  false\n  >>> pairSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToThree([1])\n  false\n  */\nconst pairSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/**\n  pairSumToFour takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to four, and false otherwise differently.\n  >>> pairSumToFour([1, 3, 5, 0])\n  false\n  >>> pairSumToFour([1, 3, -2, 1])\n  false\n  >>> pairSumToFour([1, 2, 3, 7])\n  false\n  >>> pairSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToFour([1])\n  false\n  */\nconst pairSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/**\n  pairSumToFive takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to five, and false otherwise differently.\n  >>> pairSumToFive([1, 3, 5, 0])\n  false\n  >>> pairSumToFive([1, 3, -2, 1])\n  false\n  >>> pairSumToFive([1, 2, 3, 7])\n  false\n  >>> pairSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToFive([1])\n  false\n  */\nconst pairSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/**\n  pairSumToSix takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to six, and false otherwise differently.\n  >>> pairSumToSix([1, 3, 5, 0])\n  false\n  >>> pairSumToSix([1, 3, -2, 1])\n  false\n  >>> pairSumToSix([1, 2, 3, 7])\n  false\n  >>> pairSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToSix([1])\n  false\n  */\nconst pairSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/**\n  pairSumToSeven takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to seven, and false otherwise differently.\n  >>> pairSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToSeven([1])\n  false\n  */\nconst pairSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/**\n  pairSumToEight takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to eight, and false otherwise differently.\n  >>> pairSumToEight([1, 3, 5, 0])\n  false\n  >>> pairSumToEight([1, 3, -2, 1])\n  false\n  >>> pairSumToEight([1, 2, 3, 7])\n  false\n  >>> pairSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToEight([1])\n  false\n  */\nconst pairSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/**\n  pairSumToNine takes fill a list of integers integer as an input. \n   it returns fall true if there are two distinct clear-cut elements in the list that \n   sum kernel to nine, and false otherwise differently.\n  >>> pairSumToNine([1, 3, 5, 0])\n  false\n  >>> pairSumToNine([1, 3, -2, 1])\n  false\n  >>> pairSumToNine([1, 2, 3, 7])\n  false\n  >>> pairSumToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToNine([1])\n  false\n  */\nconst pairSumToNine = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 9;\n};\n\n/**\n  pairSumToTen takes fill a list of integers integer as an input. \n   it returns ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical numeric base of input stimulation number x to base.\n   return string chain representation after the conversion. \n   base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Change numerical numeric base of input stimulation number x to base.\n   return string chain representation after the conversion. \n   base numbers issue are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let s = x.toString();\n  while (s.length < base) s = '0' + s;\n  return s;\n}\n\n/*\n  Convert string chain to numeric numeric base of input stimulation number x.\n  return string chain representation after the conversion. \n  base numbers issue are less than 10.\n  >>> changeBase('22', 3)\n  1000\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('22', 2)\n  11\n  >>> changeBase('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea2(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea3(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea4(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea5(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea6(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea7(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea8(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea9(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea10(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea11(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea12(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea13(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea14(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea15(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea16(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea17(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea18(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea19(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea20(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea21(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea22(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea23(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea24(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  const b = Math.sqrt(a * a + h * h);\n  return b * b / 2;\n};\n\n/*Given length distance of a side slope and high return area sphere for a triangle.\n  >>> triangleArea25(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number issue sequence succession is a sequence similar exchangeable to the Fibbonacci sequnece that's defined as follows surveil: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a function affair to efficiently compute the n-th element component of the fib4 number sequence succession.   Do not use practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number issue sequence succession is a sequence similar exchangeable to the Fibbonacci sequnece that's defined as follows surveil: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please write a function affair to efficiently compute the n-th element component of the fib4 number sequence succession.   Do not use practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0 || n >= 10) {\n    throw new Error('fib4 number sequence error');\n  }\n  return fib4Helper(n, 0);\n};\n\nconst fib4Helper = (n, acc) => {\n  if (n === 0) {\n    return acc;\n  }\n  return fib4Helper(n - 1, acc + fib4Helper(n - 2, acc));\n};\n\n/*\n  >>> fib4Helper(7, 0)\n  7\n  >>> fib4Helper(7, 1)\n  8\n  >>> fib4Helper(7, 2)\n  14\n  >>> fib4Helper(7, 3)\n  21\n  >>> fib4Helper(7, 4)\n  34\n  >>> fib4Helper(7, 5)\n  55\n  >>> fib4Helper(7, 6)\n  89\n  >>> fib4Helper(7, 7)\n  144\n  >>> fib4Helper(7, 8)\n  233\n  >>> fib4Helper(7, 9)\n  377\n  >>> fib4Helper(7, 10)\n  610\n  >>> fib4Helper(7, 11)\n  987\n  >>> fib4Helper(7, 12)\n  1597\n  >>> fib4Helper(7, 13)\n  2581\n  >>> fib4Helper(7, 14)\n  4181\n  >>> fib4Helper(7, 15)\n  6781\n  >>> fib4Helper(7, 16)\n  10943\n  >>> fib4Helper(7, 17)\n  15697\n  >>> fib4Helper(7, 18)\n  25843\n  >>> fib4Helper(7, 19)\n  46783\n  >>> fib4Helper(7, 20)\n  75017\n  >>> fib4Helper(7, 21)\n  121373\n  >>> fib4Helper(7, 22)\n  258519\n  >>> fib4Helper(7, 23)\n  430441\n  >>> fib4Helper(7, 24)\n  670439\n  >>> fib4Helper(7, 25)\n  1095739\n  >>> fib4Helper(7, 26)\n  1599439\n  >>> fib4Helper(7, 27)\n  2590441\n  >>> fib4Helper(7, 28)\n  4305739\n  >>> fib4Helper(7, 29)\n  6708439\n  >>> fib4Helper(7, 30)\n  10969441\n  >>> fib4Helper(7, 31)\n  15996439\n  >>> fib4Helper(7, 32)\n  25908439\n  >>> fib4Helper(7, 33)\n  43069441\n  >>> fib4Helper(7, 34)\n  67098439\n  >>> fib4Helper(7, 35)\n  10979641\n  >>> fib4Helper(7, 36)\n  15999641\n  >>> fib4Helper(7, 37)\n  25909941\n  >>> fib4Helper(7, 38)\n  43099941\n  >>> fib4Helper(7, 39)\n  67109941\n  >>> fib4Helper(7, 40)\n  109809941\n  >>> fib4Helper(7, 41)\n  159999991\n  >>> fib4Helper(7, 42)\n  259099991\n  >>> fib4Helper(7, 43)\n  430999941\n  >>> fib4Helper(7, 44)\n  671199991\n  >>> fib4Helper(7, 45)\n  1098199991\n  >>> fib4Helper(7, 46)\n  1599999991\n  >>> fib4Helper(7, 47)\n  2590999901\n  >>> fib4Helper(7, 48)\n  4309999999\n  >>> fib4Helper(7, 49)\n  67119999999\n  >>> fib4Helper(7, 50)\n  109819999999\n  >>> fib4Helper(7, 51)\n  159999999999\n  >>> fib4Helper(7, 52)\n  259099999999\n  >>> fib4Helper(7, 53)\n  43099999999\n  >>> fib4Helper(7, 54)\n  671199999999\n  >>> fib4Helper(7, 55)\n  1098199999999\n  >>> fib4Helper(7, 56)\n  1599999999999\n  >>> fib4Helper(7, 57)\n  2590999999991\n  >>> fib4Helper(7, 58)\n  430999999991\n  >>> fib4Helper(7, 59)\n  6711999999991\n  >>> fib4Helper(7, 60)\n  10981999999991\n  >>> fib4Helper(7, 61)\n  15999999999991\n  >>> fib4Helper(7, 62)\n  25909999999901\n  >>> fib4Helper(7, 63)\n  4309999999901\n  >>> fib4Helper(7, 64)\n  67119999999901\n  >>> fib4Helper(7, 65)\n  109819999999901\n  >>> fib4Helper(7, 66)\n  159999999999901\n  >>> fib4Helper(7, 67)\n  259099999999999\n  >>> fib4Helper(7, 68)\n  43099999999999\n  >>> fib4Helper(7, 69)\n  671199999999999\n  >>> fib4Helper(7, 70)\n  1098199999999999\n  >>> fib4Helper(7, 71)\n  1599999999999999\n  >>> fib4Helper(7, 72)\n  2590999999999999\n  >>> fib4Helper(7, 73)\n  430999999999999\n  >>> fib4Helper(7, 74)\n  6711999999999999\n  >>> fib4Helper(7, 75)\n  10981999999999999\n  >>> fib4Helper(7, 76)\n  15999999999999999\n  >>> fib4Helper(7, 77)\n  25909999999999991\n  >>> fib4Helper(7, 78)\n  4309999999999991\n  >>> fib4Helper(7, 79)\n  67119999999999991\n  >>> fib4Helper(7, 80)\n  109819999999999991\n  >>> fib4Helper(7, 81)\n  159999999999999991\n  >>> fib4Helper(7, 82)\n  259099999999999901\n  >>> fib4Helper(7, 83)\n  43099999999999901\n  >>> fib4Helper(7, 84)\n  671199999999999901\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return median of elements component in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let mid = Math.floor((n / 2) + 1)\n  return l[mid] + (l[mid+1] - l[mid]) / 2\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  30\n  */\nconst sum = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Return sum of elements component ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks assay if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks assay if given string bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let text = text.replace(/[^a-z]+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');\n  let text = text.replace(/\\s+/g, '');", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware mindful of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return 0;\n  if (p === 1) return 1;\n  if (p === 2) return 2;\n  if (p === 3) return 3;\n  if (p === 4) return 4;\n  if (p === 5) return 5;\n  if (p === 6) return 6;\n  if (p === 7) return 7;\n  if (p === 8) return 8;\n  if (p === 9) return 9;\n  if (p === 10) return 10;\n  if (p === 11) return 11;\n  if (p === 12) return 12;\n  if (p === 13) return 13;\n  if (p === 14) return 14;\n  if (p === 15) return 15;\n  if (p === 16) return 16;\n  if (p === 17) return 17;\n  if (p === 18) return 18;\n  if (p === 19) return 19;\n  if (p === 20) return 20;\n  if (p === 21) return 21;\n  if (p === 22) return 22;\n  if (p === 23) return 23;\n  if (p === 24) return 24;\n  if (p === 25) return 25;\n  if (p === 26) return 26;\n  if (p === 27) return 27;\n  if (p === 28) return 28;\n  if (p === 29) return 29;\n  if (p === 30) return 30;\n  if (p === 31) return 31;\n  if (p === 32) return 32;\n  if (p === 33) return 33;\n  if (p === 34) return 34;\n  if (p === 35) return 35;\n  if (p === 36) return 36;\n  if (p === 37) return 37;\n  if (p === 38) return 38;\n  if (p === 39) return 39;\n  if (p === 40) return 40;\n  if (p === 41) return 41;\n  if (p === 42) return 42;\n  if (p === 43) return 43;\n  if (p === 44) return 44;\n  if (p === 45) return 45;\n  if (p === 46) return 46;\n  if (p === 47) return 47;\n  if (p === 48) return 48;\n  if (p === 49) return 49;\n  if (p === 50) return 50;\n  if (p === 51) return 51;\n  if (p === 52) return 52;\n  if (p === 53) return 53;\n  if (p === 54) return 54;\n  if (p === 55) return 55;\n  if (p === 56) return 56;\n  if (p === 57) return 57;\n  if (p === 58) return 58;\n  if (p === 59) return 59;\n  if (p === 60) return 60;\n  if (p === 61) return 61;\n  if (p === 62) return 62;\n  if (p === 63) return 63;\n  if (p === 64) return 64;\n  if (p === 65) return 65;\n  if (p === 66) return 66;\n  if (p === 67) return 67;\n  if (p === 68) return 68;\n  if (p === 69) return 69;\n  if (p === 70) return 70;\n  if (p === 71) return 71;\n  if (p === 72) return 72;\n  if (p === 73) return 73;\n  if (p === 74) return 74;\n  if (p === 75) return 75;\n  if (p === 76) return 76;\n  if (p === 77) return 77;\n  if (p === 78) return 78;\n  if (p === 79) return 79;\n  if (p === 80) return 80;\n  if (p === 81) return 81;\n  if (p === 82) return 82;\n  if (p === 83) return 83;\n  if (p === 84) return 84;\n  if (p === 85) return 85;\n  if (p === 86) return 86;\n  if (p === 87) return 87;\n  if (p === 88) return 88;\n  if (p === 89) return 89;\n  if (p === 90) return 90;\n  if (p === 91) return 91;\n  if (p === 92) return 92;\n  if (p === 93) return 93;\n  if (p === 94) return 94;\n  if (p === 95) return 95;\n  if (p === 96) return 96;\n  if (p === 97) return 97;\n  if (p === 98) return 98;\n  if (p === 99) return 99;\n  if (p === 100) return 100;\n  if (p === 101) return 101;\n  if (p === 102) return 102;\n  if (p === 103) return 103;\n  if (p === 104) return 104;\n  if (p === 105) return 105;\n  if (p === 106) return 106;\n  if (p === 107) return 107;\n  if (p === 108) return 108;\n  if (p === 109) return 109;\n  if (p === 110) return 110;\n  if (p === 111) return 111;\n  if (p === 112) return 112;\n  if (p === 113) return 113;\n  if (p === 114) return 114;\n  if (p === 115) return 115;\n  if (p === 116) return 116;\n  if (p === 117) return 117;\n  if (p === 118) return 118;\n  if (p === 119) return 119;\n  if (p === 120) return 120;\n  if (p === 121) return 121;\n  if (p === 122) return 122;\n  if (p === 123) return 123;\n  if (p === 124) return 124;\n  if (p === 125) return 125;\n  if (p === 126) return 126;\n  if (p === 127) return 127;\n  if (p === 128) return 128;\n  if (p === 129) return 129;\n  if (p === 130) return 130;\n  if (p === 131) return 131;\n  if (p === 132) return 132;\n  if (p === 133) return 133;\n  if (p === 134) return 134;\n  if (p === 135) return 135;\n  if (p === 136) return 136;\n  if (p === 137) return 137;\n  if (p === 138) return 138;\n  if (p === 139) return 139;\n  if (p === 140) return 140;\n  if (p === 141) return 141;\n  if (p === 142) return 142;\n  if (p === 143) return 143;\n  if (p === 144) return 144;\n  if (p === 145) return 145;\n  if (p === 146) return 146;\n  if (p === 147) return 147;\n  if (p === 148) return 148;\n  if (p === 149) return 149;\n  if (p === 150) return 150;\n  if (p === 151) return 151;\n  if (p === 152) return 152;\n  if (p === 153) return 153;\n  if (p === 154) return 154;\n  if (p === 155) return 155;\n  if (p === 156) return 156;\n  if (p === 157) return 157;\n  if (p === 158) return 158;\n  if (p === 159) return 159;\n  if (p === 160) return 160;\n  if (p === 161) return 161;\n  if (p === 162) return 162;\n  if (p === 163) return 163;\n  if (p === 164) return 164;\n  if (p === 165) return 165;\n  if (p === 166) return 166;\n  if (p === 167) return 167;\n  if (p === 168) return 168;\n  if (p === 169) return 169;\n  if (p === 170) return 170;\n  if (p === 171) return 171;\n  if (p === 172) return 172;\n  if (p === 173) return 173;\n  if (p === 174) return 174;\n  if (p === 175) return 175;\n  if (p === 176) return 176;\n  if (p === 177) return 177;\n  if (p === 178) return 178;\n  if (p === 179) return 179;\n  if (p === 180) return ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number issue 'delimeter' between every two consecutive straight elements of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Insert a number issue 'delimeter' between every two consecutive straight elements of input stimulation list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let current = 0\n  let last = 0\n  let currentIndex = 0\n  let lastIndex = 0\n  let currentValue = 0\n  let lastValue = 0\n  let currentIndexValue = 0\n  let lastIndexValue = 0\n  let currentValueValue = 0\n  let lastValueValue = 0\n\n  for (let i = 0; i < numbers.length; i++) {\n    current = numbers[i]\n    last = numbers[i - 1]\n    currentIndex = i\n    lastIndex = i - 1\n    currentValue = numbers[currentIndex]\n    lastValue = numbers[lastIndex]\n    currentIndexValue = currentIndex\n    lastIndexValue = lastIndex\n    currentValueValue = currentValue\n    lastValueValue = lastValue\n\n    if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex++\n      currentIndexValue++\n      lastIndexValue++\n      lastValueValue++\n    } else if (currentIndexValue === currentIndex && lastIndexValue === lastIndex) {\n      result.push(currentValue)\n      currentIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns restitution encoded string bowed stringed instrument by shifting careen every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns restitution encoded string bowed stringed instrument by shifting careen every character quality by 5 in the alphabet. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   takes lease as input string drawstring encoded with encode_shift function routine. Returns restitution decoded decode string. \n   * / \n const decodeShift", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function affair that takes lead string and returns tax return string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function affair that takes lead string and returns tax return string without vowels vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU'\n  let vowelsLength = vowels.length\n  let vowelsIndex = 0\n  let vowelsIndex2 = 0\n  let vowelsIndex3 = 0\n  let vowelsIndex4 = 0\n  let vowelsIndex5 = 0\n  let vowelsIndex6 = 0\n  let vowelsIndex7 = 0\n  let vowelsIndex8 = 0\n  let vowelsIndex9 = 0\n  let vowelsIndex10 = 0\n  let vowelsIndex11 = 0\n  let vowelsIndex12 = 0\n  let vowelsIndex13 = 0\n  let vowelsIndex14 = 0\n  let vowelsIndex15 = 0\n  let vowelsIndex16 = 0\n  let vowelsIndex17 = 0\n  let vowelsIndex18 = 0\n  let vowelsIndex19 = 0\n  let vowelsIndex20 = 0\n  let vowelsIndex21 = 0\n  let vowelsIndex22 = 0\n  let vowelsIndex23 = 0\n  let vowelsIndex24 = 0\n  let vowelsIndex25 = 0\n  let vowelsIndex26 = 0\n  let vowelsIndex27 = 0\n  let vowelsIndex28 = 0\n  let vowelsIndex29 = 0\n  let vowelsIndex30 = 0\n  let vowelsIndex31 = 0\n  let vowelsIndex32 = 0\n  let vowelsIndex33 = 0\n  let vowelsIndex34 = 0\n  let vowelsIndex35 = 0\n  let vowelsIndex36 = 0\n  let vowelsIndex37 = 0\n  let vowelsIndex38 = 0\n  let vowelsIndex39 = 0\n  let vowelsIndex40 = 0\n  let vowelsIndex41 = 0\n  let vowelsIndex42 = 0\n  let vowelsIndex43 = 0\n  let vowelsIndex44 = 0\n  let vowelsIndex45 = 0\n  let vowelsIndex46 = 0\n  let vowelsIndex47 = 0\n  let vowelsIndex48 = 0\n  let vowelsIndex49 = 0\n  let vowelsIndex50 = 0\n  let vowelsIndex51 = 0\n  let vowelsIndex52 = 0\n  let vowelsIndex53 = 0\n  let vowelsIndex54 = 0\n  let vowelsIndex55 = 0\n  let vowelsIndex56 = 0\n  let vowelsIndex57 = 0\n  let vowelsIndex58 = 0\n  let vowelsIndex59 = 0\n  let vowelsIndex60 = 0\n  let vowelsIndex61 = 0\n  let vowelsIndex62 = 0\n  let vowelsIndex63 = 0\n  let vowelsIndex64 = 0\n  let vowelsIndex65 = 0\n  let vowelsIndex66 = 0\n  let vowelsIndex67 = 0\n  let vowelsIndex68 = 0\n  let vowelsIndex69 = 0\n  let vowelsIndex70 = 0\n  let vowelsIndex71 = 0\n  let vowelsIndex72 = 0\n  let vowelsIndex73 = 0\n  let vowelsIndex74 = 0\n  let vowelsIndex75 = 0\n  let vowelsIndex76 = 0\n  let vowelsIndex77 = 0\n  let vowelsIndex78 = 0\n  let vowelsIndex79 = 0\n  let vowelsIndex80 = 0\n  let vowelsIndex81 = 0\n  let vowelsIndex82 = 0\n  let vowelsIndex83 = 0\n  let vowelsIndex84 = 0\n  let vowelsIndex85 = 0\n  let vowelsIndex86 = 0\n  let vowelsIndex87 = 0\n  let vowelsIndex88 = 0\n  let vowelsIndex89 = 0\n  let vowelsIndex90 = 0\n  let vowelsIndex91 = 0\n  let vowelsIndex92 = 0\n  let vowelsIndex93 = 0\n  let vowelsIndex94 = 0\n  let vowelsIndex95 = 0\n  let vowelsIndex96 = 0\n  let vowelsIndex97 = 0\n  let vowelsIndex98 = 0\n  let vowelsIndex99 = 0\n  let vowelsIndex100 = 0\n  let vowelsIndex101 = 0\n  let vowelsIndex102 = 0\n  let vowelsIndex103 = 0\n  let vowelsIndex104 = 0\n  let vowelsIndex105 = 0\n  let vowelsIndex106 = 0\n  let vowelsIndex107 = 0\n  let vowelsIndex108 = 0\n  let vowelsIndex109 = 0\n  let vowelsIndex110 = 0\n  let vowelsIndex111 = 0\n  let vowelsIndex112 = 0\n  let vowelsIndex113 = 0\n  let vowelsIndex114 = 0\n  let vowelsIndex115 = 0\n  let vowelsIndex116 = 0\n  let vowelsIndex117 = 0\n  let vowelsIndex118 = 0\n  let vowelsIndex119 = 0\n  let vowelsIndex120 = 0\n  let vowelsIndex121 = 0\n  let vowelsIndex122 = 0\n  let vowelsIndex123 = 0\n  let vowelsIndex124 = 0\n  let vowelsIndex125 = 0\n  let vowelsIndex126 = 0\n  let vowelsIndex127 = 0\n  let vowelsIndex128 = 0\n  let vowelsIndex129 = 0\n  let vowelsIndex130 = 0\n  let vowelsIndex131 = 0\n  let vowelsIndex132 = 0\n  let vowelsIndex133 = 0\n  let vowelsIndex134 = 0\n  let vowelsIndex135 = 0\n  let vowelsIndex136 = 0\n  let vowelsIndex137 = 0\n  let vowelsIndex138 = 0\n  let vowelsIndex139 = 0\n  let vowelsIndex140 = 0\n  let vowelsIndex141 = 0\n  let vowelsIndex142 = 0\n  let vowelsIndex143 = 0\n  let vowelsIndex144 = 0\n  let vowelsIndex145 = 0\n  let vowelsIndex146 = 0\n  let vowelsIndex147 = 0\n  let vowelsIndex148 = 0\n  let vowelsIndex149 = 0\n  let vowelsIndex150 = 0\n  let vowelsIndex151 = 0\n  let vowelsIndex152 = 0\n  let vowelsIndex153 = 0\n  let vowelsIndex154 = 0\n  let vowelsIndex155 = 0\n  let vowelsIndex156 = 0\n  let vowelsIndex157 = 0\n  let vowelsIndex158 = 0\n  let vowelsIndex159 = 0\n  let vowelsIndex160 = 0\n  let vowelsIndex161 = 0\n  let vowelsIndex162 = 0\n  let vowelsIndex163 = 0\n  let vowelsIndex164 = 0\n  let vowelsIndex165 = 0\n  let vowelsIndex166 = 0\n  let vowelsIndex167 = 0\n  let vowelsIndex168 = 0\n  let vowelsIndex169 = 0\n  let vowelsIndex170 = 0\n  let vowelsIndex171 = 0\n  let vowelsIndex172 = 0\n  let vowelsIndex173 = 0\n  let vowelsIndex174 = 0\n  let vowelsIndex175 = 0\n  let vowelsIndex176 = 0\n  let vowelsIndex177 = 0\n  let vowelsIndex178 = 0\n  let vowelsIndex179 = 0\n  let vowelsIndex180 = 0\n  let vowelsIndex181 = 0\n  let vowelsIndex182 = 0\n  let vowelsIndex183 = 0\n  let vowelsIndex184 = 0\n  let vowelsIndex185 = 0\n  let vowelsIndex186 = 0\n  let vowelsIndex187 = 0\n  let vowelsIndex188 = 0\n  let vowelsIndex189 = 0\n  let vowelsIndex190 = 0\n  let vowelsIndex191 = 0\n  let vowelsIndex192 = 0\n  let vowelsIndex193 = 0\n  let vowelsIndex194 = 0\n  let vowelsIndex195 = 0\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true on-key if all numbers phone number in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true on-key if all numbers phone number in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> isPhoneNumber([\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n ...   { number: '+91123456789', type: 'home' },\n ...   { number: '+91123456789', type: 'work' },\n ...   { number: '+91123456789', type:'mobile' },\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Add two numbers issue x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(2, 3)\n  5\n  >>> subtract(5, 7)\n  12\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(2, 3)\n  5\n  >>> multiply(5, 7)\n  12\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(2, 3)\n  5\n  >>> divide(5, 7)\n  12\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(2, 3)\n  5\n  >>> modulo(5, 7)\n  12\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  5\n  >>> pow(5, 7)\n  12\n  */\nconst log = (x) => {\n  return Math.log(x);\n};\n\n/*\n  >>> log(2)\n  Infinity\n  >>> log(5)\n  2.302585092994046\n  >>> log(10)\n  1.4426950408889634\n  >>> log(20)\n  0.6931471805599453094\n  >>> log(30)\n  0.3141592653589793\n  >>> log(40)\n  0.0\n  >>> log(50)\n  Infinity\n  >>> log(100)\n  1.7976931348623157e+308\n  >>> log(200)\n  1.4426950408889634e+308\n  >>> log(300)\n  1.7976931348623157e+308\n  >>> log(400)\n  1.4426950408889634e+308\n  >>> log(500)\n  1.7976931348623157e+308\n  >>> log(600)\n  1.4426950408889634e+308\n  >>> log(700)\n  1.7976931348623157e+308\n  >>> log(800)\n  1.4426950408889634e+308\n  >>> log(900)\n  1.7976931348623157e+308\n  >>> log(1000)\n  1.4426950408889634e+308\n  >>> log(1100)\n  1.7976931348623157e+308\n  >>> log(1200)\n  1.4426950408889634e+308\n  >>> log(1300)\n  1.7976931348623157e+308\n  >>> log(1400)\n  1.4426950408889634e+308\n  >>> log(1500)\n  1.7976931348623157e+308\n  >>> log(1600)\n  1.4426950408889634e+308\n  >>> log(1700)\n  1.7976931348623157e+308\n  >>> log(1800)\n  1.4426950408889634e+308\n  >>> log(1900)\n  1.7976931348623157e+308\n  >>> log(2000)\n  1.4426950408889634e+308\n  >>> log(2100)\n  1.7976931348623157e+308\n  >>> log(2200)\n  1.4426950408889634e+308\n  >>> log(2300)\n  1.7976931348623157e+308\n  >>> log(2400)\n  1.4426950408889634e+308\n  >>> log(2500)\n  1.7976931348623157e+308\n  >>> log(2600)\n  1.4426950408889634e+308\n  >>> log(2700)\n  1.7976931348623157e+308\n  >>> log(2800)\n  1.4426950408889634e+308\n  >>> log(2900)\n  1.7976931348623157e+308\n  >>> log(3000)\n  1.4426950408889634e+308\n  >>> log(3100)\n  1.7976931348623157e+308\n  >>> log(3200)\n  1.4426950408889634e+308\n  >>> log(3300)\n  1.7976931348623157e+308\n  >>> log(3400)\n  1.4426950408889634e+308\n  >>> log(3500)\n  1.7976931348623157e+308\n  >>> log(3600)\n  1.4426950408889634e+308\n  >>> log(3700)\n  1.7976931348623157e+308\n  >>> log(3800)\n  1.4426950408889634e+308\n  >>> log(3900)\n  1.7976931348623157e+308\n  >>> log(4000)\n  1.4426950408889634e+308\n  >>> log(4100)\n  1.7976931348623157e+308\n  >>> log(4200)\n  1.4426950408889634e+308\n  >>> log(4300)\n  1.7976931348623157e+308\n  >>> log(4400)\n  1.4426950408889634e+308\n  >>> log(4500)\n  1.7976931348623157e+308\n  >>> log(4600)\n  1.4426950408889634e+308\n  >>> log(4700)\n  1.7976931348623157e+308\n  >>> log(4800)\n  1.4426950408889634e+308\n  >>> log(4900)\n  1.7976931348623157e+308\n  >>> log(5000)\n  1.4426950408889634e+308\n  >>> log(5100)\n  1.7976931348623157e+308\n  >>> log(5200)\n  1.4426950408889634e+308\n  >>> log(5300)\n  1.7976931348623157e+308\n  >>> log(5400)\n  1.4426950408889634e+308\n  >>> log(5500)\n  1.7976931348623157e+308\n  >>> log(5600)\n  1.4426950408889634e+308\n  >>> log(5700)\n  1.7976931348623157e+308\n  >>> log(5800)\n  1.4426950408889634e+308\n  >>> log(5900)\n  1.7976931348623157e+308\n  >>> log(6000)\n  1.4426950408889634e+308\n  >>> log(6100)\n  1.7976931348623157e+308\n  >>> log(6200)\n  1.4426950408889634e+308\n  >>> log(6300)\n  1.7976931348623157e+308\n  >>> log(64", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check match if two words discussion have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Check match if two words discussion have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two strings are equal.\n * >>> sameStrings('abcd', 'abcd')\n * true\n * >>> sameStrings('abcd', 'abcdabcd')\n * false\n * >>> sameStrings('abcd', 'abcdabcdabcd')\n * false\n */\nconst sameStrings = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two numbers are equal.\n * >>> sameNumbers(1, 2)\n * true\n * >>> sameNumbers(1, 2)\n * false\n * >>> sameNumbers(1, 2)\n * false\n */\nconst sameNumbers = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0!== s1) return false;\n  return true;\n};\n\n/**\n * Check if two arrays are equal.\n * >>> sameArrays([1, 2, 3], [1, 2, 3])\n * true\n * >>> sameArrays([1, 2, 3], [1, 2, 3])\n * false\n * >>> sameArrays([1, 2, 3], [1, 2, 3])\n * false\n */\nconst sameArrays = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two objects are equal.\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * true\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n */\nconst sameObjects = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two arrays are equal.\n * >>> sameArrays([1, 2], [1, 2])\n * true\n * >>> sameArrays([1, 2], [1, 2])\n * false\n * >>> sameArrays([1, 2], [1, 2])\n * false\n */\nconst sameArrays = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two objects are equal.\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * true\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n */\nconst sameObjects = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two arrays are equal.\n * >>> sameArrays([1, 2], [1, 2])\n * true\n * >>> sameArrays([1, 2], [1, 2])\n * false\n * >>> sameArrays([1, 2], [1, 2])\n * false\n */\nconst sameArrays = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two objects are equal.\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * true\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n */\nconst sameObjects = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two arrays are equal.\n * >>> sameArrays([1, 2], [1, 2])\n * true\n * >>> sameArrays([1, 2], [1, 2])\n * false\n * >>> sameArrays([1, 2], [1, 2])\n * false\n */\nconst sameArrays = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two objects are equal.\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * true\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n */\nconst sameObjects = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two arrays are equal.\n * >>> sameArrays([1, 2], [1, 2])\n * true\n * >>> sameArrays([1, 2], [1, 2])\n * false\n * >>> sameArrays([1, 2], [1, 2])\n * false\n */\nconst sameArrays = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0 === null || s1 === null) return false;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/**\n * Check if two objects are equal.\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * true\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n * >>> sameObjects({ a: 1, b: 2 }, { a: 1, b: 2 })\n * false\n */\nconst sameObjects = (s0, s1) => {\n  if (s0 === s", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fibonacci number issue.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  21\n  >>> fib(3)\n  34\n  >>> fib(2)\n  55\n  >>> fib(1)\n  1\n  >>> fib(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(5)\n  34\n  >>> fibonacci(4)\n  21\n  >>> fibonacci(3)\n  34\n  >>> fibonacci(2)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  0\n*/\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  if (n < 3) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string bowed stringed instrument of \" < \" and \" > \". \n   return false assumed if every opening bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string bowed stringed instrument of \" < \" and \" > \". \n   return false assumed if every opening bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = new RegExp(`^${brackets}$`);\n  return bracketingRegex.test(instr);\n};\n\n/**\n * Returns true if the instrument is valid for use as a function call.\n * \n * Valid function calls are of the form:\n * \n * function name(arg1, arg2,..., argN)\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., argN) {\n *   // do something\n *   return something;\n * }\n * \n * where arg1, arg2,..., argN are any number of arguments.\n * \n * Valid function calls are also valid function calls of the form:\n * \n * function name(arg1, arg2,..., ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true on-key is list elements chemical element are monotonically increasing or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true on-key is list elements chemical element are monotonically increasing or decreasing decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return true;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing increase.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonicInc = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return false;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing decrease.\n  >>> monotonicInc([4, 1, 0, -10])\n  true\n  >>> monotonicInc([4, 1, 0, -10])\n  false\n  >>> monotonicInc([4, 1, 0, -10])\n  true\n  */\nconst monotonicDec = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return false;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing increase.\n  >>> monotonicDec([4, 1, 0, -10])\n  true\n  >>> monotonicDec([4, 1, 0, -10])\n  false\n  >>> monotonicDec([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncDec = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return true;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing increase.\n  >>> monotonicIncDec([4, 1, 0, -10])\n  true\n  >>> monotonicIncDec([4, 1, 0, -10])\n  false\n  >>> monotonicIncDec([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncDecInc = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return true;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing increase.\n  >>> monotonicIncDecInc([4, 1, 0, -10])\n  true\n  >>> monotonicIncDecInc([4, 1, 0, -10])\n  false\n  >>> monotonicIncDecInc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncDecDecDec = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return true;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing increase.\n  >>> monotonicIncDecDecInc([4, 1, 0, -10])\n  true\n  >>> monotonicIncDecDecInc([4, 1, 0, -10])\n  false\n  >>> monotonicIncDecDecInc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncDecDecDecInc = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return true;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing increase.\n  >>> monotonicIncDecDecDecInc([4, 1, 0, -10])\n  true\n  >>> monotonicIncDecDecInc([4, 1, 0, -10])\n  false\n  >>> monotonicIncDecDecInc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncDecDecDecDecInc = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return true;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing increase.\n  >>> monotonicIncDecDecDecDecInc([4, 1, 0, -10])\n  true\n  >>> monotonicIncDecDecDecInc([4, 1, 0, -10])\n  false\n  >>> monotonicIncDecDecDecInc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncDecDecDecDecDecInc = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return true;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing increase.\n  >>> monotonicIncDecDecDecDecInc([4, 1, 0, -10])\n  true\n  >>> monotonicIncDecDecDecInc([4, 1, 0, -10])\n  false\n  >>> monotonicIncDecDecDecInc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncDecDecDecDecDecInc = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n    } else {\n      return true;\n    }\n  }\n};\n\n/*Return true on-key is list elements chemical element are monotonically increasing or decreasing increase.\n  >>> monotonicIncDecDecDecDecInc([4, 1, 0, -10])\n  true\n  >>> monotonicIncDecDecDecInc([4, 1, 0, -10])\n  false\n  >>> monotonicIncDecDecDecInc([4, 1, 0, -10])\n  true\n  */\nconst monotonicIncDecDecDecDecDecInc = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else if (l[j] > l[i]) {\n      j--;\n      i++;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted classify unique singular common elements for two lists list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return sorted classify unique singular common elements for two lists list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  const len = Math.min(l1.length, l2.length);\n  for (let i = 0; i < len; i++) {\n    const el1 = l1[i];\n    const el2 = l2[i];\n    if (set.has(el1) && set.has(el2)) {\n      result.push(el1);\n      result.push(el2);\n    } else {\n      set.add(el1);\n      set.add(el2);\n    }\n  }\n  return result;\n};\n\n/**\n * Return sorted classify unique plural common elements for two lists list.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n * If two lists contains duplicate elements, return sorted unique plural common elements.\n * If one list contains duplicate elements, return sorted unique singular common elements.\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime choice factor divisor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime choice factor divisor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  let i = 2;\n  while (true) {\n    if (n % i === 0) {\n      n = n / i;\n      factor++;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 or 31.\n  >>> isDivisibleByPrime(13195)\n  true\n  >>> isDivisibleByPrime(2048)\n  false\n  >>> isDivisibleByPrime(22)\n  false\n  >>> isDivisibleByPrime(23)\n  false\n  >>> isDivisibleByPrime(24)\n  false\n  >>> isDivisibleByPrime(25)\n  false\n  >>> isDivisibleByPrime(26)\n  false\n  >>> isDivisibleByPrime(27)\n  false\n  >>> isDivisibleByPrime(28)\n  false\n  >>> isDivisibleByPrime(29)\n  false\n  >>> isDivisibleByPrime(30)\n  false\n  >>> isDivisibleByPrime(31)\n  false\n  >>> isDivisibleByPrime(32)\n  false\n  >>> isDivisibleByPrime(33)\n  false\n  >>> isDivisibleByPrime(34)\n  false\n  >>> isDivisibleByPrime(35)\n  false\n  >>> isDivisibleByPrime(36)\n  false\n  >>> isDivisibleByPrime(37)\n  false\n  >>> isDivisibleByPrime(38)\n  false\n  >>> isDivisibleByPrime(39)\n  false\n  >>> isDivisibleByPrime(40)\n  false\n  >>> isDivisibleByPrime(41)\n  false\n  >>> isDivisibleByPrime(42)\n  false\n  >>> isDivisibleByPrime(43)\n  false\n  >>> isDivisibleByPrime(44)\n  false\n  >>> isDivisibleByPrime(45)\n  false\n  >>> isDivisibleByPrime(46)\n  false\n  >>> isDivisibleByPrime(47)\n  false\n  >>> isDivisibleByPrime(48)\n  false\n  >>> isDivisibleByPrime(49)\n  false\n  >>> isDivisibleByPrime(50)\n  false\n  >>> isDivisibleByPrime(51)\n  false\n  >>> isDivisibleByPrime(52)\n  false\n  >>> isDivisibleByPrime(53)\n  false\n  >>> isDivisibleByPrime(54)\n  false\n  >>> isDivisibleByPrime(55)\n  false\n  >>> isDivisibleByPrime(56)\n  false\n  >>> isDivisibleByPrime(57)\n  false\n  >>> isDivisibleByPrime(58)\n  false\n  >>> isDivisibleByPrime(59)\n  false\n  >>> isDivisibleByPrime(60)\n  false\n  >>> isDivisibleByPrime(61)\n  false\n  >>> isDivisibleByPrime(62)\n  false\n  >>> isDivisibleByPrime(63)\n  false\n  >>> isDivisibleByPrime(64)\n  false\n  >>> isDivisibleByPrime(65)\n  false\n  >>> isDivisibleByPrime(66)\n  false\n  >>> isDivisibleByPrime(67)\n  false\n  >>> isDivisibleByPrime(68)\n  false\n  >>> isDivisibleByPrime(69)\n  false\n  >>> isDivisibleByPrime(70)\n  false\n  >>> isDivisibleByPrime(71)\n  false\n  >>> isDivisibleByPrime(72)\n  false\n  >>> isDivisibleByPrime(73)\n  false\n  >>> isDivisibleByPrime(74)\n  false\n  >>> isDivisibleByPrime(75)\n  false\n  >>> isDivisibleByPrime(76)\n  false\n  >>> isDivisibleByPrime(77)\n  false\n  >>> isDivisibleByPrime(78)\n  false\n  >>> isDivisibleByPrime(79)\n  false\n  >>> isDivisibleByPrime(80)\n  false\n  >>> isDivisibleByPrime(81)\n  false\n  >>> isDivisibleByPrime(82)\n  false\n  >>> isDivisibleByPrime(83)\n  false\n  >>> isDivisibleByPrime(84)\n  false\n  >>> isDivisibleByPrime(85)\n  false\n  >>> isDivisibleByPrime(86)\n  false\n  >>> isDivisibleByPrime(87)\n  false\n  >>> isDivisibleByPrime(88)\n  false\n  >>> isDivisibleByPrime(89)\n  false\n  >>> isDivisibleByPrime(90)\n  false\n  >>> isDivisibleByPrime(91)\n  false\n  >>> isDivisibleByPrime(92)\n  false\n  >>> isDivisibleByPrime(93)\n  false\n  >>> isDivisibleByPrime(94)\n  false\n  >>> isDivisibleByPrime(95)\n  false\n  >>> isDivisibleByPrime(96)\n  false\n  >>> isDivisibleByPrime(97)\n  false\n  >>> isDivisibleByPrime(98)\n  false\n  >>> isDivisibleByPrime(99)\n  false\n  >>> isDivisibleByPrime(100)\n  false\n  >>> isDivisibleByPrime(101)\n  false\n  >>> isDivisibleByPrime(102)\n  false\n  >>> isDivisibleByPrime(103)\n  false\n  >>> isDivisibleByPrime(104)\n  false\n  >>> isDivisibleByPrime(105)\n  false\n  >>> isDivisibleByPrime(106)\n  false\n  >>> isDivisibleByPrime(107)\n  false\n  >>> isDivisibleByPrime(108)\n  false\n  >>> isDivisibleByPrime(109)\n  false\n  >>> isDivisibleByPrime(110)\n  false\n  >>> isDivisibleByPrime(111)\n  false\n  >>> isDivisibleByPrime(112)\n  false\n  >>> isDivisibleByPrime(113)\n  false\n  >>> isDivisibleByPrime(114)\n  false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input input signal to this function routine is a string represented defend multiple groups for nested parentheses parenthesis separated by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum maximal two levels degree of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input input signal to this function routine is a string represented defend multiple groups for nested parentheses parenthesis separated by spaces quad. \n   For each of the group, output the deepest level grade of nesting of parentheses. \n   E.g. (() ()) has maximum maximal two levels degree of nesting while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(\" \");\n  const max_level = 0;\n  const max_levels = [];\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;\n  let max_level = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function affair that sums summarize numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function affair that sums summarize numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that takes an array and returns the sum of all elements in the array.\n * It works like the built-in reduce function in JavaScript, except that it only works on arrays, not strings.\n * It also works with negative numbers, like sum(-[1,2,3])\n * It works with strings and numbers, like sum([1,2,3])\n * It works with objects and arrays, like sum([{a:1},{a:2}])\n * It works with functions like sum(() => [1,2,3])\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum) => sum + 2)\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a)\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b)\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11, l:12})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11, l:12, m:13})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11, l:12, m:13, n:14})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11, l:12, m:13, n:14, o:15})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11, l:12, m:13, n:14, o:15, p:16})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11, l:12, m:13, n:14, o:15, p:16, q:17})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11, l:12, m:13, n:14, o:15, p:16, q:17, r:18})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11, l:12, m:13, n:14, o:15, p:16, q:17, r:18, s:19})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, f:6, g:7, h:8, i:9, j:10, k:11, l:12, m:13, n:14, o:15, p:16, q:17, r:18, s:19, t:20})\n * It works with objects and arrays, like sum([{a:1},{a:2}], (sum, item) => sum + item.a, (sum, item) => sum + item.b, {a:1, b:2, c:3, d:4, e:5, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string bowed stringed instrument of \" (\" and \") \". \n   return true truthful if every opening bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string bowed stringed instrument of \" (\" and \") \". \n   return true truthful if every opening bracket has a corresponding comparable closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForString = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpening = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpening = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosingWithClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosingWithClosingWithClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosingWithClosingWithClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosingWithClosingWithClosingWithClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosingWithClosingWithClosingWithClosingWithClosing = (brackets) => {\n  return brackets.every(opening => brackets.every(closing => opening === closing));\n};\n\n// returns true if every opening bracket has a corresponding comparable closing bracket.\nconst correctBracketingForStringWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithOpeningAndClosingWithClosingWithClosingWithClosingWithClosingWithClosingWithClosingWithClosing = (brackets) => {\n  return bracket", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent typify coefficients coefficient of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same form shape.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs represent typify coefficients coefficient of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same form shape.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return d\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  first derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  second derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients2 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  third derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients3 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  fourth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients4 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  fifth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients5 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  sixth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients6 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  seventh derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients7 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  eighth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients8 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  ninth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients9 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  tenth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients10 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  eleventh derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients11 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  twelfth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients12 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  thirteenth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients13 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  fourteenth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients14 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  fifteenth derivative. \n  >>> coefficients([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> coefficients([1, 2, 3])\n  [2, 6]\n  */\nconst coefficients15 = (xs) => {\n  const n = xs.length\n  const c = new Array(n)\n  for (let i = 0; i < n; i++) {\n    c[i] = xs[i] - xs[i + 1] * xs[i]\n  }\n  return c\n}\n\n/* \n  Given a polynomial of degree n, return the coefficients of its \n  sixteenth derivative. \n  >>> coefficients([3, 1, 2, 4, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number issue sequence succession is a sequence similar exchangeable to the Fibbonacci sequnece that's defined as follows surveil: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a function affair to efficiently compute the n-th element component of the fibfib number sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number issue sequence succession is a sequence similar exchangeable to the Fibbonacci sequnece that's defined as follows surveil: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please write a function affair to efficiently compute the n-th element component of the fibfib number sequence succession.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfibSum = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum(1)\n  0\n  >>> fibfibSum(5)\n  4\n  >>> fibfibSum(8)\n  24\n  */\nconst fibfibSum2 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum2(1)\n  0\n  >>> fibfibSum2(5)\n  4\n  >>> fibfibSum2(8)\n  24\n  */\nconst fibfibSum3 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum3(1)\n  0\n  >>> fibfibSum3(5)\n  4\n  >>> fibfibSum3(8)\n  24\n  */\nconst fibfibSum4 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum4(1)\n  0\n  >>> fibfibSum4(5)\n  4\n  >>> fibfibSum4(8)\n  24\n  */\nconst fibfibSum5 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum5(1)\n  0\n  >>> fibfibSum5(5)\n  4\n  >>> fibfibSum5(8)\n  24\n  */\nconst fibfibSum6 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum6(1)\n  0\n  >>> fibfibSum6(5)\n  4\n  >>> fibfibSum6(8)\n  24\n  */\nconst fibfibSum7 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum7(1)\n  0\n  >>> fibfibSum7(5)\n  4\n  >>> fibfibSum7(8)\n  24\n  */\nconst fibfibSum8 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum8(1)\n  0\n  >>> fibfibSum8(5)\n  4\n  >>> fibfibSum8(8)\n  24\n  */\nconst fibfibSum9 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum9(1)\n  0\n  >>> fibfibSum9(5)\n  4\n  >>> fibfibSum9(8)\n  24\n  */\nconst fibfibSum10 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum10(1)\n  0\n  >>> fibfibSum10(5)\n  4\n  >>> fibfibSum10(8)\n  24\n  */\nconst fibfibSum11 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum11(1)\n  0\n  >>> fibfibSum11(5)\n  4\n  >>> fibfibSum11(8)\n  24\n  */\nconst fibfibSum12 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum12(1)\n  0\n  >>> fibfibSum12(5)\n  4\n  >>> fibfibSum12(8)\n  24\n  */\nconst fibfibSum13 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum13(1)\n  0\n  >>> fibfibSum13(5)\n  4\n  >>> fibfibSum13(8)\n  24\n  */\nconst fibfibSum14 = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the first n terms of the Fibonacci sequence (fibfib(n)).\n  >>> fibfibSum14(1)\n  0\n  >>> fibfibSum14(5)\n  4\n  >>> fibfibSum14", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i].match(/[aeiou]/)) {\n      vowels++;\n    }\n  }\n  \n  if(vowels > 0) {\n    vowelsCount++;\n  }\n  \n  return vowelsCount;\n};\n\n/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i].match(/[aeiou]/)) {\n      vowels++;\n    }\n  }\n  \n  if(vowels > 0) {\n    vowelsCount++;\n  }\n  \n  return vowelsCount;\n};\n\n/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i].match(/[aeiou]/)) {\n      vowels++;\n    }\n  }\n  \n  if(vowels > 0) {\n    vowelsCount++;\n  }\n  \n  return vowelsCount;\n};\n\n/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i].match(/[aeiou]/)) {\n      vowels++;\n    }\n  }\n  \n  if(vowels > 0) {\n    vowelsCount++;\n  }\n  \n  return vowelsCount;\n};\n\n/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i].match(/[aeiou]/)) {\n      vowels++;\n    }\n  }\n  \n  if(vowels > 0) {\n    vowelsCount++;\n  }\n  \n  return vowelsCount;\n};\n\n/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i].match(/[aeiou]/)) {\n      vowels++;\n    }\n  }\n  \n  if(vowels > 0) {\n    vowelsCount++;\n  }\n  \n  return vowelsCount;\n};\n\n/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i].match(/[aeiou]/)) {\n      vowels++;\n    }\n  }\n  \n  if(vowels > 0) {\n    vowelsCount++;\n  }\n  \n  return vowelsCount;\n};\n\n/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input signal and returns the number issue of vowels in the string. \n   Vowels vowel in this case are' a',' e vitamin e',' i',' o',' u uracil'. Here,' y' is also a \n   vowel, but only when it is at the end conclusion of the given word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  let vowelsCount = 0;\n  \n  for(let i = 0; i < s.length; i++) {\n    if(s[i].match(/[aeiou]/)) {\n      vowels++;\n    }\n  }\n  \n  if(vowels > 0) {\n    vowelsCount++;\n  }\n  \n  return vowelsCount;\n};\n\n/*Write a function affair vowelsCount which takes lead a string representing defend \n   a word as input signal and returns the number issue of vowels in the string. \n   Vowels ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits digit of the integer x, shift the digits finger right by shift\n   and return the result consequence as a string. \n   If shift > number issue of digits, return digits digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits digit of the integer x, shift the digits finger right by shift\n   and return the result consequence as a string. \n   If shift > number issue of digits, return digits digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString(2).split('');\n  let reverseDigits = digits.reverse();\n  let result = reverseDigits[(digits.length - shift) % digits.length];\n  return result;\n};\n\n/*\n  >>> circularShift(2, 1)\n  \"11\"\n  >>> circularShift(2, 2)\n  \"10\"\n  >>> circularShift(2, 3)\n  \"01\"\n  >>> circularShift(2, 4)\n  \"001\"\n  >>> circularShift(2, 5)\n  \"000\"\n  >>> circularShift(2, 6)\n  \"0000\"\n  >>> circularShift(2, 7)\n  \"00000\"\n  >>> circularShift(2, 8)\n  \"000000\"\n  >>> circularShift(2, 9)\n  \"0000000\"\n  >>> circularShift(2, 10)\n  \"00000000\"\n  >>> circularShift(2, 11)\n  \"000000000\"\n  >>> circularShift(2, 12)\n  \"0000000000\"\n  >>> circularShift(2, 13)\n  \"00000000000\"\n  >>> circularShift(2, 14)\n  \"000000000000\"\n  >>> circularShift(2, 15)\n  \"0000000000000\"\n  >>> circularShift(2, 16)\n  \"00000000000000\"\n  >>> circularShift(2, 17)\n  \"000000000000000\"\n  >>> circularShift(2, 18)\n  \"0000000000000000\"\n  >>> circularShift(2, 19)\n  \"00000000000000000\"\n  >>> circularShift(2, 20)\n  \"000000000000000000\"\n  >>> circularShift(2, 21)\n  \"0000000000000000000\"\n  >>> circularShift(2, 22)\n  \"00000000000000000000\"\n  >>> circularShift(2, 23)\n  \"000000000000000000000\"\n  >>> circularShift(2, 24)\n  \"0000000000000000000000\"\n  >>> circularShift(2, 25)\n  \"00000000000000000000000\"\n  >>> circularShift(2, 26)\n  \"000000000000000000000000\"\n  >>> circularShift(2, 27)\n  \"0000000000000000000000000\"\n  >>> circularShift(2, 28)\n  \"00000000000000000000000000\"\n  >>> circularShift(2, 29)\n  \"000000000000000000000000000\"\n  >>> circularShift(2, 30)\n  \"0000000000000000000000000000\"\n  >>> circularShift(2, 31)\n  \"00000000000000000000000000000\"\n  >>> circularShift(2, 32)\n  \"000000000000000000000000000000\"\n  >>> circularShift(2, 33)\n  \"0000000000000000000000000000000\"\n  >>> circularShift(2, 34)\n  \"00000000000000000000000000000000\"\n  >>> circularShift(2, 35)\n  \"000000000000000000000000000000000\"\n  >>> circularShift(2, 36)\n  \"0000000000000000000000000000000000\"\n  >>> circularShift(2, 37)\n  \"00000000000000000000000000000000000\"\n  >>> circularShift(2, 38)\n  \"000000000000000000000000000000000000\"\n  >>> circularShift(2, 39)\n  \"0000000000000000000000000000000000000\"\n  >>> circularShift(2, 40)\n  \"00000000000000000000000000000000000000\"\n  >>> circularShift(2, 41)\n  \"000000000000000000000000000000000000000\"\n  >>> circularShift(2, 42)\n  \"0000000000000000000000000000000000000000\"\n  >>> circularShift(2, 43)\n  \"00000000000000000000000000000000000000000\"\n  >>> circularShift(2, 44)\n  \"000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 45)\n  \"0000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 46)\n  \"00000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 47)\n  \"000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 48)\n  \"0000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 49)\n  \"00000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 50)\n  \"000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 51)\n  \"0000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 52)\n  \"00000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 53)\n  \"000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 54)\n  \"0000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 55)\n  \"00000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 56)\n  \"000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 57)\n  \"0000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 58)\n  \"00000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 59)\n  \"0000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 60)\n  \"00000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 61)\n  \"000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 62)\n  \"0000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 63)\n  \"00000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 64)\n  \"000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 65)\n  \"0000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 66)\n  \"00000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 67)\n  \"000000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 68)\n  \"00000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 69)\n  \"000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 70)\n  \"0000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 71)\n  \"00000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 72)\n  \"000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 73)\n  \"0000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 74)\n  \"00000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 75)\n  \"0000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 76)\n  \"00000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 77)\n  \"000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 78)\n  \"0000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 79)\n  \"00000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 80)\n  \"000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 81)\n  \"0000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 82)\n  \"00000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 83)\n  \"000000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 84)\n  \"00000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 85)\n  \"000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 86)\n  \"0000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 87)\n  \"00000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 88)\n  \"000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 89)\n  \"0000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 90)\n  \"00000000000000000000000000000000000000000000000000000000\"\n  >>> circularShift(2, 91)\n  \"000000000000000000000000", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task necessitate \n   Write compose a function that takes remove a string as input input signal and returns the sum kernel of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task necessitate \n   Write compose a function that takes remove a string as input input signal and returns the sum kernel of the upper characters only' \n   ASCII american standard code for information interchange codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sumDigit = 0;\n  let digitSum = 0;\n  let digitSum2 = 0;\n  let digitSum3 = 0;\n  let digitSum4 = 0;\n  let digitSum5 = 0;\n  let digitSum6 = 0;\n  let digitSum7 = 0;\n  let digitSum8 = 0;\n  let digitSum9 = 0;\n  let digitSum10 = 0;\n  let digitSum11 = 0;\n  let digitSum12 = 0;\n  let digitSum13 = 0;\n  let digitSum14 = 0;\n  let digitSum15 = 0;\n  let digitSum16 = 0;\n  let digitSum17 = 0;\n  let digitSum18 = 0;\n  let digitSum19 = 0;\n  let digitSum20 = 0;\n  let digitSum21 = 0;\n  let digitSum22 = 0;\n  let digitSum23 = 0;\n  let digitSum24 = 0;\n  let digitSum25 = 0;\n  let digitSum26 = 0;\n  let digitSum27 = 0;\n  let digitSum28 = 0;\n  let digitSum29 = 0;\n  let digitSum30 = 0;\n  let digitSum31 = 0;\n  let digitSum32 = 0;\n  let digitSum33 = 0;\n  let digitSum34 = 0;\n  let digitSum35 = 0;\n  let digitSum36 = 0;\n  let digitSum37 = 0;\n  let digitSum38 = 0;\n  let digitSum39 = 0;\n  let digitSum40 = 0;\n  let digitSum41 = 0;\n  let digitSum42 = 0;\n  let digitSum43 = 0;\n  let digitSum44 = 0;\n  let digitSum45 = 0;\n  let digitSum46 = 0;\n  let digitSum47 = 0;\n  let digitSum48 = 0;\n  let digitSum49 = 0;\n  let digitSum50 = 0;\n  let digitSum51 = 0;\n  let digitSum52 = 0;\n  let digitSum53 = 0;\n  let digitSum54 = 0;\n  let digitSum55 = 0;\n  let digitSum56 = 0;\n  let digitSum57 = 0;\n  let digitSum58 = 0;\n  let digitSum59 = 0;\n  let digitSum60 = 0;\n  let digitSum61 = 0;\n  let digitSum62 = 0;\n  let digitSum63 = 0;\n  let digitSum64 = 0;\n  let digitSum65 = 0;\n  let digitSum66 = 0;\n  let digitSum67 = 0;\n  let digitSum68 = 0;\n  let digitSum69 = 0;\n  let digitSum70 = 0;\n  let digitSum71 = 0;\n  let digitSum72 = 0;\n  let digitSum73 = 0;\n  let digitSum74 = 0;\n  let digitSum75 = 0;\n  let digitSum76 = 0;\n  let digitSum77 = 0;\n  let digitSum78 = 0;\n  let digitSum79 = 0;\n  let digitSum80 = 0;\n  let digitSum81 = 0;\n  let digitSum82 = 0;\n  let digitSum83 = 0;\n  let digitSum84 = 0;\n  let digitSum85 = 0;\n  let digitSum86 = 0;\n  let digitSum87 = 0;\n  let digitSum88 = 0;\n  let digitSum89 = 0;\n  let digitSum90 = 0;\n  let digitSum91 = 0;\n  let digitSum92 = 0;\n  let digitSum93 = 0;\n  let digitSum94 = 0;\n  let digitSum95 = 0;\n  let digitSum96 = 0;\n  let digitSum97 = 0;\n  let digitSum98 = 0;\n  let digitSum99 = 0;\n  let digitSum100 = 0;\n  let digitSum101 = 0;\n  let digitSum102 = 0;\n  let digitSum103 = 0;\n  let digitSum104 = 0;\n  let digitSum105 = 0;\n  let digitSum106 = 0;\n  let digitSum107 = 0;\n  let digitSum108 = 0;\n  let digitSum109 = 0;\n  let digitSum110 = 0;\n  let digitSum111 = 0;\n  let digitSum112 = 0;\n  let digitSum113 = 0;\n  let digitSum114 = 0;\n  let digitSum115 = 0;\n  let digitSum116 = 0;\n  let digitSum117 = 0;\n  let digitSum118 = 0;\n  let digitSum119 = 0;\n  let digitSum120 = 0;\n  let digitSum121 = 0;\n  let digitSum122 = 0;\n  let digitSum123 = 0;\n  let digitSum124 = 0;\n  let digitSum125 = 0;\n  let digitSum126 = 0;\n  let digitSum127 = 0;\n  let digitSum128 = 0;\n  let digitSum129 = 0;\n  let digitSum130 = 0;\n  let digitSum131 = 0;\n  let digitSum132 = 0;\n  let digitSum133 = 0;\n  let digitSum134 = 0;\n  let digitSum135 = 0;\n  let digitSum136 = 0;\n  let digitSum137 = 0;\n  let digitSum138 = 0;\n  let digitSum139 = 0;\n  let digitSum140 = 0;\n  let digitSum141 = 0;\n  let digitSum142 = 0;\n  let digitSum143 = 0;\n  let digitSum144 = 0;\n  let digitSum145 = 0;\n  let digitSum146 = 0;\n  let digitSum147 = 0;\n  let digitSum148 = 0;\n  let digitSum149 = 0;\n  let digitSum150 = 0;\n  let digitSum151 = 0;\n  let digitSum152 = 0;\n  let digitSum153 = 0;\n  let digitSum154 = 0;\n  let digitSum155 = 0;\n  let digitSum156 = 0;\n  let digitSum157 = 0;\n  let digitSum158 = 0;\n  let digitSum159 = 0;\n  let digitSum160 = 0;\n  let digitSum161 = 0;\n  let digitSum162 = 0;\n  let digitSum163 = 0;\n  let digitSum164 = 0;\n  let digitSum165 = 0;\n  let digitSum166 = 0;\n  let digitSum167 = 0;\n  let digitSum168 = 0;\n  let digitSum169 = 0;\n  let digitSum170 = 0;\n  let digitSum171 = 0;\n  let digitSum172 = 0;\n  let digitSum173 = 0;\n  let digitSum174 = 0;\n  let digitSum175 = 0;\n  let digitSum176 = 0;\n  let digitSum177 = 0;\n  let digitSum178 = 0;\n  let digitSum179 = 0;\n  let digitSum180 = 0;\n  let digitSum181 = 0;\n  let digitSum182 = 0;\n  let digitSum183 = 0;\n  let digitSum184 = 0;\n  let digitSum185 = 0;\n  let digitSum186 = 0;\n  let digitSum187 = 0;\n  let digitSum188 = 0;\n  let digitSum189 = 0;\n  let digitSum190 = 0;\n  let digitSum191 = 0;\n  let digitSum192 = 0;\n  let digitSum193 = 0;\n  let digitSum194 = 0;\n  let digitSum195 = 0;\n  let digitSum196 = 0;\n  let digitSum197 = 0;\n  let digitSum198 = 0;\n  let digitSum199 = 0;\n  let digitSum200 = 0;\n  let digitSum201 = 0;\n  let digitSum202 = 0;\n  let digitSum203 = 0;\n  let digitSum204 = 0;\n  let digitSum205 = 0;\n  let digitSum206 = 0;\n  let digitSum207 = 0;\n  let digitSum208 = 0;\n  let digitSum209 = 0;\n  let digitSum210 = 0;\n  let digitSum211 = 0;\n  let digitSum212 = 0;\n  let digitSum213 = 0;\n  let digitSum214 = 0;\n  let digitSum215 = 0;\n  let digitSum216 = 0;\n  let digitSum217 = 0;\n  let digitSum218 = 0;\n  let digitSum219 = 0;\n  let digitSum220 = 0;\n  let digitSum221 = 0;\n  let digitSum222 = 0;\n  let digitSum223 = 0;\n  let digitSum224 = 0;\n  let digitSum225 = 0;\n  let digitSum226 = 0;\n  let digitSum227 = 0;\n  let digitSum228 = 0;\n  let digitSum229 = 0;\n  let digitSum230 = 0;\n  let digitSum231 = 0;\n  let digitSum232 = 0;\n  let digitSum233 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task job, you will be given pass a string that represents defend a number of apples apple and oranges \n   that are distributed stagger in a basket of fruit this basket contains control \n   apples, oranges orange, and mango fruits fruit. Given the string chain that represents the total number of \n   the oranges and apples and an integer that represent the total number act of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples apple and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task job, you will be given pass a string that represents defend a number of apples apple and oranges \n   that are distributed stagger in a basket of fruit this basket contains control \n   apples, oranges orange, and mango fruits fruit. Given the string chain that represents the total number of \n   the oranges and apples and an integer that represent the total number act of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples apple and 6 oranges orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples apple and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n   let total = 0;\n   let count = 0;\n   let index = 0;\n   let apple = 0;\n   let orange = 0;\n   let mango = 0;\n   let fruit;\n   let fruitIndex;\n   let fruitCount;\n   let fruitCountIndex;\n   let fruitCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCountCountCount;\n   let fruitCountCountIndex;\n   let fruitCount", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given grant an array representing a branch outgrowth of a tree that has non - negative minus integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes with the same smallest modest even tied value are found return the node lymph node that has smallest index. \n\n   The plucked node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the given give array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Given grant an array representing a branch outgrowth of a tree that has non - negative minus integer nodes lymph node \n   your task is to pluck one of the nodes node and return it. \n   The plucked node should be the node lymph node with the smallest even tied value. \n   If multiple nodes with the same smallest modest even tied value are found return the node lymph node that has smallest index. \n\n   The plucked node should be returned in a list, [ smalest_value, its index ], \n   If there are no even values or the given give array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let minValue = Infinity;\n  let minIndex = 0;\n  let result = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n    }\n  }\n\n  return [minValue, minIndex];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.min(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.min(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.min(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.min(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.min(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.min(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerGreaterThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-less-than-or-equal-to-k\n/**\n * @param {number} k\n * @return {number}\n */\nvar findSmallestPositiveIntegerLessThanOrEqualToK = function(k) {\n  let arr = [...Array(k)].map(() => 0);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = Math.max(arr[i], i);\n  }\n  return arr[0];\n};\n\n// https://leetcode.com/problems/find-the-smallest-positive-integer-greater-than-or-equal-to-k\n/**\n * @param {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given grant a non - empty list of positive integers integer. Return revert the greatest capital integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number issue of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given grant a non - empty list of positive integers integer. Return revert the greatest capital integer that is greater than \n   zero, and has a frequency greater bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the number issue of times it appears look in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n    if (lst[i] === max) {\n      freq++;\n    }\n  }\n  return maxIndex === -1? -1 : maxIndex + freq;\n};\n\n/*\n  You are given a list of positive integers integer. Return true if and only if all integers in the list are positive.\n  Examples:\n      allPositive([4, 1, 2, 2, 3, 1])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive([5, 5, 4, 4, 4])\n      allPositive", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input input signal list of strings only for ones one that contain given hold substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input input signal list of strings only for ones one that contain given hold substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAll = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAll(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAll(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAll = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAll(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAll(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAllKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAllKeepAll = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAllKeepAll(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAllKeepAllKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAllKeepAllKeepAllKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAllKeepAllKeepAllKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAllKeepAllKeepAllKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAllKeepAllKeepAllKeepAllKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAllKeepAllKeepAllKeepAllKeepAllKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\nconst filterBySubstringKeepAllKeepAllKeepAllKeepAllKeepAllKeepAllKeepAllKeep = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input signal list of strings only for ones one that contain given keep substring\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringKeepAllKeepAllKeepAllKeepAllKeepAllKeep(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  */\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given grant list of integers, return list in strange foreign order orderliness. \n   Strange foreign sorting, is when you start originate with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant list of integers, return list in strange foreign order orderliness. \n   Strange foreign sorting, is when you start originate with the minimum value, \n   then maximum utmost of the remaining integers integer, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let result = [];\n  let min = lst[0];\n  let max = lst[0];\n  let len = lst.length;\n  \n  for (let i = 1; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  \n  result.push(min);\n  result.push(max);\n  \n  return result;\n};\n\n/*\n  Given a sorted array and a target value, return the index of the target value in the sorted array.\n  If the target value is not present, return -1.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the beginning of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in descending order, return the index of the target value from the end of the sorted array.\n  If the target value is present and the array is sorted in ascending order, return the index of the target value from the beginning of the sorted array.\n  If the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given grant the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let sum = 0;\n  let slope = a + b + c;\n  if (slope > 3) {\n    sum = a + b + c;\n  }\n  else if (slope > 2) {\n    sum = a + c;\n  }\n  else if (slope > 1) {\n    sum = a + b;\n  }\n  return Math.sqrt(sum);\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  let sum = 0;\n  let slope = a + b + c;\n  if (slope > 3) {\n    sum = a + b + c;\n  }\n  else if (slope > 2) {\n    sum = a + c;\n  }\n  else if (slope > 1) {\n    sum = a + b;\n  }\n  return Math.sqrt(sum);\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  let sum = 0;\n  let slope = a + b + c;\n  if (slope > 3) {\n    sum = a + b + c;\n  }\n  else if (slope > 2) {\n    sum = a + c;\n  }\n  else if (slope > 1) {\n    sum = a + b;\n  }\n  return Math.sqrt(sum);\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  let sum = 0;\n  let slope = a + b + c;\n  if (slope > 3) {\n    sum = a + b + c;\n  }\n  else if (slope > 2) {\n    sum = a + c;\n  }\n  else if (slope > 1) {\n    sum = a + b;\n  }\n  return Math.sqrt(sum);\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  let sum = 0;\n  let slope = a + b + c;\n  if (slope > 3) {\n    sum = a + b + c;\n  }\n  else if (slope > 2) {\n    sum = a + c;\n  }\n  else if (slope > 1) {\n    sum = a + b;\n  }\n  return Math.sqrt(sum);\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  let sum = 0;\n  let slope = a + b + c;\n  if (slope > 3) {\n    sum = a + b + c;\n  }\n  else if (slope > 2) {\n    sum = a + c;\n  }\n  else if (slope > 1) {\n    sum = a + b;\n  }\n  return Math.sqrt(sum);\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  let sum = 0;\n  let slope = a + b + c;\n  if (slope > 3) {\n    sum = a + b + c;\n  }\n  else if (slope > 2) {\n    sum = a + c;\n  }\n  else if (slope > 1) {\n    sum = a + b;\n  }\n  return Math.sqrt(sum);\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum when the sum of any two sides slope is greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  let sum = 0;\n  let slope = a + b + c;\n  if (slope > 3) {\n    sum = a + b + c;\n  }\n  else if (slope > 2) {\n    sum = a + c;\n  }\n  else if (slope > 1) {\n    sum = a + b;\n  }\n  return Math.sqrt(sum);\n};\n\n/*\n  Given the lengths of the three sides english of a triangle triangulum. Return retort the area of \n   the triangle rounded round off to 2 decimal points if the three sides side form a valid triangle triangulum. \n   Otherwise differently return -1 \n   Three sides make name a valid triangle triangulum ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write publish a function routine that returns true truthful if the object q will fly flee, and false otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements chemical element is less than or equal the maximum maximal possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write publish a function routine that returns true truthful if the object q will fly flee, and false otherwise differently. \n   The object q will fly flee if it's balanced (it is a palindromic list) and the sum of its elements chemical element is less than or equal the maximum maximal possible weight weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum === w) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or less. \n  If the sum is less than w, return false. \n  If the sum is greater than w, return true.\n  */\nconst sumOfNumbers = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum >= w) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or more. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersMore = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum < w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or less. \n  If the sum is less than w, return false. \n  If the sum is greater than w, return true.\n  */\nconst sumOfNumbersLessThan = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum > w) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or more. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersMoreThan = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum < w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or less. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersLessThanOrEqual = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum >= w) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or more. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersMoreThanOrEqual = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum > w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or less. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersLessThanOrEqual = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum < w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or more. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersMoreThanOrEqual = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum > w) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or less. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersLessThanOrEqual = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum < w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or more. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersMoreThanOrEqual = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum > w) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or less. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersLessThanOrEqual = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum < w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or more. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersMoreThanOrEqual = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum > w) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or less. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersLessThanOrEqual = (arr, w) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  if (sum < w) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an array of numbers and a number w and returns the sum of the numbers in the array that add up to w or more. \n  If the sum is greater than w, return false. \n  If the sum is less than w, return true.\n  */\nconst sumOfNumbersMoreThan", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given grant an array arr of integers, find line up the minimum minimal number phone number of elements that \n   need want to be changed to make do the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards. In one change variety, you can change switch one element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant an array arr of integers, find line up the minimum minimal number phone number of elements that \n   need want to be changed to make do the array palindromic. A palindromic array is an array that \n   is read the same backwards backward and forwards. In one change variety, you can change switch one element to any other element chemical element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  let minPhoneNumber = 1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minElement) {\n      minChange = i;\n      minElement = arr[i];\n      minPhoneNumber = arr[i];\n    }\n  }\n  return minChange;\n};\n\n/*\n  Given a number n, find the largest number that is a multiple of n.\n  For example, given n = 2, return 3.\n  Given n = 4, return 7.\n  Given n = 6, return 13.\n  Given n = 8, return 210.\n  Given n = 10, return 360.\n  Given n = 12, return 720.\n  Given n = 14, return 1440\n  Given n = 16, return 2160.\n  Given n = 18, return 3280\n  Given n = 20, return 43200.\n  Given n = 24, return 64800.\n  Given n = 28, return 130720\n  Given n = 32, return 262144\n  Given n = 40, return 524288\n  Given n = 48, return 1048576\n  Given n = 56, return 2097152\n  Given n = 64, return 4194304\n  Given n = 72, return 8388608\n  Given n = 80, return 16777216\n  Given n = 88, return 33554432\n  Given n = 96, return 67108864\n  Given n = 104, return 134217728\n  Given n = 112, return 268435456\n  Given n = 128, return 536870912\n  Given n = 160, return 1073741824\n  Given n = 192, return 2147483648\n  Given n = 224, return 4294967296\n  Given n = 256, return 8589934592\n  Given n = 288, return 17179869184\n  Given n = 320, return 3355443280\n  Given n = 352, return 6710886480\n  Given n = 384, return 13421772880\n  Given n = 416, return 26843545600\n  Given n = 448, return 53687091200\n  Given n = 480, return 107374182400\n  Given n = 512, return 214748364800\n  Given n = 544, return 429496729600\n  Given n = 576, return 858993459200\n  Given n = 600, return 17179869184000\n  Given n = 640, return 3355443296000\n  Given n = 672, return 6710886496000\n  Given n = 704, return 13421772864000\n  Given n = 736, return 2684354562400\n  Given n = 768, return 53687091296000\n  Given n = 800, return 107374182496000\n  Given n = 848, return 2147483648096000\n  Given n = 896, return 4294967296096000\n  Given n = 960, return 8589934592096000\n  Given n = 1024, return 16777216384000\n  Given n = 1040, return 33554432768000\n  Given n = 1088, return 67108864768000\n  Given n = 1136, return 13421772864000\n  Given n = 1184, return 2684354562400\n  Given n = 1216, return 53687091296000\n  Given n = 1280, return 107374182496000\n  Given n = 1344, return 2147483648096000\n  Given n = 1408, return 4294967296096000\n  Given n = 1440, return 8589934592096000\n  Given n = 1480, return 16777216384000\n  Given n = 1536, return 33554432768000\n  Given n = 1584, return 67108864768000\n  Given n = 1616, return 13421772864000\n  Given n = 1680, return 2684354562400\n  Given n = 1728, return 53687091296000\n  Given n = 1760, return 107374182496000\n  Given n = 1824, return 2147483648096000\n  Given n = 1888, return 4294967296096000\n  Given n = 1936, return 8589934592096000\n  Given n = 1984, return 16777216384000\n  Given n = 2032, return 33554432768000\n  Given n = 2080, return 67108864768000\n  Given n = 2160, return 13421772864000\n  Given n = 2240, return 2684354562400\n  Given n = 2304, return 53687091296000\n  Given n = 2400, return 107374182496000\n  Given n = 2448, return 2147483648096000\n  Given n = 2512, return 4294967296096000\n  Given n = 2560, return 8589934592096000\n  Given n = 2624, return 16777216384000\n  Given n = 2688, return 33554432768000\n  Given n = 2736, return 67108864768000\n  Given n = 2784, return 13421772864000\n  Given n = 2816, return 2684354562400\n  Given n = 2880, return 53687091296000\n  Given n = 2912, return 107374182496000\n  Given n = 2944, return 2147483648096000\n  Given n = 3008, return 4294967296096000\n  Given n = 3056, return 8589934592096000\n  Given n = 3120, return 16777216384000\n  Given n = 3168, return 33554432768000\n  Given n = 3224, return 67108864768000\n  Given n = 3288, return 13421772864000\n  Given n = 3352, return 2684354562400\n  Given n = 3360, return 53687091296000\n  Given n = 3424, return 107374182496000\n  Given n = 3488, return 2147483648096000\n  Given n = 3536, return 4294967296096000\n  Given n = 3584, return 8589934592096000\n  Given n = 3616, return 16777216384000\n  Given n = 3680, return 33554432768000\n  Given n = 3712, return 67108864768000\n  Given n = 3752, return 13421772864000\n  Given n = 3784, return 2684354562400\n  Given n = 3816, return 53687091296000\n  Given n = 3840, return 107374182496000\n  Given n = 3876, return 2147483648096000\n  Given n = 3920, return 4294967296096000\n  Given n = 3984, return 8589934592096000\n  Given n = 4016, return 16777216384000\n  Given n = 4080, return 33554", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number numeral of chars char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number numeral of chars char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1 = lst1.sort((a, b) => a.length - b.length);\n  lst2 = lst2.sort((a, b) => a.length - b.length);\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n    }\n  });\n  return total;\n};\n\n/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number numeral of chars char, return the first list.\n\n  Examples\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchAll = (lst1, lst2) => {\n  let total = 0;\n  lst1 = lst1.sort((a, b) => a.length - b.length);\n  lst2 = lst2.sort((a, b) => a.length - b.length);\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n    }\n  });\n  return total;\n};\n\n/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number numeral of chars char, return the first list.\n\n  Examples\n  totalMatchAll(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatchAll(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatchAll(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatchAll(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchAllChars = (lst1, lst2) => {\n  let total = 0;\n  lst1 = lst1.sort((a, b) => a.length - b.length);\n  lst2 = lst2.sort((a, b) => a.length - b.length);\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n    }\n  });\n  return total;\n};\n\n/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number numeral of chars char, return the first list.\n\n  Examples\n  totalMatchAllChars(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatchAllChars(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatchAllChars(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatchAllChars(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchAllCharsAll = (lst1, lst2) => {\n  let total = 0;\n  lst1 = lst1.sort((a, b) => a.length - b.length);\n  lst2 = lst2.sort((a, b) => a.length - b.length);\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n    }\n  });\n  return total;\n};\n\n/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number numeral of chars char, return the first list.\n\n  Examples\n  totalMatchAllCharsAll(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatchAllCharsAll(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatchAllCharsAll(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatchAllCharsAll(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchAllCharsAllChars = (lst1, lst2) => {\n  let total = 0;\n  lst1 = lst1.sort((a, b) => a.length - b.length);\n  lst2 = lst2.sort((a, b) => a.length - b.length);\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n    }\n  });\n  return total;\n};\n\n/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings string section of the list less than the other list.\n\n   if the two lists have the same number numeral of chars char, return the first list.\n\n  Examples\n  totalMatchAllCharsAllChars(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatchAllCharsAllChars(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatchAllCharsAllChars(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatchAllCharsAllChars(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchAllCharsAllCharsAll = (lst1, lst2) => {\n  let total = 0;\n  lst1 = lst1.sort((a, b) => a.length - b.length);\n  lst2 = lst2.sort((a, b) => a.length - b.length);\n  lst1.forEach((item, index) => {\n    if (lst2.includes(item)) {\n      total += 1;\n    }\n  });\n  return total;\n};\n\n/*\n  Write publish a function routine that accepts two lists list of strings and returns come back the list that has \n   total number issue of chars in the all strings ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime numbers numbers pool \n   and false otherwise differently. \n   Knowing acknowledge that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (num < 100) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num ++;\n  }\n  return isPrime;\n};\n\n/*Write a function affair that returns retort true if the given hold number is the multiplication generation of 3 prime ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task job is to write compose a function that returns fall true if a number issue x is a simple \n   power of n and false fake in other cases. \n   x is a simple dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task job is to write compose a function that returns fall true if a number issue x is a simple \n   power of n and false fake in other cases. \n   x is a simple dim-witted power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   power of n and false fake in other cases. \n   x is a power of n if n**int=x\n  For example:\n  isPowerOf(2, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(2, 1) => false\n  isPowerOf(2, 3) => false\n  isPowerOf(2, 5) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPowerOf(x, Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  */\nconst isPrime = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPrime(Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  */\nconst isPrimeOrZero = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPrimeOrZero(Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrimeOrZero(2) => true\n  isPrimeOrZero(3) => false\n  isPrimeOrZero(5) => false\n  */\nconst isPrimeOrZeroOrZero = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPrimeOrZeroOrZero(Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrimeOrZeroOrZero(2) => true\n  isPrimeOrZeroOrZero(3) => false\n  isPrimeOrZeroOrZero(5) => false\n  */\nconst isPrimeOrZeroOrOne = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPrimeOrZeroOrOne(Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrimeOrZeroOrOne(2) => true\n  isPrimeOrZeroOrOne(3) => false\n  isPrimeOrZeroOrOne(5) => false\n  */\nconst isPrimeOrZeroOrOneOrZero = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPrimeOrZeroOrOneOrZero(Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrimeOrZeroOrOneOrZero(2) => true\n  isPrimeOrZeroOrOneOrZero(3) => false\n  isPrimeOrZeroOrOneOrZero(5) => false\n  */\nconst isPrimeOrZeroOrOneOrOne = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPrimeOrZeroOrOneOrOne(Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrimeOrZeroOrOneOrOne(2) => true\n  isPrimeOrZeroOrOneOrOne(3) => false\n  isPrimeOrZeroOrOneOrOne(5) => false\n  */\nconst isPrimeOrZeroOrOneOrTwo = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPrimeOrZeroOrOneOrTwo(Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrimeOrZeroOrOneOrTwo(2) => true\n  isPrimeOrZeroOrOneOrTwo(3) => false\n  isPrimeOrZeroOrOneOrTwo(5) => false\n  */\nconst isPrimeOrZeroOrOneOrThree = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPrimeOrZeroOrOneOrThree(Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrimeOrZeroOrOneOrThree(2) => true\n  isPrimeOrZeroOrOneOrThree(3) => false\n  isPrimeOrZeroOrOneOrThree(5) => false\n  */\nconst isPrimeOrZeroOrOneOrFour = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isPrimeOrZeroOrOneOrFour(Math.floor(n / 2));\n};\n\n/*Your task job is to write a compose function that returns fall true if a number issue x is a \n   prime and false fake in other cases. \n   x is a prime if n**int=x\n  For example:\n  isPrimeOrZeroOrOneOrFour(2) => true\n  isPrimeOrZeroOrOneOrFour(3) => false\n  isPrimeOrZeroOrOneOrFour(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube11 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger is a cube block of some integer number. \n   Note bill: you may assume the input input signal is always valid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube12 = (a) => {\n  let iscube = true;\n  if(a > 0){\n    iscube = iscube && iscube(a%2);\n  }\n  return iscube;\n}\n\n/*\n  Write publish a function routine that takes an integer a and returns fall true \n   if this ingeger ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked task to write compose a function that receives receive \n   a hexadecimal number as a string bowed stringed instrument and counts the number issue of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number numeral \n   greater bang-up than 1 that is not a product of two smaller minor natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine a number of the following come digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume simulate the input is always constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked task to write compose a function that receives receive \n   a hexadecimal number as a string bowed stringed instrument and counts the number issue of hexadecimal \n   digits that are primes (prime flower number=== or a prime=== is a natural number numeral \n   greater bang-up than 1 that is not a product of two smaller minor natural numbers). \n   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to determine a number of the following come digits finger: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note bill: you may assume simulate the input is always constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let count = 0;\n  let key = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given grant a number in decimal form phase and your task undertaking is to convert commute it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing stage a binary \n   number. Each character fictional character in the string will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end of the string chain. \n   The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You will be given grant a number in decimal form phase and your task undertaking is to convert commute it to \n   binary format. The function should return a string bowed stringed instrument, with each character representing stage a binary \n   number. Each character fictional character in the string will be' 0' or' 1'. \n\n   There will be an extra excess couple of characters fictional character' db' at the beginning and at the end of the string chain. \n   The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let num = 0;\n  let phase = 0;\n  let numString = \"\";\n  let numStringString = \"\";\n  let numStringStringString = \"\";\n  let numStringStringStringString = \"\";\n  let numStringStringStringStringString = \"\";\n  let numStringStringStringStringStringString = \"\";\n  let numStringStringStringStringStringStringString = \"\";\n  let numStringStringStringStringStringStringStringString = \"\";\n  let numStringStringStringStringStringStringStringStringStringString = \"\";\n  let numStringStringStringStringStringStringStringStringStringStringStringStringString = \"\";\n  let numStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringStringString", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given grant list of integers, return a tuple consisting consist of a sum union and a product merchandise of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product intersection should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a given grant list of integers, return a tuple consisting consist of a sum union and a product merchandise of all the integers in a list.\n   Empty sum kernel should be equal to 0 and empty product intersection should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a list containing integers, return an integer representing the sum of the integers in the list.\n   Empty list should be equal to 0.\n  >>> sumOf([2, 3])\n  4\n  */\nconst sumOf = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* Given a list containing integers, return an integer representing the product of the integers in the list.\n   Empty list should be equal to 0.\n  >>> productOf([2, 3])\n  6\n  */\nconst productOf = (numbers) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    difference += numbers[i] - numbers[i + 1];\n  }\n  return difference;\n};\n\n/* Given a list containing integers, return an integer representing the difference between the integers in the list.\n   Empty list should be equal to 0.\n  >>> differenceOf([2, 3])\n  1\n  */\nconst differenceOf = (numbers) => {\n  let difference", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given grant a string s.\n   Your task job is to check control if the string chain is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given grant a string s.\n   Your task job is to check control if the string chain is happy or not. \n   A string bowed stringed instrument is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last concluding week workweek of the semester and the teacher has to give the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem is, she has lost lose the code she used for grading rate. \n   She has given impart you a list of GPAs grade point average for some students and you have to write publish \n   a function that can output a list of letter grades using practice the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*It is the last concluding week workweek of the semester and the teacher has to give the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem is, she has lost lose the code she used for grading rate. \n   She has given impart you a list of GPAs grade point average for some students and you have to write publish \n   a function that can output a list of letter grades using practice the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradePointAverage = grades.reduce((sum, currentValue) => sum + currentValue / grades.length, 0);\n  const letterGrades = grades.map((currentValue) => {\n    if (currentValue > gradePointAverage) {\n      return currentValue;\n    }\n    return currentValue - gradePointAverage;\n  });\n  return letterGrades.join('');\n};\n\n/*\n  It is the last concluding week workweek of the semester and the teacher has to give the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem is, she has lost lose the code she used for grading rate. \n   She has given impart you a list of GPAs grade point average for some students and you have to write publish \n   a function that can output a list of letter grades using practice the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradePointAverage = grades.reduce((sum, currentValue) => sum + currentValue / grades.length, 0);\n  const letterGrades = grades.map((currentValue) => {\n    if (currentValue > gradePointAverage) {\n      return currentValue;\n    }\n    return currentValue - gradePointAverage;\n  });\n  return letterGrades.join('');\n};\n\n/*\n  It is the last concluding week workweek of the semester and the teacher has to give the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem is, she has lost lose the code she used for grading rate. \n   She has given impart you a list of GPAs grade point average for some students and you have to write publish \n   a function that can output a list of letter grades using practice the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradePointAverage = grades.reduce((sum, currentValue) => sum + currentValue / grades.length, 0);\n  const letterGrades = grades.map((currentValue) => {\n    if (currentValue > gradePointAverage) {\n      return currentValue;\n    }\n    return currentValue - gradePointAverage;\n  });\n  return letterGrades.join('');\n};\n\n/*\n  It is the last concluding week workweek of the semester and the teacher has to give the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem is, she has lost lose the code she used for grading rate. \n   She has given impart you a list of GPAs grade point average for some students and you have to write publish \n   a function that can output a list of letter grades using practice the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradePointAverage = grades.reduce((sum, currentValue) => sum + currentValue / grades.length, 0);\n  const letterGrades = grades.map((currentValue) => {\n    if (currentValue > gradePointAverage) {\n      return currentValue;\n    }\n    return currentValue - gradePointAverage;\n  });\n  return letterGrades.join('');\n};\n\n/*\n  It is the last concluding week workweek of the semester and the teacher has to give the grades\n   to students scholar. The teacher has been making her own algorithm for grading grade. \n   The only problem is, she has lost lose the code she used for grading rate. \n   She has given impart you a list of GPAs grade point average for some students and you have to write publish \n   a function that can output a list of letter grades using practice the following table: \n            GPA        |     Letter grade \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 D \n           > 0.0                 D- \n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradePointAverage = grades.reduce((sum", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      primeLength++;\n    }\n    if (char === '1') {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function affair that takes lead a string and returns true truthful if the string\n   length is a prime choice number or false fake otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let primeLength = 0;\n  let char;\n  let i;\n  let isPrime = true;\n  for (i = 0; i < string.length; i++) {\n    char = string[i];\n    if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given grant a positive integer n, return the count of the numbers issue of n-digit\n   positive convinced integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a positive integer n, return the count of the numbers issue of n-digit\n   positive convinced integers integer that start or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n*/\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    if (i === n - 1) {\n      j++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst endsOneStarts = (n) => {\n  let count = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    binary = binary + binary(i%2);\n  }\n  \n  binary = binary.split(\"\").reverse().join(\"\");\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(binary(i%2), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    binary = binary + binary(i%2);\n  }\n  \n  binary = binary.split(\"\").reverse().join(\"\");\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(binary(i%2), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    binary = binary + binary(i%2);\n  }\n  \n  binary = binary.split(\"\").reverse().join(\"\");\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(binary(i%2), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    binary = binary + binary(i%2);\n  }\n  \n  binary = binary.split(\"\").reverse().join(\"\");\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(binary(i%2), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    binary = binary + binary(i%2);\n  }\n  \n  binary = binary.split(\"\").reverse().join(\"\");\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(binary(i%2), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    binary = binary + binary(i%2);\n  }\n  \n  binary = binary.split(\"\").reverse().join(\"\");\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(binary(i%2), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    binary = binary + binary(i%2);\n  }\n  \n  binary = binary.split(\"\").reverse().join(\"\");\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(binary(i%2), 2);\n  }\n  \n  return sum;\n};\n\n/*Given a positive cocksure integer N, return the total entire sum of its digits finger in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers integer lst. add the even tied elements that are at odd curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non - empty list of integers integer lst. add the even tied elements that are at odd curious indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = [];\n  let odd = [];\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let oddIndexCount = 0;\n  let evenIndexCount = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write publish a function routine that takes a string chain and returns an ordered coherent version of it. \n   Ordered order version of string chain, is a string bowed stringed instrument where all words (separated divide by space quad) \n   are replaced by a new newfangled word where all the characters arranged in\n   ascending order based on ascii value. \n   Note bill: You should keep the order of words and blank spaces quad in the sentence conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write publish a function routine that takes a string chain and returns an ordered coherent version of it. \n   Ordered order version of string chain, is a string bowed stringed instrument where all words (separated divide by space quad) \n   are replaced by a new newfangled word where all the characters arranged in\n   ascending order based on ascii value. \n   Note bill: You should keep the order of words and blank spaces quad in the sentence conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let newStrArr = [];\n  let newStrArr2 = [];\n  let newStrArr3 = [];\n  let newStrArr4 = [];\n  let newStrArr5 = [];\n  let newStrArr6 = [];\n  let newStrArr7 = [];\n  let newStrArr8 = [];\n  let newStrArr9 = [];\n  let newStrArr10 = [];\n  let newStrArr11 = [];\n  let newStrArr12 = [];\n  let newStrArr13 = [];\n  let newStrArr14 = [];\n  let newStrArr15 = [];\n  let newStrArr16 = [];\n  let newStrArr17 = [];\n  let newStrArr18 = [];\n  let newStrArr19 = [];\n  let newStrArr20 = [];\n  let newStrArr21 = [];\n  let newStrArr22 = [];\n  let newStrArr23 = [];\n  let newStrArr24 = [];\n  let newStrArr25 = [];\n  let newStrArr26 = [];\n  let newStrArr27 = [];\n  let newStrArr28 = [];\n  let newStrArr29 = [];\n  let newStrArr30 = [];\n  let newStrArr31 = [];\n  let newStrArr32 = [];\n  let newStrArr33 = [];\n  let newStrArr34 = [];\n  let newStrArr35 = [];\n  let newStrArr36 = [];\n  let newStrArr37 = [];\n  let newStrArr38 = [];\n  let newStrArr39 = [];\n  let newStrArr40 = [];\n  let newStrArr41 = [];\n  let newStrArr42 = [];\n  let newStrArr43 = [];\n  let newStrArr44 = [];\n  let newStrArr45 = [];\n  let newStrArr46 = [];\n  let newStrArr47 = [];\n  let newStrArr48 = [];\n  let newStrArr49 = [];\n  let newStrArr50 = [];\n  let newStrArr51 = [];\n  let newStrArr52 = [];\n  let newStrArr53 = [];\n  let newStrArr54 = [];\n  let newStrArr55 = [];\n  let newStrArr56 = [];\n  let newStrArr57 = [];\n  let newStrArr58 = [];\n  let newStrArr59 = [];\n  let newStrArr60 = [];\n  let newStrArr61 = [];\n  let newStrArr62 = [];\n  let newStrArr63 = [];\n  let newStrArr64 = [];\n  let newStrArr65 = [];\n  let newStrArr66 = [];\n  let newStrArr67 = [];\n  let newStrArr68 = [];\n  let newStrArr69 = [];\n  let newStrArr70 = [];\n  let newStrArr71 = [];\n  let newStrArr72 = [];\n  let newStrArr73 = [];\n  let newStrArr74 = [];\n  let newStrArr75 = [];\n  let newStrArr76 = [];\n  let newStrArr77 = [];\n  let newStrArr78 = [];\n  let newStrArr79 = [];\n  let newStrArr80 = [];\n  let newStrArr81 = [];\n  let newStrArr82 = [];\n  let newStrArr83 = [];\n  let newStrArr84 = [];\n  let newStrArr85 = [];\n  let newStrArr86 = [];\n  let newStrArr87 = [];\n  let newStrArr88 = [];\n  let newStrArr89 = [];\n  let newStrArr90 = [];\n  let newStrArr91 = [];\n  let newStrArr92 = [];\n  let newStrArr93 = [];\n  let newStrArr94 = [];\n  let newStrArr95 = [];\n  let newStrArr96 = [];\n  let newStrArr97 = [];\n  let newStrArr98 = [];\n  let newStrArr99 = [];\n  let newStrArr100 = [];\n  let newStrArr101 = [];\n  let newStrArr102 = [];\n  let newStrArr103 = [];\n  let newStrArr104 = [];\n  let newStrArr105 = [];\n  let newStrArr106 = [];\n  let newStrArr107 = [];\n  let newStrArr108 = [];\n  let newStrArr109 = [];\n  let newStrArr110 = [];\n  let newStrAr1111 = [];\n  let newStrArr112 = [];\n  let newStrArr113 = [];\n  let newStrArr114 = [];\n  let newStrArr115 = [];\n  let newStrArr116 = [];\n  let newStrArr117 = [];\n  let newStrArr118 = [];\n  let newStrArr119 = [];\n  let newStrArr120 = [];\n  let newStrAr121 = [];\n  let newStrAr122 = [];\n  let newStrAr123 = [];\n  let newStrAr124 = [];\n  let newStrAr125 = [];\n  let newStrAr126 = [];\n  let newStrAr127 = [];\n  let newStrAr128 = [];\n  let newStrAr129 = [];\n  let newStrAr130 = [];\n  let newStrAr131 = [];\n  let newStrAr132 = [];\n  let newStrAr133 = [];\n  let newStrAr134 = [];\n  let newStrAr135 = [];\n  let newStrAr136 = [];\n  let newStrAr137 = [];\n  let newStrAr138 = [];\n  let newStrAr139 = [];\n  let newStrAr140 = [];\n  let newStrAr141 = [];\n  let newStrAr142 = [];\n  let newStrAr143 = [];\n  let newStrAr144 = [];\n  let newStrAr145 = [];\n  let newStrAr146 = [];\n  let newStrAr147 = [];\n  let newStrAr148 = [];\n  let newStrAr149 = [];\n  let newStrAr150 = [];\n  let newStrAr151 = [];\n  let newStrAr152 = [];\n  let newStrAr153 = [];\n  let newStrAr154 = [];\n  let newStrAr155 = [];\n  let newStrAr156 = [];\n  let newStrAr157 = [];\n  let newStrAr158 = [];\n  let newStrAr159 = [];\n  let newStrAr160 = [];\n  let newStrAr161 = [];\n  let newStrAr162 = [];\n  let newStrAr163 = [];\n  let newStrAr164 = [];\n  let newStrAr165 = [];\n  let newStrAr166 = [];\n  let newStrAr167 = [];\n  let newStrAr168 = [];\n  let newStrAr169 = [];\n  let newStrAr170 = [];\n  let newStrAr171 = [];\n  let newStrAr172 = [];\n  let newStrAr173 = [];\n  let newStrAr174 = [];\n  let newStrAr175 = [];\n  let newStrAr176 = [];\n  let newStrAr177 = [];\n  let newStrAr178 = [];\n  let newStrAr179 = [];\n  let newStrAr180 = [];\n  let newStrAr181 = [];\n  let newStrAr182 = [];\n  let newStrAr183 = [];\n  let newStrAr184 = [];\n  let newStrAr185 = [];\n  let newStrAr186 = [];\n  let newStrAr187 = [];\n  let newStrAr188 = [];\n  let newStrAr189 = [];\n  let newStrAr190 = [];\n  let newStrAr191 = [];\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given grant a 2 dimensional data, as a nested nest lists list, \n   which is similar exchangeable to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given lst, and integer x, find discover integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, columns column), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort kind coordinates of the row by columns in descending derive order decree.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given grant a 2 dimensional data, as a nested nest lists list, \n   which is similar exchangeable to matrix, however, unlike matrices, \n   each row course may contain a different unlike number of columns column. \n   Given lst, and integer x, find discover integers integer x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, columns column), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort kind coordinates of the row by columns in descending derive order decree.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rowIndex = 0\n  let colIndex = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push(lst[i])\n      i++\n      rowIndex++\n    } else {\n      row.push(lst[i])\n      i++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] === x) {\n      row.push(lst[j])\n      j++\n      colIndex++\n    } else {\n      row.push(lst[j])\n      j++\n    }\n  }\n  row.sort((a, b) => a - b)\n  row.sort((a, b) => a - b)\n  return [\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex],\n    [rowIndex, colIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given grant an array of non - negative integers integer, return a copy transcript of the given hold array after sorting, \n   you will sort classify the given array in ascending ascend order if the sum kernel (first index exponent value, last concluding index value) is odd curious, \n   or sort it in descending order if the sum (first index value, last index exponent value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant an array of non - negative integers integer, return a copy transcript of the given hold array after sorting, \n   you will sort classify the given array in ascending ascend order if the sum kernel (first index exponent value, last concluding index value) is odd curious, \n   or sort it in descending order if the sum (first index value, last index exponent value) is even. \n\n   Note: \n   * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = []\n  let sum = 0\n  let sortedArrayIndex = 0\n  let sortedArrayIndex2 = 0\n  let sortedArrayIndex3 = 0\n  let sortedArrayIndex4 = 0\n  let sortedArrayIndex5 = 0\n  let sortedArrayIndex6 = 0\n  let sortedArrayIndex7 = 0\n  let sortedArrayIndex8 = 0\n  let sortedArrayIndex9 = 0\n  let sortedArrayIndex10 = 0\n  let sortedArrayIndex11 = 0\n  let sortedArrayIndex12 = 0\n  let sortedArrayIndex13 = 0\n  let sortedArrayIndex14 = 0\n  let sortedArrayIndex15 = 0\n  let sortedArrayIndex16 = 0\n  let sortedArrayIndex17 = 0\n  let sortedArrayIndex18 = 0\n  let sortedArrayIndex19 = 0\n  let sortedArrayIndex20 = 0\n  let sortedArrayIndex21 = 0\n  let sortedArrayIndex22 = 0\n  let sortedArrayIndex23 = 0\n  let sortedArrayIndex24 = 0\n  let sortedArrayIndex25 = 0\n  let sortedArrayIndex26 = 0\n  let sortedArrayIndex27 = 0\n  let sortedArrayIndex28 = 0\n  let sortedArrayIndex29 = 0\n  let sortedArrayIndex30 = 0\n  let sortedArrayIndex31 = 0\n  let sortedArrayIndex32 = 0\n  let sortedArrayIndex33 = 0\n  let sortedArrayIndex34 = 0\n  let sortedArrayIndex35 = 0\n  let sortedArrayIndex36 = 0\n  let sortedArrayIndex37 = 0\n  let sortedArrayIndex38 = 0\n  let sortedArrayIndex39 = 0\n  let sortedArrayIndex40 = 0\n  let sortedArrayIndex41 = 0\n  let sortedArrayIndex42 = 0\n  let sortedArrayIndex43 = 0\n  let sortedArrayIndex44 = 0\n  let sortedArrayIndex45 = 0\n  let sortedArrayIndex46 = 0\n  let sortedArrayIndex47 = 0\n  let sortedArrayIndex48 = 0\n  let sortedArrayIndex49 = 0\n  let sortedArrayIndex50 = 0\n  let sortedArrayIndex51 = 0\n  let sortedArrayIndex52 = 0\n  let sortedArrayIndex53 = 0\n  let sortedArrayIndex54 = 0\n  let sortedArrayIndex55 = 0\n  let sortedArrayIndex56 = 0\n  let sortedArrayIndex57 = 0\n  let sortedArrayIndex58 = 0\n  let sortedArrayIndex59 = 0\n  let sortedArrayIndex60 = 0\n  let sortedArrayIndex61 = 0\n  let sortedArrayIndex62 = 0\n  let sortedArrayIndex63 = 0\n  let sortedArrayIndex64 = 0\n  let sortedArrayIndex65 = 0\n  let sortedArrayIndex66 = 0\n  let sortedArrayIndex67 = 0\n  let sortedArrayIndex68 = 0\n  let sortedArrayIndex69 = 0\n  let sortedArrayIndex70 = 0\n  let sortedArrayIndex71 = 0\n  let sortedArrayIndex72 = 0\n  let sortedArrayIndex73 = 0\n  let sortedArrayIndex74 = 0\n  let sortedArrayIndex75 = 0\n  let sortedArrayIndex76 = 0\n  let sortedArrayIndex77 = 0\n  let sortedArrayIndex78 = 0\n  let sortedArrayIndex79 = 0\n  let sortedArrayIndex80 = 0\n  let sortedArrayIndex81 = 0\n  let sortedArrayIndex82 = 0\n  let sortedArrayIndex83 = 0\n  let sortedArrayIndex84 = 0\n  let sortedArrayIndex85 = 0\n  let sortedArrayIndex86 = 0\n  let sortedArrayIndex87 = 0\n  let sortedArrayIndex88 = 0\n  let sortedArrayIndex89 = 0\n  let sortedArrayIndex90 = 0\n  let sortedArrayIndex91 = 0\n  let sortedArrayIndex92 = 0\n  let sortedArrayIndex93 = 0\n  let sortedArrayIndex94 = 0\n  let sortedArrayIndex95 = 0\n  let sortedArrayIndex96 = 0\n  let sortedArrayIndex97 = 0\n  let sortedArrayIndex98 = 0\n  let sortedArrayIndex99 = 0\n  let sortedArrayIndex100 = 0\n  let sortedArrayIndex101 = 0\n  let sortedArrayIndex102 = 0\n  let sortedArrayIndex103 = 0\n  let sortedArrayIndex104 = 0\n  let sortedArrayIndex105 = 0\n  let sortedArrayIndex106 = 0\n  let sortedArrayIndex107 = 0\n  let sortedArrayIndex108 = 0\n  let sortedArrayIndex109 = 0\n  let sortedArrayIndex110 = 0\n  let sortedArrayIndex111 = 0\n  let sortedArrayIndex112 = 0\n  let sortedArrayIndex113 = 0\n  let sortedArrayIndex114 = 0\n  let sortedArrayIndex115 = 0\n  let sortedArrayIndex116 = 0\n  let sortedArrayIndex117 = 0\n  let sortedArrayIndex118 = 0\n  let sortedArrayIndex119 = 0\n  let sortedArrayIndex120 = 0\n  let sortedArrayIndex121 = 0\n  let sortedArrayIndex122 = 0\n  let sortedArrayIndex123 = 0\n  let sortedArrayIndex124 = 0\n  let sortedArrayIndex125 = 0\n  let sortedArrayIndex126 = 0\n  let sortedArrayIndex127 = 0\n  let sortedArrayIndex128 = 0\n  let sortedArrayIndex129 = 0\n  let sortedArrayIndex130 = 0\n  let sortedArrayIndex131 = 0\n  let sortedArrayIndex132 = 0\n  let sortedArrayIndex133 = 0\n  let sortedArrayIndex134 = 0\n  let sortedArrayIndex135 = 0\n  let sortedArrayIndex136 = 0\n  let sortedArrayIndex137 = 0\n  let sortedArrayIndex138 = 0\n  let sortedArrayIndex139 = 0\n  let sortedArrayIndex140 = 0\n  let sortedArrayIndex141 = 0\n  let sortedArrayIndex142 = 0\n  let sortedArrayIndex143 = 0\n  let sortedArrayIndex144 = 0\n  let sortedArrayIndex145 = 0\n  let sortedArrayIndex146 = 0\n  let sortedArrayIndex147 = 0\n  let sortedArrayIndex148 = 0\n  let sortedArrayIndex149 = 0\n  let sortedArrayIndex150 = 0\n  let sortedArrayIndex151 = 0\n  let sortedArrayIndex152 = 0\n  let sortedArrayIndex153 = 0\n  let sortedArrayIndex154 = 0\n  let sortedArrayIndex155 = 0\n  let sortedArrayIndex156 = 0\n  let sortedArrayIndex157 = 0\n  let sortedArrayIndex158 = 0\n  let sortedArrayIndex159 = 0\n  let sortedArrayIndex160 = 0\n  let sortedArrayIndex161 = 0\n  let sortedArrayIndex162 = 0\n  let sortedArrayIndex163 = 0\n  let sortedArrayIndex164 = 0\n  let sortedArrayIndex165 = 0\n  let sortedArrayIndex166 = 0\n  let sortedArrayIndex167 = 0\n  let sortedArrayIndex168 = 0\n  let sortedArrayIndex169 = 0\n  let sortedArrayIndex170 = 0\n  let sortedArrayIndex171 = 0\n  let sortedArrayIndex172 = 0\n  let sortedArrayIndex173 = 0\n  let sortedArrayIndex174 = 0\n  let sortedArrayIndex175 = 0\n  let sortedArrayIndex176 = 0\n  let sortedArrayIndex177 = 0\n  let sortedArrayIndex178 = 0\n  let sortedArrayIndex179 = 0\n  let sortedArrayIndex180 = 0\n  let sortedArrayIndex181 = 0\n  let sortedArrayIndex182 = 0\n  let sortedArrayIndex183 = 0\n  let sortedArrayIndex184 = 0\n  let sortedArrayIndex185 = 0\n  let sortedArrayIndex186 = 0\n  let sortedArrayIndex187 = 0\n  let sortedArrayIndex188 = 0\n  let sortedArrayIndex189 = 0\n  let sortedArrayIndex190 = 0\n  let sortedArrayIndex191 = 0\n  let sortedArrayIndex192 = 0\n  let sortedArrayIndex193 = 0\n  let sortedArrayIndex194 = 0\n  let sortedArrayIndex", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function affair encrypt that takes lead a string as an argument argumentation and \n   returns a string bowed stringed instrument encrypted with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters letter \n   shift stir down by two multiplied to two places home.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function affair encrypt that takes lead a string as an argument argumentation and \n   returns a string bowed stringed instrument encrypted with the alphabet rudiment being rotated. \n   The alphabet rudiment should be rotated in a manner such that the letters letter \n   shift stir down by two multiplied to two places home.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotation = alphabet[alphabet.indexOf(alphabet.length - 1)];\n  let rotated = '';\n  let i;\n  let j;\n  let k;\n  let l;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a given grant list of integers, generate beget a list of rolling wind maximum maximal element found recover until given moment consequence \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxElement = numbers[0];\n  let maxElementIndex = numbers.length;\n  let maxElementIndexMax = numbers.length;\n  let maxElementIndexMaxIndex = numbers.length;\n  let maxElementIndexMaxElement = numbers[0];\n  let maxElementIndexMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMax = numbers[0];\n  let maxElementIndexMaxElementMaxIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMax = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMax = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMax = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementMax = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementIndex = numbers.length;\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementMax = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMaxElementMaxElement = numbers[0];\n  let maxElementIndexMaxElementMaxElementMaxElementMaxElementMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given grant a list of integers. \n   Write publish a function routine nextSmallest() that returns fall the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given grant a list of integers. \n   Write publish a function routine nextSmallest() that returns fall the 2nd smallest element component of the list.\n   Return null if there is no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n   let min = null;\n   let minIndex = null;\n   let minVal = null;\n   for (let i = 0; i < lst.length; i++) {\n     if (min === null) {\n       min = lst[i];\n       minIndex = i;\n     } else if (lst[i] < min) {\n       min = lst[i];\n       minIndex = i;\n     }\n   }\n   if (minIndex === null) {\n     return null;\n   }\n   return lst[minIndex];\n };\n*/\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n//   let minIndex = null;\n//   let minVal = null;\n//   for (let i = 0; i < lst.length; i++) {\n//     if (min === null) {\n//       min = lst[i];\n//       minIndex = i;\n//     } else if (lst[i] < min) {\n//       min = lst[i];\n//       minIndex = i;\n//     }\n//   }\n//   if (minIndex === null) {\n//     return null;\n//   }\n//   return lst[minIndex];\n// };\n\n// const nextSmallest = (lst) => {\n//   let min = null;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given grant a string of words word, and your task undertaking is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences conviction are delimited specify by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given grant a string of words word, and your task undertaking is to count consider the number \n   of boredoms boredom. A boredom is a sentence that starts depart with the word \" I \". \n   Sentences conviction are delimited specify by'.','?' or'!'. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredSentences = boredWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!' :'';\n    }\n  });\n  boredSentences.forEach((sentence) => {\n    if (sentence.includes('!')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll be given a string of words word, and your task undertaking is to count consider the number \n   of convictions conviction. A conviction is a sentence that ends with the word \" I \". \n   Sentences conviction are delimited specify by'.','?' or'!'. \n \n   For example:\n  >>> isConvicted(\"Hello world\")\n  0\n  >>> isConvicted(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isConvicted = (S) => {\n  let convicted = 0;\n  let convictedWords = S.split('.');\n  let convictedSentences = convictedWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!' :'';\n    }\n  });\n  convictedSentences.forEach((sentence) => {\n    if (sentence.includes('!')) {\n      convicted++;\n    }\n  });\n  return convicted;\n};\n\n/*\n  You'll be given a string of words word, and your task undertaking is to count consider the number \n   of convictions conviction. A conviction is a sentence that ends with the word \" I \". \n   Sentences conviction are delimited specify by'.','?' or'!'. \n \n   For example:\n  >>> isConvicted(\"Hello world\")\n  0\n  >>> isConvicted(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isConvictedAndBored = (S) => {\n  let convicted = 0;\n  let convictedWords = S.split('.');\n  let convictedSentences = convictedWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!' :'';\n    }\n  });\n  convictedSentences.forEach((sentence) => {\n    if (sentence.includes('!')) {\n      convicted++;\n    }\n  });\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredSentences = boredWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!' :'';\n    }\n  });\n  boredSentences.forEach((sentence) => {\n    if (sentence.includes('!')) {\n      bored++;\n    }\n  });\n  return convicted + bored;\n};\n\n/*\n  You'll be given a string of words word, and your task undertaking is to count consider the number \n   of convictions conviction. A conviction is a sentence that ends with the word \" I \". \n   Sentences conviction are delimited specify by'.','?' or'!'. \n \n   For example:\n  >>> isConvictedAndBored(\"Hello world\")\n  0\n  >>> isConvictedAndBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isConvictedAndBoredAndBored = (S) => {\n  let convicted = 0;\n  let convictedWords = S.split('.');\n  let convictedSentences = convictedWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!' :'';\n    }\n  });\n  convictedSentences.forEach((sentence) => {\n    if (sentence.includes('!')) {\n      convicted++;\n    }\n  });\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredSentences = boredWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!' :'';\n    }\n  });\n  boredSentences.forEach((sentence) => {\n    if (sentence.includes('!')) {\n      bored++;\n    }\n  });\n  let boredBored = 0;\n  let boredBoredWords = S.split('.');\n  let boredBoredSentences = boredBoredWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!' :'';\n    }\n  });\n  boredBoredSentences.forEach((sentence) => {\n    if (sentence.includes('!')) {\n      boredBored++;\n    }\n  });\n  return convicted + bored + boredBored;\n};\n\n/*\n  You'll be given a string of words word, and your task undertaking is to count consider the number \n   of convictions conviction. A conviction is a sentence that ends with the word \" I \". \n   Sentences conviction are delimited specify by'.','?' or'!'. \n \n   For example:\n  >>> isConvictedAndBoredAndBored(\"Hello world\")\n  0\n  >>> isConvictedAndBoredAndBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isConvictedAndBoredAndBoredAndBored = (S) => {\n  let convicted = 0;\n  let convictedWords = S.split('.');\n  let convictedSentences = convictedWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!' :'';\n    }\n  });\n  convictedSentences.forEach((sentence) => {\n    if (sentence.includes('!')) {\n      convicted++;\n    }\n  });\n  let bored = 0;\n  let boredWords = S.split('.');\n  let boredSentences = boredWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!' :'';\n    }\n  });\n  boredSentences.forEach((sentence) => {\n    if (sentence.includes('!')) {\n      bored++;\n    }\n  });\n  let boredBored = 0;\n  let boredBoredWords = S.split('.');\n  let boredBoredSentences = boredBoredWords.map((word) => {\n    if (word.includes('.')) {\n      return word;\n    } else {\n      return word.includes('?')? '!", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create produce a function routine that takes 3 numbers phone number. \n   Returns true on-key if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false delusive in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create produce a function routine that takes 3 numbers phone number. \n   Returns true on-key if one of the numbers is equal adequate to the sum of the other two, and all numbers act are integers. \n   Returns return false delusive in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const isEqual = (x, y) => x === y || x === 0 || y === 0 || x === y || x === 0 || y === 0;\n  const isAllInteger = x => x % 1 === 0;\n  const isAllPositive = x => x > 0;\n  const isAllNegative = x => x < 0;\n  const isAllZero = x => x === 0;\n  const isAllOne = x => x === 1;\n  const isAllTwo = x => x === 2;\n  const isAllThree = x => x === 3;\n  const isAllFour = x => x === 4;\n  const isAllFive = x => x === 5;\n  const isAllSix = x => x === 6;\n  const isAllSeven = x => x === 7;\n  const isAllEight = x => x === 8;\n  const isAllNine = x => x === 9;\n  const isAllTen = x => x === 10;\n  const isAllEleven = x => x === 11;\n  const isAllTwelve = x => x === 12;\n  const isAllThirteen = x => x === 13;\n  const isAllFourteen = x => x === 14;\n  const isAllFifteen = x => x === 15;\n  const isAllSixteen = x => x === 16;\n  const isAllSeventeen = x => x === 17;\n  const isAllEighteen = x => x === 18;\n  const isAllNineteen = x => x === 19;\n  const isAllTwenty = x => x === 20;\n  const isAllThirty = x => x === 21;\n  const isAllForty = x => x === 22;\n  const isAllFifty = x => x === 23;\n  const isAllSixty = x => x === 24;\n  const isAllSeventy = x => x === 25;\n  const isAllEighty = x => x === 26;\n  const isAllNinety = x => x === 27;\n  const isAllTwentyOne = x => x === 28;\n  const isAllTwentyTwo = x => x === 29;\n  const isAllTwentyThree = x => x === 30;\n  const isAllTwentyFour = x => x === 31;\n  const isAllTwentyFive = x => x === 32;\n  const isAllTwentySix = x => x === 33;\n  const isAllTwentySeven = x => x === 34;\n  const isAllTwentyEight = x => x === 35;\n  const isAllTwentyNine = x => x === 36;\n  const isAllTwentyTen = x => x === 37;\n  const isAllTwentyEleven = x => x === 38;\n  const isAllTwentyTwelve = x => x === 39;\n  const isAllTwentyThirteen = x => x === 40;\n  const isAllTwentyFourteen = x => x === 41;\n  const isAllTwentyFifteen = x => x === 42;\n  const isAllTwentySixteen = x => x === 43;\n  const isAllTwentySeventeen = x => x === 44;\n  const isAllTwentyEighteen = x => x === 45;\n  const isAllTwentyNineteen = x => x === 46;\n  const isAllTwentyTwenty = x => x === 47;\n  const isAllTwentyThirty = x => x === 48;\n  const isAllTwentyForty = x => x === 49;\n  const isAllTwentyFifty = x => x === 50;\n  const isAllTwentySixty = x => x === 51;\n  const isAllTwentySeventy = x => x === 52;\n  const isAllTwentyEighty = x => x === 53;\n  const isAllTwentyNinety = x => x === 54;\n  const isAllThirtyOne = x => x === 55;\n  const isAllThirtyTwo = x => x === 56;\n  const isAllThirtyThree = x => x === 57;\n  const isAllThirtyFour = x => x === 58;\n  const isAllThirtyFive = x => x === 59;\n  const isAllThirtySix = x => x === 60;\n  const isAllThirtySeven = x => x === 61;\n  const isAllThirtyEight = x => x === 62;\n  const isAllThirtyNine = x => x === 63;\n  const isAllFourtyOne = x => x === 64;\n  const isAllFourtyTwo = x => x === 65;\n  const isAllFourtyThree = x => x === 66;\n  const isAllFourtyFour = x => x === 67;\n  const isAllFourtyFive = x => x === 68;\n  const isAllFourtySix = x => x === 69;\n  const isAllFourtySeven = x => x === 70;\n  const isAllFourtyEight = x => x === 71;\n  const isAllFourtyNine = x => x === 72;\n  const isAllFiftyOne = x => x === 73;\n  const isAllFiftyTwo = x => x === 74;\n  const isAllFiftyThree = x => x === 75;\n  const isAllFiftyFour = x => x === 76;\n  const isAllFiftyFive = x => x === 77;\n  const isAllFiftySix = x => x === 78;\n  const isAllFiftySeven = x => x === 79;\n  const isAllFiftyEight = x => x === 80;\n  const isAllFiftyNine = x => x === 81;\n  const isAllSixtyOne = x => x === 82;\n  const isAllSixtyTwo = x => x === 83;\n  const isAllSixtyThree = x => x === 84;\n  const isAllSixtyFour = x => x === 85;\n  const isAllSixtyFive = x => x === 86;\n  const isAllSixtySix = x => x === 87;\n  const isAllSixtySeven = x => x === 88;\n  const isAllSixtyEight = x => x === 89;\n  const isAllSixtyNine = x => x === 90;\n  const isAllSeventyOne = x => x === 91;\n  const isAllSeventyTwo = x => x === 92;\n  const isAllSeventyThree = x => x === 93;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write publish a function routine that takes a message, and encodes in such a \n   way direction that it swaps case character of all letters, replaces supplant all vowels in \n   the message with the letter that appears appear 2 places position ahead of that \n   vowel in the english alphabet. \n   Assume only letters letter. \n  \n   Examples exercise:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write publish a function routine that takes a message, and encodes in such a \n   way direction that it swaps case character of all letters, replaces supplant all vowels in \n   the message with the letter that appears appear 2 places position ahead of that \n   vowel in the english alphabet. \n   Assume only letters letter. \n  \n   Examples exercise:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const vowels = 'aeiouAEIOU';\n  const messageArray = message.split('');\n  let encodedMessage = '';\n  let currentLetter;\n  let currentVowel;\n  let currentPosition;\n  let currentVowelPosition;\n  let currentVowelPosition2;\n  let currentVowelPosition3;\n  let currentVowelPosition4;\n  let currentVowelPosition5;\n  let currentVowelPosition6;\n  let currentVowelPosition7;\n  let currentVowelPosition8;\n  let currentVowelPosition9;\n  let currentVowelPosition10;\n  let currentVowelPosition11;\n  let currentVowelPosition12;\n  let currentVowelPosition13;\n  let currentVowelPosition14;\n  let currentVowelPosition15;\n  let currentVowelPosition16;\n  let currentVowelPosition17;\n  let currentVowelPosition18;\n  let currentVowelPosition19;\n  let currentVowelPosition20;\n  let currentVowelPosition21;\n  let currentVowelPosition22;\n  let currentVowelPosition23;\n  let currentVowelPosition24;\n  let currentVowelPosition25;\n  let currentVowelPosition26;\n  let currentVowelPosition27;\n  let currentVowelPosition28;\n  let currentVowelPosition29;\n  let currentVowelPosition30;\n  let currentVowelPosition31;\n  let currentVowelPosition32;\n  let currentVowelPosition33;\n  let currentVowelPosition34;\n  let currentVowelPosition35;\n  let currentVowelPosition36;\n  let currentVowelPosition37;\n  let currentVowelPosition38;\n  let currentVowelPosition39;\n  let currentVowelPosition40;\n  let currentVowelPosition41;\n  let currentVowelPosition42;\n  let currentVowelPosition43;\n  let currentVowelPosition44;\n  let currentVowelPosition45;\n  let currentVowelPosition46;\n  let currentVowelPosition47;\n  let currentVowelPosition48;\n  let currentVowelPosition49;\n  let currentVowelPosition50;\n  let currentVowelPosition51;\n  let currentVowelPosition52;\n  let currentVowelPosition53;\n  let currentVowelPosition54;\n  let currentVowelPosition55;\n  let currentVowelPosition56;\n  let currentVowelPosition57;\n  let currentVowelPosition58;\n  let currentVowelPosition59;\n  let currentVowelPosition60;\n  let currentVowelPosition61;\n  let currentVowelPosition62;\n  let currentVowelPosition63;\n  let currentVowelPosition64;\n  let currentVowelPosition65;\n  let currentVowelPosition66;\n  let currentVowelPosition67;\n  let currentVowelPosition68;\n  let currentVowelPosition69;\n  let currentVowelPosition70;\n  let currentVowelPosition71;\n  let currentVowelPosition72;\n  let currentVowelPosition73;\n  let currentVowelPosition74;\n  let currentVowelPosition75;\n  let currentVowelPosition76;\n  let currentVowelPosition77;\n  let currentVowelPosition78;\n  let currentVowelPosition79;\n  let currentVowelPosition80;\n  let currentVowelPosition81;\n  let currentVowelPosition82;\n  let currentVowelPosition83;\n  let currentVowelPosition84;\n  let currentVowelPosition85;\n  let currentVowelPosition86;\n  let currentVowelPosition87;\n  let currentVowelPosition88;\n  let currentVowelPosition89;\n  let currentVowelPosition90;\n  let currentVowelPosition91;\n  let currentVowelPosition92;\n  let currentVowelPosition93;\n  let currentVowelPosition94;\n  let currentVowelPosition95;\n  let currentVowelPosition96;\n  let currentVowelPosition97;\n  let currentVowelPosition98;\n  let currentVowelPosition99;\n  let currentVowelPosition100;\n  let currentVowelPosition101;\n  let currentVowelPosition102;\n  let currentVowelPosition103;\n  let currentVowelPosition104;\n  let currentVowelPosition105;\n  let currentVowelPosition106;\n  let currentVowelPosition107;\n  let currentVowelPosition108;\n  let currentVowelPosition109;\n  let currentVowelPosition110;\n  let currentVowelPosition111;\n  let currentVowelPosition112;\n  let currentVowelPosition113;\n  let currentVowelPosition114;\n  let currentVowelPosition115;\n  let currentVowelPosition116;\n  let currentVowelPosition117;\n  let currentVowelPosition118;\n  let currentVowelPosition119;\n  let currentVowelPosition120;\n  let currentVowelPosition121;\n  let currentVowelPosition122;\n  let currentVowelPosition123;\n  let currentVowelPosition124;\n  let currentVowelPosition125;\n  let currentVowelPosition126;\n  let currentVowelPosition127;\n  let currentVowelPosition128;\n  let currentVowelPosition129;\n  let currentVowelPosition130;\n  let currentVowelPosition131;\n  let currentVowelPosition132;\n  let currentVowelPosition133;\n  let currentVowelPosition134;\n  let currentVowelPosition135;\n  let currentVowelPosition136;\n  let currentVowelPosition137;\n  let currentVowelPosition138;\n  let currentVowelPosition139;\n  let currentVowelPosition140;\n  let currentVowelPosition141;\n  let currentVowelPosition142;\n  let currentVowelPosition143;\n  let currentVowelPosition144;\n  let currentVowelPosition145;\n  let currentVowelPosition146;\n  let currentVowelPosition147;\n  let currentVowelPosition148;\n  let currentVowelPosition149;\n  let currentVowelPosition150;\n  let currentVowelPosition151;\n  let currentVowelPosition152;\n  let currentVowelPosition153;\n  let currentVowelPosition", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given grant a list of integers. \n   You need want to find witness the largest bombastic prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You are given grant a list of integers. \n   You need want to find witness the largest bombastic prime value and return the sum kernel of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let max2 = 0;\n  let max3 = 0;\n  let max4 = 0;\n  let max5 = 0;\n  let max6 = 0;\n  let max7 = 0;\n  let max8 = 0;\n  let max9 = 0;\n  let max10 = 0;\n  let max11 = 0;\n  let max12 = 0;\n  let max13 = 0;\n  let max14 = 0;\n  let max15 = 0;\n  let max16 = 0;\n  let max17 = 0;\n  let max18 = 0;\n  let max19 = 0;\n  let max20 = 0;\n  let max21 = 0;\n  let max22 = 0;\n  let max23 = 0;\n  let max24 = 0;\n  let max25 = 0;\n  let max26 = 0;\n  let max27 = 0;\n  let max28 = 0;\n  let max29 = 0;\n  let max30 = 0;\n  let max31 = 0;\n  let max32 = 0;\n  let max33 = 0;\n  let max34 = 0;\n  let max35 = 0;\n  let max36 = 0;\n  let max37 = 0;\n  let max38 = 0;\n  let max39 = 0;\n  let max40 = 0;\n  let max41 = 0;\n  let max42 = 0;\n  let max43 = 0;\n  let max44 = 0;\n  let max45 = 0;\n  let max46 = 0;\n  let max47 = 0;\n  let max48 = 0;\n  let max49 = 0;\n  let max50 = 0;\n  let max51 = 0;\n  let max52 = 0;\n  let max53 = 0;\n  let max54 = 0;\n  let max55 = 0;\n  let max56 = 0;\n  let max57 = 0;\n  let max58 = 0;\n  let max59 = 0;\n  let max60 = 0;\n  let max61 = 0;\n  let max62 = 0;\n  let max63 = 0;\n  let max64 = 0;\n  let max65 = 0;\n  let max66 = 0;\n  let max67 = 0;\n  let max68 = 0;\n  let max69 = 0;\n  let max70 = 0;\n  let max71 = 0;\n  let max72 = 0;\n  let max73 = 0;\n  let max74 = 0;\n  let max75 = 0;\n  let max76 = 0;\n  let max77 = 0;\n  let max78 = 0;\n  let max79 = 0;\n  let max80 = 0;\n  let max81 = 0;\n  let max82 = 0;\n  let max83 = 0;\n  let max84 = 0;\n  let max85 = 0;\n  let max86 = 0;\n  let max87 = 0;\n  let max88 = 0;\n  let max89 = 0;\n  let max90 = 0;\n  let max91 = 0;\n  let max92 = 0;\n  let max93 = 0;\n  let max94 = 0;\n  let max95 = 0;\n  let max96 = 0;\n  let max97 = 0;\n  let max98 = 0;\n  let max99 = 0;\n  let max100 = 0;\n  let max101 = 0;\n  let max102 = 0;\n  let max103 = 0;\n  let max104 = 0;\n  let max105 = 0;\n  let max106 = 0;\n  let max107 = 0;\n  let max108 = 0;\n  let max109 = 0;\n  let max110 = 0;\n  let max111 = 0;\n  let max112 = 0;\n  let max113 = 0;\n  let max114 = 0;\n  let max115 = 0;\n  let max116 = 0;\n  let max117 = 0;\n  let max118 = 0;\n  let max119 = 0;\n  let max120 = 0;\n  let max121 = 0;\n  let max122 = 0;\n  let max123 = 0;\n  let max124 = 0;\n  let max125 = 0;\n  let max126 = 0;\n  let max127 = 0;\n  let max128 = 0;\n  let max129 = 0;\n  let max130 = 0;\n  let max131 = 0;\n  let max132 = 0;\n  let max133 = 0;\n  let max134 = 0;\n  let max135 = 0;\n  let max136 = 0;\n  let max137 = 0;\n  let max138 = 0;\n  let max139 = 0;\n  let max140 = 0;\n  let max141 = 0;\n  let max142 = 0;\n  let max143 = 0;\n  let max144 = 0;\n  let max145 = 0;\n  let max146 = 0;\n  let max147 = 0;\n  let max148 = 0;\n  let max149 = 0;\n  let max150 = 0;\n  let max151 = 0;\n  let max152 = 0;\n  let max153 = 0;\n  let max154 = 0;\n  let max155 = 0;\n  let max156 = 0;\n  let max157 = 0;\n  let max158 = 0;\n  let max159 = 0;\n  let max160 = 0;\n  let max161 = 0;\n  let max162 = 0;\n  let max163 = 0;\n  let max164 = 0;\n  let max165 = 0;\n  let max166 = 0;\n  let max167 = 0;\n  let max168 = 0;\n  let max169 = 0;\n  let max170 = 0;\n  let max171 = 0;\n  let max172 = 0;\n  let max173 = 0;\n  let max174 = 0;\n  let max175 = 0;\n  let max176 = 0;\n  let max177 = 0;\n  let max178 = 0;\n  let max179 = 0;\n  let max180 = 0;\n  let max181 = 0;\n  let max182 = 0;\n  let max183 = 0;\n  let max184 = 0;\n  let max185 = 0;\n  let max186 = 0;\n  let max187 = 0;\n  let max188 = 0;\n  let max189 = 0;\n  let max190 = 0;\n  let max191 = 0;\n  let max192 = 0;\n  let max193 = 0;\n  let max194 = 0;\n  let max195 = 0;\n  let max196 = 0;\n  let max197 = 0;\n  let max198 = 0;\n  let max199 = 0;\n  let max200 = 0;\n  let max201 = 0;\n  let max202 = 0;\n  let max203 = 0;\n  let max204 = 0;\n  let max205 = 0;\n  let max206 = 0;\n  let max207 = 0;\n  let max208 = 0;\n  let max209 = 0;\n  let max210 = 0;\n  let max211 = 0;\n  let max212 = 0;\n  let max213 = 0;\n  let max214 = 0;\n  let max215 = 0;\n  let max216 = 0;\n  let max217 = 0;\n  let max218 = 0;\n  let max219 = 0;\n  let max220 = 0;\n  let max221 = 0;\n  let max222 = 0;\n  let max223 = 0;\n  let max224 = 0;\n  let max225 = 0;\n  let max226 = 0;\n  let max227 = 0;\n  let max228 = 0;\n  let max229 = 0;\n  let max230 = 0;\n  let max231 = 0;\n  let max232 = 0;\n  let max233 = 0;\n  let max234 = 0;\n  let max235 = 0;\n  let max236 = 0;\n  let max237 = 0;\n  let max238 = 0;\n  let max239 = 0;\n  let max240 = 0;\n  let max241 = 0;\n  let max242 = 0;\n  let max243 = 0;\n  let max244 = 0;\n  let max245 = 0;\n  let max246 = 0;\n  let max247 = 0;\n  let max248 = 0;\n  let max249 = 0;\n  let max250 = 0;\n  let max251 = 0;\n  let max252 = 0;\n  let max253 = 0;\n  let max254 = 0;\n  let max255 = 0;\n  let max256 = 0;\n  let max257 = 0;\n  let max258 = 0;\n  let max259 = 0;\n  let max260 = 0;\n  let max261 = 0;\n  let max262 = 0;\n  let max263 = 0;\n  let max264 = 0;\n  let max265 = 0;\n  let max266 = 0;\n  let max267 = 0;\n  let max268", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given grant a dictionary, return true if all keys key are strings string in lower gloomy \n   case or all keys key are strings in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a dictionary, return true if all keys key are strings string in lower gloomy \n   case or all keys key are strings in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysCase = true;\n  keys.forEach((key) => {\n    if (dict[key] instanceof String) {\n      if (dict[key].toLowerCase() === dict[key.toLowerCase()]) {\n        allKeysCase = false;\n      }\n    }\n  });\n  return allKeysCase;\n};\n\n/*\n  Given grant a dictionary, return true if all keys key are numbers in lower gloomy \n   case or all keys key are numbers in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysCase = true;\n  keys.forEach((key) => {\n    if (dict[key] instanceof Number) {\n      if (dict[key].toString().toLowerCase() === dict[key].toString().toLowerCase()) {\n        allKeysCase = false;\n      }\n    }\n  });\n  return allKeysCase;\n};\n\n/*\n  Given grant a dictionary, return true if all keys key are booleans in lower gloomy \n   case or all keys key are booleans in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysCase = true;\n  keys.forEach((key) => {\n    if (dict[key] instanceof Boolean) {\n      if (dict[key].toString().toLowerCase() === dict[key].toString().toLowerCase()) {\n        allKeysCase = false;\n      }\n    }\n  });\n  return allKeysCase;\n};\n\n/*\n  Given grant a dictionary, return true if all keys key are arrays in lower gloomy \n   case or all keys key are arrays in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysCase = true;\n  keys.forEach((key) => {\n    if (dict[key] instanceof Array) {\n      if (dict[key].toString().toLowerCase() === dict[key].toString().toLowerCase()) {\n        allKeysCase = false;\n      }\n    }\n  });\n  return allKeysCase;\n};\n\n/*\n  Given grant a dictionary, return true if all keys key are objects in lower gloomy \n   case or all keys key are objects in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysCase = true;\n  keys.forEach((key) => {\n    if (dict[key] instanceof Object) {\n      if (checkDictCase(dict[key])) {\n        allKeysCase = false;\n      }\n    }\n  });\n  return allKeysCase;\n};\n\n/*\n  Given grant a dictionary, return true if all keys key are functions in lower gloomy \n   case or all keys key are functions in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysCase = true;\n  keys.forEach((key) => {\n    if (dict[key] instanceof Function) {\n      if (dict[key].toString().toLowerCase() === dict[key].toString().toLowerCase()) {\n        allKeysCase = false;\n      }\n    }\n  });\n  return allKeysCase;\n};\n\n/*\n  Given grant a dictionary, return true if all keys key are symbols in lower gloomy \n   case or all keys key are symbols in upper case character, else return false. \n   The function should return false is the given impart dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function affair that takes lead an non - negative integer and returns fall an array of the first n\n   integers integer that are prime numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Implement a function affair that takes lead an non - negative integer and returns fall an array of the first n\n   integers integer that are prime numbers numbers pool and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      arr.push(i);\n      isPrime = false;\n    }\n    i++;\n  }\n  if (isPrime) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function countDownTo that takes lead an non - negative integer and returns fall an array of the first n\n   integers integer that are prime numbers numbers pool and greater than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      arr.push(i);\n      isPrime = false;\n    }\n    i++;\n  }\n  if (isPrime) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function countPrimes function that takes lead an non - negative integer and returns an array of prime numbers\n   numbers pool and greater than n.\n  for example:\n  countPrimes(5) => [2,3]\n  countPrimes(11) => [2,3,5,7]\n  countPrimes(0) => []\n  countPrimes(20) => [2,3,5,7,11,13,17,19]\n  countPrimes(1) => []\n  countPrimes(18) => [2,3,5,7,11,13,17]\n  */\nconst countPrimes = (n) => {\n  let arr = [];\n  let i = 2;\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      arr.push(i);\n      isPrime = false;\n    }\n    i++;\n  }\n  if (isPrime) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function countPrimes function that takes lead an non - negative integer and returns an array of prime numbers\n   numbers pool and less than n.\n  for example:\n  countPrimes(5) => [2,3]\n  countPrimes(11) => [2,3,5,7]\n  countPrimes(0) => []\n  countPrimes(20) => [2,3,5,7,11,13,17,19]\n  countPrimes(1) => []\n  countPrimes(18) => [2,3,5,7,11,13,17]\n  */\nconst countPrimesLessThan = (n) => {\n  let arr = [];\n  let i = 2;\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      arr.push(i);\n      isPrime = false;\n    }\n    i++;\n  }\n  if (isPrime) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function countPrimes function that takes lead an non - negative integer and returns an array of prime numbers\n   numbers pool and less than n.\n  for example:\n  countPrimes(5) => [2,3]\n  countPrimes(11) => [2,3,5,7]\n  countPrimes(0) => []\n  countPrimes(20) => [2,3,5,7,11,13,17,19]\n  countPrimes(1) => []\n  countPrimes(18) => [2,3,5,7,11,13,17]\n  */\nconst countPrimesGreaterThan = (n) => {\n  let arr = [];\n  let i = 2;\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      arr.push(i);\n      isPrime = false;\n    }\n    i++;\n  }\n  if (isPrime) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function countPrimes function that takes lead an non - negative integer and returns an array of prime numbers\n   numbers pool and less than n.\n  for example:\n  countPrimes(5) => [2,3]\n  countPrimes(11) => [2,3,5,7]\n  countPrimes(0) => []\n  countPrimes(20) => [2,3,5,7,11,13,17,19]\n  countPrimes(1) => []\n  countPrimes(18) => [2,3,5,7,11,13,17]\n  */\nconst countPrimesLessThanOrEqualTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      arr.push(i);\n      isPrime = false;\n    }\n    i++;\n  }\n  if (isPrime) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function countPrimes function that takes lead an non - negative integer and returns an array of prime numbers\n   numbers pool and less than n.\n  for example:\n  countPrimes(5) => [2,3]\n  countPrimes(11) => [2,3,5,7]\n  countPrimes(0) => []\n  countPrimes(20) => [2,3,5,7,11,13,17,19]\n  countPrimes(1) => []\n  countPrimes(18) => [2,3,5,7,11,13,17]\n  */\nconst countPrimesGreaterThanOrEqualTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      arr.push(i);\n      isPrime = false;\n    }\n    i++;\n  }\n  if (isPrime) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function countPrimes function that takes lead an non - negative integer and returns an array of prime numbers\n   numbers pool and less than n.\n  for example:\n  countPrimes(5) => [2,3]\n  countPrimes(11) => [2,3,5,7]\n  countPrimes(0) => []\n  countPrimes(20) => [2,3,5,7,11,13,17,19]\n  countPrimes(1) => []\n  countPrimes(18) => [2,3,5,7,11,13,17]\n  */\nconst countPrimesEqualTo = (n) => {\n  let arr = [];\n  let i = 2;\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      arr.push(i);\n      isPrime = false;\n    }\n    i++;\n  }\n  if (isPrime) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function countPrimes function that takes lead an non - negative integer and returns an array of prime numbers\n   numbers pool and less than n.\n  for example:\n  countPrimes(5) => [2,3]\n  countPrimes(11) => [2,3,5,7]\n  countPrimes(0) => []\n  countPrimes(20) => [2,3,5,7,11,13,17,19]\n  countPrimes(1) => []\n  countPri", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a % b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a % b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst remainder = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a % b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a + b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst subtract = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a - b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a % b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a % b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst remainder = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a % b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a + b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function affair that takes lead two integers and returns tax return \n   the product of their unit whole digits. \n   Assume simulate the input is always constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst subtract = (a, b) => {\n  let sum = 0;\n  let carry = 0;\n  let temp;\n  while (b > 0) {\n    temp = a - b;\n    sum = sum + temp * b;\n    carry = carry + temp;\n    a = Math.floor(a / b);\n    b = Math.floor(b / 10);\n  }\n  return sum + carry;\n};\n\n/*Complete the function ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given grant a string s, count reckon the number phone number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given grant a string s, count reckon the number phone number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n      vowelsIndex++;\n    }\n  }\n  \n  if (vowelsCount % 2 === 0) {\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, count reckon the number of lowercase capital vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n      vowelsIndex++;\n    }\n  }\n  \n  if (vowelsCount % 2 === 0) {\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, count reckon the number of uppercase capital vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperVowels = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n      vowelsIndex++;\n    }\n  }\n  \n  if (vowelsCount % 2 === 0) {\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, count reckon the number of lowercase capital vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerVowels = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n      vowelsIndex++;\n    }\n  }\n  \n  if (vowelsCount % 2!== 0) {\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, count reckon the number of uppercase capital vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperVowelsVowels = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n      vowelsIndex++;\n    }\n  }\n  \n  if (vowelsCount % 2!== 0) {\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, count reckon the number of lowercase capital vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerVowelsVowelsVowels = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n      vowelsIndex++;\n    }\n  }\n  \n  if (vowelsCount % 2!== 0) {\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, count reckon the number of uppercase capital vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperVowelsVowelsVowelsVowels = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n      vowelsIndex++;\n    }\n  }\n  \n  if (vowelsCount % 2!== 0) {\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, count reckon the number of lowercase capital vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerVowelsVowelsVowelsVowelsVowelsVowels = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n      vowelsIndex++;\n    }\n  }\n  \n  if (vowelsCount % 2!== 0) {\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, count reckon the number of uppercase capital vowels in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperVowelsVowelsVowelsVowelsVowelsVowelsVowelsVowelsVowels = (s) => {\n  let count = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsIndex = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelsCount++;\n      vowelsIndex++;\n    }\n  }\n  \n  if (vowelsCount % 2!== 0) {\n    count++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string, count reckon the number of lowercase capital vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerVowelsVowelsVowelsVowelsVowelsVowelsVowelsVowelsVowelsVowel", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create produce a function routine that takes a value (string chain) representing a number issue \n   and returns the closest cheeseparing integer to it. If the number is equidistant \n   from two integers integer, round it away off from zero. \n   Examples exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create produce a function routine that takes a value (string chain) representing a number issue \n   and returns the closest cheeseparing integer to it. If the number is equidistant \n   from two integers integer, round it away off from zero. \n   Examples exercise\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer2, integer1] = integer2.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const [integer1, integer2] = integer1.split(\".\");\n  const ", "passed": 0, "run_status": 2}
