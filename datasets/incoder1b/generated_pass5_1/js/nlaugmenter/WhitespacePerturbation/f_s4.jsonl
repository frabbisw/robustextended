{"task_id": "JavaScript/0", "prompt": "/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list ofnumbers, are any two n u mbers closer to each other  than  given thresho l d.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const n = numbers.length;\n  const m = numbers[0].length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n1;\n  let n2;\n  let n3;\n  let n4;\n  let n5;\n  let n6;\n  let n7;\n  let n8;\n  let n9;\n  let n10;\n  let n11;\n  let n12;\n  let n13;\n  let n14;\n  let n15;\n  let n16;\n  let n17;\n  let n18;\n  let n19;\n  let n20;\n  let n21;\n  let n22;\n  let n23;\n  let n24;\n  let n25;\n  let n31;\n  let n32;\n  let n33;\n  let n34;\n  let n35;\n  let n36;\n  let n37;\n  let n38;\n  let n39;\n  let n40;\n  let n41;\n  let n42;\n  let n43;\n  let n44;\n  let n45;\n  let n46;\n  let n47;\n  let n48;\n  let n49;\n  let n50;\n  let n51;\n  let n52;\n  let n53;\n  let n54;\n  let n55;\n  let n56;\n  let n57;\n  let n58;\n  let n59;\n  let n60;\n  let n61;\n  let n62;\n  let n63;\n  let n64;\n  let n65;\n  let n66;\n  let n67;\n  let n68;\n  let n69;\n  let n70;\n  let n71;\n  let n72;\n  let n73;\n  let n74;\n  let n75;\n  let n76;\n  let n77;\n  let n78;\n  let n79;\n  let n80;\n  let n81;\n  let n82;\n  let n83;\n  let n84;\n  let n85;\n  let n86;\n  let n87;\n  let n88;\n  let n89;\n  let n90;\n  let n91;\n  let n92;\n  let n93;\n  let n94;\n  let n95;\n  let n96;\n  let n97;\n  let n98;\n  let n99;\n  let n100;\n  let n101;\n  let n102;\n  let n103;\n  let n104;\n  let n105;\n  let n106;\n  let n107;\n  let n108;\n  let n109;\n  let n110;\n  let n111;\n  let n112;\n  let n113;\n  let n114;\n  let n115;\n  let n116;\n  let n117;\n  let n118;\n  let n119;\n  let n120;\n  let n121;\n  let n122;\n  let n123;\n  let n124;\n  let n125;\n  let n126;\n  let n127;\n  let n128;\n  let n129;\n  let n130;\n  let n131;\n  let n132;\n  let n133;\n  let n134;\n  let n135;\n  let n136;\n  let n137;\n  let n138;\n  let n139;\n  let n140;\n  let n141;\n  let n142;\n  let n143;\n  let n144;\n  let n145;\n  let n146;\n  let n147;\n  let n148;\n  let n149;\n  let n150;\n  let n151;\n  let n152;\n  let n153;\n  let n154;\n  let n155;\n  let n156;\n  let n157;\n  let n158;\n  let n159;\n  let n160;\n  let n161;\n  let n162;\n  let n163;\n  let n164;\n  let n165;\n  let n166;\n  let n167;\n  let n168;\n  let n169;\n  let n170;\n  let n171;\n  let n172;\n  let n173;\n  let n174;\n  let n175;\n  let n176;\n  let n177;\n  let n178;\n  let n179;\n  let n180;\n  let n181;\n  let n182;\n  let n183;\n  let n184;\n  let n185;\n  let n186;\n  let n187;\n  let n188;\n  let n189;\n  let n190;\n  let n191;\n  let n192;\n  let n193;\n  let n194;\n  let n195;\n  let n196;\n  let n197;\n  let n198;\n  let n199;\n  let n200;\n  let n201;\n  let n202;\n  let n203;\n  let n204;\n  let n205;\n  let n206;\n  let n207;\n  let n208;\n  let n209;\n  let n210;\n  let n211;\n  let n212;\n  let n213;\n  let n214;\n  let n215;\n  let n216;\n  let n217;\n  let n218;\n  let n219;\n  let n220;\n  let n221;\n  let n222;\n  let n223;\n  let n224;\n  let n225;\n  let n226;\n  let n227;\n  let n228;\n  let n229;\n  let n230;\n  let n231;\n  let n232;\n  let n233;\n  let n234;\n  let n235;\n  let n236;\n  let n237;\n  let n238;\n  let n239;\n  let n240;\n  let n241;\n  let n242;\n  let n243;\n  let n244;\n  let n245;\n  let n246;\n  let n247;\n  let n248;\n  let n249;\n  let n250;\n  let n251;\n  let n252;\n  let n253;\n  let n254;\n  let n255;\n  let n256;\n  let n257;\n  let n258;\n  let n259;\n  let n260;\n  let n261;\n  let n262;\n  let n263;\n  let n264;\n  let n265;\n  let n266;\n  let n267;\n  let n268;\n  let n269;\n  let n270;\n  let n271;\n  let n272;\n  let n273;\n  let n274;\n  let n275;\n  let n276;\n  let n277;\n  let n278;\n  let n279;\n  let n280;\n  let n281;\n  let n282;\n  let n283;\n  let n284;\n  let n285;\n  let n286;\n  let n287;\n  let n288;\n  let n289;\n  let n290;\n  let n291;\n  let n292;\n  let n293;\n  let n294;\n  let n295;\n  let n29", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function isa string containing mu l tiple groups of nested par enthes es. Your goal i s  to\n separate  those group  intoseparate stringsand return the listof those.\n Se parate groups a r e balance d (each open braceis properly clos ed) and not nested within each other\n Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function isa string containing mu l tiple groups of nested par enthes es. Your goal i s  to\n separate  those group  intoseparate stringsand return the listof those.\n Se parate groups a r e balance d (each open braceis properly clos ed) and not nested within each other\n Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_groups_list = [];\n  paren_groups.forEach((group) => {\n    const paren_group = {};\n    const paren_group_parens = group.match(/\\(([^)]+)\\)/g);\n    paren_group_parens.forEach((paren) => {\n      paren_group[paren] = [];\n    });\n    paren_groups_list.push(paren_group);\n  });\n  return paren_groups_list;\n};\n\n/**\n This function will take a string and return a string with all the characters in that string replaced with their corresponding \n character codes.\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" the function will return: \"Hell0rld\".\n Se a string is \"Hello World\" ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/10", "prompt": "/* Testif gniven strig is apalindrome */\nconst is P alindrome = (string) => {  retu rn string == st r ing.split(''). reverse().jo in('') ;\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Testif gniven strig is apalindrome */\nconst is P alindrome = (string) => {  retu rn string == st r ing.split(''). reverse().jo in('') ;\n}\n\n/* Find theshortest palindromethatbeginswi th a supplied s t ring.\n  A lgorithm idea is simple:\n  - Find t he longest postfix of supplied stringthat is a palindrome.\n  - Append to the endof the string reverse of a stringprefix that comes before the pa li ndromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = string\n  let palindromeLength = string.length\n  let palindromePrefix = string\n  let palindromeSuffix = string\n  let palindromePrefixLength = string.length\n  let palindromeSuffixLength = string.length\n  let palindromePrefixReversed = string\n  let palindromeSuffixReversed = string\n  let palindromePrefixReversedLength = string.length\n  let palindromeSuffixReversedLength = string.length\n  let palindromePrefixReversedReversed = string\n  let palindromeSuffixReversedReversed = string\n  let palindromePrefixReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversed = string\n  let palindromeSuffixReversedReversedReversed = string\n  let palindromePrefixReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversed = string\n  let palindromeSuffixReversedReversedReversedReversed = string\n  let palindromePrefixReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversed = string\n  let palindromeSuffixReversedReversedReversedReversedReversed = string\n  let palindromePrefixReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversed = string\n  let palindromeSuffixReversedReversedReversedReversedReversedReversed = string\n  let palindromePrefixReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversed = string\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversed = string\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversed = string\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversed = string\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversed = string\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversed = string\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = string\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedLength = string.length\n  let palindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ap = new Array(n / 2).fill(0).map(() => new Array(n / 2).fill(0));\n  ap[0][0] = n;\n  ap[0][1] = n;\n  for (let i = 1; i < n; i++) {\n    ap[i][0] = ap[i - 1][0] + n;\n    ap[i][1] = ap[i - 1][1] + n;\n  }\n  return ap;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ap = new Array(n / 2).fill(0).map(() => new Array(n / 2).fill(0));\n  ap[0][0] = n;\n  ap[0][1] = n;\n  for (let i = 1; i < n; i++) {\n    ap[i][0] = ap[i - 1][0] + n;\n    ap[i][1] = ap[i - 1][1] + n;\n  }\n  return ap;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ap = new Array(n / 2).fill(0).map(() => new Array(n / 2).fill(0));\n  ap[0][0] = n;\n  ap[0][1] = n;\n  for (let i = 1; i < n; i++) {\n    ap[i][0] = ap[i - 1][0] + n;\n    ap[i][1] = ap[i - 1][1] + n;\n  }\n  return ap;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ap = new Array(n / 2).fill(0).map(() => new Array(n / 2).fill(0));\n  ap[0][0] = n;\n  ap[0][1] = n;\n  for (let i = 1; i < n; i++) {\n    ap[i][0] = ap[i - 1][0] + n;\n    ap[i][1] = ap[i - 1][1] + n;\n  }\n  return ap;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ap = new Array(n / 2).fill(0).map(() => new Array(n / 2).fill(0));\n  ap[0][0] = n;\n  ap[0][1] = n;\n  for (let i = 1; i < n; i++) {\n    ap[i][0] = ap[i - 1][0] + n;\n    ap[i][1] = ap[i - 1][1] + n;\n  }\n  return ap;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ap = new Array(n / 2).fill(0).map(() => new Array(n / 2).fill(0));\n  ap[0][0] = n;\n  ap[0][1] = n;\n  for (let i = 1; i < n; i++) {\n    ap[i][0] = ap[i - 1][0] + n;\n    ap[i][1] = ap[i - 1][1] + n;\n  }\n  return ap;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ap = new Array(n / 2).fill(0).map(() => new Array(n / 2).fill(0));\n  ap[0][0] = n;\n  ap[0][1] = n;\n  for (let i = 1; i < n; i++) {\n    ap[i][0] = ap[i - 1][0] + n;\n    ap[i][1] = ap[i - 1][1] + n;\n  }\n  return ap;\n};\n\n/*\n  Given a positive integer n, youhave to make a p i le of n levels ofstones.  Thefirst level has n stones.  Th e number ofstones  in the next level is:\n      - the ne xt odd numbe rif n is odd.\n    - thenext even number if n is even.\n  Re turn the number of stones ineach level in al ist, where element at index\n  i repr esents the number of stones in the  level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ap = new Array(n / 2).fill(0).map(() => new Array(n / 2).fill(0));\n  ap[0][0] = n;\n  ap[0][1] = n;\n  for (let i = 1; i < n; i++) {\n    ap[i][0] = ap[i - 1][0] + n;\n    ap[i][1] = ap[i - 1][1] + n;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces.Your tas k is\n to split the s t ringintoword s and return  an ar ray ofthe words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the functi on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the functi on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd returns the\n  biggest e ven in teger number th a t isin the ra nge [x, y] i nclusi ve. If\n  there's no such number, the n the function on  should return- 1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = Math.pow(x, 2) + Math.pow(y, 2);\n  let result = Math.pow(num, 0.5) + 1;\n  return result;\n};\n\n/*This function takes two positivenumbers x and ya nd ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two positiveintegers n and m, andy our task is to compute the \n  ave rage of the int e gersfromn th rough m (inc luding  n andm). \n  Round the answer to the  nearest int eg er and convertt hat to bi nary.\n  Ifn is greater than m, ret urn -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let ret = 0;\n  let i = (n / m) * m;\n  let j = Math.ceil(n / m);\n  let k = Math.ceil(n / m);\n  let l = Math.ceil(n / m);\n  let m = Math.ceil(n / m);\n  let n = Math.ceil(n / m);\n  let o = Math.ceil(n / m);\n  let p = Math.ceil(n / m);\n  let q = Math.ceil(n / m);\n  let r = Math.ceil(n / m);\n  let s = Math.ceil(n / m);\n  let t = Math.ceil(n / m);\n  let u = Math.ceil(n / m);\n  let v = Math.ceil(n / m);\n  let w = Math.ceil(n / m);\n  let x = Math.ceil(n / m);\n  let y = Math.ceil(n / m);\n  let z = Math.ceil(n / m);\n  let a = Math.ceil(n / m);\n  let b = Math.ceil(n / m);\n  let c = Math.ceil(n / m);\n  let d = Math.ceil(n / m);\n  let e = Math.ceil(n / m);\n  let f = Math.ceil(n / m);\n  let g = Math.ceil(n / m);\n  let h = Math.ceil(n / m);\n  let i = Math.ceil(n / m);\n  let j = Math.ceil(n / m);\n  let k = Math.ceil(n / m);\n  let l = Math.ceil(n / m);\n  let m = Math.ceil(n / m);\n  let n = Math.ceil(n / m);\n  let o = Math.ceil(n / m);\n  let p = Math.ceil(n / m);\n  let q = Math.ceil(n / m);\n  let r = Math.ceil(n / m);\n  let s = Math.ceil(n / m);\n  let t = Math.ceil(n / m);\n  let u = Math.ceil(n / m);\n  let v = Math.ceil(n / m);\n  let w = Math.ceil(n / m);\n  let x = Math.ceil(n / m);\n  let y = Math.ceil(n / m);\n  let z = Math.ceil(n / m);\n  let a = Math.ceil(n / m);\n  let b = Math.ceil(n / m);\n  let c = Math.ceil(n / m);\n  let d = Math.ceil(n / m);\n  let e = Math.ceil(n / m);\n  let f = Math.ceil(n / m);\n  let g = Math.ceil(n / m);\n  let h = Math.ceil(n / m);\n  let i = Math.ceil(n / m);\n  let j = Math.ceil(n / m);\n  let k = Math.ceil(n / m);\n  let l = Math.ceil(n / m);\n  let m = Math.ceil(n / m);\n  let n = Math.ceil(n / m);\n  let o = Math.ceil(n / m);\n  let p = Math.ceil(n / m);\n  let q = Math.ceil(n / m);\n  let r = Math.ceil(n / m);\n  let s = Math.ceil(n / m);\n  let t = Math.ceil(n / m);\n  let u = Math.ceil(n / m);\n  let v = Math.ceil(n / m);\n  let w = Math.ceil(n / m);\n  let x = Math.ceil(n / m);\n  let y = Math.ceil(n / m);\n  let z = Math.ceil(n / m);\n  let a = Math.ceil(n / m);\n  let b = Math.ceil(n / m);\n  let c = Math.ceil(n / m);\n  let d = Math.ceil(n / m);\n  let e = Math.ceil(n / m);\n  let f = Math.ceil(n / m);\n  let g = Math.ceil(n / m);\n  let h = Math.ceil(n / m);\n  let i = Math.ceil(n / m);\n  let j = Math.ceil(n / m);\n  let k = Math.ceil(n / m);\n  let l = Math.ceil(n / m);\n  let m = Math.ceil(n / m);\n  let n = Math.ceil(n / m);\n  let o = Math.ceil(n / m);\n  let p = Math.ceil(n / m);\n  let q = Math.ceil(n / m);\n  let r = Math.ceil(n / m);\n  let s = Math.ceil(n / m);\n  let t = Math.ceil(n / m);\n  let u = Math.ceil(n / m);\n  let v = Math.ceil(n / m);\n  let w = Math.ceil(n / m);\n  let x = Math.ceil(n / m);\n  let y = Math.ceil(n / m);\n  let z = Math.ceil(n / m);\n  let a = Math.ceil(n / m);\n  let b = Math.ceil(n / m);\n  let c = Math.ceil(n / m);\n  let d = Math.ceil(n / m);\n  let e = Math.ceil(n / m);\n  let f = Math.ceil(n / m);\n  let g = Math.ceil(n / m);\n  let h = Math.ceil(n / m);\n  let i = Math.ceil(n / m);\n  let j = Math.ceil(n / m);\n  let k = Math.ceil(n / m);\n  let l = Math.ceil(n / m);\n  let m = Math.ceil(n / m);\n  let n = Math.ceil(n / m);\n  let o = Math.ceil(n / m);\n  let p = Math.ceil(n / m);\n  let q = Math.ceil(n / m);\n  let r = Math.ceil(n / m);\n  let s = Math.ceil(n / m);\n  let t = Math.ceil(n / m);\n  let u = Math.ceil(n / m);\n  let v = Math.ceil(n / m);\n  let w = Math.ceil(n / m);\n  let x = Math.ceil(n / m);\n  let y = Math.ceil(n / m);\n  let z = Math.ceil(n / m);\n  let a = Math.ceil(n / m);\n  let b = Math.ceil(n / m);\n  let c = Math.ceil(n / m);\n  let d = Math.ceil(n / m);\n  let e = Math.ceil(n / m);\n  let f = Math.ceil(n / m);\n  let g = Math.ceil(n / m);\n  let h = Math.ceil(n / m);\n  let i = Math.ceil(n / m);\n  let j = Math.ceil(n / m);\n  let k = Math.ceil(n / m);\n  let l = Math.ceil(n / m);\n  let m = Math.ceil(n / m);\n  let n = Math.ceil(n / m);\n  let o = Math.ceil(n / m);\n  let p = Math.ceil(n / m);\n  let q = Math.ceil(n / m);\n  let r = Math.ceil(n / m);\n  let s = Math.ceil(n / m);\n  let t = Math.ceil(n / m);\n  let u = Math.ceil(n / m);\n  let v = Math.ceil(n / m);\n  let w = Math.ceil(n / m);\n  let x = Math.ceil(n / m);\n  let y = Math.ceil(n / m);\n  let z = Math.ceil(n / m);\n  let a = Math.ceil(n / m);\n  let b = Math.ceil(n / m);\n  let c = Math.ceil(n / m);\n  let d = Math.ceil(n / m);\n  let e = Math.ceil(n / m);\n  let f = Math.ceil(n / m);\n  let g = Math.ceil(n / m);\n  let h = Math.ceil(n / m);\n  let i = Math.ceil(n / m);\n  let j = Math.ceil(n / m);\n  let k = Math.ceil(n / m);\n  let l = Math.ceil(n / m);\n  let m = Math.ceil(n / m);\n  let n = Math.ceil(n / m);\n  let o = Math.ceil(n / m);\n  let p = Math.ceil(n / m);\n  let q = Math.ceil(n / m);\n  let r = Math.ceil(n / m);\n  let s = Math.ceil(n / m);\n  let t = Math.ceil(n / m);\n  let u = Math.ceil(n / m);\n  let v = Math.ceil(n / m);\n  let w = Math.ceil(n / m);\n  let x = Math.ceil(n / m);\n  let y = Math.ceil(n / m);\n  let z = Math.ceil(n / m);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/104", "prompt": "/*Givena list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena list of positive integers x. return a sor t ed list of all \n elements  thathasn't any even digit.\n\nNote : Returned l ist sh ould be sorted in increasing order.\n \n  For exam pl e:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let l = [];\n  let t = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray , and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\" ,  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray, and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\",  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let res = [];\n  \n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n    let name = \"\";\n    \n    if (num < 10) {\n      name = \"One\";\n    } else if (num < 100) {\n      name = \"Two\";\n    } else if (num < 1000) {\n      name = \"Three\";\n    } else if (num < 10000) {\n      name = \"Four\";\n    } else if (num < 100000) {\n      name = \"Five\";\n    } else if (num < 1000000) {\n      name = \"Six\";\n    } else if (num < 100000000) {\n      name = \"Seven\";\n    } else if (num < 1000000000) {\n      name = \"Eight\";\n    } else if (num < 1000000000000) {\n      name = \"Nine\";\n    }\n    \n    res.push(name);\n  }\n  \n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray, and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\",  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndName = (arr) => {\n  let len = arr.length;\n  let res = [];\n  \n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n    let name = \"\";\n    \n    if (num < 10) {\n      name = \"One\";\n    } else if (num < 100) {\n      name = \"Two\";\n    } else if (num < 1000) {\n      name = \"Three\";\n    } else if (num < 10000) {\n      name = \"Four\";\n    } else if (num < 100000) {\n      name = \"Five\";\n    } else if (num < 1000000) {\n      name = \"Six\";\n    } else if (num < 100000000) {\n      name = \"Seven\";\n    } else if (num < 1000000000) {\n      name = \"Eight\";\n    } else if (num < 1000000000000) {\n      name = \"Nine\";\n    }\n    \n    res.push({\n      name: name,\n      num: num\n    });\n  }\n  \n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray, and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\",  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndNameAndNum = (arr) => {\n  let len = arr.length;\n  let res = [];\n  \n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n    let name = \"\";\n    \n    if (num < 10) {\n      name = \"One\";\n    } else if (num < 100) {\n      name = \"Two\";\n    } else if (num < 1000) {\n      name = \"Three\";\n    } else if (num < 10000) {\n      name = \"Four\";\n    } else if (num < 100000) {\n      name = \"Five\";\n    } else if (num < 1000000) {\n      name = \"Six\";\n    } else if (num < 100000000) {\n      name = \"Seven\";\n    } else if (num < 1000000000) {\n      name = \"Eight\";\n    } else if (num < 1000000000000) {\n      name = \"Nine\";\n    }\n    \n    res.push({\n      name: name,\n      num: num\n    });\n  }\n  \n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray, and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\",  \"Four\",\"Five\", \"Six\", \"Seven\", \"Eight\", \"N ine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLengthAndNameAndNumAndName = (arr) => {\n  let len = arr.length;\n  let res = [];\n  \n  for (let i = 0; i < len; i++) {\n    let num = arr[i];\n    let name = \"\";\n    \n    if (num < 10) {\n      name = \"One\";\n    } else if (num < 100) {\n      name = \"Two\";\n    } else if (num < 1000) {\n      name = \"Three\";\n    } else if (num < 10000) {\n      name = \"Four\";\n    } else if (num < 100000) {\n      name = \"Five\";\n    } else if (num < 1000000) {\n      name = \"Six\";\n    } else if (num < 100000000) {\n      name = \"Seven\";\n    } else if (num < 1000000000) {\n      name = \"Eight\";\n    } else if (num < 1000000000000) {\n      name = \"Nine\";\n    }\n    \n    res.push({\n      name: name,\n      num: num\n    });\n  }\n  \n  return res;\n};\n\n/*\n  Given an array of integers, sort the integers th a t are between 1 and 9 incl usive, \n  reverse ther esultingarray, and then r eplace  each digit by its correspondingname  from\n  \"One \",  \"Two\", \"Three\",  \"Four", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i iseven \n  or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  even or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(2 * i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  odd or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(3 * i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  odd or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(4 * i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  odd or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(5 * i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  odd or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(6 * i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  odd or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(7 * i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  odd or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(8 * i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  odd or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(9 * i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  odd or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actorial of i is the multiplication of the nu m bers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(10 * i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function f that takes n as a param e ter,\n  and returns a listof siz e n, such thatt he valueof th e element at  index  i is the factorial of i if i is\n  odd or the su mof numbers from 1 to i ot herwise.\n i starts from 1.\n  the f actor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1 , n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenPalindrome = 0, oddPalindrome = 0;\n  let evenPalindromeArray = [], oddPalindromeArray = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindrome++;\n      evenPalindromeArray.push(i);\n    } else {\n      oddPalindrome++;\n      oddPalindromeArray.push(i);\n    }\n  }\n  return [evenPalindrome, oddPalindrome];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindrome = (n) => {\n  let evenPalindrome = 0, oddPalindrome = 0;\n  let evenPalindromeArray = [], oddPalindromeArray = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindrome++;\n      evenPalindromeArray.push(i);\n    } else {\n      oddPalindrome++;\n      oddPalindromeArray.push(i);\n    }\n  }\n  return [evenPalindrome, oddPalindrome];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithR = (n) => {\n  let evenPalindrome = 0, oddPalindrome = 0;\n  let evenPalindromeArray = [], oddPalindromeArray = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindrome++;\n      evenPalindromeArray.push(i);\n    } else {\n      oddPalindrome++;\n      oddPalindromeArray.push(i);\n    }\n  }\n  return [evenPalindrome, oddPalindrome, evenPalindromeArray.length, oddPalindromeArray.length];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithRAndN = (n) => {\n  let evenPalindrome = 0, oddPalindrome = 0;\n  let evenPalindromeArray = [], oddPalindromeArray = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindrome++;\n      evenPalindromeArray.push(i);\n    } else {\n      oddPalindrome++;\n      oddPalindromeArray.push(i);\n    }\n  }\n  return [evenPalindrome, oddPalindrome, evenPalindromeArray.length, oddPalindromeArray.length];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithRAndNAndR = (n) => {\n  let evenPalindrome = 0, oddPalindrome = 0;\n  let evenPalindromeArray = [], oddPalindromeArray = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      evenPalindrome++;\n      evenPalindromeArray.push(i);\n    } else {\n      oddPalindrome++;\n      oddPalindromeArray.push(i);\n    }\n  }\n  return [evenPalindrome, oddPalindrome, evenPalindromeArray.length, oddPalindromeArray.length];\n};\n\n/*\n  Given a positive integer n, return a tuple thath as the number of even andodd\n integer palindr o mes thatfallwithin the r ange(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of digits> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of zeros> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 0\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOnes which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of ones> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countOnes([]) == 0\n  >>> countOnes([-1, 11, -11]) == 1\n  >>> countOnes([1, 1, 2]) == 1\n  */\nconst countOnes = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of odds> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 1\n  >>> countOdds([1, 1, 2]) == 1\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of evens> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 1\n  >>> countEvens([1, 1, 2]) == 1\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countDivisibles which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of divisibles> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countDivisibles([]) == 0\n  >>> countDivisibles([-1, 11, -11]) == 1\n  >>> countDivisibles([1, 1, 2]) == 1\n  */\nconst countDivisibles = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiples which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of multiples> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countMultiples([]) == 0\n  >>> countMultiples([-1, 11, -11]) == 1\n  >>> countMultiples([1, 1, 2]) == 1\n  */\nconst countMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countPowers which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of powers> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countPowers([]) == 0\n  >>> countPowers([-1, 11, -11]) == 1\n  >>> countPowers([1, 1, 2]) == 1\n  */\nconst countPowers = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countPowers2 which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of powers> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countPowers2([]) == 0\n  >>> countPowers2([-1, 11, -11]) == 1\n  >>> countPowers2([1, 1, 2]) == 1\n  */\nconst countPowers2 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countPowers3 which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of powers> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countPowers3([]) == 0\n  >>> countPowers3([-1, 11, -11]) == 1\n  >>> countPowers3([1, 1, 2]) == 1\n  */\nconst countPowers3 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countPowers4 which takes an arrayo f integers and returns\n  t he num ber of elements which hasa su m of powers> 0.\n If a number is negative, then its fi rst signed d ig it will be nega t ive:\n  e. g.-123 has signeddigits -1, 2, an d 3.\n  >>> countPowers4([]) == 0\n  >>> countPowers4([-1, 11, -11]) == 1\n  >>> countPowers4([1, 1, 2]) == 1\n  */\nconst countPowers4 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[ 2 ], ..., arr[N].The\n  numbe rs inthe array willb e randomly ord ered. Your t ask is  to determine if  it is possible toget an array  s orted in non-de c reasing o rder by performing\n  the following  operation on the given array:\n      You area llowed to perform right shift operat ion any numberof times.\n  \n  Oneright shift operation means shi ft ing all elements of the arr ay by one\n  position in the rightdire ct ion. The l ast element  of the arra y will be moved to\n  the startin g po sition in the array i.e. 0th  index. \n\n  Ifit ispossible t o obtain the sor tedarray by performing the aboveoperation\n  thenreturn true elser eturn false.\n  If thegiven array is empty then return true.\n\n N o te : The given lis t is guar anteed to ha ve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[ 2 ],..., arr[N].The\n  numbe rs inthe array willb e randomly ord ered. Your t ask is  to determine if  it is possible toget an array  s orted in non-de c reasing o rder by performing\n  the following  operation on the given array:\n      You area llowed to perform right shift operat ion any numberof times.\n  \n  Oneright shift operation means shi ft ing all elements of the arr ay by one\n  position in the rightdire ct ion. The l ast element  of the arra y will be moved to\n  the startin g po sition in the array i.e. 0th  index. \n\n  Ifit ispossible t o obtain the sor tedarray by performing the aboveoperation\n  thenreturn true elser eturn false.\n  If thegiven array is empty then return true.\n\n N o te : The given lis t is guar anteed to ha ve unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let t = true;\n  let l = arr.length;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = l - 1;\n  let r = Math.floor(Math.random() * l);\n  let r = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binar y XORon these inputs and return res ult also asa stri ng.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let res = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;\n  let l;\n  let t;\n  let k;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function th a t takes two listsof numbe rs,\n and determinesw hether itis p ossible to p erform  an exchange of elements\n  between th em to make l st 1 a list of onl y  even num bers.\n  There is no limit on the nu mber of exchanged elements between lst1 and l s t2.\n  If it is possible to exchangeelementsbetween the lst1 and lst2  to make\n  all the elements ofls t1 to be even, return \"YES\" .\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a function th a t takes two listsof numbe rs,\n and determinesw hether itis p ossible to p erform  an exchange of elements\n  between th em to make l st 1 a list of onl y  even num bers.\n  There is no limit on the nu mber of exchanged elements between lst1 and l s t2.\n  If it is possible to exchangeelementsbetween the lst1 and lst2  to make\n  all the elements ofls t1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const [num1, num2] = lst1.sort((a, b) => a - b);\n  const [num3, num4] = lst2.sort((a, b) => a - b);\n  if (num1 === num2 && num1 === num3 && num1 === num4) {\n    return \"YES\";\n  }\n  if (num2 === num1 && num2 === num3 && num2 === num4) {\n    return \"YES\";\n  }\n  if (num3 === num1 && num3 === num2 && num3 === num4) {\n    return \"YES\";\n  }\n  if (num4 === num1 && num4 === num2 && num4 === num3) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order. Your function should return true if\n  the array is sorted in ascending order, and false otherwise.\n  For example:\n  arr = [1, 5, 3, 2]\n  arrSorted(arr) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => true\n  arrSorted([4, 3, 2, 1]) => false\n  arrSorted([4, 3, 2, 1]) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/111", "prompt": "/*Givena string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const results = {};\n  let count = 0;\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] in results) {\n      results[letters[i]] += 1;\n    } else {\n      results[letters[i]] = 1;\n    }\n  }\n  for (let key in results) {\n    if (results[key] > count) {\n      count = results[key];\n    }\n  }\n  return count;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const results = {};\n  let count = 0;\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] in results) {\n      results[letters[i]] += 1;\n    } else {\n      results[letters[i]] = 1;\n    }\n  }\n  for (let key in results) {\n    if (results[key] > count) {\n      count = results[key];\n    }\n  }\n  return count;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const results = {};\n  let count = 0;\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] in results) {\n      results[letters[i]] += 1;\n    } else {\n      results[letters[i]] = 1;\n    }\n  }\n  for (let key in results) {\n    if (results[key] > count) {\n      count = results[key];\n    }\n  }\n  return count;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const results = {};\n  let count = 0;\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] in results) {\n      results[letters[i]] += 1;\n    } else {\n      results[letters[i]] = 1;\n    }\n  }\n  for (let key in results) {\n    if (results[key] > count) {\n      count = results[key];\n    }\n  }\n  return count;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const results = {};\n  let count = 0;\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] in results) {\n      results[letters[i]] += 1;\n    } else {\n      results[letters[i]] = 1;\n    }\n  }\n  for (let key in results) {\n    if (results[key] > count) {\n      count = results[key];\n    }\n  }\n  return count;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const results = {};\n  let count = 0;\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] in results) {\n      results[letters[i]] += 1;\n    } else {\n      results[letters[i]] = 1;\n    }\n  }\n  for (let key in results) {\n    if (results[key] > count) {\n      count = results[key];\n    }\n  }\n  return count;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const results = {};\n  let count = 0;\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i] in results) {\n      results[letters[i]] += 1;\n    } else {\n      results[letters[i]] = 1;\n    }\n  }\n  for (let key in results) {\n    if (results[key] > count) {\n      count = results[key];\n    }\n  }\n  return count;\n};\n\n/*Given a string representing a space separated low e rcase letters, return a di ctiona ry\n  of the let t er with the mo st repetitio n andcontaining the corresponding count.\n If severalle tters have thes ame occur rence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n We are given two strings s and c, you have to deleted all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n We are given two strings s and c, you have to deleted all the charact ers in  s that are equ a l toanychara cter in c\n then c heck if the result string is palindro me.\n A stri ng  is called pali n drome ifitreads the same backward as forwa rd.\n You should return a tuple containing th e  result string and true/false for th e check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let len = s.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      result += s[i];\n      i++;\n      j--;\n    } else {\n      result += c;\n      isPalindrome = false;\n      i++;\n      j--;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*\n Task\n You are given a string s and a number n, you have to delete all the characteres that are a number in s.\n Example\n s = \"123\", n = 2, the result should be \"123\"\n s = \"123\", n = -1, the result should be \"123\"\n s = \"123\", n = 0, the result should be \"123\"\n s = \"123\", n = 1, the result should be \"123\"\n s = \"123\", n = 2, the result should be \"123\"\n s = \"123\", n = 4, the result should be \"123\"\n s = \"123\", n = 5, the result should be \"123\"\n s = \"123\", n = 6, the result should be \"123\"\n s = \"123\", n = 7, the result should be \"123\"\n s = \"123\", n = 8, the result should be \"123\"\n s = \"123\", n = 9, the result should be \"123\"\n s = \"123\", n = 10, the result should be \"123\"\n s = \"123\", n = 11, the result should be \"123\"\n s = \"123\", n = 12, the result should be \"123\"\n s = \"123\", n = 13, the result should be \"123\"\n s = \"123\", n = 14, the result should be \"123\"\n s = \"123\", n = 15, the result should be \"123\"\n s = \"123\", n = 16, the result should be \"123\"\n s = \"123\", n = 17, the result should be \"123\"\n s = \"123\", n = 18, the result should be \"123\"\n s = \"123\", n = 19, the result should be \"123\"\n s = \"123\", n = 20, the result should be \"123\"\n s = \"123\", n = 21, the result should be \"123\"\n s = \"123\", n = 22, the result should be \"123\"\n s = \"123\", n = 23, the result should be \"123\"\n s = \"123\", n = 24, the result should be \"123\"\n s = \"123\", n = 25, the result should be \"123\"\n s = \"123\", n = 26, the result should be \"123\"\n s = \"123\", n = 27, the result should be \"123\"\n s = \"123\", n = 28, the result should be \"123\"\n s = \"123\", n = 29, the result should be \"123\"\n s = \"123\", n = 30, the result should be \"123\"\n s = \"123\", n = 31, the result should be \"123\"\n s = \"123\", n = 32, the result should be \"123\"\n s = \"123\", n = 33, the result should be \"123\"\n s = \"123\", n = 34, the result should be \"123\"\n s = \"123\", n = 35, the result should be \"123\"\n s = \"123\", n = 36, the result should be \"123\"\n s = \"123\", n = 37, the result should be \"123\"\n s = \"123\", n = 38, the result should be \"123\"\n s = \"123\", n = 39, the result should be \"123\"\n s = \"123\", n = 39, the result should be \"123\"\n s = \"123\", n = 40, the result should be \"123\"\n s = \"123\", n = 41, the result should be \"123\"\n s = \"123\", n = 42, the result should be \"123\"\n s = \"123\", n = 43, the result should be \"123\"\n s = \"123\", n = 44, the result should be \"123\"\n s = \"123\", n = 45, the result should be \"123\"\n s = \"123\", n = 46, the result should be \"123\"\n s = \"123\", n = 47, the result should be \"123\"\n s = \"123\", n = 48, the result should be \"123\"\n s = \"123\", n = 49, the result should be \"123\"\n s = \"123\", n = 30, the result should be \"123\"\n s = \"123\", n = 31, the result should be \"123\"\n s = \"123\", n = 32, the result should be \"123\"\n s = \"123\", n = 33, the result should be \"123\"\n s = \"123\", n = 34, the result should be \"123\"\n s = \"123\", n = 35, the result should be \"123\"\n s = \"123\", n = 36, the result should be \"123\"\n s = \"123\", n = 37, the result should be \"123\"\n s = \"123\", n = 38, the result should be \"123\"\n s = \"123\", n = 39, the result should be \"123\"\n s = \"123\", n = 39, the result should be \"123\"\n s = \"123\", n = 40, the result should be \"123\"\n s = \"123\", n = 41, the result should be \"123\"\n s = \"123\", n = 42, the result should be \"123\"\n s = \"123\", n = 43, the result should be \"123\"\n s = \"123\", n = 44, the result should be \"123\"\n s = \"123\", n = 45, the result should be \"123\"\n s = \"123\", n = 46, the result should be \"123\"\n s = \"123\", n = 47, the result should be \"123\"\n s = \"123\", n = 48, the result should be \"123\"\n s = \"123\", n = 49, the result should be \"123\"\n s = \"123\", n = 30, the result should be \"123\"\n s = \"123\", n = 31, the result should be \"123\"\n s = \"123\", n = 32, the result should be \"123\"\n s = \"123\", n = 33, the result should be \"123\"\n s = \"123\", n = 34, the result should be \"123\"\n s = \"123\", n = 35, the result should be \"123\"\n s = \"123\", n = 36, the result should be \"123\"\n s = \"123\", n = 37, the result should be \"123\"\n s = \"123\", n = 38, the result should be \"123\"\n s = \"123\", n = 39, the result should be \"123\"\n s = \"123\", n = 39, the result should be \"123\"\n s = \"123\", n = 40, the result should be \"123\"\n s = \"123\", n = 41, the result should be \"123\"\n s = \"123\", n = 42, the result should be \"123\"\n s = \"123\", n = 43, the result should be \"123\"\n s = \"123\", n = 44, the result should be \"123\"\n s = \"123\", n = 45, the result should be \"123\"\n s = \"123\", n = 46, the result should be \"123\"\n s = \"123\", n = 47, the result should be \"123\"\n s = \"123\", n = 48, the result should be \"123\"\n s = \"123\", n = 49, the result should be \"123\"\n s = \"123\", n = 30, the result should be \"123\"\n s = \"123\", n = 31, the result should be \"123\"\n ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/113", "prompt": "/*Givena list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOdd = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        numOdd++;\n      }\n    }\n    if (numOdd % 2 === 0) {\n      result.push(numOdd);\n    }\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of even elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numEven = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        numEven++;\n      }\n    }\n    if (numEven % 2!== 0) {\n      result.push(numEven);\n    }\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOdd = 0;\n    let numEven = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        numOdd++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        numEven++;\n      }\n    }\n    if (numOdd % 2 === 0) {\n      result.push(numOdd);\n    }\n    if (numEven % 2 === 0) {\n      result.push(numEven);\n    }\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOdd = 0;\n    let numEven = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        numOdd++;\n      }\n    }\n    if (numOdd % 2!== 0) {\n      result.push(numOdd);\n    }\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOdd = 0;\n    let numEven = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        numOdd++;\n      }\n    }\n    if (numOdd % 2 === 0) {\n      result.push(numOdd);\n    }\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let numOdd = 0;\n    let numEven = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        numOdd++;\n      }\n    }\n    if (numOdd % 2 === 0) {\n      result.push(numOdd);\n    }\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consis t s of only digits,return a  list. \n  Each element i oftheoutpu t should be\"the n umber of odd elements in the\n  string  i of the in pu t.\" where all t h e i's sho uld be replaced bythe number\n  ofodd digits in the i'th string of the input.\n\n  >>> oddEvenCount(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimu m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      min = Math.min(min, sum);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum m  sum of any non-empty sub- array  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      max = Math.max(max, sum);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      min = Math.min(min, sum);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum m  sum of any non-empty sub- array  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      max = Math.max(max, sum);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      min = Math.min(min, sum);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum m  sum of any non-empty sub- array  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      max = Math.max(max, sum);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      min = Math.min(min, sum);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum m  sum of any non-empty sub- array  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      max = Math.max(max, sum);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      min = Math.min(min, sum);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum m  sum of any non-empty sub- array  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      max = Math.max(max, sum);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      min = Math.min(min, sum);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum m  sum of any non-empty sub- array  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      max = Math.max(max, sum);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum m  sum of any non-empty sub- array  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == -1\n  minSubArraySum([-1, -2, -3]) == -2\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let min = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      min = Math.min(min, sum);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum m  sum of any non-empty sub- array  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      sum += nums[i];\n      max = Math.max(max, sum);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the minimum m  sum of any non-empty sub- array  of nums.\n  Example\n  min", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Eachr ow represents a single wel l,\n  a nd each 1 in ar ow representsa single uni t of w ater.\n Each well has a corresponding  bucket that  c an be used to e x tract wat erfrom it, \n  andall buckets have  the same capacity.\n  Your task is touse the buckets to empty the wells.\n  Output  the number oftimes you need tol ower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Eachr ow represents a single wel l,\n  a nd each 1 in ar ow representsa single uni t of w ater.\n Each well has a corresponding  bucket that  c an be used to e x tract wat erfrom it, \n  andall buckets have  the same capacity.\n  Your task is touse the buckets to empty the wells.\n  Output  the number oftimes you need tol ower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += (grid[i][j + 1] === 0? 1 : 0) + (grid[i][j - 1] === 0? 1 : 0);\n      }\n    }\n  }\n  return result + Math.max(...grid.map(row => row.length));\n};\n\n// https://leetcode.com/problems/maximum-flow-problem/\nconst maxFlow = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result.push(row);\n  }\n  const result2 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result2.push(row);\n  }\n  const result3 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result3.push(row);\n  }\n  const result4 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result4.push(row);\n  }\n  const result5 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result5.push(row);\n  }\n  const result6 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result6.push(row);\n  }\n  const result7 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result7.push(row);\n  }\n  const result8 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result8.push(row);\n  }\n  const result9 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result9.push(row);\n  }\n  const result10 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result10.push(row);\n  }\n  const result11 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result11.push(row);\n  }\n  const result12 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result12.push(row);\n  }\n  const result13 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result13.push(row);\n  }\n  const result14 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result14.push(row);\n  }\n  const result15 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result15.push(row);\n  }\n  const result16 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result16.push(row);\n  }\n  const result17 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result17.push(row);\n  }\n  const result18 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result18.push(row);\n  }\n  const result19 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result19.push(row);\n  }\n  const result20 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result20.push(row);\n  }\n  const result21 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result21.push(row);\n  }\n  const result22 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result22.push(row);\n  }\n  const result23 = [];\n  for (let i = 0; i < n; i++) {\n    const row = [];\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        row.push(1);\n      } else {\n        row.push(0);\n      }\n    }\n    result23.push(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have tosort an array of non-n e gative integers accordingto\n  n umber of ones i n  their binaryrepresentati on inascending order.  For similar number  of ones, so rt  based on decim a l value.\n It mustbe implemented like this :\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have tosort an array of non-n e gative integers accordingto\n  n umber of ones i n  their binaryrepresentati on inascending order.  For similar number  of ones, so rt  based on decim a l value.\n It mustbe implemented like this :\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArray = [];\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/117", "prompt": "/*Givena string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena string s and a natural number n, you have been tasked to implement   a fu nction that ret u rns a list ofall words fr om str ing s that contain exactly \n  n conso nants, in or de r these words a p pear in t hestring s.\n  If the string s is e mpty then the function should return an empty list.\n  Note: you may assume the inp ut string contains only letters an d spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = []\n  let word = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Yourtask is to find the cl o sest vowel that stands bet ween   two consonant s  from therigh t side of th e word  (casesensitive).\n  \n  Vowels in the  beginning a nd  ending doesn't count. Re turn emptystring if you didn't\n  f ind any vowel met the above condition. \n\n  Yo u  may assume that the given string co ntains Englishletter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Yourtask is to find the cl o sest vowel that stands bet ween   two consonant s  from therigh t side of th e word  (casesensitive).\n  \n  Vowels in the  beginning a nd  ending doesn't count. Re turn emptystring if you didn't\n  f ind any vowel met the above condition. \n\n  Yo u  may assume that the given string co ntains Englishletter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsCount69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsCount70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsCount71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsCount72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsCount73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsCount74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsCount75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsCount76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsCount77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsCount78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsCount79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsCount80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsCount81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsCount82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsCount83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsCount84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsCount85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsCount86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsCount87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsCount88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsCount89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsCount90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsCount91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsCount92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsCount93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsCount94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsCount95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsCount96 = 0;\n  let vowelsIndex97 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both string s  consist of open\n parenth eses ' (' or close par e ntheses ')' on ly.\n  Your j ob isto check if it is possible to concate natethe two  s trings in\n  som e  order, t hat the resulting string will be go od.\n A string S is considered to be good ifa nd only if all parentheses in S\n  ar e balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, both string s  consist of open\n parenth eses'(' or close par e ntheses ')' on ly.\n  Your j ob isto check if it is possible to concate natethe two  s trings in\n  som e  order, t hat the resulting string will be go od.\n A string S is considered to be good ifa nd only if all parentheses in S\n  ar e balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res.push('Yes')\n    } else if (lst[i] === ')') {\n      res.push('No')\n    } else {\n      res.push('No')\n    }\n  }\n  return res\n}\n\n/* You are given a string S and an integer k. Return the number of ways to make S of length k\n using only parentheses.\n A good string S is one that has all the parentheses balanced.\n A bad string S is one that has all the parentheses unbalanced.\n A bad string S cannot be made using parentheses.\n A bad string S cannot be made using parentheses.\n Examples:\n countParens('(())', 2) == '2'\n countParens('(())', 3) == '1'\n countParens('(())', 4) == '0'\n countParens('(())', 5) == '1'\n countParens('(())', 6) == '2'\n countParens('(())', 7) == '1'\n countParens('(())', 8) == '0'\n countParens('(())', 9) == '1'\n countParens('(())', 10) == '2'\n countParens('(())', 11) == '1'\n countParens('(())', 12) == '2'\n countParens('(())', 13) == '1'\n countParens('(())', 14) == '0'\n countParens('(())', 15) == '1'\n countParens('(())', 16) == '2'\n countParens('(())', 17) == '1'\n countParens('(())', 18) == '2'\n countParens('(())', 19) == '1'\n countParens('(())', 20) == '2'\n countParens('(())', 21) == '1'\n countParens('(())', 22) == '2'\n countParens('(())', 23) == '1'\n countParens('(())', 24) == '0'\n countParens('(())', 25) == '1'\n countParens('(())', 26) == '2'\n countParens('(())', 27) == '1'\n countParens('(())', 28) == '2'\n countParens('(())', 29) == '1'\n countParens('(())', 30) == '2'\n countParens('(())', 31) == '1'\n countParens('(())', 32) == '2'\n countParens('(())', 33) == '1'\n countParens('(())', 34) == '2'\n countParens('(())', 35) == '1'\n countParens('(())', 36) == '2'\n countParens('(())', 37) == '1'\n countParens('(())', 38) == '2'\n countParens('(())', 39) == '1'\n countParens('(())', 40) == '2'\n countParens('(())', 41) == '1'\n countParens('(())', 42) == '2'\n countParens('(())', 43) == '1'\n countParens('(())', 44) == '2'\n countParens('(())', 45) == '1'\n countParens('(())', 46) == '2'\n countParens('(())', 47) == '1'\n countParens('(())', 48) == '2'\n countParens('(())', 49) == '1'\n countParens('(())', 50) == '2'\n countParens('(())', 51) == '1'\n countParens('(())', 52) == '2'\n countParens('(())', 53) == '1'\n countParens('(())', 54) == '2'\n countParens('(())', 55) == '1'\n countParens('(())', 56) == '2'\n countParens('(())', 57) == '1'\n countParens('(())', 58) == '2'\n countParens('(())', 59) == '1'\n countParens('(())', 60) == '2'\n countParens('(())', 61) == '1'\n countParens('(())', 62) == '2'\n countParens('(())', 63) == '1'\n countParens('(())', 64) == '2'\n countParens('(())', 65) == '1'\n countParens('(())', 66) == '2'\n countParens('(())', 67) == '1'\n countParens('(())', 68) == '2'\n countParens('(())', 69) == '1'\n countParens('(())', 70) == '2'\n countParens('(())', 71) == '1'\n countParens('(())', 72) == '2'\n countParens('(())', 73) == '1'\n countParens('(())', 74) == '2'\n countParens('(())', 75) == '1'\n countParens('(())', 76) == '2'\n countParens('(())', 77) == '1'\n countParens('(())', 78) == '2'\n countParens('(())', 79) == '1'\n countParens('(())', 80) == '2'\n countParens('(())', 81) == '1'\n countParens('(())', 82) == '2'\n countParens('(())', 83) == '1'\n countParens('(())', 84) == '2'\n countParens('(())', 85) == '1'\n countParens('(())', 86) == '2'\n countParens('(())', 87) == '1'\n countParens('(())', 88) == '2'\n countParens('(())', 89) == '1'\n countParens('(())', 90) == '2'\n countParens('(())', 91) == '1'\n countParens('(())', 92) == '2'\n countParens('(())', 93) == '1'\n countParens('(())', 94) == '2'\n countParens('(())', 95) == '1'\n countParens('(())', 96) == '2'\n countParens('(())', 97) == '1'\n countParens('(())', 98) == '2'\n countParens('(())', 99) == '1'\n countParens('(())', 100) == '2'\n countParens('(())', 101) == '1'\n countParens('(())', 102) == '2'\n countParens('(())', 103) == '1'\n countParens('(())', 104) == '2'\n countParens('(())', 105) == '1'\n countParens('(())', 106) == '2'\n countParens('(())', 107) == '1'\n countParens('(())', 108) == '2'\n countParens('(())', 109) == '1'\n countParens('(())', 110) == '2'\n countParens('(())', 111) == '1'\n countParens('(())', 112) == '2'\n countParens('(())', 113) == '1'\n count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one.R eturn the first one in cas e of m ultiple\n  strin g s ofthesamelength. Retu rn nul l in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one.R eturn the first one in cas e of m ultiple\n  strin g s ofthesamelength. Retu rn nul l in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const maxLength = 0;\n  const longestString = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    const stringLength = strings[i].length;\n    if (stringLength > maxLength) {\n      maxLength = stringLength;\n      longestString = strings[i];\n    }\n  }\n  return longestString;\n};\n\n/* Given a string, return its first letter in uppercase.\n  >>> first('hello')\n  'H'\n  >>> first('HELLO')\n  'H'\n  >>> first('HELLOWORLD')\n  'H'\n  >>> first('HELLOWORLDHELLO')\n  'H'\n  */\nconst first = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its last letter in uppercase.\n  >>> last('hello')\n  'L'\n  >>> last('HELLO')\n  'L'\n  >>> last('HELLOWORLD')\n  'L'\n  >>> last('HELLOWORLDHELLO')\n  'L'\n  */\nconst last = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(0);\n};\n\n/* Given a string, return its first letter in lowercase.\n  >>> first('hello')\n  'h'\n  >>> first('HELLO')\n  'H'\n  >>> first('HELLOWORLD')\n  'h'\n  >>> first('HELLOWORLDHELLO')\n  'h'\n  */\nconst firstLower = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Given a string, return its last letter in lowercase.\n  >>> last('hello')\n  'l'\n  >>> last('HELLO')\n  'l'\n  >>> last('HELLOWORLD')\n  'l'\n  >>> last('HELLOWORLDHELLO')\n  'l'\n  */\nconst lastLower = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(0);\n};\n\n/* Given a string, return its first letter in uppercase with first letter lowercased.\n  >>> firstLower('hello')\n  'H'\n  >>> firstLower('HELLO')\n  'h'\n  >>> firstLower('HELLOWORLD')\n  'H'\n  >>> firstLower('HELLOWORLDHELLO')\n  'h'\n  */\nconst firstLowerFirst = (string) => {\n  return firstLower(first(string));\n};\n\n/* Given a string, return its last letter in uppercase with first letter lowercased.\n  >>> lastLower('hello')\n  'L'\n  >>> lastLower('HELLO')\n  'l'\n  >>> lastLower('HELLOWORLD')\n  'L'\n  >>> lastLower('HELLOWORLDHELLO')\n  'l'\n  */\nconst lastLowerFirst = (string) => {\n  return lastLower(first(string));\n};\n\n/* Given a string, return its first letter in uppercase with first letter lowercased.\n  >>> firstLowerFirst('hello')\n  'H'\n  >>> firstLowerFirst('HELLO')\n  'h'\n  >>> firstLowerFirst('HELLOWORLD')\n  'H'\n  >>> firstLowerFirst('HELLOWORLDHELLO')\n  'h'\n  */\nconst firstLowerLast = (string) => {\n  return firstLowerFirst(last(string));\n};\n\n/* Given a string, return its last letter in uppercase with first letter lowercased.\n  >>> lastLowerFirst('hello')\n  'L'\n  >>> lastLowerFirst('HELLO')\n  'l'\n  >>> lastLowerFirst('HELLOWORLD')\n  'L'\n  >>> lastLowerFirst('HELLOWORLDHELLO')\n  'l'\n  */\nconst lastLowerLast = (string) => {\n  return lastLowerFirst(last(string));\n};\n\n/* Given a string, return its first letter in uppercase with first letter lowercased.\n  >>> firstLowerLast('hello')\n  'L'\n  >>> firstLowerLast('HELLO')\n  'l'\n  >>> firstLowerLast('HELLOWORLD')\n  'L'\n  >>> firstLowerLast('HELLOWORLDHELLO')\n  'l'\n  */\nconst firstUpperFirst = (string) => {\n  return first(firstLowerFirst(string));\n};\n\n/* Given a string, return its last letter in uppercase with first letter lowercased.\n  >>> lastUpperFirst('hello')\n  'L'\n  >>> lastUpperFirst('HELLO')\n  'l'\n  >>> lastUpperFirst('HELLOWORLD')\n  'L'\n  >>> lastUpperFirst('HELLOWORLDHELLO')\n  'l'\n  */\nconst lastUpperFirst = (string) => {\n  return last(firstLowerFirst(string));\n};\n\n/* Given a string, return its first letter in uppercase with first letter lowercased.\n  >>> firstUpperFirst('hello')\n  'H'\n  >>> firstUpperFirst('HELLO')\n  'h'\n  >>> firstUpperFirst('HELLOWORLD')\n  'H'\n  >>> firstUpperFirst('HELLOWORLDHELLO')\n  'h'\n  */\nconst firstUpperLast = (string) => {\n  return first(firstLowerLast(string));\n};\n\n/* Given a string, return its last letter in uppercase with first letter lowercased.\n  >>> lastUpperLast('hello')\n  'L'\n  >>> lastUpperLast('HELLO')\n  'l'\n  >>> lastUpperLast('HELLOWORLD')\n  'L'\n  >>> lastUpperLast('HELLOWORLDHELLO')\n  'l'\n  */\nconst lastUpperLast = (string) => {\n  return last(firstLowerLast(string));\n};\n\n/* Given a string, return its first letter in lowercase.\n  >>> first('hello')\n  'h'\n  >>> first('HELLO')\n  'H'\n  >>> first('HELLOWORLD')\n  'h'\n  >>> first('HELLOWORLDHELLO')\n  'h'\n  */\nconst firstLower = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Given a string, return its last letter in lowercase.\n  >>> last('hello')\n  'l'\n  >>> last('HELLO')\n  'L'\n  >>> last('HELLOWORLD')\n  'l'\n  >>> last('HELLOWORLDHELLO')\n  'l'\n  */\nconst lastLower = (string) => {\n  return string.charAt(string.length - 1) + string.charAt(0);\n};\n\n/* Given a string, return its first letter in uppercase with first letter lowercased.\n  >>> firstLower('hello')\n  'H'\n  >>> firstLower('HELLO')\n  'h'\n  >>> firstLower('HELLOWORLD')\n  'H'\n  >>> firstLower('HELLOWORLDHELLO')\n  'h'\n  */\nconst firstLowerFirst = (string) => {\n  return firstLower(first(string));\n};\n\n/* Given a string, return its last letter in upper", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive in t eger k, return a sorted li st \n of length k wit h  themaximum k  numbers inarr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const li = [];\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (li.length <= k) {\n      li.push(arr[i]);\n      continue;\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [li[maxIndex], li[maxIndex + 1]];\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs2 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs3 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs4 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs5 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs6 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs7 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs8 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs9 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs10 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs11 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs12 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findUniquePairs13 = function(nums) {\n  const map = new Map();\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const key = nums[i];\n    if (!map.has(key)) {\n      map.set(key, i);\n      result.push([key, i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/121", "prompt": "/*Givena non-empty list of integers, return the su m  of all of the odd element s that  are in even po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena non-empty list of integers, return the su m  of all of the odd element s that  are in even po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution2 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution2(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution3 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution3(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution4 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution4(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution5 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution5(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution6 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution6(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution7 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution7(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution8 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution8(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution9 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution9(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution10 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution10(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution11 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution11(lst);\n};\n\n/*Given a non-empty list of integers, return the su m  of all of the even element s that  are in odd po s itions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution12 = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n      count++;\n    }\n  }\n  return sum % 2 === 1? count : solution12(lst);\n};\n\n/*Given a non-empty list of integers, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an i n teger k, return\n the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an i n teger k, return\n the sumof the  elements witha t most two dig its from the  first  k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (count < k) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElements = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO2 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO3 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO4 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO5 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO6 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO7 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO8 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO9 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO10 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO11 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a non-empty array of integers arr and an integer k, return the\n number of distinct elements in  arr.\n\n Example:\n\n      Input: arr = [1,2,3,4,5], k = 3\n      Output: 3\n\n Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countDistinctElementsO12 = (arr, k) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  while (prev <= n) {\n    if (n % prev === 0) {\n      collatz.push(i);\n      i++;\n      prev = prev * 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers i n coll atz sequence.\n TheCollatz c onjecture is  a con jecture in mathematics that concernsa sequence d ef ined\n  as follo w s: startwith any positive integer n. Then e ach term is obtained from the \n  previous ter m  as follows: if the previous term is  even, the next term is one halfo f   the previous term. If thepr evious term is odd, the nex t term is 3 times the previous\n  t ermpl us 1. Theconjectureis that no m atterwhat value of n, the seque ncewill always reach 1.\n\n  Note : \n      1. Col latz(1 ) is [1].      2. returne d li st sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  while (prev <= n) {\n    if (n % prev === 0) {\n      collatz.push(i);\n      i++;\n      prev = prev * 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbersn  */\nconst getCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  while (prev <= n) {\n    if (n % prev === 0) {\n      collatz.push(i);\n      i++;\n      prev = prev * 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers 1 ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a gi v en date string and\n  retur ns tru e if the date i s  valid otherwi se false.\n The da te is valid if all of the following r ulesare sat is fied:\n  1. Thed ate strin g is not empty.\n  2. The number ofdays is not less than 1 or higher than 31 day s  for months 1,3,5,7,8,10,12. And the  number of days is not less than1  or higher than 30 days for mon th s 4,6,9,11. And, the number  of days is not less than1 or hig herth an 29 forthe month 2 .\n  3. The m onthsshould not be less than 1or h igher than 12.\n  4. The date  should be in t he for mat: mm-dd -yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validates a gi v en date string and\n  retur ns tru e if the date i s  valid otherwi se false.\n The da te is valid if all of the following r ulesare sat is fied:\n  1. Thed ate strin g is not empty.\n  2. The number ofdays is not less than 1 or higher than 31 day s  for months 1,3,5,7,8,10,12. And the  number of days is not less than1  or higher than 30 days for mon th s 4,6,9,11. And, the number  of days is not less than1 or hig herth an 29 forthe month 2.\n  3. The m onthsshould not be less than 1or h igher than 12.\n  4. The date  should be in t he for mat: mm-dd -yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const reg = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg2 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg3 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg4 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg5 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg6 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg7 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg8 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg9 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg10 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg11 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg12 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg13 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg14 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg15 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg16 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg17 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg18 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg19 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg20 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg21 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg22 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg23 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg24 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg25 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg26 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg27 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg28 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg29 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg30 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg31 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg32 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg33 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg34 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg35 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg36 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg37 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg38 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg39 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg40 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg41 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg42 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg43 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg44 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg45 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg46 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg47 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg48 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg49 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg50 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg51 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg52 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg53 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg54 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg55 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg56 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg57 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg58 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg59 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg60 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg61 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg62 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg63 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg64 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg65 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg66 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg67 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg68 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg69 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg70 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg71 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg72 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg73 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg74 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg75 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg76 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg77 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg78 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg79 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg80 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg81 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg82 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg83 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg84 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg85 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg86 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg87 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg88 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg89 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg90 = /^(\\d{2}-\\d{2}-\\d{4})$/;\n  const reg91 = /^(\\d{2}-\\d{2}-\\d{4})$/;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, returna list of wordss plit on whitespace, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1, ... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, returna list of wordss plit on whitespace, if nowhites paces exists in the textyou\n should spli t on c ommas ',' if no commas exists you sho uld return t he  number of lowe r -case let ters with odd order in the\n  alphab et, ord('a') = 0, ord('b') =1,... ord('z')=  25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(' ');\n  let result = [];\n  let word;\n  let words = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, returnwhether or not t h ey are sorted\n  in ascendi ng ord er. If list has morethan1 du plicate of t he sam e\n  number, return false. Assumeno n egative numb er s and only inte g ers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = true;\n  let nums = lst.filter(x => x!== null);\n  let numsLength = nums.length;\n  let numsIndex = 0;\n  let numsIndex2 = 0;\n  let numsIndex3 = 0;\n  let numsIndex4 = 0;\n  let numsIndex5 = 0;\n  let numsIndex6 = 0;\n  let numsIndex7 = 0;\n  let numsIndex8 = 0;\n  let numsIndex9 = 0;\n  let numsIndex10 = 0;\n  let numsIndex11 = 0;\n  let numsIndex12 = 0;\n  let numsIndex13 = 0;\n  let numsIndex14 = 0;\n  let numsIndex15 = 0;\n  let numsIndex16 = 0;\n  let numsIndex17 = 0;\n  let numsIndex18 = 0;\n  let numsIndex19 = 0;\n  let numsIndex20 = 0;\n  let numsIndex21 = 0;\n  let numsIndex22 = 0;\n  let numsIndex23 = 0;\n  let numsIndex24 = 0;\n  let numsIndex25 = 0;\n  let numsIndex26 = 0;\n  let numsIndex27 = 0;\n  let numsIndex28 = 0;\n  let numsIndex29 = 0;\n  let numsIndex30 = 0;\n  let numsIndex31 = 0;\n  let numsIndex32 = 0;\n  let numsIndex33 = 0;\n  let numsIndex34 = 0;\n  let numsIndex35 = 0;\n  let numsIndex36 = 0;\n  let numsIndex37 = 0;\n  let numsIndex38 = 0;\n  let numsIndex39 = 0;\n  let numsIndex40 = 0;\n  let numsIndex41 = 0;\n  let numsIndex42 = 0;\n  let numsIndex43 = 0;\n  let numsIndex44 = 0;\n  let numsIndex45 = 0;\n  let numsIndex46 = 0;\n  let numsIndex47 = 0;\n  let numsIndex48 = 0;\n  let numsIndex49 = 0;\n  let numsIndex50 = 0;\n  let numsIndex51 = 0;\n  let numsIndex52 = 0;\n  let numsIndex53 = 0;\n  let numsIndex54 = 0;\n  let numsIndex55 = 0;\n  let numsIndex56 = 0;\n  let numsIndex57 = 0;\n  let numsIndex58 = 0;\n  let numsIndex59 = 0;\n  let numsIndex60 = 0;\n  let numsIndex61 = 0;\n  let numsIndex62 = 0;\n  let numsIndex63 = 0;\n  let numsIndex64 = 0;\n  let numsIndex65 = 0;\n  let numsIndex66 = 0;\n  let numsIndex67 = 0;\n  let numsIndex68 = 0;\n  let numsIndex69 = 0;\n  let numsIndex70 = 0;\n  let numsIndex71 = 0;\n  let numsIndex72 = 0;\n  let numsIndex73 = 0;\n  let numsIndex74 = 0;\n  let numsIndex75 = 0;\n  let numsIndex76 = 0;\n  let numsIndex77 = 0;\n  let numsIndex78 = 0;\n  let numsIndex79 = 0;\n  let numsIndex80 = 0;\n  let numsIndex81 = 0;\n  let numsIndex82 = 0;\n  let numsIndex83 = 0;\n  let numsIndex84 = 0;\n  let numsIndex85 = 0;\n  let numsIndex86 = 0;\n  let numsIndex87 = 0;\n  let numsIndex88 = 0;\n  let numsIndex89 = 0;\n  let numsIndex90 = 0;\n  let numsIndex91 = 0;\n  let numsIndex92 = 0;\n  let numsIndex93 = 0;\n  let numsIndex94 = 0;\n  let numsIndex95 = 0;\n  let numsIndex96 = 0;\n  let numsIndex97 = 0;\n  let numsIndex98 = 0;\n  let numsIndex99 = 0;\n  let numsIndex100 = 0;\n  let numsIndex101 = 0;\n  let numsIndex102 = 0;\n  let numsIndex103 = 0;\n  let numsIndex104 = 0;\n  let numsIndex105 = 0;\n  let numsIndex106 = 0;\n  let numsIndex107 = 0;\n  let numsIndex108 = 0;\n  let numsIndex109 = 0;\n  let numsIndex110 = 0;\n  let numsIndex111 = 0;\n  let numsIndex112 = 0;\n  let numsIndex113 = 0;\n  let numsIndex114 = 0;\n  let numsIndex115 = 0;\n  let numsIndex116 = 0;\n  let numsIndex117 = 0;\n  let numsIndex118 = 0;\n  let numsIndex119 = 0;\n  let numsIndex120 = 0;\n  let numsIndex121 = 0;\n  let numsIndex122 = 0;\n  let numsIndex123 = 0;\n  let numsIndex124 = 0;\n  let numsIndex125 = 0;\n  let numsIndex126 = 0;\n  let numsIndex127 = 0;\n  let numsIndex128 = 0;\n  let numsIndex129 = 0;\n  let numsIndex130 = 0;\n  let numsIndex131 = 0;\n  let numsIndex132 = 0;\n  let numsIndex133 = 0;\n  let numsIndex134 = 0;\n  let numsIndex135 = 0;\n  let numsIndex136 = 0;\n  let numsIndex137 = 0;\n  let numsIndex138 = 0;\n  let numsIndex139 = 0;\n  let numsIndex140 = 0;\n  let numsIndex141 = 0;\n  let numsIndex142 = 0;\n  let numsIndex143 = 0;\n  let numsIndex144 = 0;\n  let numsIndex145 = 0;\n  let numsIndex146 = 0;\n  let numsIndex147 = 0;\n  let numsIndex148 = 0;\n  let numsIndex149 = 0;\n  let numsIndex150 = 0;\n  let numsIndex151 = 0;\n  let numsIndex152 = 0;\n  let numsIndex153 = 0;\n  let numsIndex154 = 0;\n  let numsIndex155 = 0;\n  let numsIndex156 = 0;\n  let numsIndex157 = 0;\n  let numsIndex158 = 0;\n  let numsIndex159 = 0;\n  let numsIndex160 = 0;\n  let numsIndex161 = 0;\n  let numsIndex162 = 0;\n  let numsIndex163 = 0;\n  let numsIndex164 = 0;\n  let numsIndex165 = 0;\n  let numsIndex166 = 0;\n  let numsIndex167 = 0;\n  let numsIndex168 = 0;\n  let numsIndex169 = 0;\n  let numsIndex170 = 0;\n  let numsIndex171 = 0;\n  let numsIndex172 = 0;\n  let numsIndex173 = 0;\n  let numsIndex174 = 0;\n  let numsIndex175 = 0;\n  let numsIndex176 = 0;\n  let numsIndex177 = 0;\n  let numsIndex178 = 0;\n  let numsIndex179 = 0;\n  let numsIndex180 = 0;\n  let numsIndex181 = 0;\n  let numsIndex182 = 0;\n  let numsIndex183 = 0;\n  let numsIndex184 = 0;\n  let numsIndex185 = 0;\n  let numsIndex186 = 0;\n  let numsIndex187 = 0;\n  let numsIndex188 = 0;\n  let numsIndex189 = 0;\n  let numsIndex190 = 0;\n  let numsIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given two intervals,\n  where each interva l  is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let result = [];\n  let result1 = [];\n  let result2 = [];\n  let result3 = [];\n  let result4 = [];\n  let result5 = [];\n  let result6 = [];\n  let result7 = [];\n  let result8 = [];\n  let result9 = [];\n  let result10 = [];\n  let result11 = [];\n  let result12 = [];\n  let result13 = [];\n  let result14 = [];\n  let result15 = [];\n  let result16 = [];\n  let result17 = [];\n  let result18 = [];\n  let result19 = [];\n  let result20 = [];\n  let result21 = [];\n  let result22 = [];\n  let result23 = [];\n  let result24 = [];\n  let result25 = [];\n  let result26 = [];\n  let result27 = [];\n  let result28 = [];\n  let result29 = [];\n  let result30 = [];\n  let result31 = [];\n  let result32 = [];\n  let result33 = [];\n  let result34 = [];\n  let result35 = [];\n  let result36 = [];\n  let result37 = [];\n  let result38 = [];\n  let result39 = [];\n  let result40 = [];\n  let result41 = [];\n  let result42 = [];\n  let result43 = [];\n  let result44 = [];\n  let result45 = [];\n  let result46 = [];\n  let result47 = [];\n  let result48 = [];\n  let result49 = [];\n  let result50 = [];\n  let result51 = [];\n  let result52 = [];\n  let result53 = [];\n  let result54 = [];\n  let result55 = [];\n  let result56 = [];\n  let result57 = [];\n  let result58 = [];\n  let result59 = [];\n  let result60 = [];\n  let result61 = [];\n  let result62 = [];\n  let result63 = [];\n  let result64 = [];\n  let result65 = [];\n  let result66 = [];\n  let result67 = [];\n  let result68 = [];\n  let result69 = [];\n  let result70 = [];\n  let result71 = [];\n  let result72 = [];\n  let result73 = [];\n  let result74 = [];\n  let result75 = [];\n  let result76 = [];\n  let result77 = [];\n  let result78 = [];\n  let result79 = [];\n  let result80 = [];\n  let result81 = [];\n  let result82 = [];\n  let result83 = [];\n  let result84 = [];\n  let result85 = [];\n  let result86 = [];\n  let result87 = [];\n  let result88 = [];\n  let result89 = [];\n  let result90 = [];\n  let result91 = [];\n  let result92 = [];\n  let result93 = [];\n  let result94 = [];\n  let result95 = [];\n  let result96 = [];\n  let result97 = [];\n  let result98 = [];\n  let result99 = [];\n  let result100 = [];\n  let result101 = [];\n  let result102 = [];\n  let result103 = [];\n  let result104 = [];\n  let result105 = [];\n  let result106 = [];\n  let result107 = [];\n  let result108 = [];\n  let result109 = [];\n  let result110 = [];\n  let result111 = [];\n  let result112 = [];\n  let result113 = [];\n  let result114 = [];\n  let result115 = [];\n  let result116 = [];\n  let result117 = [];\n  let result118 = [];\n  let result119 = [];\n  let result120 = [];\n  let result121 = [];\n  let result122 = [];\n  let result123 = [];\n  let result124 = [];\n  let result125 = [];\n  let result126 = [];\n  let result127 = [];\n  let result128 = [];\n  let result129 = [];\n  let result130 = [];\n  let result131 = [];\n  let result132 = [];\n  let result133 = [];\n  let result134 = [];\n  let result135 = [];\n  let result136 = [];\n  let result137 = [];\n  let result138 = [];\n  let result139 = [];\n  let result140 = [];\n  let result141 = [];\n  let result142 = [];\n  let result143 = [];\n  let result144 = [];\n  let result145 = [];\n  let result146 = [];\n  let result147 = [];\n  let result148 = [];\n  let result149 = [];\n  let result150 = [];\n  let result151 = [];\n  let result152 = [];\n  let result153 = [];\n  let result154 = [];\n  let result155 = [];\n  let result156 = [];\n  let result157 = [];\n  let result158 = [];\n  let result159 = [];\n  let result160 = [];\n  let result161 = [];\n  let result162 = [];\n  let result163 = [];\n  let result164 = [];\n  let result165 = [];\n  let result166 = [];\n  let result167 = [];\n  let result168 = [];\n  let result169 = [];\n  let result170 = [];\n  let result171 = [];\n  let result172 = [];\n  let result173 = [];\n  let result174 = [];\n  let result175 = [];\n  let result176 = [];\n  let result177 = [];\n  let result178 = [];\n  let result179 = [];\n  let result180 = [];\n  let result181 = [];\n  let result182 = [];\n  let result183 = [];\n  let result184 = [];\n  let result185 = [];\n  let result186 = [];\n  let result187 = [];\n  let result188 = [];\n  let result189 = [];\n  let result190 = [];\n  let result191 = [];\n  let result192 = [];\n  let result193 = [];\n  let result194 = [];\n  let result195 = [];\n  let result196 = [];\n  let result197 = [];\n  let result198 = [];\n  let result199 = [];\n  let result200 = [];\n  let result201 = [];\n  let result202 = [];\n  let result203 = [];\n  let result204 = [];\n  let result205 = [];\n  let result206 = [];\n  let result207 = [];\n  let result208 = [];\n  let result209 = [];\n  let result210 = [];\n  let result211 = [];\n  let result212 = [];\n  let result213 = [];\n  let result214 = [];\n  let result215 = [];\n  let result216 = [];\n  let result217 = [];\n  let result218 = [];\n  let result219 = [];\n  let result220 = [];\n  let result221 = [];\n  let result222 = [];\n  let result223 = [];\n  let result224 = [];\n  let result225 = [];\n  let result226 = [];\n  let result227 = [];\n  let result228 = [];\n  let result229 = [];\n  let result230 = [];\n  let result231 = [];\n  let result232 = [];\n  let result233 = [];\n  let result234 = [];\n  let result235 = [];\n  let result236 = [];\n  let result237 = [];\n  let result238 = [];\n  let result239 = [];\n  let result240 = [];\n  let result241 = [];\n  let result242 = [];\n  let result243 = [];\n  let result244 = [];\n  let result245 = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you n e ed to return\n  sum of magn itudes  of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres ented by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod = prod * arr[i];\n    } else {\n      prod = prod * -1;\n    }\n  }\n  sum = prod * Math.pow(10, arr.length - 1);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of squares of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres entered by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod = prod * arr[i];\n    } else {\n      prod = prod * -1;\n    }\n  }\n  sum = prod * Math.pow(10, arr.length - 1);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of cubes of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres entered by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == 27\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod = prod * arr[i];\n    } else {\n      prod = prod * -1;\n    }\n  }\n  sum = prod * Math.pow(10, arr.length - 1);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of cubes of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres entered by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == 27\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod = prod * arr[i];\n    } else {\n      prod = prod * -1;\n    }\n  }\n  sum = prod * Math.pow(10, arr.length - 1);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of cubes of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres entered by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == 27\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod = prod * arr[i];\n    } else {\n      prod = prod * -1;\n    }\n  }\n  sum = prod * Math.pow(10, arr.length - 1);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of cubes of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres entered by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == 27\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod = prod * arr[i];\n    } else {\n      prod = prod * -1;\n    }\n  }\n  sum = prod * Math.pow(10, arr.length - 1);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of cubes of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres entered by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == 27\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod = prod * arr[i];\n    } else {\n      prod = prod * -1;\n    }\n  }\n  sum = prod * Math.pow(10, arr.length - 1);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of cubes of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres entered by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == 27\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod = prod * arr[i];\n    } else {\n      prod = prod * -1;\n    }\n  }\n  sum = prod * Math.pow(10, arr.length - 1);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of cubes of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres entered by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n Example:\n  >>> prodSigns([1, 2, 2, -4]) == 27\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      prod = prod * arr[i];\n    } else {\n      prod = prod * -1;\n    }\n  }\n  sum = prod * Math.pow(10, arr.length - 1);\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you n e ed to return\n  sum of cubes of integers mu l tiplied by pro duct of allsigns  of each numberin the array, repres entered by 1,-1  or 0.\n  Note:r eturn nul l for empty arr.\n\n ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B) , lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2)a nd a positive integer k,   each  cell of the gr i d contains a v alue. Everyintege r in the range [1, N * N]\n  inclusive  appears exa ct ly once on thec ells of t hegrid.\n\n You have to find the mi nimumpath of length k in the grid. You can s t art\n  from any cell, and in each ste p you can moveto any of the neigh bor cells,\n  in other words, yo ucan go to cells which share  an edge with you current  cell.  Pl ea se note th at a path o f length k m eans visiting exactly k cells (n ot\n necessarilydistinct).\n  Yo u CANNOT go off  the g rid.\n  A p ath A (of length  k)is considered less than a path B (of length k)if\n after making theordered lists of the values on the cells that A and B go\n th r ou gh (let's callthem lst_ A and lst_B), lst_A is lexicographical ly less\n  than  lst_B, in other words, thereexis t an integer index  i ( 1 <= i <= k)\n  such that lst_A[i] < lst_B[i]  and for any j (1 <=j< i) we ha ve\n  lst_A[j]= lst_B[j].\n  It is guaranteed that the answer  is un ique.  Return an ordered list o f the  valu es on the cells  that theminimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const [m, n] = grid.length;\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return gcd(a, b) // gcd(a, b)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  20\n  */\nconst randomInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100)\n  20\n  */\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n * Return a random integer between min and max\n * >>> randomIntInRange(1, 100)\n  1\n  >>> randomIntInRange(1, 100)\n  20\n  */\nconst randomIntInRangeIntInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1) + a)\n}\n\n/**\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Tribonacci sequence.\n  T ribonacci se qu ence is defined by the re currence:\n tri(1)= 3\n  tri(n) = 1  + n / 2, if n is even.\n  tri(n) =  tri(n - 1 )  + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians i n \n  t he last couplec enturies.Howe ver, what pe ople d on't know is Tribonacci sequence.\n  T ribonacci se qu ence is defined by the re currence:\n tri(1)= 3\n  tri(n) = 1  + n / 2, if n is even.\n  tri(n) =  tri(n - 1 )  + tri(n - 2) + tri(n + 1), if n isodd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    tri(n - 1),\n    tri(n - 2),\n    tri(n - 3),\n    tri(n - 4),\n  ];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(13) = fib(12) + fib(11) + fib(10)\n         = fib(12) + fib(11) + fib(10) + fib(9)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1) \n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1) + fib(0) \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(13) = fib(12) + fib(11) + fib(10)\n         = fib(12) + fib(11) + fib(10) + fib(9)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1) \n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1) + fib(0) \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(13) = fib(12) + fib(11) + fib(10)\n         = fib(12) + fib(11) + fib(10) + fib(9)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3)\n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1) \n         = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1) + fib(0) \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  fib(13", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/131", "prompt": "/*Givena positive integer n, return the product of the odd digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena positive integer n, return the product of the odd digits.\n Return 0  if al l digits are ev e n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10 = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10_mod = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10_mod_10 = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10_mod_10_mod = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10_mod_10_mod_10 = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10_mod_10_mod_10_mod = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10_mod_10_mod_10_mod_10 = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10_mod_10_mod_10_mod_10_mod = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10_mod_10_mod_10_mod_10_mod_10_mod = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }\n  return digits;\n};\n\n/*Given a positive integer n, return the sum of its digits modulo 10.\n Return 0  if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_mod_10_mod_10_mod_10_mod_10_mod_10_mod = (n) => {\n  let digits = 0;\n  let l = n.toString(2).length;\n  let m = l % 2;\n  if (m === 0) {\n    digits = 1;\n  } else {\n    for (let i = 0; i < l; i += 2) {\n      digits = digits * 10 + n.toString(2).charAt(i);\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input w h ich contains onlysquare b racket s.\n  The functi o n shouldretur n true if an d only  if there is a valid subsequenceof b rackets\n  wh er e at least oneb racket in  the subsequence is nested.\n  isNes ted('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[] ' ) ➞ false\n  isNested('[][]') ➞ false \n  isNested('[]') ➞ false\n  isNest ed('[[][]]') ➞ true\n isNested( '[ []][[') ➞ true\n  */\nconst i sNested = (string)=> {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input w h ich contains onlysquare b racket s.\n  The functi o n shouldretur n true if an d only  if there is a valid subsequenceof b rackets\n  wh er e at least oneb racket in  the subsequence is nested.\n  isNes ted('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false \n  isNested('[]') ➞ false\n  isNest ed('[[][]]') ➞ true\n isNested( '[ []][[') ➞ true\n  */\nconst i sNested = (string)=> {\n  const isNest = (string) => {\n    const isNested = (string) => {\n      const isNest = (string) => {\n        const isNested = (string) => {\n          const isNested = (string) => {\n            const isNested = (string) => {\n              const isNested = (string) => {\n                const isNested = (string) => {\n                  const isNested = (string) => {\n                    const isNested = (string) => {\n                      const isNested = (string) => {\n                        const isNested = (string) => {\n                          const isNested = (string) => {\n                            const isNested = (string) => {\n                              const isNested = (string) => {\n                                const isNested = (string) => {\n                                  const isNested = (string) => {\n                                    const isNested = (string) => {\n                                      const isNested = (string) => {\n                                        const isNested = (string) => {\n                                          const isNested = (string) => {\n                                            const isNested = (string) => {\n                                              const isNested = (string) => {\n                                                const isNested = (string) => {\n                                                  const isNested = (string) => {\n                                                    const isNested = (string) => {\n                                                      const isNested = (string) => {\n                                                        const isNested = (string) => {\n                                                          const isNested = (string) => {\n                                                            const isNested = (string) => {\n                                                              const isNested = (string) => {\n                                                                const isNested = (string) => {\n                                                                  const isNested = (string) => {\n                                                                    const isNested = (string) => {\n                                                                        const isNested = (string) => {\n                                                                          const isNested = (string) => {\n                                                                            const isNested = (string) => {\n                                                                              const isNested = (string) => {\n                                                                                const isNested = (string) => {\n                                                                                  const isNested = (string) => {\n                                                                                    const isNested = (string) => {\n                                                                                      const isNested = (string) => {\n                                                                                        const isNested = (string) => {\n                                                                                          const isNested = (string) => {\n                                                                                            const isNested = (string) => {\n                                                                                              const isNested = (string) => {\n                                                                                                const isNested = (string) => {\n                                                                                                  const isNested = (string) => {\n                                                                                                    const isNested = (string) => {\n                                                                                                      const isNested = (string) => {\n                                                                                                        const isNested = (string) => {\n                                                                                                          const isNested = (string) => {\n                                                                                                            const isNested = (string) => {\n                                                                                                              const isNested = (string) => {\n                                                                                                                const isNested = (string) => {\n                                                                                                                  const isNested = (string) => {\n                                                                                                                    const isNested = (string) => {\n                                                                                                                      const isNested = (string) => {\n                                                                                                                        const isNested = (string) => {\n                                                                                                                          const isNested = (string) => {\n                                                                                                                            const isNested = (string) => {\n                                                                                                                              const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.  You need to re t urn the sum of squared num bers i n the given lis t ,\n  roundeach  element inthe li st to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of numbers.  You need to re t urn the sum of squared num bers i n the given lis t,\n  roundeach  element inthe li st to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns true if the lastc haracter\n  of a given stri ng isan alphabetical characterandis not\n  a p art of  a word, and false otherwise.\n  Note:  \"word\" is a  g roup of charact e rs separa ted by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"!\" && lastChar!== \"?", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverse = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverse = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverse = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverse = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverse = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverse = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is n ot gre ater than or eq u al to theelem ent immediat ely pr eceding it. If\n no such elementexis ts then retu rn  -1. The givena rray will  not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is n ot gre ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), w h ere 'a' is\n  the largest o f nega tive integers,a nd 'b' isthesmallest\n  o f posi tive integers ina list.\n  If there i s nonegativ eor positive int e gers, ret urn them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum2 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum2 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum3 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum3 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum4 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum4 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum5 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum5 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum6 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum6 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum7 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum7 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum8 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum8 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum9 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum9 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum10 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum10 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum11 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum11 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum12 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum12 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum13 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum13 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum14 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum14 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum15 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum15 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum16 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum16 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum17 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum17 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum18 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum18 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum19 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum19 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum20 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum20 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum21 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum21 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum22 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum22 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum23 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum23 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum24 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum24 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum25 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum25 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum26 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum26 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum27 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum27 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum28 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum28 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum29 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum29 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum30 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum30 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum31 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum31 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum32 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum32 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum33 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum33 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum34 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum34 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum35 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum35 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum36 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum36 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum37 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum37 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum38 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum38 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum39 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum39 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum40 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum40 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum41 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum41 = lst.reduce((a, b) => Math.min(a, b), 0);\n  const maxNum42 = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum42 = lst.reduce((a, b) => Math.min(a, b), 0);\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be .or ,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareOne =(a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareOne =(a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum < bNum) return -1\n  if (aNum > bNum) return 1\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"5\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareO =(a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum > bNum) return -1\n  if (aNum < aNum) return 1\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareNull =(a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) return 0\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareUndefined =(a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) return 0\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareUndefined =(a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) return 0\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the smaller v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareUndefined =(a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) return 0\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareUndefined =(a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) return 0\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareUndefined =(a, b) => {\n  const aNum = parseFloat(a)\n  const bNum = parseFloat(b)\n  if (aNum === bNum) return 0\n  return -1\n}\n\n/*\n  Create a function that takes integers, floats, o r  strings representing\n  re al num bers, and retur n s the larger v ariable in i ts giv en variable type.\n  Return null if th e values are  e qual.\n  Note: I f  a real n umber is represented as a string, t he floating point might be.or,\n\n  compareO n e(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3 \") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\" ) ➞ \"6\"\n  compareOne(\"1\", 1) ➞nu ll\n  */\nconst compareUndefined =(a, b) => {\n  const aNum = parseFloat(a)\n  const bNum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the givennumber n can be writte n  as the sum of exactly 4 p ositiv e even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let sumEven = 0;\n  let even = 0;\n  let evenEven = 0;\n  let evenEvenEven = 0;\n  let evenEvenEvenEven = 0;\n  let evenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = 0;\n  let evenEvenEvenEven", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial isdefined as:\n  brazilia n _factorial(n) = n! * (n-1) ! * (n -2)! * ... * 1!   where n> 0\n  For examp le:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial isdefined as:\n  brazilia n _factorial(n) = n! * (n-1)! * (n -2)! *... * 1!   where n> 0\n  For examp le:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) return 1;\n  if (n <= 1) return 1;\n  if (n <= 2) return 2;\n  if (n <= 3) return 3;\n  if (n <= 4) return 4;\n  if (n <= 5) return 5;\n  if (n <= 6) return 6;\n  if (n <= 7) return 7;\n  if (n <= 8) return 8;\n  if (n <= 9) return 9;\n  if (n <= 10) return 10;\n  if (n <= 11) return 11;\n  if (n <= 12) return 12;\n  if (n <= 13) return 13;\n  if (n <= 14) return 14;\n  if (n <= 15) return 15;\n  if (n <= 16) return 16;\n  if (n <= 17) return 17;\n  if (n <= 18) return 18;\n  if (n <= 19) return 19;\n  if (n <= 20) return 20;\n  if (n <= 21) return 21;\n  if (n <= 22) return 22;\n  if (n <= 23) return 23;\n  if (n <= 24) return 24;\n  if (n <= 25) return 25;\n  if (n <= 26) return 26;\n  if (n <= 27) return 27;\n  if (n <= 28) return 28;\n  if (n <= 29) return 29;\n  if (n <= 30) return 30;\n  if (n <= 31) return 31;\n  if (n <= 32) return 32;\n  if (n <= 33) return 33;\n  if (n <= 34) return 34;\n  if (n <= 35) return 35;\n  if (n <= 36) return 36;\n  if (n <= 37) return 37;\n  if (n <= 38) return 38;\n  if (n <= 39) return 39;\n  if (n <= 40) return 40;\n  if (n <= 41) return 41;\n  if (n <= 42) return 42;\n  if (n <= 43) return 43;\n  if (n <= 44) return 44;\n  if (n <= 45) return 45;\n  if (n <= 46) return 46;\n  if (n <= 47) return 47;\n  if (n <= 48) return 48;\n  if (n <= 49) return 49;\n  if (n <= 50) return 50;\n  if (n <= 51) return 51;\n  if (n <= 52) return 52;\n  if (n <= 53) return 53;\n  if (n <= 54) return 54;\n  if (n <= 55) return 55;\n  if (n <= 56) return 56;\n  if (n <= 57) return 57;\n  if (n <= 58) return 58;\n  if (n <= 59) return 59;\n  if (n <= 60) return 60;\n  if (n <= 61) return 61;\n  if (n <= 62) return 62;\n  if (n <= 63) return 63;\n  if (n <= 64) return 64;\n  if (n <= 65) return 65;\n  if (n <= 66) return 66;\n  if (n <= 67) return 67;\n  if (n <= 68) return 68;\n  if (n <= 69) return 69;\n  if (n <= 70) return 70;\n  if (n <= 71) return 71;\n  if (n <= 72) return 72;\n  if (n <= 73) return 73;\n  if (n <= 74) return 74;\n  if (n <= 75) return 75;\n  if (n <= 76) return 76;\n  if (n <= 77) return 77;\n  if (n <= 78) return 78;\n  if (n <= 79) return 79;\n  if (n <= 80) return 80;\n  if (n <= 81) return 81;\n  if (n <= 82) return 82;\n  if (n <= 83) return 83;\n  if (n <= 84) return 84;\n  if (n <= 85) return 85;\n  if (n <= 86) return 86;\n  if (n <= 87) return 87;\n  if (n <= 88) return 88;\n  if (n <= 89) return 89;\n  if (n <= 90) return 90;\n  if (n <= 91) return 91;\n  if (n <= 92) return 92;\n  if (n <= 93) return 93;\n  if (n <= 94) return 94;\n  if (n <= 95) return 95;\n  if (n <= 96) return 96;\n  if (n <= 97) return 97;\n  if (n <= 98) return 98;\n  if (n <= 99) return 99;\n  if (n <= 100) return 100;\n  if (n <= 101) return 101;\n  if (n <= 102) return 102;\n  if (n <= 103) return 103;\n  if (n <= 104) return 104;\n  if (n <= 105) return 105;\n  if (n <= 106) return 106;\n  if (n <= 107) return 107;\n  if (n <= 108) return 108;\n  if (n <= 109) return 109;\n  if (n <= 110) return 110;\n  if (n <= 111) return 111;\n  if (n <= 112) return 112;\n  if (n <= 113) return 113;\n  if (n <= 114) return 114;\n  if (n <= 115) return 115;\n  if (n <= 116) return 116;\n  if (n <= 117) return 117;\n  if (n <= 118) return 118;\n  if (n <= 119) return 119;\n  if (n <= 120) return 120;\n  if (n <= 121) return 121;\n  if (n <= 122) return 122;\n  if (n <= 123) return 123;\n  if (n <= 124) return 124;\n  if (n <= 125) return 125;\n  if (n <= 126) return 126;\n  if (n <= 127) return 127;\n  if (n <= 128) return 128;\n  if (n <= 129) return 129;\n  if (n <= 130) return 130;\n  if (n <= 131) return 131;\n  if (n <= 132) return 132;\n  if (n <= 133) return 133;\n  if (n <= 134) return 134;\n  if (n <= 135) return 135;\n  if (n <= 136) return 136;\n  if (n <= 137) return 137;\n  if (n <= 138) return 138;\n  if (n <= 139) return 139;\n  if (n <= 140) return 140;\n  if (n <= 141) return 141;\n  if (n <= 142) return 142;\n  if (n <= 143) return 143;\n  if (n <= 144) return 144;\n  if (n <= 145) return 145;\n  if (n <= 146) return 146;\n  if (n <= 147) return 147;\n  if (n <= 148) return 148;\n  if (n <= 149) return 149;\n  if (n <= 150) return 150;\n  if (n <= 151) return 151;\n  if (n <= 152) return 152;\n  if (n <= 153) return 153;\n  if (n <= 154) return 154;\n  if (n <= 155) return 155;\n  if (n <= 156) return 156;\n  if (n <= 157) return 157;\n  if (n <= 158) return 158;\n  if (n <= 159) return 159;\n  if (n <= 160) return 160;\n  if (n <= 161) return 161;\n  if (n <= 162) return 162;\n  if (n <= 163) return 163;\n  if (n <= 164) return 164;\n  if (n <= 165) return 165;\n  if (n <= 166) return 166;\n  if (n <= 167) return 167;\n  if (n <= 168) return 168;\n  if (n <= 169) return 169;\n  if (n <= 170) return 170;\n  if (n <= 171) return 171;\n  if (n <= 172) return 172;\n  if (n <= 173) return 173;\n  if (n <= 174) return 174;\n  if (n <= 175) return 175;\n  if (n <= 176) return 176;\n  if (n <= 177) return 177;\n  if (n <= 178) return 178;\n  if (n <= 179) return 179;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to lon g est of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to lon g est of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.substring(0, currentPrefix.length - 1));\n    currentPrefix = currentPrefix.substring(currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to lon g est of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix.substring(0, currentSuffix.length - 1));\n    currentSuffix = currentSuffix.substring(currentSuffix.length - 1);\n  }\n  return suffixes;\n};\n\n/* Return list of all words starting with prefix from shortest to lon g est of the input string\n  >>> allWords('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words ending with suffix from shortest to lon g est of the input string\n  >>> allWords('abc')\n  ['abc', 'abc', 'ab']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words starting with prefix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words ending with suffix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'abc', 'ab']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words starting with prefix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words ending with suffix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'abc', 'ab']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words starting with prefix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words ending with suffix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'abc', 'ab']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words starting with prefix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words ending with suffix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'abc', 'ab']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words starting with prefix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words ending with suffix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'abc', 'ab']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words starting with prefix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'ab', 'abc']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = string;\n  while (currentWord.length > 0) {\n    words.push(currentWord.substring(0, currentWord.length - 1));\n    currentWord = currentWord.substring(currentWord.length - 1);\n  }\n  return words;\n};\n\n/* Return list of all words ending with suffix from shortest to lon g est of the input string\n  >>> allWordsEnd('abc')\n  ['abc', 'abc', 'ab']\n  */\nconst allWordsEnd = (string) => {\n  let words = [];\n  let currentWord = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpac es (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpac es (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = newText.split(' ');\n  let newText = '';\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space[0].toUpperCase() + space.slice(1).toLowerCase();\n    } else {\n      newText += space;\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpace es (\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example_1\"\n  fixSpace(\" Example 2\") == \"_Example_2\"\n  fixSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpace = (text) => {\n  let newText = text;\n  let spaces = newText.split(' ');\n  let newText = '';\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space[0].toUpperCase() + space.slice(1).toLowerCase();\n    } else {\n      newText += space;\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpace es (\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example_1\"\n  fixSpace(\" Example 2\") == \"_Example_2\"\n  fixSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = newText.split(' ');\n  let newText = '';\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space[0].toUpperCase() + space.slice(1).toLowerCase();\n    } else {\n      newText += space;\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpace es (\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example_1\"\n  fixSpace(\" Example 2\") == \"_Example_2\"\n  fixSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpace = (text) => {\n  let newText = text;\n  let spaces = newText.split(' ');\n  let newText = '';\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space[0].toUpperCase() + space.slice(1).toLowerCase();\n    } else {\n      newText += space;\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpace es (\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example_1\"\n  fixSpace(\" Example 2\") == \"_Example_2\"\n  fixSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = newText.split(' ');\n  let newText = '';\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space[0].toUpperCase() + space.slice(1).toLowerCase();\n    } else {\n      newText += space;\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpace es (\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example_1\"\n  fixSpace(\" Example 2\") == \"_Example_2\"\n  fixSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpace = (text) => {\n  let newText = text;\n  let spaces = newText.split(' ');\n  let newText = '';\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space[0].toUpperCase() + space.slice(1).toLowerCase();\n    } else {\n      newText += space;\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpace es (\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example_1\"\n  fixSpace(\" Example 2\") == \"_Example_2\"\n  fixSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = newText.split(' ');\n  let newText = '';\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space[0].toUpperCase() + space.slice(1).toLowerCase();\n    } else {\n      newText += space;\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpace es (\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example_1\"\n  fixSpace(\" Example 2\") == \"_Example_2\"\n  fixSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpace = (text) => {\n  let newText = text;\n  let spaces = newText.split(' ');\n  let newText = '';\n  spaces.forEach((space) => {\n    if (space.length > 1) {\n      newText += space[0].toUpperCase() + space.slice(1).toLowerCase();\n    } else {\n      newText += space;\n    }\n  });\n  return newText;\n}\n\n/*\n  Given a string text, replace all spaces in it wi t h underscores, \n and if a  strin g has more than 2 consecutivespaces, \n  t hen re place all consecutive spaces with -   \n fixSpace es (\"Example\") == \"Example\"\n  fixSpace(\"Example 1\") == \"Example_1\"\n  fixSpace(\" Example 2\") == \"_Example_2\"\n  fixSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = newText.split(' ');\n  let newText = '';\n  spaces.forEach((space) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representi n g a file's name, and retur ns\n  ' Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt', ' exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string representi n g a file's name, and retur ns\n 'Yes' if the the file's name is  valid, andreturn s 'No'otherwise.\n  A file's name isconsidered t obe valid if and only if a llthe following conditions \n  aremet:\n - There should not bemore than threed igits ('0'-'9') in the file's name.  - The file'sname contains exact lyone dot '.'\n  - The substrin gbefore the dot should not b e empty, and it starts with a lett er f ro m \n  the l atin alphap et ('a'-'z'and 'A'-'Z').\n  - The substringafte r the dot should be one of t hese: ['txt','exe','dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regEx = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/;\n  const regEx2 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx3 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx4 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx5 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx6 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx7 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx8 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx9 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx10 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx11 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx12 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx13 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx14 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx15 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx16 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx17 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx18 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx19 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx20 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx21 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx22 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx23 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx24 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx25 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx26 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx27 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx28 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx29 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx30 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx31 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx32 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx33 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx34 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx35 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx36 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx37 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx38 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx39 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx40 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx41 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx42 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx43 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx44 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx45 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx46 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx47 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx48 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx49 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx50 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx51 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx52 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx53 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx54 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx55 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx56 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx57 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx58 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx59 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx60 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx61 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx62 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx63 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx64 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx65 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx66 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx67 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx68 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx69 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx70 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx71 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx72 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n  const regEx73 = /^[a-zA-Z0-9_]+\\.[a-zA-Z0-9_]+$/g;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thisfunction will take alist of integers. Fora ll entries in thelist, th e func tion shall squa r e the integerentry if its  index  is a   multiple of 3 and will cubethe integeren try if its inde x  is a mul tiple of 4and nota multiple of 3.  The function will not \n  change the entriesi n the list whose indexes are not a m ultiple of 3 or 4. The function sh all then return the sum of allen tries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  Thisfunction will take alist of integers. Fora ll entries in thelist, th e func tion shall squa r e the integerentry if its  index  is a   multiple of 3 and will cubethe integeren try if its inde x  is a mul tiple of 4and nota multiple of 3.  The function will not \n  change the entriesi n the list whose indexes are not a m ultiple of 3 or 4. The function sh all then return the sum of allen tries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list with integers nums containing only positive integers, return a new list containing all positive integers in nums except for those in nums.\n  \n  Examples:\n  Given nums = [1,2,3], return [2,3]\n  Given nums = [-1,-5,2,-1,-5], return [-5,2,-1,-5]\n  Given nums = [-1,-5,2,-1,-5,-3,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-5,-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    } else {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    } else {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    } else {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    } else {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    } else {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    } else {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"prime\") {\n      newWords.push(words[i]);\n    } else {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence, the sentence contains som e word s separated bya  space,\nandyou have toreturn  a string that contains the words fro m the origin al  sentence,\n  wh o se length s are prime numbers,\n  the order of  the words in the new stringshould be the sa m e as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif y = (x, n) => { \n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a function that will si m plify the expression\n  x *  n. Th e function retu r ns true if x *  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif y = (x, n) => { \n  const [numerator, denominator] = x.split('/').map(Number);\n  return numerator === n && denominator === 1;\n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x  n. Th e function retu r ns true if x  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif2 y = (x, n) => { \n  const [numerator, denominator] = x.split('/').map(Number);\n  return numerator === n && denominator === 1;\n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x  n. Th e function retu r ns true if x  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif3 y = (x, n) => { \n  const [numerator, denominator] = x.split('/').map(Number);\n  return numerator === n && denominator === 1;\n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x  n. Th e function retu r ns true if x  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif4 y = (x, n) => { \n  const [numerator, denominator] = x.split('/').map(Number);\n  return numerator === n && denominator === 1;\n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x  n. Th e function retu r ns true if x  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif5 y = (x, n) => { \n  const [numerator, denominator] = x.split('/').map(Number);\n  return numerator === n && denominator === 1;\n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x  n. Th e function retu r ns true if x  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif6 y = (x, n) => { \n  const [numerator, denominator] = x.split('/').map(Number);\n  return numerator === n && denominator === 1;\n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x  n. Th e function retu r ns true if x  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif7 y = (x, n) => { \n  const [numerator, denominator] = x.split('/').map(Number);\n  return numerator === n && denominator === 1;\n}\n\n/*Your task is to implement a function that will si m plify the expression\n  x  n. Th e function retu r ns true if x  n evaluates  to awhole number andfalse\n  otherwise. B oth x and n,  a re string repre s entationofa fraction, andhave the followi ng format,\n  <numerator>/<denominator> whereb oth numerator and denominator are po sitive whole numbers.\n\n  You cana ssume that x, and n are valid f ra ctions, and do not have zer o as denominator.\n  simplify(\"1/5 \", \" 5/ 1\") = true \n  simplify (\"1/6\", \"2/1 \") = false\n  simplify(\"7/10\", \"1 0/2\" ) = false\n  */\nconst simplif8 y = (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const re = nums.reduce((acc, n) => {\n    const sum = Number(n) + Number(acc[acc.length - 1]);\n    if (sum > 0) {\n      acc.push(n);\n    }\n    return acc;\n  }, []);\n  return nums.sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverse = (nums) => {\n  const re = nums.reduce((acc, n) => {\n    const sum = Number(n) + Number(acc[acc.length - 1]);\n    if (sum > 0) {\n      acc.push(n);\n    }\n    return acc;\n  }, []);\n  return nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseByIndex = (nums) => {\n  const re = nums.reduce((acc, n) => {\n    const sum = Number(n) + Number(acc[acc.length - 1]);\n    if (sum > 0) {\n      acc.push(n);\n    }\n    return acc;\n  }, []);\n  return nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseByIndexReverse = (nums) => {\n  const re = nums.reduce((acc, n) => {\n    const sum = Number(n) + Number(acc[acc.length - 1]);\n    if (sum > 0) {\n      acc.push(n);\n    }\n    return acc;\n  }, []);\n  return nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseByIndexReverseByIndex = (nums) => {\n  const re = nums.reduce((acc, n) => {\n    const sum = Number(n) + Number(acc[acc.length - 1]);\n    if (sum > 0) {\n      acc.push(n);\n    }\n    return acc;\n  }, []);\n  return nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseByIndexReverseByIndexReverse = (nums) => {\n  const re = nums.reduce((acc, n) => {\n    const sum = Number(n) + Number(acc[acc.length - 1]);\n    if (sum > 0) {\n      acc.push(n);\n    }\n    return acc;\n  }, []);\n  return nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseByIndexReverseByIndexReverseByIndex = (nums) => {\n  const re = nums.reduce((acc, n) => {\n    const sum = Number(n) + Number(acc[acc.length - 1]);\n    if (sum > 0) {\n      acc.push(n);\n    }\n    return acc;\n  }, []);\n  return nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReverseByIndexReverseByIndexReverseByIndexReverse = (nums) => {\n  const re = nums.reduce((acc, n) => {\n    const sum = Number(n) + Number(acc[acc.length - 1]);\n    if (sum > 0) {\n      acc.push(n);\n    }\n    return acc;\n  }, []);\n  return nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of i n tegers\n  in ascending orde r acco rding to the su m  of theirdigi ts.\n  Note:if the re areseveral items with similar sum  of their di gi ts,\n  order the m  based on  their index in original list.\n\n  F or example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/146", "prompt": "/*Writea function that takes an array of numbers a s  input and returns \n  thenumber  of elements in the arraythat  are greater  than10 andboth \n  first and last digitsof anumberar e odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that takes an array of numbers a s  input and returns \n  thenumber  of elements in the arraythat  are greater  than10 andboth \n  first and last digitsof anumberar e odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let first = 0;\n  let last = 0;\n  let even = 0;\n  let odd = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270 = 0;\n  let sum271 = 0;\n  let sum272 = 0;\n  let sum273 = 0;\n  let sum274 = 0;\n  let sum275 = 0;\n  let sum276 = 0;\n  let sum277 = 0;\n  let sum278 = 0;\n  let sum279 = 0;\n  let sum280 = 0;\n  let sum28", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have toc reate an integer array a o f leng th n.\n      For eachi (1≤ i≤ n), the va lue of  a[i] = i * i - i + 1.\n      Return t he number of  t riples (a[i], a [ j], a[k])  of a where i < j < k, \n  and a[i]+ a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have toc reate an integer array a o f leng th n.\n      For eachi (1≤ i≤ n), the va lue of  a[i] = i * i - i + 1.\n      Return t he number of  t riples (a[i], a [ j], a[k])  of a where i < j < k, \n  and a[i]+ a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(Math.pow(3, n))].map((_, i) => i + 1);\n  let t = 1;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] * a[i] + a[i] * a[i - 1] + a[i] * a[i - 2] + a[i] * a[i - 3] + a[i - 1] * a[i - 1] + a[i - 1] * a[i - 2] + a[i - 1] * a[i - 3] + a[i - 2] * a[i - 1] + a[i - 2] * a[i - 2] + a[i - 2] * a[i - 3] + a[i - 3] * a[i - 1] + a[i - 3] * a[i - 2] + a[i - 3] * a[i - 3] + a[i - 3] * a[i - 4] + a[i - 4] * a[i - 1] + a[i - 4] * a[i - 2] + a[i - 4] * a[i - 3] + a[i - 4] * a[i - 4] + a[i - 4] * a[i - 5] + a[i - 5] * a[i - 1] + a[i - 5] * a[i - 2] + a[i - 5] * a[i - 3] + a[i - 5] * a[i - 4] + a[i - 5] * a[i - 5] + a[i - 5] * a[i - 6] + a[i - 6] * a[i - 1] + a[i - 6] * a[i - 2] + a[i - 6] * a[i - 3] + a[i - 6] * a[i - 4] + a[i - 6] * a[i - 5] + a[i - 6] * a[i - 6] + a[i - 6] * a[i - 7] + a[i - 7] * a[i - 1] + a[i - 7] * a[i - 2] + a[i - 7] * a[i - 3] + a[i - 7] * a[i - 4] + a[i - 7] * a[i - 5] + a[i - 7] * a[i - 6] + a[i - 7] * a[i - 7] + a[i - 7] * a[i - 8] + a[i - 8] * a[i - 1] + a[i - 8] * a[i - 2] + a[i - 8] * a[i - 3] + a[i - 8] * a[i - 4] + a[i - 8] * a[i - 5] + a[i - 8] * a[i - 6] + a[i - 8] * a[i - 7] + a[i - 8] * a[i - 8] + a[i - 8] * a[i - 9] + a[i - 9] * a[i - 1] + a[i - 9] * a[i - 2] + a[i - 9] * a[i - 3] + a[i - 9] * a[i - 4] + a[i - 9] * a[i - 5] + a[i - 9] * a[i - 6] + a[i - 9] * a[i - 7] + a[i - 9] * a[i - 8] + a[i - 9] * a[i - 9] + a[i - 9] * a[i - 10] + a[i - 10] * a[i - 1] + a[i - 10] * a[i - 2] + a[i - 10] * a[i - 3] + a[i - 10] * a[i - 4] + a[i - 10] * a[i - 5] + a[i - 10] * a[i - 6] + a[i - 10] * a[i - 7] + a[i - 10] * a[i - 8] + a[i - 10] * a[i - 9] + a[i - 10] * a[i - 10] + a[i - 10] * a[i - 11] + a[i - 11] * a[i - 1] + a[i - 11] * a[i - 2] + a[i - 11] * a[i - 3] + a[i - 11] * a[i - 4] + a[i - 11] * a[i - 5] + a[i - 11] * a[i - 6] + a[i - 11] * a[i - 7] + a[i - 11] * a[i - 8] + a[i - 11] * a[i - 9] + a[i - 11] * a[i - 10] + a[i - 11] * a[i - 11] + a[i - 11] * a[i - 12] + a[i - 12] * a[i - 1] + a[i - 12] * a[i - 2] + a[i - 12] * a[i - 3] + a[i - 12] * a[i - 4] + a[i - 12] * a[i - 5] + a[i - 12] * a[i - 6] + a[i - 12] * a[i - 7] + a[i - 12] * a[i - 8] + a[i - 12] * a[i - 9] + a[i - 12] * a[i - 10] + a[i - 12] * a[i - 11] + a[i - 12] * a[i - 12] + a[i - 12] * a[i - 13] + a[i - 13] * a[i - 1] + a[i - 13] * a[i - 2] + a[i - 13] * a[i - 3] + a[i - 13] * a[i - 4] + a[i - 13] * a[i - 5] + a[i - 13] * a[i - 6] + a[i - 13] * a[i - 7] + a[i - 13] * a[i - 8] + a[i - 13] * a[i - 9] + a[i - 13] * a[i - 10] + a[i - 13] * a[i - 11] + a[i - 13] * a[i - 12] + a[i - 13] * a[i - 13] + a[i - 13] * a[i - 14] + a[i - 14] * a[i - 1] + a[i - 14] * a[i - 2] + a[i - 14] * a[i - 3] + a[i - 14] * a[i - 4] + a[i - 14] * a[i - 5] + a[i - 14] * a[i - 6] + a[i - 14] * a[i - 7] + a[i - 14] * a[i - 8] + a[i - 14] * a[i - 9] + a[i - 14] * a[i - 10] + a[i - 14] * a[i - 11] + a[i - 14] * a[i - 12] + a[i - 14] * a[i - 13] + a[i - 14] * a[i - 14] + a[i - 14] * a[i - 15] + a[i - 15] * a[i - 1] + a[i - 15] * a[i - 2] + a[i - 15] * a[i - 3] + a[i - 15] * a[i - 4] + a[i - 15] * a[i - 5] + a[i - 15] * a[i - 6] + a[i - 15] * a[i - 7] + a[i - 15] * a[i - 8] + a[i - 15] * a[i - 9] + a[i - 15] * a[i - 10] + a[i - 15] * a[i - 11] + a[i - 15] * a[i - 12] + a[i - 15] * a[i - 13] + a[i - 15] * a[i - 14] + a[i - 15] * a[i - 15] + a[i - 15] * a[i - 16] + a[i - 16] * a[i - 1] + a[i - 16] * a[i - 2] + a[i - 16] * a[i - 3] + a[i - 16] * a[i - 4] + a[i - 16] * a[i - 5] + a[i - 16] * a[i - 6] + a[i - 16] * a[i - 7] + a[i - 16] * a[i - 8] + a[i - 16] * a[i - 9] + a[i - 16] * a[i - 10] + a[i - 16] * a[i - 11] + a[i - 16] * a[i - 12] + a[i - 16] * a[i - 13] + a[i - 16] * a[i - 14] + a[i - 16] * a[i - 15] + a[i - 16] * a[i - 16] + a[i - 16] * a[i - 17] + a[i - 17] * a[i - 1] + a[i - 17] * a[i - 2] + a[i - 17] * a[i - 3] + a[i - 17] * a[i - 4] + a[i - 17] * a[i - 5] + a[i - 17]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is M ercury , the next onei s Venus,thenEarth, Mars,  Jupit er, Saturn,\n  Uranus, Neptune.\n Writ e a function  t hat takes two p l anet name s as strings planet1 and planet2.\n The function should return a tuple containin g  all planets whose orbits are\n  loca ted between the orbit of planet1a ndthe orbit of planet2, sorted  b y\n  the proximity to the su n.\n  The function should return an  emp ty  tuple ifplanet1 orplanet2\n  ar e notcorrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is M ercury, the next onei s Venus,thenEarth, Mars,  Jupit er, Saturn,\n  Uranus, Neptune.\n Writ e a function  t hat takes two p l anet name s as strings planet1 and planet2.\n The function should return a tuple containin g  all planets whose orbits are\n  loca ted between the orbit of planet1a ndthe orbit of planet2, sorted  b y\n  the proximity to the su n.\n  The function should return an  emp ty  tuple ifplanet1 orplanet2\n  ar e notcorrect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1a = planet1.toLowerCase();\n  const planet2a = planet2.toLowerCase();\n  const planet1b = planet1.toUpperCase();\n  const planet2b = planet2.toUpperCase();\n  const planet1c = planet1a.toUpperCase();\n  const planet2c = planet2a.toUpperCase();\n  const planet1d = planet1b.toUpperCase();\n  const planet2d = planet2b.toUpperCase();\n  const planet1e = planet1c.toUpperCase();\n  const planet2e = planet2c.toUpperCase();\n  const planet1f = planet1d.toUpperCase();\n  const planet2f = planet2d.toUpperCase();\n  const planet1e = planet1e.toUpperCase();\n  const planet2e = planet2e.toUpperCase();\n  const planet1g = planet1f.toUpperCase();\n  const planet2g = planet2f.toUpperCase();\n  const planet1h = planet1e.toLowerCase();\n  const planet2h = planet2e.toLowerCase();\n  const planet1i = planet1f.toLowerCase();\n  const planet2i = planet2f.toLowerCase();\n  const planet1j = planet1e.toUpperCase();\n  const planet2j = planet2e.toUpperCase();\n  const planet1k = planet1f.toUpperCase();\n  const planet2k = planet2f.toUpperCase();\n  const planet1l = planet1e.toLowerCase();\n  const planet2l = planet2e.toLowerCase();\n  const planet1m = planet1e.toUpperCase();\n  const planet2m = planet2e.toUpperCase();\n  const planet1n = planet1f.toUpperCase();\n  const planet2n = planet2f.toUpperCase();\n  const planet1o = planet1e.toLowerCase();\n  const planet2o = planet2e.toLowerCase();\n  const planet1p = planet1e.toUpperCase();\n  const planet2p = planet2e.toUpperCase();\n  const planet1q = planet1f.toLowerCase();\n  const planet2q = planet2f.toLowerCase();\n  const planet1r = planet1e.toLowerCase();\n  const planet2r = planet2e.toLowerCase();\n  const planet1s = planet1f.toUpperCase();\n  const planet2s = planet2f.toUpperCase();\n  const planet1t = planet1e.toLowerCase();\n  const planet2t = planet2e.toLowerCase();\n  const planet1u = planet1f.toUpperCase();\n  const planet2u = planet2f.toUpperCase();\n  const planet1v = planet1e.toUpperCase();\n  const planet2v = planet2e.toUpperCase();\n  const planet1w = planet1e.toLowerCase();\n  const planet2w = planet2e.toLowerCase();\n  const planet1x = planet1e.toUpperCase();\n  const planet2x = planet2e.toUpperCase();\n  const planet1y = planet1f.toUpperCase();\n  const planet2y = planet2f.toUpperCase();\n  const planet1z = planet1e.toLowerCase();\n  const planet2z = planet2e.toLowerCase();\n  const planet1A = planet1e.toUpperCase();\n  const planet2A = planet2e.toUpperCase();\n  const planet1B = planet1f.toUpperCase();\n  const planet2B = planet2f.toUpperCase();\n  const planet1C = planet1e.toLowerCase();\n  const planet2C = planet2e.toLowerCase();\n  const planet1D = planet1f.toUpperCase();\n  const planet2D = planet2f.toUpperCase();\n  const planet1E = planet1e.toLowerCase();\n  const planet2E = planet2e.toLowerCase();\n  const planet1F = planet1f.toUpperCase();\n  const planet2G = planet2f.toUpperCase();\n  const planet1H = planet1e.toLowerCase();\n  const planet2H = planet2e.toLowerCase();\n  const planet1I = planet1f.toLowerCase();\n  const planet2I = planet2f.toLowerCase();\n  const planet1J = planet1e.toUpperCase();\n  const planet2J = planet2e.toUpperCase();\n  const planet1K = planet1f.toUpperCase();\n  const planet2K = planet2f.toUpperCase();\n  const planet1L = planet1e.toLowerCase();\n  const planet2L = planet2e.toLowerCase();\n  const planet1M = planet1e.toUpperCase();\n  const planet2M = planet2e.toUpperCase();\n  const planet1N = planet1f.toUpperCase();\n  const planet2N = planet2f.toUpperCase();\n  const planet1O = planet1e.toLowerCase();\n  const planet2O = planet2e.toLowerCase();\n  const planet1P = planet1e.toUpperCase();\n  const planet2P = planet2e.toUpperCase();\n  const planet1Q = planet1f.toLowerCase();\n  const planet2Q = planet2f.toLowerCase();\n  const planet1R = planet1e.toLowerCase();\n  const planet2R = planet2e.toLowerCase();\n  const planet1S = planet1f.toUpperCase();\n  const planet2S = planet2f.toUpperCase();\n  const planet1T = planet1e.toLowerCase();\n  const planet2T = planet2e.toLowerCase();\n  const planet1U = planet1f.toUpperCase();\n  const planet2U = planet2f.toUpperCase();\n  const planet1V = planet1e.toUpperCase();\n  const planet2V = planet2e.toUpperCase();\n  const planet1W = planet1e.toLowerCase();\n  const planet2W = planet2e.toLowerCase();\n  const planet1X = planet1e.toUpperCase();\n  const planet2X = planet2e.toUpperCase();\n  const planet1Y = planet1f.toUpperCase();\n  const planet2Y = planet2f.toUpperCase();\n  const planet1Z = planet1e.toLowerCase();\n  const planet2Z = planet2e.toLowerCase();\n  const planet1a = planet1f.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/149", "prompt": "/*Writea function that accepts a list of strings a s  a parameter,\n  deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that accepts a list of strings a s  a parameter,\n  deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepts a list and a parameter, deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert sortedListSum([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSort = (lst) => {\n  let sortedList = [];\n  let sortedListSum = sortedListSum(lst);\n  for (let i = 0; i < sortedListSum.length; i++) {\n    sortedList.push(sortedListSum[i]);\n  }\n  return sortedList;\n};\n\n/*\n  Write a function that accepts a list and a parameter, deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert sortedListSort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListSort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortDesc = (lst) => {\n  let sortedList = [];\n  let sortedListSum = sortedListSum(lst);\n  for (let i = 0; i < sortedListSum.length; i++) {\n    sortedList.push(sortedListSum[i]);\n  }\n  return sortedList.sort((a, b) => b - a);\n};\n\n/*\n  Write a function that accepts a list and a parameter, deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert sortedListSortDesc([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListSortDesc([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortAsc = (lst) => {\n  let sortedList = [];\n  let sortedListSum = sortedListSum(lst);\n  for (let i = 0; i < sortedListSum.length; i++) {\n    sortedList.push(sortedListSum[i]);\n  }\n  return sortedList.sort((a, b) => a - b);\n};\n\n/*\n  Write a function that accepts a list and a parameter, deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert sortedListSortAsc([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListSortAsc([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortAscDesc = (lst) => {\n  let sortedList = [];\n  let sortedListSum = sortedListSum(lst);\n  for (let i = 0; i < sortedListSum.length; i++) {\n    sortedList.push(sortedListSum[i]);\n  }\n  return sortedList.sort((a, b) => b - a);\n};\n\n/*\n  Write a function that accepts a list and a parameter, deletes th e stri ngs that have o d d lengthsfrom  it,\n  and r eturns  the resulted list with a sortedorde r,\n The lis tis always a lis t  of strin gsand never an array of numbers,\n and it may contain duplicates.\n  Theorder o f  the list should be ascending by len gth of each word, and you\n  should  return the list sorted by that  r ule.\n  If two words have th e same length, sort the list alpha beti ca lly.\n  The  function s hould return  a list of strings in sorted ord er.  You may assume that all wo rds will have t he sam e length.\n  For example:\n  assert sortedListSortDesc([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert sortedListSortDesc([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortDescAsc = (lst) => {\n  let sortedList = [];\n  let sortedListSum = sortedListSum(lst);\n  for (let i = 0; i < sortedListSum.length; i++) {\n    sortedList.push(sortedListSum[i]);\n  }\n  return sortedList.sort", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromZero = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromOne = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromTwo = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromThree = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromFour = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromFive = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromSix = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromSeven = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromEight = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromNine = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromTen = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromEleven = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromTwelve = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromThirteen = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromFourteen = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromFifteen = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromSixteen = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromSeventeen = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    s += i;\n    i++;\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbe r s starting from 0upto n i nclusi ve.\n * If n is 0, return an empty string.\n */\nconst stringSequenceFromEighteen = (n) => {\n  let s = '';\n  let i = 0;\n  let v = n;\n  while (i < v) {\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value ofx  if n is \n  a prime number  and s hould return th e  value ofy ot herwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let isPrime = true;\n  let isOdd = true;\n  let isEven = true;\n  let isZero = true;\n  let isOne = true;\n  let isTwo = true;\n  let isThree = true;\n  let isFour = true;\n  let isFive = true;\n  let isSix = true;\n  let isSeven = true;\n  let isEight = true;\n  let isNine = true;\n  let isTen = true;\n  let isEleven = true;\n  let isTwelve = true;\n  let isThirteen = true;\n  let isFourteen = true;\n  let isFifteen = true;\n  let isSixteen = true;\n  let isSeventeen = true;\n  let isEighteen = true;\n  let isNineteen = true;\n  let isTwenty = true;\n  let isThirty = true;\n  let isForty = true;\n  let isFifty = true;\n  let isSixty = true;\n  let isSeventy = true;\n  let isEighty = true;\n  let isNinety = true;\n  let isTwentyOne = true;\n  let isTwentyTwo = true;\n  let isTwentyThree = true;\n  let isTwentyFour = true;\n  let isTwentyFive = true;\n  let isTwentySix = true;\n  let isTwentySeven = true;\n  let isTwentyEight = true;\n  let isTwentyNine = true;\n  let isThirtyOne = true;\n  let isThirtyTwo = true;\n  let isThirtyThree = true;\n  let isThirtyFour = true;\n  let isThirtyFive = true;\n  let isThirtySix = true;\n  let isThirtySeven = true;\n  let isThirtyEight = true;\n  let isThirtyNine = true;\n  let isFourtyOne = true;\n  let isFourtyTwo = true;\n  let isFourtyThree = true;\n  let isFourtyFour = true;\n  let isFourtyFive = true;\n  let isFourtySix = true;\n  let isFourtySeven = true;\n  let isFourtyEight = true;\n  let isFourtyNine = true;\n  let isFiftyOne = true;\n  let isFiftyTwo = true;\n  let isFiftyThree = true;\n  let isFiftyFour = true;\n  let isFiftyFive = true;\n  let isFiftySix = true;\n  let isFiftySeven = true;\n  let isFiftyEight = true;\n  let isFiftyNine = true;\n  let isSixtyOne = true;\n  let isSixtyTwo = true;\n  let isSixtyThree = true;\n  let isSixtyFour = true;\n  let isSixtyFive = true;\n  let isSixtySix = true;\n  let isSixtySeven = true;\n  let isSixtyEight = true;\n  let isSixtyNine = true;\n  let isSeventyOne = true;\n  let isSeventyTwo = true;\n  let isSeventyThree = true;\n  let isSeventyFour = true;\n  let isSeventyFive = true;\n  let isSeventySix = true;\n  let isSeventySeven = true;\n  let isSeventyEight = true;\n  let isSeventyNine = true;\n  let isEightyOne = true;\n  let isEightyTwo = true;\n  let isEightyThree = true;\n  let isEightyFour = true;\n  let isEightyFive = true;\n  let isEightySix = true;\n  let isEightySeven = true;\n  let isEightyEight = true;\n  let isEightyNine = true;\n  let isNinetyOne = true;\n  let isNinetyTwo = true;\n  let isNinetyThree = true;\n  let isNinetyFour = true;\n  let isNinetyFive = true;\n  let isNinetySix = true;\n  let isNinetySeven = true;\n  let isNinetyEight = true;\n  let isNinetyNine = true;\n  let isTwentyOne = true;\n  let isTwentyTwo = true;\n  let isTwentyThree = true;\n  let isTwentyFour = true;\n  let isTwentyFive = true;\n  let isTwentySix = true;\n  let isTwentySeven = true;\n  let isTwentyEight = true;\n  let isTwentyNine = true;\n  let isThirtyOne = true;\n  let isThirtyTwo = true;\n  let isThirtyThree = true;\n  let isThirtyFour = true;\n  let isThirtyFive = true;\n  let isThirtySix = true;\n  let isThirtySeven = true;\n  let isThirtyEight = true;\n  let isThirtyNine = true;\n  let isFourtyOne = true;\n  let isFourtyTwo = true;\n  let isFourtyThree = true;\n  let isFourtyFour = true;\n  let isFourtyFive = true;\n  let isFourtySix = true;\n  let isFourtySeven = true;\n  let isFourtyEight = true;\n  let isFourtyNine = true;\n  let isFiftyOne = true;\n  let isFiftyTwo = true;\n  let isFiftyThree = true;\n  let isFiftyFour = true;\n  let isFiftyFive = true;\n  let isFiftySix = true;\n  let isFiftySeven = true;\n  let isFiftyEight = true;\n  let isFiftyNine = true;\n  let isSixtyOne = true;\n  let isSixtyTwo = true;\n  let isSixtyThree = true;\n  let isSixtyFour = true;\n  let isSixtyFive = true;\n  let isSixtySix = true;\n  let isSixtySeven = true;\n  let isSixtyEight = true;\n  let isSixtyNine = true;\n  let isSeventyOne = true;\n  let isSeventyTwo = true;\n  let isSeventyThree = true;\n  let isSeventyFour = true;\n  let isSeventyFive = true;\n  let isSeventySix = true;\n  let isSeventySeven = true;\n  let isSeventyEight = true;\n  let isSeventyNine = true;\n  let isEightyOne = true;\n  let isEightyTwo = true;\n  let isEightyThree = true;\n  let isEightyFour = true;\n  let isEightyFive = true;\n  let isEightySix = true;\n  let isEightySeven = true;\n  let isEightyEight = true;\n  let isEightyNine = true;\n  let isNinetyOne = true;\n  let isNinetyTwo = true;\n  let isNinetyThree = true;\n  let isNinetyFour = true;\n  let isNinetyFive = true;\n  let isNinetySix = true;\n  let isNinetySeven = true;\n  let isNinetyEight = true;\n  let isNinetyNine = true;\n  let isTwentyOne = true;\n  let isTwentyTwo = true;\n  let isTwentyThree = true;\n  let isTwentyFour = true;\n  let isTwentyFive = true;\n  let isTwentySix = true;\n  let isTwentySeven = true;\n  let isTwentyEight = true;\n  let isTwentyNine = true;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, returnthe sum of squar e s of the numbers\n in thelist t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, returnthe sum of squar e s of the numbers\n in thelist t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (ls.length === 0) {\n      return 0;\n    }\n    const sum = 0;\n    for (let i = 0; i < ls.length; i++) {\n      if (ls[i] % 2 === 0) {\n        sum += Math.pow(ls[i], 2);\n      }\n    }\n    return sum;\n  };\n  /* Given a list of numbers, returnthe sum of squar e s of the numbers\n in the list t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (ls.length === 0) {\n      return 0;\n    }\n    const sum = 0;\n    for (let i = 0; i < ls.length; i++) {\n      if (ls[i] % 2!== 0) {\n        sum += Math.pow(ls[i], 2);\n      }\n    }\n    return sum;\n  };\n  /* Given a list of numbers, returnthe sum of squar e s of the numbers\n in the list t hat are odd. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (ls.length === 0) {\n      return 0;\n    }\n    const sum = 0;\n    for (let i = 0; i < ls.length; i++) {\n      if (ls[i] % 2!== 0) {\n        sum += Math.pow(ls[i], 2);\n      }\n    }\n    return sum;\n  };\n  /* Given a list of numbers, returnthe sum of squar e s of the numbers\n in the list t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (ls.length === 0) {\n      return 0;\n    }\n    const sum = 0;\n    for (let i = 0; i < ls.length; i++) {\n      if (ls[i] % 2!== 0) {\n        sum += Math.pow(ls[i], 2);\n      }\n    }\n    return sum;\n  };\n  /* Given a list of numbers, returnthe sum of squar e s of the numbers\n in the list t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (ls.length === 0) {\n      return 0;\n    }\n    const sum = 0;\n    for (let i = 0; i < ls.length; i++) {\n      if (ls[i] % 2!== 0) {\n        sum += Math.pow(ls[i], 2);\n      }\n    }\n    return sum;\n  };\n  /* Given a list of numbers, returnthe sum of squar e s of the numbers\n in the list t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (ls.length === 0) {\n      return 0;\n    }\n    const sum = 0;\n    for (let i = 0; i < ls.length; i++) {\n      if (ls[i] % 2!== 0) {\n        sum += Math.pow(ls[i], 2);\n      }\n    }\n    return sum;\n  };\n  /* Given a list of numbers, returnthe sum of squar e s of the numbers\n in the list t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (ls.length === 0) {\n      return 0;\n    }\n    const sum = 0;\n    for (let i = 0; i < ls.length; i++) {\n      if (ls[i] % 2!== 0) {\n        sum += Math.pow(ls[i], 2);\n      }\n    }\n    return sum;\n  };\n  /* Given a list of numbers, returnthe sum of squar e s of the numbers\n in the list t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (ls.length === 0) {\n      return 0;\n    }\n    const sum = 0;\n    for (let i = 0; i < ls.length; i++) {\n      if (ls[i] % 2!== 0) {\n        sum += Math.pow(ls[i], 2);\n      }\n    }\n    return sum;\n  };\n  /* Given a list of numbers, returnthe sum of squar e s of the numbers\n in the list t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */const doubleTheDifference = (ls t)  => {\n    if (ls.length === 0) {\n      return 0;\n    }\n    const sum = 0;\n    for (let i = 0; i < ls.length; i++) {\n      if (ls[i] % 2!== 0) {\n        sum += Math.pow(ls[i], 2);\n      }\n    }\n    return sum;\n  };\n  /* Given a list of numbers, returnthe sum of squar e s of the numbers\n in the list t hat are even. Ig n ore numbers th at are negat ive or  not integers.\n doubleTheDifference( [1, 3, 2, 0] )== 1 + 9 + 0 +0  = 10\n  d oubleTheDifference([-1, -2, 0]) ==0\n  doubleTheDifference([9, -2]) == 81\n  doub l eTheDifference([0]) == 0\n  If the in put listis empty, return 0.\n  */", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the resu l t of some long-awaited\n  e vent i s finally known .  Thefeelingsand thoughts  you h ave atthat moment are\n  definitely w orthnotingdo wn and comparin g .\n  Yourtask is todetermine if a person co rrectly guessed the results of a number of ma t ches.\n  You are given two arrays ofscores and guesses of equal length , where each index shows a matc h.  \n  Return an array of thesame length denoting how far off e achgu ess was. I f they have  guessed cor rectly,\n the value is 0, and if  not , the value is the absolutedifference betw een th e guess an d the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all remember that feeling when the resu l t of some long-awaited\n  e vent i s finally known.  Thefeelingsand thoughts  you h ave atthat moment are\n  definitely w orthnotingdo wn and comparin g.\n  Yourtask is todetermine if a person co rrectly guessed the results of a number of ma t ches.\n  You are given two arrays ofscores and guesses of equal length, where each index shows a matc h.  \n  Return an array of thesame length denoting how far off e achgu ess was. I f they have  guessed cor rectly,\n the value is 0, and if  not, the value is the absolutedifference betw een th e guess an d the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = new Array(game.length).fill(0);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);\n  scores.fill(-1);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the nameof a class (a string)a nd a list of extensions.\n The e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM .  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given the nameof a class (a string)a nd a list of extensions.\n The e xtensions are t o  be usedto lo ad additiona l clas ses tothe class. The\n  strengthof t he extension  i s as follows: L e t CAP bethe numberof the uppercase\n  lette rs inthe extension's name, and let SM be the number of lowercase letters\n  in the  extension's name, the strength is  given by the fraction CAP - SM.  You should find the stron gest extension andreturna string  inth is\n  forma t: ClassNam e.StrongestE xtensionName.\n  If there are two  ormore extensions with the sam e strength, you  shoul d\n  choose  the one that co mesfirst in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_counter = 0;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension_strength_min = -1;\n  let extension_strength_max = -1;\n  let extension", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cpatternCheck = (a, b) => { \n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. Youneed to return true if the second word or any ofits ro tations is a su b string inthefirst word\n cycpa tternCheck(\"abcd\",\"abd\") => false\n  c ycpatternChe ck (\"hello\",\"ell\") => true\n cycpatternCheck(\"whassup\",\"psus\")=> false\n  cycpatternCheck(\"abab\",\"baa\") => t r ue\n  cycpatternCheck(\"efef\",\"eeff\")=> false  cycpatternCheck(\"himens s\",\"simen\") => true\n */\nconstcy cpatternCheck = (a, b) => { \n  let firstWord = a.split(' ').join('');\n  let secondWord = b.split(' ').join('');\n  let firstWordArray = firstWord.split('');\n  let secondWordArray = secondWord.split('');\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let secondWordArrayLength = secondWordArray.length;\n  let firstWordArrayLength = firstWordArray.length;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/155", "prompt": "/*Givenan integer. return atuplethat has the num b er of even and odd digitsrespec tively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givenan integer. return atuplethat has the num b er of even and odd digitsrespec tively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  let tempNum = num;\n  while (tempNum % 2 === 0) {\n    evenCount++;\n    tempNum = tempNum / 2;\n  }\n  while (tempNum % 2!== 0 && tempNum % 2!== 0) {\n    oddCount++;\n    tempNum = tempNum / 2;\n  }\n  count = evenCount + oddCount;\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array with the even and odd digits of that string.\n\n   Example:\n      evenOdd(\"12\") ==> [2,3]\n      evenOdd(\"123\") ==> [2,3]\n      evenOdd(\"1234\") ==> [2,3]\n      evenOdd(\"12345\") ==> [2,3]\n      evenOdd(\"123456\") ==> [2,3]\n      evenOdd(\"1234567\") ==> [2,3]\n      evenOdd(\"12345678\") ==> [2,3]\n      evenOdd(\"123456789\") ==> [2,3]\n      evenOdd(\"1234567890\") ==> [2,3]\n      evenOdd(\"12345678901\") ==> [2,3]\n      evenOdd(\"123456789012\") ==> [2,3]\n      evenOdd(\"1234567890123\") ==> [2,3]\n      evenOdd(\"12345678901234\") ==> [2,3]\n      evenOdd(\"123456789012345\") ==> [2,3]\n      evenOdd(\"1234567890123456\") ==> [2,3]\n      evenOdd(\"12345678901234567\") ==> [2,3]\n      evenOdd(\"123456789012345678\") ==> [2,3]\n      evenOdd(\"123456789012345679\") ==> [2,3]\n      evenOdd(\"1234567890123456789\") ==> [2,3]\n      evenOdd(\"12345678901234567890\") ==> [2,3]\n      evenOdd(\"123456789012345678901\") ==> [2,3]\n      evenOdd(\"1234567890123456789012\") ==> [2,3]\n      evenOdd(\"12345678901234567890123\") ==> [2,3]\n      evenOdd(\"123456789012345678901234\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345679\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345679\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345678\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345679\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567890\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345678901\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567890123\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345678901234\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012345\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567890123456\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345678901234567\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012345678\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012345679\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567890123456789\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345678901234567890\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012345678901\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567890123456789012\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345678901234567890123\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012345678901234\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567890123456789012345\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345678901234567890123456\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012345678901234567\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567890123456789012345678\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567890123456789012345679\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345678901234567890123456789\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012345678901234567890\") ==> [2,3]\n      evenOdd(\"12345678901234567890123456789012345678901234567890123456789012345678901\") ==> [2,3]\n      evenOdd(\"123456789012345678901234567890123456789012345678901234567890123456789012\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012345678901234567890123\") ==> [2,3]\n      evenOdd(\"1234567890123456789012345678901234567890123456789012345678901234\") ==> [2,3]\n      evenO", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer,obtain its roman numer a l equivalent as astring,  andreturn it in lo w ercase.\nRest rictions: 1<= num  <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer,obtain its roman numer a l equivalent as astring,  andreturn it in lo w ercase.\nRest rictions: 1<= num  <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = (number + '');\n  let str = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let w = 0;\n  let result = '';\n  let temp = '';\n  let temp1 = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp261 = '';\n  let temp262 = '';\n  let temp263 = '';\n  let temp264 = '';\n  let temp265 = '';\n  let temp266 = '';\n  let temp267 = '';\n  let temp268 = '';\n  let temp269 = '';\n  let temp270 = '';\n  let temp271 = '';\n  let temp272 = '';\n  let temp27", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triang l e. Return true ifthe thre e\n  si des form a righ t -angled triang le, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 === l2 && l2 === l3;\n};\n\n/*\n Given the lengths of the three sides of a tri angle l e. Return true ifthe thre e\n  si des form a left t -angled tri angle, false ot herwis e.\n  Aleft-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 === l2 && l2 === l3;\n};\n\n/*\n Given the lengths of the three sides of a right angled tri angle l e. Return true ifthe thre e\n  si des form a right t -angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 === l2 && l2 === l3;\n};\n\n/*\n Given the lengths of the three sides of a left angled tri angle l e. Return true ifthe thre e\n  si des form a left t -angled tri angle, false ot herwis e.\n  Aleft-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 === l2 && l2 === l3;\n};\n\n/*\n Given the lengths of the three sides of a right angled tri angle l e. Return true ifthe thre e\n  si des form a right t -angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 === l2 && l2 === l3;\n};\n\n/*\n Given the lengths of the three sides of a left angled tri angle l e. Return true ifthe thre e\n  si des form a left t -angled tri angle, false ot herwis e.\n  Aleft-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 === l2 && l2 === l3;\n};\n\n/*\n Given the lengths of the three sides of a right angled tri angle l e. Return true ifthe thre e\n  si des form a right t -angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 === l2 && l2 === l3;\n};\n\n/*\n Given the lengths of the three sides of a left angled tri angle l e. Return true ifthe thre e\n  si des form a left t -angled tri angle, false ot herwis e.\n  Aleft-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  leftAngleTriangle(3, 4, 5) == true\n  leftAngleTriangle(1, 2, 3) == false\n  */\nconst leftAngleTriangle = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 === l2 && l2 === l3;\n};\n\n/*\n Given the lengths of the three sides of a right angled tri angle l e. Return true ifthe thre e\n  si des form a right t -angled tri angle, false ot herwis e.\n  Aright-angled triangle is a tri angle in whi ch  one angle is r i ght angle  or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 === l2 && l2 === l3;\n};\n\n/*\n Given the lengths of the three sides of a left angled tri angle l e. Return true ifthe thre e\n  si des form a left t -angled tri angle, false ot herwis e.\n  Aleft-angled triangle is a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/158", "prompt": "/*Writea function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \" , \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\" ,\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that accepts a list of strings. The list contains differe nt wor ds. Return thew ord withmaxim um number\n of uni que characters. If multiple strings h ave maximumnu mber of unique characte rs, returnthe onewhich comes firs t in lexicographical order.\n  findMax([\"name \", \"of\", \"string\"]) === \"string\"\n  fi ndMax([\"name\",\"enam\", \"game\"]) == = \"enam\"\n  findMax([\"aaaaaaa\",\"b b\",\"cc\"]) === \"\"aaaaaaa\"\n */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxWordLength = 0;\n  let maxWordLengthLength = 0;\n  let maxWordLengthLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWordLengthLength2 = 0;\n  let maxWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts , but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and youalready have eat e n a certain number of carr ots,\n but now you ne e d toeatmorecarrots to c omplet e the day's meals.\n  you should retur n anarray o f[ total numbero f eaten c arrots after your meals,\n                                the number ofcarrots left after your meals ]\n  if there a re not enough remaining carrots,y ouwill eat all remaining carro ts, but will still be hungry. \n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number * need / remaining);\n  const carrotLeft = carrots - need;\n  const carrotEaten = Math.floor(number * need / remaining);\n  const carrotRemaining = carrots - carrotEaten;\n  const carrotRemainingLeft = carrotRemaining - carrotLeft;\n  const carrotRemainingEaten = carrotRemaining - carrotEaten;\n  const carrotRemainingLeft = carrotRemainingLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEaten - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - carrotLeft;\n  const carrotRemainingEatenLeft = carrotRemainingEatenLeft - car", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct chara c ters (regardless of case)does i t consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWords('xyzXYZ')\n  3\n  >>> countDistinctWords('Jerry')\n  4\n  */\nconst countDistinctWordsWithSpacesAndPunctuation = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWordsWithSpacesAndPunctuation('xyzXYZ')\n  3\n  >>> countDistinctWordsWithSpacesAndPunctuation('Jerry')\n  4\n  */\nconst countDistinctWordsWithSpacesAndPunctuationAndNumbers = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbers('xyzXYZ')\n  3\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbers('Jerry')\n  4\n  */\nconst countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbers = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbers('xyzXYZ')\n  3\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbers('Jerry')\n  4\n  */\nconst countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbers = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbers('xyzXYZ')\n  3\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbers('Jerry')\n  4\n  */\nconst countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbers = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbers('xyzXYZ')\n  3\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbers('Jerry')\n  4\n  */\nconst countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbers('xyzXYZ')\n  3\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbers('Jerry')\n  4\n  */\nconst countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbers('xyzXYZ')\n  3\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbers('Jerry')\n  4\n  */\nconst countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers('xyzXYZ')\n  3\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers('Jerry')\n  4\n  */\nconst countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers = (string) => {\n  let count = 0;\n  let chara = '';\n  for (let i = 0; i < string.length; i++) {\n    chara = string.charAt(i);\n    if (chara === 'a' || chara === 'A') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct words (regardless of case)does i t consist of\n  >>> countDistinctWordsWithSpacesAndPunctuationAndNumbersAndNumbersAndNumbersAndNumbersAndNumbersAndNumbers('xyzXYZ')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('*')\n  const result = operandList.reduce((acc, curr, index) => {\n    if (operatorList[index] === '-') {\n      return acc + -operandList[index]\n    }\n    if (operatorList[index] === '*') {\n      return acc + operandList[index]\n    }\n    if (operatorList[index] === '/') {\n      return acc + operandList[index] / operandList[index - 1]\n    }\n    if (operatorList[index] === '**') {\n      return acc + Math.pow(operandList[index], 2)\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('*')\n  const result = operandList.reduce((acc, curr, index) => {\n    if (operatorList[index] === '-') {\n      return acc + -operandList[index]\n    }\n    if (operatorList[index] === '*') {\n      return acc + operandList[index]\n    }\n    if (operatorList[index] === '/') {\n      return acc + operandList[index] / operandList[index - 1]\n    }\n    if (operatorList[index] === '**') {\n      return acc + Math.pow(operandList[index], 2)\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('*')\n  const result = operandList.reduce((acc, curr, index) => {\n    if (operatorList[index] === '-') {\n      return acc + -operandList[index]\n    }\n    if (operatorList[index] === '*') {\n      return acc + operandList[index]\n    }\n    if (operatorList[index] === '/') {\n      return acc + operandList[index] / operandList[index - 1]\n    }\n    if (operatorList[index] === '**') {\n      return acc + Math.pow(operandList[index], 2)\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('*')\n  const result = operandList.reduce((acc, curr, index) => {\n    if (operatorList[index] === '-') {\n      return acc + -operandList[index]\n    }\n    if (operatorList[index] === '*') {\n      return acc + operandList[index]\n    }\n    if (operatorList[index] === '/') {\n      return acc + operandList[index] / operandList[index - 1]\n    }\n    if (operatorList[index] === '**') {\n      return acc + Math.pow(operandList[index], 2)\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator,and operand. The first list has basic algebra ope ration s, and \n  the s e condlistis a  list of int egers.  Use the two given lists to build the  algebric \n e xpression and r e turn theevaluationof thisexpression.\n\n  T he basic algebra operations:  Addition ( + ) \n  Subtraction ( - ) \n  Multiplicati on ( * )\n  Floor division ( // )\n Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('*')\n  const result = operandList.reduce((acc, curr, index) => {\n    if (operatorList[index] === '-') {\n      return acc + -operandList[index]\n    }\n    if (operatorList[index] === '*') {\n      return acc + operandList[", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n if s[i] is a letter,r everse its case from lower  to up per or vise ver s a, \n otherwis e keep it as  it is .\n  Ifthe string contains no letters , reverse th estring.\n  The f u nction sh ould return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n if s[i] is a letter,r everse its case from lower  to up per or vise ver s a, \n otherwis e keep it as  it is.\n  Ifthe string contains no letters, reverse th estring.\n  The f u nction sh ould return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let letter;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new Md5();\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equiv a lent string.\n  If'text' i s an e mpty string, re t urn null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5 = new M", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return thee ven digits between a\n  and  b, in  ascending orde r .\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return thee ven digits between a\n  and  b, in  ascending orde r.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLength = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOf = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeed = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  let seed = random();\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeedAndSeed = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  let seed = random();\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeedAndSeedAndSeed = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  let seed = random();\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeedAndSeedAndSeedAndSeed = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  let seed = random();\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeedAndSeedAndSeedAndSeedAndSeed = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  let seed = random();\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeedAndSeedAndSeedAndSeedAndSeedAndSeed = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  let seed = random();\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeed = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  let seed = random();\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeed = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  let seed = random();\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeed = (length, a) => {\n  const result = [];\n  let i = a;\n  let j = length;\n  let seed = random();\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\nconst generateRandomIntegersOfLengthOfWithSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeedAndSeed", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function isa string representingm usical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last .\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function isa string representingm usical notes in aspecialASCIIformat.\n  Yourt ask is topars e this strin g andreturnlist of integers corresponding  to how many  b eats does each not last.\n  Here is a legend:\n  'o' - whol e note, lasts four beats\n  'o|' - half note,l asts two beats\n  '.|' - quater note,  lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_array = [];\n  let notes_index = 0;\n  let notes_last = 0;\n  let notes_last2 = 0;\n  let notes_last3 = 0;\n  let notes_last4 = 0;\n  let notes_last5 = 0;\n  let notes_last6 = 0;\n  let notes_last7 = 0;\n  let notes_last8 = 0;\n  let notes_last9 = 0;\n  let notes_last10 = 0;\n  let notes_last11 = 0;\n  let notes_last12 = 0;\n  let notes_last13 = 0;\n  let notes_last14 = 0;\n  let notes_last15 = 0;\n  let notes_last16 = 0;\n  let notes_last17 = 0;\n  let notes_last18 = 0;\n  let notes_last19 = 0;\n  let notes_last20 = 0;\n  let notes_last21 = 0;\n  let notes_last22 = 0;\n  let notes_last23 = 0;\n  let notes_last24 = 0;\n  let notes_last25 = 0;\n  let notes_last26 = 0;\n  let notes_last27 = 0;\n  let notes_last28 = 0;\n  let notes_last29 = 0;\n  let notes_last30 = 0;\n  let notes_last31 = 0;\n  let notes_last32 = 0;\n  let notes_last33 = 0;\n  let notes_last34 = 0;\n  let notes_last35 = 0;\n  let notes_last36 = 0;\n  let notes_last37 = 0;\n  let notes_last38 = 0;\n  let notes_last39 = 0;\n  let notes_last40 = 0;\n  let notes_last41 = 0;\n  let notes_last42 = 0;\n  let notes_last43 = 0;\n  let notes_last44 = 0;\n  let notes_last45 = 0;\n  let notes_last46 = 0;\n  let notes_last47 = 0;\n  let notes_last48 = 0;\n  let notes_last49 = 0;\n  let notes_last50 = 0;\n  let notes_last51 = 0;\n  let notes_last52 = 0;\n  let notes_last53 = 0;\n  let notes_last54 = 0;\n  let notes_last55 = 0;\n  let notes_last56 = 0;\n  let notes_last57 = 0;\n  let notes_last58 = 0;\n  let notes_last59 = 0;\n  let notes_last60 = 0;\n  let notes_last61 = 0;\n  let notes_last62 = 0;\n  let notes_last63 = 0;\n  let notes_last64 = 0;\n  let notes_last65 = 0;\n  let notes_last66 = 0;\n  let notes_last67 = 0;\n  let notes_last68 = 0;\n  let notes_last69 = 0;\n  let notes_last70 = 0;\n  let notes_last71 = 0;\n  let notes_last72 = 0;\n  let notes_last73 = 0;\n  let notes_last74 = 0;\n  let notes_last75 = 0;\n  let notes_last76 = 0;\n  let notes_last77 = 0;\n  let notes_last78 = 0;\n  let notes_last79 = 0;\n  let notes_last80 = 0;\n  let notes_last81 = 0;\n  let notes_last82 = 0;\n  let notes_last83 = 0;\n  let notes_last84 = 0;\n  let notes_last85 = 0;\n  let notes_last86 = 0;\n  let notes_last87 = 0;\n  let notes_last88 = 0;\n  let notes_last89 = 0;\n  let notes_last90 = 0;\n  let notes_last91 = 0;\n  let notes_last92 = 0;\n  let notes_last93 = 0;\n  let notes_last94 = 0;\n  let notes_last95 = 0;\n  let notes_last96 = 0;\n  let notes_last97 = 0;\n  let notes_last98 = 0;\n  let notes_last99 = 0;\n  let notes_last100 = 0;\n  let notes_last101 = 0;\n  let notes_last102 = 0;\n  let notes_last103 = 0;\n  let notes_last104 = 0;\n  let notes_last105 = 0;\n  let notes_last106 = 0;\n  let notes_last107 = 0;\n  let notes_last108 = 0;\n  let notes_last109 = 0;\n  let notes_last110 = 0;\n  let notes_last111 = 0;\n  let notes_last112 = 0;\n  let notes_last113 = 0;\n  let notes_last114 = 0;\n  let notes_last115 = 0;\n  let notes_last116 = 0;\n  let notes_last117 = 0;\n  let notes_last118 = 0;\n  let notes_last119 = 0;\n  let notes_last120 = 0;\n  let notes_last121 = 0;\n  let notes_last122 = 0;\n  let notes_last123 = 0;\n  let notes_last124 = 0;\n  let notes_last125 = 0;\n  let notes_last126 = 0;\n  let notes_last127 = 0;\n  let notes_last128 = 0;\n  let notes_last129 = 0;\n  let notes_last130 = 0;\n  let notes_last131 = 0;\n  let notes_last132 = 0;\n  let notes_last133 = 0;\n  let notes_last134 = 0;\n  let notes_last135 = 0;\n  let notes_last136 = 0;\n  let notes_last137 = 0;\n  let notes_last138 = 0;\n  let notes_last139 = 0;\n  let notes_last140 = 0;\n  let notes_last141 = 0;\n  let notes_last142 = 0;\n  let notes_last143 = 0;\n  let notes_last144 = 0;\n  let notes_last145 = 0;\n  let notes_last146 = 0;\n  let notes_last147 = 0;\n  let notes_last148 = 0;\n  let notes_last149 = 0;\n  let notes_last150 = 0;\n  let notes_last151 = 0;\n  let notes_last152 = 0;\n  let notes_last153 = 0;\n  let notes_last154 = 0;\n  let notes_last155 = 0;\n  let notes_last156 = 0;\n  let notes_last157 = 0;\n  let notes_last158 = 0;\n  let notes_last159 = 0;\n  let notes_last160 = 0;\n  let notes_last161 = 0;\n  let notes_last162 = 0;\n  let notes_last163 = 0;\n  let notes_last164 = 0;\n  let notes_last165 = 0;\n  let notes_last166 = 0;\n  let notes_last167 = 0;\n  let notes_last168 = 0;\n  let notes_last169 = 0;\n  let notes_last170 = 0;\n  let notes_last171 = 0;\n  let notes_last172 = 0;\n  let notes_last173 = 0;\n  let notes_last174 = 0;\n  let notes_last175 = 0;\n  let notes_last176 = 0;\n  let notes_last177 = 0;\n  let notes_last178 = 0;\n  let notes_last179 = 0;\n  let notes_last180 = 0;\n  let notes_last181 = 0;\n  let notes_last182 = 0;\n  let notes_last183 = 0;\n  let notes_last184 = 0;\n  let notes_last185 = 0;\n  let notes_last186 = 0;\n  let notes_last187 = 0;\n  let notes_last188 = 0;\n  let notes_last189 = 0;\n  let notes_last190 = 0;\n  let notes_last191 = 0;\n  let notes_last192 = 0;\n  let notes_last193 = 0;\n  let notes_last194 = 0;\n  let notes_last195 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/18", "prompt": "/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s .\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Findhow many times a given substring can be fou n d in the originalstring.Countoverlaping case s.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Finds the longest substring that is a prefix of another substring.\n  >>> longestPrefix('aaa', 'aa')\n  'aa'\n  >>> longestPrefix('aaa', '')\n  'a'\n  >>> longestPrefix('aaa', 'ab')\n  'ab'\n  >>> longestPrefix('aaa', 'aba')\n  'aba'\n  */\nconst longestPrefix = (a, b) => {\n  let longestLength = 0;\n  let longestPrefix = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a.substr(0, i) === b) {\n      longestLength = Math.max(longestLength, i);\n      longestPrefix = a.substr(0, i);\n    }\n  }\n  return longestPrefix;\n};\n\n/* Finds the longest substring that is a suffix of another substring.\n  >>> longestSuffix('aaa', 'aa')\n  'aa'\n  >>> longestSuffix('aaa', '')\n  'a'\n  >>> longestSuffix('aaa', 'ab')\n  'ab'\n  >>> longestSuffix('aaa', 'aba')\n  'aba'\n  */\nconst longestSuffix = (a, b) => {\n  let longestLength = 0;\n  let longestSuffix = '';\n  for (let i = a.length - 1; i >= 0; i--) {\n    if (a.substr(i, a.length - 1) === b) {\n      longestLength = Math.max(longestLength, i);\n      longestSuffix = a.substr(i, a.length - 1);\n    }\n  }\n  return longestSuffix;\n};\n\n/* Finds the longest substring that is a prefix of another substring.\n  >>> longestPrefix('aaa', 'aa')\n  'aa'\n  >>> longestPrefix('aaa', '')\n  'a'\n  >>> longestPrefix('aaa', 'ab')\n  'ab'\n  >>> longestPrefix('aaa', 'aba')\n  'aba'\n  */\nconst longestPrefix = (a, b) => {\n  let longestLength = 0;\n  let longestPrefix = '';\n  for (let i = 0; i < b.length; i++) {\n    if (b.substr(0, i) === a) {\n      longestLength = Math.max(longestLength, i);\n      longestPrefix = b.substr(0, i);\n    }\n  }\n  return longestPrefix;\n};\n\n/* Finds the longest substring that is a suffix of another substring.\n  >>> longestSuffix('aaa', 'aa')\n  'aa'\n  >>> longestSuffix('aaa', '')\n  'a'\n  >>> longestSuffix('aaa', 'ab')\n  'ab'\n  >>> longestSuffix('aaa', 'aba')\n  'aba'\n  */\nconst longestSuffix = (a, b) => {\n  let longestLength = 0;\n  let longestSuffix = '';\n  for (let i = b.length - 1; i >= 0; i--) {\n    if (b.substr(i, b.length - 1) === a) {\n      longestLength = Math.max(longestLength, i);\n      longestSuffix = b.substr(i, b.length - 1);\n    }\n  }\n  return longestSuffix;\n};\n\n/* Finds the longest substring that is a prefix of another substring.\n  >>> longestPrefix('aaa', 'aa')\n  'aa'\n  >>> longestPrefix('aaa', '')\n  'a'\n  >>> longestPrefix('aaa', 'ab')\n  'ab'\n  >>> longestPrefix('aaa', 'aba')\n  'aba'\n  */\nconst longestPrefix = (a, b) => {\n  let longestLength = 0;\n  let longestPrefix = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a.substr(i, a.length - 1) === b) {\n      longestLength = Math.max(longestLength, i);\n      longestPrefix = a.substr(i, a.length - 1);\n    }\n  }\n  return longestPrefix;\n};\n\n/* Finds the longest substring that is a suffix of another substring.\n  >>> longestSuffix('aaa', 'aa')\n  'aa'\n  >>> longestSuffix('aaa', '')\n  'a'\n  >>> longestSuffix('aaa', 'ab')\n  'ab'\n  >>> longestSuffix('aaa', 'aba')\n  'aba'\n  */\nconst longestSuffix = (a, b) => {\n  let longestLength = 0;\n  let longestSuffix = '';\n  for (let i = a.length - 1; i >= 0; i--) {\n    if (a.substr(i, a.length - 1) === b) {\n      longestLength = Math.max(longestLength, i);\n      longestSuffix = a.substr(i, a.length - 1);\n    }\n  }\n  return longestSuffix;\n};\n\n/* Finds the longest substring that is a prefix of another substring.\n  >>> longestPrefix('aaa', 'aa')\n  'aa'\n  >>> longestPrefix('aaa', '')\n  'a'\n  >>> longestPrefix('aaa', 'ab')\n  'ab'\n  >>> longestPrefix('aaa', 'aba')\n  'aba'\n  */\nconst longestPrefix = (a, b) => {\n  let longestLength = 0;\n  let longestPrefix = '';\n  for (let i = 0; i < b.length; i++) {\n    if (b.substr(0, i) === a) {\n      longestLength = Math.max(longestLength, i);\n      longestPrefix = b.substr(0, i);\n    }\n  }\n  return longestPrefix;\n};\n\n/* Finds the longest substring that is a suffix of another substring.\n  >>> longestSuffix('aaa', 'aa')\n  'aa'\n  >>> longestSuffix('aaa', '')\n  'a'\n  >>> longestSuffix('aaa', 'ab')\n  'ab'\n  >>> longestSuffix('aaa', 'aba')\n  'aba'\n  */\nconst longestSuffix = (a, b) => {\n  let longestLength = 0;\n  let longestSuffix = '';\n  for (let i = b.length - 1; i >= 0; i--) {\n    if (b.substr(i, b.length - 1) === a) {\n      longestLength = Math.max(longestLength, i);\n      longestSuffix = b.substr(i, b.length - 1);\n    }\n  }\n  return longestSuffix;\n};\n\n/* Finds the longest substring that is a prefix of another substring.\n  >>> longestPrefix('aaa', 'aa')\n  'aa'\n  >>> longestPrefix('aaa', '')\n  'a'\n  >>> longestPrefix('aaa', 'ab')\n  'ab'\n  >>> longestPrefix('aaa', 'aba')\n  'aba'\n  */\nconst longestPrefix = (a, b) => {\n  let longestLength = 0;\n  let longestPrefix = '';\n  for (let i = 0; i < a.length; i++) {\n    if (a.substr(i, a.length - 1) === b) {\n      longestLength = Math.max(longestLength, i);\n      longestPrefix = a.substr(i, a.length - 1);\n    }\n  }\n  return longestPrefix;\n};\n\n/* Finds the longest substring that is a suffix of another substring.\n  >>> longestSuffix('aaa', 'aa')\n  'aa'\n  >>> longestSuffix('aaa', '')\n  'a'\n  >>> longestSuffix('aaa', 'ab')\n  'ab'\n  >>> longestSuffix('aaa', 'aba')\n  'aba'\n  */\nconst longestSuffix = (a, b) => {\n  let longestLength = 0;\n  let longestSuffix = '';\n  for (let i = a.length - 1; i >= 0; i--) {\n    if (a.substr(i, a.length - 1) === b) {\n      longestLength = Math.max(longestLength, i);\n      longestSuffix = a.substr(i, a.length - 1);\n    }\n  }\n  return longestSuffix;\n};\n\n/* Finds the longest substring that is a prefix of another substring.\n  >>> longestPrefix('aaa', 'aa')\n  'aa'\n  >>> longestPrefix('aaa', '')\n  'a'\n  >>> longestPrefix('aaa', 'ab')\n  'ab'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero' ,  'one', 'two',  'three', 'f our','five', 'six', 'seven', 'eight' and ' nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five','six','seven', 'eight' and'nine'.\n  Ret ur n the string wi t h numbers  sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  const numberArraySorted = numberArray.sort((a, b) => a - b);\n  return numberArraySorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals f r om 'zero' to 'nine'.\n  Val id cho ices are 'zero',  'one', 'two',  'three', 'f our','five", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return fraction.length? fraction : integer;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return fraction.length? fraction : integer;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateDecimals = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return fraction.length? fraction : integer;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateDecimals(3.5)\n  3\n  */\nconst truncateDecimalsNoDecimals = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return fraction.length? fraction : integer;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateDecimalsNoDecimals(3.5)\n  3\n  */\nconst truncateDecimalsNoDecimalsNoDecimals = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return fraction.length? fraction : integer;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateDecimalsNoDecimalsNoDecimals(3.5)\n  3\n  */\nconst truncateDecimalsNoDecimalsNoDecimalsNoDecimals = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return fraction.length? fraction : integer;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimals(3.5)\n  3\n  */\nconst truncateDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimals = (number) => {\n  const [integer, fraction] = number.toString().split('.');\n  return fraction.length? fraction : integer;\n};\n\n/* Given a positive floatingpointnumber, it can b e  decomposed into\n and int eger p art (largest in t egersmaller t han given nu mber)and decimals\n  (leftover part alwayssmaller than  1 ).\n\n  Return th e  decimalpart of the number.\n  >>> truncateDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNoDecimalsNo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/20", "prompt": "/* Froma supplied list of numbers(of length at le a st two) select and returntwo th at are the clos e st to each\n  o ther and ret urn th em in order (smaller number, larger n umber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Froma supplied list of numbers(of length at le a st two) select and returntwo th at are the clos e st to each\n  o ther and ret urn th em in order (smaller number, larger n umber).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minIndex = -1;\n  let closestElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - closestElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minIndex = i;\n    }\n  }\n  return [closestElement, minIndex];\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that sum to n.\n  >>> pairSum([1,2,3,4,5,6,7,8,9], 10)\n  [\n    [1,2],\n    [1,3],\n    [1,4],\n    [1,5],\n    [1,6],\n    [1,7],\n    [1,8],\n    [1,9],\n    [2,3],\n    [2,4],\n    [2,5],\n    [2,6],\n    [2,7],\n    [2,8],\n    [2,9],\n    [3,4],\n    [3,5],\n    [3,6],\n    [3,7],\n    [3,8],\n    [3,9],\n    [4,5],\n    [4,6],\n    [4,7],\n    [4,8],\n    [4,9],\n    [5,6],\n    [5,7],\n    [5,8],\n    [5,9],\n    [6,7],\n    [6,8],\n    [6,9],\n    [7,8],\n    [7,9],\n    [8,9],\n  ]\n  */\nconst pairSum = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const pair = [numbers[i], numbers[i]];\n    if (pairSum(numbers, n - pair[0]) + pairSum(numbers, n - pair[1]) < n) {\n      result.push(pair);\n    }\n  }\n  return result;\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that sum to n.\n  >>> pairSum([1,2,3,4,5,6,7,8,9], 10)\n  [\n    [1,2],\n    [1,3],\n    [1,4],\n    [1,5],\n    [1,6],\n    [1,7],\n    [1,8],\n    [1,9],\n    [2,3],\n    [2,4],\n    [2,5],\n    [2,6],\n    [2,7],\n    [2,8],\n    [2,9],\n    [3,4],\n    [3,5],\n    [3,6],\n    [3,7],\n    [3,8],\n    [3,9],\n    [4,5],\n    [4,6],\n    [4,7],\n    [4,8],\n    [4,9],\n    [5,6],\n    [5,7],\n    [5,8],\n    [5,9],\n    [6,7],\n    [6,8],\n    [6,9],\n    [7,8],\n    [7,9],\n    [8,9],\n  ]\n  */\nconst pairSumWithDivisors = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const pair = [numbers[i], numbers[i]];\n    if (pairSumWithDivisors(numbers, n - pair[0]) + pairSumWithDivisors(numbers, n - pair[1]) < n) {\n      result.push(pair);\n    }\n  }\n  return result;\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that sum to n.\n  >>> pairSum([1,2,3,4,5,6,7,8,9], 10)\n  [\n    [1,2],\n    [1,3],\n    [1,4],\n    [1,5],\n    [1,6],\n    [1,7],\n    [1,8],\n    [1,9],\n    [2,3],\n    [2,4],\n    [2,5],\n    [2,6],\n    [2,7],\n    [2,8],\n    [2,9],\n    [3,4],\n    [3,5],\n    [3,6],\n    [3,7],\n    [3,8],\n    [3,9],\n    [4,5],\n    [4,6],\n    [4,7],\n    [4,8],\n    [4,9],\n    [5,6],\n    [5,7],\n    [5,8],\n    [5,9],\n    [6,7],\n    [6,8],\n    [6,9],\n    [7,8],\n    [7,9],\n    [8,9],\n  ]\n  */\nconst pairSumWithDivisorsAndDivisorsDivisors = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const pair = [numbers[i], numbers[i]];\n    if (pairSumWithDivisorsAndDivisorsDivisors(numbers, n - pair[0]) + pairSumWithDivisorsAndDivisorsDivisors(numbers, n - pair[1]) < n) {\n      result.push(pair);\n    }\n  }\n  return result;\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that sum to n.\n  >>> pairSum([1,2,3,4,5,6,7,8,9], 10)\n  [\n    [1,2],\n    [1,3],\n    [1,4],\n    [1,5],\n    [1,6],\n    [1,7],\n    [1,8],\n    [1,9],\n    [2,3],\n    [2,4],\n    [2,5],\n    [2,6],\n    [2,7],\n    [2,8],\n    [2,9],\n    [3,4],\n    [3,5],\n    [3,6],\n    [3,7],\n    [3,8],\n    [3,9],\n    [4,5],\n    [4,6],\n    [4,7],\n    [4,8],\n    [4,9],\n    [5,6],\n    [5,7],\n    [5,8],\n    [5,9],\n    [6,7],\n    [6,8],\n    [6,9],\n    [7,8],\n    [7,9],\n    [8,9],\n  ]\n  */\nconst pairSumWithDivisorsAndDivisorsDivisorsAndDivisorsDivisors = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const pair = [numbers[i], numbers[i]];\n    if (pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[0]) + pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[1]) + pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[2]) + pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[3]) + pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[4]) + pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[5]) + pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[6]) + pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[7]) + pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[8]) + pairSumWithDivisorsAndDivisorsDivisorsDivisors(numbers, n - pair[9]) < n) {\n      result.push(pair);\n    }\n  }\n  return result;\n};\n\n/**\n  Given a number array and a number n, return an array containing all possible pairs of numbers from that array that sum to n.\n  >>> pairSum([1,2,3,4,5,6,7,8,9], 10)\n  [\n    [1,2],\n    [1,3],\n    [1,4],\n    [1,5],\n    [1,6],", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (ofat least two elements) ,  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnitWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnitWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnitWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnitWithZeroWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnitWithZeroWithZeroWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => val / max * max);\n};\n\n/**\n * Given a list of numbers (ofat least two elements),  apply a linear transformto tha t list,\n  sucht hat the smalle st number wi ll bec ome 0 and the largest will become 1\n  >>> rescaleToUnitWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Number.MAX_VALUE, Number.MIN_VALUE]);\n  return numbers.map((val) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter given list of any pythonvalues only fori ntegers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any pythonvalues only fori ntegers\n  >>> filter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return true if given string starts with given prefix\n  >>> strstarts('abc', 'a')\n  true\n  >>> strstarts('abc', 'ab')\n  false\n  */\nconst strstarts = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/* Return true if given string ends with given suffix\n  >>> strends('abc', 'b')\n  true\n  >>> strends('abc', 'abc')\n  false\n  */\nconst strends = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartsendscontainendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strcontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strstartscontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strendscontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strstartscontaincontainendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strendscontaincontainendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strstartscontaincontaincontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strendscontaincontaincontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strstartscontaincontaincontainendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strendscontaincontaincontaincontainendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strstartscontaincontaincontaincontaincontaincontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strendscontaincontaincontaincontaincontaincontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strstartscontaincontaincontaincontaincontaincontaincontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strendscontaincontaincontaincontaincontaincontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n  false\n  */\nconst strstartscontaincontaincontaincontaincontaincontaincontaincontaincontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length) === -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontaincontains('abc', 'b')\n  true\n  >>> strcontaincontains('abc', 'abc')\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number th a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given number n, find the largest number th a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t <= n) {\n    count++;\n    t += r;\n    r *= 2;\n  }\n  return count;\n};\n\n/* Given a number n, find the largest number t a t divides n evenly, smalle r than  n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let r = 1;\n  let count = 0;\n  while (t ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors ofgiven integer in the order from smallest to  large st.\n  Each of t h e factorsshou ld be listed  numbe r of times corresponding to how manytimes it app ea res in factoriz a tion.\n  I nput number shouldbe equal to theproduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n  let factor = 1;\n  let i = 1;\n  let num = 1;\n  let factors = [];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/26", "prompt": "/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Froma list of integers, removeall elements tha t  occur more than once.\n  K eep or der of elements leftthesameas in the in put.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],14:[function(require,module,exports){\n// remove-duplicates-in-list\n// remove-duplicates-in-list-with-index\n// remove-duplicates-in-list-with-index-with-unique-elements\n// remove-duplicates-in-list-with-index-with-unique-elements-and-index\n// remove-duplicates-in-list-with-index-with-unique-elements-and-index-and-unique-elements\n// remove-duplicates-in-list-with-index-with-unique-elements-and-index-and-unique-elements-and-index\n\nconst removeDuplicatesInList = (list, index) => {\n  const uniqueElements = removeDuplicatesInListWithIndex(list, index);\n  const uniqueElementsWithIndex = removeDuplicatesInListWithIndexAndUniqueElements(list, index);\n  const uniqueElementsWithIndexAndUniqueElements = removeDuplicatesInListWithIndexAndUniqueElementsAndIndex(list, index);\n  return uniqueElements.concat(uniqueElementsWithIndex).concat(uniqueElementsWithIndexAndUniqueElements);\n};\n\nconst removeDuplicatesInListWithIndex = (list, index) => {\n  const uniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElements.push(list[i]);\n    }\n  }\n  return uniqueElements;\n};\n\nconst removeDuplicatesInListWithIndexAndUniqueElements = (list, index) => {\n  const uniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElements.push(list[i]);\n    }\n  }\n  return uniqueElements;\n};\n\nconst removeDuplicatesInListWithIndexAndUniqueElementsAndIndex = (list, index) => {\n  const uniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElements.push(list[i]);\n    }\n  }\n  const uniqueElementsWithIndex = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElementsWithIndex.push(list[i]);\n    }\n  }\n  return uniqueElements.concat(uniqueElementsWithIndex);\n};\n\nmodule.exports = removeDuplicatesInList;\n\n},{}],15:[function(require,module,exports){\n// remove-duplicates-in-list-with-index-and-unique-elements\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements-and-index\n\nconst removeDuplicatesInListWithIndexAndUniqueElements = (list, index) => {\n  const uniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElements.push(list[i]);\n    }\n  }\n  return uniqueElements;\n};\n\nmodule.exports = removeDuplicatesInListWithIndexAndUniqueElements;\n\n},{}],16:[function(require,module,exports){\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements-and-index\n\nconst removeDuplicatesInListWithIndexAndUniqueElementsAndIndex = (list, index) => {\n  const uniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElements.push(list[i]);\n    }\n  }\n  const uniqueElementsWithIndex = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElementsWithIndex.push(list[i]);\n    }\n  }\n  return uniqueElements.concat(uniqueElementsWithIndex);\n};\n\nmodule.exports = removeDuplicatesInListWithIndexAndUniqueElementsAndIndex;\n\n},{}],17:[function(require,module,exports){\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements-and-index-and-unique-elements\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements-and-index-and-unique-elements\n\nconst removeDuplicatesInListWithIndexAndUniqueElementsAndIndexAndUniqueElements = (list, index) => {\n  const uniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElements.push(list[i]);\n    }\n  }\n  const uniqueElementsWithIndex = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElementsWithIndex.push(list[i]);\n    }\n  }\n  const uniqueElementsWithIndexAndUniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElementsWithIndexAndUniqueElements.push(list[i]);\n    }\n  }\n  return uniqueElements.concat(uniqueElementsWithIndex).concat(uniqueElementsWithIndexAndUniqueElements);\n};\n\nmodule.exports = removeDuplicatesInListWithIndexAndUniqueElementsAndIndexAndUniqueElements;\n\n},{}],18:[function(require,module,exports){\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements-and-index-and-unique-elements\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements-and-index-and-unique-elements\n\nconst removeDuplicatesInListWithIndexAndUniqueElementsAndIndexAndUniqueElementsAndIndex = (list, index) => {\n  const uniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElements.push(list[i]);\n    }\n  }\n  const uniqueElementsWithIndex = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElementsWithIndex.push(list[i]);\n    }\n  }\n  const uniqueElementsWithIndexAndUniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElementsWithIndexAndUniqueElements.push(list[i]);\n    }\n  }\n  return uniqueElements.concat(uniqueElementsWithIndex).concat(uniqueElementsWithIndexAndUniqueElements);\n};\n\nmodule.exports = removeDuplicatesInListWithIndexAndUniqueElementsAndIndexAndUniqueElementsAndIndex;\n\n},{}],19:[function(require,module,exports){\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements-and-index-and-unique-elements\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index-and-unique-elements-and-index-and-unique-elements\n\nconst removeDuplicatesInListWithIndexAndUniqueElementsAndIndexAndUniqueElementsAndIndexAndUniqueElements = (list, index) => {\n  const uniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElements.push(list[i]);\n    }\n  }\n  const uniqueElementsWithIndex = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElementsWithIndex.push(list[i]);\n    }\n  }\n  const uniqueElementsWithIndexAndUniqueElements = [];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === index) {\n      uniqueElementsWithIndexAndUniqueElements.push(list[i]);\n    }\n  }\n  return uniqueElements.concat(uniqueElementsWithIndex).concat(uniqueElementsWithIndexAndUniqueElements);\n};\n\nmodule.exports = removeDuplicatesInListWithIndexAndUniqueElementsAndIndexAndUniqueElementsAndIndexAndUniqueElements;\n\n},{}],20:[function(require,module,exports){\n// remove-duplicates-in-list-with-index-and-unique-elements-and-index", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to  lower case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to  lower case.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLetters('Hello')\n  'Hello'\n  */\nconst removeNonLetters = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLetters('Hello')\n  'Hello'\n  */\nconst removeNonLettersAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n};\n\n/**\n * For a given string, remove all occurrences of any character that is not a letter, digit, or underscore.\n  >>> removeNonLettersAllAllAllAllAllAll('Hello')\n  'Hello'\n  */\nconst removeNonLettersAllAllAllAllAllAllAll = (string) => {\n  return string.replace(/[^a-zA-Z0-9_]/g, '');\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string \n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a single string \n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert string to number\n  >>> convert(1,'string')\n  1\n  >>> convert(1, 'number')\n  1\n  >>> convert('1','string')\n  '1'\n  >>> convert('1', 'number')\n  1\n  */\nconst convert = (value, type) => {\n  if (type ==='string') return String(value);\n  if (type === 'number') return Number(value);\n  return value;\n};\n\n/* Convert string to boolean\n  >>> convert('true', 'boolean')\n  true\n  >>> convert('false', 'boolean')\n  false\n  >>> convert('true', 'boolean')\n  true\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber(1)\n  1\n  >>> convertToNumber(true)\n  1\n  >>> convertToNumber(false)\n  0\n  >>> convertToNumber('1')\n  1\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value, type) => {\n  if (type ==='string') return Number(value);\n  if (type === 'number') return value;\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertToBoolean('true')\n  true\n  >>> convertToBoolean('false')\n  false\n  >>> convertToBoolean('1')\n  true\n  >>> convertToBoolean('true')\n  true\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber('1')\n  1\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value, type) => {\n  if (type ==='string') return Number(value);\n  if (type === 'number') return value;\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertToBoolean('true')\n  true\n  >>> convertToBoolean('false')\n  false\n  >>> convertToBoolean('false')\n  false\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value, type) => {\n  if (type ==='string') return Number(value);\n  if (type === 'number') return value;\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertToBoolean('true')\n  true\n  >>> convertToBoolean('false')\n  false\n  >>> convertToBoolean('false')\n  false\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value, type) => {\n  if (type ==='string') return Number(value);\n  if (type === 'number') return value;\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertToBoolean('true')\n  true\n  >>> convertToBoolean('false')\n  false\n  >>> convertToBoolean('false')\n  false\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value, type) => {\n  if (type ==='string') return Number(value);\n  if (type === 'number') return value;\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertToBoolean('true')\n  true\n  >>> convertToBoolean('false')\n  false\n  >>> convertToBoolean('false')\n  false\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value, type) => {\n  if (type ==='string') return Number(value);\n  if (type === 'number') return value;\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertToBoolean('true')\n  true\n  >>> convertToBoolean('false')\n  false\n  >>> convertToBoolean('false')\n  false\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value, type) => {\n  if (type ==='string') return Number(value);\n  if (type === 'number') return value;\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertToBoolean('true')\n  true\n  >>> convertToBoolean('false')\n  false\n  >>> convertToBoolean('false')\n  false\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value, type) => {\n  if (type ==='string') return Number(value);\n  if (type === 'number') return value;\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertToBoolean('true')\n  true\n  >>> convertToBoolean('false')\n  false\n  >>> convertToBoolean('false')\n  false\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false') return false;\n  return value;\n};\n\n/* Convert string to number\n  >>> convertToNumber('true')\n  1\n  >>> convertToNumber('false')\n  0\n  >>> convertToNumber('false')\n  0\n  */\nconst convertToNumber = (value, type) => {\n  if (type ==='string') return Number(value);\n  if (type === 'number') return value;\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertToBoolean('true')\n  true\n  >>> convertToBoolean('false')\n  false\n  >>> convertToBoolean('false')\n  false\n  */\nconst convertToBoolean = (value) => {\n  if (value === 'true') return true;\n  if (value === 'false", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of stringsonly for ones th a t start with a given prefi x.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of stringsonly for ones th a t start with a given prefi x.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring and an optional start and end index.\n  >>> filterBySubstringAndIndex([], 'a')\n  []\n  >>> filterBySubstringAndIndex(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['array', 'cde']\n  */\nconst filterBySubstringAndIndex = (strings, substring, startIndex = 0, endIndex = null) => {\n  if (endIndex === null) {\n    return strings.filter(string => string.includes(substring));\n  }\n  return strings.filter(string => string.includes(substring) && string.startsWith(startIndex) && string.endsWith(endIndex));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring and an optional start and end index.\n  >>> filterBySubstringAndIndexAndLength([], 'a')\n  []\n  >>> filterBySubstringAndIndexAndLength(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['array', 'cde']\n  */\nconst filterBySubstringAndIndexAndLength = (strings, substring, startIndex = 0, endIndex = null) => {\n  if (endIndex === null) {\n    return strings.filter(string => string.includes(substring));\n  }\n  return strings.filter(string => string.includes(substring) && string.startsWith(startIndex) && string.endsWith(endIndex));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring and an optional start and end index.\n  >>> filterBySubstringAndIndexAndLengthAndLength([], 'a')\n  []\n  >>> filterBySubstringAndIndexAndLengthAndLength(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['array', 'cde']\n  */\nconst filterBySubstringAndIndexAndLengthAndLength = (strings, substring, startIndex = 0, endIndex = null) => {\n  if (endIndex === null) {\n    return strings.filter(string => string.includes(substring));\n  }\n  return strings.filter(string => string.includes(substring) && string.startsWith(startIndex) && string.endsWith(endIndex));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring and an optional start and end index.\n  >>> filterBySubstringAndIndexAndLengthAndLength([], 'a')\n  []\n  >>> filterBySubstringAndIndexAndLengthAndLength(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['array', 'cde']\n  */\nconst filterBySubstringAndIndexAndLengthAndLength = (strings, substring, startIndex = 0, endIndex = null) => {\n  if (endIndex === null) {\n    return strings.filter(string => string.includes(substring));\n  }\n  return strings.filter(string => string.includes(substring) && string.startsWith(startIndex) && string.endsWith(endIndex));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring and an optional start and end index.\n  >>> filterBySubstringAndIndexAndLengthAndLength([], 'a')\n  []\n  >>> filterBySubstringAndIndexAndLengthAndLength(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['array', 'cde']\n  */\nconst filterBySubstringAndIndexAndLengthAndLength = (strings, substring, startIndex = 0, endIndex = null) => {\n  if (endIndex === null) {\n    return strings.filter(string => string.includes(substring));\n  }\n  return strings.filter(string => string.includes(substring) && string.startsWith(startIndex) && string.endsWith(endIndex));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring and an optional start and end index.\n  >>> filterBySubstringAndIndexAndLengthAndLength([], 'a')\n  []\n  >>> filterBySubstringAndIndexAndLengthAndLength(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['array', 'cde']\n  */\nconst filterBySubstringAndIndexAndLengthAndLength = (strings, substring, startIndex = 0, endIndex = null) => {\n  if (endIndex === null) {\n    return strings.filter(string => string.includes(substring));\n  }\n  return strings.filter(string => string.includes(substring) && string.startsWith(startIndex) && string.endsWith(endIndex));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring and an optional start and end index.\n  >>> filterBySubstringAndIndexAndLengthAndLength([], 'a')\n  []\n  >>> filterBySubstringAndIndexAndLengthAndLength(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['array', 'cde']\n  */\nconst filterBySubstringAndIndexAndLengthAndLength = (strings, substring, startIndex = 0, endIndex = null) => {\n  if (endIndex === null) {\n    return strings.filter(string => string.includes(substring));\n  }\n  return strings.filter(string => string.includes(substring) && string.startsWith(startIndex) && string.endsWith(endIndex));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring and an optional start and end index.\n  >>> filterBySubstringAndIndexAndLengthAndLength([], 'a')\n  []\n  >>> filterBySubstringAndIndexAndLengthAndLength(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['array', 'cde']\n  */\nconst filterBySubstringAndIndexAndLengthAndLength = (strings, substring, startIndex = 0, endIndex = null) => {\n  if (endIndex === null) {\n    return strings.filter(string => string.includes(substring));\n  }\n  return strings.filter(string => string.includes(substring) && string.startsWith(startIndex) && string.endsWith(endIndex));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain an given substring and an optional start and end index.\n  >>> filterBySubstringAndIndexAndLengthAndLength([], 'a')\n  []\n  >>> filterBySubstringAndIndexAndLengthAndLength(['abc', 'bcd', 'cde', 'array'], 'a', 0, 2)\n  ['array', 'cde']\n  */\nconst filterBySubstringAndIndexAndLengthAndLength = (strings, substring, startIndex = 0, endIndex = null) => {\n  if (endIndex === null) {\n    return strings.filter(string => string.includes(substring));\n  }\n  return strings.filter(string => string.includes(substring) && string.startsWith(startIndex) && string.endsWith(endIndex));\n};", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const totalBalance = operations.reduce((acc, curr) => acc + curr, 0);\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return totalBalance >= balance;\n};\n\nmodule.exports = {\n  belowZero,\n};\n\n},{}],8:[function(require,module,exports){\nconst { belowZero } = require('./belowZero');\n\n/**\n * You are given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([2, -4, 5])\n  true\n  >>> belowZero([2, -4, -5, 6])\n  false\n  */\nconst belowZero = (operations) => {\n  const totalBalance = operations.reduce((acc, curr) => acc + curr, 0);\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return totalBalance >= balance;\n};\n\nmodule.exports = {\n  belowZero,\n};\n\n},{\"./belowZero\":7}],9:[function(require,module,exports){\nconst { belowZero } = require('./belowZero');\n\n/**\n * You are given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([2, -4, 5])\n  false\n  >>> belowZero([2, -4, -5, 6])\n  true\n  */\nconst belowZero = (operations) => {\n  const totalBalance = operations.reduce((acc, curr) => acc + curr, 0);\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return totalBalance >= balance;\n};\n\nmodule.exports = {\n  belowZero,\n};\n\n},{\"./belowZero\":7}],10:[function(require,module,exports){\nconst { belowZero } = require('./belowZero');\n\n/**\n * You are given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([2, -4, 5])\n  true\n  >>> belowZero([2, -4, -5, 6])\n  false\n  */\nconst belowZero = (operations) => {\n  const totalBalance = operations.reduce((acc, curr) => acc + curr, 0);\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return totalBalance >= balance;\n};\n\nmodule.exports = {\n  belowZero,\n};\n\n},{\"./belowZero\":7}],11:[function(require,module,exports){\nconst { belowZero } = require('./belowZero');\n\n/**\n * You are given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([2, -4, 5])\n  false\n  >>> belowZero([2, -4, -5, 6])\n  true\n  */\nconst belowZero = (operations) => {\n  const totalBalance = operations.reduce((acc, curr) => acc + curr, 0);\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return totalBalance >= balance;\n};\n\nmodule.exports = {\n  belowZero,\n};\n\n},{\"./belowZero\":7}],12:[function(require,module,exports){\nconst { belowZero } = require('./belowZero');\n\n/**\n * You are given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([2, -4, 5])\n  false\n  >>> belowZero([2, -4, -5, 6])\n  true\n  */\nconst belowZero = (operations) => {\n  const totalBalance = operations.reduce((acc, curr) => acc + curr, 0);\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return totalBalance >= balance;\n};\n\nmodule.exports = {\n  belowZero,\n};\n\n},{\"./belowZero\":7}],13:[function(require,module,exports){\nconst { belowZero } = require('./belowZero');\n\n/**\n * You are given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([2, -4, 5])\n  false\n  >>> belowZero([2, -4, -5, 6])\n  true\n  */\nconst belowZero = (operations) => {\n  const totalBalance = operations.reduce((acc, curr) => acc + curr, 0);\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return totalBalance >= balance;\n};\n\nmodule.exports = {\n  belowZero,\n};\n\n},{\"./belowZero\":7}],14:[function(require,module,exports){\nconst { belowZero } = require('./belowZero');\n\n/**\n * You are given a list of deposit and withdrawal op e rations on a bankaccountthat s tarts with\n  ze r o balance. You r task is to  detec t if at any point the balance ofacco unt fallls b el ow zero, and\n a t that po int function should return true. Ot herwise it should return false.\n  >>> belowZero([2, -4, 5])\n  false\n  >>> belowZero([2, -4, -5, 6])\n  true\n  */\nconst belowZero = (operations) => {\n  const totalBalance = operations.reduce((acc, curr) => acc + curr, 0);\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n not in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [-5, 3, 2, 3, 9, 123, 1])\n  [-5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNotIn = (l, r) => {\n  return l.filter((n) => n in r)\n}\n\n/*Return only numbers in the list that are not in the list.\n  >>> getNotIn([-1, 2, -4, 5, 6], [-2, -5, 6])\n  [-2, -5, 6]\n  >>> getNotIn([5, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number isprime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number isprime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by all prime factors of n.\n  >>> isPrimeFactors(3)\n  true\n  >>> isPrimeFactors(5)\n  false\n  >>> isPrimeFactors(7)\n  false\n  >>> isPrimeFactors(11)\n  true\n  >>> isPrimeFactors(13)\n  true\n  >>> isPrimeFactors(15)\n  true\n  >>> isPrimeFactors(17)\n  false\n  >>> isPrimeFactors(19)\n  false\n  >>> isPrimeFactors(21)\n  false\n  >>> isPrimeFactors(23)\n  false\n  >>> isPrimeFactors(25)\n  false\n  >>> isPrimeFactors(27)\n  false\n  >>> isPrimeFactors(29)\n  false\n  >>> isPrimeFactors(31)\n  false\n  >>> isPrimeFactors(33)\n  false\n  >>> isPrimeFactors(35)\n  false\n  >>> isPrimeFactors(37)\n  false\n  >>> isPrimeFactors(39)\n  false\n  >>> isPrimeFactors(41)\n  false\n  >>> isPrimeFactors(43)\n  false\n  >>> isPrimeFactors(45)\n  false\n  >>> isPrimeFactors(47)\n  false\n  >>> isPrimeFactors(49)\n  false\n  >>> isPrimeFactors(51)\n  false\n  >>> isPrimeFactors(53)\n  false\n  >>> isPrimeFactors(55)\n  false\n  >>> isPrimeFactors(57)\n  false\n  >>> isPrimeFactors(59)\n  false\n  >>> isPrimeFactors(61)\n  false\n  >>> isPrimeFactors(63)\n  false\n  >>> isPrimeFactors(65)\n  false\n  >>> isPrimeFactors(67)\n  false\n  >>> isPrimeFactors(69)\n  false\n  >>> isPrimeFactors(71)\n  false\n  >>> isPrimeFactors(73)\n  false\n  >>> isPrimeFactors(75)\n  false\n  >>> isPrimeFactors(77)\n  false\n  >>> isPrimeFactors(79)\n  false\n  >>> isPrimeFactors(81)\n  false\n  >>> isPrimeFactors(83)\n  false\n  >>> isPrimeFactors(85)\n  false\n  >>> isPrimeFactors(87)\n  false\n  >>> isPrimeFactors(89)\n  false\n  >>> isPrimeFactors(91)\n  false\n  >>> isPrimeFactors(93)\n  false\n  >>> isPrimeFactors(95)\n  false\n  >>> isPrimeFactors(97)\n  false\n  >>> isPrimeFactors(99)\n  false\n  >>> isPrimeFactors(101)\n  false\n  >>> isPrimeFactors(103)\n  false\n  >>> isPrimeFactors(105)\n  false\n  >>> isPrimeFactors(107)\n  false\n  >>> isPrimeFactors(109)\n  false\n  >>> isPrimeFactors(111)\n  false\n  >>> isPrimeFactors(113)\n  false\n  >>> isPrimeFactors(115)\n  false\n  >>> isPrimeFactors(117)\n  false\n  >>> isPrimeFactors(119)\n  false\n  >>> isPrimeFactors(121)\n  false\n  >>> isPrimeFactors(123)\n  false\n  >>> isPrimeFactors(125)\n  false\n  >>> isPrimeFactors(127)\n  false\n  >>> isPrimeFactors(129)\n  false\n  >>> isPrimeFactors(131)\n  false\n  >>> isPrimeFactors(133)\n  false\n  >>> isPrimeFactors(135)\n  false\n  >>> isPrimeFactors(137)\n  false\n  >>> isPrimeFactors(139)\n  false\n  >>> isPrimeFactors(141)\n  false\n  >>> isPrimeFactors(143)\n  false\n  >>> isPrimeFactors(145)\n  false\n  >>> isPrimeFactors(147)\n  false\n  >>> isPrimeFactors(149)\n  false\n  >>> isPrimeFactors(151)\n  false\n  >>> isPrimeFactors(153)\n  false\n  >>> isPrimeFactors(155)\n  false\n  >>> isPrimeFactors(157)\n  false\n  >>> isPrimeFactors(159)\n  false\n  >>> isPrimeFactors(161)\n  false\n  >>> isPrimeFactors(163)\n  false\n  >>> isPrimeFactors(165)\n  false\n  >>> isPrimeFactors(167)\n  false\n  >>> isPrimeFactors(169)\n  false\n  >>> isPrimeFactors(171)\n  false\n  >>> isPrimeFactors(173)\n  false\n  >>> isPrimeFactors(175)\n  false\n  >>> isPrimeFactors(177)\n  false\n  >>> isPrimeFactors(179)\n  false\n  >>> isPrimeFactors(181)\n  false\n  >>> isPrimeFactors(183)\n  false\n  >>> isPrimeFactors(185)\n  false\n  >>> isPrimeFactors(187)\n  false\n  >>> isPrimeFactors(189)\n  false\n  >>> isPrimeFactors(191)\n  false\n  >>> isPrimeFactors(193)\n  false\n  >>> isPrimeFactors(195)\n  false\n  >>> isPrimeFactors(197)\n  false\n  >>> isPrimeFactors(199)\n  false\n  >>> isPrimeFactors(201)\n  false\n  >>> isPrimeFactors(203)\n  false\n  >>> isPrimeFactors(205)\n  false\n  >>> isPrimeFactors(207)\n  false\n  >>> isPrimeFactors(209)\n  false\n  >>> isPrimeFactors(211)\n  false\n  >>> isPrimeFactors(213)\n  false\n  >>> isPrimeFactors(215)\n  false\n  >>> isPrimeFactors(217", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 + ....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l .\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial withcoefficients xs at poi n t x.\n  return xs[0] + xs[1 ] * x+ xs[1] * x^2 +....xs[n] * x ^n\n  */\ncons t poly  = (xs, x) => {\n return xs.reduce((p rev,item, i nd ex) => {\n    re t urn prev+ item * Math.pow(x, index);\n  }, 0 );\n}\n/*\n  xs are coefficients of a polynomia l.\n  findZero find x such that poly(x ) = 0.\n findZero returns only onl y zero point, even if there are  m any.\n  Moreover, findZero o nly takes list xs having even numb er o fcoefficien ts\n  and la rgest non ze ro coefficient as it guarantees  asolution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n let re = findRe(xs);\n let re2 = findRe2(re);\n let re3 = findRe3(re2);\n let re4 = findRe4(re3);\n let re5 = findRe5(re4);\n let re6 = findRe6(re5);\n let re7 = findRe7(re6);\n let re8 = findRe8(re7);\n let re9 = findRe9(re8);\n let re10 = findRe10(re9);\n let re11 = findRe11(re10);\n let re12 = findRe12(re11);\n let re13 = findRe13(re12);\n let re14 = findRe14(re13);\n let re15 = findRe15(re14);\n let re16 = findRe16(re15);\n let re17 = findRe17(re16);\n let re18 = findRe18(re17);\n let re19 = findRe19(re18);\n let re20 = findRe20(re19);\n let re21 = findRe21(re20);\n let re22 = findRe22(re21);\n let re23 = findRe23(re22);\n let re24 = findRe24(re23);\n let re25 = findRe25(re24);\n let re26 = findRe26(re25);\n let re27 = findRe27(re26);\n let re28 = findRe28(re27);\n let re29 = findRe29(re28);\n let re30 = findRe30(re29);\n let re31 = findRe31(re30);\n let re32 = findRe32(re31);\n let re33 = findRe33(re32);\n let re34 = findRe34(re33);\n let re35 = findRe35(re34);\n let re36 = findRe36(re35);\n let re37 = findRe37(re36);\n let re38 = findRe38(re37);\n let re39 = findRe39(re38);\n let re40 = findRe40(re39);\n let re41 = findRe41(re40);\n let re42 = findRe42(re41);\n let re43 = findRe43(re42);\n let re44 = findRe44(re43);\n let re45 = findRe45(re44);\n let re46 = findRe46(re45);\n let re47 = findRe47(re46);\n let re48 = findRe48(re47);\n let re49 = findRe49(re48);\n let re50 = findRe50(re49);\n let re51 = findRe51(re50);\n let re52 = findRe52(re51);\n let re53 = findRe53(re52);\n let re54 = findRe54(re53);\n let re55 = findRe55(re54);\n let re56 = findRe56(re55);\n let re57 = findRe57(re56);\n let re58 = findRe58(re57);\n let re59 = findRe59(re58);\n let re60 = findRe60(re59);\n let re61 = findRe61(re60);\n let re62 = findRe62(re61);\n let re63 = findRe63(re62);\n let re64 = findRe64(re63);\n let re65 = findRe65(re64);\n let re66 = findRe66(re65);\n let re67 = findRe67(re66);\n let re68 = findRe68(re67);\n let re69 = findRe69(re68);\n let re70 = findRe70(re69);\n let re71 = findRe71(re70);\n let re72 = findRe72(re71);\n let re73 = findRe73(re72);\n let re74 = findRe74(re73);\n let re75 = findRe75(re74);\n let re76 = findRe76(re75);\n let re77 = findRe77(re76);\n let re78 = findRe78(re77);\n let re79 = findRe79(re78);\n let re80 = findRe80(re79);\n let re81 = findRe81(re80);\n let re82 = findRe82(re81);\n let re83 = findRe83(re82);\n let re84 = findRe84(re83);\n let re85 = findRe85(re84);\n let re86 = findRe86(re85);\n let re87 = findRe87(re86);\n let re88 = findRe88(re87);\n let re89 = findRe89(re88);\n let re90 = findRe90(re89);\n let re91 = findRe91(re90);\n let re92 = findRe92(re91);\n let re93 = findRe93(re92);\n let re94 = findRe94(re93);\n let re95 = findRe95(re94);\n let re96 = findRe96(re95);\n let re97 = findRe97(re96);\n let re98 = findRe98(re97);\n let re99 = findRe99(re98);\n let re100 = findRe100(re99);\n let re101 = findRe101(re100);\n let re102 = findRe102(re101);\n let re103 = findRe103(re102);\n let re104 = findRe104(re103);\n let re105 = findRe105(re104);\n let re106 = findRe106(re105);\n let re107 = findRe107(re106);\n let re108 = findRe108(re107);\n let re109 = findRe109(re108);\n let re110 = findRe110(re109);\n let re11", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a listl andreturns a list l '  such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let t = l.slice();\n  let e = [...t].sort((a, b) => a - b);\n  let t = e.map((e) => e % 3);\n  return t.map((e) => t.indexOf(e));\n};\n\n/*This function takes a listl and returns a list l'such that\n  l' is identic al tol in the indici e s that are not  divisible b y thre e, while its values at the indicies t hat are divi si ble by three ar e  equal\n tothe values of the correspondingindicies of l, but sorted.\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  [1]\n  >>> sortThird2([1])\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, f) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKey = (l, f) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWith = (l, f, k) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKey = (l, f, k, i) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWith = (l, f, k, i, j) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKey = (l, f, k, i, j, k) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKeyWith = (l, f, k, i, j, k, j) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k, j)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKeyWithKey = (l, f, k, i, j, k, j, k) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k, j, k)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKeyWithKeyWith = (l, f, k, i, j, k, j, k, j) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k, j, k, j)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKeyWithKeyWithKeyWith = (l, f, k, i, j, k, j, k, j, k) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k, j, k, j, k)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKeyWithKeyWithKeyWith = (l, f, k, i, j, k, j, k, j, k, j) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k, j, k, j, k, j)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWith = (l, f, k, i, j, k, j, k, j, k, j, k) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k, j, k, j, k, j, k, j)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWith = (l, f, k, i, j, k, j, k, j, k, j, k, j) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k, j, k, j, k, j, k, j, k, j)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWith = (l, f, k, i, j, k, j, k, j, k, j, k, j, k) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k, j, k, j, k, j, k, j, k, j, k, j)\n  })\n}\n\n/*Return sorted unique elements ina list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWith = (l, f, k, i, j, k, j, k, j, k, j, k, j, k, j) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return f(v, i, k, i, j, k, j, k, j, k, j, k, j, k, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValue = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValue = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValue([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.length > 0? Math.min(...l) : undefined;\n};\n\n/*Return element with maximum value from the list.\n  >>> maxValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1231\n  */\nconst maxValueOf = (l) => {\n  return l.length > 0? Math.max(...l) : undefined;\n};\n\n/*Return element with minimum value from the list.\n  >>> minValueOf([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minValueOf = (l) => {\n  return l.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 7;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 8 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 8;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 9 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 9;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 0 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 1 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 1;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 2 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 2;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 3 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 3;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 4 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 4;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 5 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 5;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 6 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 6;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 7 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 7;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 8 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 8;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === digit) {\n      count++;\n    }\n    i++;\n    digit = digit * 3;\n  }\n  return count;\n};\n\n/*Return the number of timesthe digit 9 appears in integers less than n which  are d ivisible by 11o r 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = 9;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a listl andreturns a list l '  such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted .\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function takes a listl andreturns a list l' such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n/*This function takes a listl and returns a list l'such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n/*This function takes a listl and returns a list l'such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n/*This function takes a listl and returns a list l'such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n/*This function takes a listl and returns a list l'such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7]\n  >>> sortEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7]\n  */\nconst sortEvenOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n/*This function takes a listl and returns a list l'such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7]\n  >>> sortEvenOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7]\n  */\nconst sortEvenOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n/*This function takes a listl and returns a list l'such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7]\n  >>> sortEvenOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7]\n  */\nconst sortEvenOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n/*This function takes a listl and returns a list l'such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7]\n  >>> sortEvenOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7]\n  */\nconst sortEvenOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n/*This function takes a listl and returns a list l'such that\n  l' is identic al tol in the odd in d icies, while i ts values at  the e ven indicies areequal\n  to the value s ofthe eve nindicies of l,b ut sorted.\n  >>> sortEvenOddOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5, 6, 7]\n  >>> sortEvenOddOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1, 2, 7]\n  */\nconst sortEvenOddOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n/*This function takes a listl and returns a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string bycycling groups of thre e  characters.\n  */const en codeCy clic = (s) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2 .push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic = (s ) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string bycycling groups of thre e  characters.\n  */const en codeCy clic = (s) => {   var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic2 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic3 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic4 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic5 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic6 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic7 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic8 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic9 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic10 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + 2)/3); i++) {\n   g roups.pus h(s.slice(3 * i, Math.min((3 * i +3), s.length)));\n  }\n  for (const group of gr o ups) {\n    if (group.length == 3)\n     groups2.push(group.slice(1) +group[0]);\n    else\n     group s2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n takes as  inp ut  string en coded withencode_cycli c function. Returns decodedstri ng.  */\nconst decodeCyclic11 = (s ) => {\n  var groups =  [], groups2  = []; \n  for(let i = 0; i < Math.floor((s. length + ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime .\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  if (n <= 3) {\n    return n;\n  }\n  if (n % 2 === 0) {\n    return n;\n  }\n  let i = 2;\n  let a = 1;\n  let b = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      a = b;\n      b = i;\n    }\n    i++;\n  }\n  return a;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n * If number is not prime, return false.\n * If number is prime, return true.\n * If number is prime, return false.\n */\nconst isPrime = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a perfect square number.\n * If number is not a perfect square number, return false.\n * If number is perfect square number, return true.\n * If number is perfect square number, return false.\n */\nconst isPerfectSquare = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumber = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumberOrZero = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumberOrOne = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumberOrTwo = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumberOrThree = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumberOrFour = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumberOrFive = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumberOrSix = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumberOrSeven = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, return false.\n */\nconst isPrimeNumberOrEight = (n) => {\n  if (n <= 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a number, return whether it is a prime number or not.\n * If number is not a prime number, return false.\n * If number is prime number, return true.\n * If number is prime number, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of inputnumbers, calculate Mea n  Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of inputnumbers, calculate Mea n  Absolute Deviation\n  arou nd the  mean of this d a taset.\n MeanAbsolute Dev iation  is the average absolute difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Relative Deviation\n  arou nd the  mean of this d a taset.\n Relative Dev iation  is the average relative difference b etween each element and a c e nterpoint  (mean in this case):\n  RAD = avera ge | x - x_mean |\n  >>> relativeDeviation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst relativeDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0) / means.length;\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Relative Deviation\n  arou nd the  mean of this d a taset.\n Relative Dev iation  is the average relative difference b etween each element and a c e nterpoint  (mean in this case):\n  RAD = avera ge | x - x_mean |\n  >>> relativeDeviation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meanRelativeDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0) / means.length;\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Relative Deviation\n  arou nd the  mean of this d a taset.\n Relative Dev iation  is the average relative difference b etween each element and a c e nterpoint  (mean in this case):\n  RAD = avera ge | x - x_mean |\n  >>> relativeDeviation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meanAbsoluteRelativeDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0) / means.length;\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Absolute Relative Deviation\n  arou nd the  mean of this d a taset.\n Absolute Relative Dev iation  is the average absolute relative difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteRelativeDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteRelativeDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Absolute Relative Deviation\n  arou nd the  mean of this d a taset.\n Absolute Relative Dev iation  is the average absolute relative difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteRelativeDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanRelativeAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0) / means.length;\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Absolute Relative Deviation\n  arou nd the  mean of this d a taset.\n Absolute Relative Dev iation  is the average absolute relative difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteRelativeDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteAbsoluteRelativeDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Relative Deviation\n  arou nd the  mean of this d a taset.\n Relative Dev iation  is the average relative difference b etween each element and a c e nterpoint  (mean in this case):\n  RAD = avera ge | x - x_mean |\n  >>> relativeDeviation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meanRelativeRelativeDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0) / means.length;\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Relative Deviation\n  arou nd the  mean of this d a taset.\n Relative Dev iation  is the average relative difference b etween each element and a c e nterpoint  (mean in this case):\n  RAD = avera ge | x - x_mean |\n  >>> relativeDeviation([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meanAbsoluteRelativeRelativeDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0) / means.length;\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Absolute Relative Deviation\n  arou nd the  mean of this d a taset.\n Absolute Relative Dev iation  is the average absolute relative difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean |\n  >>> meanAbsoluteRelativeRelativeDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteAbsoluteRelativeRelativeDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/**\n * Given a list of inputnumbers, calculate Mea n  Absolute Relative Deviation\n  arou nd the  mean of this d a taset.\n Absolute Relative Dev iation  is the average absolute relative difference b etween each element and a c e nterpoint  (mean in this case):\n  MAD = avera ge | x - x_mean ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tozero, andfalse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j] && l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      j++;\n      k++;\n    } else if (l[i] === l[j]) {\n      sum++;\n      count++;\n      i++;\n    } else if (l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      k++;\n    } else {\n      sum = 0;\n      count = 0;\n      i++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToOne takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum toone, andfalse otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j] && l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      j++;\n      k++;\n    } else if (l[i] === l[j]) {\n      sum++;\n      count++;\n      i++;\n    } else if (l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      k++;\n    } else {\n      sum = 0;\n      count = 0;\n      i++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum totwo, andfalse otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j] && l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      j++;\n      k++;\n    } else if (l[i] === l[j]) {\n      sum++;\n      count++;\n      i++;\n    } else if (l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      k++;\n    } else {\n      sum = 0;\n      count = 0;\n      i++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToThree takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tothree, andfalse otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j] && l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      j++;\n      k++;\n    } else if (l[i] === l[j]) {\n      sum++;\n      count++;\n      i++;\n    } else if (l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      k++;\n    } else {\n      sum = 0;\n      count = 0;\n      i++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToFour takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tofour, andfalse otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j] && l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      j++;\n      k++;\n    } else if (l[i] === l[j]) {\n      sum++;\n      count++;\n      i++;\n    } else if (l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      k++;\n    } else {\n      sum = 0;\n      count = 0;\n      i++;\n    }\n  }\n  return count === 3;\n};\n\n/*\n  triplesSumToFive takes a list of integers as ani nput.\n  it returns true if  there  are three dist i nct elements i n the list t hat\n sum tofive, andfalse otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[i] === l[j] && l[i] === l[k]) {\n      sum++;\n      count++;\n      i++;\n      j++;\n      k++;\n    } else if (l[i] === l[j]) {\n      sum++;\n      count++;\n      i++;\n    } else if (l[i] === l[k]) {\n      sum++;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infin i tely long line.\n n cars a re dri ving left to ri g ht; simultane ously, a dif ferent  set of n cars\n are driving right to  left.   The  t wo sets of cars start out  being very far from\n  each other. All cars move in the same speed.  Two cars a r e said to collide\n  when a car that' s movingleft to right hits a carthat's moving right to left.\n Ho wever, the cars are infinit ely sturdy and strong; asa result , th ey  continuemoving\n  in  their traje ctoryasif they did not collide .\n\n This function outputs the n umber of such c ollisi ons.\n  */const carRaceCol lisi on = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infin i tely long line.\n n cars a re dri ving left to ri g ht; simultane ously, a dif ferent  set of n cars\n are driving right to  left.   The  t wo sets of cars start out  being very far from\n  each other. All cars move in the same speed.  Two cars a r e said to collide\n  when a car that' s movingleft to right hits a carthat's moving right to left.\n Ho wever, the cars are infinit ely sturdy and strong; asa result, th ey  continuemoving\n  in  their traje ctoryasif they did not collide.\n\n This function outputs the n umber of such c ollisi ons.\n  */const carRaceCol lisi on = (n) => {\n  let carsOn = []\n  for (let i = 0; i < n; i++) {\n    carsOn.push(carRaceCol(on))\n  }\n  return carsOn\n}\n\n/*\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.\n This function outputs the n umber of such c ollisi ons.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  return ret\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] + 1)\n  }\n  for (let i = 0; i < l.length; i++) {\n    ret.push(l[i] - 1)\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrDecrList = (l) => {\n  let ret = []\n  for (let i = 0; i < l.length; i++) {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an in p ut.\n  it returns true if t here a re two distinct elementsin th e list that  sumto zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  removeDuplicates\n  remove duplicates from an array\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 1, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base. return string representat ion af ter the convers i on.\n base num bers are les s than  10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base. return string representat ion af ter the convers i on.\n base num bers are les s than  10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = '';\n  let i = 0;\n  while (x > 0) {\n    let mod = x % base;\n    res += bases[mod];\n    x = Math.floor(x / base);\n    i++;\n  }\n  return res;\n};\n\n/*\n Convert string to number in base base. return number in base base.\n base num bers are les s than  10.\n  >>> convertToBase(3, '10')\n  3\n  >>> convertToBase(3, '8')\n  8\n  >>> convertToBase(3, '7')\n  7\n  >>> convertToBase(3, '6')\n  6\n  >>> convertToBase(3, '5')\n  5\n  >>> convertToBase(3, '4')\n  4\n  >>> convertToBase(3, '3')\n  3\n  >>> convertToBase(3, '2')\n  2\n  >>> convertToBase(3, '1')\n  1\n  */\nconst convertToBase = (x, base) => {\n  let res = 0;\n  let i = 0;\n  while (x > 0) {\n    let mod = x % base;\n    res += bases[mod];\n    x = Math.floor(x / base);\n    i++;\n  }\n  return res;\n};\n\n/*\n Convert string to number in base base. return number in base base.\n base num bers are les s than  10.\n  >>> convertToBase(3, '10')\n  3\n  >>> convertToBase(3, '8')\n  8\n  >>> convertToBase(3, '7')\n  7\n  >>> convertToBase(3, '6')\n  6\n  >>> convertToBase(3, '5')\n  5\n  >>> convertToBase(3, '4')\n  4\n  >>> convertToBase(3, '3')\n  3\n  >>> convertToBase(3, '2')\n  2\n  >>> convertToBase(3, '1')\n  1\n  */\nconst convertToDecimal = (x, base) => {\n  let res = 0;\n  let i = 0;\n  while (x > 0) {\n    let mod = x % base;\n    res += bases[mod];\n    x = Math.floor(x / base);\n    i++;\n  }\n  return res;\n};\n\n/*\n Convert string to number in base base. return number in base base.\n base num bers are les s than  10.\n  >>> convertToDecimal(3, '10')\n  3\n  >>> convertToDecimal(3, '8')\n  8\n  >>> convertToDecimal(3, '7')\n  7\n  >>> convertToDecimal(3, '6')\n  6\n  >>> convertToDecimal(3, '5')\n  5\n  >>> convertToDecimal(3, '4')\n  4\n  >>> convertToDecimal(3, '3')\n  3\n  >>> convertToDecimal(3, '2')\n  2\n  >>> convertToDecimal(3, '1')\n  1\n  */\nconst convertToHex = (x, base) => {\n  let res = 0;\n  let i = 0;\n  while (x > 0) {\n    let mod = x % base;\n    res += bases[mod];\n    x = Math.floor(x / base);\n    i++;\n  }\n  return res;\n};\n\n/*\n Convert string to number in base base. return number in base base.\n base num bers are les s than  10.\n  >>> convertToHex(3, '10')\n  3\n  >>> convertToHex(3, '8')\n  8\n  >>> convertToHex(3, '7')\n  7\n  >>> convertToHex(3, '6')\n  6\n  >>> convertToHex(3, '5')\n  5\n  >>> convertToHex(3, '4')\n  4\n  >>> convertToHex(3, '3')\n  3\n  >>> convertToHex(3, '2')\n  2\n  >>> convertToHex(3, '1')\n  1\n  */\nconst convertToOctal = (x, base) => {\n  let res = 0;\n  let i = 0;\n  while (x > 0) {\n    let mod = x % base;\n    res += bases[mod];\n    x = Math.floor(x / base);\n    i++;\n  }\n  return res;\n};\n\n/*\n Convert string to number in base base. return number in base base.\n base num bers are les s than  10.\n  >>> convertToOctal(3, '10')\n  3\n  >>> convertToOctal(3, '8')\n  8\n  >>> convertToOctal(3, '7')\n  7\n  >>> convertToOctal(3, '6')\n  6\n  >>> convertToOctal(3, '5')\n  5\n  >>> convertToOctal(3, '4')\n  4\n  >>> convertToOctal(3, '3')\n  3\n  >>> convertToOctal(3, '2')\n  2\n  >>> convertToOctal(3, '1')\n  1\n  */\nconst convertToBinary = (x, base) => {\n  let res = 0;\n  let i = 0;\n  while (x > 0) {\n    let mod = x % base;\n    res += bases[mod];\n    x = Math.floor(x / base);\n    i++;\n  }\n  return res;\n};\n\n/*\n Convert string to number in base base. return number in base base.\n base num bers are les s than  10.\n  >>> convertToBinary(3, '10')\n  3\n  >>> convertToBinary(3, '8')\n  8\n  >>> convertToBinary(3, '7')\n  7\n  >>> convertToBinary(3, '6')\n  6\n  >>> convertToBinary(3, '5')\n  5\n  >>> convertToBinary(3, '4')\n  4\n  >>> convertToBinary(3, '3')\n  3\n  >>> convertToBinary(3, '2')\n  2\n  >>> convertToBinary(3, '1')\n  1\n  */\nconst convertToDecimalBinary = (x, base) => {\n  let res = 0;\n  let i = 0;\n  while (x > 0) {\n    let mod = x % base;\n    res += bases[mod];\n    x = Math.floor(x / base);\n    i++;\n  }\n  return res;\n};\n\n/*\n Convert string to number in base base. return number in base base.\n base num bers are les s than  10.\n  >>> convertToDecimalBinary(3, '10')\n  3\n  >>> convertToDecimalBinary(3, '8')\n  8\n  >>> convertToDecimalBinary(3, '7')\n  7\n  >>> convertToDecimalBinary(3, '6')\n  6\n  >>> convertToDecimalBinary(3, '5')\n  5\n  >>> convertToDecimalBinary(3, '4')\n  4\n  >>> convertToDecimalBinary(3, '3')\n  3\n  >>> convertToDecimalBinary(3, '2')\n  2\n  >>> convertToDecimalBinary(3, '1')\n  1\n  */\nconst convertToHexBinary = (x, base) => {\n  let res = 0;\n  let i = 0;\n  while (x > 0) {\n    let mod = x % base;\n    res += bases[mod];\n    x = Math.floor(x / base);\n    i++;\n  }\n  return res;\n};\n\n/*\n Convert string to number in base base. return number in base base.\n base num bers are les s than  10.\n  >>> convertToHexBinary(3, '10')\n  3\n  >>> convertToHexBinary(3, '8')\n  8\n  >>> convertToHex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/45", "prompt": "/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givenlength of a side andhigh return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (b * b - 4 * a * h) / 2;\n  return area;\n};\n\n/*Given a side of a triangle, return its length.\n  >>> triangleSide(5, 3)\n  2\n  */\nconst triangleSide = (s, h) => {\n  return Math.sqrt(s * (s - h) * (s - h));\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 2)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 3)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 4)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 5)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 6)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 7)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 8)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 9)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 10)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 11)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 12)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 13)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 14)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 15)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 16)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 17)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 18)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 19)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 20)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n  const y = p.y + s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 21)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x + s;\n  const y = p.y - s;\n  return new Point(x, y);\n};\n\n/*Given a point and a side of a triangle, return the point on the side of the triangle that lies on the point.\n  >>> pointOnSide(Point(2, 3), 22)\n  Point(2, 3)\n  */\nconst pointOnSide = (p, s) => {\n  const x = p.x - s;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib4(0) - > 0\n  fib4(1 ) -> 0 \n  fib4(2) -> 2\n fib4(3) -> 0\n fib4 (n) -> fib4( n- 1) + fib4(n-2)+  fib4(n-3 ) + fib4(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib4 number sequence.  Do not  use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib4(0) - > 0\n  fib4(1 ) -> 0 \n  fib4(2) -> 2\n fib4(3) -> 0\n fib4 (n) -> fib4( n- 1) + fib4(n-2)+  fib4(n-3 ) + fib4(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib4 number sequence.  Do not  use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib5(0) - > 0\n  fib5(1 ) -> 0 \n  fib5(2) -> 2\n fib5(3) -> 0\n fib5 (n) -> fib5( n- 1) + fib5(n-2)+  fib5(n-3 ) + fib5(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib5 number sequence.  Do not  use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  10\n  >>> fib5(7)\n  15\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\n/*The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib6(0) - > 0\n  fib6(1 ) -> 0 \n  fib6(2) -> 2\n fib6(3) -> 0\n fib6 (n) -> fib6( n- 1) + fib6(n-2)+  fib6(n-3 ) + fib6(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib6 number sequence.  Do not  use recursion.\n  >>> fib6(5)\n  6\n  >>> fib6(6)\n  12\n  >>> fib6(7)\n  18\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4);\n};\n\n/*The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib7(0) - > 0\n  fib7(1 ) -> 0 \n  fib7(2) -> 2\n fib7(3) -> 0\n fib7 (n) -> fib7( n- 1) + fib7(n-2)+  fib7(n-3 ) + fib7(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib7 number sequence.  Do not  use recursion.\n  >>> fib7(5)\n  7\n  >>> fib7(6)\n  13\n  >>> fib7(7)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 1;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4);\n};\n\n/*The Fib8 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib8(0) - > 0\n  fib8(1 ) -> 0 \n  fib8(2) -> 2\n fib8(3) -> 0\n fib8 (n) -> fib8( n- 1) + fib8(n-2)+  fib8(n-3 ) + fib8(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib8 number sequence.  Do not  use recursion.\n  >>> fib8(5)\n  8\n  >>> fib8(6)\n  15\n  >>> fib8(7)\n  21\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 1;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4);\n};\n\n/*The Fib9 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib9(0) - > 0\n  fib9(1 ) -> 0 \n  fib9(2) -> 2\n fib9(3) -> 0\n fib9 (n) -> fib9( n- 1) + fib9(n-2)+  fib9(n-3 ) + fib9(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib9 number sequence.  Do not  use recursion.\n  >>> fib9(5)\n  9\n  >>> fib9(6)\n  21\n  >>> fib9(7)\n  28\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 1;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4);\n};\n\n/*The Fib10 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib10(0) - > 0\n  fib10(1 ) -> 0 \n  fib10(2) -> 2\n fib10(3) -> 0\n fib10 (n) -> fib10( n- 1) + fib10(n-2)+  fib10(n-3 ) + fib10(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib10 number sequence.  Do not  use recursion.\n  >>> fib10(5)\n  10\n  >>> fib10(6)\n  15\n  >>> fib10(7)\n  21\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 1;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4);\n};\n\n/*The Fib11 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib11(0) - > 0\n  fib11(1 ) -> 0 \n  fib11(2) -> 2\n fib11(3) -> 0\n fib11 (n) -> fib11( n- 1) + fib11(n-2)+  fib11(n-3 ) + fib11(n-4).\n  Please write a fun ctionto efficiently computethe n-thelement of the fib11 number sequence.  Do not  use recursion.\n  >>> fib11(5)\n  11\n  >>> fib11(6)\n  21\n  >>> fib11(7)\n  28\n  */\nconst fib11 = (n) => {\n  if (n <= 1) return 1;\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4);\n};\n\n/*The Fib12 number sequence is a sequence similar to the Fibbonacci sequnece th at's d efined as follo w s:\n fib12(0) - > 0\n  fib12(1 ) -> 0 \n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = median(l);\n  let right = median(l.slice(j));\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfList = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = medianOfList(l);\n  let right = medianOfList(l.slice(j));\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfLists = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = medianOfListOfLists(l);\n  let right = medianOfListOfLists(l.slice(j));\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfLists = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = medianOfListOfListsOfLists(l);\n  let right = medianOfListOfListsOfLists(l.slice(j));\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfLists = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = medianOfListOfListsOfListsOfLists(l);\n  let right = medianOfListOfListsOfListsOfLists(l.slice(j));\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfListsOfLists = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = medianOfListOfListsOfListsOfListsOfLists(l);\n  let right = medianOfListOfListsOfListsOfListsOfLists(l.slice(j));\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfListsOfListsOfLists = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = medianOfListOfListsOfListsOfListsOfListsOfLists(l);\n  let right = medianOfListOfListsOfListsOfListsOfListsOfLists(l.slice(j));\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfListsOfListsOfListsOfLists = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = medianOfListOfListsOfListsOfListsOfListsOfListsOfLists(l);\n  let right = medianOfListOfListsOfListsOfListsOfListsOfListsOfLists(l.slice(j));\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfLists = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfLists(l);\n  let right = medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfLists(l.slice(j));\n  return ((left + right) / 2) + (pivot || 0);\n};\n\n/*Return median of elements in thelist l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfListsOfLists = (l) => {\n  let n = l.length;\n  if (n <= 1) return 0;\n  let m = n / 2;\n  let i = Math.floor(n);\n  let j = (n - i) / 2;\n  let pivot = l[Math.floor((j + i) / 2)];\n  let left = medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfListsOfLists(l);\n  let right = medianOfListOfListsOfListsOfListsOfListsOfListsOfListsOfListsOfLists(l.slice(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpaceAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpaceAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpaceAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.slice(0, length) === reversedText.slice(length - 1);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 2)\n  true\n  >>> isPalindromeOfLength('aba', 3)\n  false\n  >>> isPalindromeOfLength('aba', 4)\n  true\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware ofnumerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware ofnumerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return 0;\n  if (n == 0) return 1;\n  if (n == 1) return p;\n  if (p == 1) return 1;\n  if (p == 2) return 2;\n  if (p == 3) return 3;\n  if (p == 4) return 4;\n  if (p == 5) return 5;\n  if (p == 6) return 6;\n  if (p == 7) return 7;\n  if (p == 8) return 8;\n  if (p == 9) return 9;\n  if (p == 10) return 10;\n  if (p == 11) return 11;\n  if (p == 12) return 12;\n  if (p == 13) return 13;\n  if (p == 14) return 14;\n  if (p == 15) return 15;\n  if (p == 16) return 16;\n  if (p == 17) return 17;\n  if (p == 18) return 18;\n  if (p == 19) return 19;\n  if (p == 20) return 20;\n  if (p == 21) return 21;\n  if (p == 22) return 22;\n  if (p == 23) return 23;\n  if (p == 24) return 24;\n  if (p == 25) return 25;\n  if (p == 26) return 26;\n  if (p == 27) return 27;\n  if (p == 28) return 28;\n  if (p == 29) return 29;\n  if (p == 30) return 30;\n  if (p == 31) return 31;\n  if (p == 32) return 32;\n  if (p == 33) return 33;\n  if (p == 34) return 34;\n  if (p == 35) return 35;\n  if (p == 36) return 36;\n  if (p == 37) return 37;\n  if (p == 38) return 38;\n  if (p == 39) return 39;\n  if (p == 40) return 40;\n  if (p == 41) return 41;\n  if (p == 42) return 42;\n  if (p == 43) return 43;\n  if (p == 44) return 44;\n  if (p == 45) return 45;\n  if (p == 46) return 46;\n  if (p == 47) return 47;\n  if (p == 48) return 48;\n  if (p == 49) return 49;\n  if (p == 50) return 50;\n  if (p == 51) return 51;\n  if (p == 52) return 52;\n  if (p == 53) return 53;\n  if (p == 54) return 54;\n  if (p == 55) return 55;\n  if (p == 56) return 56;\n  if (p == 57) return 57;\n  if (p == 58) return 58;\n  if (p == 59) return 59;\n  if (p == 60) return 60;\n  if (p == 61) return 61;\n  if (p == 62) return 62;\n  if (p == 63) return 63;\n  if (p == 64) return 64;\n  if (p == 65) return 65;\n  if (p == 66) return 66;\n  if (p == 67) return 67;\n  if (p == 68) return 68;\n  if (p == 69) return 69;\n  if (p == 70) return 70;\n  if (p == 72) return 72;\n  if (p == 73) return 73;\n  if (p == 74) return 74;\n  if (p == 75) return 75;\n  if (p == 76) return 76;\n  if (p == 77) return 77;\n  if (p == 78) return 78;\n  if (p == 79) return 79;\n  if (p == 80) return 80;\n  if (p == 81) return 81;\n  if (p == 82) return 82;\n  if (p == 83) return 83;\n  if (p == 84) return 84;\n  if (p == 85) return 85;\n  if (p == 86) return 86;\n  if (p == 87) return 87;\n  if (p == 88) return 88;\n  if (p == 89) return 89;\n  if (p == 90) return 90;\n  if (p == 91) return 91;\n  if (p == 92) return 92;\n  if (p == 93) return 93;\n  if (p == 94) return 94;\n  if (p == 95) return 95;\n  if (p == 96) return 96;\n  if (p == 97) return 97;\n  if (p == 98) return 98;\n  if (p == 99) return 99;\n  if (p == 100) return 100;\n  if (p == 101) return 101;\n  if (p == 102) return 102;\n  if (p == 103) return 103;\n  if (p == 104) return 104;\n  if (p == 105) return 105;\n  if (p == 106) return 106;\n  if (p == 107) return 107;\n  if (p == 108) return 108;\n  if (p == 109) return 109;\n  if (p == 111) return 111;\n  if (p == 112) return 112;\n  if (p == 113) return 113;\n  if (p == 114) return 114;\n  if (p == 115) return 115;\n  if (p == 116) return 116;\n  if (p == 117) return 117;\n  if (p == 118) return 118;\n  if (p == 119) return 119;\n  if (p == 120) return 120;\n  if (p == 121) return 121;\n  if (p == 122) return 122;\n  if (p == 123) return 123;\n  if (p == 124) return 124;\n  if (p == 125) return 125;\n  if (p == 126) return 126;\n  if (p == 127) return 127;\n  if (p == 128) return 128;\n  if (p == 129) return 129;\n  if (p == 130) return 130;\n  if (p == 131) return 131;\n  if (p == 132) return 132;\n  if (p == 133) return 133;\n  if (p == 134) return 134;\n  if (p == 135) return 135;\n  if (p == 136) return 136;\n  if (p == 137) return 137;\n  if (p == 138) return 138;\n  if (p == 139) return 139;\n  if (p == 140) return 140;\n  if (p == 141) return 141;\n  if (p == 142) return 142;\n  if (p == 143) return 143;\n  if (p == 144) return 144;\n  if (p == 145) return 145;\n  if (p == 146) return 146;\n  if (p == 147) return 147;\n  if (p == 148) return 148;\n  if (p == 149) return 149;\n  if (p == 150) return 150;\n  if (p == 151) return 151;\n  if (p == 152) return 152;\n  if (p == 153) return 153;\n  if (p == 154) return 154;\n  if (p == 155) return 155;\n  if (p == 156) return 156;\n  if (p == 157) return 157;\n  if (p == 158) return 158;\n  if (p == 159) return 159;\n  if (p == 160) return 160;\n  if (p == 161) return 161;\n  if (p == 162) return 162;\n  if (p == 163) return 163;\n  if (p == 164) return 164;\n  if (p == 165) return 165;\n  if (p == 166) return 166;\n  if (p == 167) return 167;\n  if (p == 168) return 168;\n  if (p == 169) return 169;\n  if (p == 170) return 170;\n  if (p == 171) return 171;\n  if (p == 172) return 172;\n  if (p == 173) return 173;\n  if (p == 174) return 174;\n  if (p == 175) return 175;\n  if (p == 176) return 176;\n  if (p == 177) return 177;\n  if (p == 178) return 178;\n  if (p == 179) return 179;\n  if (p == 180) return 180;\n  if (p == 181) return 181;\n  if (p == 182) return 182;\n  if (p == 183) return 183;\n  if (p == ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two co n secutive elementsof input  list`numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two co n secutive elementsof input  list`numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let len = numbers.length\n  while (i < len) {\n    if (j === delimeter) {\n      result.push(numbers[i])\n      i++\n      j = 0\n    } else {\n      result.push(numbers[i])\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of 'delimeter' from input  list`numbers`\n  >>> removeAll(['a', 'b', 'c', 'd'], 2)\n  [ 'a', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 3)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 4)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 5)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 6)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 7)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 8)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 9)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 10)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 11)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 12)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 13)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 14)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 15)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 16)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 17)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 18)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 19)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 20)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 21)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 22)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 23)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 24)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 25)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 26)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 27)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 28)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 29)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 30)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 31)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 32)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 33)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 34)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 35)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 36)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 37)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 38)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 39)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 40)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 41)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 42)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 43)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 44)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 45)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 46)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 47)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 48)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 49)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 50)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 51)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 52)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 53)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 54)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 55)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 56)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 57)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 58)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 59)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 60)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 61)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 62)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 63)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 64)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 65)\n  [ 'a', 'b', 'c', 'd' ]\n  >>> removeAll(['a', 'b', 'c', 'd'], 66)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon st encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string byshifting every charact e r by 5 in the alphabet.\n */\ncon st encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) + 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst decodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst encodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst decodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst encodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst decodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst encodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst decodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst encodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst encodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  takes as input stringencoded with encode_shift function. Returnsdecoded string.\n  */\nconst decodeS hift = (s) => {\n  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.charCodeAt (0 ) - 5 - \"a\".cha r CodeAt(0) ) % 26) + \"a\".charCodeAt(0)\n  )).jo in(\"\");\n}\n\n/*\n  returns decoded string byshifting every charact e r by 5 in the alphabet.\n */\nconst decodeShift=  (s)=> {  re turn s.split (\"\").m ap(ch => String.fromCharCode(\n   ((c h.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a function thattakes string and returns string without vow els.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU'\n  let vowelsLength = vowels.length\n  let vowelsIndex = 0\n  let vowelsLengthIndex = 0\n  let vowelsIndex2 = 0\n  let vowelsLengthIndex2 = 0\n  let vowelsIndex3 = 0\n  let vowelsLengthIndex3 = 0\n  let vowelsIndex4 = 0\n  let vowelsLengthIndex4 = 0\n  let vowelsIndex5 = 0\n  let vowelsLengthIndex5 = 0\n  let vowelsIndex6 = 0\n  let vowelsLengthIndex6 = 0\n  let vowelsIndex7 = 0\n  let vowelsLengthIndex7 = 0\n  let vowelsIndex8 = 0\n  let vowelsLengthIndex8 = 0\n  let vowelsIndex9 = 0\n  let vowelsLengthIndex9 = 0\n  let vowelsIndex10 = 0\n  let vowelsLengthIndex10 = 0\n  let vowelsIndex11 = 0\n  let vowelsLengthIndex11 = 0\n  let vowelsIndex12 = 0\n  let vowelsLengthIndex12 = 0\n  let vowelsIndex13 = 0\n  let vowelsLengthIndex13 = 0\n  let vowelsIndex14 = 0\n  let vowelsLengthIndex14 = 0\n  let vowelsIndex15 = 0\n  let vowelsLengthIndex15 = 0\n  let vowelsIndex16 = 0\n  let vowelsLengthIndex16 = 0\n  let vowelsIndex17 = 0\n  let vowelsLengthIndex17 = 0\n  let vowelsIndex18 = 0\n  let vowelsLengthIndex18 = 0\n  let vowelsIndex19 = 0\n  let vowelsLengthIndex19 = 0\n  let vowelsIndex20 = 0\n  let vowelsLengthIndex20 = 0\n  let vowelsIndex21 = 0\n  let vowelsLengthIndex21 = 0\n  let vowelsIndex22 = 0\n  let vowelsLengthIndex22 = 0\n  let vowelsIndex23 = 0\n  let vowelsLengthIndex23 = 0\n  let vowelsIndex24 = 0\n  let vowelsLengthIndex24 = 0\n  let vowelsIndex25 = 0\n  let vowelsLengthIndex25 = 0\n  let vowelsIndex26 = 0\n  let vowelsLengthIndex26 = 0\n  let vowelsIndex27 = 0\n  let vowelsLengthIndex27 = 0\n  let vowelsIndex28 = 0\n  let vowelsLengthIndex28 = 0\n  let vowelsIndex29 = 0\n  let vowelsLengthIndex29 = 0\n  let vowelsIndex30 = 0\n  let vowelsLengthIndex30 = 0\n  let vowelsIndex31 = 0\n  let vowelsLengthIndex31 = 0\n  let vowelsIndex32 = 0\n  let vowelsLengthIndex32 = 0\n  let vowelsIndex33 = 0\n  let vowelsLengthIndex33 = 0\n  let vowelsIndex34 = 0\n  let vowelsLengthIndex34 = 0\n  let vowelsIndex35 = 0\n  let vowelsLengthIndex35 = 0\n  let vowelsIndex36 = 0\n  let vowelsLengthIndex36 = 0\n  let vowelsIndex37 = 0\n  let vowelsLengthIndex37 = 0\n  let vowelsIndex38 = 0\n  let vowelsLengthIndex38 = 0\n  let vowelsIndex39 = 0\n  let vowelsLengthIndex39 = 0\n  let vowelsIndex40 = 0\n  let vowelsLengthIndex40 = 0\n  let vowelsIndex41 = 0\n  let vowelsLengthIndex41 = 0\n  let vowelsIndex42 = 0\n  let vowelsLengthIndex42 = 0\n  let vowelsIndex43 = 0\n  let vowelsLengthIndex43 = 0\n  let vowelsIndex44 = 0\n  let vowelsLengthIndex44 = 0\n  let vowelsIndex45 = 0\n  let vowelsLengthIndex45 = 0\n  let vowelsIndex46 = 0\n  let vowelsLengthIndex46 = 0\n  let vowelsIndex47 = 0\n  let vowelsLengthIndex47 = 0\n  let vowelsIndex48 = 0\n  let vowelsLengthIndex48 = 0\n  let vowelsIndex49 = 0\n  let vowelsLengthIndex49 = 0\n  let vowelsIndex50 = 0\n  let vowelsLengthIndex50 = 0\n  let vowelsIndex51 = 0\n  let vowelsLengthIndex51 = 0\n  let vowelsIndex52 = 0\n  let vowelsLengthIndex52 = 0\n  let vowelsIndex53 = 0\n  let vowelsLengthIndex53 = 0\n  let vowelsIndex54 = 0\n  let vowelsLengthIndex54 = 0\n  let vowelsIndex55 = 0\n  let vowelsLengthIndex55 = 0\n  let vowelsIndex56 = 0\n  let vowelsLengthIndex56 = 0\n  let vowelsIndex57 = 0\n  let vowelsLengthIndex57 = 0\n  let vowelsIndex58 = 0\n  let vowelsLengthIndex58 = 0\n  let vowelsIndex59 = 0\n  let vowelsLengthIndex59 = 0\n  let vowelsIndex60 = 0\n  let vowelsLengthIndex60 = 0\n  let vowelsIndex61 = 0\n  let vowelsLengthIndex61 = 0\n  let vowelsIndex62 = 0\n  let vowelsLengthIndex62 = 0\n  let vowelsIndex63 = 0\n  let vowelsLengthIndex63 = 0\n  let vowelsIndex64 = 0\n  let vowelsLengthIndex64 = 0\n  let vowelsIndex65 = 0\n  let vowelsLengthIndex65 = 0\n  let vowelsIndex66 = 0\n  let vowelsLengthIndex66 = 0\n  let vowelsIndex67 = 0\n  let vowelsLengthIndex67 = 0\n  let vowelsIndex68 = 0\n  let vowelsLengthIndex68 = 0\n  let vowelsIndex69 = 0\n  let vowelsLengthIndex69 = 0\n  let vowelsIndex70 = 0\n  let vowelsLengthIndex70 = 0\n  let vowelsIndex71 = 0\n  let vowelsLengthIndex71 = 0\n  let vowelsIndex72 = 0\n  let vowelsLengthIndex72 = 0\n  let vowelsIndex73 = 0\n  let vowelsLengthIndex73 = 0\n  let vowelsIndex74 = 0\n  let vowelsLengthIndex74 = 0\n  let vowelsIndex75 = 0\n  let vowelsLengthIndex75 = 0\n  let vowelsIndex76 = 0\n  let vowelsLengthIndex76 = 0\n  let vowelsIndex77 = 0\n  let vowelsLengthIndex77 = 0\n  let vowelsIndex78 = 0\n  let vowelsLengthIndex78 = 0\n  let vowelsIndex79 = 0\n  let vowelsLengthIndex79 = 0\n  let vowelsIndex80 = 0\n  let vowelsLengthIndex80 = 0\n  let vowelsIndex81 = 0\n  let vowelsLengthIndex81 = 0\n  let vowelsIndex82 = 0\n  let vowelsLengthIndex82 = 0\n  let vowelsIndex83 = 0\n  let vowelsLengthIndex83 = 0\n  let vowelsIndex84 = 0\n  let vowelsLengthIndex84 = 0\n  let vowelsIndex85 = 0\n  let vowelsLengthIndex85 = 0\n  let vowelsIndex86 = 0\n  let vowelsLengthIndex86 = 0\n  let vowelsIndex87 = 0\n  let vowelsLengthIndex87 = 0\n  let vowelsIndex88 = 0\n  let vowelsLengthIndex88 = 0\n  let vowelsIndex89 = 0\n  let vowelsLengthIndex89 = 0\n  let vowelsIndex90 = 0\n  let vowelsLengthIndex90 = 0\n  let vowelsIndex91 = 0\n  let vowelsLengthIndex91 = 0\n  let vowelsIndex92 = 0\n  let vowelsLengthIndex92 = 0\n  let vowelsIndex93 = 0\n  let vowelsLengthIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbersin the list l are belo w  threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbersin the list l are belo w  threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/*\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n  */\nconst isEven = arr => {\n  return arr.every(n => n % 2 === 0);\n};\n\n/*\n  >>> isOdd([0, 2, 4, 6, 8])\n  false\n  >>> isOdd([0, 2, 4, 6, 8])\n  true\n  */\nconst isOdd = arr => {\n  return arr.every(n => n % 2!== 0);\n};\n\n/*\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0);\n};\n\n/*\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOdd = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0);\n};\n\n/*\n  >>> isOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEvenOdd = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0);\n};\n\n/*\n  >>> isEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isEvenOddOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOddOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isEvenOddOddEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEvenOddEvenOddEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isEvenOddOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOddOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEvenOddEvenOddEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isEvenOddOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isEvenOddOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n  */\nconst isOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = arr => {\n  return arr.every(n => n % 2 === 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0 && n % 2!== 0);\n};\n\n/*\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  false\n  >>> isOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven([0, 2, 4, 6, 8])\n  true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y\n}\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y\n}\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (a, b) => {\n  return a * b\n}\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y\n}\n\n/*\n  >>> modulo(2, 3)\n  2\n  >>> modulo(5, 7)\n  1\n  */\nconst modulo = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  4\n  */\nconst power = (a, b) => {\n  return a ** b\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  4\n  */\nconst sqrt = x => {\n  return Math.sqrt(x)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  4\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n  return Math.pow(a, b)\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst power = (a, b) => {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let s1;\n  let s0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  A simple recursive function to calculate Fibonacci numbers in O(n) time.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and\">\".\n  return fa l se if every opening bracke t hasa corresponding closing bracke t.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and\">\".\n  return fa l se if every opening bracke t hasa corresponding closing bracke t.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketing = {\n    \"<\": \">\",\n    \"<=\": \">=\",\n    \"<>\": \"<\",\n    \"=\": \"==\",\n    \"!=\": \"!==\",\n    \"<=>\": \"<=\",\n    \"<=>=\": \"=>\",\n    \"<=><>\": \"<=>\",\n    \"<=><>=\": \"<=>=\",\n    \"<=><><>=\": \"<=>=>\",\n    \"<=><><><>=\": \"<=>=>=>\",\n    \"<=><><><><>=\": \"<=>=>=>\",\n    \"<=><><><><><>=\": \"<=>=>=>=>\",\n    \"<=><><><><><><>=\": \"<=>=>=>=>=>\",\n    \"<=><><><><><><><>=\": \"<=>=>=>=>=>\",\n    \"<=><><><><><><><>=\": \"<=>=>=>=>=>\",\n    \"<=><><><><><><><><>=\": \"<=>=>=>=>=>=>\",\n    \"<=><><><><><><><><>=\": \"<=>=>=>=>=>=>\",\n    \"<=><><><><><><><><>=\": \"<=>=>=>=>=>=>\",\n    \"<=><><><><><><><><>=\": \"<=>=>=>=>=>=>\",\n    \"<=><><><><><><><><><>=\": \"<=>=>=>=>=>=>\",\n    \"<=><><><><><><><><><>=\": \"<=>=>=>=>=>=>\",\n    \"<=><><><><><><><><><>=\": \"<=>=>=>=>=>=>\",\n    \"<=><><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",\n    \"<=><><>=\": \"<=>=>=>=>=>=>=>=>\",", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements aremonotonically in c reasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true is list elements aremonotonically in c reasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    if (l[j] < l[k]) {\n      i++;\n    } else {\n      j++;\n    }\n    k++;\n  }\n  return i === l.length;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  false", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two list s .\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return sorted unique common elements for two list s.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  const len = Math.min(l1.length, l2.length);\n  for (let i = 0; i < len; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l1[i]);\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> isEven(10)\n  true\n  >>> isEven(20)\n  false\n  >>> isEven(30)\n  false\n  >>> isEven(50)\n  true\n  >>> isEven(100)\n  false\n  >>> isEven(1000)\n  false\n  >>> isEven(10000)\n  false\n  >>> isEven(100000)\n  false\n  >>> isEven(1000000)\n  false\n  >>> isEven(10000000)\n  false\n  >>> isEven(100000000)\n  false\n  >>> isEven(1000000000)\n  false\n  >>> isEven(10000000000)\n  false\n  >>> isEven(100000000000)\n  false\n  >>> isEven(1000000000000)\n  false\n  >>> isEven(1000000000000)\n  false\n  >>> isEven(100000000000000)\n  false\n  >>> isEven(100000000000000)\n  false\n  >>> isEven(10000000000000000)\n  false\n  >>> isEven(10000000000000000)\n  false\n  >>> isEven(100000000000000000)\n  false\n  >>> isEven(1000000000000000001)\n  false\n  >>> isEven(1000000000000000001)\n  false\n  >>> isEven(10000000000000000010)\n  false\n  >>> isEven(10000000000000000010)\n  false\n  >>> isEven(1000000000000000010)\n  false\n  >>> isEven(1000000000000000010)\n  false\n  >>> isEven(10000000000000001)\n  false\n  >>> isEven(10000000000000001)\n  false\n  >>> isEven(100000000000000010)\n  false\n  >>> isEven(100000000000000010)\n  false\n  >>> isEven(100000000000000010)\n  false\n  >>> isEven(10000000000000010)\n  false\n  >>> isEven(10000000000000010)\n  false\n  >>> isEven(10000000000000011)\n  false\n  >>> isEven(10000000000000011)\n  false\n  >>> isEven(1000000000000010)\n  false\n  >>> isEven(1000000000000010)\n  false\n  >>> isEven(1000000000000011)\n  false\n  >>> isEven(1000000000000011)\n  false\n  >>> isEven(100000000000010)\n  false\n  >>> isEven(100000000000010)\n  false\n  >>> isEven(100000000000011)\n  false\n  >>> isEven(100000000000011)\n  false\n  >>> isEven(10000000000010)\n  false\n  >>> isEven(10000000000010)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n  false\n  >>> isEven(10000000000011)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n >1  and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a positive integer n, return true if the number is prime and false otherwise.\n  >>> isPrime(13195)\n  true\n  >>> isPrime(2048)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  true\n  >>> isComposite(2048)\n  false\n  */\nconst isComposite = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  true\n  */\nconst isCompositeOrZero = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrOne = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  true\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrTwo = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrThree = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrFour = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrFive = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrSix = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrSeven = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrEight = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrNine = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrTen = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrEleven = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrTwelve = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  return false;\n};\n\n/*\n  Given a positive integer n, return true if the number is composite and false otherwise.\n  >>> isComposite(13195)\n  false\n  >>> isComposite(2048)\n  false\n  */\nconst isCompositeOrThirteen = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function isa string represented m u ltiple groups fornested p arenth eses separatedb y spaces.  Fo r each of th e grou p, output the deepest level of nestin g ofparenth es es.\n  E.g. (()( ) ) has max imum two levels ofnesting while (( ())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_level_count = 0;\n  let paren_level_count2 = 0;\n  let paren_level_count3 = 0;\n  let paren_level_count4 = 0;\n  let paren_level_count5 = 0;\n  let paren_level_count6 = 0;\n  let paren_level_count7 = 0;\n  let paren_level_count8 = 0;\n  let paren_level_count9 = 0;\n  let paren_level_count10 = 0;\n  let paren_level_count11 = 0;\n  let paren_level_count12 = 0;\n  let paren_level_count13 = 0;\n  let paren_level_count14 = 0;\n  let paren_level_count15 = 0;\n  let paren_level_count16 = 0;\n  let paren_level_count17 = 0;\n  let paren_level_count18 = 0;\n  let paren_level_count19 = 0;\n  let paren_level_count20 = 0;\n  let paren_level_count21 = 0;\n  let paren_level_count22 = 0;\n  let paren_level_count23 = 0;\n  let paren_level_count24 = 0;\n  let paren_level_count25 = 0;\n  let paren_level_count26 = 0;\n  let paren_level_count27 = 0;\n  let paren_level_count28 = 0;\n  let paren_level_count29 = 0;\n  let paren_level_count30 = 0;\n  let paren_level_count31 = 0;\n  let paren_level_count32 = 0;\n  let paren_level_count33 = 0;\n  let paren_level_count34 = 0;\n  let paren_level_count35 = 0;\n  let paren_level_count36 = 0;\n  let paren_level_count37 = 0;\n  let paren_level_count38 = 0;\n  let paren_level_count39 = 0;\n  let paren_level_count40 = 0;\n  let paren_level_count41 = 0;\n  let paren_level_count42 = 0;\n  let paren_level_count43 = 0;\n  let paren_level_count44 = 0;\n  let paren_level_count45 = 0;\n  let paren_level_count46 = 0;\n  let paren_level_count47 = 0;\n  let paren_level_count48 = 0;\n  let paren_level_count49 = 0;\n  let paren_level_count50 = 0;\n  let paren_level_count51 = 0;\n  let paren_level_count52 = 0;\n  let paren_level_count53 = 0;\n  let paren_level_count54 = 0;\n  let paren_level_count55 = 0;\n  let paren_level_count56 = 0;\n  let paren_level_count57 = 0;\n  let paren_level_count58 = 0;\n  let paren_level_count59 = 0;\n  let paren_level_count60 = 0;\n  let paren_level_count61 = 0;\n  let paren_level_count62 = 0;\n  let paren_level_count63 = 0;\n  let paren_level_count64 = 0;\n  let paren_level_count65 = 0;\n  let paren_level_count66 = 0;\n  let paren_level_count67 = 0;\n  let paren_level_count68 = 0;\n  let paren_level_count69 = 0;\n  let paren_level_count70 = 0;\n  let paren_level_count71 = 0;\n  let paren_level_count72 = 0;\n  let paren_level_count73 = 0;\n  let paren_level_count74 = 0;\n  let paren_level_count75 = 0;\n  let paren_level_count76 = 0;\n  let paren_level_count77 = 0;\n  let paren_level_count78 = 0;\n  let paren_level_count79 = 0;\n  let paren_level_count80 = 0;\n  let paren_level_count81 = 0;\n  let paren_level_count82 = 0;\n  let paren_level_count83 = 0;\n  let paren_level_count84 = 0;\n  let paren_level_count85 = 0;\n  let paren_level_count86 = 0;\n  let paren_level_count87 = 0;\n  let paren_level_count88 = 0;\n  let paren_level_count89 = 0;\n  let paren_level_count90 = 0;\n  let paren_level_count91 = 0;\n  let paren_level_count92 = 0;\n  let paren_level_count93 = 0;\n  let paren_level_count94 = 0;\n  let paren_level_count95 = 0;\n  let paren_level_count96 = 0;\n  let paren_level_count97 = 0;\n  let paren_level_count98 = 0;\n  let paren_level_count99 = 0;\n  let paren_level_count100 = 0;\n  let paren_level_count101 = 0;\n  let paren_level_count102 = 0;\n  let paren_level_count103 = 0;\n  let paren_level_count104 = 0;\n  let paren_level_count105 = 0;\n  let paren_level_count106 = 0;\n  let paren_level_count107 = 0;\n  let paren_level_count108 = 0;\n  let paren_level_count109 = 0;\n  let paren_level_count110 = 0;\n  let paren_level_count111 = 0;\n  let paren_level_count112 = 0;\n  let paren_level_count113 = 0;\n  let paren_level_count114 = 0;\n  let paren_level_count115 = 0;\n  let paren_level_count116 = 0;\n  let paren_level_count117 = 0;\n  let paren_level_count118 = 0;\n  let paren_level_count119 = 0;\n  let paren_level_count120 = 0;\n  let paren_level_count121 = 0;\n  let paren_level_count122 = 0;\n  let paren_level_count123 = 0;\n  let paren_level_count124 = 0;\n  let paren_level_count125 = 0;\n  let paren_level_count126 = 0;\n  let paren_level_count127 = 0;\n  let paren_level_count128 = 0;\n  let paren_level_count129 = 0;\n  let paren_level_count130 = 0;\n  let paren_level_count131 = 0;\n  let paren_level_count132 = 0;\n  let paren_level_count133 = 0;\n  let paren_level_count134 = 0;\n  let paren_level_count135 = 0;\n  let paren_level_count136 = 0;\n  let paren_level_count137 = 0;\n  let paren_level_count138 = 0;\n  let paren_level_count139 = 0;\n  let paren_level_count140 = 0;\n  let paren_level_count141 = 0;\n  let paren_level_count142 = 0;\n  let paren_level_count143 = 0;\n  let paren_level_count144 = 0;\n  let paren_level_count145 = 0;\n  let paren_level_count146 = 0;\n  let paren_level_count147 = 0;\n  let paren_level_count148 = 0;\n  let paren_level_count149 = 0;\n  let paren_level_count150 = 0;\n  let paren_level_count151 = 0;\n  let paren_level_count152 = 0;\n  let paren_level_count153 = 0;\n  let paren_level_count154 = 0;\n  let paren_level_count155 = 0;\n  let paren_level_count156 = 0;\n  let paren_level_count157 = 0;\n  let paren_level_count158 = 0;\n  let paren_level_count159 = 0;\n  let paren_level_count160 = 0;\n  let paren_level_count161 = 0;\n  let paren_level_count162 = 0;\n  let paren_level_count163 = 0;\n  let paren_level_count164 = 0;\n  let paren_level_count165 = 0;\n  let paren_level_count166 = 0;\n  let paren_level_count167 = 0;\n  let paren_level_count168 = 0;\n  let paren_level_count169 = 0;\n  let paren_level_count170 = 0;\n  let paren_level_count171 = 0;\n  let paren_level_count172 = 0;\n  let paren_level_count173 = 0;\n  let paren_level_count174 = 0;\n  let paren_level_count175 = 0;\n  let paren_level_count176 = 0;\n  let paren_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 ton .\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 ton.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Given a number and a target number, return all possible combinations of numbers from 1 to that number.\n  For example, given the number 4 and target number 5, the function should return [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]\n  >>> combinations(4,5)\n  [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]\n  >>> combinations(4,6)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,5]]\n  >>> combinations(4,7)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,5]]\n  >>> combinations(4,8)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,5]]\n  >>> combinations(4,9)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,5]]\n  >>> combinations(4,10)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,5]]\n  >>> combinations(4,11)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,5]]\n  >>> combinations(4,12)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,5]]\n  >>> combinations(4,13)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,5]]\n  >>> combinations(4,14)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,5]]\n  >>> combinations(4,15)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,5]]\n  >>> combinations(4,16)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,5]]\n  >>> combinations(4,17)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,5]]\n  >>> combinations(4,18)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,5]]\n  >>> combinations(4,19)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,5]]\n  >>> combinations(4,20)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,5]]\n  >>> combinations(4,21)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,21],[3,5]]\n  >>> combinations(4,22)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,21],[3,22],[3,5]]\n  >>> combinations(4,23)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,21],[3,22],[3,23],[3,5]]\n  >>> combinations(4,24)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,21],[3,22],[3,23],[3,24],[3,5]]\n  >>> combinations(4,25)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,21],[3,22],[3,23],[3,24],[3,25],[3,5]]\n  >>> combinations(4,26)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,21],[3,22],[3,23],[3,24],[3,25],[3,26],[3,5]]\n  >>> combinations(4,27)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,21],[3,22],[3,23],[3,24],[3,25],[3,26],[3,27],[3,5]]\n  >>> combinations(4,28)\n  [[1,4],[1,5],[2,4],[2,5],[3,6],[3,7],[3,8],[", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and\")\".\n  return tr u e if every opening bracket  has a  correspondingc losing bracket .\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and\")\".\n  return tr u e if every opening bracket  has a  correspondingc losing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = brackets.split('(').map((bracket) => bracket.trim()).join('|');\n  return bracketingRegex === '|)';\n};\n\nconst isBracketing = (str) => {\n  return correctBracketing(str);\n};\n\nconst isBracketingInside = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingOutside = (str) => {\n  return correctBracketing(str) &&!isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingInsideOrOutside = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingInsideOrOutsideOr = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingInsideOrOutsideOrOr = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingInsideOrOutsideOrOrOr = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingInsideOrOutsideOrOrOr = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingInsideOrOutsideOrOrOrOr = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingInsideOrOutsideOrOrOrOr = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingInsideOrOutsideOrOrOrOrOr = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1));\n};\n\nconst isBracketingInsideOrOutsideOrOrOrOrOr = (str) => {\n  return correctBracketing(str) && isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || isBracketing(str.substring(1, str.length - 1)) || ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficientsof a polynomial.\n  xs[ 0 ] + xs[1] * x + xs[2] * x^ 2 + .. ..\n   Return de r ivative of thi s polynomial  in th e sameform.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficientsof a polynomial.\n  xs[ 0 ] + xs[1] * x + xs[2] * x^ 2 +....\n   Return de r ivative of thi s polynomial  in th e sameform.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 1\n  let r = new Array(n)\n  let sum = 0\n  let x = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xs = 0\n  let xi = 0\n  let x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenceis a sequence similart o the Fibbonacci sequnecethat's  defined as fol l ows:  fibfib( 0) == 0\n  fi bfib(1 ) == 0  fibfib(2) == 1\n  fibfib(n) = = fibfib(n-1 )+ fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element ofthe fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequenceis a sequence similart o the Fibbonacci sequnecethat's  defined as fol l ows:  fibfib( 0) == 0\n  fi bfib(1 ) == 0  fibfib(2) == 1\n  fibfib(n) = = fibfib(n-1 )+ fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element ofthe fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n- 3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) \n  fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n- 3).\n  Please writea function to ef ficiently compute the n-th element of the fib f ib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3}
{"task_id": "JavaScript/64", "prompt": "/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount2 = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount3 = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount4 = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount5 = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount6 = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount7 = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount8 = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount9 = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelsCount which takes a string representing\n  a word as i nput a nd returns then umber ofvowel s in the str ing.\n Vowels in this case are 'a', 'e', 'i ', 'o', 'u'.  H ere, 'y' is als o  a\n  vowe l,but only when it is at the end o f thegiven word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount10 = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of theinteger x, shift the digits right by shift  andreturn the resu l t asa string. \n  If shift> numb er of digits, return digits reversed. \n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of theinteger x, shift the digits right by shift  andreturn the resu l t asa string. \n  If shift> numb er of digits, return digits reversed. \n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let res = \"\";\n  let digits = x.toString().split(\"\");\n  let len = digits.length;\n  let i = len - shift;\n  let j = len - 1;\n  while (i >= 0 && j >= 0) {\n    res += digits[i] + digits[j];\n    i = i - 1;\n    j = j - 1;\n  }\n  return res;\n};\n\n/*\n  Given a number x, return the number of trailing zeros needed to make x a positive integer.\n  >>> trailingZeros(-4)\n  3\n  >>> trailingZeros(-3)\n  2\n  >>> trailingZeros(-2)\n  1\n  >>> trailingZeros(-1)\n  0\n  >>> trailingZeros(0)\n  0\n  >>> trailingZeros(1)\n  1\n  >>> trailingZeros(2)\n  2\n  >>> trailingZeros(3)\n  3\n  >>> trailingZeros(4)\n  4\n  >>> trailingZeros(5)\n  5\n  >>> trailingZeros(6)\n  6\n  >>> trailingZeros(7)\n  7\n  >>> trailingZeros(8)\n  8\n  >>> trailingZeros(9)\n  9\n  >>> trailingZeros(10)\n  10\n  >>> trailingZeros(11)\n  11\n  >>> trailingZeros(12)\n  12\n  >>> trailingZeros(13)\n  13\n  >>> trailingZeros(14)\n  14\n  >>> trailingZeros(15)\n  15\n  >>> trailingZeros(16)\n  16\n  >>> trailingZeros(17)\n  17\n  >>> trailingZeros(18)\n  18\n  >>> trailingZeros(19)\n  19\n  >>> trailingZeros(20)\n  20\n  >>> trailingZeros(21)\n  21\n  >>> trailingZeros(22)\n  22\n  >>> trailingZeros(23)\n  23\n  >>> trailingZeros(24)\n  24\n  >>> trailingZeros(25)\n  25\n  >>> trailingZeros(26)\n  26\n  >>> trailingZeros(27)\n  27\n  >>> trailingZeros(28)\n  28\n  >>> trailingZeros(29)\n  29\n  >>> trailingZeros(30)\n  30\n  >>> trailingZeros(31)\n  31\n  >>> trailingZeros(32)\n  32\n  >>> trailingZeros(33)\n  33\n  >>> trailingZeros(34)\n  34\n  >>> trailingZeros(35)\n  35\n  >>> trailingZeros(36)\n  36\n  >>> trailingZeros(37)\n  37\n  >>> trailingZeros(38)\n  38\n  >>> trailingZeros(39)\n  39\n  >>> trailingZeros(40)\n  40\n  >>> trailingZeros(41)\n  41\n  >>> trailingZeros(42)\n  42\n  >>> trailingZeros(43)\n  43\n  >>> trailingZeros(44)\n  44\n  >>> trailingZeros(45)\n  45\n  >>> trailingZeros(46)\n  46\n  >>> trailingZeros(47)\n  47\n  >>> trailingZeros(48)\n  48\n  >>> trailingZeros(49)\n  49\n  >>> trailingZeros(50)\n  50\n  >>> trailingZeros(51)\n  51\n  >>> trailingZeros(52)\n  52\n  >>> trailingZeros(53)\n  53\n  >>> trailingZeros(54)\n  54\n  >>> trailingZeros(55)\n  55\n  >>> trailingZeros(56)\n  56\n  >>> trailingZeros(57)\n  57\n  >>> trailingZeros(58)\n  58\n  >>> trailingZeros(59)\n  59\n  >>> trailingZeros(60)\n  60\n  >>> trailingZeros(61)\n  61\n  >>> trailingZeros(62)\n  62\n  >>> trailingZeros(63)\n  63\n  >>> trailingZeros(64)\n  64\n  >>> trailingZeros(65)\n  65\n  >>> trailingZeros(66)\n  66\n  >>> trailingZeros(67)\n  67\n  >>> trailingZeros(68)\n  68\n  >>> trailingZeros(69)\n  69\n  >>> trailingZeros(70)\n  70\n  >>> trailingZeros(71)\n  71\n  >>> trailingZeros(72)\n  72\n  >>> trailingZeros(73)\n  73\n  >>> trailingZeros(74)\n  74\n  >>> trailingZeros(75)\n  75\n  >>> trailingZeros(76)\n  76\n  >>> trailingZeros(77)\n  77\n  >>> trailingZeros(78)\n  78\n  >>> trailingZeros(79)\n  79\n  >>> trailingZeros(80)\n  80\n  >>> trailingZeros(81)\n  81\n  >>> trailingZeros(82)\n  82\n  >>> trailingZeros(83)\n  83\n  >>> trailingZeros(84)\n  84\n  >>> trailingZeros(85)\n  85\n  >>> trailingZeros(86)\n  86\n  >>> trailingZeros(87)\n  87\n  >>> trailingZeros(88)\n  88\n  >>> trailingZeros(89)\n  89\n  >>> trailingZeros(90)\n  90\n  >>> trailingZeros(91)\n  91\n  >>> trailingZeros(92)\n  92\n  >>> trailingZeros(93)\n  93\n  >>> trailingZeros(94)\n  94\n  >>> trailingZeros(95)\n  95\n  >>> trailingZeros(96)\n  96\n  >>> trailingZeros(97)\n  97\n  >>> trailingZeros(98)\n  98\n  >>> trailingZeros(99)\n  99\n  >>> trailingZeros(100)\n  100\n  >>> trailingZeros(101)\n  101\n  >>> trailingZeros(102)\n  102\n  >>> trailingZeros(103)\n  103\n  >>> trailingZeros(104)\n  104\n  >>> trailingZeros(105)\n  105\n  >>> trailingZeros(106)\n  106\n  >>> trailingZeros(107)\n  107\n  >>> trailingZeros(108)\n  108\n  >>> trailingZeros(109)\n  109\n  >>> trailingZeros(110)\n  110\n  >>> trailingZeros(111)\n  111\n  >>> trailingZeros(112)\n  112\n  >>> trailingZeros(113)\n  113\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum2 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum3 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum4 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum5 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum6 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum7 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum8 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum9 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum10 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum11 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 97;\n  }\n  return sum;\n};\n\n/*Task\n Write a function that takes a string as in p ut and returns the sum ofthe up per characterso nly'  ASCII c odes.\n\n  Examples:\n      digitSum(\"\") => 0\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will begivena string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will begivena string that re p resents a number of apples  and o ranges\n  that a r e distributedin a basketof fru it this basket contains\n  apples, ora nges, and ma ng o fruits. Given the strin g that represents the total numberof\n  the oranges and apples and an integer th a t represent the total number of thefruits\n in the basket return thenumber of the mango fruits in t he  basket.\n  for examble:\n  f ruitDistribution(\"5 apples and 6 o rang es \", 19) ->1 9 - 5 - 6 =  8\n  fruitDi stribution(\"0 apples and 1 orang es\", 3) -> 3 - 0 - 1 = 2\n  fruitD istribution(\"2apples  and 3 ora nges\", 100) -> 1 00 -  2 - 3 = 95\n  fruitDistribution(\"100 apples and  1 oranges\",120)- > 120 - 100 - 1 = 19\n */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;\n  let sum = 0;\n  let count = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a treet hat has non-negative integ er nod es\n  your taski s topluck one  of the node s andreturnit.\n  Theplucked node shouldbe the nodewi th the smallest even valu e.  If multiple nodes with the sam e smallest even value are found return the no d e that has smallest index.\n\n  The pl ucked node should be returned ina  list, [ smalest_value, its ind ex  ],\n  If there are no evenvalues or the given arrayis empty , re tu rn [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a treet hat has non-negative integ er nod es\n  your taski s topluck one  of the node s andreturnit.\n  Theplucked node shouldbe the nodewi th the smallest even valu e.  If multiple nodes with the sam e smallest even value are found return the no d e that has smallest index.\n\n  The pl ucked node should be returned ina  list, [ smalest_value, its ind ex  ],\n  If there are no evenvalues or the given arrayis empty, re tu rn [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let result = [];\n  let min = 0;\n  let max = 0;\n  let cur = 0;\n  let cur2 = 0;\n  let cur3 = 0;\n  let cur4 = 0;\n  let cur5 = 0;\n  let cur6 = 0;\n  let cur7 = 0;\n  let cur8 = 0;\n  let cur9 = 0;\n  let cur10 = 0;\n  let cur11 = 0;\n  let cur12 = 0;\n  let cur13 = 0;\n  let cur14 = 0;\n  let cur15 = 0;\n  let cur16 = 0;\n  let cur17 = 0;\n  let cur18 = 0;\n  let cur19 = 0;\n  let cur20 = 0;\n  let cur21 = 0;\n  let cur22 = 0;\n  let cur23 = 0;\n  let cur24 = 0;\n  let cur25 = 0;\n  let cur26 = 0;\n  let cur27 = 0;\n  let cur28 = 0;\n  let cur29 = 0;\n  let cur30 = 0;\n  let cur31 = 0;\n  let cur32 = 0;\n  let cur33 = 0;\n  let cur34 = 0;\n  let cur35 = 0;\n  let cur36 = 0;\n  let cur37 = 0;\n  let cur38 = 0;\n  let cur39 = 0;\n  let cur40 = 0;\n  let cur41 = 0;\n  let cur42 = 0;\n  let cur43 = 0;\n  let cur44 = 0;\n  let cur45 = 0;\n  let cur46 = 0;\n  let cur47 = 0;\n  let cur48 = 0;\n  let cur49 = 0;\n  let cur50 = 0;\n  let cur51 = 0;\n  let cur52 = 0;\n  let cur53 = 0;\n  let cur54 = 0;\n  let cur55 = 0;\n  let cur56 = 0;\n  let cur57 = 0;\n  let cur58 = 0;\n  let cur59 = 0;\n  let cur60 = 0;\n  let cur61 = 0;\n  let cur62 = 0;\n  let cur63 = 0;\n  let cur64 = 0;\n  let cur65 = 0;\n  let cur66 = 0;\n  let cur67 = 0;\n  let cur68 = 0;\n  let cur69 = 0;\n  let cur70 = 0;\n  let cur71 = 0;\n  let cur72 = 0;\n  let cur73 = 0;\n  let cur74 = 0;\n  let cur75 = 0;\n  let cur76 = 0;\n  let cur77 = 0;\n  let cur78 = 0;\n  let cur79 = 0;\n  let cur80 = 0;\n  let cur81 = 0;\n  let cur82 = 0;\n  let cur83 = 0;\n  let cur84 = 0;\n  let cur85 = 0;\n  let cur86 = 0;\n  let cur87 = 0;\n  let cur88 = 0;\n  let cur89 = 0;\n  let cur90 = 0;\n  let cur91 = 0;\n  let cur92 = 0;\n  let cur93 = 0;\n  let cur94 = 0;\n  let cur95 = 0;\n  let cur96 = 0;\n  let cur97 = 0;\n  let cur98 = 0;\n  let cur99 = 0;\n  let cur100 = 0;\n  let cur101 = 0;\n  let cur102 = 0;\n  let cur103 = 0;\n  let cur104 = 0;\n  let cur105 = 0;\n  let cur106 = 0;\n  let cur107 = 0;\n  let cur108 = 0;\n  let cur109 = 0;\n  let cur110 = 0;\n  let cur111 = 0;\n  let cur112 = 0;\n  let cur113 = 0;\n  let cur114 = 0;\n  let cur115 = 0;\n  let cur116 = 0;\n  let cur117 = 0;\n  let cur118 = 0;\n  let cur119 = 0;\n  let cur120 = 0;\n  let cur121 = 0;\n  let cur122 = 0;\n  let cur123 = 0;\n  let cur124 = 0;\n  let cur125 = 0;\n  let cur126 = 0;\n  let cur127 = 0;\n  let cur128 = 0;\n  let cur129 = 0;\n  let cur130 = 0;\n  let cur131 = 0;\n  let cur132 = 0;\n  let cur133 = 0;\n  let cur134 = 0;\n  let cur135 = 0;\n  let cur136 = 0;\n  let cur137 = 0;\n  let cur138 = 0;\n  let cur139 = 0;\n  let cur140 = 0;\n  let cur141 = 0;\n  let cur142 = 0;\n  let cur143 = 0;\n  let cur144 = 0;\n  let cur145 = 0;\n  let cur146 = 0;\n  let cur147 = 0;\n  let cur148 = 0;\n  let cur149 = 0;\n  let cur150 = 0;\n  let cur151 = 0;\n  let cur152 = 0;\n  let cur153 = 0;\n  let cur154 = 0;\n  let cur155 = 0;\n  let cur156 = 0;\n  let cur157 = 0;\n  let cur158 = 0;\n  let cur159 = 0;\n  let cur160 = 0;\n  let cur161 = 0;\n  let cur162 = 0;\n  let cur163 = 0;\n  let cur164 = 0;\n  let cur165 = 0;\n  let cur166 = 0;\n  let cur167 = 0;\n  let cur168 = 0;\n  let cur169 = 0;\n  let cur170 = 0;\n  let cur171 = 0;\n  let cur172 = 0;\n  let cur173 = 0;\n  let cur174 = 0;\n  let cur175 = 0;\n  let cur176 = 0;\n  let cur177 = 0;\n  let cur178 = 0;\n  let cur179 = 0;\n  let cur180 = 0;\n  let cur181 = 0;\n  let cur182 = 0;\n  let cur183 = 0;\n  let cur184 = 0;\n  let cur185 = 0;\n  let cur186 = 0;\n  let cur187 = 0;\n  let cur188 = 0;\n  let cur189 = 0;\n  let cur190 = 0;\n  let cur191 = 0;\n  let cur192 = 0;\n  let cur193 = 0;\n  let cur194 = 0;\n  let cur195 = 0;\n  let cur196 = 0;\n  let cur197 = 0;\n  let cur198 = 0;\n  let cur199 = 0;\n  let cur200 = 0;\n  let cur201 = 0;\n  let cur202 = 0;\n  let cur203 = 0;\n  let cur204 = 0;\n  let cur205 = 0;\n  let cur206 = 0;\n  let cur207 = 0;\n  let cur208 = 0;\n  let cur209 = 0;\n  let cur210 = 0;\n  let cur211 = 0;\n  let cur212 = 0;\n  let cur213 = 0;\n  let cur214 = 0;\n  let cur215 = 0;\n  let cur216 = 0;\n  let cur217 = 0;\n  let cur218 = 0;\n  let cur219 = 0;\n  let cur220 = 0;\n  let cur221 = 0;\n  let cur222 = 0;\n  let cur223 = 0;\n  let cur224 = 0;\n  let cur225 = 0;\n  let cur226 = 0;\n  let cur227 = 0;\n  let cur228 = 0;\n  let cur229 = 0;\n  let cur230 = 0;\n  let cur231 = 0;\n  let cur232 = 0;\n  let cur233 = 0;\n  let cur234 = 0;\n  let cur235 = 0;\n  let cur236 = 0;\n  let cur237 = 0;\n  let cur238 = 0;\n  let cur239 = 0;\n  let cur240 = 0;\n  let cur241 = 0;\n  let cur242 = 0;\n  let cur243 = 0;\n  let cur244 = 0;\n  let cur245 = 0;\n  let cur246 = 0;\n  let cur247 = 0;\n  let cur248 = 0;\n  let cur249 = 0;\n  let cur250 = 0;\n  let cur251 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxVal = -1;\n  let maxIdx = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      max = lst[i];\n      maxVal = lst[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n};\n\n/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxVal = -1;\n  let maxIdx = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      max = lst[i];\n      maxVal = lst[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n};\n\n/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxVal = -1;\n  let maxIdx = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      max = lst[i];\n      maxVal = lst[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n};\n\n/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxVal = -1;\n  let maxIdx = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      max = lst[i];\n      maxVal = lst[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n};\n\n/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxVal = -1;\n  let maxIdx = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      max = lst[i];\n      maxVal = lst[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n};\n\n/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxVal = -1;\n  let maxIdx = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      max = lst[i];\n      maxVal = lst[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n};\n\n/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxVal = -1;\n  let maxIdx = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      max = lst[i];\n      maxVal = lst[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n};\n\n/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxVal = -1;\n  let maxIdx = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      max = lst[i];\n      maxVal = lst[i];\n      maxIdx = i;\n    }\n  }\n  return maxIdx;\n};\n\n/*\n  You are given a non-emptylist of positive integ e rs. Return the greatest in tegerthat is greater than  zero, a nd has a fre quency  greater than orequal to the value o f the intege ritself.\n  The f r equency o f an integer is the number of times  it appears in the list.\n  If no sucha value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxVal = -1;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of stringsonly for ones th a t contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange o r der.\n  Strange sorting, is  whenyou start witht he minimum val ue,\n  then m aximum  of the remaining integers, thenmini mum and so o n. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange o r der.\n  Strange sorting, is  whenyou start witht he minimum val ue,\n  then m aximum  of the remaining integers, thenmini mum and so o n. \n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let len = lst.length;\n  let res = [];\n  for (let i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (lst[i] > ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triang l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 * l2 * l3 / (l1 + l2 + l3);\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 * l2 * l3 / (l1 + l2 + l3);\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 * l2 * l3 / (l1 + l2 + l3);\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 * l2 * l3 / (l1 + l2 + l3);\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 * l2 * l3 / (l1 + l2 + l3);\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 * l2 * l3 / (l1 + l2 + l3);\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 * l2 * l3 / (l1 + l2 + l3);\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 * l2 * l3 / (l1 + l2 + l3);\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si des is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c) => {\n  const l1 = Math.sqrt(a * a + b * b);\n  const l2 = Math.sqrt(a * a + c * c);\n  const l3 = Math.sqrt(b * b + c * c);\n  return l1 * l2 * l3 / (l1 + l2 + l3);\n};\n\n/*\n  Given the lengths of the three sides of a triangle l e. Return the area of\n  th e tria ngle rounded to 2 decimalpoin ts if the th ree si des form a validtriangle.\n  Otherwis e return -1 Three sides mak e  a validtriangle when the sum of any two si ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it 's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > w) {\n      return false;\n    }\n    if (sum < w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max >= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > w) {\n      return false;\n    }\n    if (sum < w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max >= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > w) {\n      return false;\n    }\n    if (sum < w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max >= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > w) {\n      return false;\n    }\n    if (sum < w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max >= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > w) {\n      return false;\n    }\n    if (sum < w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max >= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list) and the sumof i ts elementsis  less than or e q ual the m aximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  let max = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum > w) {\n      return false;\n    }\n    if (sum < w) {\n      max = Math.max(max, sum);\n    }\n  }\n  return max >= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false othe rwise. \n  The object q willflyif it's balanced(it is  a palindromic list", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic . A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers,find the maximum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let maxChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxChange) {\n      maxChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers,find the maximum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let maxChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers,find the maximum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let maxChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers,find the maximum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 6\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 5\n  largestChange([1, 2, 3, 2, 1]) == 4\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let maxChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxChange) {\n      maxChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers,find the minimum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf orwards.Inone change, youcan change one e lement to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let minChange = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minChange) {\n      minChange = arr[i];\n      change = i;\n    }\n  }\n  return change;\n};\n\n/*\n  Given an array arr of integers,find the maximum number of elements that\n need t o be changed to makethearray  palindromic. A pa lindromic array is an array that  is  read the sa me  backwards andf ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strin g s and returns thelist tha t has  total numbero f chars in the  all strings  of th e listless thanthe other list.\n  i f the two li st s have the same number of  chars, return thefirst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const set = new Set();\n  const set1 = new Set();\n  const set2 = new Set();\n  const set3 = new Set();\n  const set4 = new Set();\n  const set5 = new Set();\n  const set6 = new Set();\n  const set7 = new Set();\n  const set8 = new Set();\n  const set9 = new Set();\n  const set10 = new Set();\n  const set11 = new Set();\n  const set12 = new Set();\n  const set13 = new Set();\n  const set14 = new Set();\n  const set15 = new Set();\n  const set16 = new Set();\n  const set17 = new Set();\n  const set18 = new Set();\n  const set19 = new Set();\n  const set20 = new Set();\n  const set21 = new Set();\n  const set22 = new Set();\n  const set23 = new Set();\n  const set24 = new Set();\n  const set25 = new Set();\n  const set26 = new Set();\n  const set27 = new Set();\n  const set28 = new Set();\n  const set29 = new Set();\n  const set30 = new Set();\n  const set31 = new Set();\n  const set32 = new Set();\n  const set33 = new Set();\n  const set34 = new Set();\n  const set35 = new Set();\n  const set36 = new Set();\n  const set37 = new Set();\n  const set38 = new Set();\n  const set39 = new Set();\n  const set40 = new Set();\n  const set41 = new Set();\n  const set42 = new Set();\n  const set43 = new Set();\n  const set44 = new Set();\n  const set45 = new Set();\n  const set46 = new Set();\n  const set47 = new Set();\n  const set48 = new Set();\n  const set49 = new Set();\n  const set50 = new Set();\n  const set51 = new Set();\n  const set52 = new Set();\n  const set53 = new Set();\n  const set54 = new Set();\n  const set55 = new Set();\n  const set56 = new Set();\n  const set57 = new Set();\n  const set58 = new Set();\n  const set59 = new Set();\n  const set60 = new Set();\n  const set61 = new Set();\n  const set62 = new Set();\n  const set63 = new Set();\n  const set64 = new Set();\n  const set65 = new Set();\n  const set66 = new Set();\n  const set67 = new Set();\n  const set68 = new Set();\n  const set69 = new Set();\n  const set70 = new Set();\n  const set71 = new Set();\n  const set72 = new Set();\n  const set73 = new Set();\n  const set74 = new Set();\n  const set75 = new Set();\n  const set76 = new Set();\n  const set77 = new Set();\n  const set78 = new Set();\n  const set79 = new Set();\n  const set80 = new Set();\n  const set81 = new Set();\n  const set82 = new Set();\n  const set83 = new Set();\n  const set84 = new Set();\n  const set85 = new Set();\n  const set86 = new Set();\n  const set87 = new Set();\n  const set88 = new Set();\n  const set89 = new Set();\n  const set90 = new Set();\n  const set91 = new Set();\n  const set92 = new Set();\n  const set93 = new Set();\n  const set94 = new Set();\n  const set95 = new Set();\n  const set96 = new Set();\n  const set97 = new Set();\n  const set98 = new Set();\n  const set99 = new Set();\n  const set100 = new Set();\n  const set101 = new Set();\n  const set102 = new Set();\n  const set103 = new Set();\n  const set104 = new Set();\n  const set105 = new Set();\n  const set106 = new Set();\n  const set107 = new Set();\n  const set108 = new Set();\n  const set109 = new Set();\n  const set110 = new Set();\n  const set111 = new Set();\n  const set112 = new Set();\n  const set113 = new Set();\n  const set114 = new Set();\n  const set115 = new Set();\n  const set116 = new Set();\n  const set117 = new Set();\n  const set118 = new Set();\n  const set119 = new Set();\n  const set120 = new Set();\n  const set121 = new Set();\n  const set122 = new Set();\n  const set123 = new Set();\n  const set124 = new Set();\n  const set125 = new Set();\n  const set126 = new Set();\n  const set127 = new Set();\n  const set128 = new Set();\n  const set129 = new Set();\n  const set130 = new Set();\n  const set131 = new Set();\n  const set132 = new Set();\n  const set133 = new Set();\n  const set134 = new Set();\n  const set135 = new Set();\n  const set136 = new Set();\n  const set137 = new Set();\n  const set138 = new Set();\n  const set139 = new Set();\n  const set140 = new Set();\n  const set141 = new Set();\n  const set142 = new Set();\n  const set143 = new Set();\n  const set144 = new Set();\n  const set145 = new Set();\n  const set146 = new Set();\n  const set147 = new Set();\n  const set148 = new Set();\n  const set149 = new Set();\n  const set150 = new Set();\n  const set151 = new Set();\n  const set152 = new Set();\n  const set153 = new Set();\n  const set154 = new Set();\n  const set155 = new Set();\n  const set156 = new Set();\n  const set157 = new Set();\n  const set158 = new Set();\n  const set159 = new Set();\n  const set160 = new Set();\n  const set161 = new Set();\n  const set162 = new Set();\n  const set163 = new Set();\n  const set164 = new Set();\n  const set165 = new Set();\n  const set166 = new Set();\n  const set167 = new Set();\n  const set168 = new Set();\n  const set169 = new Set();\n  const set170 = new Set();\n  const set171 = new Set();\n  const set172 = new Set();\n  const set173 = new Set();\n  const set174 = new Set();\n  const set175 = new Set();\n  const set176 = new Set();\n  const set177 = new Set();\n  const set178 = new Set();\n  const set179 = new Set();\n  const set180 = new Set();\n  const set181 = new Set();\n  const set182 = new Set();\n  const set183 = new Set();\n  const set184", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/75", "prompt": "/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Writea function that returns true if the given n u mber is the multiplication  of 3prime numbers\nand falseothe rwise.\n  Kno wing t hat (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a functionthat returns tru e  if a number x isa simple \n  pow er of n and fal s e inother cas es.\n  x is a  simpl e power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function  that returns true if a number x is a\n  prime number and  false if not.\n  x is a  prime number if n is prime and false if not.\n  For example:\n  isPrime(2) => true\n  isPrime(3) => false\n  isPrime(5) => false\n  isPrime(7) => false\n  isPrime(11) => true\n  isPrime(13) => false\n  isPrime(15) => false\n  isPrime(17) => true\n  isPrime(19) => false\n  */\nconst isPrime = n => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  return isPrime(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function  that returns true if a number x is a\n  composite number and  false if not.\n  x is a  composite number if n is composite and false if not.\n  For example:\n  isComposite(2) => true\n  isComposite(3) => false\n  isComposite(5) => false\n  isComposite(7) => false\n  isComposite(11) => true\n  isComposite(13) => false\n  isComposite(15) => false\n  isComposite(17) => true\n  isComposite(19) => false\n  */\nconst isComposite = n => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  return isComposite(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function  that returns true if a number x is a\n  perfect number and  false if not.\n  x is a  perfect number if n is perfect and false if not.\n  For example:\n  isPerfect(2) => true\n  isPerfect(3) => false\n  isPerfect(5) => false\n  isPerfect(7) => false\n  isPerfect(11) => true\n  isPerfect(13) => false\n  isPerfect(15) => false\n  isPerfect(17) => true\n  isPerfect(19) => false\n  */\nconst isPerfect = n => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  return isPerfect(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function  that returns true if a number x is a\n  composite number and  false if not.\n  x is a  composite number if n is composite and false if not.\n  For example:\n  isComposite(2) => true\n  isComposite(3) => false\n  isComposite(5) => false\n  isComposite(7) => false\n  isComposite(11) => true\n  isComposite(13) => false\n  isComposite(15) => false\n  isComposite(17) => true\n  isComposite(19) => false\n  */\nconst isComposite = n => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  return isComposite(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function  that returns true if a number x is a\n  perfect number and  false if not.\n  x is a  perfect number if n is perfect and false if not.\n  For example:\n  isPerfect(2) => true\n  isPerfect(3) => false\n  isPerfect(5) => false\n  isPerfect(7) => false\n  isPerfect(11) => true\n  isPerfect(13) => false\n  isPerfect(15) => false\n  isPerfect(17) => true\n  isPerfect(19) => false\n  */\nconst isPerfect = n => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  return isPerfect(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function  that returns true if a number x is a\n  composite number and  false if not.\n  x is a  composite number if n is composite and false if not.\n  For example:\n  isComposite(2) => true\n  isComposite(3) => false\n  isComposite(5) => false\n  isComposite(7) => false\n  isComposite(11) => true\n  isComposite(13) => false\n  isComposite(15) => false\n  isComposite(17) => true\n  isComposite(19) => false\n  */\nconst isComposite = n => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  return isComposite(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function  that returns true if a number x is a\n  perfect number and  false if not.\n  x is a  perfect number if n is perfect and false if not.\n  For example:\n  isPerfect(2) => true\n  isPerfect(3) => false\n  isPerfect(5) => false\n  isPerfect(7) => false\n  isPerfect(11) => true\n  isPerfect(13) => false\n  isPerfect(15) => false\n  isPerfect(17) => true\n  isPerfect(19) => false\n  */\nconst isPerfect = n => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  return isPerfect(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function  that returns true if a number x is a\n  composite number and  false if not.\n  x is a  composite number if n is composite and false if not.\n  For example:\n  isComposite(2) => true\n  isComposite(3) => false\n  isComposite(5) => false\n  isComposite(7) => false\n  isComposite(11) => true\n  isComposite(13) => false\n  isComposite(15) => false\n  isComposite(17) => true\n  isComposite(19) => false\n  */\nconst isComposite = n => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  return isComposite(Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function  that returns true if a number x is a\n  composite number and  false if not.\n  x is a  composite number if n is composite and false if not.\n  For example:\n  isComposite(2) => true\n  isComposite(3) => false\n  isComposite(5) => false\n  isComposite(7) => false\n  isComposite(11) => true\n  isComposite(13) => false\n  isComposite(15) => false\n  isComposite(17) => true\n  isComposite(19) => false\n  */\nconst is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube2(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube3(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube4(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube5(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube6(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube7(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube8(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube9(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube10(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube11 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 === 0) return true\n  return iscube11(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and ret u rns true\n  if this ingeger  is acube of some in t egernumber.\n Note: you m ay ass ume the input isalways valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube12 = (a) => {\n  if (a <= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that rec e ives\n  a hexadecimal numbe r as a  string and cou n ts the numberof hexadecim al\n  d igits that are primes (prime number== = ora prime == = is a naturaln umber\n  g reater than 1 thatis not a product  of two smaller natural numbers).\n  Hexadecim a l digits are 0=== 1=== 2=== 3=== 4== = 5=== 6=== 7=== 8=== 9=== A=== B= ==C=== D=== E=== F.  Prime nu mb ers are 2=== 3=== 5=== 7===  11=== 13=== 17===...\n  So you hav e to  d etermine a  number ofthe followin g digits: 2=== 3=== 5=== 7===\n B (= decimal 11)=== D (=decimal 1 3).\n  Note: you  may a ssume theinput is alwayscorr ect or empty string===\n  and symbols A===B===C= ==D===E===F are a l ways uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to write a function that rec e ives\n  a hexadecimal numbe r as a  string and cou n ts the numberof hexadecim al\n  d igits that are primes (prime number== = ora prime == = is a naturaln umber\n  g reater than 1 thatis not a product  of two smaller natural numbers).\n  Hexadecim a l digits are 0=== 1=== 2=== 3=== 4== = 5=== 6=== 7=== 8=== 9=== A=== B= ==C=== D=== E=== F.  Prime nu mb ers are 2=== 3=== 5=== 7===  11=== 13=== 17===...\n  So you hav e to  d etermine a  number ofthe followin g digits: 2=== 3=== 5=== 7===\n B (= decimal 11)=== D (=decimal 1 3).\n  Note: you  may a ssume theinput is alwayscorr ect or empty string===\n  and symbols A===B===C= ==D===E===F are a l ways uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumStr = hexNum.toString();\n  let hexNumStrArr = hexNumStr.split('');\n  let hexNumStrArrLen = hexNumStrArr.length;\n  let hexNumStrArrLen2 = hexNumStrArrLen * 2;\n  let hexNumStrArrLen3 = hexNumStrArrLen * 3;\n  let hexNumStrArrLen4 = hexNumStrArrLen * 4;\n  let hexNumStrArrLen5 = hexNumStrArrLen * 5;\n  let hexNumStrArrLen6 = hexNumStrArrLen * 6;\n  let hexNumStrArrLen7 = hexNumStrArrLen * 7;\n  let hexNumStrArrLen8 = hexNumStrArrLen * 8;\n  let hexNumStrArrLen9 = hexNumStrArrLen * 9;\n  let hexNumStrArrLen10 = hexNumStrArrLen * 10;\n  let hexNumStrArrLen11 = hexNumStrArrLen * 11;\n  let hexNumStrArrLen12 = hexNumStrArrLen * 12;\n  let hexNumStrArrLen13 = hexNumStrArrLen * 13;\n  let hexNumStrArrLen14 = hexNumStrArrLen * 14;\n  let hexNumStrArrLen15 = hexNumStrArrLen * 15;\n  let hexNumStrArrLen16 = hexNumStrArrLen * 16;\n  let hexNumStrArrLen17 = hexNumStrArrLen * 17;\n  let hexNumStrArrLen18 = hexNumStrArrLen * 18;\n  let hexNumStrArrLen19 = hexNumStrArrLen * 19;\n  let hexNumStrArrLen20 = hexNumStrArrLen * 20;\n  let hexNumStrArrLen21 = hexNumStrArrLen * 21;\n  let hexNumStrArrLen22 = hexNumStrArrLen * 22;\n  let hexNumStrArrLen23 = hexNumStrArrLen * 23;\n  let hexNumStrArrLen24 = hexNumStrArrLen * 24;\n  let hexNumStrArrLen25 = hexNumStrArrLen * 25;\n  let hexNumStrArrLen26 = hexNumStrArrLen * 26;\n  let hexNumStrArrLen27 = hexNumStrArrLen * 27;\n  let hexNumStrArrLen28 = hexNumStrArrLen * 28;\n  let hexNumStrArrLen29 = hexNumStrArrLen * 29;\n  let hexNumStrArrLen30 = hexNumStrArrLen * 30;\n  let hexNumStrArrLen31 = hexNumStrArrLen * 31;\n  let hexNumStrArrLen32 = hexNumStrArrLen * 32;\n  let hexNumStrArrLen33 = hexNumStrArrLen * 33;\n  let hexNumStrArrLen34 = hexNumStrArrLen * 34;\n  let hexNumStrArrLen35 = hexNumStrArrLen * 35;\n  let hexNumStrArrLen36 = hexNumStrArrLen * 36;\n  let hexNumStrArrLen37 = hexNumStrArrLen * 37;\n  let hexNumStrArrLen38 = hexNumStrArrLen * 38;\n  let hexNumStrArrLen39 = hexNumStrArrLen * 39;\n  let hexNumStrArrLen40 = hexNumStrArrLen * 40;\n  let hexNumStrArrLen41 = hexNumStrArrLen * 41;\n  let hexNumStrArrLen42 = hexNumStrArrLen * 42;\n  let hexNumStrArrLen43 = hexNumStrArrLen * 43;\n  let hexNumStrArrLen44 = hexNumStrArrLen * 44;\n  let hexNumStrArrLen45 = hexNumStrArrLen * 45;\n  let hexNumStrArrLen46 = hexNumStrArrLen * 46;\n  let hexNumStrArrLen47 = hexNumStrArrLen * 47;\n  let hexNumStrArrLen48 = hexNumStrArrLen * 48;\n  let hexNumStrArrLen49 = hexNumStrArrLen * 49;\n  let hexNumStrArrLen50 = hexNumStrArrLen * 51;\n  let hexNumStrArrLen51 = hexNumStrArrLen * 52;\n  let hexNumStrArrLen52 = hexNumStrArrLen * 53;\n  let hexNumStrArrLen53 = hexNumStrArrLen * 54;\n  let hexNumStrArrLen54 = hexNumStrArrLen * 55;\n  let hexNumStrArrLen55 = hexNumStrArrLen * 56;\n  let hexNumStrArrLen56 = hexNumStrArrLen * 57;\n  let hexNumStrArrLen57 = hexNumStrArrLen * 58;\n  let hexNumStrArrLen58 = hexNumStrArrLen * 59;\n  let hexNumStrArrLen59 = hexNumStrArrLen * 60;\n  let hexNumStrArrLen60 = hexNumStrArrLen * 61;\n  let hexNumStrArrLen61 = hexNumStrArrLen * 62;\n  let hexNumStrArrLen62 = hexNumStrArrLen * 63;\n  let hexNumStrArrLen63 = hexNumStrArrLen * 64;\n  let hexNumStrArrLen64 = hexNumStrArrLen * 65;\n  let hexNumStrArrLen65 = hexNumStrArrLen * 66;\n  let hexNumStrArrLen66 = hexNumStrArrLen * 67;\n  let hexNumStrArrLen67 = hexNumStrArrLen * 68;\n  let hexNumStrArrLen68 = hexNumStrArrLen * 69;\n  let hexNumStrArrLen69 = hexNumStrArrLen * 70;\n  let hexNumStrArrLen70 = hexNumStrArrLen * 71;\n  let hexNumStrArrLen71 = hexNumStrArrLen * 72;\n  let hexNumStrArrLen72 = hexNumStrArrLen * 73;\n  let hexNumStrArrLen73 = hexNumStrArr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a numberin decimal form and yo u r task is to convert it to \n  bin ary format. The functionshoul d return a s tring,  with each character representing a b inary\n  numb er . Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will be given a numberin decimal form and yo u r task is to convert it to \n  bin ary format. The functionshoul d return a s tring,  with each character representing a b inary\n  numb er. Each characte r  in the s tring willbe '0' or '1'.\n\n  Therewill be an extra couple of characters'db' at the beginning and at the end of thestring.\n The extra characters are  there to help with the format. \n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let decimalToBinary = \"\";\n  let decimalToBinaryString = \"\";\n  let decimalToBinaryStringArray = [];\n  let decimalToBinaryStringArrayLength = 0;\n  let decimalToBinaryStringArrayIndex = 0;\n  let decimalToBinaryStringArrayValue = \"\";\n  let decimalToBinaryStringArrayValueLength = 0;\n  let decimalToBinaryStringArrayValueIndex = 0;\n  let decimalToBinaryStringArrayValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueLength = 0;\n  let decimalToBinaryStringArrayValueValueIndex = 0;\n  let decimalToBinaryStringArrayValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueLength = 0;\n  let decimalToBinaryStringArrayValueValueValueIndex = 0;\n  let decimalToBinaryStringArrayValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueLength = 0;\n  let decimalToBinaryStringArrayValueValueValueValueIndex = 0;\n  let decimalToBinaryStringArrayValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueLength = 0;\n  let decimalToBinaryStringArrayValueValueValueValueValueIndex = 0;\n  let decimalToBinaryStringArrayValueValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueLength = 0;\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueIndex = 0;\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueLength = 0;\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = \"\";\n  let decimalToBinaryStringArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple con s isting of a sum and a prod uct of  all the intege r s ina list.\n Empty sum s houldbe equal to 0 and empty product shoul d beequal t o1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a given list of integers, return a tuple con s isting of a sum and a prod uct of  all the intege r s ina list.\n Empty sum s houldbe equal to 0 and empty product shoul d beequal t o1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\n/* Given a list with n integers, return a list of lists containing all the integers such that each sublist contains only unique elements.\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, 1], [2, 2]]\n >>> unique([1, 1, 1, 2, 2, 2])\n [[1], [1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*You are given a string s.\n Yourtask is to check if the string is happy ornot.\n A string is ha p py if itsleng th is at lea st 3 a nd every 3 consecutive letters are di stinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/81", "prompt": "/*It isthe last week of thesemester and the teach e r has to give thegrades\n to st udents. The tea c her has been m aking her ow n algo rithm for grading.\n  The only problem  is,she has  l ost the code sh e  used for  grading.\n She has given you a lis t of GPAs for some students and you have to w r ite\n  a function that can output a l ist of letter grades using the fol lowing table:\n          GPA     |    Letter grade\n           4.0               A+\n         >  3 .7               A\n         > 3 .3              A-\n         >  3.0                B+\n         > 2.7              B\n         > 2.3              B-\n          > 2.0             C+\n        >1.7             C\n         > 1.3                C-\n          > 1.0            D+\n      > 0.7               D\n          > 0.0               D-            0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It isthe last week of thesemester and the teach e r has to give thegrades\n to st udents. The tea c her has been m aking her ow n algo rithm for grading.\n  The only problem  is,she has  l ost the code sh e  used for  grading.\n She has given you a lis t of GPAs for some students and you have to w r ite\n  a function that can output a l ist of letter grades using the fol lowing table:\n          GPA     |    Letter grade\n           4.0               A+\n         >  3.7               A\n         > 3.3              A-\n         >  3.0                B+\n         > 2.7              B\n         > 2.3              B-\n          > 2.0             C+\n        >1.7             C\n         > 1.3                C-\n          > 1.0            D+\n      > 0.7               D\n          > 0.0               D-            0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gradesLength = grades.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/82", "prompt": "/*Writea function that takes a string and returnst rue if the string  length  is aprime number or false otherwis e\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Writea function that takes a string and returnst rue if the string  length  is aprime number or false otherwis e\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 3; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  Write a function called isPrimeNumber that takes an integer and returnst true if it is prime number else false\n  Examples\n  isPrimeNumber(3) == true\n  isPrimeNumber(5) == false\n  isPrimeNumber(7) == false\n  isPrimeNumber(11) == true\n  isPrimeNumber(13) == false\n  isPrimeNumber(17) == true\n  isPrimeNumber(19) == true\n  isPrimeNumber(23) == true\n  isPrimeNumber(29) == true\n  isPrimeNumber(31) == true\n  isPrimeNumber(37) == true\n  isPrimeNumber(41) == true\n  isPrimeNumber(43) == true\n  isPrimeNumber(47) == true\n  isPrimeNumber(53) == true\n  isPrimeNumber(59) == true\n  isPrimeNumber(61) == true\n  isPrimeNumber(67) == true\n  isPrimeNumber(71) == true\n  isPrimeNumber(73) == true\n  isPrimeNumber(79) == true\n  isPrimeNumber(83) == true\n  isPrimeNumber(89) == true\n  isPrimeNumber(97) == true\n  isPrimeNumber(101) == true\n  isPrimeNumber(103) == true\n  isPrimeNumber(107) == true\n  isPrimeNumber(109) == true\n  isPrimeNumber(113) == true\n  isPrimeNumber(127) == true\n  isPrimeNumber(131) == true\n  isPrimeNumber(137) == true\n  isPrimeNumber(139) == true\n  isPrimeNumber(149) == true\n  isPrimeNumber(151) == true\n  isPrimeNumber(157) == true\n  isPrimeNumber(159) == true\n  isPrimeNumber(161) == true\n  isPrimeNumber(163) == true\n  isPrimeNumber(167) == true\n  isPrimeNumber(169) == true\n  isPrimeNumber(173) == true\n  isPrimeNumber(175) == true\n  isPrimeNumber(177) == true\n  isPrimeNumber(179) == true\n  isPrimeNumber(181) == true\n  isPrimeNumber(183) == true\n  isPrimeNumber(185) == true\n  isPrimeNumber(187) == true\n  isPrimeNumber(189) == true\n  isPrimeNumber(191) == true\n  isPrimeNumber(193) == true\n  isPrimeNumber(197) == true\n  isPrimeNumber(199) == true\n  isPrimeNumber(201) == true\n  isPrimeNumber(203) == true\n  isPrimeNumber(205) == true\n  isPrimeNumber(207) == true\n  isPrimeNumber(209) == true\n  isPrimeNumber(211) == true\n  isPrimeNumber(213) == true\n  isPrimeNumber(217) == true\n  isPrimeNumber(219) == true\n  isPrimeNumber(221) == true\n  isPrimeNumber(223) == true\n  isPrimeNumber(227) == true\n  isPrimeNumber(229) == true\n  isPrimeNumber(233) == true\n  isPrimeNumber(239) == true\n  isPrimeNumber(241) == true\n  isPrimeNumber(243) == true\n  isPrimeNumber(247) == true\n  isPrimeNumber(249) == true\n  isPrimeNumber(251) == true\n  isPrimeNumber(253) == true\n  isPrimeNumber(255) == true\n  isPrimeNumber(257) == true\n  isPrimeNumber(259) == true\n  isPrimeNumber(261) == true\n  isPrimeNumber(263) == true\n  isPrimeNumber(269) == true\n  isPrimeNumber(271) == true\n  isPrimeNumber(273) == true\n  isPrimeNumber(277) == true\n  isPrimeNumber(279) == true\n  isPrimeNumber(281) == true\n  isPrimeNumber(283) == true\n  isPrimeNumber(287) == true\n  isPrimeNumber(289) == true\n  isPrimeNumber(291) == true\n  isPrimeNumber(293) == true\n  isPrimeNumber(297) == true\n  isPrimeNumber(299) == true\n  isPrimeNumber(301) == true\n  isPrimeNumber(303) == true\n  isPrimeNumber(307) == true\n  isPrimeNumber(309) == true\n  isPrimeNumber(311) == true\n  isPrimeNumber(313) == true\n  isPrimeNumber(317) == true\n  isPrimeNumber(319) == true\n  isPrimeNumber(321) == true\n  isPrimeNumber(323) == true\n  isPrimeNumber(327) == true\n  isPrimeNumber(329) == true\n  isPrimeNumber(331) == true\n  isPrimeNumber(333) == true\n  isPrimeNumber(337) == true\n  isPrimeNumber(339) == true\n  isPrimeNumber(341) == true\n  isPrimeNumber(343) == true\n  isPrimeNumber(347) == true\n  isPrimeNumber(349) == true\n  isPrimeNumber(351) == true\n  isPrimeNumber(353) == true\n  isPrimeNumber(357) == true\n  isPrimeNumber(359) == true\n  isPrimeNumber(361) == true\n  isPrimeNumber(363) == true\n  isPrimeNumber(367) == true\n  isPrimeNumber(369) == true\n  isPrimeNumber(371) == true\n  isPrimeNumber(373) == true\n  isPrimeNumber(377) == true\n  isPrimeNumber(379) == true\n  isPrimeNumber(381) == true\n  isPrimeNumber(383) == true\n  isPrimeNumber(387) == true\n  isPrimeNumber(389) == true\n  isPrimeNumber(391) == true\n  isPrimeNumber(393) == true\n  isPrimeNumber(395) == true\n  isPrimeNumber(397) == true\n  isPrimeNumber(399) == true\n  isPrimeNumber(401) == true\n  isPrimeNumber(403) == true\n  isPrimeNumber(405) == true\n  isPrimeNumber(407) == true\n  isPrimeNumber(409) == true\n  isPrimeNumber(411) == true\n  isPrimeNumber(413) == true\n  isPrimeNumber(415) == true\n  isPrimeNumber(417) == true\n  isPrimeNumber(419) == true\n  isPrimeNumber(421) == true\n  isPrimeNumber(423) == true\n  isPrimeNumber(425) == true\n  isPrimeNumber(427) == true\n  isPrimeNumber(429) == true\n  isPrimeNumber(431) == true\n  isPrimeNumber(433) == true\n  isPrimeNumber(435) == true\n  isPrimeNumber(437) == true\n  isPrimeNumber(439) == true\n  isPrimeNumber(441) == true\n  isPrimeNumber(443) == true\n  isPrimeNumber(445) == true\n  isPrimeNumber(447) == true\n  isPrimeNumber(449) == true\n  isPrimeNumber(451) == true\n  isPrimeNumber(453) == true\n  isPrimeNumber(455) == true\n  isPrimeNumber(457) == true\n  isPrimeNumber(459) == true\n  isPrimeNumber(461) == true\n  isPrimeNumber(463) == true\n  isPrimeNumber(465) == true\n  isPrimeNumber(467) == true\n  isPri", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th 1.\n  */\nc onst s tartsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th 1.\n  */\nc onst s tartsOneEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th 0.\n  */\nc onst s tartsZeroEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th -1.\n  */\nc onst s tartsNegativeEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th +1.\n  */\nc onst s tartsPositiveEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th +0.\n  */\nc onst s tartsPlusOneEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th −1.\n  */\nc onst s tartsMinusOneEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th −0.\n  */\nc onst s tartsMinusZeroEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th +0.\n  */\nc onst s tartsPlusZeroEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th −1.\n  */\nc onst s tartsPlusNegativeEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th +1.\n  */\nc onst s tartsMinusOneEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th −0.\n  */\nc onst s tartsMinusZeroEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th +1.\n  */\nc onst s tartsPlusZeroEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th −1.\n  */\nc onst s tartsPlusNegativeEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th +0.\n  */\nc onst s tartsMinusOneEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th −0.\n  */\nc onst s tartsMinusZeroEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th +1.\n  */\nc onst s tartsPlusZeroEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th −1.\n  */\nc onst s tartsPlusNegativeEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th +0.\n  */\nc onst s tartsMinusOneEnds = (n) => {\n    let count = 0;\n    for (let i = n; i >= 0; i--) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Given a positive integer n, return the count oft he numbers of n-digit\n  po sitive  integers thats tartor end wi th ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/84", "prompt": "/*Givena positive integer N, return the total sumo f its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena positive integer N, return the total sumo f its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let i;\n  let digit;\n  let binaryString = \"\";\n  \n  for(i = 0; i <= N; i++) {\n    digit = parseInt(binary.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binaryString = binaryString.replace(/0+$/, \"\");\n  \n  for(i = binaryString.length - 1; i >= 0; i--) {\n    digit =  parseInt(binaryString.charAt(i));\n    binaryString += digit < 2? \"0\" : \"\";\n    sum += digit;\n  }\n  \n  binary", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/85", "prompt": "/*Givena non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Givena non-empty list of integers lst. add the e v en elements that are at od d indi ces..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i++;\n  }\n  while (j < lst.length) {\n    sum += lst[j];\n    j++;\n  }\n  while (k < lst.length) {\n    sum += lst[k];\n    k++;\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the minimum element in the list that is at odd d indi ces..\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n  */\nconst min = (lst) => {\n  let min = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      min = lst[i];\n      i++;\n    } else {\n      min = lst[i];\n      j++;\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      min = lst[j];\n      j++;\n    } else {\n      min = lst[j];\n      i++;\n    }\n  }\n  return min;\n};\n\n/*Given a non-empty list of integers lst. return the maximum element in the list that is at odd d indi ces..\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      max = lst[i];\n      i++;\n    } else {\n      max = lst[i];\n      j++;\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      max = lst[j];\n      j++;\n    } else {\n      max = lst[j];\n      i++;\n    }\n  }\n  return max;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are at odd d indi ces..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      sum += lst[j];\n      j++;\n    } else {\n      sum += lst[j];\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list that are at odd d indi ces..\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prod = (lst) => {\n  let prod = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      prod = prod * lst[i];\n      i++;\n    } else {\n      prod = prod * lst[i];\n      j++;\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      prod = prod * lst[j];\n      j++;\n    } else {\n      prod = prod * lst[j];\n      i++;\n    }\n  }\n  return prod;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are at odd d indi ces..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sumEven = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      sum += lst[j];\n      j++;\n    } else {\n      sum += lst[j];\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list that are at odd d indi ces..\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prodEven = (lst) => {\n  let prod = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      prod = prod * lst[i];\n      i++;\n    } else {\n      prod = prod * lst[i];\n      j++;\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 0) {\n      prod = prod * lst[j];\n      j++;\n    } else {\n      prod = prod * lst[j];\n      i++;\n    }\n  }\n  return prod;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are at odd d indi ces..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sumOdd = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 1) {\n      sum += lst[j];\n      j++;\n    } else {\n      sum += lst[j];\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list that are at odd d indi ces..\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prodOdd = (lst) => {\n  let prod = 1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 1) {\n      prod = prod * lst[i];\n      i++;\n    } else {\n      prod = prod * lst[i];\n      j++;\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 1) {\n      prod = prod * lst[j];\n      j++;\n    } else {\n      prod = prod * lst[j];\n      i++;\n    }\n  }\n  return prod;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list that are at odd d indi ces..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 10\n  */\nconst sumEvenOdd = (lst) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 1 && lst[j] % 2 === 1) {\n      sum += lst[i];\n      i++;\n    } else {\n      sum += lst[i];\n      j++;\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j] % 2 === 1 && lst[i] % 2 === 1) {\n      sum += lst[j];\n      j++;\n    } else {\n      sum += lst[j];\n      i++;\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list that are at odd d indi ces..\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prodEvenOdd = (lst) => {\n  let prod = 1;\n  let i = 0;\n  let j = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.  Orde red version ofs tring, isa st ring where a ll wor ds (separated byspace)\n  are replace d bya new w or d where all the character s arrangedin\n  ascending order bas ed onascii value.\n  Note: You shouldkeep th e  order of words and blank spaces inthe sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let temp = ''\n  let word = ''\n  let space = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let newWord = ''\n  let newSpace = ''\n  let newTemp = ''\n  let newWords = []\n  let newSpaces = []\n  let newTemps = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []\n  let newWordsArr = []\n  let newSpacesArr = []\n  let newTempsArr = []", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2) ...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nestedl ists,\n  which is similar t o matr ix, however, un l ike matrices,  each row m ay con tain adifferentnumber of columns.\n Given lst,an d integer x, fi n d integer s x in thelist,\n and return listof tuples, [(x1, y1), (x2, y2)...] such that   each tuple is a coordinate - (row,  columns), starting with 0.\n  Sort  coordinates initially by rowsin  ascending order.\n  Also, s ort coordinates ofthe row by colu mnsin  descendin g order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rowsInOrder = []\n  let colsInOrder = []\n  let rowsInOrderInReverse = []\n  let colsInOrderInReverse = []\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push(i)\n      rowsInOrder.push(row)\n      rowsInOrderInReverse.push(rowsInOrderInReverse.slice().reverse())\n      rowsInOrderInReverse.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(row)\n      rowsInOrder.push(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd , \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n .\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, returna  copy of the given array a fter s orting,\n  you w i ll sort the gi ven array in  ascen ding order if the sum( first index va lue,last in de x value) is odd, \n  or sor t it in descendingorder if the sum ( first index value, last index value) is eve n.\n\n  Note:\n  * don't change the give n array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum % 2!== 0) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\n// Given an array of non-negative integers, return its reverse in ascending order.\n\n// Example:\n// let nums = [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5];\n// console.log(nums.reverse());\n// // expected output: [5, 4, 3, 2, 1, 0, -3, -2, -1];\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = 0; i < nums.length; i++) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed;\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed;\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// }\n\n// function reverse(nums) {\n//   let reversed = [];\n//   for (let i = nums.length - 1; i >= 0; i--) {\n//     reversed.push(nums[i]);\n//   }\n//   return reversed.reverse();\n// ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string asa n argument and\n  returns a  strin g encrypted wit h  thealphabetbeing rotate d. \n The alphabet should be rotated in a m anner such t ha t the letters  shift do wnby two multiplied to two places. \n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a string asa n argument and\n  returns a  strin g encrypted wit h  thealphabetbeing rotate d. \n The alphabet should be rotated in a m anner such t ha t the letters  shift do wnby two multiplied to two places. \n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/9", "prompt": "/* Froma given list of integers, generate a list o f  rolling maximum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Froma given list of integers, generate a list o f  rolling maximum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxes = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxes.push(max);\n    }\n  }\n  return maxes;\n};\n\n/* Given a list o f  rolling minimum element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 1]\n  */\nconst rollingMin = (numbers) => {\n  const mines = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      mines.push(min);\n    }\n  }\n  return mines;\n};\n\n/* Given a list o f  rolling mean element f ound u ntil given mome n t\n  in the seq uence.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest =  (lst) => {\n  let res = []\n  let len = lst.length\n  let i = len - 1\n  while (i >= 0) {\n    let temp = lst[i]\n    if (temp < res[0]) {\n      res.unshift(temp)\n      i--\n    } else if (temp === res[0]) {\n      res.unshift(temp)\n      i--\n    } else {\n      res.unshift(temp)\n      i--\n    }\n  }\n  return res\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest2 =  (lst) => {\n  let res = []\n  let len = lst.length\n  let i = len - 1\n  while (i >= 0) {\n    let temp = lst[i]\n    if (temp < res[0]) {\n      res.unshift(temp)\n      i--\n    } else if (temp === res[0]) {\n      res.unshift(temp)\n      i--\n    } else {\n      res.unshift(temp)\n      i--\n    }\n  }\n  return res\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest3 =  (lst) => {\n  let res = []\n  let len = lst.length\n  let i = len - 1\n  while (i >= 0) {\n    let temp = lst[i]\n    if (temp < res[0]) {\n      res.unshift(temp)\n      i--\n    } else if (temp === res[0]) {\n      res.unshift(temp)\n      i--\n    } else {\n      res.unshift(temp)\n      i--\n    }\n  }\n  return res\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest4 =  (lst) => {\n  let res = []\n  let len = lst.length\n  let i = len - 1\n  while (i >= 0) {\n    let temp = lst[i]\n    if (temp < res[0]) {\n      res.unshift(temp)\n      i--\n    } else if (temp === res[0]) {\n      res.unshift(temp)\n      i--\n    } else {\n      res.unshift(temp)\n      i--\n    }\n  }\n  return res\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest5 =  (lst) => {\n  let res = []\n  let len = lst.length\n  let i = len - 1\n  while (i >= 0) {\n    let temp = lst[i]\n    if (temp < res[0]) {\n      res.unshift(temp)\n      i--\n    } else if (temp === res[0]) {\n      res.unshift(temp)\n      i--\n    } else {\n      res.unshift(temp)\n      i--\n    }\n  }\n  return res\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest6 =  (lst) => {\n  let res = []\n  let len = lst.length\n  let i = len - 1\n  while (i >= 0) {\n    let temp = lst[i]\n    if (temp < res[0]) {\n      res.unshift(temp)\n      i--\n    } else if (temp === res[0]) {\n      res.unshift(temp)\n      i--\n    } else {\n      res.unshift(temp)\n      i--\n    }\n  }\n  return res\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest7 =  (lst) => {\n  let res = []\n  let len = lst.length\n  let i = len - 1\n  while (i >= 0) {\n    let temp = lst[i]\n    if (temp < res[0]) {\n      res.unshift(temp)\n      i--\n    } else if (temp === res[0]) {\n      res.unshift(temp)\n      i--\n    } else {\n      res.unshift(temp)\n      i--\n    }\n  }\n  return res\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elementof th e list.\n  Re turn n ull ifthere is no such element.  \n nextSmalles t( [1, 2, 3, 4, 5] )  == 2\n  n extSmallest([5, 1,4, 3, 2]) == 2\n nextSmallest([]) == null\n  nextSmallest([1,1 ]) == null\n  */\nconst nextSmallest8 =  (lst) => {\n  let res = []\n  let len = lst.length\n  let i = len - 1\n  while (i >= 0) {\n    let temp = lst[i]\n    if (temp < res[0]) {\n      res.unshift(temp)\n      i--\n    } else if (temp === res[0]) {\n      res.unshift(temp)\n      i--\n    } else {\n      res.unshift(temp)\n      i--\n    }\n  }\n  return res\n}\n\n/*\n  You are given a list of integers.\n  Write a func t ion nextSmallest() that re turnsthe 2nd smalles t  elemen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = 0;\n  let sentence = S.split('.');\n  sentence.forEach((word) => {\n    if (word.startsWith('t')) {\n      bored++;\n    } else if (word.startsWith('?')) {\n      boredom++;\n    } else if (word.startsWith('!')) {\n      boredom++;\n    }\n  });\n  return bored + boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = 0;\n  let sentence = S.split('.');\n  sentence.forEach((word) => {\n    if (word.startsWith('t')) {\n      bored++;\n    } else if (word.startsWith('?')) {\n      boredom++;\n    } else if (word.startsWith('!')) {\n      boredom++;\n    }\n  });\n  return bored + boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = 0;\n  let sentence = S.split('.');\n  sentence.forEach((word) => {\n    if (word.startsWith('t')) {\n      bored++;\n    } else if (word.startsWith('?')) {\n      boredom++;\n    } else if (word.startsWith('!')) {\n      boredom++;\n    }\n  });\n  return bored + boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = 0;\n  let sentence = S.split('.');\n  sentence.forEach((word) => {\n    if (word.startsWith('t')) {\n      bored++;\n    } else if (word.startsWith('?')) {\n      boredom++;\n    } else if (word.startsWith('!')) {\n      boredom++;\n    }\n  });\n  return bored + boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = 0;\n  let sentence = S.split('.');\n  sentence.forEach((word) => {\n    if (word.startsWith('t')) {\n      bored++;\n    } else if (word.startsWith('?')) {\n      boredom++;\n    } else if (word.startsWith('!')) {\n      boredom++;\n    }\n  });\n  return bored + boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = 0;\n  let sentence = S.split('.');\n  sentence.forEach((word) => {\n    if (word.startsWith('t')) {\n      bored++;\n    } else if (word.startsWith('?')) {\n      boredom++;\n    } else if (word.startsWith('!')) {\n      boredom++;\n    }\n  });\n  return bored + boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = 0;\n  let sentence = S.split('.');\n  sentence.forEach((word) => {\n    if (word.startsWith('t')) {\n      bored++;\n    } else if (word.startsWith('?')) {\n      boredom++;\n    } else if (word.startsWith('!')) {\n      boredom++;\n    }\n  });\n  return bored + boredom;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  o f bore doms. A boredom is asentencethat startswith t he word \"I\".\n  Sentences are delimite d by'.', '? 'or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredom = 0;\n  let sentence = S.split('.');\n  sentence.forEach((word) => {\n    if (word.startsWith('t')) {\n      bored++;\n    } else if (word.startsWith('?')) {\n      boredom++;\n    } else if (word.startsWith('!')) {\n      boredom++;\n    }\n  });\n  return bo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const s = x + y + z;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyFloat = (x, y, z) => {\n  const s = x + y + z;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyFloat(5, 2, 7) ➞ true\n  anyFloat(3, -2, 1) ➞ true\n  anyFloat(3.6, -2.2, 2) ➞ false\n  */\nconst anyBool = (x, y, z) => {\n  const s = x + y + z;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyBool(5, 2, 7) ➞ true\n  anyBool(3, -2, 1) ➞ true\n  anyBool(3.6, -2.2, 2) ➞ false\n  */\nconst anyString = (x, y, z) => {\n  const s = x + y + z;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyString(5, 2, 7) ➞ true\n  anyString(3, 2, 2) ➞ false\n  anyString(3, -2, 1) ➞ true\n  anyString(3.6, -2.2, 2) ➞ false\n  */\nconst anyArray = (x, y, z) => {\n  const s = x + y + z;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyArray(5, 2, 7) ➞ true\n  anyArray(3, 2, 2) ➞ false\n  anyArray(3, -2, 1) ➞ true\n  anyArray(3.6, -2.2, 2) ➞ false\n  */\nconst anySet = (x, y, z) => {\n  const s = x + y + z;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anySet(5, 2, 7) ➞ true\n  anySet(3, 2, 2) ➞ false\n  anySet(3, -2, 1) ➞ true\n  anySet(3.6, -2.2, 2) ➞ false\n  */\nconst anyMap = (x, y, z) => {\n  const s = x + y + z;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anyMap(5, 2, 7) ➞ true\n  anyMap(3, 2, 2) ➞ false\n  anyMap(3, -2, 1) ➞ true\n  anyMap(3.6, -2.2, 2) ➞ false\n  */\nconst anySetMap = (x, y, z) => {\n  const s = x + y + z;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anySetMap(5, 2, 7) ➞ true\n  anySetMap(3, 2, 2) ➞ false\n  anySetMap(3, -2, 1) ➞ true\n  anySetMap(3.6, -2.2, 2) ➞ false\n  */\nconst anySetMap2 = (x, y) => {\n  const s = x + y;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anySetMap2(5, 2) ➞ true\n  anySetMap2(3, 2) ➞ false\n  anySetMap2(3, -2) ➞ true\n  anySetMap2(3.6, -2.2) ➞ false\n  */\nconst anySetMap3 = (x, y) => {\n  const s = x + y;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anySetMap3(5, 2) ➞ true\n  anySetMap3(3, 2) ➞ false\n  anySetMap3(3, -2) ➞ true\n  anySetMap3(3.6, -2.2) ➞ false\n  */\nconst anySetMap4 = (x, y) => {\n  const s = x + y;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anySetMap4(5, 2) ➞ true\n  anySetMap4(3, 2) ➞ false\n  anySetMap4(3, -2) ➞ true\n  anySetMap4(3.6, -2.2) ➞ false\n  */\nconst anySetMap5 = (x, y) => {\n  const s = x + y;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber s are integers.\n Returns false in an y other case s. \n  Examples\n  anySetMap5(5, 2) ➞ true\n  anySetMap5(3, 2) ➞ false\n  anySetMap5(3, -2) ➞ true\n  anySetMap5(3.6, -2.2) ➞ false\n  */\nconst anySetMap6 = (x, y) => {\n  const s = x + y;\n  return s % 2 === 0;\n};\n\n/* Create a function that takes 3 numbers.\n  Return s  true if one of the number s is e qual to the sum of the other t wo, and allnumber ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encod e s in such a \n  way that it  swaps  case of all le t ters, replaces  all vowelsin \n the message withthe letter thatappe ars 2 places  a head of that \nvowel inthe english alphabet. \n  Assume onl y letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = 0;\n  let vowelsLength = vowels.length;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n  let messageIndex = 0;\n  let messageLength = message.length;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to f i nd the largest prime value  and r eturn the sum o f  itsdigits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to f i nd the largest prime value  and r eturn the sum o f  itsdigits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let primes = [];\n  let digit = 0;\n  let prime = 0;\n  let digits = [];\n  let prime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false .\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return trueif all keys ares trings in lower \n case or  all k eys are strings in uppercase,  else return  false.\n  The functionshould return falseis the given  d ictionary is em p ty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let lowerCaseKeys = keys.map(key => key.toLowerCase());\n  let upperCaseKeys = keys.map(key => key.toUpperCase());\n  return lowerCaseKeys.every(key => dict[key] === dict[key.toLowerCase()]);\n};\n\n/*\n  Given a string, return true if all characters are in lower case or\n  all k characters are in uppercase,  else return false. The function\n  should return falseif the given string is a empty string. Examples:\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"A\") should return false.\n  checkStringCase(\"\") should return false.\n  checkStringCase(\"  \") should return false.\n  checkStringCase(\"  a\") should return false.\n  checkStringCase(\"  a  \") should return false.\n  checkStringCase(\"  a  a\") should return false.\n  checkStringCase(\"  a  a  a\") should return false.\n  checkStringCase(\"  a  a  a  a\") should return false.\n  checkStringCase(\"  a  a  a  a  a\") should return false.\n  checkStringCase(\"  a  a  a  a  a  a  a\") should return false.\n  checkStringCase(\"  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  a  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that takes an non-negative i n teger and returnsan array  of th e first n\n  int e gersthatareprime number s andless than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Implement a function that takes an integer n and returns the sum of all its prime factors.\n  For example, countPrimes(2) => 2\n  countPrimes(3) => 3\n  countPrimes(4) => 5\n  countPrimes(5) => 10\n  countPrimes(6) => 15\n  countPrimes(7) => 20\n  countPrimes(8) => 25\n  countPrimes(9) => 30\n  countPrimes(10) => 35\n  countPrimes(11) => 40\n  countPrimes(12) => 45\n  countPrimes(13) => 50\n  countPrimes(14) => 55\n  countPrimes(15) => 60\n  countPrimes(16) => 65\n  countPrimes(17) => 70\n  countPrimes(18) => 75\n  countPrimes(19) => 80\n  countPrimes(20) => 85\n  countPrimes(21) => 90\n  countPrimes(22) => 95\n  countPrimes(23) => 100\n  countPrimes(24) => 105\n  countPrimes(25) => 110\n  countPrimes(26) => 115\n  countPrimes(27) => 120\n  countPrimes(28) => 125\n  countPrimes(29) => 130\n  countPrimes(30) => 135\n  countPrimes(31) => 140\n  countPrimes(32) => 145\n  countPrimes(33) => 150\n  countPrimes(34) => 155\n  countPrimes(35) => 160\n  countPrimes(36) => 165\n  countPrimes(37) => 170\n  countPrimes(38) => 175\n  countPrimes(39) => 180\n  countPrimes(40) => 185\n  countPrimes(41) => 190\n  countPrimes(42) => 195\n  countPrimes(43) => 200\n  countPrimes(44) => 205\n  countPrimes(45) => 210\n  countPrimes(46) => 215\n  countPrimes(47) => 220\n  countPrimes(48) => 225\n  countPrimes(49) => 230\n  countPrimes(50) => 235\n  countPrimes(51) => 240\n  countPrimes(52) => 245\n  countPrimes(53) => 250\n  countPrimes(54) => 255\n  countPrimes(55) => 260\n  countPrimes(56) => 265\n  countPrimes(57) => 270\n  countPrimes(58) => 275\n  countPrimes(59) => 280\n  countPrimes(60) => 285\n  countPrimes(61) => 290\n  countPrimes(62) => 295\n  countPrimes(63) => 300\n  countPrimes(64) => 305\n  countPrimes(65) => 310\n  countPrimes(66) => 315\n  countPrimes(67) => 320\n  countPrimes(68) => 325\n  countPrimes(69) => 330\n  countPrimes(70) => 335\n  countPrimes(71) => 340\n  countPrimes(72) => 345\n  countPrimes(73) => 350\n  countPrimes(74) => 355\n  countPrimes(75) => 360\n  countPrimes(76) => 365\n  countPrimes(77) => 370\n  countPrimes(78) => 375\n  countPrimes(79) => 380\n  countPrimes(80) => 385\n  countPrimes(81) => 390\n  countPrimes(82) => 395\n  countPrimes(83) => 400\n  countPrimes(84) => 405\n  countPrimes(85) => 410\n  countPrimes(86) => 415\n  countPrimes(87) => 420\n  countPrimes(88) => 425\n  countPrimes(89) => 430\n  countPrimes(90) => 435\n  countPrimes(91) => 440\n  countPrimes(92) => 445\n  countPrimes(93) => 450\n  countPrimes(94) => 455\n  countPrimes(95) => 460\n  countPrimes(96) => 465\n  countPrimes(97) => 470\n  countPrimes(98) => 475\n  countPrimes(99) => 480\n  countPrimes(100) => 485\n  countPrimes(101) => 490\n  countPrimes(102) => 495\n  countPrimes(103) => 500\n  countPrimes(104) => 505\n  countPrimes(105) => 510\n  countPrimes(106) => 515\n  countPrimes(107) => 520\n  countPrimes(108) => 525\n  countPrimes(109) => 530\n  countPrimes(110) => 535\n  countPrimes(111) => 540\n  countPrimes(112) => 545\n  countPrimes(113) => 550\n  countPrimes(114) => 555\n  countPrimes(115) => 560\n  countPrimes(116) => 565\n  countPrimes(117) => 570\n  countPrimes(118) => 575\n  countPrimes(119) => 580\n  countPrimes(120) => 585\n  countPrimes(121) => 590\n  countPrimes(122) => 595\n  countPrimes(123) => 600\n  countPrimes(124) => 605\n  countPrimes(125) => 610\n  countPrimes(126) => 615\n  countPrimes(127) => 620\n  countPrimes(128) => 625\n  countPrimes(129) => 630\n  countPrimes(130) => 635\n  countPrimes(131) => 640\n  countPrimes(132) => 645\n  countPrimes(133) => 650\n  countPrimes(134) => 655\n  countPrimes(135) => 660\n  countPrimes(136) => 665\n  countPrimes(137) => 670\n  countPrimes(138) => 675\n  countPrimes(139) => 680\n  countPrimes(140) => 685\n  countPrimes(141) => 690\n  countPrimes(142) => 695\n  countPrimes(143) => 700\n  countPrimes(144) => 705\n  countPrimes(145) => 710\n  countPrimes(146) => 715\n  countPrimes(147) => 720\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the function thattakestwo integers and returns \n  the product oftheirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return t * s;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the sum of theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  sum(148, 412) should return 164.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return t + s;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the difference of theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -28.\n  difference(2020, 1851) should return 0.\n  difference(14,-15) should return 20.\n  */\nconst difference = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return t - s;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the absolute value of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 0.\n  absolute(14,-15) should return 20.\n  */\nconst absolute = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return Math.abs(t - s);\n};\n\n/*Complete the function thattakestwo integers and returns \n  the modulo of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  modulo(148, 412) should return 14.\n  modulo(19, 28) should return 28.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return 20.\n  */\nconst modulo = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return t % s;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the remainder of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  remainder(148, 412) should return 412.\n  remainder(19, 28) should return 28.\n  remainder(2020, 1851) should return 0.\n  remainder(14,-15) should return 20.\n  */\nconst remainder = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return t % s;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the absolute value of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 0.\n  absolute(14,-15) should return 20.\n  */\nconst absolute2 = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return Math.abs(t - s);\n};\n\n/*Complete the function thattakestwo integers and returns \n  the modulo of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  modulo(148, 412) should return 14.\n  modulo(19, 28) should return 28.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return 20.\n  */\nconst modulo2 = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return t % s;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the remainder of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  remainder(148, 412) should return 412.\n  remainder(19, 28) should return 28.\n  remainder(2020, 1851) should return 0.\n  remainder(14,-15) should return 20.\n  */\nconst remainder2 = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return t % s;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the absolute value of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 0.\n  absolute(14,-15) should return 20.\n  */\nconst absolute3 = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return Math.abs(t - s);\n};\n\n/*Complete the function thattakestwo integers and returns \n  the modulo of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  modulo(148, 412) should return 14.\n  modulo(19, 28) should return 28.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return 20.\n  */\nconst modulo3 = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return t % s;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the remainder of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n  remainder(148, 412) should return 412.\n  remainder(19, 28) should return 28.\n  remainder(2020, 1851) should return 0.\n  remainder(14,-15) should return 20.\n  */\nconst remainder3 = (a, b) => {\n  const t = parseInt(a, 10);\n  const s = parseInt(b, 10);\n  if (isNaN(t) || isNaN(s)) {\n    return NaN;\n  }\n  return t % s;\n};\n\n/*Complete the function thattakestwo integers and returns \n  the absolute value of the theirunit digits.\n A ssume theinpu t is alwaysvalid. \n  Examples:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercasev owels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercasev owels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= '0' && s[k] <= '9') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercasev owels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= '0' && s[k] <= '9') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= '0' && s[k] <= '9') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= '0' && s[k] <= '9') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowelOdd('aBCdEf') returns 1\n  countVowelOdd('abcdefg') returns 0\n  countVowelOdd('dBBE') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= '0' && s[k] <= '9') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowelOddEven('aBCdEf') returns 1\n  countVowelOddEven('abcdefg') returns 0\n  countVowelOddEven('dBBE') returns 0\n  */\nconst countVowelOddOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= '0' && s[k] <= '9') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowelOddOdd('aBCdEf') returns 1\n  countVowelOddOdd('abcdefg') returns 0\n  countVowelOddOdd('dBBE') returns 0\n  */\nconst countVowelOddOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= '0' && s[k] <= '9') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowelOddOddEven('aBCdEf') returns 1\n  countVowelOddOddEven('abcdefg') returns 0\n  countVowelOddOddEven('dBBE') returns 0\n  */\nconst countVowelOddOddOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= '0' && s[k] <= '9') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) re p resenting a number\n  and r eturns  the closest in t egerto it. If  the numberis equ idistant\n  from two integers, round i t away fromze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes a value (string) re p resenting a number\n  and r eturns  the closest in t egerto it. If  the numberis equ idistant\n  from two integers, round i t away fromze ro.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.split('.');\n  const [integer, fraction] = integer.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2}
