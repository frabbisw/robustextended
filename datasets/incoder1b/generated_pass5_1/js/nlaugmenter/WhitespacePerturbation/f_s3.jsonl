{"task_id": "JavaScript/0", "prompt": "/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Checki f in given list ofnumbers, are any two numbers closer to each otherth an\n  given  thre shold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const numberList = [...numbers];\n  const numberListLength = numberList.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let found = false;\n  let found2 = false;\n  let found3 = false;\n  let found4 = false;\n  let found5 = false;\n  let found6 = false;\n  let found7 = false;\n  let found8 = false;\n  let found9 = false;\n  let found10 = false;\n  let found11 = false;\n  let found12 = false;\n  let found13 = false;\n  let found14 = false;\n  let found15 = false;\n  let found16 = false;\n  let found17 = false;\n  let found18 = false;\n  let found19 = false;\n  let found20 = false;\n  let found21 = false;\n  let found22 = false;\n  let found23 = false;\n  let found24 = false;\n  let found25 = false;\n  let found26 = false;\n  let found27 = false;\n  let found28 = false;\n  let found29 = false;\n  let found30 = false;\n  let found31 = false;\n  let found32 = false;\n  let found33 = false;\n  let found34 = false;\n  let found35 = false;\n  let found36 = false;\n  let found37 = false;\n  let found38 = false;\n  let found39 = false;\n  let found40 = false;\n  let found41 = false;\n  let found42 = false;\n  let found43 = false;\n  let found44 = false;\n  let found45 = false;\n  let found46 = false;\n  let found47 = false;\n  let found48 = false;\n  let found49 = false;\n  let found50 = false;\n  let found51 = false;\n  let found52 = false;\n  let found53 = false;\n  let found54 = false;\n  let found55 = false;\n  let found56 = false;\n  let found57 = false;\n  let found58 = false;\n  let found59 = false;\n  let found60 = false;\n  let found61 = false;\n  let found62 = false;\n  let found63 = false;\n  let found64 = false;\n  let found65 = false;\n  let found66 = false;\n  let found67 = false;\n  let found68 = false;\n  let found69 = false;\n  let found70 = false;\n  let found71 = false;\n  let found72 = false;\n  let found73 = false;\n  let found74 = false;\n  let found75 = false;\n  let found76 = false;\n  let found77 = false;\n  let found78 = false;\n  let found79 = false;\n  let found80 = false;\n  let found81 = false;\n  let found82 = false;\n  let found83 = false;\n  let found84 = false;\n  let found85 = false;\n  let found86 = false;\n  let found87 = false;\n  let found88 = false;\n  let found89 = false;\n  let found90 = false;\n  let found91 = false;\n  let found92 = false;\n  let found93 = false;\n  let found94 = false;\n  let found95 = false;\n  let found96 = false;\n  let found97 = false;\n  let found98 = false;\n  let found99 = false;\n  let found100 = false;\n  let found101 = false;\n  let found102 = false;\n  let found103 = false;\n  let found104 = false;\n  let found105 = false;\n  let found106 = false;\n  let found107 = false;\n  let found108 = false;\n  let found109 = false;\n  let found110 = false;\n  let found111 = false;\n  let found112 = false;\n  let found113 = false;\n  let found114 = false;\n  let found115 = false;\n  let found116 = false;\n  let found117 = false;\n  let found118 = false;\n  let found119 = false;\n  let found120 = false;\n  let found121 = false;\n  let found122 = false;\n  let found123 = false;\n  let found124 = false;\n  let found125 = false;\n  let found126 = false;\n  let found127 = false;\n  let found128 = false;\n  let found129 = false;\n  let found130 = false;\n  let found131 = false;\n  let found132 = false;\n  let found133 = false;\n  let found134 = false;\n  let found135 = false;\n  let found136 = false;\n  let found137 = false;\n  let found138 = false;\n  let found139 = false;\n  let found140 = false;\n  let found141 = false;\n  let found142 = false;\n  let found143 = false;\n  let found144 = false;\n  let found145 = false;\n  let found146 = false;\n  let found147 = false;\n  let found148 = false;\n  let found149 = false;\n  let found150 = false;\n  let found151 = false;\n  let found152 = false;\n  let found153 = false;\n  let found154 = false;\n  let found155 = false;\n  let found156 = false;\n  let found157 = false\n  let found158 = false;\n  let found159 = false;\n  let found160 = false;\n  let found161 = false;\n  let found162 = false;\n  let found163 = false;\n  let found164 = false;\n  let found165 = false;\n  let found166 = false;\n  let found167 = false;\n  let found168 = false;\n  let found169 = false;\n  let found170 = false;\n  let found171 = false;\n  let found172 = false;\n  let found173 = false;\n  let found174 = false;\n  let found175 = false;\n  let found176 = false;\n  let found177 = false;\n  let found178 = false;\n  let found179 = false;\n  let found180 = false;\n  let found181 = false;\n  let found182 = false;\n  let found183 = false;\n  let found184 = false;\n  let found185 = false;\n  let found186 = false;\n  let found187 = false;\n  let found188 = false;\n  let found189 = false;\n  let found190 = false;\n  let found191 = false;\n  let found192 = false;\n  let found193 = false;\n  let found194 = false;\n  let found195 = false;\n  let found196 = false;\n  let found197 = false;\n  let found198 = false;\n  let found199 = false;\n  let found200 = false;\n  let found201 = false;\n  let found202 = false;\n  let found203 = false;\n  let found204 = false;\n  let found205 = false;\n  let found206 = false;\n  let found207 = false;\n  let found208 = false;\n  let found209 = false;\n  let found210 = false;\n  let found211 = false;\n  let found212 = false;\n  let found213 = false;\n  let found214 = false;\n  let found215 = false;\n  let found216 = false;\n  let found217 = false;\n  let found218 = false;\n  let found219 = false;\n  let found220 = false;\n  let found221 = false;\n  let found222 = false;\n  let found223 = false;\n  let found224 = false;\n  let found225 = false;\n  let found226 = false;\n  let found227 = false;\n  let found228 = false;\n  let found229 = false;\n  let found230 = false;\n  let found231 = false;\n  let found232 = false;\n  let found233 = false;\n  let found234 = false;\n  let found235 = false;\n  let found236 = false;\n  let found237 = false;\n  let found238 = false;\n  let found239 = false;\n  let found240 = false;\n  let found241 = false;\n  let found242 = false;\n  let found243 = false;\n  let found244 = false;\n  let found245 = false;\n  let found246 = false;\n  let found247 = false\n  let found248 = false;\n  let found249 = false;\n  let found250 = false;\n  let found251 = false;\n  let found252 = false;\n  let found253 = false;\n  let found254 = false;\n  let found255 = false;\n  let found256 = false;\n  let found257 = false\n  let found258 = false;\n  let found259 = false;\n  let found260 = false;\n  let found261 = false;\n  let found262 = false;\n  let found263 = false;\n  let found264 = false;", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => group.trim());\n};\n\n/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => group.trim().replace(/\\s/g, ''));\n};\n\n/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces2 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => group.trim().replace(/\\s+/g, ''));\n};\n\n/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces3 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => group.trim().replace(/\\s+/g,''));\n};\n\n/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces4 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => group.trim().replace(/\\s+/g,''));\n};\n\n/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces5 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => group.trim().replace(/\\s+/g,''));\n};\n\n/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces6 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => group.trim().replace(/\\s+/g,''));\n};\n\n/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces7 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => group.trim().replace(/\\s+/g,''));\n};\n\n/* Inputt o this function isa string containing multiple groups of nested pare nt heses. You r goa l is to\n  separate th ose  group int o separate stri ngs and return the list of those.\n  Separat e groups are balanc ed (eac h open brace is properl y c losed)andnot nested within each other\n  Ignore any spaces in the  in put s tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsNoSpaces8 = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  return paren_groups.map((group) => group.trim().replace(/\\s+", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if  gniven strig is apalindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Test if  gniven strig is apalindrome */\nconst isPalindrome = (string) => {\n r eturn stri ng ==  string.split('').rev ers e().join(' ');\n}\n\n/* Findthe shortest palindrome that begins with asupplied string.\n Algorit hm idea is simple:\n  -Fin d the l ongestpostfix of supplied string thatis a palindrome.\n  -  Ap pendto the en d of the string reverse of a string prefix that comes be fore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n let longestPalindrome = '';\n let longestPalindromeLength = 0;\n let longestPalindromeLength2 = 0;\n let longestPalindromeLength3 = 0;\n let longestPalindromeLength4 = 0;\n let longestPalindromeLength5 = 0;\n let longestPalindromeLength6 = 0;\n let longestPalindromeLength7 = 0;\n let longestPalindromeLength8 = 0;\n let longestPalindromeLength9 = 0;\n let longestPalindromeLength10 = 0;\n let longestPalindromeLength11 = 0;\n let longestPalindromeLength12 = 0;\n let longestPalindromeLength13 = 0;\n let longestPalindromeLength14 = 0;\n let longestPalindromeLength15 = 0;\n let longestPalindromeLength16 = 0;\n let longestPalindromeLength17 = 0;\n let longestPalindromeLength18 = 0;\n let longestPalindromeLength19 = 0;\n let longestPalindromeLength20 = 0;\n let longestPalindromeLength21 = 0;\n let longestPalindromeLength22 = 0;\n let longestPalindromeLength23 = 0;\n let longestPalindromeLength24 = 0;\n let longestPalindromeLength25 = 0;\n let longestPalindromeLength26 = 0;\n let longestPalindromeLength27 = 0;\n let longestPalindromeLength28 = 0;\n let longestPalindromeLength29 = 0;\n let longestPalindromeLength30 = 0;\n let longestPalindromeLength31 = 0;\n let longestPalindromeLength32 = 0;\n let longestPalindromeLength33 = 0;\n let longestPalindromeLength34 = 0;\n let longestPalindromeLength35 = 0;\n let longestPalindromeLength36 = 0;\n let longestPalindromeLength37 = 0;\n let longestPalindromeLength38 = 0;\n let longestPalindromeLength39 = 0;\n let longestPalindromeLength40 = '';\n let longestPalindromeLength41 = '';\n let longestPalindromeLength42 = '';\n let longestPalindromeLength43 = '';\n let longestPalindromeLength44 = '';\n let longestPalindromeLength45 = '';\n let longestPalindromeLength46 = '';\n let longestPalindromeLength47 = '';\n let longestPalindromeLength48 = '';\n let longestPalindromeLength49 = '';\n let longestPalindromeLength50 = '';\n let longestPalindromeLength51 = '';\n let longestPalindromeLength52 = '';\n let longestPalindromeLength53 = '';\n let longestPalindromeLength54 = '';\n let longestPalindromeLength55 = '';\n let longestPalindromeLength56 = '';\n let longestPalindromeLength57 = '';\n let longestPalindromeLength58 = '';\n let longestPalindromeLength59 = '';\n let longestPalindromeLength60 = '';\n let longestPalindromeLength61 = '';\n let longestPalindromeLength62 = '';\n let longestPalindromeLength63 = '';\n let longestPalindromeLength64 = '';\n let longestPalindromeLength65 = '';\n let longestPalindromeLength66 = '';\n let longestPalindromeLength67 = '';\n let longestPalindromeLength68 = '';\n let longestPalindromeLength69 = '';\n let longestPalindromeLength70 = '';\n let longestPalindromeLength71 = '';\n let longestPalindromeLength72 = '';\n let longestPalindromeLength73 = '';\n let longestPalindromeLength74 = '';\n let longestPalindromeLength75 = '';\n let longestPalindromeLength76 = '';\n let longestPalindromeLength77 = '';\n let longestPalindromeLength78 = '';\n let longestPalindromeLength79 = '';\n let longestPalindromeLength80 = '';\n let longestPalindromeLength81 = '';\n let longestPalindromeLength82 = '';\n let longestPalindromeLength83 = '';\n let longestPalindromeLength84 = '';\n let longestPalindromeLength85 = '';\n let longestPalindromeLength86 = '';\n let longestPalindromeLength87 = '';\n let longestPalindromeLength88 = '';\n let longestPalindromeLength89 = '';\n let longestPalindromeLength90 = '';\n let longestPalindromeLength91 = '';\n let longestPalindromeLength92 = '';\n let longestPalindromeLength93 = '';\n let longestPalindromeLength94 = '';\n let longestPalindromeLength95 = '';\n let longestPalindromeLength96 = '';\n let longestPalindromeLength97 = '';\n let longestPalindromeLength98 = '';\n let longestPalindromeLength99 = '';\n let longestPalindromeLength100 = '';\n let longestPalindromeLength101 = '';\n let longestPalindromeLength102 = '';\n let longestPalindromeLength103 = '';\n let longestPalindromeLength104 = '';\n let longestPalindromeLength105 = '';\n let longestPalindromeLength106 = '';\n let longestPalindromeLength107 = '';\n let longestPalindromeLength108 = '';\n let longestPalindromeLength109 = '';\n let longestPalindromeLength110 = '';\n let longestPalindromeLength111 = '';\n let longestPalindromeLength112 = '';\n let longestPalindromeLength113 = '';\n let longestPalindromeLength114 = '';\n let longestPalindromeLength115 = '';\n let longestPalindromeLength116 = '';\n let longestPalindromeLength117 = '';\n let longestPalindromeLength118 = '';\n let longestPalindromeLength119 = '';\n let longestPalindromeLength120 = '';\n let longestPalindromeLength121 = '';\n let longestPalindromeLength122 = '';\n ", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givena  positive integer n , you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even .\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer n, you have to make a pile of n levels of stones.\n T he first l evelhas n stones.\n  The n umb erof ston es in the nextlevel is:\n      - the next odd number if nis odd.\n      - the  next e ven number if n is even.\n Return the number of stones in each level ina list, where elemen t a tind ex\n  i re presents the number of stones in the level (i+1).\n\n  Exa mples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  Given a list l of n integers, return its maximum sum.\n T he first l evelhas n integers, and the last l evelhas n integers.\n Return the maximum sum of the first l evelhas n integers and the last\n l evelhas n integers.\n\n Exa mples:\n  >>> maximumSum([3, 5, 7])\n  15\n  >>> maximumSum([3, 5, 7, 9])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, 39, 43, 47, 51, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93])\n  15\n  >>> maximumSum([3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 35, ", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n  return result;\n};\n\n/*\n  You wil l be given a string  of words separated by commas or spaces. Your task  i s\n  to spl it th e string into words a ndreturn anarray of the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    word = word.trim();\n    if (word.length > 0) {\n      result.push(word);\n    }\n  });\n", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This fun ction takes two pos itive numbers x and y and returns the\n biggest ev en  integer n umber  that is in the range  [x , y] inclu sive. If \n  the re's no such number, then the function shou ld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This fun ction takes two pos itive numbers x and y and returns the\n biggest ev en  integer n umber  that is in the range  [x, y] inclu sive. If \n  the re's no such number, then the function shou ld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let maxNum = -1;\n  let maxNum2 = -1;\n  let maxNum3 = -1;\n  let maxNum4 = -1;\n  let maxNum5 = -1;\n  let maxNum6 = -1;\n  let maxNum7 = -1;\n  let maxNum8 = -1;\n  let maxNum9 = -1;\n  let maxNum10 = -1;\n  let maxNum11 = -1;\n  let maxNum12 = -1;\n  let maxNum13 = -1;\n  let maxNum14 = -1;\n  let maxNum15 = -1;\n  let maxNum16 = -1;\n  let maxNum17 = -1;\n  let maxNum18 = -1;\n  let maxNum19 = -1;\n  let maxNum20 = -1;\n  let maxNum21 = -1;\n  let maxNum22 = -1;\n  let maxNum23 = -1;\n  let maxNum24 = -1;\n  let maxNum25 = -1;\n  let maxNum26 = -1;\n  let maxNum27 = -1;\n  let maxNum28 = -1;\n  let maxNum29 = -1;\n  let maxNum30 = -1;\n  let maxNum31 = -1;\n  let maxNum32 = -1;\n  let maxNum33 = -1;\n  let maxNum34 = -1;\n  let maxNum35 = -1;\n  let maxNum36 = -1;\n  let maxNum37 = -1;\n  let maxNum38 = -1;\n  let maxNum39 = -1;\n  let maxNum40 = -1;\n  let maxNum41 = -1;\n  let maxNum42 = -1;\n  let maxNum43 = -1;\n  let maxNum44 = -1;\n  let maxNum45 = -1;\n  let maxNum46 = -1;\n  let maxNum47 = -1;\n  let maxNum48 = -1;\n  let maxNum49 = -1;\n  let maxNum50 = -1;\n  let maxNum51 = -1;\n  let maxNum52 = -1;\n  let maxNum53 = -1;\n  let maxNum54 = -1;\n  let maxNum55 = -1;\n  let maxNum56 = -1;\n  let maxNum57 = -1;\n  let maxNum58 = -1;\n  let maxNum59 = -1;\n  let maxNum60 = -1;\n  let maxNum61 = -1;\n  let maxNum62 = -1;\n  let maxNum63 = -1;\n  let maxNum64 = -1;\n  let maxNum65 = -1;\n  let maxNum66 = -1;\n  let maxNum67 = -1;\n  let maxNum68 = -1;\n  let maxNum69 = -1;\n  let maxNum70 = -1;\n  let maxNum71 = -1;\n  let maxNum72 = -1;\n  let maxNum73 = -1;\n  let maxNum74 = -1;\n  let maxNum75 = -1;\n  let maxNum76 = -1;\n  let maxNum77 = -1;\n  let maxNum78 = -1;\n  let maxNum79 = -1;\n  let maxNum80 = -1;\n  let maxNum81 = -1;\n  let maxNum82 = -1;\n  let maxNum83 = -1;\n  let maxNum84 = -1;\n  let maxNum85 = -1;\n  let maxNum86 = -1;\n  let maxNum87 = -1;\n  let maxNum88 = -1;\n  let maxNum89 = -1;\n  let maxNum90 = -1;\n  let maxNum91 = -1;\n  let maxNum92 = -1;\n  let maxNum93 = -1;\n  let maxNum94 = -1;\n  let maxNum95 = -1;\n  let maxNum96 = -1;\n  let maxNum97 = -1;\n  let maxNum98 = -1;\n  let maxNum99 = -1;\n  let maxNum100 = -1;\n  let maxNum101 = -1;\n  let maxNum102 = -1;\n  let maxNum103 = -1;\n  let maxNum104 = -1;\n  let maxNum105 = -1;\n  let maxNum106 = -1;\n  let maxNum107 = -1;\n  let maxNum108 = -1;\n  let maxNum109 = -1;\n  let maxNum110 = -1;\n  let maxNum111 = -1;\n  let maxNum112 = -1;\n  let maxNum113 = -1;\n  let maxNum114 = -1;\n  let maxNum115 = -1;\n  let maxNum116 = -1;\n  let maxNum117 = -1;\n  let maxNum118 = -1;\n  let maxNum119 = -1;\n  let maxNum120 = -1;\n  let maxNum121 = -1;\n  let maxNum122 = -1;\n  let maxNum123 = -1;\n  let maxNum124 = -1;\n  let maxNum125 = -1;\n  let maxNum126 = -1;\n  let maxNum127 = -1;\n  let maxNum128 = -1;\n  let maxNum129 = -1;\n  let maxNum130 = -1;\n  let maxNum131 = -1;\n  let maxNum132 = -1;\n  let maxNum133 = -1;\n  let maxNum134 = -1;\n  let maxNum135 = -1;\n  let maxNum136 = -1;\n  let maxNum137 = -1;\n  let maxNum138 = -1;\n  let maxNum139 = -1;\n  let maxNum140 = -1;\n  let maxNum141 = -1;\n  let maxNum142 = -1;\n  let maxNum143 = -1;\n  let maxNum144 = -1;\n  let maxNum145 = -1;\n  let maxNum146 = -1;\n  let maxNum147 = -1;\n  let maxNum148 = -1;\n  let maxNum149 = -1;\n  let maxNum150 = -1;\n  let maxNum151 = -1;\n  let maxNum152 = -1;\n  let maxNum153 = -1;\n  let maxNum154 = -1;\n  let maxNum155 = -1;\n  let maxNum156 = -1;\n  let maxNum157 = -1;\n  let maxNum158 = -1;\n  let maxNum159 = -1;\n  let maxNum160 = -1;\n  let maxNum161 = -1;\n  let maxNum162 = -1;\n  let maxNum163 = -1;\n  let maxNum164 = -1;\n  let maxNum165 = -1;\n  let maxNum166 = -1;\n  let maxNum167 = -1;\n  let maxNum168 = -1;\n  let maxNum169 = -1;\n  let maxNum170 = -1;\n  let maxNum171 = -1;\n  let maxNum172 = -1;\n  let maxNum173 = -1;\n  let maxNum174 = -1;\n  let maxNum175 = -1;\n  let maxNum176 = -1;\n  let maxNum177 = -1;\n  let maxNum178 = -1;\n  let maxNum179 = -1;\n  let maxNum180 = -1;\n  let maxNum181 = -1;\n  let maxNum182 = -1;\n  let maxNum183 = -1;\n  let maxNum184 = -1;\n  let maxNum185 = -1;\n  let maxNum186 = -1;\n  let maxNum187 = -1;\n  let maxNum188 = -1;\n  let maxNum189 = -1;\n  let maxNum190 = -1;\n  let maxNum191 = -1;\n  let maxNum192 = -1;\n  let maxNum193 = -1;\n  let maxNum194 = -1;\n  let maxNum195 = -1;\n  let maxNum196 = -1;\n  let maxNum197 = -1;\n  let maxNum198 = -1;\n  let maxNum199 = -1;\n  let maxNum200 = -1;\n  let maxNum201 = -1;\n  let maxNum202 = -1;\n  let maxNum203 = -1;\n  let maxNum204 = -1;\n  let maxNum205 = -1;\n  let maxNum206 = -1;\n  let maxNum207 = -1;\n  let maxNum208 = -1;\n  let maxNum209 = -1;\n  let ", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You aregiven two positiveintegers n and m, and your task is to compute the averageof  theintegers from n throu ghm (includi ng n and m). \n Round the answer to the nearest integer an d convert thatto b inary.  If n is greater thanm,return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven two positiveintegers n and m, and your task is to compute the averageof  theintegers from n throu ghm (includi ng n and m). \n Round the answer to the nearest integer an d convert thatto b inary.  If n is greater thanm,return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let roundedNum = parseInt(n, 10);\n  let roundedMult = parseInt(m, 10);\n  let roundedNumStr = roundedNum.toString(2);\n  let roundedMultStr = roundedMult.toString(2);\n  let roundedNumStrLen = roundedNumStr.length;\n  let roundedMultStrLen = roundedMultStr.length;\n  let roundedNumStrLen2 = roundedNumStrLen * 2;\n  let roundedMultStrLen2 = roundedMultStrLen * 2;\n  let roundedNumStrLen3 = roundedNumStrLen2 - roundedNumStrLen;\n  let roundedMultStrLen3 = roundedMultStrLen2 - roundedMultStrLen;\n  let roundedNumStrLen4 = roundedNumStrLen3 - roundedNumStrLen2;\n  let roundedMultStrLen4 = roundedMultStrLen3 - roundedMultStrLen2;\n  let roundedNumStrLen5 = roundedNumStrLen4 - roundedNumStrLen3;\n  let roundedMultStrLen5 = roundedMultStrLen4 - roundedMultStrLen3;\n  let roundedNumStrLen6 = roundedNumStrLen5 - roundedNumStrLen4;\n  let roundedMultStrLen6 = roundedMultStrLen5 - roundedMultStrLen4;\n  let roundedNumStrLen7 = roundedNumStrLen6 - roundedNumStrLen5;\n  let roundedMultStrLen7 = roundedMultStrLen6 - roundedMultStrLen5;\n  let roundedNumStrLen8 = roundedNumStrLen7 - roundedNumStrLen6;\n  let roundedMultStrLen8 = roundedMultStrLen7 - roundedMultStrLen6;\n  let roundedNumStrLen9 = roundedNumStrLen8 - roundedNumStrLen7;\n  let roundedMultStrLen9 = roundedMultStrLen8 - roundedMultStrLen7;\n  let roundedNumStrLen10 = roundedNumStrLen9 - roundedNumStrLen8;\n  let roundedMultStrLen10 = roundedMultStrLen9 - roundedMultStrLen8;\n  let roundedNumStrLen11 = roundedNumStrLen10 - roundedNumStrLen9;\n  let roundedMultStrLen11 = roundedMultStrLen10 - roundedMultStrLen9;\n  let roundedNumStrLen12 = roundedNumStrLen11 - roundedNumStrLen10;\n  let roundedMultStrLen12 = roundedMultStrLen11 - roundedMultStrLen10;\n  let roundedNumStrLen13 = roundedNumStrLen12 - roundedNumStrLen11;\n  let roundedMultStrLen13 = roundedMultStrLen12 - roundedMultStrLen11;\n  let roundedNumStrLen14 = roundedNumStrLen13 - roundedNumStrLen12;\n  let roundedMultStrLen14 = roundedMultStrLen13 - roundedMultStrLen12;\n  let roundedNumStrLen15 = roundedNumStrLen14 - roundedNumStrLen13;\n  let roundedMultStrLen15 = roundedMultStrLen14 - roundedMultStrLen13;\n  let roundedNumStrLen16 = roundedNumStrLen15 - roundedNumStrLen14;\n  let roundedMultStrLen16 = roundedMultStrLen15 - roundedMultStrLen14;\n  let roundedNumStrLen17 = roundedNumStrLen16 - roundedNumStrLen15;\n  let roundedMultStrLen17 = roundedMultStrLen16 - roundedMultStrLen15;\n  let roundedNumStrLen18 = roundedNumStrLen17 - roundedNumStrLen16;\n  let roundedMultStrLen18 = roundedMultStrLen17 - roundedMultStrLen16;\n  let roundedNumStrLen19 = roundedNumStrLen18 - roundedNumStrLen17;\n  let roundedMultStrLen19 = roundedMultStrLen18 - roundedMultStrLen17;\n  let roundedNumStrLen20 = roundedNumStrLen19 - roundedNumStrLen18;\n  let roundedMultStrLen20 = roundedMultStrLen19 - roundedMultStrLen18;\n  let roundedNumStrLen21 = roundedNumStrLen20 - roundedNumStrLen19;\n  let roundedMultStrLen21 = roundedMultStrLen20 - roundedMultStrLen19;\n  let roundedNumStrLen22 = roundedNumStrLen21 - roundedNumStrLen20;\n  let roundedMultStrLen22 = roundedMultStrLen21 - roundedMultStrLen20;\n  let roundedNumStrLen23 = roundedNumStrLen22 - roundedNumStrLen21;\n  let roundedMultStrLen23 = roundedMultStrLen22 - roundedMultStrLen21;\n  let roundedNumStrLen24 = roundedNumStrLen23 - roundedNumStrLen22;\n  let roundedMultStrLen24 = roundedMultStrLen23 - roundedMultStrLen22;\n  let roundedNumStrLen25 = roundedNumStrLen24 - roundedNumStrLen23;\n  let roundedMultStrLen25 = roundedMultStrLen24 - roundedMultStrLen23;\n  let roundedNumStrLen26 = roundedNumStrLen25 - roundedNumStrLen24;\n  let roundedMultStrLen26 = roundedMultStrLen25 - roundedMultStrLen24;\n  let roundedNumStrLen27 = roundedNumStrLen26 - roundedNumStrLen25;\n  let roundedMultStrLen27 = roundedMultStrLen26 - roundedMultStrLen25;\n  let roundedNumStrLen28 = roundedNumStrLen27 - roundedNumStrLen26;\n  let roundedMultStrLen28 = roundedMultStrLen27 - roundedMultStrLen26;\n  let roundedNumStrLen29 = roundedNumStrLen28 - roundedNumStrLen27;\n  let roundedMultStrLen29 = roundedMultStrLen28 - roundedMultStrLen27;\n  let roundedNumStrLen30 = roundedNumStrLen29 - roundedNumStrLen28;\n  let roundedMultStrLen30 = roundedMultStrLen29 - roun", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given alist of positive in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const num = x[i];\n    if (num % 10 === 0) {\n      list.push(num);\n    }\n  }\n  return list;\n};\n\n/*Given a number in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits(15)\n  [15]\n  >>> uniqueDigits(33)\n  [33, 15]\n  >>> uniqueDigits(1422)\n  [1422, 15]\n  >>> uniqueDigits(1)\n  [1]\n  >>> uniqueDigits(10)\n  []\n  */\nconst uniqueDigit = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const num = x[i];\n    if (num % 10 === 0) {\n      list.push(num);\n    }\n  }\n  return list;\n};\n\n/*Given a number in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits(152)\n  [152]\n  >>> uniqueDigits(323)\n  [323, 152]\n  >>> uniqueDigits(1422)\n  [1422, 152]\n  >>> uniqueDigits(10)\n  []\n  */\nconst uniqueDigits = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const num = x[i];\n    if (num % 10 === 0) {\n      list.push(num);\n    }\n  }\n  return list;\n};\n\n/*Given a number in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits(152)\n  [152]\n  >>> uniqueDigits(323)\n  [323, 152]\n  >>> uniqueDigits(1422)\n  [1422, 152]\n  >>> uniqueDigits(1)\n  [1]\n  >>> uniqueDigits(10)\n  []\n  */\nconst uniqueDigit = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const num = x[i];\n    if (num % 10 === 0) {\n      list.push(num);\n    }\n  }\n  return list;\n};\n\n/*Given a number in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits(152)\n  [152]\n  >>> uniqueDigits(323)\n  [323, 152]\n  >>> uniqueDigits(1422)\n  [1422, 152]\n  >>> uniqueDigits(1)\n  [1]\n  >>> uniqueDigits(10)\n  []\n  */\nconst uniqueDigits = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const num = x[i];\n    if (num % 10 === 0) {\n      list.push(num);\n    }\n  }\n  return list;\n};\n\n/*Given a number in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits(152)\n  [152]\n  >>> uniqueDigits(323)\n  [323, 152]\n  >>> uniqueDigits(1422)\n  [1422, 152]\n  >>> uniqueDigits(1)\n  [1]\n  >>> uniqueDigits(10)\n  []\n  */\nconst uniqueDigit = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const num = x[i];\n    if (num % 10 === 0) {\n      list.push(num);\n    }\n  }\n  return list;\n};\n\n/*Given a number in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits(152)\n  [152]\n  >>> uniqueDigits(323)\n  [323, 152]\n  >>> uniqueDigits(1422)\n  [1422, 152]\n  >>> uniqueDigits(1)\n  [1]\n  >>> uniqueDigits(10)\n  []\n  */\nconst uniqueDigits = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const num = x[i];\n    if (num % 10 === 0) {\n      list.push(num);\n    }\n  }\n  return list;\n};\n\n/*Given a number in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits(152)\n  [152]\n  >>> uniqueDigits(323)\n  [323, 152]\n  >>> uniqueDigits(1422)\n  [1422, 152]\n  >>> uniqueDigits(1)\n  [1]\n  >>> uniqueDigits(10)\n  []\n  */\nconst uniqueDigit = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const num = x[i];\n    if (num % 10 === 0) {\n      list.push(num);\n    }\n  }\n  return list;\n};\n\n/*Given a number in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits(152)\n  [152]\n  >>> uniqueDigits(323)\n  [323, 152]\n  >>> uniqueDigits(1422)\n  [1422, 152]\n  >>> uniqueDigits(1)\n  [1]\n  >>> uniqueDigits(10)\n  []\n  */\nconst uniqueDigits = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const num = x[i];\n    if (num % 10 === 0) {\n      list.push(num);\n    }\n  }\n  return list;\n};\n\n/*Given a number in tegers x. return a sorted list of all \n elementsth at hasn'tany e ven digit.\n\n  Note: R etu rned listshould be sorte d in increasing order.\n  \n  For example:\n  >>> uniqueDigits(152)\n  [152]\n  >>> uniqueDigits(323)\n  [323, 152]\n  >>> uniqueDigits(1422)\n  [1422, 152]\n  >>> uniqueDigits(1)\n  [1]\n  >>> uniqueDigits(10)\n  []\n  */\nconst uniqueDigit = (x) => {\n  const list = [];\n  let i = x.length;\n  while (i--) {\n    const ", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Givena n array of integers , sort the integers that are between 1 and9 inclu si ve,\n  reve rse t he resulting array, a ndthen repla ce each digit b y its corresponding name from\n  \"One\", \"Two \", \"Three\", \"Four\",  \"Five\" , \"Six\", \"Seven\", \"Eigh t\",  \"Nine\" .\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array of integers, sort the integers that are between 1 and9 inclu si ve,\n  reve rse t he resulting array, a ndthen repla ce each digit b y its corresponding name from\n  \"One\", \"Two \", \"Three\", \"Four\",  \"Five\", \"Six\", \"Seven\", \"Eigh t\",  \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    const num = arr[i];\n    if (num < 1 || num > 9) {\n      continue;\n    }\n    const name = byName(num);\n    if (name) {\n      result.push(name);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a number, return its name as a string.\n  \n  For example:\n    num = 9\n    -> return \"Nine\"\n    \n    If the number is negative return \"Negative\":\n    num = -1\n    -> return \"Negative\"\n  */\nconst byName = (num) => {\n  if (num < 0) {\n    return \"Negative\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  if (num === 1) {\n    return \"One\";\n  }\n  if (num === 2) {\n    return \"Two\";\n  }\n  if (num === 3) {\n    return \"Three\";\n  }\n  if (num === 4) {\n    return \"Four\";\n  }\n  if (num === 5) {\n    return \"Five\";\n  }\n  if (num === 6) {\n    return \"Six\";\n  }\n  if (num === 7) {\n    return \"Seven\";\n  }\n  if (num === 8) {\n    return \"Eight\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  return null;\n};\n\n/*\n  Given a number, return its name as a string.\n  \n  For example:\n    num = 9\n    -> return \"Nine\"\n    \n    If the number is negative return \"Negative\":\n    num = -1\n    -> return \"Negative\"\n  */\nconst byName = (num) => {\n  if (num < 0) {\n    return \"Negative\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  if (num === 1) {\n    return \"One\";\n  }\n  if (num === 2) {\n    return \"Two\";\n  }\n  if (num === 3) {\n    return \"Three\";\n  }\n  if (num === 4) {\n    return \"Four\";\n  }\n  if (num === 5) {\n    return \"Five\";\n  }\n  if (num === 6) {\n    return \"Six\";\n  }\n  if (num === 7) {\n    return \"Seven\";\n  }\n  if (num === 8) {\n    return \"Eight\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  return null;\n};\n\n/*\n  Given a number, return its name as a string.\n  \n  For example:\n    num = 9\n    -> return \"Nine\"\n    \n    If the number is negative return \"Negative\":\n    num = -1\n    -> return \"Negative\"\n  */\nconst byName = (num) => {\n  if (num < 0) {\n    return \"Negative\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  if (num === 1) {\n    return \"One\";\n  }\n  if (num === 2) {\n    return \"Two\";\n  }\n  if (num === 3) {\n    return \"Three\";\n  }\n  if (num === 4) {\n    return \"Four\";\n  }\n  if (num === 5) {\n    return \"Five\";\n  }\n  if (num === 6) {\n    return \"Six\";\n  }\n  if (num === 7) {\n    return \"Seven\";\n  }\n  if (num === 8) {\n    return \"Eight\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  return null;\n};\n\n/*\n  Given a number, return its name as a string.\n  \n  For example:\n    num = 9\n    -> return \"Nine\"\n    \n    If the number is negative return \"Negative\":\n    num = -1\n    -> return \"Negative\"\n  */\nconst byName = (num) => {\n  if (num < 0) {\n    return \"Negative\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  if (num === 1) {\n    return \"One\";\n  }\n  if (num === 2) {\n    return \"Two\";\n  }\n  if (num === 3) {\n    return \"Three\";\n  }\n  if (num === 4) {\n    return \"Four\";\n  }\n  if (num === 5) {\n    return \"Five\";\n  }\n  if (num === 6) {\n    return \"Six\";\n  }\n  if (num === 7) {\n    return \"Seven\";\n  }\n  if (num === 8) {\n    return \"Eight\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  return null;\n};\n\n/*\n  Given a number, return its name as a string.\n  \n  For example:\n    num = 9\n    -> return \"Nine\"\n    \n    If the number is negative return \"Negative\":\n    num = -1\n    -> return \"Negative\"\n  */\nconst byName = (num) => {\n  if (num < 0) {\n    return \"Negative\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  if (num === 1) {\n    return \"One\";\n  }\n  if (num === 2) {\n    return \"Two\";\n  }\n  if (num === 3) {\n    return \"Three\";\n  }\n  if (num === 4) {\n    return \"Four\";\n  }\n  if (num === 5) {\n    return \"Five\";\n  }\n  if (num === 6) {\n    return \"Six\";\n  }\n  if (num === 7) {\n    return \"Seven\";\n  }\n  if (num === 8) {\n    return \"Eight\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  return null;\n};\n\n/*\n  Given a number, return its name as a string.\n  \n  For example:\n    num = 9\n    -> return \"Nine\"\n    \n    If the number is negative return \"Negative\":\n    num = -1\n    -> return \"Negative\"\n  */\nconst byName = (num) => {\n  if (num < 0) {\n    return \"Negative\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  if (num === 1) {\n    return \"One\";\n  }\n  if (num === 2) {\n    return \"Two\";\n  }\n  if (num === 3) {\n    return \"Three\";\n  }\n  if (num === 4) {\n    return \"Four\";\n  }\n  if (num === 5) {\n    return \"Five\";\n  }\n  if (num === 6) {\n    return \"Six\";\n  }\n  if (num === 7) {\n    return \"Seven\";\n  }\n  if (num === 8) {\n    return \"Eight\";\n  }\n  if (num === 9) {\n    return \"Nine\";\n  }\n  return null;\n};\n\n/*\n  Given a number, return its name as a string.\n  \n  For example:\n    num = 9\n    -> return \"Nine\"\n    \n    If the number is negative return \"Negative\":\n    num = -1\n    -> return \"Negative\"\n  */\nconst byName = (num) => {\n  if (num < 0) {\n    return \"Negative\";\n  }\n  if (num === 9) {\n    return \"Nine\";", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 *  ... * i) .\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Impleme nt the function f t hat takes nas a parameter,\n  and returns a list o fsize n,su ch th at the value of the e lem ent at ind ex i is the fac torial of i if i is even\n  or the sum of nu mbers from 1 to i o therwis e.\n  i starts from 1.\n th e facto rial of i is the multiplication of thenumbers from 1 to i(1*2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let fsize = Math.ceil(Math.sqrt(n));\n  let thenumbers = Array.from({ length: fsize }, () => 1);\n  let thenumbersSum = thenumbers.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactor = thenumbers.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorSum = thenumbersFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactor = thenumbersFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorSum = thenumbersFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactor = thenumbersFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorSum = thenumbersFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactor = thenumbersFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc * curr, 1);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactorSum = thenumbersFactorFactorFactorFactorFactorFactorFactorFactor.reduce((acc, curr) => acc + curr, 0);\n  let thenumbersFactorFactorFactorFactorFactorFactorFactor = thenumbersFactorFactor", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Givena  positive integer n , return a tuple that has the number ofeven and o dd \n  integer  pali ndromes that fall wit hin  the range (1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer n, return a tuple that has the number ofeven and o dd \n  integer  pali ndromes that fall wit hin  the range (1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindromes = [];\n  let oddOddPalindromes = [];\n  let evenPalindromes = [];\n  let oddPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  let palinCount = 0;\n  let oddCount = 0;\n  let evenCount2 = 0;\n  let oddCount2 = 0;\n  let evenCount3 = 0;\n  let oddCount3 = 0;\n  let evenCount4 = 0;\n  let oddCount4 = 0;\n  let evenCount5 = 0;\n  let oddCount5 = 0;\n  let evenCount6 = 0;\n  let oddCount6 = 0;\n  let evenCount7 = 0;\n  let oddCount7 = 0;\n  let evenCount8 = 0;\n  let oddCount8 = 0;\n  let evenCount9 = 0;\n  let oddCount9 = 0;\n  let evenCount10 = 0;\n  let oddCount10 = 0;\n  let evenCount11 = 0;\n  let oddCount11 = 0;\n  let evenCount12 = 0;\n  let oddCount12 = 0;\n  let evenCount13 = 0;\n  let oddCount13 = 0;\n  let evenCount14 = 0;\n  let oddCount14 = 0;\n  let evenCount15 = 0;\n  let oddCount15 = 0;\n  let evenCount16 = 0;\n  let oddCount16 = 0;\n  let evenCount17 = 0;\n  let oddCount17 = 0;\n  let evenCount18 = 0;\n  let oddCount18 = 0;\n  let evenCount19 = 0;\n  let oddCount19 = 0;\n  let evenCount20 = 0;\n  let oddCount20 = 0;\n  let evenCount21 = 0;\n  let oddCount21 = 0;\n  let evenCount22 = 0;\n  let oddCount22 = 0;\n  let evenCount23 = 0;\n  let oddCount23 = 0;\n  let evenCount24 = 0;\n  let oddCount24 = 0;\n  let evenCount25 = 0;\n  let oddCount25 = 0;\n  let evenCount26 = 0;\n  let oddCount26 = 0;\n  let evenCount27 = 0;\n  let oddCount27 = 0;\n  let evenCount28 = 0;\n  let oddCount28 = 0;\n  let evenCount29 = 0;\n  let oddCount29 = 0;\n  let evenCount30 = 0;\n  let oddCount30 = 0;\n  let evenCount31 = 0;\n  let oddCount31 = 0;\n  let evenCount32 = 0;\n  let oddCount32 = 0;\n  let evenCount33 = 0;\n  let oddCount33 = 0;\n  let evenCount34 = 0;\n  let oddCount34 = 0;\n  let evenCount35 = 0;\n  let oddCount35 = 0;\n  let evenCount36 = 0;\n  let oddCount36 = 0;\n  let evenCount37 = 0;\n  let oddCount37 = 0;\n  let evenCount38 = 0;\n  let oddCount38 = 0;\n  let evenCount39 = 0;\n  let oddCount39 = 0;\n  let evenCount40 = 0;\n  let oddCount40 = 0;\n  let evenCount41 = 0;\n  let oddCount41 = 0;\n  let evenCount42 = 0;\n  let oddCount42 = 0;\n  let evenCount43 = 0;\n  let oddCount43 = 0;\n  let evenCount44 = 0;\n  let oddCount44 = 0;\n  let evenCount45 = 0;\n  let oddCount45 = 0;\n  let evenCount46 = 0;\n  let oddCount46 = 0;\n  let evenCount47 = 0;\n  let oddCount47 = 0;\n  let evenCount48 = 0;\n  let oddCount48 = 0;\n  let evenCount49 = 0;\n  let oddCount49 = 0;\n  let evenCount50 = 0;\n  let oddCount50 = 0;\n  let evenCount51 = 0;\n  let oddCount51 = 0;\n  let evenCount52 = 0;\n  let oddCount52 = 0;\n  let evenCount53 = 0;\n  let oddCount53 = 0;\n  let evenCount54 = 0;\n  let oddCount54 = 0;\n  let evenCount55 = 0;\n  let oddCount55 = 0;\n  let evenCount56 = 0;\n  let oddCount56 = 0;\n  let evenCount57 = 0;\n  let oddCount57 = 0;\n  let evenCount58 = 0;\n  let oddCount58 = 0;\n  let evenCount59 = 0;\n  let oddCount59 = 0;\n  let evenCount60 = 0;\n  let oddCount60 = 0;\n  let evenCount61 = 0;\n  let oddCount61 = 0;\n  let evenCount62 = 0;\n  let oddCount62 = 0;\n  let evenCount63 = 0;\n  let oddCount63 = 0;\n  let evenCount64 = 0;\n  let oddCount64 = 0;\n  let evenCount65 = 0;\n  let oddCount65 = 0;\n  let evenCount66 = 0;\n  let oddCount66 = 0;\n  let evenCount67 = 0;\n  let oddCount67 = 0;\n  let evenCount68 = 0;\n  let oddCount68 = 0;\n  let evenCount69 = 0;\n  let oddCount69 = 0;\n  let evenCount70 = 0;\n  let oddCount70 = 0;\n  let evenCount71 = 0;\n  let oddCount71 = 0;\n  let evenCount72 = 0;\n  let oddCount72 = 0;\n  let evenCount73 = 0;\n  let oddCount73 = 0;\n  let evenCount74 = 0;\n  let oddCount74 = 0;\n  let evenCount75 = 0;\n  let oddCount75 = 0;\n  let evenCount76 = 0;\n  let oddCount76 = 0;\n  let evenCount77 = 0;\n  let oddCount77 = 0;\n  let evenCount78 = 0;\n  let oddCount78 = 0;\n  let evenCount79 = 0;\n  let oddCount79 = 0;\n  let evenCount80 = 0;\n  let oddCount80 = 0;\n  let evenCount81 = 0;\n  let oddCount81 = 0;\n  let evenCount82 = 0;\n  let oddCount82 = 0;\n  let evenCount83 = 0;\n  let oddCount83 = 0;\n  let evenCount84 = 0;\n  let oddCount84 = 0;\n  let evenCount85 = 0;\n  let oddCount85 = 0;\n  let evenCount86 = 0;\n  let oddCount86 = 0;\n  let evenCount87 = 0;\n  let oddCount87 = 0;\n  let evenCount88 = 0;\n  let oddCount88 = 0;\n  let evenCount89 = 0;\n  let oddCount89 = 0;\n  let evenCount90 = 0;\n  let oddCount90 = 0;\n  let evenCount91 = 0;\n  let oddCount91 = 0;\n  let evenCount92 = 0;\n  let oddCount92 = 0;\n  let evenCount93 = 0;\n  let oddCount93 = 0;\n  let evenCount94 = 0;\n  let oddCount94 = 0;\n  let evenCount95 = 0;\n  let oddCount95 = 0;\n  let evenCount96 = 0;\n  let oddCount96 = 0;\n  let evenCount97 = 0;\n  let oddCount97 = 0;\n  let evenCount98 = 0;\n  let oddCount98 = 0;\n  let evenCount99 = 0;\n  let oddCount99 = 0;\n  let evenCount100 = 0;\n  let oddCount100 = 0;\n  let evenCount101 = 0;\n  let oddCount101 = 0;\n  let evenCount102 = 0;\n  let oddCount102 = 0;\n  let evenCount103 = 0;\n  let oddCount103 = 0;\n  let evenCount104 = 0;\n  let oddCount104 = 0;\n  let evenCount105 = 0;\n  let oddCount105 = 0;\n  let evenCount106 = 0;\n  let oddCount106 = 0;\n  let evenCount107 = 0;\n  let oddCount107 = 0;\n  let evenCount108 = 0;\n  let oddCount108 = 0;\n  let evenCount109 = 0;\n  let oddCount109 = 0;\n  let evenCount110 = 0;\n  let oddCount110 = 0;\n  let evenCount", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e .g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function countNums  which takes an array of integers and returns\n  th enumber ofeleme nts which has a sum o f d igits > 0.   If a numberis negative, then its first signed digit wi ll be negative:\n  e.g. -12 3 has signed digits -1,  2,  and 3. \n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let n = 0;\n  let sign = 1;\n  let signNum = 0;\n  let signNum2 = 1;\n  let signNum3 = 1;\n  let signNum4 = 1;\n  let signNum5 = 1;\n  let signNum6 = 1;\n  let signNum7 = 1;\n  let signNum8 = 1;\n  let signNum9 = 1;\n  let signNum10 = 1;\n  let signNum11 = 1;\n  let signNum12 = 1;\n  let signNum13 = 1;\n  let signNum14 = 1;\n  let signNum15 = 1;\n  let signNum16 = 1;\n  let signNum17 = 1;\n  let signNum18 = 1;\n  let signNum19 = 1;\n  let signNum20 = 1;\n  let signNum21 = 1;\n  let signNum22 = 1;\n  let signNum23 = 1;\n  let signNum24 = 1;\n  let signNum25 = 1;\n  let signNum26 = 1;\n  let signNum27 = 1;\n  let signNum28 = 1;\n  let signNum29 = 1;\n  let signNum30 = 1;\n  let signNum31 = 1;\n  let signNum32 = 1;\n  let signNum33 = 1;\n  let signNum34 = 1;\n  let signNum35 = 1;\n  let signNum36 = 1;\n  let signNum37 = 1;\n  let signNum38 = 1;\n  let signNum39 = 1;\n  let signNum40 = 1;\n  let signNum41 = 1;\n  let signNum42 = 1;\n  let signNum43 = 1;\n  let signNum44 = 1;\n  let signNum45 = 1;\n  let signNum46 = 1;\n  let signNum47 = 1;\n  let signNum48 = 1;\n  let signNum49 = 1;\n  let signNum50 = 1;\n  let signNum51 = 1;\n  let signNum52 = 1;\n  let signNum53 = 1;\n  let signNum54 = 1;\n  let signNum55 = 1;\n  let signNum56 = 1;\n  let signNum57 = 1;\n  let signNum58 = 1;\n  let signNum59 = 1;\n  let signNum60 = 1;\n  let signNum61 = 1;\n  let signNum62 = 1;\n  let signNum63 = 1;\n  let signNum64 = 1;\n  let signNum65 = 1;\n  let signNum66 = 1;\n  let signNum67 = 1;\n  let signNum68 = 1;\n  let signNum69 = 1;\n  let signNum70 = 1;\n  let signNum71 = 1;\n  let signNum72 = 1;\n  let signNum73 = 1;\n  let signNum74 = 1;\n  let signNum75 = 1;\n  let signNum76 = 1;\n  let signNum77 = 1;\n  let signNum78 = 1;\n  let signNum79 = 1;\n  let signNum80 = 1;\n  let signNum81 = 1;\n  let signNum82 = 1;\n  let signNum83 = 1;\n  let signNum84 = 1;\n  let signNum85 = 1;\n  let signNum86 = 1;\n  let signNum87 = 1;\n  let signNum88 = 1;\n  let signNum89 = 1;\n  let signNum90 = 1;\n  let signNum91 = 1;\n  let signNum92 = 1;\n  let signNum93 = 1;\n  let signNum94 = 1;\n  let signNum95 = 1;\n  let signNum96 = 1;\n  let signNum97 = 1;\n  let signNum98 = 1;\n  let signNum99 = 1;\n  let signNum100 = 1;\n  let signNum101 = 1;\n  let signNum102 = 1;\n  let signNum103 = 1;\n  let signNum104 = 1;\n  let signNum105 = 1;\n  let signNum106 = 1;\n  let signNum107 = 1;\n  let signNum108 = 1;\n  let signNum109 = 1;\n  let signNum110 = 1;\n  let signNum111 = 1;\n  let signNum112 = 1;\n  let signNum113 = 1;\n  let signNum114 = 1;\n  let signNum115 = 1;\n  let signNum116 = 1;\n  let signNum117 = 1;\n  let signNum118 = 1;\n  let signNum119 = 1;\n  let signNum120 = 1;\n  let signNum121 = 1;\n  let signNum122 = 1;\n  let signNum123 = 1;\n  let signNum124 = 1;\n  let signNum125 = 1;\n  let signNum126 = 1;\n  let signNum127 = 1;\n  let signNum128 = 1;\n  let signNum129 = 1;\n  let signNum130 = 1;\n  let signNum131 = 1;\n  let signNum132 = 1;\n  let signNum133 = 1;\n  let signNum134 = 1;\n  let signNum135 = 1;\n  let signNum136 = 1;\n  let signNum137 = 1;\n  let signNum138 = 1;\n  let signNum139 = 1;\n  let signNum140 = 1;\n  let signNum141 = 1;\n  let signNum142 = 1;\n  let signNum143 = 1;\n  let signNum144 = 1;\n  let signNum145 = 1;\n  let signNum146 = 1;\n  let signNum147 = 1;\n  let signNum148 = 1;\n  let signNum149 = 1;\n  let signNum150 = 1;\n  let signNum151 = 1;\n  let signNum152 = 1;\n  let signNum153 = 1;\n  let signNum154 = 1;\n  let signNum155 = 1;\n  let signNum156 = 1;\n  let signNum157 = 1;\n  let signNum158 = 1;\n  let signNum159 = 1;\n  let signNum160 = 1;\n  let signNum161 = 1;\n  let signNum162 = 1;\n  let signNum163 = 1;\n  let signNum164 = 1;\n  let signNum165 = 1;\n  let signNum166 = 1;\n  let signNum167 = 1;\n  let signNum168 = 1;\n  let signNum169 = 1;\n  let signNum170 = 1;\n  let signNum171 = 1;\n  let signNum172 = 1;\n  let signNum173 = 1;\n  let signNum174 = 1;\n  let signNum175 = 1;\n  let signNum176 = 1;\n  let signNum177 = 1;\n  let signNum178 = 1;\n  let signNum179 = 1;\n  let signNum180 = 1;\n  let signNum181 = 1;\n  let signNum182 = 1;\n  let signNum183 = 1;\n  let signNum184 = 1;\n  let signNum185 = 1;\n  let signNum186 = 1;\n  let signNum187 = 1;\n  let signNum188 = 1;\n  let signNum189 = 1;\n  let signNum190 = 1;\n  let signNum191 = 1;\n  let signNum192 = 1;\n  let signNum193 = 1;\n  let signNum194 = 1;\n  let signNum195 = 1;\n  let signNum196 = 1;\n  let signNum197 = 1;\n  let signNum198 = 1;\n  let signNum199 = 1;\n  let signNum200 = 1;\n  let signNum201 = 1;\n  let signNum202 = 1;\n  let signNum203 = 1;\n  let signNum204 = 1;\n  let signNum205 = 1;\n  let signNum206 = 1;\n  let signNum207 = 1;\n  let signNum208 = 1;\n  let signNum209 = 1;\n  let signNum210 = 1;\n  let signNum211 = 1;\n  let signNum212 = 1;\n  let signNum213 = 1;\n  let signNum214 = 1;\n  let signNum215 = 1;\n  let signNum216 = 1;\n  let signNum217 = 1;\n  let signNum218 = 1;\n  let signNum219 = 1;\n  let signNum220 = 1;\n  let signNum221 = 1;\n  let signNum222 = 1;\n  let signNum223 = 1;\n  let signNum224 = 1;\n  let signNum225 = 1;\n  let signNum226 = 1;\n  let signNum227 = 1;\n  let signNum228 = 1;\n  let signNum229 = 1;\n  let signNum230 = 1;\n  let signNum23", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We havean array 'arr'of N  integers arr[1], arr[2], ..., arr[N].The\n number sin the arr ay wi ll be randomly ordere d.Your taskis to determine  if\n  it is possible to get an array sorted  in non-decreasingorder b y performing \n  the fol low ing ope rationon the given array:\n      You are allowed to perform  ri ght s hift oper ation any number of times.\n  \n  One right shift operatio n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*We havean array 'arr'of N  integers arr[1], arr[2],..., arr[N].The\n number sin the arr ay wi ll be randomly ordere d.Your taskis to determine  if\n  it is possible to get an array sorted  in non-decreasingorder b y performing \n  the fol low ing ope rationon the given array:\n      You are allowed to perform  ri ght s hift oper ation any number of times.\n  \n  One right shift operatio n means shifting all elements of the array by o ne\n  position in the right direction. The last element of the  array will be moved to\n  the st arting position  in thearray i.e. 0th index. \n\n  If it i s possible to obtainthe sorted  arra y by pe rformingthe above operat i on then ret urntrue else return false.\n  If  the given array is empt y th en return true. \n\n Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let ret = true;\n  let n = arr.length;\n  let arr1 = arr.slice();\n  let arr2 = arr1.slice();\n  let arr3 = arr2.slice();\n  let arr4 = arr3.slice();\n  let arr5 = arr4.slice();\n  let arr6 = arr5.slice();\n  let arr7 = arr6.slice();\n  let arr8 = arr7.slice();\n  let arr9 = arr8.slice();\n  let arr10 = arr9.slice();\n  let arr11 = arr10.slice();\n  let arr12 = arr11.slice();\n  let arr13 = arr12.slice();\n  let arr14 = arr13.slice();\n  let arr15 = arr14.slice();\n  let arr16 = arr15.slice();\n  let arr17 = arr16.slice();\n  let arr18 = arr17.slice();\n  let arr19 = arr18.slice();\n  let arr20 = arr19.slice();\n  let arr21 = arr20.slice();\n  let arr22 = arr21.slice();\n  let arr23 = arr22.slice();\n  let arr24 = arr23.slice();\n  let arr25 = arr24.slice();\n  let arr26 = arr25.slice();\n  let arr27 = arr26.slice();\n  let arr28 = arr27.slice();\n  let arr29 = arr28.slice();\n  let arr30 = arr29.slice();\n  let arr31 = arr30.slice();\n  let arr32 = arr31.slice();\n  let arr33 = arr32.slice();\n  let arr34 = arr33.slice();\n  let arr35 = arr34.slice();\n  let arr36 = arr35.slice();\n  let arr37 = arr36.slice();\n  let arr38 = arr37.slice();\n  let arr39 = arr38.slice();\n  let arr40 = arr39.slice();\n  let arr41 = arr40.slice();\n  let arr42 = arr41.slice();\n  let arr43 = arr42.slice();\n  let arr44 = arr43.slice();\n  let arr45 = arr44.slice();\n  let arr46 = arr45.slice();\n  let arr47 = arr46.slice();\n  let arr48 = arr47.slice();\n  let arr49 = arr48.slice();\n  let arr50 = arr49.slice();\n  let arr51 = arr50.slice();\n  let arr52 = arr51.slice();\n  let arr53 = arr52.slice();\n  let arr54 = arr53.slice();\n  let arr55 = arr54.slice();\n  let arr56 = arr55.slice();\n  let arr57 = arr56.slice();\n  let arr58 = arr57.slice();\n  let arr59 = arr58.slice();\n  let arr60 = arr59.slice();\n  let arr61 = arr60.slice();\n  let arr62 = arr61.slice();\n  let arr63 = arr62.slice();\n  let arr64 = arr63.slice();\n  let arr65 = arr64.slice();\n  let arr66 = arr65.slice();\n  let arr67 = arr66.slice();\n  let arr68 = arr67.slice();\n  let arr69 = arr68.slice();\n  let arr70 = arr69.slice();\n  let arr71 = arr70.slice();\n  let arr72 = arr71.slice();\n  let arr73 = arr72.slice();\n  let arr74 = arr73.slice();\n  let arr75 = arr74.slice();\n  let arr76 = arr75.slice();\n  let arr77 = arr76.slice();\n  let arr78 = arr77.slice();\n  let arr79 = arr78.slice();\n  let arr80 = arr79.slice();\n  let arr81 = arr80.slice();\n  let arr82 = arr81.slice();\n  let arr83 = arr82.slice();\n  let arr84 = arr83.slice();\n  let arr85 = arr84.slice();\n  let arr86 = arr85.slice();\n  let arr87 = arr86.slice();\n  let arr88 = arr87.slice();\n  let arr89 = arr88.slice();\n  let arr90 = arr89.slice();\n  let arr91 = arr90.slice();\n  let arr92 = arr91.slice();\n  let arr93 = arr92.slice();\n  let arr94 = arr93.slice();\n  let arr95 = arr94.slice();\n  let arr96 = arr95.slice();\n  let arr97 = arr96.slice();\n  let arr98 = arr97.slice();\n  let arr99 = arr98.slice();\n  let arr100 = arr99.slice();\n  let arr101 = arr100.slice();\n  let arr102 = arr101.slice();\n  let arr103 = arr102.slice();\n  let arr104 = arr103.slice();\n  let arr105 = arr104.slice();\n  let arr106 = arr105.slice();\n  let arr107 = arr106.slice();\n  let arr108 = arr107.slice();\n  let arr109 = arr108.slice();\n  let arr110 = arr109.slice();\n  let arr111 = arr110.slice();\n  let arr112 = arr111.slice();\n  let arr113 = arr112.slice();\n  let arr114 = arr113.slice();\n  let arr115 = arr114.slice();\n  let arr116 = arr115.slice();\n  let arr117 = arr116.slice();\n  let arr118 = arr117.slice();\n  let arr119 = arr118.slice();\n  let arr120 = arr119.slice();\n  let arr121 = arr120.slice();\n  let arr122 = arr121.slice();\n  let arr123 = arr122.slice();\n  let arr124 = arr123.slice();\n  let arr125 = arr124.slice();\n  let arr126 = arr125.slice();\n  let arr127 = arr126.slice();\n  let arr128 = arr127.slice();\n  let arr129 = arr128.slice();\n  let arr", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X OR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X OR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X XOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X XOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X XOR on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/* Inputa re two stringsa an d b consisting only of 1s and 0s.\n  Perform binary  X AND on thes e inp uts and return result  al soas a st ring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorandandandandandandand = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += ", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only even nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be even, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i] % 2!== 0) {\n        lst1.splice(i, 1);\n      }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      if (lst2[i] % 2!== 0) {\n        lst2.splice(i, 1);\n      }\n    }\n    result = lst1.length === lst2.length? \"YES\" : \"NO\";\n  }\n  return result;\n};\n\n/*\n  In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only odd nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be odd, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOddEven = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i] % 2!== 0) {\n        lst1.splice(i, 1);\n      }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      if (lst2[i] % 2!== 0) {\n        lst2.splice(i, 1);\n      }\n    }\n    result = lst1.length === lst2.length? \"YES\" : \"NO\";\n  }\n  return result;\n};\n\n/*\n  In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only odd nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be odd, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOddEvenOdd = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i] % 2!== 0) {\n        lst1.splice(i, 1);\n      }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      if (lst2[i] % 2!== 0) {\n        lst2.splice(i, 1);\n      }\n    }\n    result = lst1.length === lst2.length? \"YES\" : \"NO\";\n  }\n  return result;\n};\n\n/*\n  In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only odd nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be odd, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOddEvenOddOdd = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i] % 2!== 0) {\n        lst1.splice(i, 1);\n      }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      if (lst2[i] % 2!== 0) {\n        lst2.splice(i, 1);\n      }\n    }\n    result = lst1.length === lst2.length? \"YES\" : \"NO\";\n  }\n  return result;\n};\n\n/*\n  In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only odd nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be odd, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOddEvenOddOddOdd = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i] % 2!== 0) {\n        lst1.splice(i, 1);\n      }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      if (lst2[i] % 2!== 0) {\n        lst2.splice(i, 1);\n      }\n    }\n    result = lst1.length === lst2.length? \"YES\" : \"NO\";\n  }\n  return result;\n};\n\n/*\n  In thisproblem, you will i mplement a function that takes two lists of number s, \n  and det ermin es whether it is poss ibl e to perfo rm an exchangeof elements\n  between them to make lst1 a l ist of only odd nu mbers.  There is no limit onthe  number ofexchanged elements between lst1 and lst2.\n  If it is po ssi ble t o exchang e elements between the lst1 and lst2 to make\n  all the e lements of lst1 to be odd, return \"YES\".\n  Oth erwise, return\"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, ", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let result = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    let count = result[letter] = result[letter] || 0;\n    count++;\n  }\n  return result;\n};\n\n/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst count = (test) => {\n  let result = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    let count = result[letter] = result[letter] || 0;\n    count++;\n  }\n  return result;\n};\n\n/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLetters = (test) => {\n  let result = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    let count = result[letter] = result[letter] || 0;\n    count++;\n  }\n  return result;\n};\n\n/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersLetter = (test) => {\n  let result = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    let count = result[letter] = result[letter] || 0;\n    count++;\n  }\n  return result;\n};\n\n/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersLetterLetterLetter = (test) => {\n  let result = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    let count = result[letter] = result[letter] || 0;\n    count++;\n  }\n  return result;\n};\n\n/*Given astring representing  a space separated lowercase letters, return a dic ti onary\n of  theletter with the mostrep etition an d containing th e corresponding count.\n  If several letters  have the sameoccu rrence,  return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countLettersLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n W e are given two str ings s and c, you have to deleted all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n W e are given two str ings s and c, you have to deleted all the characte rs  in s that  areequal to any characte r i n c\n  then check if the r esult string is palindrome.\n  A string is c alled palindrome if  it rea ds the same backward as  fo rward. You should return a tuple containingthe result string an d t rue/f alse forthe check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = \"\";\n  let reverse = \"\";\n  let reversedString = \"\";\n  let reversedStringLength = 0;\n  let reversedStringIndex = 0;\n  let reversedStringIndex2 = 0;\n  let reversedStringIndex3 = 0;\n  let reversedStringIndex4 = 0;\n  let reversedStringIndex5 = 0;\n  let reversedStringIndex6 = 0;\n  let reversedStringIndex7 = 0;\n  let reversedStringIndex8 = 0;\n  let reversedStringIndex9 = 0;\n  let reversedStringIndex10 = 0;\n  let reversedStringIndex11 = 0;\n  let reversedStringIndex12 = 0;\n  let reversedStringIndex13 = 0;\n  let reversedStringIndex14 = 0;\n  let reversedStringIndex15 = 0;\n  let reversedStringIndex16 = 0;\n  let reversedStringIndex17 = 0;\n  let reversedStringIndex18 = 0;\n  let reversedStringIndex19 = 0;\n  let reversedStringIndex20 = 0;\n  let reversedStringIndex21 = 0;\n  let reversedStringIndex22 = 0;\n  let reversedStringIndex23 = 0;\n  let reversedStringIndex24 = 0;\n  let reversedStringIndex25 = 0;\n  let reversedStringIndex26 = 0;\n  let reversedStringIndex27 = 0;\n  let reversedStringIndex28 = 0;\n  let reversedStringIndex29 = 0;\n  let reversedStringIndex30 = 0;\n  let reversedStringIndex31 = 0;\n  let reversedStringIndex32 = 0;\n  let reversedStringIndex33 = 0;\n  let reversedStringIndex34 = 0;\n  let reversedStringIndex35 = 0;\n  let reversedStringIndex36 = 0;\n  let reversedStringIndex37 = 0;\n  let reversedStringIndex38 = 0;\n  let reversedStringIndex39 = 0;\n  let reversedStringIndex40 = 0;\n  let reversedStringIndex41 = 0;\n  let reversedStringIndex42 = 0;\n  let reversedStringIndex43 = 0;\n  let reversedStringIndex44 = 0;\n  let reversedStringIndex45 = 0;\n  let reversedStringIndex46 = 0;\n  let reversedStringIndex47 = 0;\n  let reversedStringIndex48 = 0;\n  let reversedStringIndex49 = 0;\n  let reversedStringIndex50 = 0;\n  let reversedStringIndex51 = 0;\n  let reversedStringIndex52 = 0;\n  let reversedStringIndex53 = 0;\n  let reversedStringIndex54 = 0;\n  let reversedStringIndex55 = 0;\n  let reversedStringIndex56 = 0;\n  let reversedStringIndex57 = 0;\n  let reversedStringIndex58 = 0;\n  let reversedStringIndex59 = 0;\n  let reversedStringIndex60 = 0;\n  let reversedStringIndex61 = 0;\n  let reversedStringIndex62 = 0;\n  let reversedStringIndex63 = 0;\n  let reversedStringIndex64 = 0;\n  let reversedStringIndex65 = 0;\n  let reversedStringIndex66 = 0;\n  let reversedStringIndex67 = 0;\n  let reversedStringIndex68 = 0;\n  let reversedStringIndex69 = 0;\n  let reversedStringIndex70 = 0;\n  let reversedStringIndex71 = 0;\n  let reversedStringIndex72 = 0;\n  let reversedStringIndex73 = 0;\n  let reversedStringIndex74 = 0;\n  let reversedStringIndex75 = 0;\n  let reversedStringIndex76 = 0;\n  let reversedStringIndex77 = 0;\n  let reversedStringIndex78 = 0;\n  let reversedStringIndex79 = 0;\n  let reversedStringIndex80 = 0;\n  let reversedStringIndex81 = 0;\n  let reversedStringIndex82 = 0;\n  let reversedStringIndex83 = 0;\n  let reversedStringIndex84 = 0;\n  let reversedStringIndex85 = 0;\n  let reversedStringIndex86 = 0;\n  let reversedStringIndex87 = 0;\n  let reversedStringIndex88 = 0;\n  let reversedStringIndex89 = 0;\n  let reversedStringIndex90 = 0;\n  let reversedStringIndex91 = 0;\n  let reversedStringIndex92 = 0;\n  let reversedStringIndex93 = 0;\n  let reversedStringIndex94 = 0;\n  let reversedStringIndex95 = 0;\n  let reversedStringIndex96 = 0;\n  let reversedStringIndex97 = 0;\n  let reversedStringIndex98 = 0;\n  let reversedStringIndex99 = 0;\n  let reversedStringIndex100 = 0;\n  let reversedStringIndex101 = 0;\n  let reversedStringIndex102 = 0;\n  let reversedStringIndex103 = 0;\n  let reversedStringIndex104 = 0;\n  let reversedStringIndex105 = 0;\n  let reversedStringIndex106 = 0;\n  let reversedStringIndex107 = 0;\n  let reversedStringIndex108 = 0;\n  let reversedStringIndex109 = 0;\n  let reversedStringIndex110 = 0;\n  let reversedStringIndex111 = 0;\n  let reversedStringIndex112 = 0;\n  let reversedStringIndex113 = 0;\n  let reversedStringIndex114 = 0;\n  let reversedStringIndex115 = 0;\n  let reversedStringIndex116 = 0;\n  let reversedStringIndex117 = 0;\n  let reversedStringIndex118 = 0;\n  let reversedStringIndex119 = 0;\n  let reversedStringIndex120 = 0;\n  let reversedStringIndex121 = 0;\n  let reversedStringIndex122 = 0;\n  let reversedStringIndex123 = 0;\n  let reversedStringIndex124 = 0;\n  let reversedStringIndex125 = 0;\n  let reversedStringIndex126 = 0;\n  let reversedStringIndex127 = 0;\n  let reversedStringIndex128 = 0;\n  let reversedStringIndex129 = 0;\n  let reversedStringIndex130 = 0;\n  let reversedStringIndex131 = 0;\n  let reversedStringIndex132 = 0;\n  let reversedStringIndex133 = 0;\n  let reversedStringIndex134 = 0;\n  let reversedStringIndex135 = 0;\n  let reversedStringIndex136 = 0;\n  let reversedStringIndex137 = 0;\n  let reversedStringIndex138 = 0;\n  let reversedStringIndex139 = 0;\n  let reversedStringIndex140 = 0;\n  let reversedStringIndex141 = 0;\n  let reversedStringIndex142 = 0;\n  let reversedStringIndex143 = 0;\n  let reversedStringIndex144 = 0;\n  let reversedStringIndex145 = 0;\n  let reversedStringIndex146 = 0;\n  let reversedStringIndex147 = 0;\n  let reversedStringIndex148 = 0;\n  let reversedStringIndex149 = 0;\n  let reversedStringIndex150 = 0;\n  let reversedStringIndex151 = 0;\n  let reversedStringIndex152 = 0;\n  let reversedStringIndex153 = 0;\n  let reversedStringIndex154 = 0;\n  let reversedStringIndex155 = 0;\n  let reversedStringIndex156 = 0;\n  let reversedStringIndex157 = 0;\n  let reversedStringIndex158 = 0;\n  let reversedStringIndex159 = 0;\n  let reversedStringIndex160 = 0;\n  let reversedStringIndex161 = 0;\n  let reversedStringIndex162 = 0;\n  let reversedStringIndex163 = 0;\n  let reversedStringIndex164 = 0;\n  let reversedStringIndex165 = 0;\n  let reversedStringIndex166 = 0;\n  let reversedStringIndex167 = 0;\n  let reversedStringIndex168 = 0;\n  let reversedStringIndex169 = 0;\n  let reversed", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of oddelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of odddigitsin the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of oddelements in the\n  string i of the input.\" w here all the i's sh ould be  replaced by the number \n of odddigitsin the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = []\n  let numOdd = 0\n  let numOddDigits = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      numOddDigits = numOddDigits + 1\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      numOdd = numOdd + 1\n    }\n  }\n  result.push(numOddDigits)\n  result.push(numOdd)\n  return result\n}\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of evenelements in the string i of the input.\" w here all the i's sh ould be  replaced by the number \n of evendigitsin the i'th string of the input.\" \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let result = []\n  let numEven = 0\n  let numEvenDigits = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      numEvenDigits = numEvenDigits + 1\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      numEven = numEven + 1\n    }\n  }\n  result.push(numEvenDigits)\n  result.push(numEven)\n  return result\n}\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of oddelements in the string i of the input.\" w here all the i's sh ould be  replaced by the number \n of odddigitsin the i'th string of the input.\" \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = []\n  let numOdd = 0\n  let numOddDigits = 0\n  let numEven = 0\n  let numEvenDigits = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      numOddDigits = numOddDigits + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numOdd = numOdd + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numEvenDigits = numEvenDigits + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numEven = numEven + 1\n    }\n  }\n  result.push(numOddDigits)\n  result.push(numOdd)\n  result.push(numEvenDigits)\n  result.push(numEven)\n  return result\n}\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of evenelements in the string i of the input.\" w here all the i's sh ould be  replaced by the number \n of evendigitsin the i'th string of the input.\" \n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let result = []\n  let numEven = 0\n  let numEvenDigits = 0\n  let numOdd = 0\n  let numOddDigits = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      numEvenDigits = numEvenDigits + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numEven = numEven + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numOddDigits = numOddDigits + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numOdd = numOdd + 1\n    }\n  }\n  result.push(numEvenDigits)\n  result.push(numEven)\n  result.push(numOddDigits)\n  result.push(numOdd)\n  return result\n}\n\n/*Given alist of strings, wh ere each string consists of only digits, return ali st.\n  Each  elem ent i of the output s hou ldbe \"the number of oddelements in the string i of the input.\" w here all the i's sh ould be  replaced by the number \n of odddigitsin the i'th string of the input.\" \n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenOddCount = (lst) => {\n  let result = []\n  let numOdd = 0\n  let numOddDigits = 0\n  let numEven = 0\n  let numEvenDigits = 0\n  let numOddOdd = 0\n  let numOddOddDigits = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].match(/\\d/)) {\n      numOddDigits = numOddDigits + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numOdd = numOdd + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numOddOdd = numOddOdd + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numOddOddDigits = numOddOddDigits + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numOddOdd = numOddOdd + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numEvenDigits = numEvenDigits + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numEven = numEven + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numOddOddDigits = numOddOddDigits + 1\n    }\n    if (lst[i].match(/\\d/)) {\n      numOddOd", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Givena n array of integers  nums, findthe minimum sum of any non-empty sub-a rr ay\n  ofnu ms.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array of integers  nums, findthe minimum sum of any non-empty sub-a rr ay\n  ofnu ms.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given a sorted array nums, return its kth smallest element.\n  Example\n  kthSmallestElement([3, 6, 1, 4, 2, 5]) == 6\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, 5, 2, 1]) == 5\n  kthSmallestElement([3, 6, 1, 4, 2, ", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are  given a rectangula r grid of wells. Each row represents a single well ,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a rectangula r grid of wells. Each row represents a single well,  and each  1 in  a row represents a s ing leunit of water.\n  Eachwell has a corresponding bucket that can be  used to extract wa ter fro m it, \n  and all bucket s h ave the same capacity.\n  Your task is to use the buckets to emptythe well s.\n  Outp ut thenumber of times you need tolower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += 1;\n      }\n    }\n  }\n  return result >= capacity? result : maxFill(grid, capacity - result);\n};\n\n// console.log(maxFill(grid, 1));\n// console.log(maxFill(grid, 2));\n// console.log(maxFill(grid, 5));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(grid, 0));\n// console.log(maxFill(", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this  Kata, you have tosort an array of non-negative integers according t o  number o f one s in their binary rep res entation i n ascending ord er.\n  For similar number of ones, sort base d on decimal value. \n\n  Itmust be implemented lik e t his:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this  Kata, you have tosort an array of non-negative integers according t o  number o f one s in their binary rep res entation i n ascending ord er.\n  For similar number of ones, sort base d on decimal value. \n\n  Itmust be implemented lik e t his:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let len = arr.length;\n  let i = 0;\n  let j = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given astring s and anatu ral number n, you have been tasked to implement \n a  functionthatreturns a list of all  wo rds from s tring s that co ntain exactly \n  n consonants, in order the se words appear inthe str ing s.\n  If the strings i s empty then the function should return an empty list.\n  Note: you  ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given astring s and anatu ral number n, you have been tasked to implement \n a  functionthatreturns a list of all  wo rds from s tring s that co ntain exactly \n  n consonants, in order the se words appear inthe str ing s.\n  If the strings i s empty then the function should return an empty list.\n  Note: you  ma yass ume the i nput string containsonly letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let arr = []\n  let str = \"\"\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You aregiven a word. Yourtask is to find the closest vowel that stands betw ee n \n  two c onson ants from the right s ide  of the wo rd (case sensit ive).\n  \n  Vowels in the beginning and endi ng doesn't count. R eturn e mpty string if you didn 't  findanyvowel met the above condition. \n\n You may assume thatthe give n stringcontains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a word. Yourtask is to find the closest vowel that stands betw ee n \n  two c onson ants from the right s ide  of the wo rd (case sensit ive).\n  \n  Vowels in the beginning and endi ng doesn't count. R eturn e mpty string if you didn 't  findanyvowel met the above condition. \n\n You may assume thatthe give n stringcontains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayLength2 = vowelsArray.length;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayLength3 = vowelsArray.length;\n  let vowelsArrayIndex4 = 0;\n  let vowelsArrayLength4 = vowelsArray.length;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayLength5 = vowelsArray.length;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayLength6 = vowelsArray.length;\n  let vowelsArrayIndex7 = 0;\n  let vowelsArrayLength7 = vowelsArray.length;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayLength8 = vowelsArray.length;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayLength9 = vowelsArray.length;\n  let vowelsArrayIndex10 = 0;\n  let vowelsArrayLength10 = vowelsArray.length;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayLength11 = vowelsArray.length;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayLength12 = vowelsArray.length;\n  let vowelsArrayIndex13 = 0;\n  let vowelsArrayLength13 = vowelsArray.length;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayLength14 = vowelsArray.length;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayLength15 = vowelsArray.length;\n  let vowelsArrayIndex16 = 0;\n  let vowelsArrayLength16 = vowelsArray.length;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayLength17 = vowelsArray.length;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayLength18 = vowelsArray.length;\n  let vowelsArrayIndex19 = 0;\n  let vowelsArrayLength19 = vowelsArray.length;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayLength20 = vowelsArray.length;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayLength21 = vowelsArray.length;\n  let vowelsArrayIndex22 = 0;\n  let vowelsArrayLength22 = vowelsArray.length;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayLength23 = vowelsArray.length;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayLength24 = vowelsArray.length;\n  let vowelsArrayIndex25 = 0;\n  let vowelsArrayLength25 = vowelsArray.length;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayLength26 = vowelsArray.length;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayLength27 = vowelsArray.length;\n  let vowelsArrayIndex28 = 0;\n  let vowelsArrayLength28 = vowelsArray.length;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayLength29 = vowelsArray.length;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayLength30 = vowelsArray.length;\n  let vowelsArrayIndex31 = 0;\n  let vowelsArrayLength31 = vowelsArray.length;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayLength32 = vowelsArray.length;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayLength33 = vowelsArray.length;\n  let vowelsArrayIndex34 = 0;\n  let vowelsArrayLength34 = vowelsArray.length;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayLength35 = vowelsArray.length;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayLength36 = vowelsArray.length;\n  let vowelsArrayIndex37 = 0;\n  let vowelsArrayLength37 = vowelsArray.length;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayLength38 = vowelsArray.length;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayLength39 = vowelsArray.length;\n  let vowelsArrayIndex40 = 0;\n  let vowelsArrayLength40 = vowelsArray.length;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayLength41 = vowelsArray.length;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayLength42 = vowelsArray.length;\n  let vowelsArrayIndex43 = 0;\n  let vowelsArrayLength43 = vowelsArray.length;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayLength44 = vowelsArray.length;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayLength45 = vowelsArray.length;\n  let vowelsArrayIndex46 = 0;\n  let vowelsArrayLength46 = vowelsArray.length;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayLength47 = vowelsArray.length;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayLength48 = vowelsArray.length;\n  let vowelsArrayIndex49 = 0;\n  let vowelsArrayLength49 = vowelsArray.length;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayLength50 = vowelsArray.length;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayLength51 = vowelsArray.length;\n  let vowelsArrayIndex52 = 0;\n  let vowelsArrayLength52 = vowelsArray.length;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayLength53 = vowelsArray.length;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayLength54 = vowelsArray.length;\n  let vowelsArrayIndex55 = 0;\n  let vowelsArrayLength55 = vowelsArray.length;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayLength56 = vowelsArray.length;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayLength57 = vowelsArray.length;\n  let vowelsArrayIndex58 = 0;\n  let vowelsArrayLength58 = vowelsArray.length;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayLength59 = vowelsArray.length;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayLength60 = vowelsArray.length;\n  let vowelsArrayIndex61 = 0;\n  let vowelsArrayLength61 = vowelsArray.length;\n  let vowelsArrayIndex62 = 0;\n  let vowelsArrayLength62 = vowelsArray.length;\n  let vowelsArrayIndex63 = 0;\n  let vowelsArrayLength63 = vowelsArray.length;\n  let vowelsArrayIndex64 = 0;\n  let vowelsArrayLength64 = vowelsArray.length;\n  let vowelsArrayIndex65 = 0;\n  let vowelsArrayLength65 = vowelsArray.length;\n  let vowelsArrayIndex66 = 0;\n  let vowelsArrayLength66 = vowelsArray.length;\n  let vowelsArrayIndex67 = 0;\n  let vowelsArrayLength67 = vowelsArray.length;\n  let vowelsArray", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are  given a list of tw o strings, both strings consist of open  parenthe se s '(' or c loseparentheses ')' only. \n Your job i s to check if i t is possible to concatenate the two string s in\n  some order,that th e resulting string will  be  good. Astring S is considered to be good if and only if all pa ren these s in S\n are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You are  given a list of tw o strings, both strings consist of open  parenthe se s '(' or c loseparentheses ')' only. \n Your job i s to check if i t is possible to concatenate the two string s in\n  some order,that th e resulting string will  be  good. Astring S is considered to be good if and only if all pa ren these s in S\n are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No';\n  let count = 0;\n  let isBalanced = false;\n  let isOpenParen = false;\n  let isCloseParen = false;\n  let isOpenParenParen = false;\n  let isCloseParenParen = false;\n  let isOpenParenParenParen = false;\n  let isCloseParenParenParen = false;\n  let isOpenParenParenParenParen = false;\n  let isCloseParenParenParenParen = false;\n  let isOpenParenParenParenParenParen = false;\n  let isCloseParenParenParenParen = false;\n  let isOpenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParenParen = false;\n  let isOpenParenParenParenParenParenParenParen = false;\n  let isCloseParenParenParenParenParenParen = false;\n  let is", "passed": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out oflist of strings, re turn the longest one. Return the first onein case  o f multiple \n  st rings of the same len gth . Return n ull in case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Out oflist of strings, re turn the longest one. Return the first onein case  o f multiple \n  st rings of the same len gth. Return n ull in case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestLength = 0;\n  let longestString = '';\n  let longestStringLength = 0;\n  let longestStringIndex = 0;\n\n  for (let i = 0; i < strings.length; i++) {\n    let stringLength = strings[i].length;\n    if (stringLength > longestStringLength) {\n      longestString = strings[i];\n      longestStringLength = stringLength;\n      longestStringIndex = i;\n    }\n  }\n\n  return longestString;\n};\n\n/* Given a string, return its first letter capitalized. \n  >>> capitalize('hello')\n  'Hello'\n  >>> capitalize('Hello World')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter lowercase. \n  >>> lowercase('hello')\n  'hello'\n  >>> lowercase('Hello World')\n  'hello world'\n  */\nconst lowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter uppercase. \n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('Hello World')\n  'HELLO WORLD'\n  */\nconst uppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter capitalized. \n  >>> capitalize('hello')\n  'HELLO'\n  >>> capitalize('Hello World')\n  'HELLO WORLD'\n  */\nconst capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter lowercase. \n  >>> lowercase('hello')\n  'hello'\n  >>> lowercase('Hello World')\n  'hello world'\n  */\nconst lowercaseFirstLetter = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter uppercase. \n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('Hello World')\n  'HELLO WORLD'\n  */\nconst uppercaseFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter capitalized. \n  >>> capitalize('hello')\n  'HELLO'\n  >>> capitalize('Hello World')\n  'HELLO WORLD'\n  */\nconst capitalizeFirstLetterUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter lowercase. \n  >>> lowercase('hello')\n  'hello'\n  >>> lowercase('Hello World')\n  'hello world'\n  */\nconst lowercaseFirstLetterUppercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter uppercase. \n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('Hello World')\n  'HELLO WORLD'\n  */\nconst uppercaseFirstLetterUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter capitalized. \n  >>> capitalize('hello')\n  'HELLO'\n  >>> capitalize('Hello World')\n  'HELLO WORLD'\n  */\nconst capitalizeFirstLetterUppercaseFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter lowercase. \n  >>> lowercase('hello')\n  'hello'\n  >>> lowercase('Hello World')\n  'hello world'\n  */\nconst lowercaseFirstLetterUppercaseFirstLetter = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter uppercase. \n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('Hello World')\n  'HELLO WORLD'\n  */\nconst uppercaseFirstLetterUppercaseFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter capitalized. \n  >>> capitalize('hello')\n  'HELLO'\n  >>> capitalize('Hello World')\n  'HELLO WORLD'\n  */\nconst capitalizeFirstLetterUppercaseFirstLetterUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter lowercase. \n  >>> lowercase('hello')\n  'hello'\n  >>> lowercase('Hello World')\n  'hello world'\n  */\nconst lowercaseFirstLetterUppercaseFirstLetterUppercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter uppercase. \n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('Hello World')\n  'HELLO WORLD'\n  */\nconst uppercaseFirstLetterUppercaseFirstLetterUppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter capitalized. \n  >>> capitalize('hello')\n  'HELLO'\n  >>> capitalize('Hello World')\n  'HELLO WORLD'\n  */\nconst capitalizeFirstLetterUppercaseFirstLetterUppercaseFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter uppercase. \n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('Hello World')\n  'HELLO WORLD'\n  */\nconst uppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter capitalized. \n  >>> capitalize('hello')\n  'HELLO'\n  >>> capitalize('Hello World')\n  'HELLO WORLD'\n  */\nconst capitalizeFirstLetterUppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter uppercase. \n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('Hello World')\n  'HELLO WORLD'\n  */\nconst uppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter capitalized. \n  >>> capitalize('hello')\n  'HELLO'\n  >>> capitalize('Hello World')\n  'HELLO WORLD'\n  */\nconst capitalizeFirstLetterUppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter uppercase. \n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('Hello World')\n  'HELLO WORLD'\n  */\nconst uppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetterUppercaseFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Given a string, return its first letter uppercase. \n  >>> uppercase('hello')\n  'HELLO'\n  >>> uppercase('Hello World')\n  'HELLO WORLD'\n  */\nconst uppercaseFirst", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Givena n array arr ofinte gers and a positive integer k, return asorted lis t\n  of leng th kwith the maximum k nu mbe rsin arr. \n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array arr ofinte gers and a positive integer k, return asorted lis t\n  of leng th kwith the maximum k nu mbe rsin arr. \n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [arr[maxIndex], maxIndex];\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/Java-Solution-for-the-Problem\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/discuss/7241/", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given anon-empty listof i ntegers, return the sum of all of the odd elements  t hat arein  even  positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n\n},{}],4:[function(require,module,exports){\n/*Given a non-empty list of integers, return its maximum sum.\n  \n\n  Examples\n  maximum([5, 8, 7, 1]) ==> 12\n  maximum([3, 3, 3, 3, 3]) ==> 9\n  maximum([30, 13, 24, 321]) ==> 321\n  */\nconst maximum = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maximum;\n\n},{}],5:[function(require,module,exports){\n/*Given a non-empty list of integers, return its minimum sum.\n  \n\n  Examples\n  minimum([5, 8, 7, 1]) ==> 1\n  minimum([3, 3, 3, 3, 3]) ==> 3\n  minimum([30, 13, 24, 321]) ==> 321\n  */\nconst minimum = (lst) => {\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = minimum;\n\n},{}],6:[function(require,module,exports){\n/*Given a non-empty list of integers, return its median of three elements.\n  \n\n  Examples\n  median([5, 8, 7, 1]) ==> 5\n  median([3, 3, 3, 3, 3]) ==> 3\n  median([30, 13, 24, 321]) ==> 321\n  */\nconst median = (lst) => {\n  let mid = Math.floor(lst.length / 2);\n  let left = lst[mid];\n  let right = lst[mid+1];\n  let midVal = left + right;\n  if (midVal % 2!== 0) {\n    midVal += 1;\n  }\n  return midVal;\n};\n\nmodule.exports = median;\n\n},{}],7:[function(require,module,exports){\n/*Given a non-empty list of integers, return its median of three elements.\n  \n\n  Examples\n  median([5, 8, 7, 1]) ==> 5\n  median([3, 3, 3, 3, 3]) ==> 3\n  median([30, 13, 24, 321]) ==> 321\n  */\nconst median = (lst) => {\n  let mid = Math.floor(lst.length / 2);\n  let left = lst[mid];\n  let right = lst[mid+1];\n  let midVal = left + right;\n  if (midVal % 2!== 0) {\n    midVal += 1;\n  }\n  let midVal2 = left + right;\n  if (midVal2 % 2!== 0) {\n    midVal2 += 1;\n  }\n  return midVal2;\n};\n\nmodule.exports = median;\n\n},{}],8:[function(require,module,exports){\n/*Given a non-empty list of integers, return its median of three elements.\n  \n\n  Examples\n  median([5, 8, 7, 1]) ==> 5\n  median([3, 3, 3, 3, 3]) ==> 3\n  median([30, 13, 24, 321]) ==> 321\n  */\nconst median = (lst) => {\n  let mid = Math.floor(lst.length / 2);\n  let left = lst[mid];\n  let right = lst[mid+1];\n  let midVal = left + right;\n  if (midVal % 2!== 0) {\n    midVal += 1;\n  }\n  let midVal2 = left + right;\n  if (midVal2 % 2!== 0) {\n    midVal2 += 1;\n  }\n  let midVal3 = left + right;\n  if (midVal3 % 2!== 0) {\n    midVal3 += 1;\n  }\n  return midVal3;\n};\n\nmodule.exports = median;\n\n},{}],9:[function(require,module,exports){\n/*Given a non-empty list of integers, return its median of three elements.\n  \n\n  Examples\n  median([5, 8, 7, 1]) ==> 5\n  median([3, 3, 3, 3, 3]) ==> 3\n  median([30, 13, 24, 321]) ==> 321\n  */\nconst median = (lst) => {\n  let mid = Math.floor(lst.length / 2);\n  let left = lst[mid];\n  let right = lst[mid+1];\n  let midVal = left + right;\n  if (midVal % 2!== 0) {\n    midVal += 1;\n  }\n  let midVal2 = left + right;\n  if (midVal2 % 2!== 0) {\n    midVal2 += 1;\n  }\n  let midVal3 = left + right;\n  if (midVal3 % 2!== 0) {\n    midVal3 += 1;\n  }\n  return midVal3;\n};\n\nmodule.exports = median;\n\n},{}],10:[function(require,module,exports){\n/*Given a non-empty list of integers, return its median of three elements.\n  \n\n  Examples\n  median([5, 8, 7, 1]) ==> 5\n  median([3, 3, 3, 3, 3]) ==> 3\n  median([30, 13, 24, 321]) ==> 321\n  */\nconst median = (lst) => {\n  let mid = Math.floor(lst.length / 2);\n  let left = lst[mid];\n  let right = lst[mid+1];\n  let midVal = left + right;\n  if (midVal % 2!== 0) {\n    midVal += 1;\n  }\n  let midVal2 = left + right;\n  if (midVal2 % 2!== 0) {\n    midVal2 += 1;\n  }\n  let midVal3 = left + right;\n  if (midVal3 % 2!== 0) {\n    midVal3 += 1;\n  }\n  return midVal3;\n};\n\nmodule.exports = median;\n\n},{}],11:[function(require,module,exports){\n/*Given a non-empty list of integers, return its median of three elements.\n  \n\n  Examples\n  median([5, 8, 7, 1]) ==> 5\n  median([3, 3, 3, 3, 3]) ==> 3\n  median([30, 13, 24, 321]) ==> 321\n  */\nconst median = (lst) => {\n  let mid = Math.floor(lst.length / 2);\n  let left = lst[mid];\n  let right = lst[mid+1];\n  let midVal = left + right;\n  if (midVal % 2!== 0) {\n    midVal += 1;\n  }\n  let midVal2 = left + right;\n  if (midVal2 % 2!== 0) {\n    midVal2 += 1;\n  }\n  let midVal3 = left + right;\n  if (midVal3 % 2!== 0) {\n    midVal3 += 1;\n  }\n  return midVal3;\n};\n\nmodule.exports = median;\n\n},{}],12:[function(require,module,exports){\n/*Given a non-empty list of integers, return its median of three elements.\n  \n\n  Examples\n  median([5, 8, 7, 1]) ==> 5\n  median([3, 3, 3, 3, 3]) ==> 3\n  median([30, 13, 24, 321]) ==> 321\n  */\nconst median = (lst) => {\n  let mid = Math.floor(lst.length / 2);\n  let left = lst[mid];\n  let right = lst[mid+1];\n  let midVal = left + right;\n  if (midVal % 2!== 0) {\n    midVal += 1;\n  }\n  let midVal2 = left + right;\n  if (midVal2 % 2!== 0) {\n    midVal2 += 1;\n  }\n  let midVal3 = left + right;\n  if (midVal3 % 2!== 0) {\n    midVal3 += 1;\n  }\n  return midVal3;\n};\n\nmodule.exports = median;\n\n},{}],13:", "passed": 0}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givena  non-empty array of  integers arr and an integer k, return\n the sum o fthe elemen ts wi th at most two digits  fr omthe fir st k elements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  non-empty array of  integers arr and an integer k, return\n the sum o fthe elemen ts wi th at most two digits  fr omthe fir st k elements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += arr[i];\n    if (sum % 10 === 0) {\n      sum -= sum % 10;\n    }\n  }\n  return sum % 10 === 0? sum : sum + addElements(arr.slice(1), k);\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElements = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === currentMax) {\n      continue;\n    }\n    if (nums[i] < currentMax) {\n      currentMax = nums[i];\n      result.push(currentMax);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElementsII = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === currentMax) {\n      continue;\n    }\n    if (nums[i] < currentMax) {\n      currentMax = nums[i];\n      result.push(currentMax);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElementsIII = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === currentMax) {\n      continue;\n    }\n    if (nums[i] < currentMax) {\n      currentMax = nums[i];\n      result.push(currentMax);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElementsIV = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === currentMax) {\n      continue;\n    }\n    if (nums[i] < currentMax) {\n      currentMax = nums[i];\n      result.push(currentMax);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElementsV = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === currentMax) {\n      continue;\n    }\n    if (nums[i] < currentMax) {\n      currentMax = nums[i];\n      result.push(currentMax);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElementsW = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === currentMax) {\n      continue;\n    }\n    if (nums[i] < currentMax) {\n      currentMax = nums[i];\n      result.push(currentMax);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElementsX = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === currentMax) {\n      continue;\n    }\n    if (nums[i] < currentMax) {\n      currentMax = nums[i];\n      result.push(currentMax);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElementsY = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === currentMax) {\n      continue;\n    }\n    if (nums[i] < currentMax) {\n      currentMax = nums[i];\n      result.push(currentMax);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElementsZ = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === currentMax) {\n      continue;\n    }\n    if (nums[i] < currentMax) {\n      currentMax = nums[i];\n      result.push(currentMax);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a non-empty array nums, return its maximum subarray containing only distinct elements.\n\n  Example:\n\n      Input: nums = [1,1,2,3,3]\n      Output: [1,2,3]\n\n  Note:\n      You may assume that each element in the array is distinct.\n      You may assume that each element in the array is also distinct.\n*/\nconst uniqueElementsAA = (nums) => {\n  const result = [];\n  let currentMax = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] === ", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Givena  positive integer n , return a sorted list that has the oddnumbers in  c ollatz seq uence .\n\n  The Collatz conj ect ure is a c onjecture in ma thematics that concerns a sequence defined  as follows: start  with a ny positive integer n.The n eachterm is obtained from the \n  previous term as follows: if t heprevi ous termis even, the next term is one halfof \n  the previous te rm. If the previous term is odd, the next termis 3 times theprevious\n  term plus 1. The conjecture is that  no matter what value of n, thesequence will a lways re ach 1.\n\n Note: \n      1. Collatz (1) is [1].\n      2.returned l ists orted i n increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer n, return a sorted list that has the oddnumbers in  c ollatz seq uence.\n\n  The Collatz conj ect ure is a c onjecture in ma thematics that concerns a sequence defined  as follows: start  with a ny positive integer n.The n eachterm is obtained from the \n  previous term as follows: if t heprevi ous termis even, the next term is one halfof \n  the previous te rm. If the previous term is odd, the next termis 3 times theprevious\n  term plus 1. The conjecture is that  no matter what value of n, thesequence will a lways re ach 1.\n\n Note: \n      1. Collatz (1) is [1].\n      2.returned l ists orted i n increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  let m = 1;\n  let n = 1;\n  let t = 1;\n  let u = 1;\n  let v = 1;\n  let x = 1;\n  let y = 1;\n  let z = 1;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a1 = 0;\n  let a2 = 0;\n  let a3 = 0;\n  let a4 = 0;\n  let a5 = 0;\n  let a6 = 1;\n  let a7 = 1;\n  let a8 = 1;\n  let a9 = 1;\n  let a10 = 1;\n  let a11 = 1;\n  let a12 = 1;\n  let a13 = 1;\n  let a14 = 1;\n  let a15 = 1;\n  let a16 = 1;\n  let a17 = 1;\n  let a18 = 1;\n  let a19 = 1;\n  let a20 = 1;\n  let a21 = 1;\n  let a22 = 1;\n  let a23 = 1;\n  let a24 = 1;\n  let a25 = 1;\n  let a26 = 1;\n  let a27 = 1;\n  let a28 = 1;\n  let a29 = 1;\n  let a30 = 1;\n  let a31 = 1;\n  let a32 = 1;\n  let a33 = 1;\n  let a34 = 1;\n  let a35 = 1;\n  let a36 = 1;\n  let a37 = 1;\n  let a38 = 1;\n  let a39 = 1;\n  let a40 = 1;\n  let a41 = 1;\n  let a42 = 1;\n  let a43 = 1;\n  let a44 = 1;\n  let a45 = 1;\n  let a46 = 1;\n  let a47 = 1;\n  let a48 = 1;\n  let a49 = 1;\n  let a50 = 1;\n  let a51 = 1;\n  let a52 = 1;\n  let a53 = 1;\n  let a54 = 1;\n  let a55 = 1;\n  let a56 = 1;\n  let a57 = 1;\n  let a58 = 1;\n  let a59 = 1;\n  let a60 = 1;\n  let a61 = 1;\n  let a62 = 0;\n  let a63 = 0;\n  let a64 = 0;\n  let a65 = 0;\n  let a66 = 0;\n  let a67 = 0;\n  let a68 = 0;\n  let a69 = 0;\n  let a70 = 0;\n  let a71 = 0;\n  let a72 = 0;\n  let a73 = 0;\n  let a74 = 0;\n  let a75 = 0;\n  let a76 = 0;\n  let a77 = 0;\n  let a78 = 0;\n  let a79 = 0;\n  let a80 = 0;\n  let a81 = 1;\n  let a82 = 0;\n  let a83 = 0;\n  let a84 = 0;\n  let a85 = 0;\n  let a86 = 0;\n  let a87 = 0;\n  let a88 = 0;\n  let a89 = 0;\n  let a90 = 0;\n  let a91 = 0;\n  let a92 = 0;\n  let a93 = 0;\n  let a94 = 0;\n  let a95 = 0;\n  let a96 = 0;\n  let a97 = 0;\n  let a98 = 0;\n  let a99 = 0;\n  let a100 = 0;\n  let a101 = 0;\n  let a102 = 0;\n  let a103 = 0;\n  let a104 = 0;\n  let a105 = 0;\n  let a106 = 0;\n  let a107 = 0;\n  let a108 = 0;\n  let a109 = 0;\n  let a110 = 0;\n  let a111 = 0;\n  let a112 = 0;\n  let a113 = 0;\n  let a114 = 0;\n  let a115 = 0;\n  let a116 = 0;\n  let a117 = 0;\n  let a118 = 0;\n  let a119 = 0;\n  let a120 = 0;\n  let a121 = 0;\n  let a122 = 0;\n  let a123 = 0;\n  let a124 = 0;\n  let a125 = 0;\n  let a126 = 0;\n  let a127 = 0;\n  let a128 = 0;\n  let a129 = 0;\n  let a130 = 0;\n  let a131 = 0;\n  let a132 = 0;\n  let a133 = 0;\n  let a134 = 0;\n  let a135 = 0;\n  let a136 = 0;\n  let a137 = 0;\n  let a138 = 0;\n  let a139 = 0;\n  let a140 = 0;\n  let a141 = 0;\n  let a142 = 0;\n  let a143 = 0;\n  let a144 = 0;\n  let a145 = 0;\n  let a146 = 0;\n  let a147 = 0;\n  let a148 = 0;\n  let a149 = 0;\n  let a150 = 0;\n  let a151 = 0;\n  let a152 = 0;\n  let a153 = 0;\n  let a154 = 0;\n  let a155 = 0;\n  let a156 = 0;\n  let a157 = 0;\n  let a158 = 0;\n  let a159 = 0;\n  let a160 = 0;\n  let a161 = 0;\n  let a162 = 0;\n  let a163 = 0;\n  let a164 = 0;\n  let a165 = 0;\n  let a166 = 0;\n  let a167 = 0;\n  let a168 = 0;\n  let a169 = 0;\n  let a170 = 0;\n  let a171 = 0;\n  let a172 = 0;\n  let a173 = 0;\n  let a174 = 0;\n  let a175 = 0;\n  let a176 = 0;\n  let a177 = 0;\n  let a178 = 0;\n  let a179 = 0;\n  let a180 = 0;\n  let a181 = 0;\n  let a182 = 0;\n  let a183 = 0;\n  let a184 = 0;\n  let a185 = 0;\n  let a186 = 0;\n  let a187 = 0;\n  let a188 = 0;\n  let a189 = 0;\n  let a190 = 0;\n  let a191 = 0;\n  let a192 = 0;\n  let a193 = 0;\n  let a194 = 0;\n  let a195 = 0;\n  let a196 = 0;\n  let a197 = 0;\n  let a198 = 0;\n  let a199 = 0;\n  let a200 = 0;\n  let a201 = 0;\n  let a202 = 0;\n  let a203 = 0;\n  let a204 = 0;\n  let a205 = 0;\n  let a206 = 0;\n  let a207 = 0;\n  let a208 = 0;\n  let a209 = 0;\n  let a210 = 0;\n  let a211 = 0;\n  let a212 = 0;\n  let a213 = 0;\n  let a214 = 0;\n  let a215 = 0;\n  let a216 = 0;\n  let a217 = 0;\n  let a218 = 0;\n  let a219 = 0;\n  let a220 = 0;\n  let a221 = 0;\n  let a222 = 0;\n  let a223 = 0;\n  let a224 = 0;\n  let a225 = 0;\n  let a226 = 0;\n  let a227 = 0;\n  let a228 = 0;\n  let a229 = 0;\n  let a230 = 0;\n  let a231 = 0;\n  let a232 = 0;\n  let a233 = 0;\n  let a234 = 0;\n  let a235 = 0;\n  let a236 = 0;", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have  to write a functio n which validates a given date string and\n return strue ifth e dat e is valid otherwisefal se.\n  Thedate is valid i f all of the following rules are satisfied: \n  1. The datestri ng is n ot empty.\n  2. The numb erof days isnot less than 1 or higher than 31 days for months 1,3,5 ,7, 8,10, 12. And t he number of days isnot less than1 or higher than 30 d ays for months 4,6,9,11. And, the numberof day s is not less than 1 or higher than 29 for the month 2.\n  3.The months should not be less th an 1 or higherthan 12. \n  4. Thedate should be in the f ormat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have  to write a functio n which validates a given date string and\n return strue ifth e dat e is valid otherwisefal se.\n  Thedate is valid i f all of the following rules are satisfied: \n  1. The datestri ng is n ot empty.\n  2. The numb erof days isnot less than 1 or higher than 31 days for months 1,3,5,7, 8,10, 12. And t he number of days isnot less than1 or higher than 30 d ays for months 4,6,9,11. And, the numberof day s is not less than 1 or higher than 29 for the month 2.\n  3.The months should not be less th an 1 or higherthan 12. \n  4. Thedate should be in the f ormat: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateObj = new Date(date);\n  let year = dateObj.getFullYear();\n  let month = dateObj.getMonth() + 1;\n  let day = dateObj.getDate();\n  let isValid = true;\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Givena  string of words, r eturn a list of words split on whitespace,if no w hi tespaces e xists  in the text you\n  sh oul d split on commas ',' ifno commas exists you should return the numb er of lower-case le tters w ith odd order in the\n alp habet,ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  string of words, r eturn a list of words split on whitespace,if no w hi tespaces e xists  in the text you\n  sh oul d split on commas ',' ifno commas exists you should return the numb er of lower-case le tters w ith odd order in the\n alp habet,ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/g);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a text and an optional delimiter, returns a list of words in the text separated by the\n  delimiter. Delimiter is any whitespace character except the newline character.\n  Examples\n  splitWords(\"Hello world!\", \" \") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", false) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello world!\", \",\", true) ➞ [\"Hello\", \"world", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Givena  list of numbers, r eturn whether or not they are sorted\n  in ascendin gorder. Iflisthas more than 1 dupli cat e of the s ame\n  number, r eturn false. Assume no negative numbers and  only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  list of numbers, r eturn whether or not they are sorted\n  in ascendin gorder. Iflisthas more than 1 dupli cat e of the s ame\n  number, r eturn false. Assume no negative numbers and  only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.every((item, index) => index === 0 || item === sorted[index - 1]);\n};\n\n/**\n  Given a sorted array and a number k, return all numbers in the array which\n  are divisible by k. Return an empty array if there are no such numbers.\n  Examples\n  allDivisible([2, 5, 7, 11, 13], 3) ➞ []\n  allDivisible([2, 5, 7, 11, 13], 4) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 5) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 6) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 7) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 8) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 9) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 10) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 11) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 12) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 13) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 14) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 15) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 16) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 17) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 18) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 19) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 20) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 21) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 22) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 23) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 24) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 25) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 26) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 27) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 28) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 29) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 30) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 31) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 32) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 33) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 34) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 35) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 36) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 37) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 38) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 39) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 40) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 41) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 42) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 43) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 44) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 45) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 46) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 47) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 48) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 49) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 50) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 51) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 52) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 53) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 54) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 55) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], 56) ➞ [2, 5, 7, 11, 13]\n  allDivisible([2, 5, 7, 11, 13], ", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You aregiven two intervals ,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let start2 = interval2[0];\n  let end1 = interval1[1];\n  let end2 = interval2[1];\n  let result = [];\n  if (start1 <= end1 && start2 <= end2) {\n    if (start1 > end2) return \"NO\";\n    if (start1 < end2) return \"YES\";\n    for (let i = start1; i <= end1; i++) {\n      if (start2 <= end1 && end2 >= start2) result.push(i);\n    }\n    for (let i = start2; i <= end2; i++) {\n      if (start1 <= end1 && end2 >= start2) result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean value\n  \n  Given an array of intervals, determine if the array is sorted.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (1, 3) is a sorted interval and its length is 1.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (3, 1) is a sorted interval and its length is 3.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval (0, 4) is a sorted interval and its length is 4.\n  Intervals are sorted in descending order and each interval is represented as a pair of integers.\n  For example, the interval (4, 0) is a sorted interval and its length is 4.\n  Intervals are sorted in ascending order and each interval is represented as a pair of integers.\n  For example, the interval", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0 .\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverse = (arr) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverse = (arr) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverse = (arr) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverse = (arr) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverse = (arr) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverse = (arr) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverse = (arr) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sum += 1;\n    } else if (arr[i] < 0) {\n      sum -= 1;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are  given an array arr  of integers and you need to return\n  sum of magni tu des of int egers  multiplied by produc t o f all sign s\n  of each num ber in the array, represented by 1, -1 or 0.\n  Note: return nu ll forempty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sum = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0) {\n      sum += ", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Givena  grid with N rows a nd N columns (N >= 2) and a positive integer k, \n e ach cell o f the  grid contains a valu e.Every inte ger in the rang e [1, N * N]\n  inclusive appears exactly on ce on the cells ofthe gri d.\n\n  You have to findthe  minimu m pathof length k in the grid. You can start\n  from any ce ll, andin each s tep you can move to any of the neighbor cells,\n  in othe r words, you can go to cells which sharean edg e with you current\n  cell.\n  Please note that a path of lengt h k means visiting exactly k cel ls (not\n  neces sarily d istinct).  You CANNOT go off the grid.\n  A path A (of  length k)  isc onsider edless than a path B (of len gth k) if  after making the ordered lists  ofthe valueson the ce llsthat A and B go \n  through (let's callthem lst_A and lst_B), lst_A is lexicogra phically less\n  than lst_B, in ot her words, t he reexist an  integer indexi (1 <= i <= k)\n  such that ls t_A[i] < lst_B[i] and for any j(1 <=j < i) w e have\n  lst_A[j ] = lst_B[j].\n  It is gu aranteed that the answeris unique.\n  Return an ordered list of the values on the cells thatthe  minimum path go thr ou gh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  grid with N rows a nd N columns (N >= 2) and a positive integer k, \n e ach cell o f the  grid contains a valu e.Every inte ger in the rang e [1, N * N]\n  inclusive appears exactly on ce on the cells ofthe gri d.\n\n  You have to findthe  minimu m pathof length k in the grid. You can start\n  from any ce ll, andin each s tep you can move to any of the neighbor cells,\n  in othe r words, you can go to cells which sharean edg e with you current\n  cell.\n  Please note that a path of lengt h k means visiting exactly k cel ls (not\n  neces sarily d istinct).  You CANNOT go off the grid.\n  A path A (of  length k)  isc onsider edless than a path B (of len gth k) if  after making the ordered lists  ofthe valueson the ce llsthat A and B go \n  through (let's callthem lst_A and lst_B), lst_A is lexicogra phically less\n  than lst_B, in ot her words, t he reexist an  integer indexi (1 <= i <= k)\n  such that ls t_A[i] < lst_B[i] and for any j(1 <=j < i) w e have\n  lst_A[j ] = lst_B[j].\n  It is gu aranteed that the answeris unique.\n  Return an ordered list of the values on the cells thatthe  minimum path go thr ou gh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [cells, cellsIndex] = createCells(rows, cols);\n  const [path] = createPath(rows, cols, cells, cellsIndex);\n  const [minPath] = findMinPath(path, k);\n  return minPath;\n};\n\n// https://leetcode.com/problems/find-the-minimum-path-from-a-given-grid/\nconst findMinPath = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPathHelperHelperHelper(path, k);\n  return minPath;\n};\n\nconst findMinPathHelperHelper = (path, k) => {\n  const [minPath, minPathIndex] = findMinPath", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Returna greatest common d ivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returna greatest common d ivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  const gcd = (a, b) => {\n    if (a === 0 || b === 0) {\n      return 0;\n    }\n    const gcd = (a, b) => {\n      if (a === 0 || b === 0) {\n        return 0;\n      }\n      const gcd = (a, b) => {\n        if (a === 0 || b === 0) {\n          return 0;\n        }\n        const gcd = (a, b) => {\n          if (a === 0 || b === 0) {\n            return 0;\n          }\n          const gcd = (a, b) => {\n            if (a === 0 || b === 0) {\n              return 0;\n            }\n            const gcd = (a, b) => {\n              if (a === 0 || b === 0) {\n                return 0;\n              }\n              const gcd = (a, b) => {\n                if (a === 0 || b === 0) {\n                  return 0;\n                }\n                const gcd = (a, b) => {\n                  if (a === 0 || b === 0) {\n                    return 0;\n                  }\n                  const gcd = (a, b) => {\n                    if (a === 0 || b === 0) {\n                      return 0;\n                    }\n                    const gcd = (a, b) => {\n                      if (a === 0 || b === 0) {\n                        return 0;\n                      }\n                      const gcd = (a, b) => {\n                        if (a === 0 || b === 0) {\n                          return 0;\n                        }\n                        const gcd = (a, b) => {\n                          if (a === 0 || b === 0) {\n                            return 0;\n                          }\n                          const gcd = (a, b) => {\n                            if (a === 0 || b === 0) {\n                              return 0;\n                            }\n                            const gcd = (a, b) => {\n                              if (a === 0 || b === 0) {\n                                return 0;\n                              }\n                              const gcd = (a, b) => {\n                                if (a === 0 || b === 0) {\n                                  return 0;\n                                }\n                                const gcd = (a, b) => {\n                                  if (a === 0 || b === 0) {\n                                    return 0;\n                                  }\n                                  const gcd = (a, b) => {\n                                    if (a === 0 || b === 0) {\n                                      return 0;\n                                    }\n                                    const gcd = (a, b) => {\n                                      if (a === 0 || b === 0) {\n                                        return 0;\n                                      }\n                                      const gcd = (a, b) => {\n                                        if (a === 0 || b === 0) {\n                                          return 0;\n                                        }\n                                        const gcd = (a, b) => {\n                                          if (a === 0 || b === 0) {\n                                            return 0;\n                                          }\n                                          const gcd = (a, b) => {\n                                            if (a === 0 || b === 0) {\n                                              return 0;\n                                            }\n                                            const gcd = (a, b) => {\n                                              if (a === 0 || b === 0) {\n                                                return 0;\n                                              }\n                                              const gcd = (a, b) => {\n                                                if (a === 0 || b === 0) {\n                                                return 0;\n                                              }\n                                            return a;\n                                          };\n                                        return gcd? gcd(a, b) : a;\n                                      };\n                                    };\n                                  };\n                                };\n                              };\n                            };\n                          };\n                        };\n                      };\n                    };\n                  };\n                };\n              };\n            };\n          };\n        };\n      };\n    };\n  };\n  return gcd? gcd(a, b) : a;\n};\n\n/**\n * Returns true if the given number is a prime number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isPrime = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactors = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactorsOf = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactorsOf2 = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactorsOf3 = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactorsOf4 = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactorsOf5 = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactorsOf6 = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactorsOf7 = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactorsOf8 = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if the given number is divisible by all the prime factors of the given number.\n * @param {number} num\n * @returns {boolean}\n */\nconst isDivisibleByAllPrimeFactorsOf9 = num => {\n  if (num === 2) {\n    return true;\n  }\n  if (num % 2 === 0) {", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone  knows Fibonacci se quence, it was studied deeply by mathematicians in    the last  coup le centuries. However , w hat people don't know isTribonacci sequence.\n  Tribonacci sequenceis defined by the r ecurren ce:\n  tri(1) = 3\n  tri( n)= 1 + n / 2, if n is even.\n tri(n) =  tri(n - 1) + tri(n - 2) + t ri( n+ 1 ), if n i s odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Everyone  knows Fibonacci se quence, it was studied deeply by mathematicians in    the last  coup le centuries. However, w hat people don't know isTribonacci sequence.\n  Tribonacci sequenceis defined by the r ecurren ce:\n  tri(1) = 3\n  tri( n)= 1 + n / 2, if n is even.\n tri(n) =  tri(n - 1) + tri(n - 2) + t ri( n+ 1 ), if n i s odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n <= 1) {\n    return arr;\n  }\n  arr.push(1);\n  arr.push(2);\n  arr.push(3);\n  arr.push(4);\n  arr.push(5);\n  arr.push(6);\n  arr.push(7);\n  arr.push(8);\n  arr.push(9);\n  arr.push(10);\n  arr.push(11);\n  arr.push(12);\n  arr.push(13);\n  arr.push(14);\n  arr.push(15);\n  arr.push(16);\n  arr.push(17);\n  arr.push(18);\n  arr.push(19);\n  arr.push(20);\n  arr.push(21);\n  arr.push(22);\n  arr.push(23);\n  arr.push(24);\n  arr.push(25);\n  arr.push(26);\n  arr.push(27);\n  arr.push(28);\n  arr.push(29);\n  arr.push(30);\n  arr.push(31);\n  arr.push(32);\n  arr.push(33);\n  arr.push(34);\n  arr.push(35);\n  arr.push(36);\n  arr.push(37);\n  arr.push(38);\n  arr.push(39);\n  arr.push(40);\n  arr.push(41);\n  arr.push(42);\n  arr.push(43);\n  arr.push(44);\n  arr.push(45);\n  arr.push(46);\n  arr.push(47);\n  arr.push(48);\n  arr.push(49);\n  arr.push(50);\n  arr.push(51);\n  arr.push(52);\n  arr.push(53);\n  arr.push(54);\n  arr.push(55);\n  arr.push(56);\n  arr.push(57);\n  arr.push(58);\n  arr.push(59);\n  arr.push(60);\n  arr.push(61);\n  arr.push(62);\n  arr.push(63);\n  arr.push(64);\n  arr.push(65);\n  arr.push(66);\n  arr.push(67);\n  arr.push(68);\n  arr.push(69);\n  arr.push(70);\n  arr.push(71);\n  arr.push(72);\n  arr.push(73);\n  arr.push(74);\n  arr.push(75);\n  arr.push(76);\n  arr.push(77);\n  arr.push(78);\n  arr.push(79);\n  arr.push(80);\n  arr.push(81);\n  arr.push(82);\n  arr.push(83);\n  arr.push(84);\n  arr.push(85);\n  arr.push(86);\n  arr.push(87);\n  arr.push(88);\n  arr.push(89);\n  arr.push(90);\n  arr.push(91);\n  arr.push(92);\n  arr.push(93);\n  arr.push(94);\n  arr.push(95);\n  arr.push(96);\n  arr.push(97);\n  arr.push(98);\n  arr.push(99);\n  arr.push(100);\n  arr.push(101);\n  arr.push(102);\n  arr.push(103);\n  arr.push(104);\n  arr.push(105);\n  arr.push(106);\n  arr.push(107);\n  arr.push(108);\n  arr.push(109);\n  arr.push(110);\n  arr.push(111);\n  arr.push(112);\n  arr.push(113);\n  arr.push(114);\n  arr.push(115);\n  arr.push(116);\n  arr.push(117);\n  arr.push(118);\n  arr.push(119);\n  arr.push(120);\n  arr.push(121);\n  arr.push(122);\n  arr.push(123);\n  arr.push(124);\n  arr.push(125);\n  arr.push(126);\n  arr.push(127);\n  arr.push(128);\n  arr.push(129);\n  arr.push(130);\n  arr.push(131);\n  arr.push(132);\n  arr.push(133);\n  arr.push(134);\n  arr.push(135);\n  arr.push(136);\n  arr.push(137);\n  arr.push(138);\n  arr.push(139);\n  arr.push(140);\n  arr.push(141);\n  arr.push(142);\n  arr.push(143);\n  arr.push(144);\n  arr.push(145);\n  arr.push(146);\n  arr.push(147);\n  arr.push(148);\n  arr.push(149);\n  arr.push(150);\n  arr.push(151);\n  arr.push(152);\n  arr.push(153);\n  arr.push(154);\n  arr.push(155);\n  arr.push(156);\n  arr.push(157);\n  arr.push(158);\n  arr.push(159);\n  arr.push(160);\n  arr.push(161);\n  arr.push(162);\n  arr.push(163);\n  arr.push(164);\n  arr.push(165);\n  arr.push(166);\n  arr.push(167);\n  arr.push(168);\n  arr.push(169);\n  arr.push(170);\n  arr.push(171);\n  arr.push(172);\n  arr.push(173);\n  arr.push(174);\n  arr.push(175);\n  arr.push(176);\n  arr.push(177);\n  arr.push(178);\n  arr.push(179);\n  arr.push(180);\n  arr.push(181);\n  arr.push(182);\n  arr.push(183);\n  arr.push(184);\n  arr.push(185);\n  arr.push(186);\n  arr.push(187);\n  arr.push(188);\n  arr.push(189);\n  arr.push(190);\n  arr.push(191);\n  arr.push(192);\n  arr.push(193);\n  arr.push(194);\n  arr.push(195);\n  arr.push(196);\n  arr.push(197);\n  arr.push(198);\n  arr.push(199);\n  arr.push(200);\n  arr.push(201);\n  arr.push(202);\n  arr.push(203);\n  arr.push(204);\n  arr.push(205);\n  arr.push(206);\n  arr.push(207);\n  arr.push(208);\n  arr.push(209);\n  arr.push(210);\n  arr.push(211);\n  arr.push(212);\n  arr.push(213);\n  arr.push(214);\n  arr.push(215);\n  arr.push(216);\n  arr.push(217);\n  arr.push(218);\n  arr.push(219);\n  arr.push(220);\n  arr.push(221);\n  arr.push(222);\n  arr.push(223);\n  arr.push(224);", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given apositive integer n,  return theproduct of the odd digits.\n Return 0if  all digit s are  even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given apositive integer n,  return theproduct of the odd digits.\n Return 0if  all digit s are  even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n.length; i++) {\n    if (n % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return its decimal representation.\n For example digits(5)  ==  5\n digits(-5)  ==  -5\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35)  ==  -35\n digits(-35", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let re = new RegExp(/[[]]/g);\n  return re.test(string);\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let re = new RegExp(/[[]]/g);\n  return re.test(string);\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let re = new RegExp(/[[]]/g);\n  return re.test(string);\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let re = new RegExp(/[[]]/g);\n  return re.test(string);\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let re = new RegExp(/[[]]/g);\n  return re.test(string);\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let re = new RegExp(/[[]]/g);\n  return re.test(string);\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let re = new RegExp(/[[]]/g);\n  return re.test(string);\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ]') ➞ fal se\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true  isNested('[[]][[') ➞ true\n  */\nconst isNested  = (string) =>{\n  let re = new RegExp(/[[]]/g);\n  return re.test(string);\n}\n\n/*\n  Createa function that tak es a stringas input which contains only square br ac kets.\n Th e fun ction should return t rue  if and on ly if there isa valid subsequence of brackets\n  where atleast one bracket i n the s ubsequence is nested.\n is Nested( '[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNes ted ('[][ ", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a list of num bers.\n  Youneed to return the sum of squared numb er s in the g ivenlist,\n  round each el eme ntin thelist to the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let square = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sumSquare = 0;\n  let squareSum = 0;\n  let squareSum2 = 0;\n  let squareSum3 = 0;\n  let squareSum4 = 0;\n  let squareSum5 = 0;\n  let squareSum6 = 0;\n  let squareSum7 = 0;\n  let squareSum8 = 0;\n  let squareSum9 = 0;\n  let squareSum10 = 0;\n  let squareSum11 = 0;\n  let squareSum12 = 0;\n  let squareSum13 = 0;\n  let squareSum14 = 0;\n  let squareSum15 = 0;\n  let squareSum16 = 0;\n  let squareSum17 = 0;\n  let squareSum18 = 0;\n  let squareSum19 = 0;\n  let squareSum20 = 0;\n  let squareSum21 = 0;\n  let squareSum22 = 0;\n  let squareSum23 = 0;\n  let squareSum24 = 0;\n  let squareSum25 = 0;\n  let squareSum26 = 0;\n  let squareSum27 = 0;\n  let squareSum28 = 0;\n  let squareSum29 = 0;\n  let squareSum30 = 0;\n  let squareSum31 = 0;\n  let squareSum32 = 0;\n  let squareSum33 = 0;\n  let squareSum34 = 0;\n  let squareSum35 = 0;\n  let squareSum36 = 0;\n  let squareSum37 = 0;\n  let squareSum38 = 0;\n  let squareSum39 = 0;\n  let squareSum40 = 0;\n  let squareSum41 = 0;\n  let squareSum42 = 0;\n  let squareSum43 = 0;\n  let squareSum44 = 0;\n  let squareSum45 = 0;\n  let squareSum46 = 0;\n  let squareSum47 = 0;\n  let squareSum48 = 0;\n  let squareSum49 = 0;\n  let squareSum50 = 0;\n  let squareSum51 = 0;\n  let squareSum52 = 0;\n  let squareSum53 = 0;\n  let squareSum54 = 0;\n  let squareSum55 = 0;\n  let squareSum56 = 0;\n  let squareSum57 = 0;\n  let squareSum58 = 0;\n  let squareSum59 = 0;\n  let squareSum60 = 0;\n  let squareSum61 = 0;\n  let squareSum62 = 0;\n  let squareSum63 = 0;\n  let squareSum64 = 0;\n  let squareSum65 = 0;\n  let squareSum66 = 0;\n  let squareSum67 = 0;\n  let squareSum68 = 0;\n  let squareSum69 = 0;\n  let squareSum70 = 0;\n  let squareSum71 = 0;\n  let squareSum72 = 0;\n  let squareSum73 = 0;\n  let squareSum74 = 0;\n  let squareSum75 = 0;\n  let squareSum76 = 0;\n  let squareSum77 = 0;\n  let squareSum78 = 0;\n  let squareSum79 = 0;\n  let squareSum80 = 0;\n  let squareSum81 = 0;\n  let squareSum82 = 0;\n  let squareSum83 = 0;\n  let squareSum84 = 0;\n  let squareSum85 = 0;\n  let squareSum86 = 0;\n  let squareSum87 = 0;\n  let squareSum88 = 0;\n  let squareSum89 = 0;\n  let squareSum90 = 0;\n  let squareSum91 = 0;\n  let squareSum92 = 0;\n  let squareSum93 = 0;\n  let squareSum94 = 0;\n  let squareSum95 = 0;\n  let squareSum96 = 0;\n  let squareSum97 = 0;\n  let squareSum98 = 0;\n  let squareSum99 = 0;\n  let squareSum100 = 0;\n  let squareSum101 = 0;\n  let squareSum102 = 0;\n  let squareSum103 = 0;\n  let squareSum104 = 0;\n  let squareSum105 = 0;\n  let squareSum106 = 0;\n  let squareSum107 = 0;\n  let squareSum108 = 0;\n  let squareSum109 = 0;\n  let squareSum110 = 0;\n  let squareSum111 = 0;\n  let squareSum112 = 0;\n  let squareSum113 = 0;\n  let squareSum114 = 0;\n  let squareSum115 = 0;\n  let squareSum116 = 0;\n  let squareSum117 = 0;\n  let squareSum118 = 0;\n  let squareSum119 = 0;\n  let squareSum120 = 0;\n  let squareSum121 = 0;\n  let squareSum122 = 0;\n  let squareSum123 = 0;\n  let squareSum124 = 0;\n  let squareSum125 = 0;\n  let squareSum126 = 0;\n  let squareSum127 = 0;\n  let squareSum128 = 0;\n  let squareSum129 = 0;\n  let squareSum130 = 0;\n  let squareSum131 = 0;\n  let squareSum132 = 0;\n  let squareSum133 = 0;\n  let squareSum134 = 0;\n  let squareSum135 = 0;\n  let squareSum136 = 0;\n  let squareSum137 = 0;\n  let squareSum138 = 0;\n  let squareSum139 = 0;\n  let squareSum140 = 0;\n  let squareSum141 = 0;\n  let squareSum142 = 0;\n  let squareSum143 = 0;\n  let squareSum144 = 0;\n  let squareSum145 = 0;\n  let squareSum146 = 0;\n  let squareSum147 = 0;\n  let squareSum148 = 0;\n  let squareSum149 = 0;\n  let squareSum150 = 0;\n  let squareSum151 = 0;\n  let squareSum152 = 0;\n  let squareSum153 = 0;\n  let squareSum154 = 0;\n  let squareSum155 = 0;\n  let squareSum156 = 0;\n  let squareSum157 = 0;\n  let squareSum158 = 0;\n  let squareSum159 = 0;\n  let squareSum160 = 0;\n  let squareSum161 = 0;\n  let squareSum162 = 0;\n  let squareSum163 = 0;\n  let squareSum164 = 0;\n  let squareSum165 = 0;\n  let squareSum166 = 0;\n  let squareSum167 = 0;\n  let squareSum168 = 0;\n  let squareSum169 = 0;\n  let squareSum170 = 0;\n  let squareSum171 = 0;\n  let squareSum172 = 0;\n  let squareSum173 = 0;\n  let squareSum174 = 0;\n  let squareSum175 = 0;\n  let squareSum176 = 0;\n  let squareSum177 = 0;\n  let squareSum178 = 0;\n  let squareSum179 = 0;\n  let squareSum180 = 0;\n  let squareSum181 = 0;\n  let squareSum182 = 0;\n  let squareSum183 = 0;\n  let squareSum184 = 0;\n  let squareSum185 = 0;\n  let squareSum186 = 0;\n  let squareSum187 = 0;\n  let squareSum188 = 0;\n  let squareSum189 = 0;\n  let squareSum190 = 0;\n  let squareSum191 = 0;\n  let squareSum192 = 0;\n  let squareSum193 = 0;\n  let squareSum194 = 0;\n  let squareSum195 = 0;\n  let squareSum196 = 0;\n  let squareSum197 = 0;\n  let squareSum198 = 0;\n  let squareSum199 = 0;\n  let squareSum200 = 0;\n  let squareSum201 = 0;\n  let squareSum202 = 0;\n  let squareSum203 = 0;\n  let squareSum204 = 0;\n  let squareSum205 = 0;\n  let squareSum206 = 0;\n  let squareSum207 = 0;\n  let squareSum208 = 0;\n  let squareSum209 = 0;\n  let squareSum210 = 0;\n  let squareSum211 = 0;\n  let squareSum212 = 0;\n  let squareSum213 = 0;\n  let squareSum214 = 0;\n  let squareSum215 = 0;\n  let squareSum216 = 0;\n  let squareSum217 = 0;\n  let squareSum218 = 0;\n  let squareSum219 = 0;\n  let squareSum220 = 0;\n  let squareSum221 = 0;\n  let squareSum222 = 0;\n  let squareSum223 = 0;\n  let squareSum224 = 0;\n  let squareSum225 = 0;\n  let squareSum226 = 0;\n  let squareSum227 = 0;\n  let squareSum228 = 0;\n  let squareSum229 = 0;\n  let squareSum230 = 0;\n  let squareSum231 = 0;\n  let squareSum232 = 0;\n  let squareSum", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Createa function that ret urns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar && lastChar.match(/[a-zA-Z0-9]/)\n}\n\n/* Createa function that returns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar && lastChar.match(/[a-zA-Z0-9]/)\n}\n\n/* Createa function that returns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar && lastChar.match(/[a-zA-Z0-9]/)\n}\n\n/* Createa function that returns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar && lastChar.match(/[a-zA-Z0-9]/)\n}\n\n/* Createa function that returns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar && lastChar.match(/[a-zA-Z0-9]/)\n}\n\n/* Createa function that returns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar && lastChar.match(/[a-zA-Z0-9]/)\n}\n\n/* Createa function that returns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar && lastChar.match(/[a-zA-Z0-9]/)\n}\n\n/* Createa function that returns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar && lastChar.match(/[a-zA-Z0-9]/)\n}\n\n/* Createa function that returns true if the last character\n  of a given strin gis an alph abeti cal character and isnot \n a partof a word, andfalse otherwise.\n  Note: \"word\" is a groupof characters separ ated by  space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Createa  function which ret urns the largest index of an element which  is no tgreaterth an or  equal to the element  im mediatelypreceding it. I f\n  no such element exists then return -1.The given array wil l not c ontain\n  duplicate valu es. \n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Given a sorted array and a number n, return an array containing all possible pairs of numbers from 1 to n which sum to n.\n  Example:\n  pairs([1,2,3,4,5,6,7,8,9,10],5) = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]\n  pairs([1,2,3,4,5,6,7,8,9,10],3) = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]\n  pairs([1,2,3,4,5,6,7,8,9,10],2) = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]\n  pairs([1,2,3,4,5,6,7,8,9,10],1) = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]\n  pairs([1,2,3,4,5,6,7,8,9,10],0) = []\n*/\nconst pairs = (arr, num) => {\n  let result = [];\n  let arrLen = arr.length;\n  let sum = 0;\n  for (let i = 0; i < arrLen; i++) {\n    sum += arr[i];\n    if (sum === num) {\n      result.push([arr[i], arr[i + 1]]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a sorted array and a number n, return an array containing all possible combinations of n elements from the given sorted array.\n  Example:\n  combinations([1,2,3,4,5,6,7,8,9,10],3) = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[1,2],[2,3],[3,", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Createa function that ret urns a tuple (a, b), where 'a' is\n  thelargest of  n egativein teger s, and 'b' is the sma lle st  of po sitive integers  in a list.\n  If there is no negative or po sitive integers, re turn th em as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = 0;\n  let min = 0;\n  let maxIndex = 0;\n  let minIndex = 0;\n  let maxValue = 0;\n  let minValue = 0;\n  let maxIndex2 = 0;\n  let minIndex2 = 0;\n  let maxValue2 = 0;\n  let minValue2 = 0;\n  let maxIndex3 = 0;\n  let minIndex3 = 0;\n  let maxValue3 = 0;\n  let minValue3 = 0;\n  let maxIndex4 = 0;\n  let minIndex4 = 0;\n  let maxValue4 = 0;\n  let minValue4 = 0;\n  let maxIndex5 = 0;\n  let minIndex5 = 0;\n  let maxValue5 = 0;\n  let minValue5 = 0;\n  let maxIndex6 = 0;\n  let minIndex6 = 0;\n  let maxValue6 = 0;\n  let minValue6 = 0;\n  let maxIndex7 = 0;\n  let minIndex7 = 0;\n  let maxValue7 = 0;\n  let minValue7 = 0;\n  let maxIndex8 = 0;\n  let minIndex8 = 0;\n  let maxValue8 = 0;\n  let minValue8 = 0;\n  let maxIndex9 = 0;\n  let minIndex9 = 0;\n  let maxValue9 = 0;\n  let minValue9 = 0;\n  let maxIndex10 = 0;\n  let minIndex10 = 0;\n  let maxValue10 = 0;\n  let minValue10 = 0;\n  let maxIndex11 = 0;\n  let minIndex11 = 0;\n  let maxValue11 = 0;\n  let minValue11 = 0;\n  let maxIndex12 = 0;\n  let minIndex12 = 0;\n  let maxValue12 = 0;\n  let minValue12 = 0;\n  let maxIndex13 = 0;\n  let minIndex13 = 0;\n  let maxValue13 = 0;\n  let minValue13 = 0;\n  let maxIndex14 = 0;\n  let minIndex14 = 0;\n  let maxValue14 = 0;\n  let minValue14 = 0;\n  let maxIndex15 = 0;\n  let minIndex15 = 0;\n  let maxValue15 = 0;\n  let minValue15 = 0;\n  let maxIndex16 = 0;\n  let minIndex16 = 0;\n  let maxValue16 = 0;\n  let minValue16 = 0;\n  let maxIndex17 = 0;\n  let minIndex17 = 0;\n  let maxValue17 = 0;\n  let minValue17 = 0;\n  let maxIndex18 = 0;\n  let minIndex18 = 0;\n  let maxValue18 = 0;\n  let minValue18 = 0;\n  let maxIndex19 = 0;\n  let minIndex19 = 0;\n  let maxValue19 = 0;\n  let minValue19 = 0;\n  let maxIndex20 = 0;\n  let minIndex20 = 0;\n  let maxValue20 = 0;\n  let minValue20 = 0;\n  let maxIndex21 = 1;\n  let minIndex21 = 1;\n  let maxValue21 = 1;\n  let minValue21 = 1;\n  let maxIndex22 = 0;\n  let minIndex22 = 0;\n  let maxValue22 = 0;\n  let minValue22 = 0;\n  let maxIndex23 = 0;\n  let minIndex23 = 0;\n  let maxValue23 = 0;\n  let minValue23 = 0;\n  let maxIndex24 = 0;\n  let minIndex24 = 0;\n  let maxValue24 = 0;\n  let minValue24 = 0;\n  let maxIndex25 = 0;\n  let minIndex25 = 0;\n  let maxValue25 = 0;\n  let minValue25 = 0;\n  let maxIndex26 = 0;\n  let minIndex26 = 0;\n  let maxValue26 = 0;\n  let minValue26 = 0;\n  let maxIndex27 = 0;\n  let minIndex27 = 0;\n  let maxValue27 = 0;\n  let minValue27 = 0;\n  let maxIndex28 = 0;\n  let minIndex28 = 0;\n  let maxValue28 = 0;\n  let minValue28 = 0;\n  let maxIndex29 = 0;\n  let minIndex29 = 0;\n  let maxValue29 = 0;\n  let minValue29 = 0;\n  let maxIndex30 = 0;\n  let minIndex30 = 0;\n  let maxValue30 = 0;\n  let minValue30 = 0;\n  let maxIndex31 = 1;\n  let minIndex31 = 1;\n  let maxValue31 = 1;\n  let minValue31 = 1;\n  let maxIndex32 = 0;\n  let minIndex32 = 0;\n  let maxValue32 = 0;\n  let minValue32 = 0;\n  let maxIndex33 = 0;\n  let minIndex33 = 0;\n  let maxValue33 = 0;\n  let minValue33 = 0;\n  let maxIndex34 = 0;\n  let minIndex34 = 0;\n  let maxValue34 = 0;\n  let minValue34 = 0;\n  let maxIndex35 = 0;\n  let minIndex35 = 0;\n  let maxValue35 = 0;\n  let minValue35 = 0;\n  let maxIndex36 = 0;\n  let minIndex36 = 0;\n  let maxValue36 = 0;\n  let minValue36 = 0;\n  let maxIndex37 = 0;\n  let minIndex37 = 0;\n  let maxValue37 = 0;\n  let minValue37 = 0;\n  let maxIndex38 = 0;\n  let minIndex38 = 0;\n  let maxValue38 = 0;\n  let minValue38 = 0;\n  let maxIndex39 = 0;\n  let minIndex39 = 0;\n  let maxValue39 = 0;\n  let minValue39 = 0;\n  let maxIndex40 = 0;\n  let minIndex40 = 0;\n  let maxValue40 = 0;\n  let minValue40 = 0;\n  let maxIndex41 = 1;\n  let minIndex41 = 1;\n  let maxValue41 = 1;\n  let minValue41 = 1;\n  let maxIndex42 = 2;\n  let minIndex42 = 2;\n  let maxValue42 = 2;\n  let minValue42 = 2;\n  let maxIndex43 = 3;\n  let minIndex43 = 3;\n  let maxValue43 = 3;\n  let minValue43 = 3;\n  let maxIndex44 = 4;\n  let minIndex44 = 4;\n  let maxValue44 = 4;\n  let minValue44 = 4;\n  let maxIndex45 = 5;\n  let minIndex45 = 5;\n  let maxValue45 = 5;\n  let minValue45 = 5;\n  let maxIndex46 = 6;\n  let minIndex46 = 6;\n  let maxValue46 = 6;\n  let minValue46 = 6;\n  let maxIndex47 = 7;\n  let minIndex47 = 7;\n  let maxValue47 = 7;\n  let minValue47 = 7;\n  let maxIndex48 = 8;\n  let minIndex48 = 8;\n  let maxValue48 = 8;\n  let minValue48 = 8;\n  let maxIndex49 = 9;\n  let minIndex49 = 9;\n  let maxValue49 = 9;\n  let minValue49 = 9;\n  let maxIndex50 = 10;\n  let minIndex50 = 10;\n  let maxValue50 = 10;\n  let minValue50 = 10;\n  let maxIndex51 = 1;\n  let minIndex51 = 1;\n  let maxValue51 = 1;\n  let minValue51 = 1;\n  let maxIndex52 = 2;\n  let minIndex52 = 2;\n  let maxValue52 = 2;\n  let minValue52 = 2;\n  let maxIndex53 = 3;\n  let minIndex53 = 3;\n  let maxValue53 = 3;\n  let minValue53 = 3;\n  let maxIndex54 = 4;\n  let minIndex54 = 4;\n  let maxValue54 = 4;\n  let minValue54 = 4;\n  let maxIndex55 = 5;\n  let minIndex55 = 5;\n  let maxValue55 = 5;\n  let minValue55 = 5;\n  let maxIndex56 = 6;\n  let minIndex56 = 6;\n  let maxValue56 = 6;\n  let minValue56 = 6;\n  let maxIndex57 = 7;\n  let minIndex57 = 7;\n  let maxValue57 = 7;\n  let minValue57 = 7;\n  let maxIndex58 = 8;\n  let minIndex58 = 8;\n  let maxValue58 = 8;\n  let minValue58 = 8;\n  let maxIndex59 = 9;\n  let minIndex59", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Createa function that tak es integers, floats, or strings representing\n  rea lnumbers, a nd re turns the larger vari abl e in its g iven variable t ype.\n  Return null if the values are equal. \n  Note: If a realnumberis represented as a str ing , the f loating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n co mpare One(1, \"2 ,3\") ➞\"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne (\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b)=> {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Createa function that tak es integers, floats, or strings representing\n  rea lnumbers, a nd re turns the larger vari abl e in its g iven variable t ype.\n  Return null if the values are equal. \n  Note: If a realnumberis represented as a str ing, the f loating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n co mpare One(1, \"2,3\") ➞\"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne (\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b)=> {\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"string\" && typeof b === \"string\"){\n    return a === b\n  }\n  if(typeof a === \"string\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"string\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\"){\n    return a === b\n  }\n  if(typeof a === \"number\" && typeof b === \"number\")", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive evennumbe rs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  let isEqual = true;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0 && sum % 4 === 0) {\n      isEqual = false;\n      break;\n    }\n  }\n  return isEqual;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive odenumbe rs\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  let isEqual = true;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0 && sum % 4 === 0) {\n      isEqual = false;\n      break;\n    }\n  }\n  return isEqual;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive odd numbe rs\n  Example\n  isEqualToSumOddEven(4) == false\n  isEqualToSumOddEven(6) == false\n  isEqualToSumOddEven(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sum = 0;\n  let isEqual = true;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0 && sum % 4 === 0) {\n      isEqual = false;\n      break;\n    }\n  }\n  return isEqual;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive odd numbe rs\n  Example\n  isEqualToSumOddEvenEven(4) == false\n  isEqualToSumOddEvenEven(6) == false\n  isEqualToSumOddEvenEven(8) == true\n  */\nconst isEqualToSumOddEvenEven = (n) => {\n  let sum = 0;\n  let isEqual = true;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0 && sum % 4 === 0) {\n      isEqual = false;\n      break;\n    }\n  }\n  return isEqual;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive odd numbe rs\n  Example\n  isEqualToSumOddEvenEvenEven(4) == false\n  isEqualToSumOddEvenEvenEven(6) == false\n  isEqualToSumOddEvenEvenEven(8) == true\n  */\nconst isEqualToSumOddEvenEvenEven = (n) => {\n  let sum = 0;\n  let isEqual = true;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0 && sum % 4 === 0) {\n      isEqual = false;\n      break;\n    }\n  }\n  return isEqual;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive odd numbe rs\n  Example\n  isEqualToSumOddEvenEvenEvenEven(4) == false\n  isEqualToSumOddEvenEvenEvenEven(6) == false\n  isEqualToSumOddEvenEvenEvenEven(8) == true\n  */\nconst isEqualToSumOddEvenEvenEvenEven = (n) => {\n  let sum = 0;\n  let isEqual = true;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (i % 2 === 0 && sum % 4 === 0) {\n      isEqual = false;\n      break;\n    }\n  }\n  return isEqual;\n};\n\n/*Evaluate  whether the givennumber n can be written as the sum of exactly 4 po si tive odd numbe rs\n  Example\n  isEqualToSumOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Braz ilian factorial isdefined as:  brazilian_factorial(n) = n! * (n-1)!  *  (n-2)!*... *  1!\n  where n > 0\n\n For  example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Braz ilian factorial isdefined as:  brazilian_factorial(n) = n! * (n-1)!  *  (n-2)!*... *  1!\n  where n > 0\n\n For  example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialL = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialL(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialG = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialG(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialLg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialLg(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGg(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialLgG = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialLgG(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgG = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgG(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialLgG = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialLgG(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgL = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgL(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgLg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgLg(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgGg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgGg(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgLg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgLg(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgGg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgGg(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgLg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgLg(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgGg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgGg(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgLg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgLg(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgGg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgGg(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgLg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgLg(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgGg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgGg(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgLg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgLg(n - 1);\n};\n\n/*\n This function returns the factorial of a number greater than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorialGgGg = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * factorialGgGg(n - 1);\n};\n\n/*\n This function returns the factorial of a number less than or equal to n\n This function will receive an integer as input and should return the factorial of\n this integer.\n */\nconst factorial", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Returnlist of all prefixe s from shortest to longest of the inputstring\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returnlist of all prefixe s from shortest to longest of the inputstring\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string[i];\n    }\n    i++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndSuffix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndSuffixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndSuffixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffixAndSuffix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;\n  let j = 0;\n  let len = string.length;\n  while (i < len) {\n    if (string[i] === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string[i];\n    }\n    i++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Returnlist of all suffixes s from shortest to longest of the inputstring\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixesWithPrefixAndSuffixAndSuffixAndSuffixAndSuffixAndPrefix = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let i = 0;", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Givena  string text, repla ce all spaces in it with underscores, \n and if ast ring has m ore t han 2 consecutive spa ces ,   thenreplace all con secutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  string text, repla ce all spaces in it with underscores, \n and if ast ring has m ore t han 2 consecutive spa ces,   thenreplace all con secutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(\"Example\") == \"E\"\n  fixFirstLetter(\"Example 1\") == \"E\"\n  fixFirstLetter(\"Example 2\") == \"E\"\n  fixFirstLetter(\"Example 3\") == \"E\"\n  */\nconst fixFirstLetter = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its last letter capitalized.\n  \n  fixLastLetter(\"Example\") == \"Example\"\n  fixLastLetter(\"Example 1\") == \"Example\"\n  fixLastLetter(\"Example 2\") == \"Example\"\n  fixLastLetter(\"Example 3\") == \"Example\"\n  */\nconst fixLastLetter = (text) => {\n  return text.charAt(text.length - 1).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(text) == \"E\"\n  fixFirstLetter(text) == \"E\"\n  fixFirstLetter(text) == \"E\"\n  fixFirstLetter(text) == \"E\"\n  */\nconst fixFirstLetter = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its last letter capitalized.\n  \n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  */\nconst fixLastLetter = (text) => {\n  return text.charAt(text.length - 1).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  */\nconst fixFirstLetter = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its last letter capitalized.\n  \n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  */\nconst fixLastLetter = (text) => {\n  return text.charAt(text.length - 1).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  */\nconst fixFirstLetter = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its last letter capitalized.\n  \n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  */\nconst fixLastLetter = (text) => {\n  return text.charAt(text.length - 1).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  */\nconst fixFirstLetter = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its last letter capitalized.\n  \n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  */\nconst fixLastLetter = (text) => {\n  return text.charAt(text.length - 1).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  */\nconst fixFirstLetter = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its last letter capitalized.\n  \n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  */\nconst fixLastLetter = (text) => {\n  return text.charAt(text.length - 1).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  */\nconst fixFirstLetter = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its last letter capitalized.\n  \n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  */\nconst fixLastLetter = (text) => {\n  return text.charAt(text.length - 1).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  */\nconst fixFirstLetter = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its last letter capitalized.\n  \n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  */\nconst fixLastLetter = (text) => {\n  return text.charAt(text.length - 1).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  fixFirstLetter(text) == \"Example\"\n  */\nconst fixFirstLetter = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its last letter capitalized.\n  \n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  fixLastLetter(text) == \"Example\"\n  */\nconst fixLastLetter = (text) => {\n  return text.charAt(text.length - 1).toUpperCase() + text.slice(1)\n}\n\n/*\n  Given a string, return its first letter capitalized.\n  \n  fixFirstLetter(", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Createa  function which tak es a stringrepresenting a file's name,and return s  'Yes'if  thethe file's name is va lid , and retu rns 'No' otherw ise.\n  A file's name is considered to be va lid if and only ifall the  following conditions   a re met:   - There should not be more than three digits ('0'-'9') i n t he fi le's name .\n  - The file's name contains exactly one dot '.'\n  - T he substring before the dot should not be empty , and it starts with a letter from \n  the latin alphapet ('a' -'z' and 'A'-'Z').\n  - The subst ring after thedot shou ld be oneofthese: ['txt', 'exe' , 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Createa  function which tak es a stringrepresenting a file's name,and return s  'Yes'if  thethe file's name is va lid, and retu rns 'No' otherw ise.\n  A file's name is considered to be va lid if and only ifall the  following conditions   a re met:   - There should not be more than three digits ('0'-'9') i n t he fi le's name.\n  - The file's name contains exactly one dot '.'\n  - T he substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a' -'z' and 'A'-'Z').\n  - The subst ring after thedot shou ld be oneofthese: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = false;\n  let file_name_check_length = file_name.length;\n  let file_name_check_dot = 0;\n  let file_name_check_dot_length = file_name_check_length - 1;\n  let file_name_check_dot_dot_length = 0;\n  let file_name_check_dot_dot_dot_length = 0;\n  let file_name_check_dot_dot_dot_dot_length = 0;\n  let file_name_check_dot_dot_dot_dot_dot_length = 0;\n  let file_name_check_dot_dot_dot_dot_dot_dot_length = 0;\n  let file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_length = 0;\n  let file_name_check_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This fu nction will take alist of integers. For all entries in the list, the  f unctionsh all s quare the integer ent ryifits ind ex is a \n  mult iple of 3 and will cube the integer entry i f its index isa mu ltipleof 4 and not a multiple  of  3. The function will not \n change the entries in the list whoseind exesare not a  multiple of 3 or 4.The function shall then return thesum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    sum += i * i;\n  });\n  return sum;\n};\n\n/*\n  Given a list with integers, return its sum in O(n) time.\n  \n  Examples:\n  sum([1,2,3]) should return 6\n  sum([-1,-5,2,-1,-5]) should return -126\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  lst.forEach((i) => {\n    sum += i;\n  });\n  return sum;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  product([1,2,3]) should return 6\n  product([-1,-5,2,-1,-5]) should return -126\n  */\nconst product = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  product([1,2,3]) should return 6\n  product([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given a list with integers, return its product in O(n) time.\n  \n  Examples:\n  productOf([1,2,3]) should return 6\n  productOf([-1,-5,2,-1,-5]) should return -126\n  */\nconst productOf = (lst) => {\n  let product = 1;\n  lst.forEach((i) => {\n    product *= i;\n  });\n  return product;\n};\n\n/*\n  Given ", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  of the wordsin the new string should be thesame as the original  on e.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const wordsInSentence = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      wordsInSentence.push(word);\n    }\n  }\n  return wordsInSentence;\n};\n\n/*\n  You are  given a string rep resenting asentence,\n  the sentence contains some  w ords separ atedby a space,\n  and you  ha veto retu rn a string tha t contains the words from the original sent ence,\n  whose lengt hs areprime numbers,\n  the or der  ", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your tas k is to implement a  function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nomin ator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let numerator = 0;\n  let denominator = 1;\n  let result = false;\n  \n  if(n == null || n == \"\" || n == undefined){\n    numerator = 1;\n    denominator = 1;\n  }\n  else{\n    numerator = parseInt(n);\n    denominator = parseInt(x);\n  }\n  \n  if(numerator == 0 || denominator == 0){\n    result = false;\n  }\n  else{\n    result = numerator / denominator == n;\n  }\n  \n  return result;\n};\n\n/*\n  Your tas k is to implement a function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nominator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let numerator = 0;\n  let denominator = 1;\n  let result = false;\n  \n  if(n == null || n == \"\" || n == undefined){\n    numerator = 1;\n    denominator = 1;\n  }\n  else{\n    numerator = parseInt(n);\n    denominator = parseInt(x);\n  }\n  \n  if(numerator == 0 || denominator == 0){\n    result = false;\n  }\n  else{\n    result = numerator / denominator == n;\n  }\n  \n  return result;\n};\n\n/*\n  Your tas k is to implement a function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nominator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let numerator = 0;\n  let denominator = 1;\n  let result = false;\n  \n  if(n == null || n == \"\" || n == undefined){\n    numerator = 1;\n    denominator = 1;\n  }\n  else{\n    numerator = parseInt(n);\n    denominator = parseInt(x);\n  }\n  \n  if(numerator == 0 || denominator == 0){\n    result = false;\n  }\n  else{\n    result = numerator / denominator == n;\n  }\n  \n  return result;\n};\n\n/*\n  Your tas k is to implement a function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nominator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let numerator = 0;\n  let denominator = 1;\n  let result = false;\n  \n  if(n == null || n == \"\" || n == undefined){\n    numerator = 1;\n    denominator = 1;\n  }\n  else{\n    numerator = parseInt(n);\n    denominator = parseInt(x);\n  }\n  \n  if(numerator == 0 || denominator == 0){\n    result = false;\n  }\n  else{\n    result = numerator / denominator == n;\n  }\n  \n  return result;\n};\n\n/*\n  Your tas k is to implement a function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nominator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let numerator = 0;\n  let denominator = 1;\n  let result = false;\n  \n  if(n == null || n == \"\" || n == undefined){\n    numerator = 1;\n    denominator = 1;\n  }\n  else{\n    numerator = parseInt(n);\n    denominator = parseInt(x);\n  }\n  \n  if(numerator == 0 || denominator == 0){\n    result = false;\n  }\n  else{\n    result = numerator / denominator == n;\n  }\n  \n  return result;\n};\n\n/*\n  Your tas k is to implement a function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa whole numberand false\n  otherwise. Both x and n, are st ring representation  of a f raction, and have the f oll owing f ormat,  <numerator>/<denominator> where both numerator and  de nominator arepositive whole numbers.\n\n  You canassume that x, and nare valid fractions, and do not have zero as de nominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\",  \"2/1\") = false\n  simplify(\"7/10 \", \"10/2\") = fa lse\n  */ \nconst simplify = (x, n) => {\n  let numerator = 0;\n  let denominator = 1;\n  let result = false;\n  \n  if(n == null || n == \"\" || n == undefined){\n    numerator = 1;\n    denominator = 1;\n  }\n  else{\n    numerator = parseInt(n);\n    denominator = parseInt(x);\n  }\n  \n  if(numerator == 0 || denominator == 0){\n    result = false;\n  }\n  else{\n    result = numerator / denominator == n;\n  }\n  \n  return result;\n};\n\n/*\n  Your tas k is to implement a function that will simplify the expression\n  x *n.  The funct ion r eturns true if x * neva luates toa ", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writea  function which sor ts the given list of integers\n  in ascending order  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list .\n  For e xample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function which sor ts the given list of integers\n  in ascending order  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let numsCopy = nums.slice();\n  while (numsCopy.length > 0) {\n    sum += numsCopy.pop();\n    index++;\n  }\n  return nums.map((num, i) => num * Math.pow(10, index - i) + sum);\n};\n\n/*\n  Writea  function which sort a list by its digits in ascending order\n  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> sortByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> sortByPoints([]) == []\n  */\nconst sortByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let numsCopy = nums.slice();\n  while (numsCopy.length > 0) {\n    sum += numsCopy.pop();\n    index++;\n  }\n  return nums.map((num, i) => num * Math.pow(10, index - i) + sum);\n};\n\n/*\n  Writea  function which sort a list by its digits in ascending order\n  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> sortByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> sortByPoints([]) == []\n  */\nconst sortByPointsDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let numsCopy = nums.slice();\n  while (numsCopy.length > 0) {\n    sum += numsCopy.pop();\n    index++;\n  }\n  return nums.map((num, i) => num * Math.pow(10, index - i) + sum);\n};\n\n/*\n  Writea  function which sort a list by its digits in ascending order\n  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> sortByPointsDesc([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> sortByPointsDesc([]) == []\n  */\nconst sortByPointsDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let numsCopy = nums.slice();\n  while (numsCopy.length > 0) {\n    sum += numsCopy.pop();\n    index++;\n  }\n  return nums.map((num, i) => num * Math.pow(10, index - i) + sum);\n};\n\n/*\n  Writea  function which sort a list by its digits in ascending order\n  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> sortByPointsDesc([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> sortByPointsDesc([]) == []\n  */\nconst sortByPointsDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let numsCopy = nums.slice();\n  while (numsCopy.length > 0) {\n    sum += numsCopy.pop();\n    index++;\n  }\n  return nums.map((num, i) => num * Math.pow(10, index - i) + sum);\n};\n\n/*\n  Writea  function which sort a list by its digits in ascending order\n  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> sortByPointsDescDesc([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> sortByPointsDescDesc([]) == []\n  */\nconst sortByPointsDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let numsCopy = nums.slice();\n  while (numsCopy.length > 0) {\n    sum += numsCopy.pop();\n    index++;\n  }\n  return nums.map((num, i) => num * Math.pow(10, index - i) + sum);\n};\n\n/*\n  Writea  function which sort a list by its digits in ascending order\n  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> sortByPointsDescDesc([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> sortByPointsDescDesc([]) == []\n  */\nconst sortByPointsDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let numsCopy = nums.slice();\n  while (numsCopy.length > 0) {\n    sum += numsCopy.pop();\n    index++;\n  }\n  return nums.map((num, i) => num * Math.pow(10, index - i) + sum);\n};\n\n/*\n  Writea  function which sort a list by its digits in ascending order\n  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> sortByPointsDescDesc([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> sortByPointsDescDesc([]) == []\n  */\nconst sortByPointsDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let numsCopy = nums.slice();\n  while (numsCopy.length > 0) {\n    sum += numsCopy.pop();\n    index++;\n  }\n  return nums.map((num, i) => num * Math.pow(10, index - i) + sum);\n};\n\n/*\n  Writea  function which sort a list by its digits in ascending order\n  a ccording t o the  sum of their digits. \n Note: if t here are severa l items with similar sum of their digits,\n order them based o n their  index in original list.\n  For e xample:\n  >>> sortByPointsDescDesc([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> sortByPointsDescDesc([]) == []\n  */\nconst sortByPointsDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that takes  an array of numbers as input and returns   the n um ber of ele ments  in the array that ar e g reater tha n 10 and both   first and last digits of a number are odd  (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let sum = 0;\n  let count = 0;\n  let sumOfDigits = 0;\n  let sumOfDigitsOfFirst = 0;\n  let sumOfDigitsOfLast = 0;\n  let sumOfDigitsOfBoth = 0;\n  let sumOfDigitsOfFirstAndLast = 0;\n  let sumOfDigitsOfFirstAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndBothAndLast = 0;\n  let sumOfDigitsOfFirstAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLast = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLast = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLast = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOfFirstAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBothAndLastAndBoth = 0;\n  let sumOfDigitsOf", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] * a[j] * a[k] === n) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] * a[j] * a[k] === n) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] * a[j] * a[k] === n) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] * a[j] * a[k] === n) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] * a[j] * a[k] === n) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] * a[j] * a[k] === n) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You are  given a positive i nteger n. You have to create an integerarray a of  l ength n.\n    For each i (1 ≤ i ≤ n ),the valueof a[i] = i * i  - i + 1.\n      Return the number of triple s (a[i], a[j],a[k] ) of awhere i < j < k, \n  and  a[ i] + a[ j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples7 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] * a[j] * a[k] === ", "passed": 0}
{"task_id": "JavaScript/148", "prompt": "/* Therea re eight planets in  our solar system: the closerst to the Sun  is Me rc ury, the n ext o ne is Venus, then Ear th,  Mars, Jup iter, Saturn,\n Uranus, Neptune.\n  Write a function that t akes two planet nam es as s trings planet1 and plan et2 .\n  The function should return a tuple containing all planets whos e o rbits  are\n  lo cated between the orbit of planet1and the orbit of plan et2, sorted by\n  the proximity to the sun.\n  Th e function should return an empty tuple if planet1 or planet2 \n  are not correct planet names. \n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Therea re eight planets in  our solar system: the closerst to the Sun  is Me rc ury, the n ext o ne is Venus, then Ear th,  Mars, Jup iter, Saturn,\n Uranus, Neptune.\n  Write a function that t akes two planet nam es as s trings planet1 and plan et2.\n  The function should return a tuple containing all planets whos e o rbits  are\n  lo cated between the orbit of planet1and the orbit of plan et2, sorted by\n  the proximity to the sun.\n  Th e function should return an empty tuple if planet1 or planet2 \n  are not correct planet names. \n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let distance = Math.sqrt(planet1Orbit.distanceSquared\n    + planet2Orbit.distanceSquared);\n  let planet1OrbitDistance = planet1Orbit.distance;\n  let planet2OrbitDistance = planet2Orbit.distance;\n  let distanceToSun = distanceToSun(planet1OrbitDistance, planet2OrbitDistance);\n  let planet1OrbitDistanceToSun = planet1OrbitDistance - distanceToSun;\n  let planet2OrbitDistanceToSun = planet2OrbitDistance - distanceToSun;\n  let planet1OrbitDistanceToSunInRadians = planet1OrbitDistanceToSun * Math.PI / 180;\n  let planet2OrbitDistanceToSunInRadians = planet2OrbitDistanceToSun * Math.PI / 180;\n  let planet1OrbitDistanceToSunInDegrees = planet1OrbitDistanceToSun * 180 / Math.PI;\n  let planet2OrbitDistanceToSunInDegrees = planet2OrbitDistanceToSun * 180 / Math.PI;\n  let planet1OrbitDistanceToSunInDegreesInRadians = planet1OrbitDistanceToSunInDegrees * Math.PI / 180;\n  let planet2OrbitDistanceToSunInDegreesInRadians = planet2OrbitDistanceToSunInDegrees * Math.PI / 180;\n  let planet1OrbitDistanceToSunInDegreesInDegrees = planet1OrbitDistanceToSunInDegrees * 180 / Math.PI;\n  let planet2OrbitDistanceToSunInDegreesInDegrees = planet2OrbitDistanceToSunInDegrees * 180 / Math.PI;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInRadians = planet1OrbitDistanceToSunInDegreesInDegrees * Math.PI / 180;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInRadians = planet2OrbitDistanceToSunInDegreesInDegrees * Math.PI / 180;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInDegrees = planet1OrbitDistanceToSunInDegreesInDegrees * 180 / Math.PI;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInDegrees = planet2OrbitDistanceToSunInDegreesInDegrees * 180 / Math.PI;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInRadians = planet1OrbitDistanceToSunInDegreesInDegreesInRadians * Math.PI / 180;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInRadians = planet2OrbitDistanceToSunInDegreesInDegreesInRadians * Math.PI / 180;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInDegrees = planet1OrbitDistanceToSunInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInDegrees = planet2OrbitDistanceToSunInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInRadians = planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians * Math.PI / 180;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInRadians = planet2OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians * Math.PI / 180;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInDegrees = planet1OrbitDistanceToSunInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInDegrees = planet2OrbitDistanceToSunInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians = planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians * Math.PI / 180;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians = planet2OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians * Math.PI / 180;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInDegrees = planet1OrbitDistanceToSunInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInDegrees = planet2OrbitDistanceToSunInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians = planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians * Math.PI / 180;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians = planet2OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians * Math.PI / 180;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInDegrees = planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInDegrees = planet2OrbitDistanceToSunInDegreesInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInDegrees = planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet2OrbitDistanceToSunInDegreesInDegreesInDegrees = planet2OrbitDistanceToSunInDegreesInDegreesInDegrees * 180 / Math.PI;\n  let planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInRadians = planet1OrbitDistanceToSunInDegreesInDegreesInDegreesInRadi", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it ,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers ,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that accep ts a list of strings as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let l = lst.length;\n  for (let i = 0; i < l; i++) {\n    sum += lst[i];\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"));\n};\n\n/*Write a function that accep a list as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSumByLength = (lst) => {\n  let sum = 0;\n  let l = lst.length;\n  for (let i = 0; i < l; i++) {\n    sum += lst[i].length;\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"));\n};\n\n/*Write a function that accep a list as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSumByLengthAndLength = (lst) => {\n  let sum = 0;\n  let l = lst.length;\n  for (let i = 0; i < l; i++) {\n    sum += lst[i].length + lst[i].length;\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"));\n};\n\n/*Write a function that accep a list as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSumByLengthAndLengthAndLength = (lst) => {\n  let sum = 0;\n  let l = lst.length;\n  for (let i = 0; i < l; i++) {\n    sum += lst[i].length + lst[i].length + lst[i].length;\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"));\n};\n\n/*Write a function that accep a list as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSumByLengthAndLengthAndLength = (lst) => {\n  let sum = 0;\n  let l = lst.length;\n  for (let i = 0; i < l; i++) {\n    sum += lst[i].length + lst[i].length + lst[i].length + lst[i].length;\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.split(\"\"));\n};\n\n/*Write a function that accep a list as a parameter,\n  deletes the  s trings tha t hav e odd lengths from it,\n and retur ns the resulted  list with a sorted order,\n  The list is al ways a list ofstri ngs and  never an array of numb ers,\n  and itmay contain duplicates.\n  The order of the list shouldbeascen ding by l ength of each word, and you\n  should return the list sor ted by that rule.\n  If two words have the samelength, sort the list alphabetically.\n  The function should r eturn a listof strings in sorte d order.\n  Youmay assu me that all words will have the s ame length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSumByLengthAndLengthAndLengthAndLength = (lst) => {\n  let sum = 0;\n  let l = lst.length;\n  for (let i = 0; i < l; i++) {\n    sum += lst[i].length + lst[i].length + lst[i].length + lst[i].length + lst[i].length;\n  }\n  return [...new Set(sum.", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Returna string containing  space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returna string containing  space-delimited numbers starting from 0 upto n in cl usive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrailingZeros = (cl) => {\n  let count = 0;\n  for (let i = cl.length - 1; i >= 0; i--) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of leading zeros in cl usive.\nconst countLeadingZeros = (cl) => {\n  let count = 0;\n  for (let i = 0; i < cl.length; i++) {\n    if (cl[i] === '0') {\n      count++;\n    }\n  }\n  return count;\n};\n\n// Returns the number of trailing zeros in cl usive.\nconst countTrail", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x % 2 === 1? x : y;\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*A simpleprogram which shoul d return the value of x if n is \n  a primenumberan d should r eturn  the value of y other wis e.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Givena  list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  odd.  Ignore numbers thatare  negativeor not integers .\n  doubleTheDifference([1, 3, 2, 0]) == 1+ 9 + 0 + 0 = 10\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe rence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  odd.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1+ 9 + 0 + 0 = 10\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe rence = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  even.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe ende = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  odd.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe endeO = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  even.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe endeOE = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  odd.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe endeOEO = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  even.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe endeOEOE = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  even.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe endeOEOEO = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  even.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe endeOEOEOE = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  even.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe endeOEOEOE = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  even.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe endeOEOEOEO = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, r eturn the sum of squares of the numbers  in the l is t that are  even.  Ignore numbers thatare  negativeor not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 1\n doubleT heDifference([-1, -2, 0 ])== 0\n doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0 ])== 0  If theinput list is empty,return 0.\n  */\nconst doubleTheDiffe endeOEOEOEOE = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {", "passed": 1}
{"task_id": "JavaScript/152", "prompt": "/*I thinkw e all rememberthat  feeling when the result of some long-awaited\n  ev en t is final ly kn own. The feelings and  th oughts you have at that m oment are\n  definitely worth noting down an d comparing.\n Your  task i s to determine if a per son  correc tlyguessed the results of a number ofmatches.\n  You are g ive ntwo  arrays o f scores and guessesof equal length, where each index s hows a match. \n  Return an array of thesame le ngth denoting how far off each guess was. If they have guesse d correctly,  the value is 0, a nd if not, thevalue is  the absolute difference betweenthe guess and the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*I thinkw e all rememberthat  feeling when the result of some long-awaited\n  ev en t is final ly kn own. The feelings and  th oughts you have at that m oment are\n  definitely worth noting down an d comparing.\n Your  task i s to determine if a per son  correc tlyguessed the results of a number ofmatches.\n  You are g ive ntwo  arrays o f scores and guessesof equal length, where each index s hows a match. \n  Return an array of thesame le ngth denoting how far off each guess was. If they have guesse d correctly,  the value is 0, a nd if not, thevalue is  the absolute difference betweenthe guess and the sco re.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreDifferences = scores.map(score => Math.abs(score - guesses.shift()));\n  const guessesDifferences = guesses.map(guess => Math.abs(guess - scores.shift()));\n  return scoreDifferences.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will  be given the nameof a class (a string) and a list of extensions.\n Th e extensio ns ar e to be used to loadadd itional cl asses to the cl ass. The\n  strength of the extension is asfollows: Let CAP be  the nu mber of the uppercase\n le tters i n the extension's name, and let SM be the number of lowerca selette rs\n  in t he extension's name,the strength is given by the fracti on CAP - SM.\n  You should find the strongest ex tension and return a string in this\n  format: ClassName.Stron gestExtensionName.\n  If there ar e two or more e xtension s with the same strength, you sho uld\n  choose the onethat comes  firs t in th e list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will  be given the nameof a class (a string) and a list of extensions.\n Th e extensio ns ar e to be used to loadadd itional cl asses to the cl ass. The\n  strength of the extension is asfollows: Let CAP be  the nu mber of the uppercase\n le tters i n the extension's name, and let SM be the number of lowerca selette rs\n  in t he extension's name,the strength is given by the fracti on CAP - SM.\n  You should find the strongest ex tension and return a string in this\n  format: ClassName.Stron gestExtensionName.\n  If there ar e two or more e xtension s with the same strength, you sho uld\n  choose the onethat comes  firs t in th e list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strength_strongest = -1;\n  let extension_strength_strongest_extension = -1;\n  let extension_strength_strongest_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension = -1;\n  let extension_strength_strongest_extension_extension_extension_extension_extension_extension_extension_extension_extension_extension_", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven 2 words.Youneed to return true if the second word or any of i ts  rotations  is a  substring in the fir stword\n  cyc patternCheck(\"a bcd\",\"abd\") => false\n  cycpatternCheck(\"hel lo\",\"ell\") => true  cycpa tternCheck(\"whassup\",\"p sus \") => f alse\n cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCh eck (\"efe f\",\"eeff\" ) => false\n  cycpatternCheck(\"himenss\",\"simen\") => true  */\nconst cycpatternCheck = (a, b) => {\n  let a1 = a.split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\").sort().join(\"\").split(\"\"", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given an  integer. return atuple that has the number of even and odd digits r es pectively. \n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenOddCount = 0;\n  let oddOddCount = 0;\n  let evenOddCount2 = 0;\n  let oddOddCount2 = 0;\n  let evenOddCount3 = 0;\n  let oddOddCount3 = 0;\n  let evenOddCount4 = 0;\n  let oddOddCount4 = 0;\n  let evenOddCount5 = 0;\n  let oddOddCount5 = 0;\n  let evenOddCount6 = 0;\n  let oddOddCount6 = 0;\n  let evenOddCount7 = 0;\n  let oddOddCount7 = 0;\n  let evenOddCount8 = 0;\n  let oddOddCount8 = 0;\n  let evenOddCount9 = 0;\n  let oddOddCount9 = 0;\n  let evenOddCount10 = 0;\n  let oddOddCount10 = 0;\n  let evenOddCount11 = 0;\n  let oddOddCount11 = 0;\n  let evenOddCount12 = 0;\n  let oddOddCount12 = 0;\n  let evenOddCount13 = 0;\n  let oddOddCount13 = 0;\n  let evenOddCount14 = 0;\n  let oddOddCount14 = 0;\n  let evenOddCount15 = 0;\n  let oddOddCount15 = 0;\n  let evenOddCount16 = 0;\n  let oddOddCount16 = 0;\n  let evenOddCount17 = 0;\n  let oddOddCount17 = 0;\n  let evenOddCount18 = 0;\n  let oddOddCount18 = 0;\n  let evenOddCount19 = 0;\n  let oddOddCount19 = 0;\n  let evenOddCount20 = 0;\n  let oddOddCount20 = 0;\n  let evenOddCount21 = 0;\n  let oddOddCount21 = 0;\n  let evenOddCount22 = 0;\n  let oddOddCount22 = 0;\n  let evenOddCount23 = 0;\n  let oddOddCount23 = 0;\n  let evenOddCount24 = 0;\n  let oddOddCount24 = 0;\n  let evenOddCount25 = 0;\n  let oddOddCount25 = 0;\n  let evenOddCount26 = 0;\n  let oddOddCount26 = 0;\n  let evenOddCount27 = 0;\n  let oddOddCount27 = 0;\n  let evenOddCount28 = 0;\n  let oddOddCount28 = 0;\n  let evenOddCount29 = 0;\n  let oddOddCount29 = 0;\n  let evenOddCount30 = 0;\n  let oddOddCount30 = 0;\n  let evenOddCount31 = 0;\n  let oddOddCount31 = 0;\n  let evenOddCount32 = 0;\n  let oddOddCount32 = 0;\n  let evenOddCount33 = 0;\n  let oddOddCount33 = 0;\n  let evenOddCount34 = 0;\n  let oddOddCount34 = 0;\n  let evenOddCount35 = 0;\n  let oddOddCount35 = 0;\n  let evenOddCount36 = 0;\n  let oddOddCount36 = 0;\n  let evenOddCount37 = 0;\n  let oddOddCount37 = 0;\n  let evenOddCount38 = 0;\n  let oddOddCount38 = 0;\n  let evenOddCount39 = 0;\n  let oddOddCount39 = 0;\n  let evenOddCount40 = 0;\n  let oddOddCount40 = 0;\n  let evenOddCount41 = 0;\n  let oddOddCount41 = 0;\n  let evenOddCount42 = 0;\n  let oddOddCount42 = 0;\n  let evenOddCount43 = 0;\n  let oddOddCount43 = 0;\n  let evenOddCount44 = 0;\n  let oddOddCount44 = 0;\n  let evenOddCount45 = 0;\n  let oddOddCount45 = 0;\n  let evenOddCount46 = 0;\n  let oddOddCount46 = 0;\n  let evenOddCount47 = 0;\n  let oddOddCount47 = 0;\n  let evenOddCount48 = 0;\n  let oddOddCount48 = 0;\n  let evenOddCount49 = 0;\n  let oddOddCount49 = 0;\n  let evenOddCount50 = 0;\n  let oddOddCount50 = 0;\n  let evenOddCount51 = 0;\n  let oddOddCount51 = 0;\n  let evenOddCount52 = 0;\n  let oddOddCount52 = 0;\n  let evenOddCount53 = 0;\n  let oddOddCount53 = 0;\n  let evenOddCount54 = 0;\n  let oddOddCount54 = 0;\n  let evenOddCount55 = 0;\n  let oddOddCount55 = 0;\n  let evenOddCount56 = 0;\n  let oddOddCount56 = 0;\n  let evenOddCount57 = 0;\n  let oddOddCount57 = 0;\n  let evenOddCount58 = 0;\n  let oddOddCount58 = 0;\n  let evenOddCount59 = 0;\n  let oddOddCount59 = 0;\n  let evenOddCount60 = 0;\n  let oddOddCount60 = 0;\n  let evenOddCount61 = 0;\n  let oddOddCount61 = 0;\n  let evenOddCount62 = 0;\n  let oddOddCount62 = 0;\n  let evenOddCount63 = 0;\n  let oddOddCount63 = 0;\n  let evenOddCount64 = 0;\n  let oddOddCount64 = 0;\n  let evenOddCount65 = 0;\n  let oddOddCount65 = 0;\n  let evenOddCount66 = 0;\n  let oddOddCount66 = 0;\n  let evenOddCount67 = 0;\n  let oddOddCount67 = 0;\n  let evenOddCount68 = 0;\n  let oddOddCount68 = 0;\n  let evenOddCount69 = 0;\n  let oddOddCount69 = 0;\n  let evenOddCount70 = 0;\n  let oddOddCount70 = 0;\n  let evenOddCount71 = 0;\n  let oddOddCount71 = 0;\n  let evenOddCount72 = 0;\n  let oddOddCount72 = 0;\n  let evenOddCount73 = 0;\n  let oddOddCount73 = 0;\n  let evenOddCount74 = 0;\n  let oddOddCount74 = 0;\n  let evenOddCount75 = 0;\n  let oddOddCount75 = 0;\n  let evenOddCount76 = 0;\n  let oddOddCount76 = 0;\n  let evenOddCount77 = 0;\n  let oddOddCount77 = 0;\n  let evenOddCount78 = 0;\n  let oddOddCount78 = 0;\n  let evenOddCount79 = 0;\n  let oddOddCount79 = 0;\n  let evenOddCount80 = 0;\n  let oddOddCount80 = 0;\n  let evenOddCount81 = 0;\n  let oddOddCount81 = 0;\n  let evenOddCount82 = 0;\n  let oddOddCount82 = 0;\n  let evenOddCount83 = 0;\n  let oddOddCount83 = 0;\n  let evenOddCount84 = 0;\n  let oddOddCount84 = 0;\n  let evenOddCount85 = 0;\n  let oddOddCount85 = 0;\n  let evenOddCount86 = 0;\n  let oddOddCount86 = 0;\n  let evenOddCount87 = 0;\n  let oddOddCount87 = 0;\n  let evenOddCount88 = 0;\n  let oddOddCount88 = 0;\n  let evenOddCount89 = 0;\n  let oddOddCount89 = 0;\n  let evenOddCount90 = 0;\n  let oddOddCount90 = 0;\n  let evenOddCount91 = 0;\n  let oddOddCount91 = 0;\n  let evenOddCount92 = 0;\n  let oddOddCount92 = 0;\n", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givena  positive integer,obtain its roman numeral equivalent as a string,\n a nd returnit in  lowercase.\n  Restric tio ns: 1 <= n um <= 1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer,obtain its roman numeral equivalent as a string,\n a nd returnit in  lowercase.\n  Restric tio ns: 1 <= n um <= 1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const [value, sign, exponent] = getIntFromNumber(number);\n  const [baseRoman, baseExponent] = getBaseRomanExponent(exponent);\n  const [romanRoman, romanExponent] = getRomanExponent(exponent);\n  const [romanNumeral] = getRomanNumeral(romanRoman, romanExponent);\n  const [romanNumeralLower] = getRomanNumeralLower(romanNumeral);\n  const [romanNumeralUpper] = getRomanNumeralUpper(romanNumeral);\n  const [romanNumeralLowerUpper] = getRomanNumeralLowerUpper(romanNumeral);\n  const [romanNumeralLowerUpperLower] = getRomanNumeralLowerUpperLower(romanNumeral);\n  const [romanNumeralLowerUpperLowerLower] = getRomanNumeralLowerUpperLowerLower(romanNumeral);\n  const [romanNumeralLowerUpperLowerLowerLower] = getRomanNumeralLowerUpperLowerLowerLower(romanNumeral);\n  const [romanNumeralLowerUpperLowerLowerLower] = getRomanNumeralLowerUpperLowerLowerLowerLower(romanNumeral);\n  const [romanNumeralLowerUpperLowerLowerLowerLower] = getRomanNumeralLowerUpperLowerLowerLowerLowerLowerLower(romanNumeral);\n  const [romanNumeralLowerUpperLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Givent he lengths of the t hree sides of a triangle. Return true if the three \n sides for m a r ight-angled triangle,  fa lse otherw ise.\n  A right- angled triangle is a triangle in which oneangle is rightangl e or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n Givent he lengths of the t hree sides of a triangle. Return true if the three \n sides for m a r ight-angled triangle,  fa lse otherw ise.\n  A right- angled triangle is a triangle in which oneangle is rightangl e or\n 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let a1 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180),\n    a2 = Math.cos(a * Math.PI / 180) * Math.sin(b * Math.PI / 180),\n    a3 = Math.sin(a * Math.PI / 180) * Math.sin(b * Math.PI / 180);\n  let b1 = Math.cos(a * Math.PI / 180) * Math.cos(c * Math.PI / 180),\n    b2 = Math.cos(a * Math.PI / 180) * Math.sin(c * Math.PI / 180),\n    b3 = Math.sin(a * Math.PI / 180) * Math.sin(c * Math.PI / 180);\n  let c1 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180),\n    c2 = Math.cos(a * Math.PI / 180) * Math.sin(b * Math.PI / 180),\n    c3 = Math.sin(a * Math.PI / 180) * Math.sin(b * Math.PI / 180);\n  return a1 * b2 * c3 - a2 * b3 * c3 <= 0;\n};\n\n/*\n Given the angle of incidence of a point on a line segment \n perpendicular to the line segment defined by two points on the line \n segment, return the angle of incidence of the point on the line segment \n perpendicular to the line segment defined by two points on the line \n segment.\n Example:\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, 5) == 45\n pointOnLineSegment(1, 2, 3) == 45\n pointOnLineSegment(3, 4, 6) == 45\n pointOnLineSegment(1, 2, 4) == 45\n pointOnLineSegment(3, 4, ", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that accep ts a list of strings.\n  The list contains differen twords. Ret urn t he word with maximumnum ber\n  of u nique character s. If multiple strings have maximum numberof unique\n  charact ers, re turn the one which come s f irst in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"] ) = == \"s tring\"\n findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([ \"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n*/\ncon st findMax = (words) => {\n  let maxNum = 0;\n  let maxWord = \"\";\n  let maxChar = \"\";\n  let maxWordChar = \"\";\n  let maxCharChar = \"\";\n  let maxCharWord = \"\";\n  let maxCharWordChar = \"\";\n  let maxCharWordCharWord = \"\";\n  let maxCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWord = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let maxCharWordCharWordCharWordCharWordCharWordCharWordCharWordCharWordChar = \"\";\n  let max", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'rea hungry rabbit, an d you already have eaten a certain number of carro ts ,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You'rea hungry rabbit, an d you already have eaten a certain number of carro ts,\n  butno w you  need to eat more car rot s to compl ete the day's m eals.\n  you should return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.floor(number / need);\n  const remaining = number % need;\n  const carrotLeft = carrots - remaining;\n  return [carrots, carrotLeft];\n};\n\n/*\n  You have a number of carrots left in the stock, and you need to eat more carrots to compl the day's m eals.\n  You will eat all remaining carrots, and return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAll = (number, need, remaining) => {\n  const carrots = Math.floor(number / need);\n  const remaining = number % need;\n  const carrotLeft = carrots - remaining;\n  return [carrots, carrotLeft];\n};\n\n/*\n  You have a number of carrots left in the stock, and you need to eat more carrots to compl the day's m eals.\n  You will eat all remaining carrots, and return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAllWithRemaining = (number, need, remaining) => {\n  const carrots = Math.floor(number / need);\n  const remaining = number % need;\n  const carrotLeft = carrots - remaining;\n  return [carrots, carrotLeft];\n};\n\n/*\n  You have a number of carrots left in the stock, and you need to eat more carrots to compl the day's m eals.\n  You will eat all remaining carrots, and return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAllWithRemainingAndRemaining = (number, need, remaining) => {\n  const carrots = Math.floor(number / need);\n  const remaining = number % need;\n  const carrotLeft = carrots - remaining;\n  return [carrots, carrotLeft];\n};\n\n/*\n  You have a number of carrots left in the stock, and you need to eat more carrots to compl the day's m eals.\n  You will eat all remaining carrots, and return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAllWithRemainingAndRemainingAndRemaining = (number, need, remaining) => {\n  const carrots = Math.floor(number / need);\n  const remaining = number % need;\n  const carrotLeft = carrots - remaining;\n  return [carrots, carrotLeft];\n};\n\n/*\n  You have a number of carrots left in the stock, and you need to eat more carrots to compl the day's m eals.\n  You will eat all remaining carrots, and return an array of [ tot al number of eatencarrots  after your meals,\n                            the number of carrots left after your m eal s]\n if there  are not enough remaining carrots,you will eat all rema ining car", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Givena  string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  string, find out h ow many distinct characters (regardlessofcase) d oe s it consi st of \n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i])!== -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  >>> countUniqueCharacters('abc')\n  3\n  >>> countUniqueCharacters('abcde')\n  3\n  >>> countUniqueCharacters('abcdeabcde')\n  3\n  */\nconst countUniqueCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars.indexOf(chars[i]) === -1? 1 : 0;\n  }\n  return count;\n};\n\n/**\n  Given a string, find out how many unique characters are in it.\n  ", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Givent wo lists operator,and operand. The first list has basic algebra oper at ions, and\n  th e second list is a li stofinteger s. Use the twogiven lists to build the algebric \n  expres sion and return the  evalua tion of this expression .\n  The b asic algebra operations:\n  Addition ( + ) \n  Subtraction (- )   M ultiplica tion (* ) \n  Floor division ( // ) \n  Exponentiation (** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givent wo lists operator,and operand. The first list has basic algebra oper at ions, and\n  th e second list is a li stofinteger s. Use the twogiven lists to build the algebric \n  expres sion and return the  evalua tion of this expression.\n  The b asic algebra operations:\n  Addition ( + ) \n  Subtraction (- )   M ultiplica tion (* ) \n  Floor division ( // ) \n  Exponentiation (** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  let operators = operator.split('+');\n  for (let i = 0; i < operators.length; i++) {\n    result = result * operators[i];\n  }\n  return result;\n};\n\n/*\n  Given two lists, return true if two lists are equal, false otherwise\n  Two lists are equal if their lengths are equal, and their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if their elements are equal.\n  Two lists are equal if ", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You aregiven a strings.\n if s[i] isa letter, reverse its case from lowerto  upper orviseversa, \n  otherwise k eep  it as itis.\n  If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a strings.\n if s[i] isa letter, reverse its case from lowerto  upper orviseversa, \n  otherwise k eep  it as itis.\n  If the st ring contains no letters, reverse the strin g.\n  The function s hould r eturn the resulted stri ng. \n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let st = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = s.length;\n  let stLen = st.length;\n  let stLen2 = stLen * stLen;\n  let stLen3 = stLen2 * stLen;\n  let stLen4 = stLen3 * stLen;\n  let stLen5 = stLen4 * stLen;\n  let stLen6 = stLen5 * stLen;\n  let stLen7 = stLen6 * stLen;\n  let stLen8 = stLen7 * stLen;\n  let stLen9 = stLen8 * stLen;\n  let stLen10 = stLen9 * stLen;\n  let stLen11 = stLen10 * stLen;\n  let stLen12 = stLen11 * stLen;\n  let stLen13 = stLen12 * stLen;\n  let stLen14 = stLen13 * stLen;\n  let stLen15 = stLen14 * stLen;\n  let stLen16 = stLen15 * stLen;\n  let stLen17 = stLen16 * stLen;\n  let stLen18 = stLen17 * stLen;\n  let stLen19 = stLen18 * stLen;\n  let stLen20 = stLen19 * stLen;\n  let stLen21 = stLen20 * stLen;\n  let stLen22 = stLen21 * stLen;\n  let stLen23 = stLen22 * stLen;\n  let stLen24 = stLen23 * stLen;\n  let stLen25 = stLen24 * stLen;\n  let stLen26 = stLen25 * stLen;\n  let stLen27 = stLen26 * stLen;\n  let stLen28 = stLen27 * stLen;\n  let stLen29 = stLen28 * stLen;\n  let stLen30 = stLen29 * stLen;\n  let stLen31 = stLen30 * stLen;\n  let stLen32 = stLen31 * stLen;\n  let stLen33 = stLen32 * stLen;\n  let stLen34 = stLen33 * stLen;\n  let stLen35 = stLen34 * stLen;\n  let stLen36 = stLen35 * stLen;\n  let stLen37 = stLen36 * stLen;\n  let stLen38 = stLen37 * stLen;\n  let stLen39 = stLen38 * stLen;\n  let stLen40 = stLen39 * stLen;\n  let stLen41 = stLen40 * stLen;\n  let stLen42 = stLen41 * stLen;\n  let stLen43 = stLen42 * stLen;\n  let stLen44 = stLen43 * stLen;\n  let stLen45 = stLen44 * stLen;\n  let stLen46 = stLen45 * stLen;\n  let stLen47 = stLen46 * stLen;\n  let stLen48 = stLen47 * stLen;\n  let stLen49 = stLen48 * stLen;\n  let stLen50 = stLen49 * stLen;\n  let stLen51 = stLen50 * stLen;\n  let stLen52 = stLen51 * stLen;\n  let stLen53 = stLen52 * stLen;\n  let stLen54 = stLen53 * stLen;\n  let stLen55 = stLen54 * stLen;\n  let stLen56 = stLen55 * stLen;\n  let stLen57 = stLen56 * stLen;\n  let stLen58 = stLen57 * stLen;\n  let stLen59 = stLen58 * stLen;\n  let stLen60 = stLen59 * stLen;\n  let stLen61 = stLen60 * stLen;\n  let stLen62 = stLen61 * stLen;\n  let stLen63 = stLen62 * stLen;\n  let stLen64 = stLen63 * stLen;\n  let stLen65 = stLen64 * stLen;\n  let stLen66 = stLen65 * stLen;\n  let stLen67 = stLen66 * stLen;\n  let stLen68 = stLen67 * stLen;\n  let stLen69 = stLen68 * stLen;\n  let stLen70 = stLen69 * stLen;\n  let stLen71 = stLen70 * stLen;\n  let stLen72 = stLen71 * stLen;\n  let stLen73 = stLen72 * stLen;\n  let stLen74 = stLen73 * stLen;\n  let stLen75 = stLen74 * stLen;\n  let stLen76 = stLen75 * stLen;\n  let stLen77 = stLen76 * stLen;\n  let stLen78 = stLen77 * stLen;\n  let stLen79 = stLen78 * stLen;\n  let stLen80 = stLen79 * stLen;\n  let stLen81 = stLen80 * stLen;\n  let stLen82 = stLen81 * stLen;\n  let stLen83 = stLen82 * stLen;\n  let stLen84 = stLen83 * stLen;\n  let stLen85 = stLen84 * stLen;\n  let stLen86 = stLen85 * stLen;\n  let stLen87 = stLen86 * stLen;\n  let stLen88 = stLen87 * stLen;\n  let stLen89 = stLen88 * stLen;\n  let stLen90 = stLen89 * stLen;\n  let stLen91 = stLen90 * stLen;\n  let stLen92 = stLen91 * stLen;\n  let stLen93 = stLen92 * stLen;\n  let stLen94 = stLen93 * stLen;\n  let stLen95 = stLen94 * stLen;\n  let stLen96 = stLen95 * stLen;\n  let stLen97 = stLen96 * stLen;\n  let stLen98 = stLen97 * stLen;\n  let stLen99 = stLen98 * stLen;\n  let stLen100 = stLen99 * stLen;\n  let stLen101 = stLen100 * stLen;\n  let stLen102 = stLen101 * stLen;\n  let stLen103 = stLen102 * stLen;\n  let stLen104 = stLen103 * stLen;\n  let stLen105 = stLen104 * stLen;\n  let stLen106 = stLen105 * stLen;\n  let stLen107 = stLen106 * stLen;\n  let stLen108 = stLen107 * stLen;\n  let stLen109 = stLen108 * stLen;\n  let stLen110 = stLen109", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  Givena  string 'text', ret urn its md5hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  string 'text', ret urn its md5hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5Hex = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> md5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexString = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> md5HexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringWithPadding = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> md5HexStringWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringWithPaddingAndPadding = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> md5HexStringWithPaddingAndPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringWithPaddingAndPaddingAndPadding = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> md5HexStringWithPaddingAndPaddingAndPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5HexStringWithPaddingAndPaddingAndPaddingAndPadding = (text) => {\n  if (!text) {\n    return null\n  }\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a string, return its md5 hash equivalent string.\n  If 'text' is  a n emptyst ring,  return null.\n\n  >>> md5HexStringWithPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAnd", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Givent wo positive integer s a and b, return the even digits between a\n  andb,  in ascend ing o rder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givent wo positive integer s a and b, return the even digits between a\n  andb,  in ascend ing o rder.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i /= 10;\n  }\n  while (j > 0) {\n    result.push(j);\n    j /= 10;\n  }\n  return result;\n};\n\n/**\n  Given a positive integer n, return the number of digits in n. For\n  example,\n  digits(2) => 2\n  digits(3) => 3\n  digits(4) => 4\n  digits(5) => 5\n  digits(6) => 6\n  digits(7) => 7\n  digits(8) => 8\n  digits(9) => 9\n  digits(10) => 10\n  digits(11) => 11\n  digits(12) => 12\n  digits(13) => 13\n  digits(14) => 14\n  digits(15) => 15\n  digits(16) => 16\n  digits(17) => 17\n  digits(18) => 18\n  digits(19) => 19\n  digits(20) => 20\n  digits(21) => 21\n  digits(22) => 22\n  digits(23) => 23\n  digits(24) => 24\n  digits(25) => 25\n  digits(26) => 26\n  digits(27) => 27\n  digits(28) => 28\n  digits(29) => 29\n  digits(30) => 30\n  digits(31) => 31\n  digits(32) => 32\n  digits(33) => 33\n  digits(34) => 34\n  digits(35) => 35\n  digits(36) => 36\n  digits(37) => 37\n  digits(38) => 38\n  digits(39) => 39\n  digits(40) => 40\n  digits(41) => 41\n  digits(42) => 42\n  digits(43) => 43\n  digits(44) => 44\n  digits(45) => 45\n  digits(46) => 46\n  digits(47) => 47\n  digits(48) => 48\n  digits(49) => 49\n  digits(50) => 50\n  digits(51) => 51\n  digits(52) => 52\n  digits(53) => 53\n  digits(54) => 54\n  digits(55) => 55\n  digits(56) => 56\n  digits(57) => 57\n  digits(58) => 58\n  digits(59) => 59\n  digits(60) => 60\n  digits(61) => 61\n  digits(62) => 62\n  digits(63) => 63\n  digits(64) => 64\n  digits(65) => 65\n  digits(66) => 66\n  digits(67) => 67\n  digits(68) => 68\n  digits(69) => 69\n  digits(70) => 70\n  digits(71) => 71\n  digits(72) => 72\n  digits(73) => 73\n  digits(74) => 74\n  digits(75) => 75\n  digits(76) => 76\n  digits(77) => 77\n  digits(78) => 78\n  digits(79) => 79\n  digits(80) => 80\n  digits(81) => 81\n  digits(82) => 82\n  digits(83) => 83\n  digits(84) => 84\n  digits(85) => 85\n  digits(86) => 86\n  digits(87) => 87\n  digits(88) => 88\n  digits(89) => 89\n  digits(90) => 90\n  digits(91) => 91\n  digits(92) => 92\n  digits(93) => 93\n  digits(94) => 94\n  digits(95) => 95\n  digits(96) => 96\n  digits(97) => 97\n  digits(98) => 98\n  digits(99) => 99\n  digits(100) => 100\n  digits(101) => 101\n  digits(102) => 102\n  digits(103) => 103\n  digits(104) => 104\n  digits(105) => 105\n  digits(106) => 106\n  digits(107) => 107\n  digits(108) => 108\n  digits(109) => 109\n  digits(110) => 110\n  digits(111) => 111\n  digits(112) => 112\n  digits(113) => 113\n  digits(114) => 114\n  digits(115) => 115\n  digits(116) => 116\n  digits(117) => 117\n  digits(118) => 118\n  digits(119) => 119\n  digits(120) => 120\n  digits(121) => 121\n  digits(122) => 122\n  digits(123) => 123\n  digits(124) => 124\n  digits(125) => 125\n  digits(126) => 126\n  digits(127) => 127\n  digits(128) => 128\n  digits(129) => 129\n  digits(130) => 130\n  digits(131) => 131\n  digits(132) => 132\n  digits(133) => 133\n  digits(134) => 134\n  digits(135) => 135\n  digits(136) => 136\n  digits(137) => 137\n  digits(138) => 138\n  digits(139) => 139\n  digits(140) => 140\n  digits(141) => 141\n  digits(142) => 142\n  digits(143) => 143\n  digits(144) => 144\n  digits(145) => 145\n  digits(146) => 146\n  digits(147) => 147\n  digits(148) => 148\n  digits(149) => 149\n  digits(150) => 150\n  digits(151) => 151\n  digits(152) => 152\n  digits(153) => 153\n  digits(154) => 154\n  digits(155) => 155\n  digits(156) => 156\n  digits(157) => 157\n  digits(158) => 158\n  digits(159) => 159\n  digits(160) => 160\n  digits(161) => 161\n  digits(162) => 162\n  digits(163) => 163\n  digits(164) => 164\n  digits(165) => 165\n  digits(166) => 166\n  digits(167) => 167\n  digits(168) => 168\n  digits(169) => 169\n  digits(170) => 170\n  digits(171) => 171\n  digits(172) => 172\n  digits(173) => 173\n  digits(174) => 174\n  digits(175) => 175\n  digits(176) => 176\n  digits(177) => 177\n  digits(178) => 178\n  digits(179) => 179\n  digits(180) => 180\n  digits(181) => 181\n  digits(182) => 182\n  digits(183) => 183\n  digits(184) => 184\n  digits(185) => 185\n  digits(186) => 186\n  digits(187) => 187\n  digits(188) => 188\n  digits(189) => 189\n  digits(190) => 190\n  digits(191) => 191\n  digits(19", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Inputt o this function isa string representing musical notes in a special A SC II format. \n  Yo ur task is to parse t his  string an d return list o f integers corresponding to how many beatsdoes each\n  not las t.\n\n  H ere is a legend:\n  'o'- w hole no te,lasts four beats  'o|' - half note, lasts two beats\n '.| '- q uater not e, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputt o this function isa string representing musical notes in a special A SC II format. \n  Yo ur task is to parse t his  string an d return list o f integers corresponding to how many beatsdoes each\n  not las t.\n\n  H ere is a legend:\n  'o'- w hole no te,lasts four beats  'o|' - half note, lasts two beats\n '.| '- q uater not e, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split('|');\n  const notes = [];\n  let current_note = '';\n  let current_note_index = 0;\n  let current_note_count = 0;\n  let current_note_duration = 0;\n  let current_note_duration_index = 0;\n  let current_note_duration_index2 = 0;\n  let current_note_duration_index3 = 0;\n  let current_note_duration_index4 = 0;\n  let current_note_duration_index5 = 0;\n  let current_note_duration_index6 = 0;\n  let current_note_duration_index7 = 0;\n  let current_note_duration_index8 = 0;\n  let current_note_duration_index9 = 0;\n  let current_note_duration_index10 = 0;\n  let current_note_duration_index11 = 0;\n  let current_note_duration_index12 = 0;\n  let current_note_duration_index13 = 0;\n  let current_note_duration_index14 = 0;\n  let current_note_duration_index15 = 0;\n  let current_note_duration_index16 = 0;\n  let current_note_duration_index17 = 0;\n  let current_note_duration_index18 = 0;\n  let current_note_duration_index19 = 0;\n  let current_note_duration_index20 = 0;\n  let current_note_duration_index21 = 0;\n  let current_note_duration_index22 = 0;\n  let current_note_duration_index23 = 0;\n  let current_note_duration_index24 = 0;\n  let current_note_duration_index25 = 0;\n  let current_note_duration_index26 = 0;\n  let current_note_duration_index27 = 0;\n  let current_note_duration_index28 = 0;\n  let current_note_duration_index29 = 0;\n  let current_note_duration_index30 = 0;\n  let current_note_duration_index31 = 0;\n  let current_note_duration_index32 = 0;\n  let current_note_duration_index33 = 0;\n  let current_note_duration_index34 = 0;\n  let current_note_duration_index35 = 0;\n  let current_note_duration_index36 = 0;\n  let current_note_duration_index37 = 0;\n  let current_note_duration_index38 = 0;\n  let current_note_duration_index39 = 0;\n  let current_note_duration_index40 = 0;\n  let current_note_duration_index41 = 0;\n  let current_note_duration_index42 = 0;\n  let current_note_duration_index43 = 0;\n  let current_note_duration_index44 = 0;\n  let current_note_duration_index45 = 0;\n  let current_note_duration_index46 = 0;\n  let current_note_duration_index47 = 0;\n  let current_note_duration_index48 = 0;\n  let current_note_duration_index49 = 0;\n  let current_note_duration_index50 = 0;\n  let current_note_duration_index51 = 0;\n  let current_note_duration_index52 = 0;\n  let current_note_duration_index53 = 0;\n  let current_note_duration_index54 = 0;\n  let current_note_duration_index55 = 0;\n  let current_note_duration_index56 = 0;\n  let current_note_duration_index57 = 0;\n  let current_note_duration_index58 = 0;\n  let current_note_duration_index59 = 0;\n  let current_note_duration_index60 = 0;\n  let current_note_duration_index61 = 0;\n  let current_note_duration_index62 = 0;\n  let current_note_duration_index63 = 0;\n  let current_note_duration_index64 = 0;\n  let current_note_duration_index65 = 0;\n  let current_note_duration_index66 = 0;\n  let current_note_duration_index67 = 0;\n  let current_note_duration_index68 = 0;\n  let current_note_duration_index69 = 0;\n  let current_note_duration_index70 = 0;\n  let current_note_duration_index71 = 0;\n  let current_note_duration_index72 = 0;\n  let current_note_duration_index73 = 0;\n  let current_note_duration_index74 = 0;\n  let current_note_duration_index75 = 0;\n  let current_note_duration_index76 = 0;\n  let current_note_duration_index77 = 0;\n  let current_note_duration_index78 = 0;\n  let current_note_duration_index79 = 0;\n  let current_note_duration_index80 = 0;\n  let current_note_duration_index81 = 0;\n  let current_note_duration_index82 = 0;\n  let current_note_duration_index83 = 0;\n  let current_note_duration_index84 = 0;\n  let current_note_duration_index85 = 0;\n  let current_note_duration_index86 = 0;\n  let current_note_duration_index87 = 0;\n  let current_note_duration_index88 = 0;\n  let current_note_duration_index89 = 0;\n  let current_note_duration_index90 = 0;\n  let current_note_duration_index91 = 0;\n  let current_note_duration_index92 = 0;\n  let current_note_duration_index93 = 0;\n  let current_note_duration_index94 = 0;\n  let current_note_duration_index95 = 0;\n  let current_note_duration_index96 = 0;\n  let current_note_duration_index97 = 0;\n  let current_note_duration_index98 = 0;\n  let current_note_duration_index99 = 0;\n  let current_note_duration_index100 = 0;\n  let current_note_duration_index101 = 0;\n  let current_note_duration_index102 = 0;\n  let current_note_duration_index103 = 0;\n  let current_note_duration_index104 = 0;\n  let current_note_duration_index105 = 0;\n  let current_note_duration_index106 = 0;\n  let current_note_duration_index107 = 0;\n  let current_note_duration_index108 = 0;\n  let current_note_duration_index109 = 0;\n  let current_note_duration_index110 = 0;\n  let current_note_duration_index111 = 0;\n  let current_note_duration_index112 = 0;\n  let current_note_duration_index113 = 0;\n  let current_note_duration_index114 = 0;\n  let current_note_duration_index115 = 0;\n  let current_note_duration_index116 = 0;\n  let current_note_duration_index117 = 0;\n  let current_note_duration_index118 = 0;\n  let current_note_duration_index119 = 0;\n  let current_note_duration_index120 = 0;\n  let current_note_duration_index121 = 0;\n  let current_note_duration_index122 = 0;\n  let current_note_duration_index123 = 0;\n  let current_note_duration_index124 = 0;\n  let current_note_duration_index125 = 0;\n  let current_note_duration_index126 = 0;\n  let current_note_duration_index127 = 0;\n  let current_note_duration_index128 = 0;\n  let current_note_duration_index129 = 0;\n  let current_note_duration_index130 = 0;\n  let current_note_duration_index131 = 0;\n  let current_note_duration_index132 = 0;\n  let current_note_duration_index133 = 0;\n  let current_note_duration_index134 = 0;\n  let current_note_duration_index135 = 0;\n  let current_note_duration_index136 = 0;\n  let current_note_duration_index137 = 0;\n  let current_note_duration_index138 = 0;\n  let current_note_duration_index139 = 0;\n  let current_note_duration_index140 = 0;\n  let current_note_duration_index141 = 0;\n  let current_note_duration_index142 = 0;\n  let current_note_duration_index143 = 0;\n  let current_note_duration_index144 = 0;\n  let current_note_duration_index145 = 0;\n  let current_note_duration_index146 = 0;\n  let current_note_duration_index147 = 0;\n  let current_note_duration_index148 = 0;\n  let current_note_duration_index149 = 0;\n  let current_note_duration_index150 = 0;\n  let current_note_duration_index151 = 0;\n  let current_note_duration_index152 = 0;\n  let current_note_duration_index153 = 0;\n  let current_note_duration_index154 = 0;\n  let current_note_duration_index155 = 0;\n  let current_note_duration_index156 = 0;\n  let current_note_duration_index157 = 0;\n  let current_note_duration_index158 = 0;\n  let current_note_duration_index159 = 0;\n  let current_note_duration_index160 = 0;\n  let current_note_duration_index161 = 0;\n  let current_note_duration_index162 = 0;\n  let current_note_duration_index163 = 0;\n  let current_note_duration_index164 = 0;\n  let current_note_duration_index165 = 0;\n  let current_note_duration_index166 = 0;\n  let current_note_duration_index167 = 0;\n  let current_note_duration_index168 = 0;\n  let current_note_duration_index169", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find ho w many times agive n substringcan be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Find ho w many times agive n substringcan be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimesSubstring = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimesSubstring('', 'a')\n  0\n  >>> howManyTimesSubstring('aaa', 'a')\n  3\n  >>> howManyTimesSubstring('aaaa', 'aa')\n  3\n  */\nconst howManyTimesSubstringSubstring = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimesSubstringSubstring('', 'a')\n  0\n  >>> howManyTimesSubstringSubstring('aaa', 'a')\n  3\n  >>> howManyTimesSubstringSubstring('aaaa', 'aa')\n  3\n  */\nconst howManyTimesSubstringSubstringSubstring = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimesSubstringSubstringSubstring('', 'a')\n  0\n  >>> howManyTimesSubstringSubstringSubstring('aaa', 'a')\n  3\n  >>> howManyTimesSubstringSubstringSubstring('aaaa', 'aa')\n  3\n  */\nconst howManyTimesSubstringSubstringSubstringSubstring = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimesSubstringSubstringSubstringSubstring('', 'a')\n  0\n  >>> howManyTimesSubstringSubstringSubstringSubstring('aaa', 'a')\n  3\n  >>> howManyTimesSubstringSubstringSubstringSubstring('aaaa', 'aa')\n  3\n  */\nconst howManyTimesSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstring('', 'a')\n  0\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstring('aaa', 'a')\n  3\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstring('aaaa', 'aa')\n  3\n  */\nconst howManyTimesSubstringSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstring('', 'a')\n  0\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstring('aaa', 'a')\n  3\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstring('aaaa', 'aa')\n  3\n  */\nconst howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstring('', 'a')\n  0\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstring('aaa', 'a')\n  3\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstring('aaaa', 'aa')\n  3\n  */\nconst howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing c ases.\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstring('', 'a')\n  0\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstring('aaa', 'a')\n  3\n  >>> howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstring('aaaa', 'aa')\n  3\n  */\nconst howManyTimesSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++;\n      index += substring.length;\n    }\n  }\n  return count;\n};\n\n/* Find how many times substring can be found in the original string. C ou nt overlap ing ", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four' , 'five', 'six' , 'seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputi s a space-delimited  string of numberals from 'zero' to 'nine'.\n  Vali dchoicesar e 'ze ro', 'one', 'two', 't hre e', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the  string with number s sorte d from smallest to larg est \n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Inputi s un string de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de caracteres de carac", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Givena  positive floatingpoint number, it can be decomposed into  and inte ge r part (la rgest  integer smaller than  gi ven number ) and decimals  (leftover part always smaller than 1).\n\n Return the decimal  part o f the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givena  positive floatingpoint number, it can be decomposed into  and inte ge r part (la rgest  integer smaller than  gi ven number ) and decimals  (leftover part always smaller than 1).\n\n Return the decimal  part o f the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = parseInt(number % 1, 10).toFixed(1);\n  return `${decimal}`;\n};\n\n/* Given a positive integer number n, return its decimal representation in base 10.\n\n >>> decimalToBase10(123)\n '123'\n  */\nconst decimalToBase10 = (number) => {\n  return number.toString().split('').reverse().join('');\n};\n\n/* Given a positive integer number n, return its hexadecimal representation in base 16.\n\n >>> hexToBase16(123)\n '0x123'\n  */\nconst hexToBase16 = (number) => {\n  return number.toString(16);\n};\n\n/* Given a positive integer number n, return its octal representation in base 8.\n\n >>> octalToBase8(123)\n '0o123'\n  */\nconst octalToBase8 = (number) => {\n  return number.toString(8);\n};\n\n/* Given a positive integer number n, return its binary representation in base 2.\n\n >>> binaryToBase2(123)\n '0b123'\n  */\nconst binaryToBase2 = (number) => {\n  return number.toString(2);\n};\n\n/* Given a positive integer number n, return its decimal representation in base 10.\n\n >>> decimalToBase10(123)\n '123'\n  */\nconst decimalToBase10 = (number) => {\n  return number.toString(10);\n};\n\n/* Given a positive integer number n, return its hexadecimal representation in base 16.\n\n >>> hexToBase16(123)\n '0x123'\n  */\nconst hexToBase16 = (number) => {\n  return number.toString(16);\n};\n\n/* Given a positive integer number n, return its octal representation in base 8.\n\n >>> octalToBase8(123)\n '0o123'\n  */\nconst octalToBase8 = (number) => {\n  return number.toString(8);\n};\n\n/* Given a positive integer number n, return its binary representation in base 2.\n\n >>> binaryToBase2(123)\n '0b123'\n  */\nconst binaryToBase2 = (number) => {\n  return number.toString(2);\n};\n\n/* Given a positive integer number n, return its decimal representation in base 10.\n\n >>> decimalToBase10(123)\n '123'\n  */\nconst decimalToBase10 = (number) => {\n  return number.toString(10);\n};\n\n/* Given a positive integer number n, return its hexadecimal representation in base 16.\n\n >>> hexToBase16(123)\n '0x123'\n  */\nconst hexToBase16 = (number) => {\n  return number.toString(16);\n};\n\n/* Given a positive integer number n, return its octal representation in base 8.\n\n >>> octalToBase8(123)\n '0o123'\n  */\nconst octalToBase8 = (number) => {\n  return number.toString(8);\n};\n\n/* Given a positive integer number n, return its binary representation in base 2.\n\n >>> binaryToBase2(123)\n '0b123'\n  */\nconst binaryToBase2 = (number) => {\n  return number.toString(2);\n};\n\n/* Given a positive integer number n, return its decimal representation in base 10.\n\n >>> decimalToBase10(123)\n '123'\n  */\nconst decimalToBase10 = (number) => {\n  return number.toString(10);\n};\n\n/* Given a positive integer number n, return its hexadecimal representation in base 16.\n\n >>> hexToBase16(123)\n '0x123'\n  */\nconst hexToBase16 = (number) => {\n  return number.toString(16);\n};\n\n/* Given a positive integer number n, return its octal representation in base 8.\n\n >>> octalToBase8(123)\n '0o123'\n  */\nconst octalToBase8 = (number) => {\n  return number.toString(8);\n};\n\n/* Given a positive integer number n, return its binary representation in base 2.\n\n >>> binaryToBase2(123)\n '0b123'\n  */\nconst binaryToBase2 = (number) => {\n  return number.toString(2);\n};\n\n/* Given a positive integer number n, return its decimal representation in base 10.\n\n >>> decimalToBase10(123)\n '123'\n  */\nconst decimalToBase10 = (number) => {\n  return number.toString(10);\n};\n\n/* Given a positive integer number n, return its hexadecimal representation in base 16.\n\n >>> hexToBase16(123)\n '0x123'\n  */\nconst hexToBase16 = (number) => {\n  return number.toString(16);\n};\n\n/* Given a positive integer number n, return its octal representation in base 8.\n\n >>> octalToBase8(123)\n '0o123'\n  */\nconst octalToBase8 = (number) => {\n  return number.toString(8);\n};\n\n/* Given a positive integer number n, return its binary representation in base 2.\n\n >>> binaryToBase2(123)\n '0b123'\n  */\nconst binaryToBase2 = (number) => {\n  return number.toString(2);\n};\n\n/* Given a positive integer number n, return its decimal representation in base 10.\n\n >>> decimalToBase10(123)\n '123'\n  */\nconst decimalToBase10 = (number) => {\n  return number.toString(10);\n};\n\n/* Given a positive integer number n, return its hexadecimal representation in base 16.\n\n >>> hexToBase16(123)\n '0x123'\n  */\nconst hexToBase16 = (number) => {\n  return number.toString(16);\n};\n\n/* Given a positive integer number n, return its octal representation in base 8.\n\n >>> octalToBase8(123)\n '0o123'\n  */\nconst octalToBase8 = (number) => {\n  return number.toString(8);\n};\n\n/* Given a positive integer number n, return its binary representation in base 2.\n\n >>> binaryToBase2(123)\n '0b123'\n  */\nconst binaryToBase2 = (number) => {\n  return number.toString(2);\n};\n\n/* Given a positive integer number n, return its decimal representation in base 10.\n\n >>> decimalToBase10(123)\n '123'\n  */\nconst decimalToBase10 = (number) => {\n  return number.toString(10);\n};\n\n/* Given a positive integer number n, return its hexadecimal representation in base 16.\n\n >>> hexToBase16(123)\n '0x123'\n  */\nconst hexToBase16 = (number) => {\n  return number.toString(16);\n};\n\n/* Given a positive integer number n, return its octal representation in base 8.\n\n >>> octalToBase8(123)\n '0o123'\n  */\nconst octalToBase8 = (number) => {\n  return number.toString(8);\n};\n\n/* Given a positive integer number n, return its binary representation in base 2.\n\n >>> binaryToBase2(123)\n '0b123'\n  */\nconst binaryToBase2 = (number) => {\n  return number.toString(2);\n};\n\n/* Given a positive integer number n, return its decimal representation in base 10.\n\n >>> decimalToBase10(123)\n '123'\n  */\nconst decimalToBase10 = (number) => {\n  return number.toString(10);\n};\n\n/* Given a positive integer number n, return its hexadecimal representation in base 16.\n\n >>> hexToBase16(123)\n '0x123'\n  */\nconst hex", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From asupplied list of nu mbers (of length at least two) select and return t wo  that arethe c losest to each\n  othe r a ndreturnthem in order ( smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From asupplied list of nu mbers (of length at least two) select and return t wo  that arethe c losest to each\n  othe r a ndreturnthem in order ( smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let closestElement = undefined;\n  let closestElementIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance = Number.MAX_VALUE;\n  let closestElementDistanceIndex = undefined;\n  let closestElementDistance", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Givenl ist of numbers(ofat least two elements), apply a linear transform t othat list, \n  su ch that the smallestnum ber will b ecome 0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Givenl ist of numbers(ofat least two elements), apply a linear transform t othat list, \n  su ch that the smallestnum ber will b ecome 0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [minNum, maxNum] = numbers.map((num) => num * 2);\n  const [minNum2, maxNum2] = numbers.map((num) => num * 2);\n  return [minNum, minNum2, maxNum, maxNum2];\n};\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs = (num) => {\n  return Math.abs(num);\n};\n\n/**\n * Given a number, return its modulo value\n * >>> mod(-5, 2)\n  1\n  */\nconst mod = (num) => {\n  return num % 2;\n};\n\n/**\n * Given a number, return its modulo value modulo 2\n * >>> mod(-5, 2)\n  0\n  */\nconst mod2 = (num) => {\n  return num % 2 === 0? num : num % 2 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 3\n * >>> mod(-5, 2)\n  2\n  */\nconst mod3 = (num) => {\n  return num % 3 === 0? num : num % 3 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 4\n * >>> mod(-5, 2)\n  3\n  */\nconst mod4 = (num) => {\n  return num % 4 === 0? num : num % 4 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 5\n * >>> mod(-5, 2)\n  4\n  */\nconst mod5 = (num) => {\n  return num % 5 === 0? num : num % 5 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 6\n * >>> mod(-5, 2)\n  5\n  */\nconst mod6 = (num) => {\n  return num % 6 === 0? num : num % 6 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 7\n * >>> mod(-5, 2)\n  6\n  */\nconst mod7 = (num) => {\n  return num % 7 === 0? num : num % 7 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 8\n * >>> mod(-5, 2)\n  7\n  */\nconst mod8 = (num) => {\n  return num % 8 === 0? num : num % 8 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 9\n * >>> mod(-5, 2)\n  8\n  */\nconst mod9 = (num) => {\n  return num % 9 === 0? num : num % 9 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 10\n * >>> mod(-5, 2)\n  9\n  */\nconst mod10 = (num) => {\n  return num % 10 === 0? num : num % 10 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 11\n * >>> mod(-5, 2)\n  10\n  */\nconst mod11 = (num) => {\n  return num % 11 === 0? num : num % 11 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 12\n * >>> mod(-5, 2)\n  11\n  */\nconst mod12 = (num) => {\n  return num % 12 === 0? num : num % 12 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 13\n * >>> mod(-5, 2)\n  12\n  */\nconst mod13 = (num) => {\n  return num % 13 === 0? num : num % 13 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 14\n * >>> mod(-5, 2)\n  13\n  */\nconst mod14 = (num) => {\n  return num % 14 === 0? num : num % 14 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 15\n * >>> mod(-5, 2)\n  14\n  */\nconst mod15 = (num) => {\n  return num % 15 === 0? num : num % 15 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 16\n * >>> mod(-5, 2)\n  15\n  */\nconst mod16 = (num) => {\n  return num % 16 === 0? num : num % 16 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 17\n * >>> mod(-5, 2)\n  16\n  */\nconst mod17 = (num) => {\n  return num % 17 === 0? num : num % 17 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 18\n * >>> mod(-5, 2)\n  17\n  */\nconst mod18 = (num) => {\n  return num % 18 === 0? num : num % 18 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 19\n * >>> mod(-5, 2)\n  18\n  */\nconst mod19 = (num) => {\n  return num % 19 === 0? num : num % 19 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 20\n * >>> mod(-5, 2)\n  19\n  */\nconst mod20 = (num) => {\n  return num % 20 === 0? num : num % 20 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 21\n * >>> mod(-5, 2)\n  20\n  */\nconst mod21 = (num) => {\n  return num % 21 === 0? num : num % 21 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 22\n * >>> mod(-5, 2)\n  21\n  */\nconst mod22 = (num) => {\n  return num % 22 === 0? num : num % 22 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 23\n * >>> mod(-5, 2)\n  22\n  */\nconst mod23 = (num) => {\n  return num % 23 === 0? num : num % 23 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 24\n * >>> mod(-5, 2)\n  23\n  */\nconst mod24 = (num) => {\n  return num % 24 === 0? num : num % 24 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 25\n * >>> mod(-5, 2)\n  24\n  */\nconst mod25 = (num) => {\n  return num % 25 === 0? num : num % 25 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 26\n * >>> mod(-5, 2)\n  25\n  */\nconst mod26 = (num) => {\n  return num % 26 === 0? num : num % 26 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 27\n * >>> mod(-5, 2)\n  26\n  */\nconst mod27 = (num) => {\n  return num % 27 === 0? num : num % 27 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 28\n * >>> mod(-5, 2)\n  27\n  */\nconst mod28 = (num) => {\n  return num % 28 === 0? num : num % 28 + 1;\n};\n\n/**\n * Given a number, return its modulo value modulo 29\n * >>> mod(-5, 2)\n", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filtergiven list of any p ython values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filtergiven list of any p ython values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filtergiven list of any p ython values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [True, False, True]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filtergiven list of any p ython values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 'a', 3.14, 5]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filtergiven list of any p ython values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', []]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filtergiven list of any p ython values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  [5]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', []]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filtergiven list of any p ython values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [5]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), 1, 2, 3, 'abc', {}]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), 1, 2, 3, 'abc', {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  [5]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', []]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filtergiven list of any p ython values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [5]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), 1, 2, 3, 'abc', {}]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), 1, 2, 3, 'abc', {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  [5]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', []]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filtergiven list of any p ython values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [5]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), 1, 2, 3, 'abc', {}]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), 1, 2, 3, 'abc', {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  [5]\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', []]\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filtergiven list of any p ython values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for tuples\n  >>> filterTuples(['a', 3.14, 5])\n  [5]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [(), 1, 2, 3, 'abc', {}]\n  */\nconst filterTuples = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [set(), 1, 2, 3, 'abc', {}]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filtergiven list of any p ython values only for ", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Returnlength of given str ing\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returnlength of given str ing\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string is a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string is not a valid email\n * Returns false if given string ", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = 1;\n  let res = 1;\n  while (t <= n) {\n    if (n % t === 0) {\n      res = t;\n      t *= 2;\n    } else {\n      t /= 2;\n    }\n  }\n  return res;\n};\n\n/* For ag iven number n,find  the largest number that divides n evenly,smaller  t han n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Returnlist of prime facto rs of giveninteger in the order from smallest tola rgest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Returnlist of prime facto rs of giveninteger in the order from smallest tola rgest.\n E ach o f the factors shouldbelisted num ber of times co rresponding to how many times it appeares i n factorization.\n Input n umber should be equal t o t he prod uctofall factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let ", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From alist of integers, r emove all elements that occur more thanonce.\n  Ke ep  order ofeleme nts left the same asinthe input. \n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],9:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst unique = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n\n},{}],10:[function(require,module,exports){\n/**\n * Sorts an array in ascending order\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst sortAscending = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nmodule.exports = sortAscending;\n\n},{}],11:[function(require,module,exports){\n/**\n * Sorts an array in descending order\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst sortDescending = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nmodule.exports = sortDescending;\n\n},{}],12:[function(require,module,exports){\n/**\n * Sorts an array in ascending order and removes duplicates\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortAscending = (arr) => {\n  return unique(sortAscending(arr));\n};\n\nmodule.exports = uniqueAndSortAscending;\n\n},{}],13:[function(require,module,exports){\n/**\n * Sorts an array in descending order and removes duplicates\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortDescending = (arr) => {\n  return unique(sortDescending(arr));\n};\n\nmodule.exports = uniqueAndSortDescending;\n\n},{}],14:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortAscending = (arr) => {\n  return unique(sortAscending(arr)).sort();\n};\n\nmodule.exports = uniqueAndSortAscending;\n\n},{}],15:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortDescending = (arr) => {\n  return unique(sortDescending(arr)).sort();\n};\n\nmodule.exports = uniqueAndSortDescending;\n\n},{}],16:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst unique = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n\n},{}],17:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortAscending = (arr) => {\n  return unique(sortAscending(arr)).sort();\n};\n\nmodule.exports = uniqueAndSortAscending;\n\n},{}],18:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortDescending = (arr) => {\n  return unique(sortDescending(arr)).sort();\n};\n\nmodule.exports = uniqueAndSortDescending;\n\n},{}],19:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst unique = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n\n},{}],20:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortAscending = (arr) => {\n  return unique(sortAscending(arr)).sort();\n};\n\nmodule.exports = uniqueAndSortAscending;\n\n},{}],21:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortDescending = (arr) => {\n  return unique(sortDescending(arr)).sort();\n};\n\nmodule.exports = uniqueAndSortDescending;\n\n},{}],22:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst unique = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n\n},{}],23:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortAscending = (arr) => {\n  return unique(sortAscending(arr)).sort();\n};\n\nmodule.exports = uniqueAndSortAscending;\n\n},{}],24:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst uniqueAndSortDescending = (arr) => {\n  return unique(sortDescending(arr)).sort();\n};\n\nmodule.exports = uniqueAndSortDescending;\n\n},{}],25:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst unique = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n\n},{}],26:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst unique = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n\n},{}],27:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst unique = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n\n},{}],28:[function(require,module,exports){\n/**\n * Removes duplicates from an array\n *\n * @param {Array} arr\n * @return {Array}\n */\nconst unique = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n\n},{}],29:[function(require", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For ag iven string, flip l owercase characters to uppercase and uppercase tolo wercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let newString = string.toLowerCase();\n  for (let i = 0; i < newString.length; i++) {\n    newString = newString.charAt(i) + newString.charAt(newString.length - i - 1);\n  }\n  return newString;\n};\n\n/* For ag iven string, remove all vowels.\n  >>> removeVowels('Hello')\n  'HeLLo'\n  */\nconst removeVowels = (string) => {\n  let newString = string.replace(/[aeiouAEIOU]/g, '');\n  return newString;\n};\n\n/* For ag iven string, remove all vowels and consonants.\n  >>> removeVowelsAndConsonants('Hello')\n  'HeLLo'\n  */\nconst removeVowelsAndConsonants = (string) => {\n  let newString = string.replace(/[aeiouAEIOU]/g, '');\n  let newStringArray = newString.split('');\n  for (let i = 0; i < newStringArray.length; i++) {\n    let newChar = newStringArray[i];\n    if (newChar === 'a' || newChar === 'e' || newChar === 'i' || newChar === 'o' || newChar === 'u') {\n      newStringArray[i] = newChar.toUpperCase();\n    } else if (newChar === 'A' || newChar === 'E' || newChar === 'I' || newChar === 'O' || newChar === 'U') {\n      newStringArray[i] = newChar.toLowerCase();\n    }\n  }\n  return newString.join('');\n};\n\n/* For ag iven string, remove all vowels and consonants and convert all letters to lowercase.\n  >>> removeVowelsAndConsonantsAndLowerCase('Hello')\n  'heLLo'\n  */\nconst removeVowelsAndConsonantsAndLowerCase = (string) => {\n  let newString = string.replace(/[aeiouAEIOU]/g, '');\n  let newStringArray = newString.split('');\n  for (let i = 0; i < newStringArray.length; i++) {\n    let newChar = newStringArray[i];\n    if (newChar === 'a' || newChar === 'e' || newChar === 'i' || newChar === 'o' || newChar === 'u') {\n      newStringArray[i] = newChar.toUpperCase();\n    } else if (newChar === 'A' || newChar === 'E' || newChar === 'I' || newChar === 'O' || newChar === 'U') {\n      newStringArray[i] = newChar.toLowerCase();\n    }\n  }\n  return newString.join('');\n};\n\n/* For ag iven string, remove all vowels and consonants and convert all letters to uppercase.\n  >>> removeVowelsAndConsonantsAndLowerCase('Hello')\n  'HELLO'\n  */\nconst removeVowelsAndConsonantsAndUpperCase = (string) => {\n  let newString = string.replace(/[aeiouAEIOU]/g, '');\n  let newStringArray = newString.split('');\n  for (let i = 0; i < newStringArray.length; i++) {\n    let newChar = newStringArray[i];\n    if (newChar === 'a' || newChar === 'e' || newChar === 'i' || newChar === 'o' || newChar === 'u') {\n      newStringArray[i] = newChar.toUpperCase();\n    } else if (newChar === 'A' || newChar === 'E' || newChar === 'I' || newChar === 'O' || newChar === 'U') {\n      newStringArray[i] = newChar.toLowerCase();\n    }\n  }\n  return newString.join('');\n};\n\n/* For ag iven string, remove all vowels and consonants and convert all letters to lowercase and uppercase.\n  >>> removeVowelsAndConsonantsAndLowerCaseAndUpperCase('Hello')\n  'HELLO'\n  */\nconst removeVowelsAndConsonantsAndLowerCaseAndUpperCase = (string) => {\n  let newString = string.replace(/[aeiouAEIOU]/g, '');\n  let newStringArray = newString.split('');\n  for (let i = 0; i < newStringArray.length; i++) {\n    let newChar = newStringArray[i];\n    if (newChar === 'a' || newChar === 'e' || newChar === 'i' || newChar === 'o' || newChar === 'u') {\n      newStringArray[i] = newChar.toUpperCase();\n    } else if (newChar === 'A' || newChar === 'E' || newChar === 'I' || newChar === 'O' || newChar === 'U') {\n      newStringArray[i] = newChar.toLowerCase();\n    }\n  }\n  return newString.join('');\n};\n\n/* For ag iven string, remove all vowels and consonants and convert all letters to lowercase and uppercase and remove all vowels.\n  >>> removeVowelsAndConsonantsAndLowerCaseAndUpperCase('Hello')\n  'heLLo'\n  */\nconst removeVowelsAndConsonantsAndLowerCaseAndUpperCase = (string) => {\n  let newString = string.replace(/[aeiouAEIOU]/g, '');\n  let newStringArray = newString.split('');\n  for (let i = 0; i < newStringArray.length; i++) {\n    let newChar = newStringArray[i];\n    if (newChar === 'a' || newChar === 'e' || newChar === 'i' || newChar === 'o' || newChar === 'u') {\n      newStringArray[i] = newChar.toUpperCase();\n    } else if (newChar === 'A' || newChar === 'E' || newChar === 'I' || newChar === 'O' || newChar === 'U') {\n      newStringArray[i] = newChar.toLowerCase();\n    }\n  }\n  return newString.join('');\n};\n\n/* For ag iven string, remove all vowels and consonants and convert all letters to lowercase and uppercase and remove all vowels and consonants.\n  >>> removeVowelsAndConsonantsAndLowerCaseAndUpperCase('Hello')\n  'heLLo'\n  */\nconst removeVowelsAndConsonantsAndLowerCaseAndUpperCase = (string) => {\n  let newString = string.replace(/[aeiouAEIOU]/g, '');\n  let newStringArray = newString.split('');\n  for (let i = 0; i < newStringArray.length; i++) {\n    let newChar = newStringArray[i];\n    if (newChar === 'a' || newChar === 'e' || newChar === 'i' || newChar === 'o' || newChar === 'u') {\n      newStringArray[i] = newChar.toUpperCase();\n    } else if (newChar === 'A' || newChar === 'E' || newChar === 'I' || newChar === 'O' || newChar === 'U') {\n      newStringArray[i] = newChar.toLowerCase();\n    }\n  }\n  return newString.join('');\n};\n\n/* For ag iven string, remove all vowels and consonants and convert all letters to lowercase and uppercase and remove all vowels and consonants and convert all letters to lowercase and uppercase and remove all vowels and consonants.\n  >>> removeVowelsAndConsonantsAndLowerCaseAndUpperCase('Hello')\n  'heLLo'\n  */\nconst removeVowelsAndConsonantsAndLowerCaseAndUpperCase = (string) => {\n  let newString = string.replace(/[aeiouAEIOU]/g, '');\n  let newStringArray = newString.split('');\n  for (let i = 0; i < newStringArray.length; i++) {\n    let newChar = newStringArray[i];\n    if (newChar === 'a' || newChar === 'e' || newChar === 'i' || newChar === 'o' || newChar === 'u') {\n      newStringArray[i] = newChar.toUpperCase();\n    } else if (newChar === 'A' || newChar === 'E' || newChar === 'I' || newChar ", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concate nate list of string s into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Concate nate list of string s into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert a string to camel case (first letter capitalized)\n  >>> camelcase('hello')\n  'hello'\n  >>> camelcase('helloWorld')\n  'helloWorld'\n  */\nconst camelcase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Convert a string to pascal case (first letter lowercase)\n  >>> pascalcase('hello')\n  'Hello'\n  >>> pascalcase('helloWorld')\n  'HelloWorld'\n  */\nconst pascalcase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase('hello')\n  'hello'\n  >>> snakecase('helloWorld')\n  'hello_world'\n  */\nconst snakecase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Convert a string to snake case (first letter lowercase)\n  >>> snakecase", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filteran input list of st rings only for ones that start with a given prefix .\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filteran input list of st rings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/**\n * Filter a list of st rings based on a predicate function.\n * If no predicate function is provided, all elements are returned.\n * If predicate function is provided, only those elements that satisfy the predicate are returned.\n * If predicate function returns false, that element is not included in the result.\n * If predicate function returns true, that element will be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * If predicate function returns undefined, that element will not be included in the result.\n * If predicate function returns null, that element will not be included in the result.\n * ", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* You'regiven a list of dep osit and withdrawal operations on a bank account t ha t starts w ith\n zero balance. Your t ask  is to det ect if at any p oint the balance of account fallls below ze ro, and\n  at that p oint fu nction should return tr ue.  Otherw iseitshould returnfalse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. Your t should return true if any operation is withdrawal and false otherwise. Your t should return true if any operation is deposit\n and false otherwise. ", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Returno nly positive number s in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returno nly positive number s in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0).map(n => +n)\n}\n\n/*Returno nly negative number s in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0).map(n => -n)\n}\n\n/*Returno nly number in the list.\n  >>> getNumber([-1, 2, -4, 5, 6])\n  2\n  >>> getNumber([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  5\n  */\nconst getNumber = (l) => {\n  return l.filter(n => typeof n === 'number').map(n => +n)\n}\n\n/*Returno nly string in the list.\n  >>> getString([-1, 2, -4, 5, 6])\n  '2'\n  >>> getString([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  '5'\n  */\nconst getString = (l) => {\n  return l.filter(n => typeof n ==='string').map(n => n)\n}\n\n/*Returno nly boolean in the list.\n  >>> getBoolean([-1, 2, -4, 5, 6])\n  true\n  >>> getBoolean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  false\n  */\nconst getBoolean = (l) => {\n  return l.filter(n => typeof n === 'boolean').map(n => n)\n}\n\n/*Returno nly object in the list.\n  >>> getObject([-1, 2, -4, 5, 6])\n  {}\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  {}\n  */\nconst getObject = (l) => {\n  return l.filter(n => typeof n === 'object').map(n => n)\n}\n\n/*Returno nly array in the list.\n  >>> getArray([-1, 2, -4, 5, 6])\n  []\n  >>> getArray([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getArray = (l) => {\n  return l.filter(n => typeof n === 'array').map(n => n)\n}\n\n/*Returno nly object in the list.\n  >>> getObject([-1, 2, -4, 5, 6])\n  {}\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  {}\n  */\nconst getObject = (l) => {\n  return l.filter(n => typeof n === 'object').map(n => n)\n}\n\n/*Returno nly array in the list.\n  >>> getArray([-1, 2, -4, 5, 6])\n  []\n  >>> getArray([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getArray = (l) => {\n  return l.filter(n => typeof n === 'array').map(n => n)\n}\n\n/*Returno nly object in the list.\n  >>> getObject([-1, 2, -4, 5, 6])\n  {}\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  {}\n  */\nconst getObject = (l) => {\n  return l.filter(n => typeof n === 'object').map(n => n)\n}\n\n/*Returno nly array in the list.\n  >>> getArray([-1, 2, -4, 5, 6])\n  []\n  >>> getArray([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getArray = (l) => {\n  return l.filter(n => typeof n === 'array').map(n => n)\n}\n\n/*Returno nly object in the list.\n  >>> getObject([-1, 2, -4, 5, 6])\n  {}\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  {}\n  */\nconst getObject = (l) => {\n  return l.filter(n => typeof n === 'object').map(n => n)\n}\n\n/*Returno nly array in the list.\n  >>> getArray([-1, 2, -4, 5, 6])\n  []\n  >>> getArray([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getArray = (l) => {\n  return l.filter(n => typeof n === 'array').map(n => n)\n}\n\n/*Returno nly object in the list.\n  >>> getObject([-1, 2, -4, 5, 6])\n  {}\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  {}\n  */\nconst getObject = (l) => {\n  return l.filter(n => typeof n === 'object').map(n => n)\n}\n\n/*Returno nly array in the list.\n  >>> getArray([-1, 2, -4, 5, 6])\n  []\n  >>> getArray([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getArray = (l) => {\n  return l.filter(n => typeof n === 'array').map(n => n)\n}\n\n/*Returno nly object in the list.\n  >>> getObject([-1, 2, -4, 5, 6])\n  {}\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  {}\n  */\nconst getObject = (l) => {\n  return l.filter(n => typeof n === 'object').map(n => n)\n}\n\n/*Returno nly array in the list.\n  >>> getArray([-1, 2, -4, 5, 6])\n  []\n  >>> getArray([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getArray = (l) => {\n  return l.filter(n => typeof n === 'array').map(n => n)\n}\n\n/*Returno nly object in the list.\n  >>> getObject([-1, 2, -4, 5, 6])\n  {}\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  {}\n  */\nconst getObject = (l) => {\n  return l.filter(n => typeof n === 'object').map(n => n)\n}\n\n/*Returno nly array in the list.\n  >>> getArray([-1, 2, -4, 5, 6])\n  []\n  >>> getArray([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getArray = (l) => {\n  return l.filter(n => typeof n === 'array').map(n => n)\n}\n\n/*Returno nly object in the list.\n  >>> getObject([-1, 2, -4, 5, 6])\n  {}\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  {}\n  */\nconst getObject = (l) => {\n  return l.filter(n => typeof n === 'object').map(n => n)\n}\n\n/*Returno nly array in the list.\n  >>> getArray([-1, 2, -4, 5, 6])\n  []\n  >>> getArray([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getArray = (l) => {\n  return l.filter(n => typeof n === 'array').map(n => n)\n}\n\n/*Returno nly object in the list.\n  >>> getObject([-1, 2, -4, 5, 6])\n  {}\n  >>> getObject([5, 3, -5, 2, -3, 3, 9, 0, ", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Returnt rue if a givennumb er is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt rue if a givennumb er is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n <= 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Returns true if the given number is divisible by all prime factors.\n  >>> isDivisibleByAllPrimes(5)\n  true\n  >>> isDivisibleByAllPrimes(6)\n  false\n  >>> isDivisibleByAllPrimes(7)\n  false\n  >>> isDivisibleByAllPrimes(8)\n  false\n  >>> isDivisibleByAllPrimes(9)\n  false\n  >>> isDivisibleByAllPrimes(10)\n  false\n  >>> isDivisibleByAllPrimes(11)\n  false\n  >>> isDivisibleByAllPrimes(12)\n  false\n  >>> isDivisibleByAllPrimes(13)\n  false\n  >>> isDivisibleByAllPrimes(14)\n  false\n  >>> isDivisibleByAllPrimes(15)\n  false\n  >>> isDivisibleByAllPrimes(16)\n  false\n  >>> isDivisibleByAllPrimes(17)\n  false\n  >>> isDivisibleByAllPrimes(18)\n  false\n  >>> isDivisibleByAllPrimes(19)\n  false\n  >>> isDivisibleByAllPrimes(20)\n  false\n  >>> isDivisibleByAllPrimes(21)\n  false\n  >>> isDivisibleByAllPrimes(22)\n  false\n  >>> isDivisibleByAllPrimes(23)\n  false\n  >>> isDivisibleByAllPrimes(24)\n  false\n  >>> isDivisibleByAllPrimes(25)\n  false\n  >>> isDivisibleByAllPrimes(26)\n  false\n  >>> isDivisibleByAllPrimes(27)\n  false\n  >>> isDivisibleByAllPrimes(28)\n  false\n  >>> isDivisibleByAllPrimes(29)\n  false\n  >>> isDivisibleByAllPrimes(30)\n  false\n  >>> isDivisibleByAllPrimes(31)\n  false\n  >>> isDivisibleByAllPrimes(32)\n  false\n  >>> isDivisibleByAllPrimes(33)\n  false\n  >>> isDivisibleByAllPrimes(34)\n  false\n  >>> isDivisibleByAllPrimes(35)\n  false\n  >>> isDivisibleByAllPrimes(36)\n  false\n  >>> isDivisibleByAllPrimes(37)\n  false\n  >>> isDivisibleByAllPrimes(38)\n  false\n  >>> isDivisibleByAllPrimes(39)\n  false\n  >>> isDivisibleByAllPrimes(40)\n  false\n  >>> isDivisibleByAllPrimes(41)\n  false\n  >>> isDivisibleByAllPrimes(42)\n  false\n  >>> isDivisibleByAllPrimes(43)\n  false\n  >>> isDivisibleByAllPrimes(44)\n  false\n  >>> isDivisibleByAllPrimes(45)\n  false\n  >>> isDivisibleByAllPrimes(46)\n  false\n  >>> isDivisibleByAllPrimes(47)\n  false\n  >>> isDivisibleByAllPrimes(48)\n  false\n  >>> isDivisibleByAllPrimes(49)\n  false\n  >>> isDivisibleByAllPrimes(50)\n  false\n  >>> isDivisibleByAllPrimes(51)\n  false\n  >>> isDivisibleByAllPrimes(52)\n  false\n  >>> isDivisibleByAllPrimes(53)\n  false\n  >>> isDivisibleByAllPrimes(54)\n  false\n  >>> isDivisibleByAllPrimes(55)\n  false\n  >>> isDivisibleByAllPrimes(56)\n  false\n  >>> isDivisibleByAllPrimes(57)\n  false\n  >>> isDivisibleByAllPrimes(58)\n  false\n  >>> isDivisibleByAllPrimes(59)\n  false\n  >>> isDivisibleByAllPrimes(60)\n  false\n  >>> isDivisibleByAllPrimes(61)\n  false\n  >>> isDivisibleByAllPrimes(62)\n  false\n  >>> isDivisibleByAllPrimes(63)\n  false\n  >>> isDivisibleByAllPrimes(64)\n  false\n  >>> isDivisibleByAllPrimes(65)\n  false\n  >>> isDivisibleByAllPrimes(66)\n  false\n  >>> isDivisibleByAllPrimes(67)\n  false\n  >>> isDivisibleByAllPrimes(68)\n  false\n  >>> isDivisibleByAllPrimes(69)\n  false\n  >>> isDivisibleByAllPrimes(70)\n  false\n  >>> isDivisibleByAllPrimes(71)\n  false\n  >>> isDivisibleByAllPrimes(72)\n  false\n  >>> isDivisibleByAllPrimes(73)\n  false\n  >>> isDivisibleByAllPrimes(74)\n  false\n  >>> isDivisibleByAllPrimes(75)\n  false\n  >>> isDivisibleByAllPrimes(76)\n  false\n  >>> isDivisibleByAllPrimes(77)\n  false\n  >>> isDivisibleByAllPrimes(78)\n  false\n  >>> isDivisibleByAllPrimes(79)\n  false\n  >>> isDivisibleByAllPrimes(80)\n  false\n  >>> isDivisibleByAllPrimes(81)\n  false\n  >>> isDivisibleByAllPrimes(82)\n  false\n  >>> isDivisibleByAllPrimes(83)\n  false\n  >>> isDivisibleByAllPrimes(84)\n  false\n  >>> isDivisibleByAllPrimes(85)\n  false\n  >>> isDivisibleByAllPrimes(86)\n  false\n  >>> isDivisibleByAllPrimes(87)\n  false\n  >>> isDivisibleByAllPrimes(88)\n  false\n  >>> isDivisibleByAllPrimes(89)\n  false\n  >>> isDivisibleByAllPrimes(90)\n  false\n  >>> isDivisibleByAllPrimes(91)\n  ", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 + .... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  } , 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluat es polynomial withcoefficients xs at point x.\n  return xs[0]+ xs[1]  *  x + xs[1]  * x^ 2 +.... xs[n] * x^n  * /\nconst po ly = (xs, x) =>  {\n  return xs.reduce((prev, item, index) = > {\n    returnprev  + item  * Math.pow(x, index);  }, 0);\n} \n/*\n xs are coefficients of a polynomial.\n  findZero find  xsuchthat poly (x) = 0.\n  findZero returns only only zero point, even i f there are many.\n  Moreover, findZero only tak es list xs having even number of coefficients\n  andlargest n on zero coefficient as it guaran tees\n  a soluti on.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let zero = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let zeros = [];\n  let zeroPoints = [];\n  let zeroPointsIndex = [];\n  let zeroPointsIndexIndex = [];\n  let zeroPointsIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n  let zeroPointsIndexIndexIndexIndexIndex", "passed": 1}
{"task_id": "JavaScript/33", "prompt": "/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e ind icies that are not di vis ible by th ree, while itsvalues at the indicies that are divisible b y three are equal\n to the  values of the correspo ndi ng indi cies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  let l3 = [];\n  let l4 = [];\n  let l5 = [];\n  let l6 = [];\n  let l7 = [];\n  let l8 = [];\n  let l9 = [];\n  let l10 = [];\n  let l11 = [];\n  let l12 = [];\n  let l13 = [];\n  let l14 = [];\n  let l15 = [];\n  let l16 = [];\n  let l17 = [];\n  let l18 = [];\n  let l19 = [];\n  let l20 = [];\n  let l21 = [];\n  let l22 = [];\n  let l23 = [];\n  let l24 = [];\n  let l25 = [];\n  let l26 = [];\n  let l27 = [];\n  let l28 = [];\n  let l29 = [];\n  let l30 = [];\n  let l31 = [];\n  let l32 = [];\n  let l33 = [];\n  let l34 = [];\n  let l35 = [];\n  let l36 = [];\n  let l37 = [];\n  let l38 = [];\n  let l39 = [];\n  let l40 = [];\n  let l41 = [];\n  let l42 = [];\n  let l43 = [];\n  let l44 = [];\n  let l45 = [];\n  let l46 = [];\n  let l47 = [];\n  let l48 = [];\n  let l49 = [];\n  let l50 = [];\n  let l51 = [];\n  let l52 = [];\n  let l53 = [];\n  let l54 = [];\n  let l55 = [];\n  let l56 = [];\n  let l57 = [];\n  let l58 = [];\n  let l59 = [];\n  let l60 = [];\n  let l61 = [];\n  let l62 = [];\n  let l63 = [];\n  let l64 = [];\n  let l65 = [];\n  let l66 = [];\n  let l67 = [];\n  let l68 = [];\n  let l69 = [];\n  let l70 = [];\n  let l71 = [];\n  let l72 = [];\n  let l73 = [];\n  let l74 = [];\n  let l75 = [];\n  let l76 = [];\n  let l77 = [];\n  let l78 = [];\n  let l79 = [];\n  let l80 = [];\n  let l81 = [];\n  let l82 = [];\n  let l83 = [];\n  let l84 = [];\n  let l85 = [];\n  let l86 = [];\n  let l87 = [];\n  let l88 = [];\n  let l89 = [];\n  let l90 = [];\n  let l91 = [];\n  let l92 = [];\n  let l93 = [];\n  let l94 = [];\n  let l95 = [];\n  let l96 = [];\n  let l97 = [];\n  let l98 = [];\n  let l99 = [];\n  let l100 = [];\n  let l101 = [];\n  let l102 = [];\n  let l103 = [];\n  let l104 = [];\n  let l105 = [];\n  let l106 = [];\n  let l107 = [];\n  let l108 = [];\n  let l109 = [];\n  let l110 = [];\n  let l111 = [];\n  let l112 = [];\n  let l113 = [];\n  let l114 = [];\n  let l115 = [];\n  let l116 = [];\n  let l117 = [];\n  let l118 = [];\n  let l119 = [];\n  let l120 = [];\n  let l121 = [];\n  let l122 = [];\n  let l123 = [];\n  let l124 = [];\n  let l125 = [];\n  let l126 = [];\n  let l127 = [];\n  let l128 = [];\n  let l129 = [];\n  let l130 = [];\n  let l131 = [];\n  let l132 = [];\n  let l133 = [];\n  let l134 = [];\n  let l135 = [];\n  let l136 = [];\n  let l137 = [];\n  let l138 = [];\n  let l139 = [];\n  let l140 = [];\n  let l141 = [];\n  let l142 = [];\n  let l143 = [];\n  let l144 = [];\n  let l145 = [];\n  let l146 = [];\n  let l147 = [];\n  let l148 = [];\n  let l149 = [];\n  let l150 = [];\n  let l151 = [];\n  let l152 = [];\n  let l153 = [];\n  let l154 = [];\n  let l155 = [];\n  let l156 = [];\n  let l157 = [];\n  let l158 = [];\n  let l159 = [];\n  let l160 = [];\n  let l161 = [];\n  let l162 = [];\n  let l163 = [];\n  let l164 = [];\n  let l165 = [];\n  let l166 = [];\n  let l167 = [];\n  let l168 = [];\n  let l169 = [];\n  let l170 = [];\n  let l171 = [];\n  let l172 = [];\n  let l173 = [];\n  let l174 = [];\n  let l175 = [];\n  let l176 = [];\n  let l177 = [];\n  let l178 = [];\n  let l179 = [];\n  let l180 = [];\n  let l181 = [];\n  let l182 = [];\n  let l183 = [];\n  let l184 = [];\n  let l185 = [];\n  let l186 = [];\n  let l187 = [];\n  let l188 = [];\n  let l189 = [];\n  let l190 = [];\n  let l191 = [];\n  let l192 = [];\n  let l193 = [];\n  let l194 = [];\n  let l195 = [];\n  let l196 = [];\n  let l197 = [];\n  let l198 = [];\n  let l199 = [];\n  let l200 = [];\n  let l201 = [];\n  let l202 = [];\n  let l203 = [];\n  let l204 = [];\n  let l205 = [];\n  let l206 = [];\n  let l207 = [];\n  let l208 = [];\n  let l209 = [];\n  let l210 = [];\n  let l211 = [];\n  let l212 = [];\n  let l213 = [];\n  let l214 = [];\n  let l215 = [];\n  let l216 = [];\n  let l217 = [];\n  let l218 = [];\n  let l219 = [];\n  let l220 = [];\n  let l221 = [];\n  let l222 = [];\n  let l223 = [];\n  let l224 = [];\n  let l225 = [];\n  let l226 = [];\n  let l227 = [];\n  let l228 = [];\n  let l229 = [];\n  let l230 = [];\n  let l231 = [];\n  let l232 = [];\n  let l233 = [];\n  let l234 = [];\n  let l235 = [];\n  let l236 = [];\n  let l237 = [];\n  let l238 = [];\n  let l239 = [];\n  let l240 = [];\n  let l241 = [];\n  let l242 = [];\n  let l243 = [];\n  let l244 = [];\n  let l245 = [];\n  let l246 = [];\n  let l247 = [];\n  let l248 = [];\n  let l249 = [];\n  let l250 = [];\n  let l251 = [];\n  let l252 = [];\n  let l253 = [];\n  let l254 = [];\n  let l255 = [];\n  let l256 = [];\n  let l257 = [];\n  let l258 = [];\n  let l259 = [];\n  let l260 = [];\n  let l261 = [];\n  let l262 = [];\n  let l263 = [];\n  let l264 = [];\n  let l265 = [];\n  let l266 = [];\n  let l267 = [];", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Returns orted unique elemen ts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returns orted unique elemen ts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = new Set()\n  return l.filter((e) => {\n    if (seen.has(e)) return false\n    seen.add(e)\n    return true\n  })\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> all([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  true\n  */\nconst all = (l) => {\n  return l.every((e) => e!== 0)\n}\n\n/*Returns true if a list contains any elemen ts in a list\n  >>> any([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  true\n  */\nconst any = (l) => {\n  return l.some((e) => e!== 0)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  true\n  */\nconst allIn = (l) => {\n  return l.every(e => e!== 0)\n}\n\n/*Returns true if a list contains any elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  true\n  */\nconst anyIn = (l) => {\n  return l.some(e => e!== 0)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains any elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains any elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains any elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> allIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst allIn = (l, e) => {\n  return l.every(e => e === e)\n}\n\n/*Returns true if a list contains all elemen ts in a list\n  >>> anyIn([5, 3, 5, 2, 3, 3, 9, 0, 123], e => e === 5)\n  true\n  */\nconst anyIn = (l, e) => {\n  return l.some(e => e === e)\n}\n\n/*Returns true if a list contains all elem", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Returnm aximum elementin t he list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnm aximum elementin t he list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Return the minimum element\n * >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Return the sum of the elements in the list\n * >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/**\n * Return the difference of the elements in the list\n * >>> differenceElement([1, 2, 3])\n  -2\n  >>> differenceElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst differenceElement = (l) => {\n  let diff = 0;\n  for (let i = 0; i < l.length; i++) {\n    diff += l[i] - l[i + 1];\n  }\n  return diff;\n};\n\n/**\n * Return the product of the elements in the list\n * >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst productElement = (l) => {\n  let prod = 0;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n  }\n  return prod;\n};\n\n/**\n * Return the quotient of the elements in the list\n * >>> quotientElement([1, 2, 3])\n  2\n  >>> quotientElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst quotientElement = (l) => {\n  let quotient = 1;\n  for (let i = 0; i < l.length; i++) {\n    quotient /= l[i];\n  }\n  return quotient;\n};\n\n/**\n * Return the remainder of the elements in the list\n * >>> remainderElement([1, 2, 3])\n  3\n  >>> remainderElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst remainderElement = (l) => {\n  let remainder = 1;\n  for (let i = 0; i < l.length; i++) {\n    remainder *= l[i];\n  }\n  return remainder;\n};\n\n/**\n * Return the product of the elements in the list\n * >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst productElement = (l) => {\n  let prod = 0;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n  }\n  return prod;\n};\n\n/**\n * Return the quotient of the elements in the list\n * >>> quotientElement([1, 2, 3])\n  2\n  >>> quotientElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst quotientElement = (l) => {\n  let quotient = 1;\n  for (let i = 0; i < l.length; i++) {\n    quotient /= l[i];\n  }\n  return quotient;\n};\n\n/**\n * Return the remainder of the elements in the list\n * >>> remainderElement([1, 2, 3])\n  3\n  >>> remainderElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst remainderElement = (l) => {\n  let remainder = 1;\n  for (let i = 0; i < l.length; i++) {\n    remainder *= l[i];\n  }\n  return remainder;\n};\n\n/**\n * Return the product of the elements in the list\n * >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst productElement = (l) => {\n  let prod = 0;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n  }\n  return prod;\n};\n\n/**\n * Return the quotient of the elements in the list\n * >>> quotientElement([1, 2, 3])\n  2\n  >>> quotientElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst quotientElement = (l) => {\n  let quotient = 1;\n  for (let i = 0; i < l.length; i++) {\n    quotient /= l[i];\n  }\n  return quotient;\n};\n\n/**\n * Return the remainder of the elements in the list\n * >>> remainderElement([1, 2, 3])\n  3\n  >>> remainderElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst remainderElement = (l) => {\n  let remainder = 1;\n  for (let i = 0; i < l.length; i++) {\n    remainder *= l[i];\n  }\n  return remainder;\n};\n\n/**\n * Return the product of the elements in the list\n * >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst productElement = (l) => {\n  let prod = 0;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n  }\n  return prod;\n};\n\n/**\n * Return the quotient of the elements in the list\n * >>> quotientElement([1, 2, 3])\n  2\n  >>> quotientElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst quotientElement = (l) => {\n  let quotient = 1;\n  for (let i = 0; i < l.length; i++) {\n    quotient /= l[i];\n  }\n  return quotient;\n};\n\n/**\n * Return the remainder of the elements in the list\n * >>> remainderElement([1, 2, 3])\n  3\n  >>> remainderElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst remainderElement = (l) => {\n  let remainder = 1;\n  for (let i = 0; i < l.length; i++) {\n    remainder *= l[i];\n  }\n  return remainder;\n};\n\n/**\n * Return the product of the elements in the list\n * >>> productElement([1, 2, 3])\n  6\n  >>> productElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  12\n  */\nconst productElement = (l) => {\n  let prod = 0;\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i];\n  }\n  return prod;\n};\n\n/**\n * Return the quotient of the elements in the list\n * >>> quotientElement([1, 2, 3])\n  2\n  >>> quotientElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst quotientElement = (l) => {\n  let quotient = 1;\n  for (let i = 0; i < l.length; i++) {\n    quotient /= l[i];\n  }\n  return quotient;\n};\n\n/**\n * Return the remainder of the elements in the list\n * >>> remainderElement([1, 2, 3])\n  3\n  >>> remainderElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst remainderElement = (l) => {\n  let remainder = 1;\n  for (let i = 0; i < l.length; i++) {\n    remainder *= l[i];\n  }\n  return remainder;\n};\n\n/**\n * Return the product of the elements in the list\n * ", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Returnt he number of timesthe digit 7appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt he number of timesthe digit 7appears in integers less than n whichar e divisibl e by11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let res = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      res = 1;\n    } else if (i % 11 === 0 && i % 13 === 0) {\n      res = 2;\n    }\n  }\n  return res;\n};\n\n/*\n  Return the sum of all numbers from 1 to n\n  >>> sumOfNumbers(10)\n  15\n  >>> sumOfNumbers(100)\n  200\n  >>> sumOfNumbers(1000)\n  3000\n  >>> sumOfNumbers(10000)\n  40000\n  >>> sumOfNumbers(100000)\n  500000\n  >>> sumOfNumbers(1000000)\n  6000000\n  >>> sumOfNumbers(10000000)\n  70000000\n  >>> sumOfNumbers(100000000)\n  800000000\n  >>> sumOfNumbers(1000000000)\n  9000000000\n  >>> sumOfNumbers(10000000000)\n  100000000000\n  >>> sumOfNumbers(100000000000)\n  1000000000000\n  >>> sumOfNumbers(1000000000000)\n  10000000000000\n  >>> sumOfNumbers(10000000000000)\n  100000000000000\n  >>> sumOfNumbers(100000000000000)\n  1000000000000000\n  >>> sumOfNumbers(10000000000000000)\n  10000000000000000\n  >>> sumOfNumbers(100000000000000000)\n  1000000000000000000\n  >>> sumOfNumbers(10000000000000000000)\n  100000000000000000000\n  >>> sumOfNumbers(100000000000000000000)\n  1000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000)\n  100000000000000000000000\n  >>> sumOfNumbers(1000000000000000000000000)\n  10000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000)\n  100000000000000000000000000\n  >>> sumOfNumbers(1000000000000000000000000000)\n  10000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000)\n  100000000000000000000000000000\n  >>> sumOfNumbers(1000000000000000000000000000000)\n  10000000000000000000000000000000\n  >>> sumOfNumbers(100000000000000000000000000000000)\n  1000000000000000000000000000000000\n  >>> sumOfNumbers(1000000000000000000000000000000000)\n  10000000000000000000000000000000000\n  >>> sumOfNumbers(100000000000000000000000000000000000)\n  1000000000000000000000000000000000000\n  >>> sumOfNumbers(1000000000000000000000000000000000000)\n  10000000000000000000000000000000000000\n  >>> sumOfNumbers(100000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000\n  >>> sumOfNumbers(100000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000\n  >>> sumOfNumbers(100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(1000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000\n  >>> sumOfNumbers(10000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the odd indiciesare equal\n  to the values of the odd indic ies of l, but sorte d.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...even,...odd]\n}\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the odd indiciesare equal\n  to the values of the odd indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the even indiciesare equal\n  to the values of the even indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the odd indiciesare equal\n  to the values of the odd indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the odd indiciesare equal\n  to the values of the odd indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the odd indiciesare equal\n  to the values of the odd indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortOddEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the odd indiciesare equal\n  to the values of the odd indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This fun ction takes a listl and returns a list l' such that\n  l' is identica lto l inth e odd  indicies, while itsval ues at the odd indiciesare equal\n  to the values of the odd indic ies of l, but sorte d.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortOddEvenOddEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns  encoded string bycycling groups of three characters.\n  */\nconst enc od eCyclic=(s) = > {\n  var groups = [] , g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup .leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2 .join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nc onst dec odeCyclic= (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns  encoded string bycycling groups of three characters.\n  */\nconst enc od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nc onst dec odeCyclic= (s) => {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\nconst dec od eCyclic=(s) = > {\n  var groups = [], g roups2 = [ ];\n  for (let i  = 0; i < Math.floor((s.length + 2) / 3); i ++) {\n    groups.pu sh(s.sl ice(3 * i, Math.min((3* i  + 3),s.length)));\n  }\n  for (const group ofgroups) {\n    if (gr oup.leng th == 3)      groups2.push(group.slice(1) + group[0]);\n    else      groups2.push(group);\n  }\n  returngroups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_ cyclic function. Returns decoded  string.\n  */\n", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFi b returns n-thnumb er that is a Fibonacci number and it's also prime. \n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFi b returns n-thnumb er that is a Fibonacci number and it's also prime. \n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return prime;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. \n  >>> primeFibFib(1)\n  2\n  >>> primeFibFib(2)\n  3\n  >>> primeFibFib(3)\n  5\n  >>> primeFibFib(4)\n  13\n  >>> primeFibFib(5)\n  89\n  */\nconst primeFibFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return num;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. \n  >>> primeFibFibFibFib(1)\n  2\n  >>> primeFibFibFibFib(2)\n  3\n  >>> primeFibFibFibFib(3)\n  5\n  >>> primeFibFibFib(4)\n  13\n  >>> primeFibFibFib(5)\n  89\n  */\nconst primeFibFibFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return num;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. \n  >>> primeFibFibFibFib(1)\n  2\n  >>> primeFibFibFibFib(2)\n  3\n  >>> primeFibFibFibFib(3)\n  5\n  >>> primeFibFibFib(4)\n  13\n  >>> primeFibFibFib(5)\n  89\n  */\nconst primeFibFibFibFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return num;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. \n  >>> primeFibFibFibFibFib(1)\n  2\n  >>> primeFibFibFibFibFib(2)\n  3\n  >>> primeFibFibFibFib(3)\n  5\n  >>> primeFibFibFibFib(4)\n  13\n  >>> primeFibFibFibFib(5)\n  89\n  */\nconst primeFibFibFibFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return num;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. \n  >>> primeFibFibFibFibFib(1)\n  2\n  >>> primeFibFibFibFib(2)\n  3\n  >>> primeFibFibFibFibFib(3)\n  5\n  >>> primeFibFibFibFibFib(4)\n  13\n  >>> primeFibFibFibFibFib(5)\n  89\n  */\nconst primeFibFibFibFibFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return num;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. \n  >>> primeFibFibFibFibFib(1)\n  2\n  >>> primeFibFibFibFibFib(2)\n  3\n  >>> primeFibFibFibFibFib(3)\n  5\n  >>> primeFibFibFibFibFib(4)\n  13\n  >>> primeFibFibFibFibFib(5)\n  89\n  */\nconst primeFibFibFibFibFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return num;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. \n  >>> primeFibFibFibFibFibFib(1)\n  2\n  >>> primeFibFibFibFibFib(2)\n  3\n  >>> primeFibFibFibFibFib(3)\n  5\n  >>> primeFibFibFibFibFib(4)\n  13\n  >>> primeFibFibFibFibFib(5)\n  89\n  */\nconst primeFibFibFibFibFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return num;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. \n  >>> primeFibFibFibFibFibFib(1)\n  2\n  >>> primeFibFibFibFibFibFib(2)\n  3\n  >>> primeFibFibFibFibFibFib(3)\n  5\n  >>> primeFibFibFibFibFibFib(4)\n  13\n  >>> primeFibFibFibFibFibFib(5)\n  89\n  */\nconst primeFibFibFibFibFibFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return num;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. \n  >>> primeFibFibFibFibFibFib(1)\n  2\n  >>> primeFibFibFibFibFibFib(2)\n  3\n  >>> primeFibFibFibFibFibFib(3)\n  5\n  >>> primeFibFibFibFibFibFib(4)\n  13\n  >>> primeFibFibFibFibFibFib(5)\n  89\n  */\nconst primeFibFibFibFibFibFib = (n) => {\n  let prime = true;\n  let num = 1;\n  \n  for(let i = 2; i <= n; i++){\n    if(num % i === 0){\n      prime = false;\n      break;\n    }\n    num = num + i;\n  }\n  \n  return num;\n}\n\n/*\n  primeFib b returns n-th number that is a Fibonacci number and it's also prime. ", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For ag iven list of inputnumbers, calculate Mean Absolute Deviation  aroun dthe mean o f thi s dataset.\n  Mean Abs olu teDeviati on is the avera ge absolute difference between each\n  eleme nt and a centerpoin t (mean  in this case):\n  MAD =  av erage | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((n) => Math.round(n));\n  const meansMean = means.reduce((acc, n) => acc + n, 0);\n  const meansMeanSquared = means.reduce((acc, n) => acc + n * n, 0);\n  const meansMeanSquaredDeviation = meansMeanSquared - meansMean * meansMean;\n  const meansMeanSquaredDeviationSquared = meansMeanSquaredDeviation * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRoot = meansMeanSquaredDeviationSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootSquared = meansMeanSquaredDeviationRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRoot = meansMeanSquaredDeviationRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootSquared = meansMeanSquaredDeviationRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRoot = meansMeanSquaredDeviationRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootSquared = meansMeanSquaredDeviationRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDeviationRootRootRootSquared / meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRootSquared = meansMeanSquaredDeviationRootRootRootRootSquared * meansMeanSquaredDeviation;\n  const meansMeanSquaredDeviationRootRootRootRoot = meansMeanSquaredDevi", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  triples SumToZero takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSumToOne takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to one,and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to two,and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to three,and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to four,and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to five,and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to six,and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to seven,and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that sum to eight,and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine takes a l ist of integers as an input.\n  it returns true ifth ere areth ree d istinct elements in t helist that ", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine  a road that'sa pe rfectly straight infinitely long line.\n ncars ar edrivingle ft to  right;  simultaneous ly,  adiffere nt set of n car s\n  are driving right to left.   The two se ts of cars start ou t being  very far from\n  each o the r.  All cars move in the same speed.  Two cars are said to collide \n whena car tha t's moving left to right hits a car that's moving rightto left.\n  However, the cars are infinitely stu rdy and strong; as a result, they continue moving\n in theirtrajectory as if they did not co llide.\n\n  Thisfunction  outputs thenumber of such colli sions.\n  */\nconst car RaceCollis ion=  (n) =>  {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine  a road that'sa pe rfectly straight infinitely long line.\n ncars ar edrivingle ft to  right;  simultaneous ly,  adiffere nt set of n car s\n  are driving right to left.   The two se ts of cars start ou t being  very far from\n  each o the r.  All cars move in the same speed.  Two cars are said to collide \n whena car tha t's moving left to right hits a car that's moving rightto left.\n  However, the cars are infinitely stu rdy and strong; as a result, they continue moving\n in theirtrajectory as if they did not co llide.\n\n  Thisfunction  outputs thenumber of such colli sions.\n  */\nconst car RaceCollis ion=  (n) =>  {\n  const cars =  [\n    new carpassed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnl ist with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 1];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3, n + 4];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3, n + 4, n + 5];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWithWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWithWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWithWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3, n + 4, n + 5, n + 6];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWithWithWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWithWithWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWithWithWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWithWithWithWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWithWithWithWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWithWithWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWithWithWithWithWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWithWithWithWithWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWithWithWithWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWithWithWithWithWithWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWithWithWithWithWithWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWithWithWithWithWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWithWithWithWithWithWithWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWithWithWithWithWithWithWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWithWithWithWithWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWithWithWithWithWithWithWithWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWithWithWithWithWithWithWithWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWithWithWithWithWithWithWith = (l) => {\n  let i = l.length - 1;\n  let n = 0;\n  while (i > 0) {\n    n += l[--i];\n  }\n  return [n, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n + 11, n + 12];\n};\n\n/**\n  Returns a new list with elements i ncremented by 1.\n  >>> incrListWithWithWithWithWithWithWithWithWithWith([1, 2, 3])\n  [2, 3, 4]\n  >>> incrListWithWithWithWithWithWithWithWithWithWith([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListWithWithWithWithWithWithWithWithWith = (l) => {\n  let i = l.length - ", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSu mToZero takes a lis t of integers as an input.\n  it returnstrue if th er e are twodisti nct elements in the l ist  that\n  su m to zero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> ", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Changen umerical base of in put number x to base.\n  return string representati on  after the  conv ersion.\n  base number s a reless th an 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Changen umerical base of in put number x to base.\n  return string representati on  after the  conv ersion.\n  base number s a reless th an 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  const str = x.toString(base);\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 10\n  >>> toBase10(10)\n  '10'\n  >>> toBase10(9)\n  '100'\n  >>> toBase10(8)\n  '1000'\n  >>> toBase10(7)\n  '1111'\n  */\nconst toBase10 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase2 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase10 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase2 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase10 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase2 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase10 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase2 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase10 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase2 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase10 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase2 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase10 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> toBase2(8)\n  '1000'\n  >>> toBase2(7)\n  '1111'\n  */\nconst toBase2 = (num) => {\n  if (num < 10) {\n    return num.toString();\n  }\n  const str = num.toString();\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  convert a number to a string with base 2\n  >>> toBase2(10)\n  '10'\n  >>> toBase2(9)\n  '100'\n  >>> ", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given le ngth of a sideandhigh returnarea for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given le ngth of a sideandhigh returnarea for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleAreaL = (l, h) => {\n  return l * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaR = (l, h) => {\n  return h * (l - 1);\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaH = (l, h) => {\n  return h * (l - 1);\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaV = (l, h) => {\n  return l * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleArea = (l, h) => {\n  return triangleAreaL(l, h) + triangleAreaR(l, h) + triangleAreaH(l, h) + triangleAreaV(l, h);\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaL = (l, h) => {\n  return triangleAreaL(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaR = (l, h) => {\n  return triangleAreaR(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaH = (l, h) => {\n  return triangleAreaH(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaV = (l, h) => {\n  return triangleAreaV(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleArea = (l, h) => {\n  return triangleAreaL(l, h) * triangleAreaR(l, h) * triangleAreaH(l, h) * triangleAreaV(l, h);\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaL = (l, h) => {\n  return triangleAreaL(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaR = (l, h) => {\n  return triangleAreaR(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaH = (l, h) => {\n  return triangleAreaH(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaV = (l, h) => {\n  return triangleAreaV(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleArea = (l, h) => {\n  return triangleAreaL(l, h) * triangleAreaR(l, h) * triangleAreaH(l, h) * triangleAreaV(l, h);\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaL = (l, h) => {\n  return triangleAreaL(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaR = (l, h) => {\n  return triangleAreaR(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaH = (l, h) => {\n  return triangleAreaH(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaV = (l, h) => {\n  return triangleAreaV(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleArea = (l, h) => {\n  return triangleAreaL(l, h) * triangleAreaR(l, h) * triangleAreaH(l, h) * triangleAreaV(l, h);\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaL = (l, h) => {\n  return triangleAreaL(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaR = (l, h) => {\n  return triangleAreaR(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaH = (l, h) => {\n  return triangleAreaH(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaV = (l, h) => {\n  return triangleAreaV(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleArea = (l, h) => {\n  return triangleAreaL(l, h) * triangleAreaR(l, h) * triangleAreaH(l, h) * triangleAreaV(l, h);\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaL = (l, h) => {\n  return triangleAreaL(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaR = (l, h) => {\n  return triangleAreaR(l, h) * h;\n};\n\n/*Given le ngth of a sideandlow returnarea for a triangle.\n  >>> triangleAreaL(5, 3)\n  7.5\n  */\nconst triangleAreaH = (l, h) => {\n  return triangleAreaH(l, ", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4  number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib4(0) -> 0 \n fib4(1) -> 0\n  fib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) +fib4(n-2) + fib4(n- 3) + fi b4(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib4 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The Fib4  number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib4(0) -> 0 \n fib4(1) -> 0\n  fib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) +fib4(n-2) + fib4(n- 3) + fi b4(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib4 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibonacci number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib5(0) -> 0 \n fib5(1) -> 1\n  fib5(2) ->  1\n  fib5(3) -> 1\n  fib5(n) -> fib5(n-1) +fib5(n-2) + fib5(n- 3) + fi b5(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib5 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  13\n  >>> fib5(7)\n  21\n  */\nconst fib5 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\n/*The Fibonacci number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib6(0) -> 0 \n fib6(1) -> 1\n  fib6(2) ->  1\n  fib6(3) -> 1\n  fib6(n) -> fib6(n-1) +fib6(n-2) + fib6(n- 3) + fi b6(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib6 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib6(5)\n  6\n  >>> fib6(6)\n  13\n  >>> fib6(7)\n  21\n  */\nconst fib6 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4);\n};\n\n/*The Fibonacci number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib7(0) -> 0 \n fib7(1) -> 1\n  fib7(2) ->  1\n  fib7(3) -> 1\n  fib7(n) -> fib7(n-1) +fib7(n-2) + fib7(n- 3) + fi b7(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib7 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib7(5)\n  7\n  >>> fib7(6)\n  13\n  >>> fib7(7)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4);\n};\n\n/*The Fibonacci number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib8(0) -> 0 \n fib8(1) -> 1\n  fib8(2) ->  1\n  fib8(3) -> 1\n  fib8(n) -> fib8(n-1) +fib8(n-2) + fib8(n- 3) + fi b8(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib8 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib8(5)\n  8\n  >>> fib8(6)\n  13\n  >>> fib8(7)\n  21\n  */\nconst fib8 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4);\n};\n\n/*The Fibonacci number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib9(0) -> 0 \n fib9(1) -> 1\n  fib9(2) ->  1\n  fib9(3) -> 1\n  fib9(n) -> fib9(n-1) +fib9(n-2) + fib9(n- 3) + fi b9(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib9 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib9(5)\n  9\n  >>> fib9(6)\n  15\n  >>> fib9(7)\n  23\n  */\nconst fib9 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4);\n};\n\n/*The Fibonacci number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib10(0) -> 0 \n fib10(1) -> 1\n  fib10(2) ->  1\n  fib10(3) -> 1\n  fib10(n) -> fib10(n-1) +fib10(n-2) + fib10(n- 3) + fi b10(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib10 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib10(5)\n  10\n  >>> fib10(6)\n  15\n  >>> fib10(7)\n  23\n  */\nconst fib10 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4);\n};\n\n/*The Fibonacci number sequence is  a sequencesimilar to the Fibbonacci sequnece tha t' s definedas fo llows:\n  fib11(0) -> 0 \n fib11(1) -> 1\n  fib11(2) ->  1\n  fib11(3) -> 1\n  fib11(n) -> fib11(n-1) +fib11(n-2) + fib11(n- 3) + fi b11(n-4).\n  Please write  afunctio n to efficiently compute the n-th element of the fib11 numbe r s equen ce.  Do n ot userecursion.\n  >>> fib11(5)\n  ", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median2 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median3 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median4 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median5 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median6 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median7 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median8 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median9 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median10 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median11 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median12 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median13 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median14 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median15 = (l, i) => {\n  let n = l.length\n  let m = n / 2\n  let i = Math.floor((n - 1) / 2)\n  let j = n - 1\n  let sum = 0\n  while (i <= j) {\n    sum += l[i]\n    i++\n  }\n  return sum / 2\n}\n\n/*Returnm edian of elements i n the list l.\n  >>> median([3, 1, 2, 4, 5])\n  ", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Checksif given string isa palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindrome('aba', 3)\n  true\n  >>> isPalindrome('aba', 2)\n  false\n  >>> isPalindrome('aba', 1)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLength('aba', 3)\n  true\n  >>> isPalindromeWithLength('aba', 2)\n  false\n  >>> isPalindromeWithLength('aba', 1)\n  false\n  */\nconst isPalindromeWithLengthAndText = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length && reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLengthAndText('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndText('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndText('aba', 1)\n  false\n  */\nconst isPalindromeWithLengthAndTextAndText = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length && reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLengthAndTextAndText('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndTextAndText('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndTextAndText('aba', 1)\n  false\n  */\nconst isPalindromeWithLengthAndTextAndTextAndText = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length && reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLengthAndTextAndTextAndText('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndTextAndTextAndText('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndTextAndTextAndText('aba', 1)\n  false\n  */\nconst isPalindromeWithLengthAndTextAndTextAndText = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length && reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLengthAndTextAndTextAndText('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndTextAndTextAndText('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndTextAndTextAndText('aba', 1)\n  false\n  */\nconst isPalindromeWithLengthAndTextAndTextAndText = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length && reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLengthAndTextAndTextAndText('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndTextAndTextAndText('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndTextAndTextAndText('aba', 1)\n  false\n  */\nconst isPalindromeWithLengthAndTextAndTextAndTextAndText = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length && reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndText('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndText('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndText('aba', 1)\n  false\n  */\nconst isPalindromeWithLengthAndTextAndTextAndTextAndText = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length && reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndText('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndText('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndText('aba', 1)\n  false\n  */\nconst isPalindromeWithLengthAndTextAndTextAndTextAndText = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length && reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndTextAndText('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndTextAndText('aba', 2)\n  false\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndTextAndText('aba', 1)\n  false\n  */\nconst isPalindromeWithLengthAndTextAndTextAndTextAndText = (text, length) => {\n  let reversedText = text\n  reversedText = reversedText.split('').reverse().join('')\n  return reversedText.length === length && reversedText === text\n}\n\n/*\n  Checksif given string isa palindrome with given length\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndTextAndText('aba', 3)\n  true\n  >>> isPalindromeWithLengthAndTextAndTextAndTextAndTextAndTextAnd", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return2 ^n modulo p (be awa re of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Return2 ^n modulo p (be awa re of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const r = n % p;\n  return r === 0? n : r === p? p - 1 : r;\n};\n\n/*\n  >>> modp(-3, 5)\n  -3\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 11)\n  8\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> modp(3, 101)\n  3\n  >>> mod", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Inserta number 'delimeter ' between every two consecutive elements of inputli st `number s'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inserta number 'delimeter'between every two consecutive elements of inputli st `number s'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === numbers.length - 1) {\n      result.push(numbers[i])\n      i++\n      j = 0\n    } else {\n      result.push(numbers[i])\n      j++\n    }\n  }\n  result.push(numbers[i])\n  return result\n}\n\n/**\n * Removes trailing zeros from an input string\n * >>> removeTrailingZeros('00')\n * '00'\n * >>> removeTrailingZeros('001')\n * '001'\n * >>> removeTrailingZeros('0010')\n * '0010'\n * >>> removeTrailingZeros('00100')\n * '00100'\n * >>> removeTrailingZeros('001000')\n * '001000'\n * >>> removeTrailingZeros('0010000')\n * '0010000'\n * >>> removeTrailingZeros('00100000')\n * '00100000'\n * >>> removeTrailingZeros('001000000')\n * '001000000'\n * >>> removeTrailingZeros('0010000000')\n * '0010000000'\n * >>> removeTrailingZeros('00100000000')\n * '00100000000'\n * >>> removeTrailingZeros('001000000000')\n * '001000000000'\n * >>> removeTrailingZeros('0010000000000')\n * '0010000000000'\n * >>> removeTrailingZeros('00100000000000')\n * '00100000000000'\n * >>> removeTrailingZeros('001000000000000')\n * '001000000000000'\n * >>> removeTrailingZeros('0010000000000000')\n * '0010000000000000'\n * >>> removeTrailingZeros('00100000000000000')\n * '00100000000000000'\n * >>> removeTrailingZeros('001000000000000000')\n * '001000000000000000'\n * >>> removeTrailingZeros('0010000000000000000')\n * '0010000000000000000'\n * >>> removeTrailingZeros('00100000000000000000')\n * '00100000000000000000'\n * >>> removeTrailingZeros('001000000000000000000')\n * '001000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000')\n * '0010000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000')\n * '00100000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000')\n * '001000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000')\n * '0010000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000')\n * '00100000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000')\n * '001000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000')\n * '0010000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000')\n * '00100000000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000000')\n * '001000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000')\n * '0010000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000')\n * '00100000000000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000000000')\n * '001000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000000')\n * '0010000000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000000')\n * '00100000000000000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000000000000')\n * '001000000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000000000')\n * '0010000000000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000000000')\n * '00100000000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000')\n * '0010000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000')\n * '00100000000000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000000000')\n * '001000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000000')\n * '0010000000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000000')\n * '00100000000000000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000000000000')\n * '001000000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000000000')\n * '0010000000000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000000000')\n * '00100000000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000')\n * '0010000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000')\n * '00100000000000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000000000')\n * '001000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000000')\n * '0010000000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000000')\n * '00100000000000000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000000000000')\n * '001000000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000000000')\n * '0010000000000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000000000')\n * '00100000000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000')\n * '0010000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000')\n * '00100000000000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000000000')\n * '001000000000000000000000000000000'\n * >>> removeTrailingZeros('0010000000000000000000000000000000')\n * '0010000000000000000000000000000000'\n * >>> removeTrailingZeros('00100000000000000000000000000000000')\n * '00100000000000000000000000000000000'\n * >>> removeTrailingZeros('001000000000000000000000000000000000')\n * '001000000000000000000000000000000000'\n * >>> removeTrailingZeros('00100", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns  encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s .split(\"\") .map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) + 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )) .join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  returns  encoded string byshifting every character by 5 in the alphabet.\n  * /const enco deShi ft = (s) => {\n  retur n s.split(\"\").map(ch => Stri ng.fromCharCode(\n    ((ch.charCodeAt(0) + 5  - \"a\".charCodeAt(0 )) % 26 ) + \"a\".charCodeAt(0)\n )).join(\" \");}\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = (s) => {\n  let ret = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    ret = ret + ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0));\n  }\n  return ret;\n};\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = (s) => {\n  let ret = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    ret = ret + (s.charCodeAt(i) + 5 - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0);\n  }\n  return ret;\n};\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decode = (s) => {\n  let ret = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    ret = ret + ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0));\n  }\n  return ret;\n};\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encode = (s) => {\n  let ret = \"\";\n  for (let i = 0; i < s.length; i += 1) {\n    ret = ret + (s.charCodeAt(i) + 5 - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0);\n  }\n  return ret;\n};\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst decodeShift = decodeShift(decode);\n/*\n  takes asinput string encoded with encode_shift  fu nctio n. Return s decoded string.\n  */\nconst encodeShift = encodeShift(encode);\n/*\n  takes asinput string encoded with encode_shift", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeV owels is a function  that takesstring and returns string without vowe ls .\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  removeV owels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsV2 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsV3 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsV4 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsV5 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsV6 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsV7 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i]\n    }\n  }\n  return newText\n}\n\n/*\n  removeVowels is a function  that takesstring and returns string without vowe ls.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsV8 = (text) => {\n  let vowels = text.split('')\n  let newText = ''\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === '", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Returnt rue if all numbersin the listl are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt rue if all numbersin the listl are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n > t)\n}\n\n/*Returnt rue if all numbers in the listl are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n < t)\n}\n\n/*Returnt rue if all numbers in the listl are equal t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  return l.length === t\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 100)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 5)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t!== 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t!== 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t!== 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t!== 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t!== 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t!== 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t!== 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t!== 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t!== 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by t.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, t) => {\n  return l.every(n => n % t === 0)\n}\n\n/*Returnt rue if all numbers in the listl are divisible by ", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add twonumbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Add twonumbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> modulo(2, 3)\n  2\n  >>> modulo(5, 7)\n  1\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst power = (a, b) => {\n  return a ** b;\n};\n\n/*\n  >>> square(2)\n  2\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  >>> cube(2)\n  8\n  >>> cube(5)\n  27\n  */\nconst cube = (x) => {\n  return x * x * x;\n};\n\n/*\n  >>> cubeRoot(2)\n  2\n  >>> cubeRoot(5)\n  4\n  */\nconst cubeRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> cubePowerOfThree(2)\n  2\n  >>> cubePowerOfThree(5)\n  8\n  */\nconst cubePowerOfThree = (x) => {\n  return Math.pow(x, 3);\n};\n\n/*\n  >>> cubePowerOfFour(2)\n  8\n  >>> cubePowerOfFour(5)\n  27\n  */\nconst cubePowerOfFour = (x) => {\n  return Math.pow(x, 4);\n};\n\n/*\n  >>> cubePowerOfFive(2)\n  27\n  >>> cubePowerOfFive(5)\n  81\n  */\nconst cubePowerOfFive = (x) => {\n  return Math.pow(x, 5);\n};\n\n/*\n  >>> cubePowerOfSix(2)\n  81\n  >>> cubePowerOfSix(5)\n  27\n  */\nconst cubePowerOfSix = (x) => {\n  return Math.pow(x, 6);\n};\n\n/*\n  >>> cubePowerOfSeven(2)\n  27\n  >>> cubePowerOfSeven(5)\n  81\n  */\nconst cubePowerOfSeven = (x) => {\n  return Math.pow(x, 7);\n};\n\n/*\n  >>> cubePowerOfEight(2)\n  81\n  >>> cubePowerOfEight(5)\n  27\n  */\nconst cubePowerOfEight = (x) => {\n  return Math.pow(x, 8);\n};\n\n/*\n  >>> cubePowerOfNine(2)\n  27\n  >>> cubePowerOfNine(5)\n  81\n  */\nconst cubePowerOfNine = (x) => {\n  return Math.pow(x, 9);\n};\n\n/*\n  >>> cubePowerOfTen(2)\n  81\n  >>> cubePowerOfTen(5)\n  27\n  */\nconst cubePowerOfTen = (x) => {\n  return Math.pow(x, 10);\n};\n\n/*\n  >>> cubePowerOfEleven(2)\n  27\n  >>> cubePowerOfEleven(5)\n  81\n  */\nconst cubePowerOfEleven = (x) => {\n  return Math.pow(x, 11);\n};\n\n/*\n  >>> cubePowerOfTwelve(2)\n  81\n  >>> cubePowerOfTwelve(5)\n  27\n  */\nconst cubePowerOfTwelve = (x) => {\n  return Math.pow(x, 12);\n};\n\n/*\n  >>> cubePowerOfThirteen(2)\n  27\n  >>> cubePowerOfThirteen(5)\n  81\n  */\nconst cubePowerOfThirteen = (x) => {\n  return Math.pow(x, 13);\n};\n\n/*\n  >>> cubePowerOfFourteen(2)\n  81\n  >>> cubePowerOfFourteen(5)\n  27\n  */\nconst cubePowerOfFourteen = (x) => {\n  return Math.pow(x, 14);\n};\n\n/*\n  >>> cubePowerOfFifteen(2)\n  27\n  >>> cubePowerOfFifteen(5)\n  81\n  */\nconst cubePowerOfFifteen = (x) => {\n  return Math.pow(x, 15);\n};\n\n/*\n  >>> cubePowerOfSixteen(2)\n  81\n  >>> cubePowerOfSixteen(5)\n  27\n  */\nconst cubePowerOfSixteen = (x) => {\n  return Math.pow(x, 16);\n};\n\n/*\n  >>> cubePowerOfSeventeen(2)\n  27\n  >>> cubePowerOfSeventeen(5)\n  81\n  */\nconst cubePowerOfSeventeen = (x) => {\n  return Math.pow(x, 17);\n};\n\n/*\n  >>> cubePowerOfEighteen(2)\n  81\n  >>> cubePowerOfEighteen(5)\n  27\n  */\nconst cubePowerOfEighteen = (x) => {\n  return Math.pow(x, 18);\n};\n\n/*\n  >>> cubePowerOfNineteen(2)\n  27\n  >>> cubePowerOfNineteen(5)\n  81\n  */\nconst cubePowerOfNineteen = (x) => {\n  return Math.pow(x, 19);\n};\n\n/*\n  >>> cubePowerOfTwenty(2)\n  81\n  >>> cubePowerOfTwenty(5)\n  27\n  */\nconst cubePowerOfTwenty = (x) => {\n  return Math.pow(x, 20);\n};\n\n/*\n  >>> cubePowerOfThirtyTwo(2)\n  27\n  >>> cubePowerOfThirtyTwo(5)\n  81\n  */\nconst cubePowerOfThirtyTwo = (x) => {\n  return Math.pow(x, 21);\n};\n\n/*\n  >>> cubePowerOfFourtyTwo(2)\n  81\n  >>> cubePowerOfFourtyTwo(5)\n  27\n  */\nconst cubePowerOfFourtyTwo = (x) => {\n  return Math.pow(x, 22);\n};\n\n/*\n  >>> cubePowerOfFiftyTwo(2)\n  27\n  >>> cubePowerOfFiftyTwo(5)\n  81\n  */\nconst cubePowerOfFiftyTwo = (x) => {\n  return Math.pow(x, 23);\n};\n\n/*\n  >>> cubePowerOfSixtyTwo(2)\n  81\n  >>> cubePowerOfSixtyTwo(5)\n  27\n  */\nconst cubePowerOfSixtyTwo = (x) => {\n  return Math.pow(x, 24);\n};\n\n/*\n  >>> cubePowerOfSeventy(2)\n  27\n  >>> cubePowerOfSeventy(5)\n  81\n  */\nconst cubePowerOfSeventy = (x) => {\n  return Math.pow(x, 25);\n};\n\n/*\n  >>> cubePowerOfEightyTwo(2)\n  81\n  >>> cubePowerOfEightyTwo(5)\n  27\n  */\nconst cubePowerOfEightyTwo = (x) => {\n  return Math.pow(x, 26);\n};\n\n/*\n  >>> cubePowerOfNinetyTwo(2)\n  27\n  >>> cubePowerOfNinetyTwo(5)\n  81\n  */\nconst cubePowerOfNinetyTwo = (x) => {\n  return Math.pow(x, 27);\n};\n\n/*\n  >>> cubePowerOfTwent", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Checki f two words have th e same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = s1.length\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  const len = s1.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Returnn -th Fibonacci numbe r.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnn -th Fibonacci numbe r.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibon", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* bracket s is a string of \"< \" and \">\".\n return false if every openingbracket  h as a corre spond ing closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* bracket s is a string of \"< \" and \">\".\n return false if every openingbracket  h as a corre spond ing closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\").filter(Boolean);\n  const closingBrackets = brackets.split(\">\").filter(Boolean);\n  return openingBrackets.length === closingBrackets.length;\n};\n\n/**\n * A function that takes an array of strings and returns true if every string is a valid HTML tag.\n * It will also return false if any string contains invalid HTML tags.\n * It will also return false if any string contains unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if any string contains invalid or unclosed tags.\n * It will also return false if ", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Returnt rue is list element s are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt rue is list element s are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let flag = true;\n  while (i < l.length) {\n    if (l[i] > l[j]) {\n      flag = false;\n      i++;\n    }\n    if (l[i] < l[j]) {\n      flag = false;\n      j--;\n    }\n    if (flag) {\n      k++;\n    }\n  }\n  return k === l.length;\n};\n\n/**\n * Returns true if all elements are equal\n * or if any element is not equal\n * to another element\n * \n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * true\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 5])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 5])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * >>> equal([1, 2, 3, 4], [1, 2, 3, 4])\n * false\n * ", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Returns orted unique common  elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returns orted unique common  elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  const len = Math.min(l1.length, l2.length);\n  for (let i = 0; i < len; i++) {\n    if (set.has(l1[i])) {\n      set.delete(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n    if (set.has(l2[i])) {\n      set.delete(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      result.push(l2[i]);\n    }\n  }\n  return result;\n};\n\n/**\n  Returns true if two arrays have the same length\n  >>> same([1,2,3], [1,2,3])\n  true\n  >>> same([1,2,3], [1,2,4])\n  false\n  >>> same([1,2,3], [1,2,5])\n  false\n  >>> same([1,2,3], [1,2,6])\n  false\n  >>> same([1,2,3], [1,2,7])\n  false\n  >>> same([1,2,3], [1,2,8])\n  false\n  >>> same([1,2,3], [1,2,9])\n  false\n  >>> same([1,2,3], [1,2,10])\n  false\n  >>> same([1,2,3], [1,2,11])\n  false\n  >>> same([1,2,3], [1,2,12])\n  false\n  >>> same([1,2,3], [1,2,13])\n  false\n  >>> same([1,2,3], [1,2,14])\n  false\n  >>> same([1,2,3], [1,2,15])\n  false\n  >>> same([1,2,3], [1,2,16])\n  false\n  >>> same([1,2,3], [1,2,17])\n  false\n  >>> same([1,2,3], [1,2,18])\n  false\n  >>> same([1,2,3], [1,2,19])\n  false\n  >>> same([1,2,3], [1,2,20])\n  false\n  >>> same([1,2,3], [1,2,21])\n  false\n  >>> same([1,2,3], [1,2,22])\n  false\n  >>> same([1,2,3], [1,2,23])\n  false\n  >>> same([1,2,3], [1,2,24])\n  false\n  >>> same([1,2,3], [1,2,25])\n  false\n  >>> same([1,2,3], [1,2,26])\n  false\n  >>> same([1,2,3], [1,2,27])\n  false\n  >>> same([1,2,3], [1,2,28])\n  false\n  >>> same([1,2,3], [1,2,29])\n  false\n  >>> same([1,2,3], [1,2,30])\n  false\n  >>> same([1,2,3], [1,2,31])\n  false\n  >>> same([1,2,3], [1,2,32])\n  false\n  >>> same([1,2,3], [1,2,33])\n  false\n  >>> same([1,2,3], [1,2,34])\n  false\n  >>> same([1,2,3], [1,2,35])\n  false\n  >>> same([1,2,3], [1,2,36])\n  false\n  >>> same([1,2,3], [1,2,37])\n  false\n  >>> same([1,2,3], [1,2,38])\n  false\n  >>> same([1,2,3], [1,2,39])\n  false\n  >>> same([1,2,3], [1,2,40])\n  false\n  >>> same([1,2,3], [1,2,41])\n  false\n  >>> same([1,2,3], [1,2,42])\n  false\n  >>> same([1,2,3], [1,2,43])\n  false\n  >>> same([1,2,3], [1,2,44])\n  false\n  >>> same([1,2,3], [1,2,45])\n  false\n  >>> same([1,2,3], [1,2,46])\n  false\n  >>> same([1,2,3], [1,2,47])\n  false\n  >>> same([1,2,3], [1,2,48])\n  false\n  >>> same([1,2,3], [1,2,49])\n  false\n  >>> same([1,2,3], [1,2,50])\n  false\n  >>> same([1,2,3], [1,2,51])\n  false\n  >>> same([1,2,3], [1,2,52])\n  false\n  >>> same([1,2,3], [1,2,53])\n  false\n  >>> same([1,2,3], [1,2,54])\n  false\n  >>> same([1,2,3], [1,2,55])\n  false\n  >>> same([1,2,3], [1,2,56])\n  false\n  >>> same([1,2,3], [1,2,57])\n  false\n  >>> same([1,2,3], [1,2,58])\n  false\n  >>> same([1,2,3], [1,2,59])\n  false\n  >>> same([1,2,3], [1,2,60])\n  false\n  >>> same([1,2,3], [1,2,61])\n  false\n  >>> same([1,2,3], [1,2,62])\n  false\n  >>> same([1,2,3], [1,2,63])\n  false\n  >>> same([1,2,3], [1,2,64])\n  false\n  >>> same([1,2,3], [1,2,65])\n  false\n  >>> same([1,2,3], [1,2,66])\n  false\n  >>> same([1,2,3], [1,2,67])\n  false\n  >>> same([1,2,3], [1,2,68])\n  false\n  >>> same([1,2,3], [1,2,69])\n  false\n  >>> same([1,2,3], [1,2,70])\n  false\n  >>> same([1,2,3], [1,2,71])\n  false\n  >>> same([1,2,3], [1,2,72])\n  false\n  >>> same([1,2,3], [1,2,73])\n  false\n  >>> same([1,2,3], [1,2,74])\n  false\n  >>> same([1,2,3], [1,2,75])\n  false\n  >>> same([1,2,3], [1,2,76])\n  false\n  >>> same([1,2,3], [1,2,77])\n  false\n  >>> same([1,2,3], [1,2,78])\n  false\n  >>> same([1,2,3], [1,2,79])\n  false\n  >>> same([1,2,3], [1,2,80])\n  false\n  >>> same([1,2,3], [1,2,81])\n  false\n  >>> same([1,2,3], [1,2,82])\n  false\n  >>> same([1,2,3], [1,2,83])\n  false\n  >>> same([1,2,3], [1,2,84])\n  false\n  >>> same([1,2,3], [1,2,85])\n  false\n  >>> same([1,2,3], [1,2,86])\n  false\n  >>> same([1,2,3], [1,2,87])\n  false\n  >>> same([1,2,3], [1,2,88])\n  false\n  >>> same([1,2,3], [1,2,89])\n  false\n  >>> same([1,2,3], [1,2,90])\n  false\n  >>> same([1,2,3], [1,2,91])\n  false\n  >>> same([1,2,3], [1,2,92])\n  false\n  >>> same([1,2,3], [1,2,93])\n  false\n  >>> same([1,2,3], [1,2,94])\n  false\n  >>> same([1,2,3], [1,2,95])\n  false\n  >>> same([1,2,3], [1,2,96])\n  false\n  >>> same([1,2,3], [1,2,97])\n  false\n  >>> same([1,2,3], [1,2,98])\n  false\n  >>> same([1,2,3], [1,2,99])\n  false\n  >>> same([1,2,3], [1,2,100])\n  false\n  >>> same([1,2,3], [1,2,101])\n  false\n  >>> same([1,2,3], [1,2,102])\n  false\n  >>> same([1,2,3], [1,2,103])\n  false\n  >>> same([1,2,3], [1,2,104])\n  false\n  >>> same([1,2,3], [1,2,105])\n  false\n  >>> same([1,2,3], [1,2,106])\n  false", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Returnt he largest prime fa ctor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Returnt he largest prime fa ctor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  let i = 2;\n  while (n % i!== 0) {\n    i += 1;\n  }\n  while (n % i === 0) {\n    n /= i;\n    factor += 1;\n  }\n  return factor;\n};\n\n/*\n  >>> primeFactors(2)\n  [2, 3]\n  >>> primeFactors(3)\n  [2, 3, 5]\n  >>> primeFactors(5)\n  [2, 3, 5, 7]\n  >>> primeFactors(7)\n  [2, 3, 5, 7, 11]\n  >>> primeFactors(11)\n  [2, 3, 5, 7, 11, 13]\n  >>> primeFactors(13)\n  [2, 3, 5, 7, 11, 13, 17]\n  >>> primeFactors(17)\n  [2, 3, 5, 7, 11, 13, 17, 19]\n  >>> primeFactors(19)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23]\n  >>> primeFactors(23)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  >>> primeFactors(29)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n  >>> primeFactors(31)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n  >>> primeFactors(37)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n  >>> primeFactors(41)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n  >>> primeFactors(47)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51]\n  >>> primeFactors(51)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59]\n  >>> primeFactors(59)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61]\n  >>> primeFactors(61)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67]\n  >>> primeFactors(67)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71]\n  >>> primeFactors(71)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73]\n  >>> primeFactors(73)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79]\n  >>> primeFactors(79)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83]\n  >>> primeFactors(83)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87]\n  >>> primeFactors(87)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91]\n  >>> primeFactors(91)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97]\n  >>> primeFactors(97)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101]\n  >>> primeFactors(101)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103]\n  >>> primeFactors(103)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107]\n  >>> primeFactors(107)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109]\n  >>> primeFactors(109)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109, 113]\n  >>> primeFactors(113)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109, 113, 121]\n  >>> primeFactors(121)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109, 113, 121, 127]\n  >>> primeFactors(127)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109, 113, 121, 127, 131]\n  >>> primeFactors(131)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109, 113, 121, 127, 131, 137]\n  >>> primeFactors(137)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109, 113, 121, 127, 131, 137, 143]\n  >>> primeFactors(143)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109, 113, 121, 127, 131, 137, 143, 151]\n  >>> primeFactors(151)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109, 113, 121, 127, 131, 137, 143, 151, 159]\n  >>> primeFactors(159)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 107, 109, 113, 121, 127, 131, 137, 143, 151, 159, 173]\n  >>> primeFactors(173)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71, 73, 79, 83, 87, 91, 97, 101, 103, 10", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Inputt o this function isa string represented multiple groups for nested pa re nthesesse parat ed by spaces.\n  For e ach  of the gr oup, output the  deepest level of nesting of parentheses.\n E.g. (()()) has ma ximum t wo levels of nesting wh ile  ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Inputt o this function isa string represented multiple groups for nested pa re nthesesse parat ed by spaces.\n  For e ach  of the gr oup, output the  deepest level of nesting of parentheses.\n E.g. (()()) has ma ximum t wo levels of nesting wh ile  ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_level_count = 0;\n  let paren_level_count2 = 0;\n  let paren_level_count3 = 0;\n  let paren_level_count4 = 0;\n  let paren_level_count5 = 0;\n  let paren_level_count6 = 0;\n  let paren_level_count7 = 0;\n  let paren_level_count8 = 0;\n  let paren_level_count9 = 0;\n  let paren_level_count10 = 0;\n  let paren_level_count11 = 0;\n  let paren_level_count12 = 0;\n  let paren_level_count13 = 0;\n  let paren_level_count14 = 0;\n  let paren_level_count15 = 0;\n  let paren_level_count16 = 0;\n  let paren_level_count17 = 0;\n  let paren_level_count18 = 0;\n  let paren_level_count19 = 0;\n  let paren_level_count20 = 0;\n  let paren_level_count21 = 0;\n  let paren_level_count22 = 0;\n  let paren_level_count23 = 0;\n  let paren_level_count24 = 0;\n  let paren_level_count25 = 0;\n  let paren_level_count26 = 0;\n  let paren_level_count27 = 0;\n  let paren_level_count28 = 0;\n  let paren_level_count29 = 0;\n  let paren_level_count30 = 0;\n  let paren_level_count31 = 0;\n  let paren_level_count32 = 0;\n  let paren_level_count33 = 0;\n  let paren_level_count34 = 0;\n  let paren_level_count35 = 0;\n  let paren_level_count36 = 0;\n  let paren_level_count37 = 0;\n  let paren_level_count38 = 0;\n  let paren_level_count39 = 0;\n  let paren_level_count40 = 0;\n  let paren_level_count41 = 0;\n  let paren_level_count42 = 0;\n  let paren_level_count43 = 0;\n  let paren_level_count44 = 0;\n  let paren_level_count45 = 0;\n  let paren_level_count46 = 0;\n  let paren_level_count47 = 0;\n  let paren_level_count48 = 0;\n  let paren_level_count49 = 0;\n  let paren_level_count50 = 0;\n  let paren_level_count51 = 0;\n  let paren_level_count52 = 0;\n  let paren_level_count53 = 0;\n  let paren_level_count54 = 0;\n  let paren_level_count55 = 0;\n  let paren_level_count56 = 0;\n  let paren_level_count57 = 0;\n  let paren_level_count58 = 0;\n  let paren_level_count59 = 0;\n  let paren_level_count60 = 0;\n  let paren_level_count61 = 0;\n  let paren_level_count62 = 0;\n  let paren_level_count63 = 0;\n  let paren_level_count64 = 0;\n  let paren_level_count65 = 0;\n  let paren_level_count66 = 0;\n  let paren_level_count67 = 0;\n  let paren_level_count68 = 0;\n  let paren_level_count69 = 0;\n  let paren_level_count70 = 0;\n  let paren_level_count71 = 0;\n  let paren_level_count72 = 0;\n  let paren_level_count73 = 0;\n  let paren_level_count74 = 0;\n  let paren_level_count75 = 0;\n  let paren_level_count76 = 0;\n  let paren_level_count77 = 0;\n  let paren_level_count78 = 0;\n  let paren_level_count79 = 0;\n  let paren_level_count80 = 0;\n  let paren_level_count81 = 0;\n  let paren_level_count82 = 0;\n  let paren_level_count83 = 0;\n  let paren_level_count84 = 0;\n  let paren_level_count85 = 0;\n  let paren_level_count86 = 0;\n  let paren_level_count87 = 0;\n  let paren_level_count88 = 0;\n  let paren_level_count89 = 0;\n  let paren_level_count90 = 0;\n  let paren_level_count91 = 0;\n  let paren_level_count92 = 0;\n  let paren_level_count93 = 0;\n  let paren_level_count94 = 0;\n  let paren_level_count95 = 0;\n  let paren_level_count96 = 0;\n  let paren_level_count97 = 0;\n  let paren_level_count98 = 0;\n  let paren_level_count99 = 0;\n  let paren_level_count100 = 0;\n  let paren_level_count101 = 0;\n  let paren_level_count102 = 0;\n  let paren_level_count103 = 0;\n  let paren_level_count104 = 0;\n  let paren_level_count105 = 0;\n  let paren_level_count106 = 0;\n  let paren_level_count107 = 0;\n  let paren_level_count108 = 0;\n  let paren_level_count109 = 0;\n  let paren_level_count110 = 0;\n  let paren_level_count111 = 0;\n  let paren_level_count112 = 0;\n  let paren_level_count113 = 0;\n  let paren_level_count114 = 0;\n  let paren_level_count115 = 0;\n  let paren_level_count116 = 0;\n  let paren_level_count117 = 0;\n  let paren_level_count118 = 0;\n  let paren_level_count119 = 0;\n  let paren_level_count120 = 0;\n  let paren_level_count121 = 0;\n  let paren_level_count122 = 0;\n  let paren_level_count123 = 0;\n  let paren_level_count124 = 0;\n  let paren_level_count125 = 0;\n  let paren_level_count126 = 0;\n  let paren_level_count127 = 0;\n  let paren_level_count128 = 0;\n  let paren_level_count129 = 0;\n  let paren_level_count130 = 0;\n  let paren_level_count131 = 0;\n  let paren_level_count132 = 0;\n  let paren_level_count133 = 0;\n  let paren_level_count134 = 0;\n  let paren_level_count135 = 0;\n  let paren_level_count136 = 0;\n  let paren_level_count137 = 0;\n  let paren_level_count138 = 0;\n  let paren_level_count139 = 0;\n  let paren_level_count140 = 0;\n  let paren_level_count141 = 0;\n  let paren_level_count142 = 0;\n  let paren_level_count143 = 0;\n  let paren_level_count144 = 0;\n  let paren_level_count145 = 0;\n  let paren_level_count146 = 0;\n  let paren_level_count147 = 0;\n  let paren_level_count148 = 0;\n  let paren_level_count149 = 0;\n  let paren_level_count150 = 0;\n  let paren_level_count151 = 0;\n  let paren_level_count152 = 0;\n  let paren_level_count153 = 0;\n  let paren_level_count154 = 0;\n  let paren_level_count155 = 0;\n  let paren_level_count156 = 0;\n  let paren_level_count157 = 0;\n  let paren_level_count158 = 0;\n  let paren_level_count159 = 0;\n  let paren_level_count160 = 0;\n  let paren_level_count161 = 0;\n  let paren_level_count162 = 0;\n  let paren_level_count163 = 0;\n  let paren_level_count164 = 0;\n  let paren_level_count165 = 0;\n  let paren_level_count166 = 0;\n  let paren_level_count167 = 0;\n  let paren_level_count168 = 0;\n  let paren_level_count169 = 0;\n  let paren_level_count170 = 0;\n  let paren_level_count171 = 0;\n  let paren_level_count172 = 0;\n  let paren_level_count173 = 0;\n  let paren_level_count174 = 0;\n  let paren_level_count175 = 0;\n  let paren_level_count176 = 0;\n  let paren", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToNi s a function that s ums numbersfrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*sumToNi s a function that s ums numbersfrom 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(sumToN(30))\n  465\n  >>> sumToN(sumToN(100))\n  5050\n  >>> sumToN(sumToN(5))\n  15\n  >>> sumToN(sumToN(10))\n  55\n  >>> sumToN(sumToN(1))\n  1\n  */\nconst sumToN2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN2(sumToN2(30))\n  465\n  >>> sumToN2(sumToN2(100))\n  5050\n  >>> sumToN2(sumToN2(5))\n  15\n  >>> sumToN2(sumToN2(10))\n  55\n  >>> sumToN2(sumToN2(1))\n  1\n  */\nconst sumToN3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN3(sumToN3(30))\n  465\n  >>> sumToN3(sumToN3(100))\n  5050\n  >>> sumToN3(sumToN3(5))\n  15\n  >>> sumToN3(sumToN3(10))\n  55\n  >>> sumToN3(sumToN3(1))\n  1\n  */\nconst sumToN4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN4(sumToN4(30))\n  465\n  >>> sumToN4(sumToN4(100))\n  5050\n  >>> sumToN4(sumToN4(5))\n  15\n  >>> sumToN4(sumToN4(10))\n  55\n  >>> sumToN4(sumToN4(1))\n  1\n  */\nconst sumToN5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN5(sumToN5(30))\n  465\n  >>> sumToN5(sumToN5(100))\n  5050\n  >>> sumToN5(sumToN5(5))\n  15\n  >>> sumToN5(sumToN5(10))\n  55\n  >>> sumToN5(sumToN5(1))\n  1\n  */\nconst sumToN6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN6(sumToN6(30))\n  465\n  >>> sumToN6(sumToN6(100))\n  5050\n  >>> sumToN6(sumToN6(5))\n  15\n  >>> sumToN6(sumToN6(10))\n  55\n  >>> sumToN6(sumToN6(1))\n  1\n  */\nconst sumToN7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN7(sumToN7(30))\n  465\n  >>> sumToN7(sumToN7(100))\n  5050\n  >>> sumToN7(sumToN7(5))\n  15\n  >>> sumToN7(sumToN7(10))\n  55\n  >>> sumToN7(sumToN7(1))\n  1\n  */\nconst sumToN8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN8(sumToN8(30))\n  465\n  >>> sumToN8(sumToN8(100))\n  5050\n  >>> sumToN8(sumToN8(5))\n  15\n  >>> sumToN8(sumToN8(10))\n  55\n  >>> sumToN8(sumToN8(1))\n  1\n  */\nconst sumToN9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN9(sumToN9(30))\n  465\n  >>> sumToN9(sumToN9(100))\n  5050\n  >>> sumToN9(sumToN9(5))\n  15\n  >>> sumToN9(sumToN9(10))\n  55\n  >>> sumToN9(sumToN9(1))\n  1\n  */\nconst sumToN10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN10(sumToN10(30))\n  465\n  >>> sumToN10(sumToN10(100))\n  5050\n  >>> sumToN10(sumToN10(5))\n  15\n  >>> sumToN10(sumToN10(10))\n  55\n  >>> sumToN10(sumToN10(1))\n  1\n  */\nconst sumToN11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN11(sumToN11(30))\n  465\n  >>> sumToN11(sumToN11(100))\n  5050\n  >>> sumToN11(sumToN11(5))\n  15\n  >>> sumToN11(sumToN11(10))\n  55\n  >>> sumToN11(sumToN11(1))\n  1\n  */\nconst sumToN12 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN12(sumToN12(30))\n  465\n  >>> sumToN12(sumToN12(100))\n  5050\n  >>> sumToN12(sumToN12(5))\n  15\n  >>> sumToN12(sumToN12(10))\n  55\n  >>> sumToN12(sumToN12(1))\n  1\n  */\nconst sumToN13 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* bracket s is a string of \"( \" and \")\".\n return true if every opening bracketha s a corres pondi ng closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split('')\n  let correctBracketing\n  for (let i = 0; i < bracketsArray.length; i++) {\n    if (bracketsArray[i] === '(') {\n      correctBracketing = true\n    } else if (bracketsArray[i] === ')') {\n      correctBracketing = false\n    }\n  }\n  return correctBracketing\n}\n\n/* isInsideBracket s is a string of \"( \" and \")\".\n return true if s is inside brackets.\n\n  >>> isInsideBracket(\"(\")\n  true\n  >>> isInsideBracket(\"()\")\n  false\n  >>> isInsideBracket(\"(()())\")\n  false\n  */\nconst isInsideBracket = (brackets) => {\n  const bracketsArray = brackets.split('')\n  let isInsideBracket\n  for (let i = 0; i < bracketsArray.length; i++) {\n    if (bracketsArray[i] === '(') {\n      isInsideBracket = true\n    } else if (bracketsArray[i] === ')') {\n      isInsideBracket = false\n    }\n  }\n  return isInsideBracket\n}\n\n/* isInsideParenthesis s is a string of \"( \" and \")\".\n return true if s is inside parenthesis.\n\n  >>> isInsideParenthesis(\"(\")\n  false\n  >>> isInsideParenthesis(\"()\")\n  true\n  >>> isInsideParenthesis(\"(()())\")\n  false\n  */\nconst isInsideParenthesis = (parenthesis) => {\n  const parenthesisArray = parenthesis.split('')\n  let isInsideParenthesis\n  for (let i = 0; i < parenthesisArray.length; i++) {\n    if (parenthesisArray[i] === '(') {\n      isInsideParenthesis = true\n    } else if (parenthesisArray[i] === ')') {\n      isInsideParenthesis = false\n    }\n  }\n  return isInsideParenthesis\n}\n\n/* isInsideBrackets s is a string of \"( \" and \")\".\n return true if s is inside brackets.\n\n  >>> isInsideBrackets(\"(\")\n  false\n  >>> isInsideBrackets(\"()\")\n  true\n  >>> isInsideBrackets(\"(()())\")\n  false\n  */\nconst isInsideBrackets = (brackets) => {\n  const bracketsArray = brackets.split('')\n  let isInsideBrackets\n  for (let i = 0; i < bracketsArray.length; i++) {\n    if (bracketsArray[i] === '(') {\n      isInsideBrackets = true\n    } else if (bracketsArray[i] === ')') {\n      isInsideBrackets = false\n    }\n  }\n  return isInsideBrackets\n}\n\n/* isInsideParenthesis s is a string of \"( \" and \")\".\n return true if s is inside parenthesis.\n\n  >>> isInsideParenthesis(\"(\")\n  false\n  >>> isInsideParenthesis(\"()\")\n  true\n  >>> isInsideParenthesis(\"(()())\")\n  false\n  */\nconst isInsideParenthesis = (parenthesis) => {\n  const parenthesisArray = parenthesis.split('')\n  let isInsideParenthesis\n  for (let i = 0; i < parenthesisArray.length; i++) {\n    if (parenthesisArray[i] === '(') {\n      isInsideParenthesis = true\n    } else if (parenthesisArray[i] === ')') {\n      isInsideParenthesis = false\n    }\n  }\n  return isInsideParenthesis\n}\n\n/* isInsideBrackets s is a string of \"( \" and \")\".\n return true if s is inside brackets.\n\n  >>> isInsideBrackets(\"(\")\n  false\n  >>> isInsideBrackets(\"()\")\n  true\n  >>> isInsideBrackets(\"(()())\")\n  false\n  */\nconst isInsideBrackets = (brackets) => {\n  const bracketsArray = brackets.split('')\n  let isInsideBrackets\n  for (let i = 0; i < bracketsArray.length; i++) {\n    if (bracketsArray[i] === '(') {\n      isInsideBrackets = true\n    } else if (bracketsArray[i] === ')') {\n      isInsideBrackets = false\n    }\n  }\n  return isInsideBrackets\n}\n\n/* isInsideParenthesis s is a string of \"( \" and \")\".\n return true if s is inside parenthesis.\n\n  >>> isInsideParenthesis(\"(\")\n  false\n  >>> isInsideParenthesis(\"()\")\n  true\n  >>> isInsideParenthesis(\"(()())\")\n  false\n  */\nconst isInsideParenthesis = (parenthesis) => {\n  const parenthesisArray = parenthesis.split('')\n  let isInsideParenthesis\n  for (let i = 0; i < parenthesisArray.length; i++) {\n    if (parenthesisArray[i] === '(') {\n      isInsideParenthesis = true\n    } else if (parenthesisArray[i] === ')') {\n      isInsideParenthesis = false\n    }\n  }\n  return isInsideParenthesis\n}\n\n/* isInsideBrackets s is a string of \"( \" and \")\".\n return true if s is inside brackets.\n\n  >>> isInsideBrackets(\"(\")\n  false\n  >>> isInsideBrackets(\"()\")\n  true\n  >>> isInsideBrackets(\"(()())\")\n  false\n  */\nconst isInsideBrackets = (brackets) => {\n  const bracketsArray = brackets.split('')\n  let isInsideBrackets\n  for (let i = 0; i < bracketsArray.length; i++) {\n    if (bracketsArray[i] === '(') {\n      isInsideBrackets = true\n    } else if (bracketsArray[i] === ')') {\n      isInsideBrackets = false\n    }\n  }\n  return isInsideBrackets\n}\n\n/* isInsideParenthesis s is a string of \"( \" and \")\".\n return true if s is inside parenthesis.\n\n  >>> isInsideParenthesis(\"(\")\n  false\n  >>> isInsideParenthesis(\"()\")\n  true\n  >>> isInsideParenthesis(\"(()())\")\n  false\n  */\nconst isInsideParenthesis = (parenthesis) => {\n  const parenthesisArray = parenthesis.split('')\n  let isInsideParenthesis\n  for (let i = 0; i < parenthesisArray.length; i++) {\n    if (parenthesisArray[i] === '(') {\n      isInsideParenthesis = true\n    } else if (parenthesisArray[i] === ')') {\n      isInsideParenthesis = false\n    }\n  }\n  return isInsideParenthesis\n}\n\n/* isInsideBrackets s is a string of \"( \" and \")\".\n return true if s is inside brackets.\n\n  >>> isInsideBrackets(\"(\")\n  false\n  >>> isInsideBrackets(\"()\")\n  true\n  >>> isInsideBrackets(\"(()())\")\n  false\n  */\nconst isInsideBrackets = (brackets) => {\n  const bracketsArray = brackets.split('')\n  let isInsideBrackets", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs repr esent coefficientsof a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2  +  ....\n  R eturn  derivative of this p oly nomial inthe same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* xs repr esent coefficientsof a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2  + ....\n  R eturn  derivative of this p oly nomial inthe same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let xi = 0\n  let xj = 0\n  let xk = 0\n  let xm = 0\n  let xs = 0\n  let xms = 0\n  let xmz = 0\n  let xmzs = 0\n  let xmzm = 0\n  let xmzms = 0\n  let xmzmz = 0\n  let xmzmzs = 0\n  let xmzmzm = 0\n  let xmzmzms = 0\n  let xmzmzmz = 0\n  let xmzmzmzs = 0\n  let xmzmzmzm = 0\n  let xmzmzmzms = 0\n  let xmzmzmzmz = 0\n  let xmzmzmzmzs = 0\n  let xmzmzmzmzm = 0\n  let xmzmzmzmzms = 0\n  let xmzmzmzmzmz = 0\n  let xmzmzmzmzmzs = 0\n  let xmzmzmzmzmzm = 0\n  let xmzmzmzmzmzms = 0\n  let xmzmzmzmzmzmz = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let xmzmzmzmzmzmzm = 0\n  let xmzmzmzmzmzmzs = 0\n  let x", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibF ib number sequenceis a sequence similar to the Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*The FibF ib number sequenceis a sequence similar to the Fibbonaccisequnece t ha t's define d asfollows:\n  fibfib(0)==0\n fibfib (1) == 0\n  fibf ib(2) == 1\n  fibfib(n) == fibfib(n-1) + fib fib(n-2) + fibfib(n -3).\n Please write a function  to  effici ently compute the n-th element of the fibfib number sequenc e.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n -3);\n};\n\n/*\n fibfib(n) is a function which returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the n-th element of the fibfib number sequence\n fibfib(n) returns the ", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write afunction vowelsCoun t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction vowelsCoun t which takes a string representing\n  aword as in pu t and retu rns t he number of vowels i n t hestring.   Vowels in th is case are 'a', 'e', 'i', 'o', 'u'. Here,'y' is also a\n vow el, but  only when it is at the  en d of th e given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsCountIndex = 0;\n  let vowelsCountIndex2 = 0;\n  let vowelsCountIndex3 = 0;\n  let vowelsCountIndex4 = 0;\n  let vowelsCountIndex5 = 0;\n  let vowelsCountIndex6 = 0;\n  let vowelsCountIndex7 = 0;\n  let vowelsCountIndex8 = 0;\n  let vowelsCountIndex9 = 0;\n  let vowelsCountIndex10 = 0;\n  let vowelsCountIndex11 = 0;\n  let vowelsCountIndex12 = 0;\n  let vowelsCountIndex13 = 0;\n  let vowelsCountIndex14 = 0;\n  let vowelsCountIndex15 = 0;\n  let vowelsCountIndex16 = 0;\n  let vowelsCountIndex17 = 0;\n  let vowelsCountIndex18 = 0;\n  let vowelsCountIndex19 = 0;\n  let vowelsCountIndex20 = 0;\n  let vowelsCountIndex21 = 0;\n  let vowelsCountIndex22 = 0;\n  let vowelsCountIndex23 = 0;\n  let vowelsCountIndex24 = 0;\n  let vowelsCountIndex25 = 0;\n  let vowelsCountIndex26 = 0;\n  let vowelsCountIndex27 = 0;\n  let vowelsCountIndex28 = 0;\n  let vowelsCountIndex29 = 0;\n  let vowelsCountIndex30 = 0;\n  let vowelsCountIndex31 = 0;\n  let vowelsCountIndex32 = 0;\n  let vowelsCountIndex33 = 0;\n  let vowelsCountIndex34 = 0;\n  let vowelsCountIndex35 = 0;\n  let vowelsCountIndex36 = 0;\n  let vowelsCountIndex37 = 0;\n  let vowelsCountIndex38 = 0;\n  let vowelsCountIndex39 = 0;\n  let vowelsCountIndex40 = 0;\n  let vowelsCountIndex41 = 0;\n  let vowelsCountIndex42 = 0;\n  let vowelsCountIndex43 = 0;\n  let vowelsCountIndex44 = 0;\n  let vowelsCountIndex45 = 0;\n  let vowelsCountIndex46 = 0;\n  let vowelsCountIndex47 = 0;\n  let vowelsCountIndex48 = 0;\n  let vowelsCountIndex49 = 0;\n  let vowelsCountIndex50 = 0;\n  let vowelsCountIndex51 = 0;\n  let vowelsCountIndex52 = 0;\n  let vowelsCountIndex53 = 0;\n  let vowelsCountIndex54 = 0;\n  let vowelsCountIndex55 = 0;\n  let vowelsCountIndex56 = 0;\n  let vowelsCountIndex57 = 0;\n  let vowelsCountIndex58 = 0;\n  let vowelsCountIndex59 = 0;\n  let vowelsCountIndex60 = 0;\n  let vowelsCountIndex61 = 0;\n  let vowelsCountIndex62 = 0;\n  let vowelsCountIndex63 = 0;\n  let vowelsCountIndex64 = 0;\n  let vowelsCountIndex65 = 0;\n  let vowelsCountIndex66 = 0;\n  let vowelsCountIndex67 = 0;\n  let vowelsCountIndex68 = 0;\n  let vowelsCountIndex69 = 0;\n  let vowelsCountIndex70 = 0;\n  let vowelsCountIndex71 = 0;\n  let vowelsCountIndex72 = 0;\n  let vowelsCountIndex73 = 0;\n  let vowelsCountIndex74 = 0;\n  let vowelsCountIndex75 = 0;\n  let vowelsCountIndex76 = 0;\n  let vowelsCountIndex77 = 0;\n  let vowelsCountIndex78 = 0;\n  let vowelsCountIndex79 = 0;\n  let vowelsCountIndex80 = 0;\n  let vowelsCountIndex81 = 0;\n  let vowelsCountIndex82 = 0;\n  let vowelsCountIndex83 = 0;\n  let vowelsCountIndex84 = 0;\n  let vowelsCountIndex85 = 0;\n  let vowelsCountIndex86 = 0;\n  let vowelsCountIndex87 = 0;\n  let vowelsCountIndex88 = 0;\n  let vowelsCountIndex89 = 0;\n  let vowelsCountIndex90 = 0;\n  let vowelsCountIndex91 = 0;\n  let vowelsCountIndex92 = 0;\n  let vowelsCountIndex93 = 0;\n  let vowelsCountIndex94 = 0;\n  let vowelsCountIndex95 = 0;\n  let vowelsCountIndex96 = 0;\n  let vowelsCountIndex97 = 0;\n  let vowelsCountIndex98 = 0;\n  let vowelsCountIndex99 = 0;\n  let vowelsCountIndex100 = 0;\n  let vowelsCountIndex101 = 0;\n  let vowelsCountIndex102 = 0;\n  let vowelsCountIndex103 = 0;\n  let vowelsCountIndex104 = 0;\n  let vowelsCountIndex105 = 0;\n  let vowelsCountIndex106 = 0;\n  let vowelsCountIndex107 = 0;\n  let vowelsCountIndex108 = 0;\n  let vowelsCountIndex109 = 0;\n  let vowelsCountIndex110 = 0;\n  let vowelsCountIndex111 = 0;\n  let vowelsCountIndex112 = 0;\n  let vowelsCountIndex113 = 0;\n  let vowelsCountIndex114 = 0;\n  let vowelsCountIndex115 = 0;\n  let vowelsCountIndex116 = 0;\n  let vowelsCountIndex117 = 0;\n  let vowelsCountIndex118 = 0;\n  let vowelsCountIndex119 = 0;\n  let vowelsCountIndex120 = 0;\n  let vowelsCountIndex121 = 0;\n  let vowelsCountIndex122 = 0;\n  let vowelsCountIndex123 = 0;\n  let vowelsCountIndex124 = 0;\n  let vowelsCountIndex125 = 0;\n  let vowelsCountIndex126 = 0;\n  let vowelsCountIndex127 = 0;\n  let vowelsCountIndex128 = 0;\n  let vowelsCountIndex129 = 0;\n  let vowelsCountIndex130 = 0;\n  let vowelsCountIndex131 = 0;\n  let vowelsCountIndex132 = 0;\n  let vowelsCountIndex133 = 0;\n  let vowelsCountIndex134 = 0;\n  let vowelsCountIndex135 = 0;\n  let vowelsCountIndex136 = 0;\n  let vowelsCountIndex137 = 0;\n  let vowelsCountIndex138 = 0;\n  let vowelsCountIndex139 = 0;\n  let vowelsCountIndex140 = 0;\n  let vowelsCountIndex141 = 0;\n  let vowelsCountIndex142 = 0;\n  let vowelsCountIndex143 = 0;\n  let vowelsCountIndex144 = 0;\n  let vowelsCountIndex145 = 0;\n  let vowelsCountIndex146 = 0;\n  let vowelsCountIndex147 = 0;\n  let vowelsCountIndex148 = 0;\n  let vowelsCountIndex149 = 0;\n  let vowelsCountIndex150 = 0;\n  let vowelsCountIndex151 = 0;\n  let vowelsCountIndex152 = 0;\n  let vowelsCountIndex153 = 0;\n  let vowelsCountIndex154 = 0;\n  let vowelsCountIndex155 = 0;\n  let vowelsCountIndex156 = 0;\n  let vowelsCountIndex157 = 0;\n  let vowelsCountIndex158 = 0;\n  let vowelsCountIndex159 = 0;\n  let vowelsCountIndex160 = 0;\n  let vowelsCountIndex161 = 0;\n  let vowelsCountIndex162 = 0;\n  let vowelsCountIndex163 = 0;\n  let vowelsCountIndex164 = 0;\n  let vowelsCountIndex165 = 0;\n  let vowelsCountIndex166 = 0;\n  let vowelsCountIndex167 = 0;\n  let vowelsCountIndex168 = 0;\n  let vowelsCountIndex169 = 0;\n  let vowelsCountIndex170 = 0;\n  let vowelsCountIndex171 = 0;\n  let vowelsCountIndex172 = 0;\n  let vowelsCountIndex173 = 0;\n  let vowelsCountIndex174 = 0;\n  let ", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular  shift the digits o f the integer x, shift the digits rightbyshift\n a nd returnthe r esult as a string.\n Ifshift > nu mber of digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Circular  shift the digits o f the integer x, shift the digits rightbyshift\n a nd returnthe r esult as a string.\n Ifshift > nu mber of digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let r = \"\";\n  let n = x.toString();\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = n.reverse();\n  n = n.join(\"\");\n  n = n.split(\"\");\n  n = ", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  upper cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Task\n W rite a function tha t takes a string as input and returns the sum of t he  upper cha racte rs only'\n  ASCII code s.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this  task, you will begiven a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  In this  task, you will begiven a string that represents a numberofapplesan d oranges  tha t are distributed ina b asket of f ruit this baske t contains\n  apples, oranges, and mango fru its. Given thestri ng that  represents the total n umb er of\nthe oranges and apples and an integerthat represent the t ota lnum ber of th e fruits\n  in the basket return the number of the mangofruits in the basket.\n  for examble:\n  fruitDis tribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fr uitDistribution(\"0 apples and 1oranges\",3) ->3 - 0 -1 = 2\n  fruitDistribution(\"2 appl es and 3 oranges\", 10 0) -> 100- 2-  3 = 95 \n fruitDistribution(\"100 app les and 1oranges\",120) -> 120 - 100 - 1 =  19  */\nconstfruitDist ribu tion = (s, n) = > {\n  let rec ribu tion (s, n) = \n    if n == 0 then \n      0\n    else if n == 1 then \n      s\n    else if n == 2 then \n      s + s\n    else if n == 3 then \n      s + s + s\n    else if n == 4 then \n      s + s + s + s\n    else if n == 5 then \n      s + s + s + s + s\n    else if n == 6 then \n      s + s + s + s + s + s\n    else if n == 7 then \n      s + s + s + s + s + s + s + s\n    else if n == 8 then \n      s + s + s + s + s + s + s + s + s + s\n    else if n == 9 then \n      s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 10 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 11 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 12 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 13 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 14 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 15 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 16 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 17 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 18 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 19 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 20 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 21 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 22 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 23 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 24 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 25 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 26 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 27 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 28 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 29 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 30 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 31 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 32 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 33 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 34 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 35 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 36 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 37 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 38 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 39 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 40 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 41 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 42 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 43 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 44 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 45 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 46 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 47 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 48 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 49 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 40 then \n      s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s + s\n    else if n == 41 then \n      s + s + s + ", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givenan array representi ng a branchof a tree that has non-negative intege rnodes\n yo ur ta sk is to pluck one of  th e nodes an d return it.\n The plucked node should be the node with th e smallest even val ue.\n  I f multiple nodes with t hesame sm allesteven value are found return thenode that has smalle stindex .\n\n  Theplucked node should be returned ina list, [ smalest_val ue, its index ],\n  If there are no evenvaluesor the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Givenan array representi ng a branchof a tree that has non-negative intege rnodes\n yo ur ta sk is to pluck one of  th e nodes an d return it.\n The plucked node should be the node with th e smallest even val ue.\n  I f multiple nodes with t hesame sm allesteven value are found return thenode that has smalle stindex.\n\n  Theplucked node should be returned ina list, [ smalest_val ue, its index ],\n  If there are no evenvaluesor the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      min = Math.min(min, arr[i]);\n      max = Math.max(max, arr[i]);\n      minIndex = i;\n      maxIndex = i;\n    }\n  }\n  return [min, maxIndex];\n};\n\n/**\n * Given a binary tree and a value, return its height.\n * \n * https://leetcode.com/problems/height-of-binary-tree/\n * \n * Example 1:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 2\n * Explanation: Height of binary tree is 2.\n * \n * Example 2:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 3\n * Explanation: Height of binary tree is 3.\n * \n * Example 3:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 4\n * Explanation: Height of binary tree is 4.\n * \n * Example 4:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 5\n * Explanation: Height of binary tree is 5.\n * \n * Note:\n * \n * You may assume that all nodes are non-negative integers.\n * You may assume that height of binary tree is always represented by a positive integer.\n */\nconst height = (root) => {\n  if (!root) {\n    return 0;\n  }\n  const leftHeight = height(root.left);\n  const rightHeight = height(root.right);\n  return Math.max(leftHeight, rightHeight) + 1;\n};\n\n/**\n * Given a binary tree and a value, return its depth.\n * \n * https://leetcode.com/problems/depth-of-binary-tree/\n * \n * Example 1:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 1\n * Explanation: Depth of binary tree is 1.\n * \n * Example 2:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 2\n * Explanation: Depth of binary tree is 2.\n * \n * Example 3:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 3\n * Explanation: Depth of binary tree is 3.\n * \n * Example 4:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 4\n * Explanation: Depth of binary tree is 4.\n * \n * Note:\n * \n * You may assume that all nodes are non-negative integers.\n * You may assume that depth of binary tree is always represented by a positive integer.\n */\nconst depth = (root) => {\n  if (!root) {\n    return 0;\n  }\n  const leftDepth = depth(root.left);\n  const rightDepth = depth(root.right);\n  return Math.max(leftDepth, rightDepth) + 1;\n};\n\n/**\n * Given a binary tree and a value, return its maximum depth.\n * \n * https://leetcode.com/problems/maximum-depth-of-binary-tree/\n * \n * Example 1:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 1\n * Explanation: Maximum depth of binary tree is 1.\n * \n * Example 2:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 2\n * Explanation: Maximum depth of binary tree is 2.\n * \n * Example 3:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 3\n * Explanation: Maximum depth of binary tree is 3.\n * \n * Example 4:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 4\n * Explanation: Maximum depth of binary tree is 4.\n * \n * Note:\n * \n * You may assume that all nodes are non-negative integers.\n * You may assume that maximum depth of binary tree is always represented by a positive integer.\n */\nconst maxDepth = (root) => {\n  if (!root) {\n    return 0;\n  }\n  const leftMaxDepth = maxDepth(root.left);\n  const rightMaxDepth = maxDepth(root.right);\n  return Math.max(leftMaxDepth, rightMaxDepth) + 1;\n};\n\n/**\n * Given a binary tree and a value, return its minimum depth.\n * \n * https://leetcode.com/problems/minimum-depth-of-binary-tree/\n * \n * Example 1:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 1\n * Explanation: Minimum depth of binary tree is 1.\n * \n * Example 2:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 2\n * Explanation: Minimum depth of binary tree is 2.\n * \n * Example 3:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 3\n * Explanation: Minimum depth of binary tree is 3.\n * \n * Example 4:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: 4\n * Explanation: Minimum depth of binary tree is 4.\n * \n * Note:\n * \n * You may assume that all nodes are non-negative integers.\n * You may assume that minimum depth of binary tree is always represented by a positive integer.\n */\nconst minDepth = (root) => {\n  if (!root) {\n    return 0;\n  }\n  const leftMinDepth = minDepth(root.left);\n  const rightMinDepth = minDepth(root.right);\n  return Math.max(leftMinDepth, rightMinDepth) + 1;\n};\n\n/**\n * Given a binary tree and a value, return its height and depth.\n * \n * https://leetcode.com/problems/height-depth-of-binary-tree/\n * \n * Example 1:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: [2, 1]\n * Explanation: Height of binary tree is 2, and depth is 1.\n * \n * Example 2:\n * \n * Input: root = [3,9,20,null,null,15,7],\n * Output: [3, 2]", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a non-emptylist of positive integers. Return the greatest int eg er thatis  grea ter than\n  zero, andhas  afrequen cy greater than  or equal to the value of the integer itsel f.\n  The frequencyof an i nteger is the number of  ti mes itappears in the list.  If no such a value exist, return -1. \n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxI = 0;\n  let maxF = 0;\n  let maxC = 0;\n  let maxT = 0;\n  let maxI2 = 0;\n  let maxF2 = 0;\n  let maxC2 = 0;\n  let maxT2 = 0;\n  let maxI3 = 0;\n  let maxF3 = 0;\n  let maxC3 = 0;\n  let maxT3 = 0;\n  let maxI4 = 0;\n  let maxF4 = 0;\n  let maxC4 = 0;\n  let maxT4 = 0;\n  let maxI5 = 0;\n  let maxF5 = 0;\n  let maxC5 = 0;\n  let maxT5 = 0;\n  let maxI6 = 0;\n  let maxF6 = 0;\n  let maxC6 = 0;\n  let maxT6 = 0;\n  let maxI7 = 0;\n  let maxF7 = 0;\n  let maxC7 = 0;\n  let maxT7 = 0;\n  let maxI8 = 0;\n  let maxF8 = 0;\n  let maxC8 = 0;\n  let maxT8 = 0;\n  let maxI9 = 0;\n  let maxF9 = 0;\n  let maxC9 = 0;\n  let maxT9 = 0;\n  let maxI10 = 0;\n  let maxF10 = 0;\n  let maxC10 = 0;\n  let maxT10 = 0;\n  let maxI11 = 0;\n  let maxF11 = 0;\n  let maxC11 = 0;\n  let maxT11 = 0;\n  let maxI12 = 0;\n  let maxF12 = 0;\n  let maxC12 = 0;\n  let maxT12 = 0;\n  let maxI13 = 0;\n  let maxF13 = 0;\n  let maxC13 = 0;\n  let maxT13 = 0;\n  let maxI14 = 0;\n  let maxF14 = 0;\n  let maxC14 = 0;\n  let maxT14 = 0;\n  let maxI15 = 0;\n  let maxF15 = 0;\n  let maxC15 = 0;\n  let maxT15 = 0;\n  let maxI16 = 0;\n  let maxF16 = 0;\n  let maxC16 = 0;\n  let maxT16 = 0;\n  let maxI17 = 0;\n  let maxF17 = 0;\n  let maxC17 = 0;\n  let maxT17 = 0;\n  let maxI18 = 0;\n  let maxF18 = 0;\n  let maxC18 = 0;\n  let maxT18 = 0;\n  let maxI19 = 0;\n  let maxF19 = 0;\n  let maxC19 = 0;\n  let maxT19 = 0;\n  let maxI20 = 0;\n  let maxF20 = 0;\n  let maxC20 = 0;\n  let maxT20 = 0;\n  let maxI21 = 1;\n  let maxF21 = 1;\n  let maxC21 = 1;\n  let maxT21 = 1;\n  let maxI22 = 1;\n  let maxF22 = 1;\n  let maxC22 = 1;\n  let maxT22 = 1;\n  let maxI23 = 1;\n  let maxF23 = 1;\n  let maxC23 = 1;\n  let maxT23 = 1;\n  let maxI24 = 1;\n  let maxF24 = 1;\n  let maxC24 = 1;\n  let maxT24 = 1;\n  let maxI25 = 1;\n  let maxF25 = 1;\n  let maxC25 = 1;\n  let maxT25 = 1;\n  let maxI26 = 1;\n  let maxF26 = 1;\n  let maxC26 = 1;\n  let maxT26 = 1;\n  let maxI27 = 1;\n  let maxF27 = 1;\n  let maxC27 = 1;\n  let maxT27 = 1;\n  let maxI28 = 1;\n  let maxF28 = 1;\n  let maxC28 = 1;\n  let maxT28 = 1;\n  let maxI29 = 1;\n  let maxF29 = 1;\n  let maxC29 = 1;\n  let maxT29 = 1;\n  let maxI30 = 1;\n  let maxF30 = 1;\n  let maxC30 = 1;\n  let maxT30 = 1;\n  let maxI31 = 1;\n  let maxF31 = 1;\n  let maxC31 = 1;\n  let maxT31 = 1;\n  let maxI32 = 1;\n  let maxF32 = 1;\n  let maxC32 = 1;\n  let maxT32 = 1;\n  let maxI33 = 1;\n  let maxF33 = 1;\n  let maxC33 = 1;\n  let maxT33 = 1;\n  let maxI34 = 1;\n  let maxF34 = 1;\n  let maxC34 = 1;\n  let maxT34 = 1;\n  let maxI35 = 1;\n  let maxF35 = 1;\n  let maxC35 = 1;\n  let maxT35 = 1;\n  let maxI36 = 1;\n  let maxF36 = 1;\n  let maxC36 = 1;\n  let maxT36 = 1;\n  let maxI37 = 1;\n  let maxF37 = 1;\n  let maxC37 = 1;\n  let maxT37 = 1;\n  let maxI38 = 1;\n  let maxF38 = 1;\n  let maxC38 = 1;\n  let maxT38 = 1;\n  let maxI39 = 1;\n  let maxF39 = 1;\n  let maxC39 = 1;\n  let maxT39 = 1;\n  let maxI40 = 1;\n  let maxF40 = 1;\n  let maxC40 = 1;\n  let maxT40 = 1;\n  let maxI41 = 1;\n  let maxF41 = 1;\n  let maxC41 = 1;\n  let maxT41 = 1;\n  let maxI42 = 1;\n  let maxF42 = 1;\n  let maxC42 = 1;\n  let maxT42 = 1;\n  let maxI43 = 1;\n  let maxF43 = 1;\n  let maxC43 = 1;\n  let maxT43 = 1;\n  let maxI44 = 1;\n  let maxF44 = 1;\n  let maxC44 = 1;\n  let maxT44 = 1;\n  let maxI45 = 1;\n  let maxF45 = 1;\n  let maxC45 = 1;\n  let maxT45 = 1;\n  let maxI46 = 1;\n  let maxF46 = 1;\n  let maxC46 = 1;\n  let maxT46 = 1;\n  let maxI47 = 1;\n  let maxF47 = 1;\n  let maxC47 = 1;\n  let maxT47 = 1;\n  let maxI48 = 1;\n  let maxF48 = 1;\n  let maxC48 = 1;\n  let maxT48 = 1;\n  let maxI49 = 1;\n  let maxF49 = 1;\n  let maxC49 = 1;\n  let maxT49 = 1;\n  let maxI50 = 1;\n  let maxF50 = 1;\n  let maxC50 = 1;\n  let maxT50 = 1;\n  let maxI51 = 1;\n  let maxF51 = 1;\n  let maxC51 = 1;\n  let maxT51 = 1;\n  let maxI52 = 1;\n  let maxF52 = 1;\n  let maxC52 = 1;\n  let maxT52 = 1;\n  let maxI53 = 1;\n  let maxF53 = 1;\n  let maxC53 = 1;\n  let maxT53 = 1;\n  let maxI54 = 1;\n  let maxF54 = 1;\n  let maxC54 = 1;\n  let maxT54 = 1;\n  let maxI55 = 1;\n  let maxF55 = 1;\n  let maxC53 = 1;\n  let maxT53 = 1;\n  let maxI56 = 1;\n  let maxF56 = 1;\n  let maxC53 = 1;\n  let maxT53 = 1;\n  let maxI57 = 1;\n  let maxF57 = 1;\n  let maxC53 = 1;\n  let maxT53 = 1;\n  let maxI58 = 1;\n  let maxF58 = 1;\n  let maxC53 = 1;\n  let maxT53 = 1;\n  let maxI59 = 1;\n  let maxF59 = 1;\n  let maxC53 = 1;\n  let maxT53 = 1;\n  let maxI60 = 1;\n  let maxF60 = 1;\n  let maxC53 = 1;\n  let maxT53 = 1;\n  let maxI61 = 1;\n  let maxF6", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filteran input list of st rings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Filteran input list of st rings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrder(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnly = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnly('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnly = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnly('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnly = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnly('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnly = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnly('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnly = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnly('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnly = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for ones that contain given substring\n * and are in given order\n * >>> filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder('abc', 'a')\n * ['abc']\n */\nconst filterBySubstringOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrderOnlyInOrder = (strings, substring) => {\n  return strings.filter(string => string.includes(substring) && string.includes(substring));\n};\n\n/**\n * Filter input list of st rings only for one", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Givenl ist of integers, re turn list in strange order.\n  Strange sorting, iswh en you sta rt wi th the minimum value, \n then maxim um of the remai ning integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givenl ist of integers, re turn list in strange order.\n  Strange sorting, iswh en you sta rt wi th the minimum value, \n then maxim um of the remai ning integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let res = []\n  let min = Infinity\n  let max = -Infinity\n  let minIndex = -1\n  let maxIndex = -1\n  let minValue = Infinity\n  let maxValue = -Infinity\n  let minIndexValue = -1\n  let maxIndexValue = -1\n  let minValueIndex = -1\n  let maxValueIndex = -1\n  let minValueValueIndex = -1\n  let maxValueValueIndex = -1\n  let minValueValueValueIndex = -1\n  let maxValueValueValueIndex = -1\n  let minValueValueValueValueIndex = -1\n  let maxValueValueValueValueIndex = -1\n  let minValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValueValueValueValueIndex = -1\n  let maxValueValueValueValueValueValueIndex = -1\n  let minValueValueValue", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Givent he lengths of the t hree sides of a triangle. Return the area of\n  the  t rianglero unded  to 2 decimal pointsifthe threesides form a va lid triangle.\n  Otherwise return -1\n  Three  sides make a valid  triang le when the sum of anytwo  sidesis greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givent he lengths of the t hree sides of a triangle. Return the area of\n  the  t rianglero unded  to 2 decimal pointsifthe threesides form a va lid triangle.\n  Otherwise return -1\n  Three  sides make a valid  triang le when the sum of anytwo  sidesis greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) / 2;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square meters.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInMeters = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square kilometers.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInKilometers = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square feet.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInFeet = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.3048;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square meters.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInMetersOrFeet = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square kilometers.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInKilometersOrFeet = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square feet.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInFeetOrMeters = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.3048;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square meters.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInMetersOrFeetOrMeters = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square kilometers.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInKilometersOrFeetOrMeters = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square meters.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInMetersOrFeetOrKilometers = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square kilometers.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInKilometersOrFeetOrKilometers = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square meters.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInMetersOrFeetOrMetersOrKilometers = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square kilometers.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInKilometersOrFeetOrMetersOrKilometers = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square meters.\n  If the triangle is invalid, return -1.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaInMetersOrFeetOrMetersOrKilometersOrFeetOrKilometers = (a, b, c) => {\n  if (a > b || b > c || c > a) return -1;\n  return (a * a + b * b + c * c) * 0.621371192;\n};\n\n/*\n  Given a triangle with sides a, b, c return its area in square kilometers.\n  If the tri", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  q.forEach((e, i) => {\n    if (e === w) {\n      sum++;\n      if (sum >= w) {\n        return true;\n      }\n    }\n  });\n  return false;\n};\n\n/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  q.forEach((e, i) => {\n    if (e === w) {\n      sum++;\n      if (sum >= w) {\n        return true;\n      }\n    }\n  });\n  return false;\n};\n\n/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  q.forEach((e, i) => {\n    if (e === w) {\n      sum++;\n      if (sum >= w) {\n        return true;\n      }\n    }\n  });\n  return false;\n};\n\n/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  q.forEach((e, i) => {\n    if (e === w) {\n      sum++;\n      if (sum >= w) {\n        return true;\n      }\n    }\n  });\n  return false;\n};\n\n/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  q.forEach((e, i) => {\n    if (e === w) {\n      sum++;\n      if (sum >= w) {\n        return true;\n      }\n    }\n  });\n  return false;\n};\n\n/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  q.forEach((e, i) => {\n    if (e === w) {\n      sum++;\n      if (sum >= w) {\n        return true;\n      }\n    }\n  });\n  return false;\n};\n\n/*\n  Writea  function thatretu rns true ifthe object q will fly, and false other wi se.\n  Theobjec t q will fly if it'sbal anced (itis a palindromi c list) and the sum of its elements is less  than or equalthemaximum  possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Givena n array arr ofinte gers, find the minimum number of elements that\n  n ee d to bech anged  to make the array pa lin dromic. Apalindromic arr ay is an array that\n  is read the same back wards and forwards.  In one  change, you can change  on e eleme nt to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array arr ofinte gers, find the minimum number of elements that\n  n ee d to bech anged  to make the array pa lin dromic. Apalindromic arr ay is an array that\n  is read the same back wards and forwards.  In one  change, you can change  on e eleme nt to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElem = Number.MAX_VALUE;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < minElem) {\n      minElem = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\n/*\n  Given a sorted array nums, return its maximum sum.\n\n  Example:\n  maximumSum([2,4,6,8,10]) == 10\n  maximumSum([2,4,6,8,9,10]) == 9\n  maximumSum([2,4,6,8,9,10,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,10]) == 9\n  maximumSum([2,4,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars , return the first list .\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thatacce pts two lists of strings and returns the list that  h as\n  total  numb er of chars in the al l s trings ofthe list less t han the other list.\n\n  if the two lists hav e the same number o f chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let result = [];\n  let len1 = lst1.length;\n  let len2 = lst2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len3 = len1;\n  let len4 = len2;\n  while (i < len1 && j < len2) {\n    if (lst1[i] === lst2[j]) {\n      total++;\n      result.push(lst1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < len1) {\n    total++;\n    result.push(lst1[i]);\n    i++;\n  }\n  while (j < len2) {\n    total++;\n    result.push(lst2[j]);\n    j++;\n  }\n  return result;\n};\n\n/**\n  Write a function that takes an array of strings and returns an array of\n  strings that is all the strings in the array that are not in the\n  other array.\n\n  Examples\n  difference('hi', 'admin') ➞ ['hi']\n  difference('hi', 'hi') ➞ []\n  difference('hi', 'hi', 'admin') ➞ ['hi']\n  difference('hi', 'hi', 'hi') ➞ ['hi']\n  difference('4', ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst difference = (arr1, arr2) => {\n  let result = [];\n  let len1 = arr1.length;\n  let len2 = arr2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len3 = len1;\n  let len4 = len2;\n  while (i < len1 && j < len2) {\n    if (arr1[i]!== arr2[j]) {\n      result.push(arr1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < len1) {\n    result.push(arr1[i]);\n    i++;\n  }\n  while (j < len2) {\n    result.push(arr2[j]);\n    j++;\n  }\n  return result;\n};\n\n/**\n  Write a function that takes an array of strings and returns an array of\n  strings that is all the strings in the array that are in the other array.\n\n  Examples\n  intersection('hi', 'admin') ➞ ['hi']\n  intersection('hi', 'hi') ➞ []\n  intersection('hi', 'hi', 'admin') ➞ ['hi']\n  intersection('hi', 'hi', 'hi') ➞ ['hi']\n  intersection('4', ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst intersection = (arr1, arr2) => {\n  let result = [];\n  let len1 = arr1.length;\n  let len2 = arr2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len3 = len1;\n  let len4 = len2;\n  while (i < len1 && j < len2) {\n    if (arr1[i] === arr2[j]) {\n      result.push(arr1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < len1) {\n    result.push(arr1[i]);\n    i++;\n  }\n  while (j < len2) {\n    result.push(arr2[j]);\n    j++;\n  }\n  return result;\n};\n\n/**\n  Write a function that takes an array of strings and returns an array of\n  strings that is all the strings in the array that are in one but not the\n  other.\n\n  Examples\n  union('hi', 'admin') ➞ ['hi']\n  union('hi', 'hi') ➞ []\n  union('hi', 'hi', 'admin') ➞ ['hi']\n  union('hi', 'hi', 'hi') ➞ ['hi']\n  union('4', ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst union = (arr1, arr2) => {\n  let result = [];\n  let len1 = arr1.length;\n  let len2 = arr2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len3 = len1;\n  let len4 = len2;\n  while (i < len1 && j < len2) {\n    if (arr1[i]!== arr2[j]) {\n      result.push(arr1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < len1) {\n    result.push(arr1[i]);\n    i++;\n  }\n  while (j < len2) {\n    result.push(arr2[j]);\n    j++;\n  }\n  return result;\n};\n\n/**\n  Write a function that takes an array of strings and returns an array of\n  strings that is all the strings in the array that are in both arrays.\n\n  Examples\n  intersectionAndUnion('hi', 'admin') ➞ ['hi']\n  intersectionAndUnion('hi', 'hi') ➞ []\n  intersectionAndUnion('hi', 'hi', 'admin') ➞ ['hi']\n  intersectionAndUnion('hi', 'hi', 'hi') ➞ ['hi']\n  intersectionAndUnion('4', ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst intersectionAndUnion = (arr1, arr2) => {\n  let result = [];\n  let len1 = arr1.length;\n  let len2 = arr2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len3 = len1;\n  let len4 = len2;\n  while (i < len1 && j < len2) {\n    if (arr1[i] === arr2[j]) {\n      result.push(arr1[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  while (i < len1) {\n    result.push(arr1[i]);\n    i++;\n  }\n  while (j < len2) {\n    result.push(arr2[j]);\n    j++;\n  }\n  return result;\n};\n\n/**\n  Write a function that takes an array of strings and returns an array of\n  strings that is all the strings in the array that are in one but not the\n  other but in any order.\n\n  Examples\n  unionAndIntersection('hi', 'admin') ➞ ['hi']\n  unionAndIntersection('hi', 'hi') ➞ []\n  unionAndIntersection('hi', 'hi', 'admin') ➞ ['hi']\n  unionAndIntersection('hi', 'hi', 'hi') ➞ ['hi']\n  unionAndIntersection('4', ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst unionAndIntersection = (arr1, arr2) => {\n  let result = [];\n  let len1 = arr1.length;\n  let len2 = arr2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len3 = len1;\n  let len4 = ", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime) {\n    isPrime = false;\n    for (let i = 2; i <= n; i++) {\n      if (n % i === 0) {\n        isPrime = true;\n      }\n    }\n    n /= s;\n    s *= 2;\n  }\n  return isPrime;\n};\n\n/*Write afunction that retur ns true if the given number is the multiplicationof  3 prime n umber s\n  and false otherwi se. \n Knowing that (a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let n = a;\n  let s = 2;\n  while (isPrime", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % 2 === 0) {\n    return x === Math.pow(x, n);\n  }\n  return false;\n};\n\n/*Your tas k is to write a fun ction that returns true if a number x is asimple power of n  andfalse in other cases. \n x is a sim ple power of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePow", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Writea  function thattake s an integer a and returns true\n  if this ingegeris  a cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thattake s an integer a and returns true\n  if this ingegeris  a cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscube(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  a  cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscube(3) ==> true\n  iscube(4) ==> false\n  iscube(5) ==> true\n  iscube(6) ==> false\n  iscube(7) ==> true\n  iscube(8) ==> false\n  iscube(9) ==> true\n  iscube(10) ==> false\n  */\nconst iscubeof = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscubeof(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  a  cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscubeof(3) ==> true\n  iscubeof(4) ==> false\n  iscubeof(5) ==> true\n  iscubeof(6) ==> false\n  iscubeof(7) ==> true\n  iscubeof(8) ==> false\n  iscubeof(9) ==> true\n  iscubeof(10) ==> false\n  */\nconst iscubeofof = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscubeofof(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  a  cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscubeof(3) ==> true\n  iscubeof(4) ==> false\n  iscubeof(5) ==> true\n  iscubeof(6) ==> false\n  iscubeof(7) ==> true\n  iscubeof(8) ==> false\n  iscubeof(9) ==> true\n  iscubeof(10) ==> false\n  */\nconst iscubeofof = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscubeofof(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  a  cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscubeofof(3) ==> true\n  iscubeofof(4) ==> false\n  iscubeofof(5) ==> true\n  iscubeofof(6) ==> false\n  iscubeofof(7) ==> true\n  iscubeofof(8) ==> false\n  iscubeofof(9) ==> true\n  iscubeof(10) ==> false\n  */\nconst iscubeofof = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscubeofof(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  a  cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscubeofof(3) ==> true\n  iscubeofof(4) ==> false\n  iscubeofof(5) ==> true\n  iscubeofof(6) ==> false\n  iscubeofof(7) ==> true\n  iscubeofof(8) ==> false\n  iscubeofof(9) ==> true\n  iscubeof(10) ==> false\n  */\nconst iscubeofof = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscubeofof(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  a  cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscubeofof(3) ==> true\n  iscubeofof(4) ==> false\n  iscubeofof(5) ==> true\n  iscubeofof(6) ==> false\n  iscubeofof(7) ==> true\n  iscubeofof(8) ==> false\n  iscubeofof(9) ==> true\n  iscubeof(10) ==> false\n  */\nconst iscubeofofof = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscubeofof(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  a  cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscubeofof(3) ==> true\n  iscubeofof(4) ==> false\n  iscubeofof(5) ==> true\n  iscubeofof(6) ==> false\n  iscubeofof(7) ==> true\n  iscubeofof(8) ==> false\n  iscubeofof(9) ==> true\n  iscubeof(10) ==> false\n  */\nconst iscubeofofof = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscubeofof(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  a  cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscubeofof(3) ==> true\n  iscubeofof(4) ==> false\n  iscubeofof(5) ==> true\n  iscubeofof(6) ==> false\n  iscubeofof(7) ==> true\n  iscubeofof(8) ==> false\n  iscubeofof(9) ==> true\n  iscubeof(10) ==> false\n  */\nconst iscubeofofof = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscubeofof(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  a  cubeof  some  integer number.\n  No te:  you may a ssume the input  is always valid.\n  Examples:\n  iscubeofof(3) ==> true\n  iscubeofof(4) ==> false\n  iscubeofof(5) ==> true\n  iscubeofof(6) ==> false\n  iscubeofof(7) ==> true\n  iscubeofof(8) ==> false\n  iscubeofof(9) ==> true\n  iscubeof(10) ==> false\n  */\nconst iscubeofofof = (a) => {\n  if (a <= 0) return false;\n  if (a >= 1) return true;\n  return iscubeofof(a / 2);\n};\n\n/*\n  Writea  function thattake an integer a and returns true\n  if this ingegeris  ", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have  been tasked to wri te a function that receives\n  a hexadecimal number  a s a string  andcounts the number ofhex adecimal\ndigits that ar e primes (prime number=== or a prime=== isa natural number\n greater  than 1 that is not a p rod uct oftwosmaller natural numbers).\n  Hexadecimal digits are 0===  1= == 2= == 3=== 4 === 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers are 2=== 3=== 5=== 7===11===13=== 17===...  So you have to determine a number of the fol lowing digits: 2=== 3=== 5=== 7= ==\n  B (=decima l 11)===  D (=decimal13).\n  Note: you may assume the input isalways cor rector empt y string===\n  and symbols A== =B===C===D ===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You have  been tasked to wri te a function that receives\n  a hexadecimal number  a s a string  andcounts the number ofhex adecimal\ndigits that ar e primes (prime number=== or a prime=== isa natural number\n greater  than 1 that is not a p rod uct oftwosmaller natural numbers).\n  Hexadecimal digits are 0===  1= == 2= == 3=== 4 === 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n  Prime numbers are 2=== 3=== 5=== 7===11===13=== 17===...  So you have to determine a number of the fol lowing digits: 2=== 3=== 5=== 7= ==\n  B (=decima l 11)===  D (=decimal13).\n  Note: you may assume the input isalways cor rector empt y string===\n  and symbols A== =B===C===D ===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let numStr = num.toString();\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr.charCodeAt(i) >= 48 && numStr.charCodeAt(i) <= 57) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  You have  been tasked to write a function that receives a string and counts the number of characters that are not letters.\n  Characters are letters a-z A-Z 0-9 _.\n  Examples:\n  For str = \"A\" the output should be 1.\n  For str = \"AB\" the output should be 2.\n  For str = \"ABCD\" the output should be 3.\n  For str = \"ABCD\" the output should be 4.\n  For str = \"ABCDEF\" the output should be 5.\n  For str = \"ABCDEF\" the output should be 6.\n  For str = \"ABCDEF\" the output should be 7.\n  For str = \"ABCDEF\" the output should be 8.\n  For str = \"ABCDEF\" the output should be 9.\n  For str = \"ABCDEF\" the output should be 10.\n  For str = \"ABCDEF\" the output should be 11.\n  For str = \"ABCDEF\" the output should be 12.\n  For str = \"ABCDEF\" the output should be 13.\n  For str = \"ABCDEF\" the output should be 14.\n  For str = \"ABCDEF\" the output should be 15.\n  For str = \"ABCDEF\" the output should be 16.\n  For str = \"ABCDEF\" the output should be 17.\n  For str = \"ABCDEF\" the output should be 18.\n  For str = \"ABCDEF\" the output should be 19.\n  For str = \"ABCDEF\" the output should be 20.\n  For str = \"ABCDEF\" the output should be 21.\n  For str = \"ABCDEF\" the output should be 22.\n  For str = \"ABCDEF\" the output should be 23.\n  For str = \"ABCDEF\" the output should be 24.\n  For str = \"ABCDEF\" the output should be 25.\n  For str = \"ABCDEF\" the output should be 26.\n  For str = \"ABCDEF\" the output should be 27.\n  For str = \"ABCDEF\" the output should be 28.\n  For str = \"ABCDEF\" the output should be 29.\n  For str = \"ABCDEF\" the output should be 30.\n  For str = \"ABCDEF\" the output should be 31.\n  For str = \"ABCDEF\" the output should be 32.\n  For str = \"ABCDEF\" the output should be 33.\n  For str = \"ABCDEF\" the output should be 34.\n  For str = \"ABCDEF\" the output should be 35.\n  For str = \"ABCDEF\" the output should be 36.\n  For str = \"ABCDEF\" the output should be 37.\n  For str = \"ABCDEF\" the output should be 38.\n  For str = \"ABCDEF\" the output should be 39.\n  For str = \"ABCDEF\" the output should be 40.\n  For str = \"ABCDEF\" the output should be 41.\n  For str = \"ABCDEF\" the output should be 42.\n  For str = \"ABCDEF\" the output should be 43.\n  For str = \"ABCDEF\" the output should be 44.\n  For str = \"ABCDEF\" the output should be 45.\n  For str = \"ABCDEF\" the output should be 46.\n  For str = \"ABCDEF\" the output should be 47.\n  For str = \"ABCDEF\" the output should be 48.\n  For str = \"ABCDEF\" the output should be 49.\n  For str = \"ABCDEF\" the output should be 50.\n  For str = \"ABCDEF\" the output should be 51.\n  For str = \"ABCDEF\" the output should be 52.\n  For str = \"ABCDEF\" the output should be 53.\n  For str = \"ABCDEF\" the output should be 54.\n  For str = \"ABCDEF\" the output should be 55.\n  For str = \"ABCDEF\" the output should be 56.\n  For str = \"ABCDEF\" the output should be 57.\n  For str = \"ABCDEF\" the output should be 58.\n  For str = \"ABCDEF\" the output should be 59.\n  For str = \"ABCDEF\" the output should be 60.\n  For str = \"ABCDEF\" the output should be 61.\n  For str = \"ABCDEF\" the output should be 62.\n  For str = \"ABCDEF\" the output should be 63.\n  For str = \"ABCDEF\" the output should be 64.\n  For str = \"ABCDEF\" the output should be 65.\n  For str = \"ABCDEF\" the output should be 66.\n  For str = \"ABCDEF\" the output should be 67.\n  For str = \"ABCDEF\" the output should be 68.\n  For str = \"ABCDEF\" the output should be 69.\n  For str = \"ABCDEF\" the output should be 70.\n  For str = \"ABCDEF\" the output should be 71.\n  For str = \"ABCDEF\" the output should be 72.\n  For str = \"ABCDEF\" the output should be 73.\n  For str = \"ABCDEF\" the output should be 74.\n  For str = \"ABCDEF\" the output should be 75.\n  For str = \"ABCDEF\" the output should be 76.\n  For str = \"ABCDEF\" the output should be 77.\n  For str = \"ABCDEF\" the output should be 78.\n  For str = \"ABCDEF\" the output should be 79.\n  For str = \"ABCDEF\" the output should be 80.\n  For str = \"ABCDEF\" the output should be 81.\n  For str = \"ABCDEF\" the output should be 82.\n  For str = \"ABCDEF\" the output should be 83.\n  For str = \"ABCDEF\" the output should be 84.\n  For str = \"ABCDEF\" the output should be 85.\n  For str = \"ABCDEF\" the output should be 86.\n  For str = \"ABCDEF\" the output should be 87.\n  For str = \"ABCDEF\" the output should be 88.\n  For str = \"ABCDEF\" the output should be 89.\n  For str = \"ABCDEF\" the output should be 90.\n  For str = \"ABCDEF\" the output should be 91.\n  For str = \"ABCDEF\" the output should be 92.\n  For str = \"ABCDEF\" the output should be 93.\n  For str = \"ABCDEF\" the output should be 94.\n  For str = \"ABCDEF\" the output should be 95.\n  For str = \"ABCDEF\" the output should be 96.\n  For str = \"ABCDEF\" the output should be 97.\n  For str = \"ABCDEF\" the output should be 98.\n  For str = \"ABCDEF\" the output should be 99.\n  For str = \"ABCDEF\" the output should be 100.\n  For str = \"ABCDEF\" the output should be 101.\n  For str = \"ABCDEF\" the output should be 102.\n  For str = \"ABCDEF\" the output should be 103.\n  For str = \"ABCDEF\" the output should be 104.\n  For str = \"ABCDEF\" the output should be 105.\n  For str = \"ABCDEF\" the output should be 106.\n  For str = \"ABCDEF\" the output should be 107.\n  For str = \"ABCDEF\" the output should be 108.\n  For str = \"ABCDEF\" the output should be 109.\n  For str = \"ABCDEF\" the output should be 1", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will  be given a numberin decimal form and your task is to convert it to binary for mat.The function should r etu rna strin g, with each ch aracter representing a binary\n  number. Eac h character inthestringwill be '0' or '1'.\n\n The re will beanextra couple of characters 'db'at the beginning and  at theend of th e string.\n  The extra characters are there to help withthe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You will  be given a numberin decimal form and your task is to convert it to binary for mat.The function should r etu rna strin g, with each ch aracter representing a binary\n  number. Eac h character inthestringwill be '0' or '1'.\n\n The re will beanextra couple of characters 'db'at the beginning and  at theend of th e string.\n  The extra characters are there to help withthe format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let re = 'db';\n  let num;\n  let i;\n  let ch;\n  let num2;\n  let num3;\n  let num4;\n  let num5;\n  let num6;\n  let num7;\n  let num8;\n  let num9;\n  let num10;\n  let num11;\n  let num12;\n  let num13;\n  let num14;\n  let num15;\n  let num16;\n  let num17;\n  let num18;\n  let num19;\n  let num20;\n  let num21;\n  let num22;\n  let num23;\n  let num24;\n  let num25;\n  let num26;\n  let num27;\n  let num28;\n  let num29;\n  let num30;\n  let num31;\n  let num32;\n  let num33;\n  let num34;\n  let num35;\n  let num36;\n  let num37;\n  let num38;\n  let num39;\n  let num40;\n  let num41;\n  let num42;\n  let num43;\n  let num44;\n  let num45;\n  let num46;\n  let num47;\n  let num48;\n  let num49;\n  let num50;\n  let num51;\n  let num52;\n  let num53;\n  let num54;\n  let num55;\n  let num56;\n  let num57;\n  let num58;\n  let num59;\n  let num60;\n  let num61;\n  let num62;\n  let num63;\n  let num64;\n  let num65;\n  let num66;\n  let num67;\n  let num68;\n  let num69;\n  let num70;\n  let num71;\n  let num72;\n  let num73;\n  let num74;\n  let num75;\n  let num76;\n  let num77;\n  let num78;\n  let num79;\n  let num80;\n  let num81;\n  let num82;\n  let num83;\n  let num84;\n  let num85;\n  let num86;\n  let num87;\n  let num88;\n  let num89;\n  let num90;\n  let num91;\n  let num92;\n  let num93;\n  let num94;\n  let num95;\n  let num96;\n  let num97;\n  let num98;\n  let num99;\n  let num100;\n  let num101;\n  let num102;\n  let num103;\n  let num104;\n  let num105;\n  let num106;\n  let num107;\n  let num108;\n  let num109;\n  let num110;\n  let num111;\n  let num112;\n  let num113;\n  let num114;\n  let num115;\n  let num116;\n  let num117;\n  let num118;\n  let num119;\n  let num120;\n  let num121;\n  let num122;\n  let num123;\n  let num124;\n  let num125;\n  let num126;\n  let num127;\n  let num128;\n  let num129;\n  let num130;\n  let num131;\n  let num132;\n  let num133;\n  let num134;\n  let num135;\n  let num136;\n  let num137;\n  let num138;\n  let num139;\n  let num140;\n  let num141;\n  let num142;\n  let num143;\n  let num144;\n  let num145;\n  let num146;\n  let num147;\n  let num148;\n  let num149;\n  let num150;\n  let num151;\n  let num152;\n  let num153;\n  let num154;\n  let num155;\n  let num156;\n  let num157;\n  let num158;\n  let num159;\n  let num160;\n  let num161;\n  let num162;\n  let num163;\n  let num164;\n  let num165;\n  let num166;\n  let num167;\n  let num168;\n  let num169;\n  let num170;\n  let num171;\n  let num172;\n  let num173;\n  let num174;\n  let num175;\n  let num176;\n  let num177;\n  let num178;\n  let num179;\n  let num180;\n  let num181;\n  let num182;\n  let num183;\n  let num184;\n  let num185;\n  let num186;\n  let num187;\n  let num188;\n  let num189;\n  let num190;\n  let num191;\n  let num192;\n  let num193;\n  let num194;\n  let num195;\n  let num196;\n  let num197;\n  let num198;\n  let num199;\n  let num200;\n  let num201;\n  let num202;\n  let num203;\n  let num204;\n  let num205;\n  let num206;\n  let num207;\n  let num208;\n  let num209;\n  let num210;\n  let num211;\n  let num212;\n  let num213;\n  let num214;\n  let num215;\n  let num216;\n  let num217;\n  let num218;\n  let num219;\n  let num220;\n  let num221;\n  let num222;\n  let num223;\n  let num224;\n  let num225;\n  let num226;\n  let num227;\n  let num228;\n  let num229;\n  let num230;\n  let num231;\n  let num232;\n  let num233;\n  let num234;\n  let num235;\n  let num236;\n  let num237;\n  let num238;\n  let num239;\n  let num240;\n  let num241;\n  let num242;\n  let num243;\n  let num244;\n  let num245;\n  let num246;\n  let num247;\n  let num248;\n  let num249;\n  let num250;\n  let num251;\n  let num252;\n  let num253;\n  let num254;\n  let num255;\n  let num256;\n  let num257;\n  let num258;\n  let num259;\n  let num260;\n  let num261;\n  let num262;\n  let num263;\n  let num264;\n  let num265;\n  let num266;\n  let num267;\n  let num268;\n  let num269;\n  let num270;\n  let num271;\n  let num272;\n  let num273;\n  let num274;\n  let num275;\n  let num276;\n  let num277;\n  let num278;\n  let num279;\n  let num280;\n  let num281;\n  let num282;", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* For ag iven list of intege rs, return a tuple consisting of a sum anda produ ct  of allth e int egers in a list.\n  Em pty  sum shoul d be equal to 0  and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You aregiven a strings.\n Your task is to check if the string ishappy or n ot .\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a strings.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length\n  const isHappy = n >= 3 && s.split('').every(\n    letter => s.includes(letter) && s.split('').every(\n      letter => s.includes(letter)\n    )\n  )\n  return isHappy\n}\n\n/*\n You aregiven a string.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length\n  const isHappy = n >= 3 && s.split('').every(\n    letter => s.includes(letter) && s.split('').every(\n      letter => s.includes(letter)\n    )\n  )\n  return isHappy\n}\n\n/*\n You aregiven a string.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length\n  const isHappy = n >= 3 && s.split('').every(\n    letter => s.includes(letter) && s.split('').every(\n      letter => s.includes(letter)\n    )\n  )\n  return isHappy\n}\n\n/*\n You aregiven a string.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length\n  const isHappy = n >= 3 && s.split('').every(\n    letter => s.includes(letter) && s.split('').every(\n      letter => s.includes(letter)\n    )\n  )\n  return isHappy\n}\n\n/*\n You aregiven a string.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length\n  const isHappy = n >= 3 && s.split('').every(\n    letter => s.includes(letter) && s.split('').every(\n      letter => s.includes(letter)\n    )\n  )\n  return isHappy\n}\n\n/*\n You aregiven a string.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length\n  const isHappy = n >= 3 && s.split('').every(\n    letter => s.includes(letter) && s.split('').every(\n      letter => s.includes(letter)\n    )\n  )\n  return isHappy\n}\n\n/*\n You aregiven a string.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length\n  const isHappy = n >= 3 && s.split('').every(\n    letter => s.includes(letter) && s.split('').every(\n      letter => s.includes(letter)\n    )\n  )\n  return isHappy\n}\n\n/*\n You aregiven a string.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length\n  const isHappy = n >= 3 && s.split('').every(\n    letter => s.includes(letter) && s.split('').every(\n      letter => s.includes(letter)\n    )\n  )\n  return isHappy\n}\n\n/*\n You aregiven a string.\n Your task is to check if the string ishappy or n ot.\n  A stri ng is  happy if its lengthisatleast 3 and every 3 co nsecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const n = s.length\n  const isHap", "passed": 0}
{"task_id": "JavaScript/81", "prompt": "/*It is th e last week ofthesemester and the teacher has to give the grades\n to  students.  Theteacher has been maki ngher own al gorithm for gra ding.\n  The only problem is, she has lost t he code she used fo r gradi ng.\n  She has given you  alist of GPAs for some students and you have to write\n  a functiontha tcan  output a  list of letter grades using the following table:\n          GPA       |    Letter grade\n          4. 0               A+\n          > 3.7                A\n         > 3.3               A-\n         > 3.0              B+\n        > 2.7              B\n          > 2.3            B-\n       > 2.0            C+          > 1.7                C\n         >1.3              C -\n         > 1.0              D+\n        > 0.7               D\n         > 0. 0               D-\n            0 .0            E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*It is th e last week ofthesemester and the teacher has to give the grades\n to  students.  Theteacher has been maki ngher own al gorithm for gra ding.\n  The only problem is, she has lost t he code she used fo r gradi ng.\n  She has given you  alist of GPAs for some students and you have to write\n  a functiontha tcan  output a  list of letter grades using the following table:\n          GPA       |    Letter grade\n          4. 0               A+\n          > 3.7                A\n         > 3.3               A-\n         > 3.0              B+\n        > 2.7              B\n          > 2.3            B-\n       > 2.0            C+          > 1.7                C\n         >1.3              C -\n         > 1.0              D+\n        > 0.7               D\n         > 0. 0               D-\n            0.0            E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending order.\n  Example:\n  letterGrades([4.0, 3, 1.7, 2, 3.5]) ==> ['A', 'B', 'C', 'D', 'E']\n  */\nconst letterGrades = (grades) => {\n  const gradesArray = grades.map((grade) => grade / 100);\n  const letterGrades = gradesArray.map((grade) => grade.charAt(0));\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns a list of letter grades.\n  It should return an array with all the letter grades sorted in ascending ", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write afunction that takes  a string and returns true if the string\n lengthis  a prime n umber  or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Write afunction that takes  a string and returns true if the string\n lengthis  a prime n umber  or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  let length = string.length;\n  for(let i = 2; i < length; i++){\n    if(string[i] === string[length - i] || string[i] === string[length - i - 1] || string[i] === string[length - i + 1] || string[i] === string[length - i + 2] || string[i] === string[length - i + 3]){\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst palindrome = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome2 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome3 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome4 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome5 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome6 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome7 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome8 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome9 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome10 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome11 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome12 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome13 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst isPalindrome14 = (string) => {\n  let reversed = string.reverse();\n  return string.toLowerCase() === reversed.toLowerCase();\n};\n\n/*Write afunction that takes  a string and returns true if the string\n is  a palindrome  or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palin", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Givena  positive integer n , return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let startsOneEnds= 0;\n  let endsOneEnds= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      startsOneEnds++;\n    }\n    else{\n      endsOneEnds++;\n    }\n  }\n  return startsOneEnds + endsOneEnds;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst endsOneStarts= (n) => {\n  let endsOneStarts= 0;\n  let startsOneStarts= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      endsOneStarts++;\n    }\n    else{\n      startsOneStarts++;\n    }\n  }\n  return startsOneStarts + endsOneStarts;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let startsOneEnds= 0;\n  let endsOneEnds= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      startsOneEnds++;\n    }\n    else{\n      endsOneEnds++;\n    }\n  }\n  return startsOneEnds + endsOneEnds;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst endsOneStarts= (n) => {\n  let endsOneStarts= 0;\n  let startsOneStarts= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      endsOneStarts++;\n    }\n    else{\n      startsOneStarts++;\n    }\n  }\n  return startsOneStarts + endsOneStarts;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let startsOneEnds= 0;\n  let endsOneEnds= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      startsOneEnds++;\n    }\n    else{\n      endsOneEnds++;\n    }\n  }\n  return startsOneEnds + endsOneEnds;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst endsOneStarts= (n) => {\n  let endsOneStarts= 0;\n  let startsOneStarts= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      endsOneStarts++;\n    }\n    else{\n      startsOneStarts++;\n    }\n  }\n  return startsOneStarts + endsOneStarts;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let startsOneEnds= 0;\n  let endsOneEnds= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      startsOneEnds++;\n    }\n    else{\n      endsOneEnds++;\n    }\n  }\n  return startsOneEnds + endsOneEnds;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst endsOneStarts= (n) => {\n  let endsOneStarts= 0;\n  let startsOneStarts= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      endsOneStarts++;\n    }\n    else{\n      startsOneStarts++;\n    }\n  }\n  return startsOneStarts + endsOneStarts;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let startsOneEnds= 0;\n  let endsOneEnds= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      startsOneEnds++;\n    }\n    else{\n      endsOneEnds++;\n    }\n  }\n  return startsOneEnds + endsOneEnds;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst endsOneStarts= (n) => {\n  let endsOneStarts= 0;\n  let startsOneStarts= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      endsOneStarts++;\n    }\n    else{\n      startsOneStarts++;\n    }\n  }\n  return startsOneStarts + endsOneStarts;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let startsOneEnds= 0;\n  let endsOneEnds= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      endsOneEnds++;\n    }\n    else{\n      startsOneEnds++;\n    }\n  }\n  return startsOneEnds + endsOneEnds;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst endsOneStarts= (n) => {\n  let endsOneStarts= 0;\n  let startsOneStarts= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      endsOneStarts++;\n    }\n    else{\n      startsOneStarts++;\n    }\n  }\n  return startsOneStarts + endsOneStarts;\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  pos it ive intege rs th at start or end with1.  */\nconst startsOneEnds= (n) => {\n  let startsOneEnds= 0;\n  let endsOneEnds= 0;\n  for(let i=0;i<n;i++){\n    if(n % 10 === 0){\n      endsOneEnds++;\n    }\n    else{\n      startsOneEnds++;\n    }\n  }\n  return startsOneEnds + endsOneEnds;\n}\n\n", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given apositive integer N,  return thetotal sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given apositive integer N,  return thetotal sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    digit = parseInt(i.toString(2), 2);\n    \n    while(digit > 0){\n      binary = binary + digit%2;\n      digit = parseInt(i/2, 2);\n    }\n    \n    sum = sum + binary;\n  }\n  \n  return sum;\n};\n\n/*Given apositive integer N,  return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    digit = parseInt(i.toString(2), 2);\n    \n    while(digit > 0){\n      binary = binary + digit%2;\n      digit = parseInt(i/2, 2);\n    }\n    \n    sum = sum + parseInt(binary, 2);\n  }\n  \n  return sum;\n};\n\n/*Given apositive integer N,  return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    digit = parseInt(i.toString(2), 2);\n    \n    while(digit > 0){\n      binary = binary + digit%2;\n      digit = parseInt(i/2, 2);\n    }\n    \n    sum = sum + parseInt(binary, 16);\n  }\n  \n  return sum;\n};\n\n/*Given apositive integer N,  return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    digit = parseInt(i.toString(2), 2);\n    \n    while(digit > 0){\n      binary = binary + digit%2;\n      digit = parseInt(i/2, 2);\n    }\n    \n    sum = sum + parseInt(binary, 8);\n  }\n  \n  return sum;\n};\n\n/*Given apositive integer N,  return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    digit = parseInt(i.toString(2), 2);\n    \n    while(digit > 0){\n      binary = binary + digit%2;\n      digit = parseInt(i/2, 2);\n    }\n    \n    sum = sum + parseInt(binary, 16);\n  }\n  \n  return sum;\n};\n\n/*Given apositive integer N,  return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    digit = parseInt(i.toString(2), 2);\n    \n    while(digit > 0){\n      binary = binary + digit%2;\n      digit = parseInt(i/2, 2);\n    }\n    \n    sum = sum + parseInt(binary, 8);\n  }\n  \n  return sum;\n};\n\n/*Given apositive integer N,  return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    digit = parseInt(i.toString(2), 2);\n    \n    while(digit > 0){\n      binary = binary + digit%2;\n      digit = parseInt(i/2, 2);\n    }\n    \n    sum = sum + parseInt(binary, 16);\n  }\n  \n  return sum;\n};\n\n/*Given apositive integer N,  return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit;\n  let i;\n  \n  for(i = 1; i <= N; i++){\n    digit = parseInt(i.toString(2), 2);\n    \n    while(digit > 0){", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Given anon-empty listof i ntegers lst. add the even elements thatare at odd  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evens = lst.filter((item, index) => index % 2 === 0);\n  return evens.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. add the odd elements thatare at even  i ndices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add = (lst) => {\n  let odds = lst.filter((item, index) => index % 2!== 0);\n  return odds.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item;\n  }, 0);\n};\n\n/*Given anon-empty listof i ntegers lst. return the sum of all elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  return lst.reduce((acc, item, index) => {\n    return acc + item", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writea  function thattake s a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thattake s a string and returns an ordered version of it.\n O rdered ver sionof string, is a strin g w here all w ords (separated  by space)\n  are replaced by a new word whe re all the characte rs arra nged in\n  ascending ord erbased o n ascii value.\n  Note: You should keepthe order of words a ndblank  spaces i n the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let word = '';\n  let ord = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let n = 0;\n  let n2 = 0;\n  let n3 = 0;\n  let n4 = 0;\n  let n5 = 0;\n  let n6 = 0;\n  let n7 = 0;\n  let n8 = 0;\n  let n9 = 0;\n  let n10 = 0;\n  let n11 = 0;\n  let n12 = 0;\n  let n13 = 0;\n  let n14 = 0;\n  let n15 = 0;\n  let n16 = 0;\n  let n17 = 0;\n  let n18 = 0;\n  let n19 = 0;\n  let n20 = 0;\n  let n21 = 0;\n  let n22 = 0;\n  let n23 = 0;\n  let n24 = 0;\n  let n25 = 0;\n  let n26 = 0;\n  let n27 = 0;\n  let n28 = 0;\n  let n29 = 0;\n  let n30 = 0;\n  let n31 = 0;\n  let n32 = 0;\n  let n33 = 0;\n  let n34 = 0;\n  let n35 = 0;\n  let n36 = 0;\n  let n37 = 0;\n  let n38 = 0;\n  let n39 = 0;\n  let n40 = 0;\n  let n41 = 0;\n  let n42 = 0;\n  let n43 = 0;\n  let n44 = 0;\n  let n45 = 0;\n  let n46 = 0;\n  let n47 = 0;\n  let n48 = 0;\n  let n49 = 0;\n  let n50 = 0;\n  let n51 = 0;\n  let n52 = 0;\n  let n53 = 0;\n  let n54 = 0;\n  let n55 = 0;\n  let n56 = 0;\n  let n57 = 0;\n  let n58 = 0;\n  let n59 = 0;\n  let n60 = 0;\n  let n61 = 0;\n  let n62 = 0;\n  let n63 = 0;\n  let n64 = 0;\n  let n65 = 0;\n  let n66 = 0;\n  let n67 = 0;\n  let n68 = 0;\n  let n69 = 0;\n  let n70 = 0;\n  let n71 = 0;\n  let n72 = 0;\n  let n73 = 0;\n  let n74 = 0;\n  let n75 = 0;\n  let n76 = 0;\n  let n77 = 0;\n  let n78 = 0;\n  let n79 = 0;\n  let n80 = 0;\n  let n81 = 0;\n  let n82 = 0;\n  let n83 = 0;\n  let n84 = 0;\n  let n85 = 0;\n  let n86 = 0;\n  let n87 = 0;\n  let n88 = 0;\n  let n89 = 0;\n  let n90 = 0;\n  let n91 = 0;\n  let n92 = 0;\n  let n93 = 0;\n  let n94 = 0;\n  let n95 = 0;\n  let n96 = 0;\n  let n97 = 0;\n  let n98 = 0;\n  let n99 = 0;\n  let n100 = 0;\n  let n101 = 0;\n  let n102 = 0;\n  let n103 = 0;\n  let n104 = 0;\n  let n105 = 0;\n  let n106 = 0;\n  let n107 = 0;\n  let n108 = 0;\n  let n109 = 0;\n  let n110 = 0;\n  let n111 = '';\n  let n112 = '';\n  let n113 = '';\n  let n114 = '';\n  let n115 = '';\n  let n116 = '';\n  let n117 = '';\n  let n118 = '';\n  let n119 = '';\n  let n120 = '';\n  let n121 = '';\n  let n122 = '';\n  let n123 = '';\n  let n124 = '';\n  let n125 = '';\n  let n126 = '';\n  let n127 = '';\n  let n128 = '';\n  let n129 = '';\n  let n130 = '';\n  let n131 = '';\n  let n132 = '';\n  let n133 = '';\n  let n134 = '';\n  let n135 = '';\n  let n136 = '';\n  let n137 = '';\n  let n138 = '';\n  let n139 = '';\n  let n140 = '';\n  let n141 = '';\n  let n142 = '';\n  let n143 = '';\n  let n144 = '';\n  let n145 = '';\n  let n146 = '';\n  let n147 = '';\n  let n148 = '';\n  let n149 = '';\n  let n150 = '';\n  let n151 = '';\n  let n152 = '';\n  let n153 = '';\n  let n154 = '';\n  let n155 = '';\n  let n156 = '';\n  let n157 = '';\n  let n158 = '';\n  let n159 = '';\n  let n160 = '';\n  let n161 = '';\n  let n162 = '';\n  let n163 = '';\n  let n164 = '';\n  let n165 = '';\n  let n166 = '';\n  let n167 = '';\n  let n168 = '';\n  let n169 = '';\n  let n170 = '';\n  let n171 = '';\n  let n172 = '';\n  let n173 = '';\n  let n174 = '';\n  let n175 = '';\n  let n176 = '';\n  let n177 = '';\n  let n178 = '';\n  let n179 = '';\n  let n180 = '';\n  let n181 = '';\n  let n182 = '';\n  let n183 = '';\n  let n184 = '';\n  let n185 = '';\n  let n186 = '';\n  let n187 = '';\n  let n188 = '';\n  let n189 = '';\n  let n190 = '';\n  let n191 = '';\n  let n192 = '';\n  let n193 = '';\n  let n194 = '';\n  let n195 = '';\n  let n196 = '';\n  let n197 = '';\n  let n198 = '';\n  let n199 = '';\n  let n200 = '';\n  let n201 = '';\n  let n202 = '';\n  let n203 = '';\n  let n204 = '';\n  let n205 = '';\n  let n206 = '';\n  let n207 = '';\n  let n208 = '';\n  let n209 = '';\n  let n210 = '';\n  let n211 = '';\n  let n212 = '';\n  let n213 = '';\n  let n214 = '';\n  let n215 = '';\n  let n216 = '';\n  let n217 = '';\n  let n218 = '';\n  let n219 = '';\n  let n220 = '';\n  let n221 = '';\n  let n222 = '';\n  let n223 = '';\n  let n224 = '';\n  let n225 = '';\n  let n226 = '';\n  let n227 = '';\n  let n228 = '';\n  let n229 = '';\n  let n230 = '';\n  let n231 = '';\n  let n232 = '';\n  let n233 = '';\n  let n234 = '';\n  let n235 = '';\n  let n236 = '';\n  let n237 = '';\n  let n238 = '';\n  let n239 = '';\n  let n240 = '';\n  let n241 = '';\n  let n242 = '';\n  let n243 = '';\n  let n244 = '';\n  let n245 = '';\n  let n246 = '';\n  let n247 = '';\n  let n248 = '';\n  let n249 = '';\n  let n250 = '';\n  let n251 = '';\n  let n252 = '';\n  let n253 = '';\n  let n254 = '';\n  let n255 = '';\n  let n256 = '';\n  let n257 = '';\n  let n258 = '';\n  let n259 = '';\n  let n260 = '';\n  let n261 = '';\n  let n262 = '';\n  let n263 = '';\n  let n264 = '';\n  let n265 = '';\n  let n266 = '';\n  let n267 = '';", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2) ...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a 2 dimensio nal data, as a nested lists,\n  which issimilar to  m atrix, how ever,  unlike matrices,\n  e ach  row may c ontain a differ ent number of columns.\n  Given lst, and int eger x, find intege rs x in  the list,\n  and return  li st of t uples,[(x1, y1), (x2, y2)...] such that\n  each tuple is a  co ordin ate - (ro w, columns), starting with 0.\n  Sort coordinates initial ly by rows in ascending order.\n  Also, sort coo rdinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j = 0\n  let row = []\n  let rows = []\n  let i = 0\n  let j", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Givena n array of non-nega tive integers, return a copy of the given array af te r sorting, \n  yo u will sort the given  ar ray in asc ending order if  the sum( first index value, last index val ue) is odd,\n  or so rt it i n descending order if t hesum( fi rstindex value, last index value) is even.\n\n  Note:\n  * do n't chan ge the gi ven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena n array of non-nega tive integers, return a copy of the given array af te r sorting, \n  yo u will sort the given  ar ray in asc ending order if  the sum( first index value, last index val ue) is odd,\n  or so rt it i n descending order if t hesum( fi rstindex value, last index value) is even.\n\n  Note:\n  * don't chan ge the gi ven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findSum = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : false);\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is less than the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findLessThan = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num < target? true : false);\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is greater than the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findGreaterThan = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num > target? true : false);\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is equal to the target number but less than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findSumLessThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : (num < target? false : true));\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is equal to the target number but greater than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findSumGreaterThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : (num > target? false : true));\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is less than the target number but less than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findLessThanLessThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num < target? true : (num < target? false : true));\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is greater than the target number but greater than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findGreaterThanGreaterThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : (num > target? false : true));\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is equal to the target number but less than or equal to the target number but greater than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findSumLessThanGreaterThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : (num < target? false : true));\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is less than the target number but less than or equal to the target number but greater than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findSumLessThanLessThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : (num < target? false : true));\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is equal to the target number but greater than the target number but less than or equal to the target number but greater than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findSumGreaterThanLessThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : (num > target? false : true));\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is equal to the target number but greater than the target number but less than or equal to the target number but greater than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findSumGreaterThanGreaterThanLessThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : (num > target? false : true));\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is equal to the target number but less than the target number but greater than the target number but less than or equal to the target number but greater than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findSumLessThanLessThanGreaterThanLessThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : (num < target? false : true));\n};\n\n/*\n  Given a sorted array and a target number, return all numbers in the array which sum is equal to the target number but greater than the target number but less than the target number but greater than or equal to the target number but less than or equal to the target number.\n\n  Example:\n  Given nums = [1, 3, 5, 7], target = 9\n  Return [1, 3, 5, 7]\n*/\nconst findSumGreaterThanLessThanGreaterThanLessThanOrEqual = (nums, target) => {\n  const sum = nums.reduce((acc, curr) => acc + curr, 0);\n  return nums.filter(num => num === target? true : (num > target? false : true));\n};\n\n/*", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Createa  function encrypt t hat takes astring as an argument and\n returns ast ring encry ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Createa  function encrypt t hat takes astring as an argument and\n returns ast ring encry ptedwith the alphabet bei ngrotated.  The alphabetshould be rotated in a manner such that the  letters \n  shift d own bytwo multiplied to two p lac es.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let t = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';\n  let ts = '';\n  let t = '';", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* From agiven list of integ ers, generate a list of rolling maximumelement fo un d untilgi ven m oment\n  in the sequen ce. \n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (number", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist .\n Return null if thereis no such element.\n  \n  nextSmallest([1, 2 , 3, 4, 5]) ==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) ==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return rez\n}\n/*\n  You are  given a list of in tegers.\n  Write a function nextSmallest() that ret ur ns the 2nd  smal lest element of the l ist.\n Return null if thereis no such element.\n  \n  nextSmallest([5, 1, 4, 3, 2])==2\n nextSma llest([5, 1, 4, 3, 2])==2\n  nex tSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nc ons tnex tSmallest  = (lst) => {\n  let rez =  lst.find((el) => el < lst[0])\n  return ", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You'llbe given a string o f words, and your task is to count the number\n  of  b oredoms. A  bore dom is a sentence tha t s tarts with the word \"I\".  Sentences are delimited by '.', '?' or '! '.\n \n  For example: \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].includes('I')) {\n      bored++;\n    }\n  }\n  return ", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  thesum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  return isInteger(x + y + z)\n}\n\n/* Createa function that tak es 3 numbers.\n  Returns true if one of thenumbers  i s equalto  the sum of the other two,  an d all numb ers are integer s.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) �", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writea  function thattake s a message, and encodes in such a \n  way that itsw aps case o f all  letters, replaces al l v owels in  the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Writea  function thattake s a message, and encodes in such a \n  way that itsw aps case o f all  letters, replaces al l v owels in  the message w ith the letter that appears 2 places aheadof that \n  vowel in  the en glish alphabet. \n  Assu meonly le tters.\n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message;\n  let vowels = 'aeiouAEIOU';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsLength = vowels.length;\n  let alphabetLength = alphabet.length;\n  let encodedLength = encoded.length;\n  let encodedIndex = 0;\n  let encodedLengthIndex = 0;\n  let encodedLengthIndex2 = 0;\n  let encodedLengthIndex3 = 0;\n  let encodedLengthIndex4 = 0;\n  let encodedLengthIndex5 = 0;\n  let encodedLengthIndex6 = 0;\n  let encodedLengthIndex7 = 0;\n  let encodedLengthIndex8 = 0;\n  let encodedLengthIndex9 = 0;\n  let encodedLengthIndex10 = 0;\n  let encodedLengthIndex11 = 0;\n  let encodedLengthIndex12 = 0;\n  let encodedLengthIndex13 = 0;\n  let encodedLengthIndex14 = 0;\n  let encodedLengthIndex15 = 0;\n  let encodedLengthIndex16 = 0;\n  let encodedLengthIndex17 = 0;\n  let encodedLengthIndex18 = 0;\n  let encodedLengthIndex19 = 0;\n  let encodedLengthIndex20 = 0;\n  let encodedLengthIndex21 = 0;\n  let encodedLengthIndex22 = 0;\n  let encodedLengthIndex23 = 0;\n  let encodedLengthIndex24 = 0;\n  let encodedLengthIndex25 = 0;\n  let encodedLengthIndex26 = 0;\n  let encodedLengthIndex27 = 0;\n  let encodedLengthIndex28 = 0;\n  let encodedLengthIndex29 = 0;\n  let encodedLengthIndex30 = 0;\n  let encodedLengthIndex31 = 0;\n  let encodedLengthIndex32 = 0;\n  let encodedLengthIndex33 = 0;\n  let encodedLengthIndex34 = 0;\n  let encodedLengthIndex35 = 0;\n  let encodedLengthIndex36 = 0;\n  let encodedLengthIndex37 = 0;\n  let encodedLengthIndex38 = 0;\n  let encodedLengthIndex39 = 0;\n  let encodedLengthIndex40 = 0;\n  let encodedLengthIndex41 = 0;\n  let encodedLengthIndex42 = 0;\n  let encodedLengthIndex43 = 0;\n  let encodedLengthIndex44 = 0;\n  let encodedLengthIndex45 = 0;\n  let encodedLengthIndex46 = 0;\n  let encodedLengthIndex47 = 0;\n  let encodedLengthIndex48 = 0;\n  let encodedLengthIndex49 = 0;\n  let encodedLengthIndex50 = 0;\n  let encodedLengthIndex51 = 0;\n  let encodedLengthIndex52 = 0;\n  let encodedLengthIndex53 = 0;\n  let encodedLengthIndex54 = 0;\n  let encodedLengthIndex55 = 0;\n  let encodedLengthIndex56 = 0;\n  let encodedLengthIndex57 = 0;\n  let encodedLengthIndex58 = 0;\n  let encodedLengthIndex59 = 0;\n  let encodedLengthIndex60 = 0;\n  let encodedLengthIndex61 = 0;\n  let encodedLengthIndex62 = 0;\n  let encodedLengthIndex63 = 0;\n  let encodedLengthIndex64 = 0;\n  let encodedLengthIndex65 = 0;\n  let encodedLengthIndex66 = 0;\n  let encodedLengthIndex67 = 0;\n  let encodedLengthIndex68 = 0;\n  let encodedLengthIndex69 = 0;\n  let encodedLengthIndex70 = 0;\n  let encodedLengthIndex71 = 0;\n  let encodedLengthIndex72 = 0;\n  let encodedLengthIndex73 = 0;\n  let encodedLengthIndex74 = 0;\n  let encodedLengthIndex75 = 0;\n  let encodedLengthIndex76 = 0;\n  let encodedLengthIndex77 = 0;\n  let encodedLengthIndex78 = 0;\n  let encodedLengthIndex79 = 0;\n  let encodedLengthIndex80 = 0;\n  let encodedLengthIndex81 = 0;\n  let encodedLengthIndex82 = 0;\n  let encodedLengthIndex83 = 0;\n  let encodedLengthIndex84 = 0;\n  let encodedLengthIndex85 = 0;\n  let encodedLengthIndex86 = 0;\n  let encodedLengthIndex87 = 0;\n  let encodedLengthIndex88 = 0;\n  let encodedLengthIndex89 = 0;\n  let encodedLengthIndex90 = 0;\n  let encodedLengthIndex91 = 0;\n  let encodedLengthIndex92 = 0;\n  let encodedLengthIndex93 = 0;\n  let encodedLengthIndex94 = 0;\n  let encodedLengthIndex95 = 0;\n  let encodedLengthIndex96 = 0;\n  let encodedLengthIndex97 = 0;\n  let encodedLengthIndex98 = 0;\n  let encodedLengthIndex99 = 0;\n  let encodedLengthIndex100 = 0;\n  let encodedLengthIndex101 = 0;\n  let encodedLengthIndex102 = 0;\n  let encodedLengthIndex103 = 0;\n  let encodedLengthIndex104 = 0;\n  let encodedLengthIndex105 = 0;\n  let encodedLengthIndex106 = 0;\n  let encodedLengthIndex107 = 0;\n  let encodedLengthIndex108 = 0;\n  let encodedLengthIndex109 = 0;\n  let encodedLengthIndex110 = 0;\n  let encodedLengthIndex111 = 0;\n  let encodedLengthIndex112 = 0;\n  let encodedLengthIndex113 = 0;\n  let encodedLengthIndex114 = 0;\n  let encodedLengthIndex115 = 0;\n  let encodedLengthIndex116 = 0;\n  let encodedLengthIndex117 = 0;\n  let encodedLengthIndex118 = 0;\n  let encodedLengthIndex119 = 0;\n  let encodedLengthIndex120 = 0;\n  let encodedLengthIndex121 = 0;\n  let encodedLengthIndex122 = 0;\n  let encodedLengthIndex123 = 0;\n  let encodedLengthIndex124 = 0;\n  let encodedLengthIndex125 = 0;\n  let encodedLengthIndex126 = 0;\n  let encodedLengthIndex127 = 0;\n  let encodedLengthIndex128 = 0;\n  let encodedLengthIndex129 = 0;\n  let encodedLengthIndex130 = 0;\n  let encodedLengthIndex131 = 0;\n  let encodedLengthIndex132 = 0;\n  let encodedLengthIndex133 = 0;\n  let encodedLengthIndex134 = 0;\n  let encodedLengthIndex135 = 0;\n  let encodedLengthIndex136 = 0;\n  let encodedLengthIndex137 = 0;\n  let encodedLengthIndex138 = 0;\n  let encodedLengthIndex139 = 0;\n  let encodedLengthIndex140 = 0;\n  let encodedLengthIndex141 = 0;\n  let encodedLengthIndex142 = 0;\n  let encodedLengthIndex143 = 0;\n  let encodedLengthIndex144 = 0;\n  let encodedLengthIndex145 = 0;\n  let encodedLengthIndex146 = 0;\n  let encodedLengthIndex147 = 0;\n  let encodedLengthIndex148 = 0;\n  let encodedLengthIndex149 = 0;\n  let encodedLengthIndex150 = 0;\n  let encodedLengthIndex151 = 0;\n  let encodedLengthIndex152 = 0;\n  let encodedLengthIndex153 = 0;\n  let encodedLengthIndex154 = 0;\n  let encodedLengthIndex155 = 0;\n  let encodedLengthIndex156 = 0;\n  let encodedLengthIndex157 = 0;\n  let encodedLengthIndex158 = 0;\n  let encodedLengthIndex159 = 0;\n  let encodedLengthIndex160 = 0;\n  let encodedLengthIndex161 = 0;\n  let encodedLengthIndex162 = 0;\n  let encodedLengthIndex163 = 0;\n  let encodedLengthIndex164 = 0;\n  let encodedLengthIndex165 = 0;\n  let encodedLengthIndex166 = 0;\n  let encodedLengthIndex167 = 0;\n  let encodedLengthIndex168 = 0;\n  let encodedLengthIndex169 = 0;\n  let encodedLengthIndex170 = 0;\n  let encodedLengthIndex171 = 0;\n  let encodedLengthIndex172 = 0;\n  let encodedLengthIndex173 = 0;\n  let encodedLengthIndex174 = 0;\n  let encodedLengthIndex175 = 0;\n  let encodedLengthIndex176 = 0;\n  let encodedLengthIndex177 = 0;\n  let encodedLengthIndex178 = 0;\n  let encodedLengthIndex179 = 0;\n  let encodedLengthIndex180 = 0;\n  let encodedLengthIndex181 = 0;\n  let encodedLengthIndex182 = 0;\n  let encodedLengthIndex183 = 0;\n  let encodedLengthIndex184 = 0;\n  let encodedLengthIndex185 = 0;\n  let encodedLengthIndex186 = 0;\n  let encodedLengthIndex187 = 0;\n  let encodedLengthIndex188 = 0;\n  let encodedLengthIndex189 = 0;\n  let encodedLengthIndex190 = 0;\n  let encodedLengthIndex191 = 0;\n  let encodedLengthIndex192 = 0;\n  let encodedLengthIndex193 = 0;\n  let encodedLengthIndex194 = 0;\n  let encodedLengthIndex", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*You aregiven a list of int egers.\n  You need to find the largest prime valuean d return t he su m of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let maxDigit = 0;\n  let maxPrime = 0;\n  let maxPrimeDigit = 0;\n  let maxPrimeDigit2 = 0;\n  let maxPrimeDigit3 = 0;\n  let maxPrimeDigit4 = 0;\n  let maxPrimeDigit5 = 0;\n  let maxPrimeDigit6 = 0;\n  let maxPrimeDigit7 = 0;\n  let maxPrimeDigit8 = 0;\n  let maxPrimeDigit9 = 0;\n  let maxPrimeDigit10 = 0;\n  let maxPrimeDigit11 = 0;\n  let maxPrimeDigit12 = 0;\n  let maxPrimeDigit13 = 0;\n  let maxPrimeDigit14 = 0;\n  let maxPrimeDigit15 = 0;\n  let maxPrimeDigit16 = 0;\n  let maxPrimeDigit17 = 0;\n  let maxPrimeDigit18 = 0;\n  let maxPrimeDigit19 = 0;\n  let maxPrimeDigit20 = 0;\n  let maxPrimeDigit21 = 0;\n  let maxPrimeDigit22 = 0;\n  let maxPrimeDigit23 = 0;\n  let maxPrimeDigit24 = 0;\n  let maxPrimeDigit25 = 0;\n  let maxPrimeDigit26 = 0;\n  let maxPrimeDigit27 = 0;\n  let maxPrimeDigit28 = 0;\n  let maxPrimeDigit29 = 0;\n  let maxPrimeDigit30 = 0;\n  let maxPrimeDigit31 = 0;\n  let maxPrimeDigit32 = 0;\n  let maxPrimeDigit33 = 0;\n  let maxPrimeDigit34 = 0;\n  let maxPrimeDigit35 = 0;\n  let maxPrimeDigit36 = 0;\n  let maxPrimeDigit37 = 0;\n  let maxPrimeDigit38 = 0;\n  let maxPrimeDigit39 = 0;\n  let maxPrimeDigit40 = 0;\n  let maxPrimeDigit41 = 0;\n  let maxPrimeDigit42 = 0;\n  let maxPrimeDigit43 = 0;\n  let maxPrimeDigit44 = 0;\n  let maxPrimeDigit45 = 0;\n  let maxPrimeDigit46 = 0;\n  let maxPrimeDigit47 = 0;\n  let maxPrimeDigit48 = 0;\n  let maxPrimeDigit49 = 0;\n  let maxPrimeDigit50 = 0;\n  let maxPrimeDigit51 = 0;\n  let maxPrimeDigit52 = 0;\n  let maxPrimeDigit53 = 0;\n  let maxPrimeDigit54 = 0;\n  let maxPrimeDigit55 = 0;\n  let maxPrimeDigit56 = 0;\n  let maxPrimeDigit57 = 0;\n  let maxPrimeDigit58 = 0;\n  let maxPrimeDigit59 = 0;\n  let maxPrimeDigit60 = 0;\n  let maxPrimeDigit61 = 0;\n  let maxPrimeDigit62 = 0;\n  let maxPrimeDigit63 = 0;\n  let maxPrimeDigit64 = 0;\n  let maxPrimeDigit65 = 0;\n  let maxPrimeDigit66 = 0;\n  let maxPrimeDigit67 = 0;\n  let maxPrimeDigit68 = 0;\n  let maxPrimeDigit69 = 0;\n  let maxPrimeDigit70 = 0;\n  let maxPrimeDigit71 = 0;\n  let maxPrimeDigit72 = 0;\n  let maxPrimeDigit73 = 0;\n  let maxPrimeDigit74 = 0;\n  let maxPrimeDigit75 = 0;\n  let maxPrimeDigit76 = 0;\n  let maxPrimeDigit77 = 0;\n  let maxPrimeDigit78 = 0;\n  let maxPrimeDigit79 = 0;\n  let maxPrimeDigit80 = 0;\n  let maxPrimeDigit81 = 0;\n  let maxPrimeDigit82 = 0;\n  let maxPrimeDigit83 = 0;\n  let maxPrimeDigit84 = 0;\n  let maxPrimeDigit85 = 0;\n  let maxPrimeDigit86 = 0;\n  let maxPrimeDigit87 = 0;\n  let maxPrimeDigit88 = 0;\n  let maxPrimeDigit89 = 0;\n  let maxPrimeDigit90 = 0;\n  let maxPrimeDigit91 = 0;\n  let maxPrimeDigit92 = 0;\n  let maxPrimeDigit93 = 0;\n  let maxPrimeDigit94 = 0;\n  let maxPrimeDigit95 = 0;\n  let maxPrimeDigit96 = 0;\n  let maxPrimeDigit97 = 0;\n  let maxPrimeDigit98 = 0;\n  let maxPrimeDigit99 = 0;\n  let maxPrimeDigit100 = 0;\n  let maxPrimeDigit101 = 0;\n  let maxPrimeDigit102 = 0;\n  let maxPrimeDigit103 = 0;\n  let maxPrimeDigit104 = 0;\n  let maxPrimeDigit105 = 0;\n  let maxPrimeDigit106 = 0;\n  let maxPrimeDigit107 = 0;\n  let maxPrimeDigit108 = 0;\n  let maxPrimeDigit109 = 0;\n  let maxPrimeDigit110 = 0;\n  let maxPrimeDigit111 = 0;\n  let maxPrimeDigit112 = 0;\n  let maxPrimeDigit113 = 0;\n  let maxPrimeDigit114 = 0;\n  let maxPrimeDigit115 = 0;\n  let maxPrimeDigit116 = 0;\n  let maxPrimeDigit117 = 0;\n  let maxPrimeDigit118 = 0;\n  let maxPrimeDigit119 = 0;\n  let maxPrimeDigit120 = 0;\n  let maxPrimeDigit121 = 0;\n  let maxPrimeDigit122 = 0;\n  let maxPrimeDigit123 = 0;\n  let maxPrimeDigit124 = 0;\n  let maxPrimeDigit125 = 0;\n  let maxPrimeDigit126 = 0;\n  let maxPrimeDigit127 = 0;\n  let maxPrimeDigit128 = 0;\n  let maxPrimeDigit129 = 0;\n  let maxPrimeDigit130 = 0;\n  let maxPrimeDigit131 = 0;\n  let maxPrimeDigit132 = 0;\n  let maxPrimeDigit133 = 0;\n  let maxPrimeDigit134 = 0;\n  let maxPrimeDigit135 = 0;\n  let maxPrimeDigit136 = 0;\n  let maxPrimeDigit137 = 0;\n  let maxPrimeDigit138 = 0;\n  let maxPrimeDigit139 = 0;\n  let maxPrimeDigit140 = 0;\n  let maxPrimeDigit141 = 0;\n  let maxPrimeDigit142 = 0;\n  let maxPrimeDigit143 = 0;\n  let maxPrimeDigit144 = 0;\n  let maxPrimeDigit145 = 0;\n  let maxPrimeDigit146 = 0;\n  let maxPrimeDigit147 = 0;\n  let maxPrimeDigit148 = 0;\n  let maxPrimeDigit149 = 0;\n  let maxPrimeDigit150 = 0;\n  let maxPrimeDigit151 = 0;\n  let maxPrimeDigit152 = 0;\n  let maxPrimeDigit153 = 0;\n  let maxPrimeDigit154 = 0;\n  let maxPrimeDigit155 = 0;\n  let maxPrimeDigit156 = 0;\n  let maxPrimeDigit157 = 0;\n  let maxPrimeDigit158 = 0;\n  let maxPrimeDigit159 = 0;\n  let maxPrimeDigit160 = 0;\n  let maxPrimeDigit161 = 0;\n  let maxPrimeDigit162 = 0;\n  let maxPrimeDigit163 = 0;\n  let maxPrimeDigit164 = 0;\n  let maxPrimeDigit165 = 0;\n  let maxPrimeDigit166 = 0;\n  let maxPrimeDigit167 = 0;\n  let maxPrimeDigit", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  dictionary, return  true if all keys are strings in lower   case oral l keys are  stri ngs in upper case, el sereturn fal se.\n  The funct ion should return false is the given dictio nary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCaseSensitive = true;\n  for (let key in dict) {\n    if (dict[key] instanceof String) {\n      if (dict[key].toLowerCase() === dict[key.toUpperCase()]) {\n        isCaseSensitive = false;\n        break;\n      }\n    }\n  }\n  return isCaseSensitive;\n};\n\n/*\n  Given a string, return its length in characters.\n  Examples:\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello \") should return 3.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello \") should return 3.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return 4.\n  lengthOf(\"Hello World\") should return 5.\n  lengthOf(\"Hello\") should return ", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Implemen t a function that t akes an non-negative integer and returns an arrayof  the first  n\n integers that are pri menumbers an d less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that t akes an non-negative integer and returns an arrayof  the first  n\n  integers that are pri menumbers an d less than n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count > 0) {\n    arr.push(count);\n    count--;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that t akes an non-negative integer and returns an arrayof  the first  n\n  integers that are pri menumbers an d less than n.\n  for example:\n  countUpToAndDownTo(5) => [2,3]\n  countUpToAndDownTo(11) => [2,3,5,7]\n  countUpToAndDownTo(0) => []\n  countUpToAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countUpToAndDownTo(1) => []\n  countUpToAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that t akes an non-negative integer and returns an arrayof  the first  n\n  integers that are pri menumbers an d less than n.\n  for example:\n  countDownToAndUpTo(5) => [2,3]\n  countDownToAndUpTo(11) => [2,3,5,7]\n  countDownToAndUpTo(0) => []\n  countDownToAndUpTo(20) => [2,3,5,7,11,13,17,19]\n  countDownToAndUpTo(1) => []\n  countDownToAndUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToAndUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count > 0) {\n    arr.push(count);\n    count--;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that t akes an non-negative integer and returns an arrayof  the first  n\n  integers that are pri menumbers an d less than n.\n  for example:\n  countUpToAndDownTo(5) => [2,3]\n  countUpToAndDownTo(11) => [2,3,5,7]\n  countUpToAndDownTo(0) => []\n  countUpToAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countUpToAndDownTo(1) => []\n  countUpToAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that t akes an non-negative integer and returns an arrayof  the first  n\n  integers that are pri menumbers an d less than n.\n  for example:\n  countDownToAndUpTo(5) => [2,3]\n  countDownToAndUpTo(11) => [2,3,5,7]\n  countDownToAndUpTo(0) => []\n  countDownToAndUpTo(20) => [2,3,5,7,11,13,17,19]\n  countDownToAndUpTo(1) => []\n  countDownToAndUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToAndUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count > 0) {\n    arr.push(count);\n    count--;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that t akes an non-negative integer and returns an arrayof  the first  n\n  integers that are pri menumbers an d less than n.\n  for example:\n  countUpToAndDownTo(5) => [2,3]\n  countUpToAndDownTo(11) => [2,3,5,7]\n  countUpToAndDownTo(0) => []\n  countUpToAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countUpToAndDownTo(1) => []\n  countUpToAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that t akes an non-negative integer and returns an arrayof  the first  n\n  integers that are pri menumbers an d less than n.\n  for example:\n  countDownToAndUpTo(5) => [2,3]\n  countDownToAndUpTo(11) => [2,3,5,7]\n  countDownToAndUpTo(0) => []\n  countDownToAndUpTo(20) => [2,3,5,7,11,13,17,19]\n  countDownToAndUpTo(1) => []\n  countDownToAndUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownToAndUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count > 0) {\n    arr.push(count);\n    count--;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that t akes an non-negative integer and returns an arrayof  the first  n\n  integers that are pri menumbers an d less than n.\n  for example:\n  countUpToAndDownTo(5) => [2,3]\n  countUpToAndDownTo(11) => [2,3,5,7]\n  countUpToAndDownTo(0) => []\n  countUpToAndDownTo(20) => [2,3,5,7,11,13,17,19]\n  countUpToAndDownTo(1) => []\n  countUpToAndDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToAndDownTo = (n) => {\n  let arr = [];\n  let count = 0;\n  while (count < n) {\n    arr.push(count);\n    count++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that t akes an non-negative integer and returns an arrayof  the first  n\n  integers that are pri menumbers an d less than n.\n  for example:\n  countDownToAndUpTo(5) => [2,3]\n  countDownToAndUpTo(11", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete  the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*Complete  the function thattakes two integers and returns \n  the product of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  \n  if(a>0){\n    product = multiply(a, b)\n  }\n  \n  return product;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the sum of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 280.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 140.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  \n  if(a>0){\n    sum = a + multiply(a, b)\n  }\n  \n  return sum;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the difference of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  difference(148, 412) should return 148.\n  difference(19, 28) should return 28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return -15.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  \n  if(a>0){\n    difference = a - multiply(a, b)\n  }\n  \n  return difference;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the absolute value of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 1851.\n  absolute(14,-15) should return -15.\n  */\nconst absolute = (a, b) => {\n  let absolute = 0;\n  \n  if(a>0){\n    absolute = Math.abs(a)\n  }\n  \n  return absolute;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the square root of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  sqrt(148, 412) should return 148.\n  sqrt(19, 28) should return 28.\n  sqrt(2020, 1851) should return 1851.\n  sqrt(14,-15) should return 0.\n  */\nconst sqrt = (a, b) => {\n  let sqrt = 0;\n  \n  if(a>0){\n    sqrt = Math.sqrt(a)\n  }\n  \n  return sqrt;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the cube root of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  cubeRoot(148, 412) should return 148.\n  cubeRoot(19, 28) should return 28.\n  cubeRoot(2020, 1851) should return 1851.\n  cubeRoot(14,-15) should return 0.\n  */\nconst cubeRoot = (a, b) => {\n  let cubeRoot = 0;\n  \n  if(a>0){\n    cubeRoot = Math.pow(a, 3)\n  }\n  \n  return cubeRoot;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the inverse of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 0.\n  */\nconst inverse = (a, b) => {\n  let inverse = 0;\n  \n  if(a>0){\n    inverse = Math.pow(b, 1/3)\n  }\n  \n  return inverse;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the inverse of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 0.\n  */\nconst inverse2 = (a, b) => {\n  let inverse = 0;\n  \n  if(a>0){\n    inverse = Math.pow(b, 1/3)\n  }\n  \n  return inverse;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the inverse of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 0.\n  */\nconst inverse3 = (a, b) => {\n  let inverse = 0;\n  \n  if(a>0){\n    inverse = Math.pow(b, 1/3)\n  }\n  \n  return inverse;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the inverse of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 0.\n  */\nconst inverse4 = (a, b) => {\n  let inverse = 0;\n  \n  if(a>0){\n    inverse = Math.pow(b, 1/3)\n  }\n  \n  return inverse;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the inverse of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 0.\n  */\nconst inverse5 = (a, b) => {\n  let inverse = 0;\n  \n  if(a>0){\n    inverse = Math.pow(b, 1/3)\n  }\n  \n  return inverse;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the inverse of t he ir unitdi gits. \n  Assume the input i s a lways vali d.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 0.\n  */\nconst inverse6 = (a, b) => {\n  let inverse = 0;\n  \n  if(a>0){\n    inverse = Math.pow(b, 1/3)\n  }\n  \n  return inverse;\n}\n\n/*\n  Complete the function thattakes two integers and returns \n  the inverse of t he ir unitdi gits. \n  Assume the input i s a ", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Givena  string s, count th e number ofuppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  Givena  string s, count th e number ofuppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'A' && s[l] <= 'Z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* Createa function that tak es a value (string) representing a number\n and re tu rns thecl osest  integer to it. If th e n umber is e quidistant\n  fr om two integers, round it away from zero.\n Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num;\n  let num2;\n  let num3;\n  let num4;\n  let num5;\n  let num6;\n  let num7;\n  let num8;\n  let num9;\n  let num10;\n  let num11;\n  let num12;\n  let num13;\n  let num14;\n  let num15;\n  let num16;\n  let num17;\n  let num18;\n  let num19;\n  let num20;\n  let num21;\n  let num22;\n  let num23;\n  let num24;\n  let num25;\n  let num26;\n  let num27;\n  let num28;\n  let num29;\n  let num30;\n  let num31;\n  let num32;\n  let num33;\n  let num34;\n  let num35;\n  let num36;\n  let num37;\n  let num38;\n  let num39;\n  let num40;\n  let num41;\n  let num42;\n  let num43;\n  let num44;\n  let num45;\n  let num46;\n  let num47;\n  let num48;\n  let num49;\n  let num50;\n  let num51;\n  let num52;\n  let num53;\n  let num54;\n  let num55;\n  let num56;\n  let num57;\n  let num58;\n  let num59;\n  let num60;\n  let num61;\n  let num62;\n  let num63;\n  let num64;\n  let num65;\n  let num66;\n  let num67;\n  let num68;\n  let num69;\n  let num70;\n  let num71;\n  let num72;\n  let num73;\n  let num74;\n  let num75;\n  let num76;\n  let num77;\n  let num78;\n  let num79;\n  let num80;\n  let num81;\n  let num82;\n  let num83;\n  let num84;\n  let num85;\n  let num86;\n  let num87;\n  let num88;\n  let num89;\n  let num90;\n  let num91;\n  let num92;\n  let num93;\n  let num94;\n  let num95;\n  let num96;\n  let num97;\n  let num98;\n  let num99;\n  let num100;\n  let num101;\n  let num102;\n  let num103;\n  let num104;\n  let num105;\n  let num106;\n  let num107;\n  let num108;\n  let num109;\n  let num110;\n  let num111;\n  let num112;\n  let num113;\n  let num114;\n  let num115;\n  let num116;\n  let num117;\n  let num118;\n  let num119;\n  let num120;\n  let num121;\n  let num122;\n  let num123;\n  let num124;\n  let num125;\n  let num126;\n  let num127;\n  let num128;\n  let num129;\n  let num130;\n  let num131;\n  let num132;\n  let num133;\n  let num134;\n  let num135;\n  let num136;\n  let num137;\n  let num138;\n  let num139;\n  let num140;\n  let num141;\n  let num142;\n  let num143;\n  let num144;\n  let num145;\n  let num146;\n  let num147;\n  let num148;\n  let num149;\n  let num150;\n  let num151;\n  let num152;\n  let num153;\n  let num154;\n  let num155;\n  let num156;\n  let num157;\n  let num158;\n  let num159;\n  let num160;\n  let num161;\n  let num162;\n  let num163;\n  let num164;\n  let num165;\n  let num166;\n  let num167;\n  let num168;\n  let num169;\n  let num170;\n  let num171;\n  let num172;\n  let num173;\n  let num174;\n  let num175;\n  let num176;\n  let num177;\n  let num178;\n  let num179;\n  let num180;\n  let num181;\n  let num182;\n  let num183;\n  let num184;\n  let num185;\n  let num186;\n  let num187;\n  let num188;\n  let num189;\n  let num190;\n  let num191;\n  let num192;\n  let num193;\n  let num194;\n  let num195;\n  let num196;\n  let num197;\n  let num198;\n  let num199;\n  let num200;\n  let num201;\n  let num202;\n  let num203;\n  let num204;\n  let num205;\n  let num206;\n  let num207;\n  let num208;\n  let num209;\n  let num210;\n  let num211;\n  let num212;\n  let num213;\n  let num214;\n  let num215;\n  let num216;\n  let num217;\n  let num218;\n  let num219;\n  let num220;\n  let num221;\n  let num222;\n  let num223;\n  let num224;\n  let num225;\n  let num226;\n  let num227;\n  let num228;\n  let num229;\n  let num230;\n  let num231;\n  let num232;\n  let num233;\n  let num234;\n  let num235;\n  let num236;\n  let num237;\n  let num238;\n  let num239;\n  let num240;\n  let num241;\n  let num242;\n  let num243;\n  let num244;\n  let num245;\n  let num246;\n  let num247;\n  let num248;\n  let num249;\n  let num250;\n  let num251;\n  let num252;\n  let num253;\n  let num254;\n  let num255;\n  let num256;\n  let num257;\n  let num258;\n  let num259;\n  let num260;\n  let num261;\n  let num262;\n  let num263;\n  let num264;\n  let num265;\n  let num266;\n  let num267;\n  let num268;\n  let num269;\n  let num270;\n  let num271;\n  let num272;\n  let num273;\n  let num274;\n  let num275;\n  let num276;\n  let num277;\n  let num278;\n  let num279;\n  let num280;\n  let num281;\n  let num28", "passed": 0}
